FEMAP
API Reference
Version 2021.2
 
Proprietary and Restricted Rights Notice
This software and related document ation are proprietary to Siemens Digital Industries Software Inc.
© 2021 Siemens Digital Industries So ftware Inc. All Rights Reserved.
Siemens and the Siemens logo ar e registered trademarks of Siemens AG. NX is a trademark or regi stered trademark of 
Siemens Digital Indust ries Software Inc. or its subsidiaries in the Un ited States and in other countries. All other trade-
marks, registered trademarks or servi ce marks belong to their respective holders.
The following copyright refers only to the “bmp 2raster.exe” executable distributed with FEMAP:
NeuQuant Neural-Net Quantization AlgorithmCopyright (c) 1994 Anthony DekkerNEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994.See “Kohonen neural networks for optimal colour quantizatio n” in “Network: Computation in Neural Systems” V ol. 5 
(1994) pp 351-367 for a discussion of the algorithm.
See also  http://members.ozem ail.com.au/~dekker/NEUQUANT.HTML
Any party obtaining a copy of these files from the author, dir ectly or indirectly, is granted, free of charge, a full and 
unrestricted irrevocable, world-wide, paid up, royalty-free, nonexclusive right and license to deal in this software and 
documentation files (the “Software”), including without limitation the rights to use, copy, modify, merge, publish, dis-
tribute, sublicense, and/ or sell copies of the Software, an d to permit pers ons who receive copies from any such party to 
do so, with the only requirement being that this copyright notice remain intact.Siemens DI Software Simcenter Femap
Web: http://www.femap.com
Customer Support
Phone: (714) 952-5444, (800) 955-0000 (In US & Canada)
Web: https://support.sw.siemens.com/en-US/
Conventions 
This manual uses different fonts to highlight command names or input that you must type.
Throughout this manual, you will see references  to Windows. Windows refers to Microsoft® Windows 7, Windows 8, 
Windows 8.1, and Windows 10 (64-bit versions only). You will need one of these operating environments to run FEMAP for the PC. This manual assumes that you are familiar with the genera l use of the operating environment. If you 
are not, you can refer to the Windows User’s Guide for additional assistance.
Similarly, throughout the manual all references to FE MAP, refer to the latest version of our software.a:setup Shows text that you should type. 
OK, Cancel Shows a command name or text that you will see in a 
dialog box.
 
FEMAP API Reference Table 
of Contents
 Proprietary and Restricted Rights Notice
1. Introduction to the FEMAP API
 1.1 Objects, Methods and Proper ties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .51
 1.1.1 The Application Object  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . .51
 1.1.2 Other Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .51
 1.2 Data Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . . .52
 1.2.1 Using Visual Basic .NET . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . .52
 1.2.2 Arrays and Variants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .53
 1.2.3 An Array Shortcut  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .55
 1.2.4 Arrays and Visual Basic .NET . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .55
 1.2.5 Arrays and Visual C++. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . .56
 1.2.6 Using Multi-dimensional Arrays . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . .56
 1.2.7 Multiple Definitions of Array Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .57
 1.3 Memory Allocation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . .57
 1.4 Global Constants. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .58
2. Using the FEMAP API
 2.1 Using Visual Basic .NET . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .59
 2.2 Loading Data into Excel . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . .59
 2.3 Loading Data from Excel . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .61
 2.4 Working with Output in FEMAP 2020.1 and above  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .64
 2.5 Using the ReadFile Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .71
 2.6 Storing Your Own Data in the FEMAP Database . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .72
 2.7 Creating a Rigid Element . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . .74
 2.8 Working with Loads and Constraints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .77
 2.8.1 Creating Multiple Loads at  Once in a Single Load Set . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . .77
 2.8.2 Walking Through Mesh-Based  Loads and Constraints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 77
 2.9 Charting FEMAP Results in Excel. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . .79
 2.10 Calling the API from Visual C++. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .84
 2.11 Calling the API from Python  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . .87
 2.12 Creating Output in FEMAP prior to 2020.1 (OBSOLETE). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .100
3. The FEMAP Application Object
 3.1 Getting Started . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .104
 3.1.1 Using the FEMAP API Programming Window . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .1 04
 3.1.2  Creating a FEMAP Object. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .104
 3.1.3 Using the FEMAP Type Library  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . .105
 3.2 Working with the User Interface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .108
 3.2.1 Running as two separate applications. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .108
 3.2.2 Running FEMAP as a hidden server  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . .109
 3.2.3 Running your application as a FEMAP add-in. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .109
 3.2.4 Embedding FEMAP in your application  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .110
 3.2.4.1 Embedding FEMAP in your Application. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .11 1
 3.2.4.2 Capturing the FEMAP Messages . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 112
 3.2.5 API Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 116
 3.3 FEMAP Object Proper ties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . 117
 3.3.1 Global Properties - File menu comma nds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 117
 3.3.1.1 File, Import, Geometry - Geom etry Replacement Options. . . . . . . . . . . . . . . . . . . . . . . . . . . 117
 3.3.1.2 File, Page Setup. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 119
 3.3.1.3 File, Preferences - Messages tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 121
 3.3.1.4 File, Preferences - Views tab  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 123
 3.3.1.5 File, Preferences  - Graphics tab  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 127
 3.3.1.6 File, Preferences - User Interface tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 133
 3.3.1.7 File, Preferences - Database tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 137
 3.3.1.8 File, Preferences - Solvers  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 139
 3.3.1.9 File, Preferences - Geometry/Model tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 141
 3.3.1.10 File, Preferences - Interfaces tab. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 149
 3.3.1.11 File, Preferences - Results tab. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154
 3.3.1.12 File, Preferences - Library/Startup tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 158
 3.3.1.13 File, Preferences - Color tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 160
 3.3.1.14 File, Preferences - Spaceball tab . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 162
 3.3.2 Global Integer Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 163
 3.3.3 Global Real Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 170
 3.3.4 Global Boolean Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 172
 3.3.5 Global String Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 175
 3.3.6 Entity Types  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 176
 3.3.7 FEMAP Constants. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 178
 3.4 File Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . 230
 3.4.1 File Open/Exit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
 3.4.1.1 feFileNew . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 231
 3.4.1.2 feFileOpen. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 232
 3.4.1.3 feFileClose  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 233
 3.4.1.4 feFileExit. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 234
 3.4.2 File Save . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 235
 3.4.2.1 feFileSave . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 235
 3.4.2.2 feFileSaveAs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 236
 3.4.2.3 feFileTimedSave . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 237
 3.4.3 Import Geometry. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 238
 3.4.3.1 feFileReadAcisOpt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 238
 3.4.3.2 feFileReadAcis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 240
 3.4.3.3 feFileReadCatia. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 241
 3.4.3.4 feFileReadCatia2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 243
 3.4.3.5 feFileReadCatiaV5 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 245
 3.4.3.6 feFileReadDxf. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 247
 3.4.3.7 feFileReadIgesAdv . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 249
 3.4.3.8 feFileReadIges  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 251
 3.4.3.9 feFileReadParasolidOpt  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 253
 3.4.3.10 feFileReadParasolid  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 255
 3.4.3.11 feFileReadProe . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 256
 3.4.3.12 feFileReadSolidEdge  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 257
 3.4.3.13 feFileReadStepOpt2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 258
 3.4.3.14 feFileReadStep  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 260
 3.4.3.15 feFileReadStepOpt - Obsolete  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 261
 3.4.3.16 feFileReadJT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 264
 3.4.3.17 feFileReadStl. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 265
 3.4.3.18 feFileReadUg  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 266
 3.4.3.19 feFileReadSolidWorks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 267
 3.4.4 Import Analysis Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268
 3.4.4.1 feFileReadAbaqus. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 268
 3.4.4.2 feFileReadAnsys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 269
 3.4.4.3 feFileReadDyna  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 270
 3.4.4.4 feFileReadMarc. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 271
 3.4.4.5 feFileReadNastran. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 272
 3.4.4.6 feFileReadPatran. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 273
 3.4.4.7 feFileReadIdeas. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 274
 3.4.5 Import Analysis Results  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 275
 3.4.5.1 feFileReadAbaqusResults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 275
 3.4.5.2 feFileReadAnsysResults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 276
 3.4.5.3 feFileReadDynaResults. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 277
 3.4.5.4 feFileReadMarcResults. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 278
 3.4.5.5 feFileReadNastranResults. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 279
 3.4.5.6 feFileReadCSVResults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 280
 3.4.6 Attach To Results File. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 281
 3.4.6.1 feFileAttachResults. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 281
 3.4.6.2 feFileAttachManage . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 282
 3.4.6.3 feFileAttachInfo  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 283
 3.4.6.4 feFileAttachSaveV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 285
 3.4.6.5 feFileAttachSave2V2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 287
 3.4.6.6 feFileAttachByOutset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 289
 3.4.7 Import/Export Neutral File . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 290
 3.4.7.1 feFileReadNeutral . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 290
 3.4.7.2 feFileReadNeutral2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 291
 3.4.7.3 feFileReadNeutral3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 292
 3.4.7.4 feFileWriteNeutral  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 294
 3.4.7.5 feFileWriteNeutral2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 295
 3.4.7.6 feFileWriteFNOV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 297
 3.4.7.7 feFileWriteFNO2V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 298
 3.4.7.8 feFileWriteFNO3V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 299
 3.4.8 Export Geometry. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 300
 3.4.8.1 feFileWriteAcis. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 300
 3.4.8.2 feFileWriteIges . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 301
 3.4.8.3 feFileWriteParasolid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 302
 3.4.8.4 feFileWriteStep2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 303
 3.4.8.5 feFileWriteStep - Obsolete . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 304
 3.4.8.6 feFileWriteJT  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 305
 3.4.8.7 feFileWriteStl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 306
 3.4.8.8 feFileWriteTopologyStl  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 307
 3.4.8.9 feFileWriteVrml . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 308
 3.4.9 Export Analysis Model . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309
 3.4.9.1 feFileWriteAbaqus  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 309
 3.4.9.2 feFileWriteAnsys  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 310
 3.4.9.3 feFileWriteDyna . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 311
 3.4.9.4 feFileWriteIdeas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 312
 3.4.9.5 feFileWriteMarc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 313
 3.4.9.6 feFileWriteNastran . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 314
 3.4.9.7 feFileWriteSTAAD. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 315
 3.4.10 Notes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 317
 3.4.10.1 feNotesGet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 317
 3.4.10.2 feNotesPut. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 318
 3.4.11 Print and Copy. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . 319
 3.4.11.1 feFilePageSetupSave. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 319
 3.4.11.2 feFilePageSetupReset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 320
 3.4.11.3 feFilePrint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 321
 3.4.11.4 feFilePrint2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 322
 3.4.11.5 feFilePictureCopy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 323
 3.4.11.6 feFilePictureCopy2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 324
 3.4.11.7 feFilePictureSave  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 325
 3.4.11.8 feFilePictureSave2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 326
 3.4.11.9 feFilePictureReplay. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 327
 3.4.11.10 feFilePictureSaveJT  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 328
 3.4.11.11 feFilePictureSaveJTM ultiResults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 330
 3.4.11.12 feFileMessageCopy. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 332
 3.4.11.13 feFileMessageSave . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 333
 3.4.11.14 feFileMessageSelect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 334
 3.4.11.15 feFileMessageLineNumber. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 335
 3.4.12 Rebuild and Preferences . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 336
 3.4.12.1 feFileRebuild. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 336
 3.4.12.2 feFileRecoverDBData. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 337
 3.4.12.3 feFilePreferencesSave. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 338
 3.4.12.4 feFilePreferencesReset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 339
 3.4.12.5 feRunIOTest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 340
 3.4.13 Version Number  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 341
 3.4.13.1 feModelFileVersionV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 341
 3.5 Tool Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 342
 3.5.1 Units  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 343
 3.5.1.1 feToolUnitConvertFactors  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 343
 3.5.1.2 feToolUnitConvert  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 344
 3.5.2 Variables . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 346
 3.5.2.1 feVarPut  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 346
 3.5.2.2 feVarGet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 347
 3.5.2.3 feVarEval  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 348
 3.5.3 Layers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 349
 3.5.3.1 feLayerPut. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 349
 3.5.3.2 feLayerGet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 350
 3.5.4 Text . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . 351
 3.5.4.1 feTextPut. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 351
 3.5.4.2 feTextMultiPut  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 353
 3.5.4.3 feTextGet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 355
 3.5.5 Measure . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 357
 3.5.5.1 feMeasureDistance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 357
 3.5.5.2 feMeasureDistanceToPlane  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 358
 3.5.5.3 feMeasureDistan ceBetweenGeometry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 59
 3.5.5.4 feMeasureDistan ceBetweenNodesV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3 61
 3.5.5.5 feMeasureDistanceBetw eenNodes2V2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 36 2
 3.5.5.6 feMeasureDistan ceBetweenLines. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 363
 3.5.5.7 feMeasureDistanceBetw eenSolids . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 364
 3.5.5.8 feMeasureAngle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 365
 3.5.5.9 feMeasureAngleBetweenNodesV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 366
 3.5.5.10 feMeasureCurve  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 367
 3.5.5.11 feMeasureSurfaceArea . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 368
 3.5.5.12 feMeasureSolidMassProp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 369
 3.5.5.13 feMeasureMeshMassProp. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 370
 3.5.5.14 feMeasureSurfSectionProp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 372
 3.5.5.15 feMeasureMeshSectionProp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 373
 3.5.6 Checks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 374
 3.5.6.1 feCheckCoincidentNode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 374
 3.5.6.2 feCheckCoincidentNode2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 376
 3.5.6.3 feCheckCoincidentNode3 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 377
 3.5.6.4 feCheckCoincidentNode4 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 378
 3.5.6.5 feCheckCoincidentPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 380
 3.5.6.6 feCheckCoincidentCurve  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 382
 3.5.6.7 feCheckPlanarNodes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 383
 3.5.6.8 feCheckCoincidentElem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 384
 3.5.6.9 feCheckElemFixup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 385
 3.5.6.10 feCheckElemDistortion. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 386
 3.5.6.11 feCheckElemDistortion2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 388
 3.5.6.12 feGetElemDistortion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 390
 3.5.6.13 feGetElemDistortion2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 391
 3.5.6.14 feCheckElemNormal. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 392
 3.5.6.15 feCheckConstraints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 393
 3.5.6.16 feCheckCoincidentLoads  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 394
 3.5.6.17 feCheckSumForces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 395
 3.5.6.18 feCheckSumForces2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 397
 3.5.6.19 feCheckElemInte rference . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 399
 3.5.6.20 feCheckElemInte rference2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 400
 3.5.7 Charting Pane  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 401
 3.5.7.1 feChartPaneGetDisplayed. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 401
 3.5.7.2 feChartPaneSetDisplayed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 402
 3.5.7.3 feChartPaneCopy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 403
 3.6 Geometry Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 404
 3.6.1 Lines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 405
 3.6.1.1 feLinePoints  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 405
 3.6.1.2 feLineHorzVert . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 406
 3.6.1.3 feLineAtAngle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 407
 3.6.1.4 feLineParallel . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 408
 3.6.1.5 feLineMidline . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 409
 3.6.1.6 feLinePointTangent. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 410
 3.6.1.7 feLine2Tangent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 411
 3.6.1.8 feLineRectangle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 412
 3.6.1.9 feLinePointIDs  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 413
 3.6.2 Arcs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 414
 3.6.2.1 feArcCenterStartEnd. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 414
 3.6.2.2 feArcRadiusStartEnd  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 415
 3.6.2.3 feArcAngleStartEnd . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 416
 3.6.2.4 feArcAngleCenterStart . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 417
 3.6.2.5 feArcChordCenterStart . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 418
 3.6.2.6 feArcPoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 419
 3.6.2.7 feArcCenterPoints. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 420
 3.6.2.8 feArcTangentStartEnd  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 421
 3.6.3 Circles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422
 3.6.3.1 feCircleRadius. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 422
 3.6.3.2 feCircleDiameter. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 423
 3.6.3.3 feCircleCenter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 424
 3.6.3.4 feCircle2Point . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 425
 3.6.3.5 feCircleConcentric  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 426
 3.6.3.6 feCircle3Point . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 427
 3.6.3.7 feCircleCenterPoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 428
 3.6.3.8 feCircleCenterTangent  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 429
 3.6.3.9 feCircleTangentTangent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 430
 3.6.4 Splines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 431
 3.6.4.1 feSplinePoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 431
 3.6.4.2 feSplineTangent  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 433
 3.6.4.3 feSplineEllipse  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 434
 3.6.4.4 feSplineParabola . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 435
 3.6.4.5 feSplineHyperbola  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 436
 3.6.4.6 feSplineBlend . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 437
 3.6.4.7 feSplineMultipleCurves  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 438
 3.6.5 Curves from Surfaces Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 439
 3.6.5.1 feCurveUpd ateSurfaces  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 439
 3.6.5.2 feCurveIntersectSolids  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 440
 3.6.5.3 feCurveProjectOntoSolid  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 441
 3.6.5.4 feCurveP rojectOntoSurfaces. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 442
 3.6.5.5 feCurveParametri cOnSurface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 443
 3.6.5.6 feCurveSlice . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 444
 3.6.5.7 feCurv eOffsetCurveWasher . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 445
 3.6.5.8 feCurveOffsetCurveWasher2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 446
 3.6.5.9 feCurveSplitPointToPoint. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 447
 3.6.5.10 feCurveSplitPointToEdge . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 448
 3.6.5.11 feCurveSplitEdgeToEdge . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 449
 3.6.5.12 feCurvePad . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 450
 3.6.6 Curve Modification Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 452
 3.6.6.1 feCurveTrim . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 452
 3.6.6.2 feCurveExtend  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 453
 3.6.6.3 feCurveBreak  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 454
 3.6.6.4 feCurvesBreakAtIntersections  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 455
 3.6.6.5 feCurveJoin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 456
 3.6.6.6 feCurveFillet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 457
 3.6.6.7 feCurveChamfer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 458
 3.6.7 Boundaries. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 459
 3.6.7.1 feBoundaryFromPoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 459
 3.6.7.2 feBoundaryFromCurves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 460
 3.6.7.3 feBoundaryFromSu rfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 461
 3.6.7.4 feBoundaryAddSurfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 462
 3.6.7.5 feBoundaryUpdateSurfaces  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 463
 3.6.8 Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 464
 3.6.8.1 feSurfaceCorners. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 464
 3.6.8.2 feSurfaceCornersMultiple. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 465
 3.6.8.3 feSurfaceEdgeCurves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 467
 3.6.8.4 feSurfaceAlignedCurves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 468
 3.6.8.5 feSurfaceRuled . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 470
 3.6.8.6 feSurfaceExtrude. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 471
 3.6.8.7 feSurfaceRevolve  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 472
 3.6.8.8 feSurfaceSweep. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 473
 3.6.8.9 feSurfaceNormalDeviation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 474
 3.6.8.10 feSurfaceConvert  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 475
 3.6.8.11 feSurfaceNonManifoldAdd. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 476
 3.6.8.12 feSurfaceNonManifoldAdd2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 477
 3.6.8.13 feSurfaceNonManifoldAdd3. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 478
 3.6.8.14 feSurfaceNonMani foldAddExpress  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 479
 3.6.8.15 feSurfaceRecoverManifold . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 480
 3.6.8.16 feSurfaceExtract . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 481
 3.6.8.17 feSurfaceRemoveHole  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 482
 3.6.8.18 feSurfaceFromMesh . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 483
 3.6.8.19 feSurfaceFromMesh2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 484
 3.6.8.20 feSurfaceRayFire  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 485
 3.6.8.21 feImprintLocationInSurface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 486
 3.6.9 Midsurfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 487
 3.6.9.1 feSurfaceMidSingle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 487
 3.6.9.2 feSurfaceMidAuto. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 488
 3.6.9.3 feSurfaceMidAuto2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 489
 3.6.9.4 feSurfaceMidAuto3. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 490
 3.6.9.5 feSurfaceMidAuto4. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 491
 3.6.9.6 feSurfaceOffsetTangent  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 492
 3.6.9.7 feSurfaceOffset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 493
 3.6.9.8 feSurfaceOffset2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 494
 3.6.9.9 feSurfaceMidAttrib . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 495
 3.6.9.10 feSurfaceT rimToSolid  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 496
 3.6.9.11 feSurfaceT rimWithCurves  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 497
 3.6.9.12 feSurfaceE xtend  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 498
 3.6.9.13 feSurfaceGetUnde rlying . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 499
 3.6.10 Solids. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 500
 3.6.10.1 feSolidPrimitive  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 500
 3.6.10.2 feSolidExtrude  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 502
 3.6.10.3 feSolidRevolve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 503
 3.6.10.4 feSolidExplode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 504
 3.6.10.5 feSolidStitch . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 505
 3.6.10.6 feSolidStitchNoCleanup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 506
 3.6.10.7  feSolidSweep . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 507
 3.6.10.8 feSolidSweepBetween  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 508
 3.6.10.9 feSolidFillet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 509
 3.6.10.10 feSolidChamfer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 510
 3.6.10.11 feSolidAdd  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 511
 3.6.10.12 feSolidRemove . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 512
 3.6.10.13 feSolidCommon  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 513
 3.6.10.14 feSolidEmbed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 514
 3.6.10.15 feSolidEmbedMultiple  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 515
 3.6.10.16 feSolidIntersect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 516
 3.6.10.17 feSolidShell. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 517
 3.6.10.18 feSolidSlice . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 518
 3.6.10.19 feSolidSliceMatch. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 519
 3.6.10.20 feSolidSlice2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 520
 3.6.10.21 feSolidSliceAlongFace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 521
 3.6.10.22 feSolidSliceAlongFace2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 522
 3.6.10.23 feSolidSliceWithSheet2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 523
 3.6.10.24 feSolidSliceWith Curve2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 524
 3.6.10.25 feSolidEmbedFace  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 526
 3.6.10.26 feSolidCleanup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 527
 3.6.10.27 feSolidCleanupAdvanced . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 528
 3.6.10.28 feSolidRemoveFace  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 530
 3.6.10.29 feSolidRemoveCurve  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 531
 3.6.10.30 feSolidExtendToSurface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 532
 3.6.10.31 feSolidFillCavity. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 533
 3.6.10.32 feSolidRemoveBlendsBelowRadius . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 53 4
 3.6.10.33 feSolidRemoveRedundantPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 535
 3.6.10.34 feSolidMidSurfaceManualInput . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 536
 3.6.10.35 feSolidRayFire  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 537
 3.6.10.36 feSolidAlignSplits. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 538
 3.6.10.37 feSolidThicken . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 539
 3.6.10.38 feSolidInsideMulti  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 540
 3.6.11 Geometry and Mesh Generation Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 541
 3.6.11.1 feGenerateCopy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 541
 3.6.11.2 feGenerateCopy2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 543
 3.6.11.3 feGenerateRadialCopy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 545
 3.6.11.4 feGenerateRadialCopy2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 546
 3.6.11.5 feGenerateScale  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 548
 3.6.11.6 feGenerateScale2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 549
 3.6.11.7 feGenerateRotate. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 551
 3.6.11.8 feGenerateRotate2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 552
 3.6.11.9 feGenerateReflect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 554
 3.6.11.10 feGenerateReflect2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 555
 3.6.12 Meshing Toolbox - Geometry Editing Tool Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 55 7
 3.6.12.1 feCurveProject CurvesOntoSurfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  557
 3.6.12.2 feSolidExtendEdgesToS urfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 558
 3.6.12.3 feSolidMovePointOntoGeometry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  559
 3.6.13 Creating FEMAP geometry from Parasolid Geometry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 560
 3.6.13.1 feCurveSolidToFEMAP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 560
 3.6.13.2 feSolidExtractCenterlines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 561
 3.6.14 Nodal Area on Geometry  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 562
 3.6.14.1 feGetNodalAreaOrLength. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 562
 3.6.14.2 feGetNodalAreaOnSurf ace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 563
 3.7 Connection Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 564
 3.7.1 Generating Connections  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 565
 3.7.1.1 feConnectAuto  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 565
 3.7.1.2 feConnectAuto2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 566
 3.8 Model Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 568
 3.8.1 Model Load Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 569
 3.8.1.1 feLoadCombine. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 569
 3.8.1.2 feLoadFromFreebody . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 570
 3.8.2 Model Constraint Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 571
 3.8.2.1 feBCCombine . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 571
 3.8.3 Model Output Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 572
 3.8.3.1 feOutputProcessV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 572
 3.8.3.2 feOutputProcessCopyV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 574
 3.8.3.3 feOutputProcessMergeV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 575
 3.8.3.4 feOutputProcessLinearCombinationV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 76
 3.8.3.5 feOutputProcessRSSCombinationV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 77
 3.8.3.6 feOutputProcessConvertV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 578
 3.8.3.7 feOutputProcessEnvelopeV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 579
 3.8.3.8 feOutputProcessEnvelopeF romSetsV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5 81
 3.8.3.9 feOutputProcessErrorEstimateV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 583
 3.8.3.10 feOutputFromLoad . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 584
 3.8.3.11 feOutputTransform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 585
 3.8.3.12 feOutputTransform2V2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 586
 3.8.3.13 feOutputCalculate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 588
 3.8.3.14 feOutputConvertV92VectorIDV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  589
 3.8.3.15 feOutputConvertV2019VectorIDToV2020V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 590 3.8.3.16 feOutputConvertV2020VectorIDToV2019V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 591 3.8.3.17 feOutputForceBalance  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 592
 3.8.3.18 feOutputForceBalance2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 594
 3.8.3.19 feOutputCompareV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 595
 3.8.3.20 feCompute3DInvariants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 596
 3.8.3.21 feCompute2DInvariants . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 597
 3.8.3.22 feResultsToDataTableV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 598
 3.8.3.23 feResultsToDataTable2V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 600
 3.8.3.24 feResultsRankingToDataTableV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  602
 3.8.3.25 feOutputGlobalPlyV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 604
 3.8.4 Model Information Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 606
 3.8.4.1 feElemCountOnProp. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 606
 3.9 Meshing Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 607
 3.9.1 Mesh Control. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 608
 3.9.1.1 feMeshSizePoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .
 . . . . . . . 608
 3.9.1.2 feMeshSizeCurve  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 609
 3.9.1.3 feMeshSizeCurve2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 611
 3.9.1.4 feMeshSizeCurveMatchNodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 613
 3.9.1.5 feMeshSizeCurveMatchXYZ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 614
 3.9.1.6 feMeshSizePropogate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 615
 3.9.1.7 feMeshSizeSurface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 616
 3.9.1.8 feMeshSizeSolid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 618
 3.9.1.9 feMeshAttrPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 620
 3.9.1.10 feMeshAttrCurve  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 621
 3.9.1.11 feMeshAttrSurface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 623
 3.9.1.12 feMeshAttrSolid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 624
 3.9.1.13 feMeshApproachSurface. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 625
 3.9.2 Meshing Geometry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 626
 3.9.2.1 feMeshPoint  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 626
 3.9.2.2 feMeshPoint2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 628
 3.9.2.3 feMeshCurve. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 630
 3.9.2.4 feMeshCurve2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 632
 3.9.2.5 feMeshSurface2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 634
 3.9.2.6 feMeshSurface - obsolete . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 636
 3.9.2.7 feMeshSurfaceByAttributes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 638
 3.9.2.8 feMeshTetSolid3. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 639
 3.9.2.9 feMeshTetSolid2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 641
 3.9.2.10 feMeshTetSolid. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 643
 3.9.2.11 feMeshHexSolid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 645
 3.9.2.12 feMeshHexSolidFromElement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 647
 3.9.3 Other Meshing. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . 649
 3.9.3.1 feMeshBetween. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 649
 3.9.3.2 feMeshClosestLink . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 651
 3.9.3.3 feMeshCoincidentLink . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 652
 3.9.3.4 feMeshUnzip. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 653
 3.9.3.5 feMeshUnzip2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 654
 3.9.3.6 feMeshConnectRigid  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 656
 3.9.3.7 feMeshEdgeSplit. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 659
 3.9.3.8 feMeshEdgeSplit2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 660
 3.9.3.9 feMeshTransition  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 661
 3.9.3.10 feMeshRemesh . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 664
 3.9.3.11 feMeshConvertFacets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 666
 3.9.3.12 feMeshCleanupSlivers  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 667
 3.9.3.13 feMeshEdgeRemoval . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 668
 3.9.3.14 feMeshBuildRemeshRegions . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 669
 3.9.3.15 feMeshEditRemeshRegions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 670
 3.9.3.16 feMeshRemeshRegions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 671
 3.9.3.17 feMeshEdgeMembers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 673
 3.9.3.18 feMeshEdgeMembers2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 674
 3.9.3.19 feMeshSmooth  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 675
 3.9.3.20 feMeshSmooth2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 676
 3.9.3.21 feMeshExtrudeElem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 677
 3.9.3.22 feMeshExtrudeElem2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 679
 3.9.3.23 feMeshExtrudeCurve  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 681
 3.9.3.24 feMeshRevolveElem. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 682
 3.9.3.25 feMeshRevolveCurve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 683
 3.9.3.26 feMeshSweepElem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 684
 3.9.3.27 feMeshSweepCurve  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 685
 3.9.4 Meshing Utilities. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . 687
 3.9.4.1 feNodesBetweenNodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 687
 3.9.4.2 feSolidElementsInARow  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 689
 3.9.5 Mesh Copy/Radial Copy/Scale/Rotate/Reflect commands. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 691
 3.10 Modification Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 692
 3.10.1 Projection  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 693
 3.10.1.1 feProjectOnto  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 693
 3.10.1.2 feProjectOntoCurve  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 695
 3.10.1.3 feProjectOntoSurface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 696
 3.10.1.4 feProjectOntoVector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 697
 3.10.1.5 feProjectAlongVector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 698
 3.10.1.6 feProjectOntoPl ane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 699
 3.10.1.7 feProjectOntoSolid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 700
 3.10.2 Move, Rotate and Scale. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 701
 3.10.2.1 feMoveTo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 701
 3.10.2.2 feMoveBy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 702
 3.10.2.3 feMoveOffset  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 703
 3.10.2.4 feRotateTo. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 704
 3.10.2.5 feRotateBy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 705
 3.10.2.6 feAlignTo  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 706
 3.10.2.7 feAlignBetweenCsys. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 707
 3.10.2.8 feScale. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 708
 3.10.3 Edit  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 709
 3.10.3.1 feModifyEdit. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 709
 3.10.4 Color and Layer. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 710
 3.10.4.1 feModifyColor  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 710
 3.10.4.2 feModifyColorMultiple. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 711
 3.10.4.3 feModifyTransparency . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 712
 3.10.4.4 feModifyLayer  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 713
 3.10.5 Renumbering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 714
 3.10.5.1 feRenumber. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 714
 3.10.5.2 feRenumberOpt. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 715
 3.10.5.3 feRenumberOpt2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 717
 3.10.6 Associativity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 719
 3.10.6.1 feAutoMeshAssociativity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 719
 3.10.6.2 feMeshAttach  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 720
 3.10.6.3 feMeshAttachNodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 721
 3.10.6.4 feMeshDetach . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 722
 3.10.7 Other Updates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . 723
 3.10.7.1 feModifyDefCSys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 723
 3.10.7.2 feModifyOutCSys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 724
 3.10.7.3 feModifyPermBC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 725
 3.10.7.4 feModifySplineOrder  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 726
 3.10.7.5 feModifySplineKnots . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 727
 3.10.7.6 feModifyReverseCurve. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 728
 3.10.7.7 feModifyNoMergeCurve  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 729
 3.10.7.8 feModifySurfaceDivisions  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 730
 3.10.7.9 feModifySurfaceNormal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 731
 3.10.7.10 feModifySolidFacetting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 732
 3.10.7.11 feModifySuperelementID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 733
 3.10.7.12 feModifyLoadPhase  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 734
 3.10.8 Element Updates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 735
 3.10.8.1 feModifyElemPropID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 735
 3.10.8.2 feModifyPropMatlID  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 736
 3.10.8.3 feModifyMaterialAngle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 737
 3.10.8.4 feModifyElemReverse2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 738
 3.10.8.5 feModifyElemReverse  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 739
 3.10.8.6 feModifyElemRelease. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 740
 3.10.8.7 feModifyElemOrder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 741
 3.10.8.8 feModifyMidside  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 742
 3.10.8.9 feModifyFormulation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 743
 3.10.8.10 feModifySplitQuads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 744
 3.10.8.11 feModifyOffsets  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 745
 3.10.8.12 feModifyOffsetsToRefPt  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 746
 3.10.8.13 feModifyOrient . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 747
 3.10.8.14 feModifyElemType. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 748
 3.10.8.15 feModifyBeamWarping  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 749
 3.10.8.16 feModifyLineElementDirection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 750
 3.10.8.17 feConnectLinearParabolic. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 751
 3.10.8.18 feModifyPlateThickOf fsetBetweenNodes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 752
 3.10.8.19 feModifyPlateThickOffsetValue. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 754
 3.10.8.20  feModifyPlateThickOf fsetEquation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  756
 3.10.8.21 feModifyPlateThickOffsetReset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 758
 3.11 Delete Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 759
 3.11.1 feDeleteAll  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 760
 3.11.2 feDelete . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 761
 3.11.3 feDeleteMesh  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 762
 3.11.4 feDeleteLoads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . 763
 3.11.5 feDeleteConstraints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 764
 3.11.6 feDeleteOutputV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 765
 3.11.7 feDeleteOutput2V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 766
 3.11.8 feDeleteOutputEntryV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 767
 3.12 View, Window and Visibility Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 768
 3.12.1 feViewVisible (or feWindowVisible) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 769
 3.12.2 feViewRedraw (or feWindowRedraw) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 770
 3.12.3 feViewRegenerate (or feWindowRegenerate)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 771
 3.12.4 feViewAutoscaleAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 772
 3.12.5 feViewAutoscaleVisible . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 773
 3.12.6 feViewAllViews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 774
 3.12.7 feViewShow (or feWindowShow)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 775
 3.12.8 feViewShow2 (or feWindowShow2) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 776
 3.12.9 feViewTile (or feWindowTile) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 777
 3.12.10 feWindowTileHorz . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 778
 3.12.11 feViewCascade (or feWindowCascade) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 779
 3.12.12 feWindowMinimize  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 780
 3.12.13 feWindowMaximize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 781
 3.12.14 feWindowRestore . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 782
 3.12.15 feWindowSetRect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 783
 3.12.16 feWindowSetSize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 784
 3.12.17 feWindowTitle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 785
 3.12.18 feEntitySetVisibility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 786
 3.12.19 feEntitySetVisibility2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 787
 3.12.20 feEntityGetVisibility . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 788
 3.12.21 feAppUpdateModelBox  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 790
 3.12.22 feViewShowMultiple  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 791
 3.13 Group Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 792
 3.13.1 feGroupEvaluate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 793
 3.13.2 feGroupBoolean  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 794
 3.13.3 feGroupBoolean2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 795
 3.13.4 feGroupCombine. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 796
 3.13.5 feGroupGenerate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 797
 3.13.6 feGroupGenerate2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 798
 3.13.7 feGroupGenSolid  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 800
 3.13.8 feGroupGenProp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 801
 3.13.9 feGroupGenMatl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 802
 3.13.10 feGroupGenElemType  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 803
 3.13.11 feGroupGenElemShape. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 804
 3.13.12 feGroupPeel. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . 805
 3.13.13 feGroupMoveToLayer  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 806
 3.13.14 feGroupsContaining  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 807
 3.13.15 feGroupGenVisible . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 808
 3.13.16 feGroupFromCriteria. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 809
 3.13.17 feGroupCondense . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 810
 3.14 Free Edge and Free Face Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 811
 3.14.1 feElementFreeEdge . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 812
 3.14.2 feElementFreeFace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 813
 3.14.3 feEdgesOfFreeFaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 814
 3.15 Standard Dialog Boxes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 815
 3.15.1 Coordinate Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 816
 3.15.1.1 feCoordPick  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 816
 3.15.1.2 feCoordPickByMethod . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 817
 3.15.1.3 feCoordFromWorkplane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 818
 3.15.1.4 feCoordToWorkplane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 819
 3.15.1.5 feCoordInters ectCurves  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 820
 3.15.1.6 feCoordIntersectLines. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 821
 3.15.1.7 feCoordOntoCurve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 822
 3.15.1.8 feCoordAlongCurve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 823
 3.15.1.9 feCoordCurveMidpoint. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 824
 3.15.1.10 feCoordCurveCenter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 825
 3.15.1.11 feCoordOntoSurface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 826
 3.15.1.12 feCoordInSurface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 827
 3.15.1.13 feCoordSurfaceInters ect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 828
 3.15.1.14 feCoordOnPoint  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 829
 3.15.1.15 feCoordOnNode  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 830
 3.15.1.16 feCoordTransform. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 831
 3.15.1.17 feCoordArrayTransform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 832
 3.15.1.18 feCoordArrayTransform2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 833
 3.15.1.19 feCoordColinear . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 834
 3.15.1.20 feCoordToDirCos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 835
 3.15.1.21 feCoordRotate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 836
 3.15.1.22 feCoordOntoPlane. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 837
 3.15.1.23 feCoordOntoLine  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 838
 3.15.1.24 feCoordPlaneIntersect. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 839
 3.15.1.25 feCoordVectorPlaneInt ersect  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 840
 3.15.1.26 feRotationTransform. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 841
 3.15.1.27 feRotationToDirCos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 842
 3.15.1.28 feRotationFromDirCos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 843
 3.15.2 Vector Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 844
 3.15.2.1 feVectorTransf orm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 844
 3.15.2.2 feVectorArrayTransform  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 845
 3.15.2.3 feVectorFromB eam. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 847
 3.15.2.4 feVectorToBeam. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 848
 3.15.2.5 feVectorLength . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 849
 3.15.2.6 feVectorCrossPoduct  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 850
 3.15.2.7 feVectorDotProduct  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 851
 3.15.2.8 feVectorNormalizedDotProduct . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 852
 3.15.2.9 feVectorPerpendicular  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 853
 3.15.2.10 feVectorAngle. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 854
 3.15.2.11 feVectorAngleAxis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 855
 3.15.2.12 feVectorPlaneIntersect  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 856
 3.15.2.13 feVectorUnit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 857
 3.15.2.14 feVectorPick . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 858
 3.15.2.15 feVectorPickByMethod  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 859
 3.15.2.16 feVectorAxis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 860
 3.15.2.17 feVectorTangentToCurve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 861
 3.15.2.18 feVectorNormalToSurf ace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 862
 3.15.2.19 feVectorNormalToView . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 863
 3.15.2.20 feVectorAxisOfSurface. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 864
 3.15.2.21 feVectorRotate  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 865
 3.15.3 Plane Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 866
 3.15.3.1 fePlanePick . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 866
 3.15.3.2 fePlanePickByMethod  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 867
 3.15.3.3 fePlaneLocation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 868
 3.15.3.4 fePlaneNodes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 869
 3.15.3.5 fePlanePoints. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 870
 3.15.3.6 fePlaneBisect. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 871
 3.15.3.7 fePlaneCSys  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 872
 3.15.3.8 fePlaneSurfaceNormal  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 873
 3.15.3.9 fePlaneCurveNormal. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 874
 3.15.3.10 fePlaneViewAlign. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 875
 3.15.3.11 fePlaneRotate  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 876
 3.15.4 Entity Selection Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 877
 3.15.4.1 Selection Dialog Boxes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 877
 3.15.4.2 feSelectOutputV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 878
 3.15.4.3 feSelectOutput2V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 881
 3.15.4.4 feSelectOutputSets  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 883
 3.15.4.5 feSelectOutputSets2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 885
 3.15.4.6 feGetElementFaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 887
 3.15.4.7 feGetElementEdges. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 888
 3.15.4.8 feGetElementFacesFromSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 889
 3.15.4.9 feGetElementAdjacentFaces. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 890
 3.15.5 Other Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 891
 3.15.5.1 feGetReal  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 891
 3.15.5.2 feGetRealLength . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 892
 3.15.5.3 feGetInt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 893
 3.15.5.4 feAppMessageBox  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 894
 3.15.5.5 feAppColorPalette. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 895
 3.15.5.6 feCreateFunction. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 896
 3.15.5.7 feAppColorCreate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 897
 3.15.5.8 feAppColorGetBaseColor. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 898
 3.15.5.9 feAppColorGetPattern  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 899
 3.15.5.10 feAppColorGetLinestyle. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 900
 3.15.5.11 feAppColorGetRGB . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 901
 3.15.5.12 feAppLoadColorPalette  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 902
 3.15.5.13 feAppLoadContourPalette  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 903
 3.15.5.14 feScreenPctPick  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 904
 3.15.5.15 feOutputValueGetRGB. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 905
 3.16 User Interface Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 906
 3.16.1 Model Activation and Management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 907
 3.16.1.1 feAppGetModel  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 907
 3.16.1.2 feAppGetModel32  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 908
 3.16.1.3 feAppGetModelName. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 909
 3.16.1.4 feAppGetModelByName  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 910
 3.16.1.5 feAppSetModel . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 911
 3.16.1.6 feAppSetModel32 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 912
 3.16.1.7 feAppSetModelByName. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 913
 3.16.1.8 feAppCountModels. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 914
 3.16.1.9 feAppGetAllModels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 915
 3.16.1.10 feAppModelContents  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 916
 3.16.1.11 feAppModelDefragment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 917
 3.16.2 Window Management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 918
 3.16.2.1 feAppManageToolbars . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 918
 3.16.2.2 feAppManagePanes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 919
 3.16.2.3 feAppUpdatePanes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 920
 3.16.2.4 feAppManageStatusBar  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 921
 3.16.2.5 feAppManageGraphicsTabs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 922
 3.16.3 View Management  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 923
 3.16.3.1 feAppGetActiveView . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 923
 3.16.3.2 feAppSetActiveView  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 924
 3.16.3.3 feAppGetAllViews . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 925
 3.16.4 Toolbar and Menu Customization. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 926
 3.16.4.1 feGetUserCommands  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 926
 3.16.4.2 feAddUserCommand  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 927
 3.16.4.3 feDeleteUserCommand. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 928
 3.16.4.4 feGetToolbars . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 929
 3.16.4.5 feAddToolbar  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 930
 3.16.4.6 feAddToolbarSubmenu. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 931
 3.16.4.7 feAddToolbarSubmenuSubmenu . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 932
 3.16.4.8 feDeleteToolbar  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 933
 3.16.4.9 feResetToolbar  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 934
 3.16.4.10 feSetToolbarVisible  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 935
 3.16.4.11 feGetMenuCommands  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 936
 3.16.4.12 feGetMenuCommand . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 937
 3.16.4.13 feGetToolbarCommands. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 938
 3.16.4.14 feGetToolbarSubCommands. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 939
 3.16.4.15 feGetToolbarCommand  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 940
 3.16.4.16 feAddToolbarCommand . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 941
 3.16.4.17 feAddToolbarSubmenuCommand  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 942 3.16.4.18 feAddToolbarUserCommand . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 943
 3.16.4.19 feAddToolbarSubmenuUserCommand. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 944 3.16.4.20 feSetToolbarCommandVisible . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 945
 3.16.4.21 feSetToolbarSeparator  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 946
 3.16.4.22 feSetToolbarCommandTitle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 947
 3.16.4.23 feSetToolbarCommandBitmap . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  948
 3.16.4.24 feSaveToolbarLayout . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 949
 3.16.4.25 feLoadToolbarLayout . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 950
 3.16.5 Embedding Applications. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 951
 3.16.5.1 feAppRegisterAddIn . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 951
 3.16.5.2 feAppRegisterAddInPane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 952
 3.16.5.3 feAppRegisterAddInPaneWithFrame . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 95 3
 3.16.5.4 feAppEmbed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 954
 3.16.5.5 feAppBringToTop. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 955
 3.16.5.6 feAppPosition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 956
 3.16.5.7 feAppShowWindow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 957
 3.16.5.8 feAppVisible . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 958
 3.16.5.9 feAppRegisterMessageHandler  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 959
 3.16.5.10 feAppEventCallback . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 960
 3.16.5.11 feAppRunningApplicationInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 961
 3.16.5.12 feAppGetRunningApplication  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 963
 3.16.6 Locking FEMAP . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 964
 3.16.6.1 feAppLock  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 964
 3.16.6.2 feAppUnlock. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 965
 3.16.6.3 feAppLockExit . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 966
 3.16.6.4 feAppUnlockExit  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 967
 3.16.6.5 feAppLockModel  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 968
 3.16.6.6 feAppUnlockModel  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 969
 3.16.6.7 feAppLockDraw . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 970
 3.16.6.8 feAppUnlockDraw  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 971
 3.16.7 Status Bar  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 972
 3.16.7.1 feAppStatusRedraw  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 972
 3.16.7.2 feAppStatusShow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 973
 3.16.7.3 feAppStatusUpdate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 974
 3.16.8 Message Window  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 975
 3.16.8.1 feAppMessage. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 975
 3.16.8.2 feAppMessageStartListing . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 976
 3.16.8.3 feAppMessageEndListing. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 977
 3.16.8.4 feAppMessageClear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 978
 3.16.9 Model Info Tree  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 979
 3.16.9.1 feAppModelInfoShow  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 979
 3.16.9.2 feAppSetModelInfoShow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 980
 3.16.10 Real Number Text Formatting  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 981
 3.16.10.1 feFormatReal. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 981
 3.16.10.2 feTruncateReal  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 982
 3.16.11 Library Management . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 983
 3.16.11.1 feGetCurrentLibraryName  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 983
 3.16.11.2 feSetCurrentLibraryName. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 984
 3.16.12 Other Utilities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 985
 3.16.12.1 feLicenseExpiration  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 985
 3.16.12.2 feLicenseMethod. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 986
 3.16.12.3 feLicenseIsAvailable. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 987
 3.16.12.4 feLicenseGetInfo. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 988
 3.16.12.5 feLicensePrintInfo. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 989
 3.16.12.6 feRunCommand  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 990
 3.16.12.7 feAppVersion  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 991
 3.16.12.8 feAppUndoCheckpoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 992
 3.16.12.9 feAppUndoClear . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 993
 3.16.12.10 feCrossSectionReport . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 994
 3.16.12.11 feAppResetLocale. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 995
 3.17 User Graphics Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 996
 3.17.1 Managing User Graphics Data  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 997
 3.17.1.1 feGFXLoad . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 998
 3.17.1.2 feGFXDelete . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1000
 3.17.2 Displaying User Graphics Data. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1001
 3.17.2.1 feGFXSelect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1001
 3.17.2.2 feGFXEnableView . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1002
 3.17.2.3 feGFXReset. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1003
 3.18 File Utility Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1004
 3.18.1 feFileGetName  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1005
 3.18.2 feFileExecute. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1006
 3.18.3 feFileProgramRun . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1007
 3.18.4 feFileProgramRunning . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1008
 3.18.5 feFileCurrentDirectory . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1009
 3.19 Set Utility Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 1010
 3.19.1 feSetFree . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 1011
 3.19.2 feSetFreeNotInSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1012
4. FEMAP Tool Objects
 4.1 DataTable Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 1017
 4.1.1 DataTable Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1017
 4.1.2 Specifying Row and Column Indexes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1017
 4.1.3 DataTable Object Row Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1019
 4.1.3.1 FindRow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1019
 4.1.3.2 GetRowInfo. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1020
 4.1.3.3 GetRowVisible . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1021
 4.1.3.4 SetRowVisible  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1022
 4.1.4 DataTable Object Column Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1023
 4.1.4.1 FindColumn  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1023
 4.1.4.2 GetColumnInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1024
 4.1.4.3 GetColumnInfo2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1025
 4.1.4.4 GetColumnVisible  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1027
 4.1.4.5 SetColumnVisible . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1028
 4.1.4.6 GetColumnWidth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1029
 4.1.4.7 SetColumnWidth. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1030
 4.1.4.8 GetColumnTitle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1031
 4.1.4.9 SetColumnTitle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1032
 4.1.4.10 SetColumnPosition . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1033
 4.1.4.11 SetColumnAlignment . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1034
 4.1.5 DataTable Object Data Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1035
 4.1.5.1 GetColumnValue  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1035
 4.1.5.2 GetColumnText. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1037
 4.1.5.3 GetRowValues  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1038
 4.1.5.4 AddColumn. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1040
 4.1.5.5 AddDataColumn . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1043
 4.1.5.6 UpdateColumnByID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1045
 4.1.5.7 UpdateColumn  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1046
 4.1.5.8 AddEntityData  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1047
 4.1.5.9 AddOutputV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1048
 4.1.5.10 AddMassProperties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1049
 4.1.5.11 AddElementChecks. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1050
 4.1.5.12 AddNastranElem entChecks  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 1051
 4.1.5.13 AddMeshAssociativity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1052
 4.1.5.14 SetTextColor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1053
 4.1.5.15 SetBackgroundColor. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1054
 4.1.6 DataTable Object Grouping Methods .  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1055
 4.1.6.1 AddGroup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1055
 4.1.6.2 ClearGroup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1056
 4.1.6.3 GetGroup. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1057
 4.1.6.4 ShowGroup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1058
 4.1.7 DataTable Object Sorting Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1059
 4.1.7.1 AddSort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1059
 4.1.7.2 ClearSort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1060
 4.1.7.3 GetSort  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1061
 4.1.8 DataTable Object Selection Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1062
 4.1.8.1 AddSelection. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1062
 4.1.8.2 ClearSelection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1063
 4.1.8.3 GetSelection  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1064
 4.1.9 DataTable Object Other Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1065
 4.1.9.1 Lock  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1065
 4.1.9.2 Copy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1066
 4.1.9.3 Save. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1067
 4.1.9.4 Clear . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1068
 4.1.9.5 DeleteRows . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1069
 4.1.9.6 Show . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1070
 4.1.9.7 Print. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 1071
 4.2 Element Quality Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1072
 4.2.1 Element Quality Object Pr operties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1072
 4.2.2 Element Quality Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1075
 4.2.2.1 Clear . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1075
 4.2.2.2 SetModelDefaults . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1076
 4.2.2.3 GetModelDefaults. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1077
 4.2.2.4 CheckQuality  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1078
 4.2.2.5 CheckNastranQuality  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1079
 4.2.2.6 GetAspectRatio . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1080
 4.2.2.7 AspectRatio. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1081
 4.2.2.8 GetTaper . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1082
 4.2.2.9 Taper . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1083
 4.2.2.10 GetAlternateTaper. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1084
 4.2.2.11 AlternateTaper  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1085
 4.2.2.12 GetInternalAngle. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1086
 4.2.2.13 InternalAngle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1087
 4.2.2.14 GetSkew . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1088
 4.2.2.15 Skew . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1089
 4.2.2.16 GetWarping. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1090
 4.2.2.17 Warping. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1091
 4.2.2.18 GetNastranWarping  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1092
 4.2.2.19 NastranWarping  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1093
 4.2.2.20 GetTetCollapse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1094
 4.2.2.21 TetCollapse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1095
 4.2.2.22 GetJacobian. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1096
 4.2.2.23 Jacobian. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1097
 4.2.2.24 GetCombined  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1098
 4.2.2.25 Combined  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1099
 4.2.2.26 GetExplicitTimeStep. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1100
 4.2.2.27 ExplicitTimeStep  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1101
 4.2.2.28 GetNastranQuadSkew. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1102
 4.2.2.29 NastranQuadSkew. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1103
 4.2.2.30 GetNastranQuadTaper  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1104
 4.2.2.31 NastranQuadTaper  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1105
 4.2.2.32 GetNastranQuadWarp. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1106
 4.2.2.33 NastranQuadWarp. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1107
 4.2.2.34 GetNastranQuadIAMin. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1108
 4.2.2.35 NastranQuadIAMin. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1109
 4.2.2.36 GetNastranQuadAR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1110
 4.2.2.37 NastranQuadAR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1111
 4.2.2.38 GetNastranQuadIAMax  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1112
 4.2.2.39 NastranQuadIAMax  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1113
 4.2.2.40 GetNastranTriaSkew. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1114
 4.2.2.41 NastranTriaSkew. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1115
 4.2.2.42 GetNastranTriaIAMax  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1116
 4.2.2.43 NastranTriaIAMax  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1117
 4.2.2.44 GetNastranTriaAR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1118
 4.2.2.45 NastranTriaAR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1119
 4.2.2.46 GetNastranTriaEPLR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1120
 4.2.2.47 NastranTriaEPLR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1121
 4.2.2.48 GetNastranTetraAR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1122
 4.2.2.49 NastranTetraAR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1123
 4.2.2.50 GetNastranTetraEPLR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1124
 4.2.2.51 NastranTetraEPLR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1125
 4.2.2.52 GetNastranTetraDetJ. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1126
 4.2.2.53 NastranTetraDetJ  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1127
 4.2.2.54 GetNastranTetraEPIA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1128
 4.2.2.55 NastranTetraEPIA. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1129
 4.2.2.56 GetNastranHexAR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1130
 4.2.2.57 NastranHexAR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1131
 4.2.2.58 GetNastranHexEPLR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1132
 4.2.2.59 NastranHexEPLR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1133
 4.2.2.60 GetNastranHexDetJ  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1134
 4.2.2.61 NastranHexDetJ  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1135
 4.2.2.62 GetNastranHexEPIA. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1136
 4.2.2.63 NastranHexEPIA. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1137
 4.2.2.64 GetNastranHexWarp. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1138
 4.2.2.65 NastranHexWarp. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1139
 4.2.2.66 GetNastranPenAR. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1140
 4.2.2.67 NastranPenAR. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1141
 4.2.2.68 GetNastranPenEPLR. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1142
 4.2.2.69 NastranPenEPLR  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1143
 4.2.2.70 GetNastranPenDetJ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1144
 4.2.2.71 NastranPenDetJ. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1145
 4.2.2.72 GetNastranPenEPIA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1146
 4.2.2.73 NastranPenEPIA . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1147
 4.2.2.74 GetNastranPenWarp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1148
 4.2.2.75 NastranPenWarp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1149
 4.2.2.76 GetNastranPyrAR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1150
 4.2.2.77 NastranPyrAR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1151
 4.2.2.78 GetNastranPyrEPLR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1152
 4.2.2.79 NastranPyrEPLR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1153
 4.2.2.80 GetNastranPyrDetJ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1154
 4.2.2.81 NastranPyrDetJ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1155
 4.2.2.82 GetNastranPyrEPIA  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1156
 4.2.2.83 NastranPyrEPIA  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1157
 4.2.2.84 GetNastranPyrWarp  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1158
 4.2.2.85 NastranPyrWarp  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1159
 4.3 Geometry Preparation and Meshing Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1160
 4.3.1 Geometry Preparation and Meshing Ob ject Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11 60
 4.3.2 Geometry Preparation and Meshing Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 116 7
 4.3.2.1 AddSolid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1167
 4.3.2.2 AddSurface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1168
 4.3.2.3 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1169
 4.3.2.4 SetSizes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1170
 4.3.2.5 HasPrevious. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1171
 4.3.2.6 RemovePrevious . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1172
 4.3.2.7 Prepare. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1173
 4.3.2.8 Size  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 1174
 4.3.2.9 Mesh  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1175
 4.3.2.10 Apply . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1176
 4.3.2.11 UI. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 1177
 4.4 ReadFile Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 1178
 4.4.1 ReadFile Object Properti es . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1178
 4.4.2 ReadFile Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1179
 4.4.2.1 Open  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1179
 4.4.2.2 Read. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1180
 4.4.2.3 AtEOF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1181
 4.4.2.4 Close . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1182
 4.4.2.5 Position . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1183
 4.4.2.6 Jump  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1184
 4.4.2.7 JumpToEnd . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1185
 4.4.2.8 Size  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 1186
 4.4.2.9 TimeCreated  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1187
 4.4.2.10 TimeWritten  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1188
 4.4.2.11 TimeAccessed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1189
 4.4.2.12 Skipped . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1190
 4.4.2.13 ShowStatus  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1191
 4.4.2.14 SetNoBlankLines. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1192
 4.4.2.15 SetNoShortLines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1193
 4.4.2.16 SetTrimSpace  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1194
 4.4.2.17 SetTrimEndSpace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1195
 4.4.2.18 SetTrimFront . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1196
 4.4.2.19 SetUppercase . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1197
 4.4.2.20 SetSkip. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1198
 4.4.2.21 SetSearch . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1199
 4.4.2.22 SetSearchString . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1200
 4.4.2.23 ClearSearch . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1201
 4.4.2.24 SetSkipAfterSearch . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1202
 4.4.2.25 SetFormFeed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1203
 4.4.2.26 SetTabSize. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1204
 4.4.2.27 LineInit  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1205
 4.4.2.28 Reparse  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1206
 4.4.2.29 FixedFormat  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1207
 4.4.2.30 SetFixedFormat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1208
 4.4.2.31 SetFreeFormat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1209
 4.4.2.32 SetAutoFormat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1210
 4.4.2.33 Field  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1211
 4.4.2.34 IntField . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1212
 4.4.2.35 RealField . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1213
 4.4.2.36 BoolField. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1214
 4.5 Selector Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1215
 4.5.1 Selector Object Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1215
 4.5.2 Selector Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1216
 4.5.2.1 ClearAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1216
 4.5.2.2 Clear . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1217
 4.5.2.3 Count. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1218
 4.5.2.4 SelectBox  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1219
 4.5.2.5 SelectCircle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1220
 4.5.2.6 SelectPolygon . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1221
 4.5.2.7 SelectFreehand  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1222
 4.5.2.8 Grow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1223
 4.5.2.9 Shrink  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1224
 4.5.2.10 Show . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1225
 4.5.2.11 SaveGroup. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1226
 4.5.2.12 LoadGroup  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1227
 4.5.2.13 UpdateDataTable  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1228
 4.5.2.14 Add . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1229
 4.5.2.15 AddSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1230
 4.5.2.16 GetSelected . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1231
 4.5.2.17 GetSelectedID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1232
 4.5.2.18 Copy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1233
 4.5.2.19 Paste  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1234
 4.5.2.20 Tooltips . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1235
 4.6 Set Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . . 1236
 4.6.1 Set Object Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1236
 4.6.2 Set Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1237
 4.6.2.1 Add . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1237
 4.6.2.2 AddRange . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1238
 4.6.2.3 AddEntitiesOnLayer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1239
 4.6.2.4 AddSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1240
 4.6.2.5 AddSetRule . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1241
 4.6.2.6 AddRule  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1242
 4.6.2.7 Group Selection Rules  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1243
 4.6.2.8 AddAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1250
 4.6.2.9 AddAllExcept . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1251
 4.6.2.10 AddAllInRange . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1252
 4.6.2.11 AddAllInRangeInSetV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1253
 4.6.2.12 AddCommon. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1254
 4.6.2.13 AddNewRemoveCommonSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12 55
 4.6.2.14 AddGroup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1256
 4.6.2.15 AddArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1257
 4.6.2.16 AddCoordinate  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1258
 4.6.2.17 AddCoordinate2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1259
 4.6.2.18 AddAroundPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1260
 4.6.2.19 AddAroundPoint2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1261
 4.6.2.20 AddAroundVector. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1262
 4.6.2.21 AddAroundVector2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1263
 4.6.2.22 AddAroundPlane. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1264
 4.6.2.23 AddAroundPlane2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1265
 4.6.2.24 AddNodesOnGeometry. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1266
 4.6.2.25  AddAllTitleV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1267
 4.6.2.26 AddAllColor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1268
 4.6.2.27 AddMidsideNodes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1269
 4.6.2.28 AddVisible. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1270
 4.6.2.29 AddConnectedElements  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1271
 4.6.2.30 AddAllConnectedElements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1272
 4.6.2.31 AddSolidElementsAlongVector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1273
 4.6.2.32 AddConnectedFillets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1274
 4.6.2.33 AddTangent Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1275
 4.6.2.34 AddConstrained. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1276
 4.6.2.35 AddLoaded  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1278
 4.6.2.36 AddComponentOutputVectorsV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12 80
 4.6.2.37 AddSimilarOutputVectorsV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 1281
 4.6.2.38 AddComplexOutputVectorsV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1282
 4.6.2.39 AddBySize. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1283
 4.6.2.40 AddNodesOnFreeEdges  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1284
 4.6.2.41 AddNodesOnF reeFaces. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1285
 4.6.2.42 IsAdded . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1286
 4.6.2.43 IsArrayAdded  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1287
 4.6.2.44 IsSetAdded  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1288
 4.6.2.45 IsIdenticalSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1289
 4.6.2.46 Select . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1290
 4.6.2.47 SelectID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1291
 4.6.2.48 SelectIDWithNew . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1292
 4.6.2.49 SelectIDInSetV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1293
 4.6.2.50 SelectMultiIDV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1294
 4.6.2.51 SelectOutputVectorIDV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1295
 4.6.2.52 SelectList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1296
 4.6.2.53 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1297
 4.6.2.54 Remove . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1298
 4.6.2.55 RemoveRange . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1299
 4.6.2.56 RemoveArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1300
 4.6.2.57 RemoveSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1301
 4.6.2.58 RemoveRule  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1302
 4.6.2.59 RemoveSetRule . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1303
 4.6.2.60 RemoveNotCommon. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1304
 4.6.2.61 RemoveNotCommonToGroup  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 05
 4.6.2.62 RemoveGroup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1306
 4.6.2.63 RemoveInternalCurves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1307
 4.6.2.64 RemoveNotVisible  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1308
 4.6.2.65 HasCommon . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1309
 4.6.2.66 HasNotCommon . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1310
 4.6.2.67 Reload . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1311
 4.6.2.68 Reload2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1313
 4.6.2.69 Reset  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1314
 4.6.2.70 Next . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1315
 4.6.2.71 NextAfter. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1316
 4.6.2.72 NextEmptyAfter  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1317
 4.6.2.73 NextID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1318
 4.6.2.74 Prev . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1319
 4.6.2.75 PrevBefore. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1320
 4.6.2.76 PrevID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1321
 4.6.2.77 First . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 1322
 4.6.2.78 Last  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1323
 4.6.2.79 Match. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1324
 4.6.2.80 Copy  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1325
 4.6.2.81 CopyToClipboard . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1326
 4.6.2.82 Count. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1327
 4.6.2.83 CountCommon  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1328
 4.6.2.84 CountNotCommon  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1329
 4.6.2.85 DeleteAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1330
 4.6.2.86 GetArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1331
 4.6.2.87 ConvertToAllCurves. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1332
 4.6.2.88 ConvertToCombinedCurves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1333
 4.6.2.89 ConvertToCombinedCurvesOnly . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13 34
 4.6.2.90 ConvertToInternalCurves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1335
 4.6.2.91 ConvertToAllSurfaces  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1336
 4.6.2.92 ConvertToBoundarySurfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 1337
 4.6.2.93 ConvertToBoundarySurfacesOnly . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 338
 4.6.2.94 ConvertToInternalSurfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1339
 4.6.2.95 EmptyBlock  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1340
 4.6.2.96 Debug  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1341
 4.6.2.97 AddAllSavedSetIDs  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1342
 4.6.2.98 Show . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1343
 4.6.2.99 ShowAutoscale . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1344
 4.6.2.100 IsEmpty . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1345
 4.6.2.101 IsNotEmpty . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1346
 4.6.2.102 HasOne . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1347
 4.6.2.103 HasMultiple. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1348
 4.6.2.104 AddAllAnalysisCases . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1349
 4.6.2.105 AddSetFromModel . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1350
 4.6.3 Set Object SavedSet Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1351
 4.6.3.1 SetDeveloperID. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1351
 4.6.3.2 GetSavedSet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1352
 4.6.3.3 GetAllSavedSets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1353
 4.6.3.4 PutSavedSet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1354
 4.6.3.5 DeleteSavedSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1355
 4.6.3.6 DeleteAllSavedSets. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1356
 4.6.3.7 DeleteOtherSavedSets. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1357
 4.6.3.8 AddToSavedSet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1358
 4.6.3.9 AddSetToSavedSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1359
 4.6.3.10 RemoveFromSavedSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1360
 4.6.3.11 RemoveSetFromSavedSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1361
 4.6.3.12 ResetSavedSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1362
 4.6.3.13 NextSavedSet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1363
 4.6.3.14 EmptySavedSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1364
 4.6.3.15 CountSavedSets  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1365
 4.6.3.16 GetSavedSetType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1366
 4.7 Sort Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1367
 4.7.1 Sort Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1367
 4.7.2 Sort Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1368
 4.7.2.1 Add . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1368
 4.7.2.2 AddReal  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1369
 4.7.2.3 AddInt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1370
 4.7.2.4 AddAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1371
 4.7.2.5 SetData  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1372
 4.7.2.6 SetReal  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1373
 4.7.2.7 SetInt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1374
 4.7.2.8 SetDataType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1375
 4.7.2.9 GetData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1376
 4.7.2.10 GetReal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1377
 4.7.2.11 GetInt  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1378
 4.7.2.12 GetDataType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1379
 4.7.2.13 GetSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1380
 4.7.2.14 Find . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1381
 4.7.2.15 Remove . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1382
 4.7.2.16 RemoveSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1383
 4.7.2.17 IsAdded . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1384
 4.7.2.18 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1385
 4.7.2.19 Reset  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1386
 4.7.2.20 Next . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1387
 4.7.2.21 Prev . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1388
 4.7.2.22 Current. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1389
 4.7.2.23 First . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 1390
 4.7.2.24 Last  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1391
 4.7.2.25 Count . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1392
 4.7.2.26 Select . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1393
 4.7.2.27 SelectID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1394
 4.7.2.28 SelectList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1395
 4.7.2.29 Sort  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1396
 4.7.2.30 SortRemoveDuplicates . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1397
 4.7.2.31 ConvertToBound arySurfaces  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 1398
 4.7.2.32 AddAroundPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1399
 4.7.2.33 AddAroundVector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1400
 4.7.2.34 AddAroundPlane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1401
 4.8 UserData Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1402
 4.8.1 UserData Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1402
 4.8.2 UserData Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1403
 4.8.2.1 Get . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 1403
 4.8.2.2 GetTitle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1404
 4.8.2.3 Put . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1405
 4.8.2.4 PutTitle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1406
 4.8.2.5 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1407
 4.8.2.6 Reset  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1408
 4.8.2.7 Next . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1409
 4.8.2.8 Prev . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 1410
 4.8.2.9 First . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1411
 4.8.2.10 Last  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1412
 4.8.2.11 NextSet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1413
 4.8.2.12 PrevSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1414
 4.8.2.13 NextEmptySet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1415
 4.8.2.14 PrevEmptySet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1416
 4.8.2.15 Exist. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1417
 4.8.2.16 Deletable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1418
 4.8.2.17 Delete. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1419
 4.8.2.18 DeleteTitle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1420
 4.8.2.19 Position . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1421
 4.8.2.20 Jump  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1422
 4.8.2.21 AtEOF . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1423
 4.8.2.22 Truncate. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1424
 4.8.2.23 WriteDouble  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1425
 4.8.2.24 WriteFloat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1426
 4.8.2.25 WriteLong . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1427
 4.8.2.26 WriteShort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1428
 4.8.2.27 WriteBool  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1429
 4.8.2.28 WriteDoubleArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1430
 4.8.2.29 WriteLongArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1431
 4.8.2.30 WriteBoolArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1432
 4.8.2.31 WriteString  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1433
 4.8.2.32 ReadDouble . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1434
 4.8.2.33 ReadFloat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1435
 4.8.2.34 ReadLong  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1436
 4.8.2.35 ReadShort . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1437
 4.8.2.36 ReadBool. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1438
 4.8.2.37 ReadDoubleArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1439
 4.8.2.38 ReadLongArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1440
 4.8.2.39 ReadBoolArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1441
 4.8.2.40 ReadString. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1442
 4.9 Results Browsing Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . 1443
 4.9.1 Results Browsing Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1443
 4.9.2 Limitations and Usage of Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1443
 4.9.3 Output Vectors  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 1445
 4.9.3.1 Output Components  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1445
 4.9.3.2 Output Vector IDs. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1446
 4.9.4 Results Browsing General Object Meth ods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1448
 4.9.4.1 Clear . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1448
 4.9.4.2 GetModel  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1449
 4.9.4.3 SetModel . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1450
 4.9.4.4 SendToDataTable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1451
 4.9.5 Results Browsing Study Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1452
 4.9.5.1 StudyCreate. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1452
 4.9.5.2 NumberOfStudies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1453
 4.9.5.3 NextStudyReset. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1454
 4.9.5.4 NextStudy . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1455
 4.9.5.5 StudyExist . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1456
 4.9.5.6 StudyInfo. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1457
 4.9.5.7 StudyTitle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1458
 4.9.5.8 StudyNotes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1459
 4.9.6 Results Browsing Set Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1460
 4.9.6.1 NumberOfSets. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1460
 4.9.6.2 NextSetReset. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1461
 4.9.6.3 NextSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1462
 4.9.6.4 SetExists . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1463
 4.9.6.5 SetInfo. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1464
 4.9.6.6 SetTitle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1465
 4.9.6.7 SetSubcase  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1466
 4.9.6.8 SetRevision . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1467
 4.9.6.9 SetNotes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1468
 4.9.6.10 SetLocation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1469
 4.9.6.11 SetHasVectorsInDB  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1470
 4.9.6.12 Sets  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1471
 4.9.6.13 SetCreate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1472
 4.9.7 Results Browsing Vector Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1474
 4.9.7.1 NextVectorResetV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1474
 4.9.7.2 NextVectorV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1475
 4.9.7.3 VectorExistsV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1476
 4.9.7.4 VectorInfoV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1477
 4.9.7.5 VectorTitleV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1478
 4.9.7.6 VectorTitlesV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1479
 4.9.7.7 VectorComponentsV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1480
 4.9.7.8 VectorLocationV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1481
 4.9.7.9 VectorEntitiesV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1482
 4.9.7.10 VectorsV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1483
 4.9.7.11 NonExistingUserVectorV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1484
 4.9.7.12 VectorID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1485
 4.9.8 Results Browsing Entity Value Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1486
 4.9.8.1 EntityValueV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1486
 4.9.9 Results Browsing Bulk Data  Review Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1488
 4.9.9.1 AddColumnV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1488
 4.9.9.2 AddEmptyColumns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1489
 4.9.9.3 AddConversionColumnV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1490
 4.9.9.4 AddEnvelopeColumn  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1491
 4.9.9.5 DataNeeded . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1494
 4.9.9.6 SetTri3Orientation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1495
 4.9.9.7 SetTri6Orientation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1496
 4.9.9.8 SetQuad4Orientation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1497
 4.9.9.9 SetQuad8Orientation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1498
 4.9.9.10 SetSolidOrientation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1499
 4.9.9.11 SetEngrShearStrain . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1500
 4.9.9.12 SetNodalTransform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1501
 4.9.9.13 SetLineTransform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1502
 4.9.9.14 SetPlateTransform . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1503
 4.9.9.15 SetSolidTransform. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1504
 4.9.9.16 SetColumnGlobalPly. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1505
 4.9.9.17 SetComplexOptions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1506
 4.9.9.18 Populate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1507
 4.9.9.19 IsPopulated  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1508
 4.9.9.20 DataLocation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1509
 4.9.9.21 NumberOfRows. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1510
 4.9.9.22 NumberOfColumns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1511
 4.9.9.23 FindColumnV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1512
 4.9.9.24 GetColumnTitle. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1513
 4.9.9.25 IsApiColumn . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1514
 4.9.9.26 GetColumnVectorV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1515
 4.9.9.27  GetColumn . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1516
 4.9.9.28 GetColumns. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1517
 4.9.9.29 GetColumnMinMax  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1518
 4.9.9.30 GetColumnAbsMax. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1519
 4.9.9.31 GetColumnSum . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1520
 4.9.9.32 Reset  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1521
 4.9.9.33 Next . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1522
 4.9.9.34 GetValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1524
 4.9.9.35 GetInRow  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1525
 4.9.9.36 GetMultipleInRow. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1526
 4.9.9.37 GetRow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1527
 4.9.9.38 GetRowByID. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1528
 4.9.9.39 GetRows  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1529
 4.9.9.40 GetRowsByID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1530
 4.9.9.41 GetRowsAndColumns. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1531
 4.9.9.42  GetRowsAndColumnsByID. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1532
 4.9.9.43 SetValue  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1533
 4.9.9.44 SetColumn . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1534
 4.9.9.45 SetColumns . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1535
 4.9.9.46 SetInRow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1536
 4.9.9.47 SetMultipleInRow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1537
 4.9.9.48 SetRow  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1538
 4.9.9.49 SetRows. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1539
 4.9.9.50 SetRowsByID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1540
 4.9.9.51 SetRowsAndColumnByID  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1541
 4.9.10 Results Browsing Update and Save Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1542
 4.9.10.1 AddScalarAtNodeColumnV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1542
 4.9.10.2 AddVectorAtNodeColumnsV 2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 543
 4.9.10.3 AddScalarAtElem ColumnV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1544
 4.9.10.4 AddElemWithCornerColumnsV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 154 5
 4.9.10.5 AddScalarAtBeam ColumnsV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1546
 4.9.10.6 SetColumnInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1547
 4.9.10.7 GetColumnInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1548
 4.9.10.8 SetColumnComponents  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1549
 4.9.10.9 GetColumnComponents . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1550
 4.9.10.10 SetColumnTitle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1551
 4.9.10.11 SetColumnVectorV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1552
 4.9.10.12 SetColumnInteger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1553
 4.9.10.13 GetColumnInteger. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1554
 4.9.10.14 SaveColumn  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1555
 4.9.10.15 Save. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1556
 4.9.10.16 GetScalarAtNodeColumnV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1557
 4.9.10.17 SetScalarAtNodeColumnV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1558
 4.9.10.18 GetScalarAtElemColumnV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1559
 4.9.10.19 SetScalarAtElemColumnV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1560
 4.9.10.20 GetVectorAtNodeColumnsV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 561
 4.9.10.21 SetVectorAtColumnsV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1562
 4.9.10.22 GetElemWithCornerColumnsV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 156 3
 4.9.10.23 SetElemWithCornerColumnsV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 15 64
 4.9.10.24 GetScalarAtBeamColumnsV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 565
 4.9.10.25 SetScalarAtBeam ColumnsV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1566
 4.9.10.26 Sort  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1567
 4.9.10.27 GetScalarAtNodeSetV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1568
 4.9.10.28 GetScalarAtElemSetV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1569
 4.9.10.29 GetVectorAtNodeSetV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1570
 4.9.10.30 GetElemWithCornerSetV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1571
 4.9.10.31 GetScalarAtBeamSetV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1572
 4.10 MapData Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1573
 4.10.1 MapData Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1574
 4.10.1.1 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1574
 4.10.1.2 Initialize  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1575
 4.10.1.3 Count. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1576
 4.10.1.4 GetIDs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1577
 4.10.1.5 Remove . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1578
 4.10.1.6 RemoveAll  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1579
 4.10.1.7 DefineReal  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1580
 4.10.1.8 DefineInt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1581
 4.10.1.9 DefineBool  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1582
 4.10.1.10 DefineString  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1583
 4.10.1.11 DefineVariant . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1584
 4.10.1.12 SetReal  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1586
 4.10.1.13 SetInt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1587
 4.10.1.14 SetBool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1588
 4.10.1.15 SetString . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1589
 4.10.1.16 SetVariant . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1590
 4.10.1.17 GetReal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1591
 4.10.1.18 GetInt  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1592
 4.10.1.19 GetBool . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1593
 4.10.1.20 GetString . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1594
 4.10.1.21 GetVariant. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1595
 4.11 Entity Tracking Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1597
 4.11.1 TrackData Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1598
 4.11.1.1 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1598
 4.11.1.2 Start . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1599
 4.11.1.3 StartGeometry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1600
 4.11.1.4 StartMesh  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1601
 4.11.1.5 Stop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1602
 4.11.1.6 StopAll  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1603
 4.11.1.7 Created. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1604
 4.11.1.8 Deleted. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1605
 4.12 Beam Calculator Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1606
 4.12.1 Beam Calculator Object  Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1606
 4.12.2 Beam Calculator Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1608
 4.12.2.1 GetElementProperties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1608
 4.12.2.2 GetMeshInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1609
 4.12.2.3 CalculateStress  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1610
 4.12.2.4 CalculateStre ssFromForces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1613
 4.12.2.5 FindMaxMinStress  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1616
 4.13 Draw/Erase Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 1618
 4.13.1 Draw/Erase Object Prop erties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1618
 4.13.2 Draw/Erase Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1619
 4.13.2.1  ClearAll  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1619
 4.13.2.2 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1620
 4.13.2.3 SaveGroup . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1621
 4.13.2.4 LoadGroup. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1622
 4.13.2.5 Grow . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1623
 4.13.2.6 Shrink  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1624
 4.13.2.7 HasErased . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1625
 4.13.2.8 HasErasedType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1626
 4.13.2.9 EraseSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1627
 4.13.2.10 GetErased  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1628
 4.14 User Defined Graphics Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1629
 4.14.1 User Defined Graphics Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1630
 4.14.1.1 SetView . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1630
 4.14.1.2 GetView. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1631
 4.14.1.3 SetName  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1632
 4.14.1.4 Publish . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1633
 4.14.1.5 Blank . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1634
 4.14.1.6 CollectorPoints  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1635
 4.14.1.7 CollectorBitmap  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1636
 4.14.1.8 CollectorSymbol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1637
 4.14.1.9 CollectorSymbolREAL8 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1638
 4.14.1.10 CollectorText. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1640
 4.14.1.11 CollectorTextINT4  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1641
 4.14.1.12 CollectorTextREAL8  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1642
 4.14.1.13 CollectorLines . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1643
 4.14.1.14 CollectorTriangles . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1644
 4.14.1.15 CollectorBlank. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1645
 4.14.1.16 CollectorSingleSymbol . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1646
 4.14.1.17 CollectorLabels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1647
 4.14.1.18 CollectorMarkForDeletion  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1648
 4.14.1.19 CollectorAppearance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1649
 4.14.1.20 CollectorAppearanceSet FontData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1651
 4.14.1.21 CollectorAddPointLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1652
 4.14.1.22 CollectorAddPointEntityLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1653
 4.14.1.23 CollectorAddPointEntit yFaceLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165 4
 4.14.1.24 CollectorAddSymbolLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1655
 4.14.1.25 CollectorAddSymbolEntityLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 165 6
 4.14.1.26 CollectorAddSymbolEnt ityFaceLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1657
 4.14.1.27 CollectorAddSymbolE ntityFaceNormalLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1658
 4.14.1.28 CollectorAddSymbolE ntityFaceNormalAutoLocations . . . . . . . . . . . . . . . . . . . . . . . . . . 1659
 4.14.1.29 CollectorAddSymbolEntityEdgeLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1661
 4.14.1.30 CollectorAddSymbolEntityEdgeAutoLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1662
 4.14.1.31 CollectorAddSymbolREAL8Locations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1664
 4.14.1.32 CollectorAddSymbolREAL8Entity Locations. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1665
 4.14.1.33 CollectorAddSymbolR EAL8EntityFaceLocations. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1666
 4.14.1.34 CollectorAddSymbo lREAL8EntityFaceNormalLocations. . . . . . . . . . . . . . . . . . . . . . . . 1667
 4.14.1.35 CollectorAddSymbo lREAL8EntityFaceNormalAutoLocations. . . . . . . . . . . . . . . . . . . . 1668
 4.14.1.36 CollectorAddSymbolREAL8EntityEdgeLocations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1670
 4.14.1.37 CollectorAddSymbolREAL8EntityEdgeAutoLocations  . . . . . . . . . . . . . . . . . . . . . . . . . 1671
 4.14.1.38 CollectorAddTextLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1673
 4.14.1.39 CollectorAddTextEntityLocations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1674
 4.14.1.40 CollectorAddTex tEntityFaceLocations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1675
 4.14.1.41 CollectorAddTextINT4Locations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 676
 4.14.1.42 CollectorAddTextINT4EntityLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1677
 4.14.1.43 CollectorAddTex tINT4EntityFaceLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1678
 4.14.1.44 CollectorAddTextREAL8 Locations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1679
 4.14.1.45 CollectorAddTextREAL8 EntityLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1680
 4.14.1.46 CollectorAddTextREA L8EntityFaceLocations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1681
 4.14.1.47 CollectorAddLineLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1682
 4.14.1.48 CollectorAddPolyLineLocations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1683
 4.14.1.49 CollectorAddMeshLineLocations. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 684
 4.14.1.50 CollectorAddTriangleL ocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1685
 4.14.1.51 CollectorAddMeshTriangleLocations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 168 6
 4.14.1.52 CollectorAddMeshTriangleNormalLocations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1687
 4.14.1.53 BitmapCreate  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1688
 4.14.1.54 BitmapMarkForD eletion. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1689
 4.14.1.55 SymbolCreate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1690
 4.14.1.56 SymbolMarkForDeletion  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1691
 4.14.1.57 SymbolSetAddInScreen . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1692
 4.14.1.58 SymbolAddPoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1693
 4.14.1.59 SymbolAddLineStraight . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1694
 4.14.1.60 SymbolAddLinePoly. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1695
 4.14.1.61 SymbolAddLineCircle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1696
 4.14.1.62 SymbolAddLineBrick . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1697
 4.14.1.63 SymbolAddLineCylinder  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1698
 4.14.1.64 SymbolAddLineCone . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1699
 4.14.1.65 SymbolAddLineSphere. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1700
 4.14.1.66 SymbolAddFillTriangle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1701
 4.14.1.67 SymbolAddFillCircle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1702
 4.14.1.68 SymbolAddFillBrick. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1703
 4.14.1.69 SymbolAddFillCylinder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1704
 4.14.1.70 SymbolAddFillCone . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1705
 4.14.1.71 SymbolAddFillTubeBrick. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1706
 4.14.1.72 SymbolAddFillTubeCylinder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1707
 4.14.1.73 SymbolAddFillSphere. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1708
 4.14.1.74 Detach . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1709
 4.14.1.75 Attach . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1710
 4.15 CopyTool Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1711
 4.15.1 CopyTool Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1711
 4.15.2 CopyTool Object Options Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1713
 4.15.2.1 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1713
 4.15.2.2 SetNumbering . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1714
 4.15.2.3 SetVectorPattern . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1715
 4.15.2.4 SetCSysPattern . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1717
 4.15.2.5 SetPropertyOption. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1719
 4.15.2.6 IncludeOtherEntities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1720
 4.15.2.7 IncludeOtherEntities2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1721
 4.15.2.8 AllOtherEntities  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1722
 4.15.3 CopyTool Object Operation Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1723
 4.15.3.1 AlongVector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1723
 4.15.3.2 PointToPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1724
 4.15.3.3 BetweenCSys. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1725
 4.15.3.4 BetweenVectors. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1726
 4.15.3.5 BetweenPlanes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1727
 4.15.3.6 RotateAroundVector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1729
 4.15.3.7 RotatePointToPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1730
 4.15.3.8 Reflect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1731
 4.15.3.9 InPlace . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1732
 4.15.3.10 CreatePattern . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1733
 4.16 MoveTool Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 1735
 4.16.1 MoveTool Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1735
 4.16.2 MoveTool Object Options Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1736
 4.16.2.1 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1736
 4.16.2.2 IncludeOtherEntities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1737
 4.16.2.3 IncludeOtherEntities2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1738
 4.16.3 MoveTool Object Operation Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1739
 4.16.3.1 AlongVector  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1739
 4.16.3.2 PointToPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1740
 4.16.3.3 BetweenCSys. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1741
 4.16.3.4 BetweenVectors. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1742
 4.16.3.5 BetweenPlanes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1743
 4.16.3.6 RotateAroundVector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1745
 4.16.3.7 RotatePointToPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1746
 4.16.3.8 Reflect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1747
 4.17 MergeTool Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 1749
 4.17.1 MergeTool Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1749
 4.17.2 MergeTool Object Model Selection Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1751
 4.17.2.1 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1751
 4.17.2.2 SelectModel. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1752
 4.17.2.3 SelectModelByName. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1753
 4.17.2.4 SelectCurrentModel. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1754
 4.17.3 MergeTool Object Entity Selection and Status Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1755
 4.17.3.1 GetEntityTypes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1755
 4.17.3.2 GetEntityStatus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1756
 4.17.3.3 GetEntityOptions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1757
 4.17.3.4 SetAllStatus . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1759
 4.17.3.5 SetStatus  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1760
 4.17.3.6 SetEntityStatus  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1761
 4.17.3.7 SelectEntity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1762
 4.17.3.8 SelectFromGroup  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1764
 4.17.3.9 AddRelated . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1766
 4.17.3.10 ShowDialog . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1767
 4.17.3.11 SetVectorPattern . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1768
 4.17.3.12 SetCSysPattern  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1770
 4.17.4 MergeTool Object Operation Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1772
 4.17.4.1 Merge. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1772
 4.17.4.2 AlongVector  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1773
 4.17.4.3 PointToPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1774
 4.17.4.4 BetweenCSys. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1775
 4.17.4.5 BetweenVectors. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1776
 4.17.4.6 BetweenPlanes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1777
 4.17.4.7 RotateAroundVector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1779
 4.17.4.8 RotatePointToPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1780
 4.17.4.9 Reflect . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1781
 4.17.4.10 CreatePattern . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1782
 4.18 Results Vector ID Query Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1783
 4.18.1 Results Vector ID Query Constants (Enumerations). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 783
 4.18.1.1 Constants for Nodal and NodalWithComponents Met hods  . . . . . . . . . . . . . . . . . . . . . . . . 1784
 4.18.1.2 Constants for NodalOther Method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  1785
 4.18.1.3 Constants for Line and LineAllLocations Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1785 4.18.1.4 Constants for LineOther Method  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1786
 4.18.1.5 Constants for Planar Element Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 788
 4.18.1.6 Constants for PlateOther Method  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 1789
 4.18.1.7 Constants for Solid Element Met hods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 791
 4.18.1.8 Constants for SolidOther Method . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1792
 4.18.1.9 Constants for Sold Laminate Element Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1793
 4.18.1.10 Constants for Elemental Method. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1793
 4.18.2 Results Vector ID Quer y Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1795
 4.18.2.1 Find . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1795
 4.18.2.2 Nodal. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1796
 4.18.2.3 NodalWithComponents. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1797
 4.18.2.4 NodalOther . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1798
 4.18.2.5 Line . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1799
 4.18.2.6 LineAllLocations  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1800
 4.18.2.7 LineOther  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1801
 4.18.2.8 Plate. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1802
 4.18.2.9 PlateWithCorner s  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1803
 4.18.2.10 Laminate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1804
 4.18.2.11 LaminateWithCorners. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1805
 4.18.2.12 LaminateGlobalPly . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1806
 4.18.2.13 LaminateGlobalPlyWith Corners. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1807
 4.18.2.14 PlateOther . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1808
 4.18.2.15 Solid  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1809
 4.18.2.16 SolidWithCorners . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1810
 4.18.2.17 SolidOther . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1811
 4.18.2.18 LaminateSolid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1812
 4.18.2.19 LaminateSolidWithCorners  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 1813
 4.18.2.20 LaminateSolidGlobalPl y. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1814
 4.18.2.21 LaminateSolidGlobalPl yWithCorners  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1815
 4.18.2.22 Elemental  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1816
 4.18.2.23 Complex  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1817
 4.18.2.24 User . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1819
 4.19 Stress Linearization (Str essLinear) Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1821
 4.19.1 StressLinear Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1821
 4.19.2 StressLinear Obj ect Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1823
 4.19.2.1 CalcStressLinearization  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1823
 4.20 PublishTool Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 1826
 4.20.1 PublishTool Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1827
 4.20.1.1 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1827
 4.20.1.2 SetFormat  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1828
 4.20.1.3 SetParagraphAlignment  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1829
 4.20.1.4 SetParagraphIndent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1830
 4.20.1.5 SetParagraphSpacing  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1831
 4.20.1.6 AddStyle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1832
 4.20.1.7 AddParagraph . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1833
 4.20.1.8 AddPicture  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1835
 4.20.1.9 AddView . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1836
 4.20.1.10 AddDataTable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1837
 4.20.1.11 AddFunctionTableEditor  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 1838
 4.20.1.12 AddEntityEditor  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1839
 4.20.1.13 AddMessages  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1840
 4.20.1.14 AddChart. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1841
 4.20.1.15 UserTable  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1842
 4.20.1.16 PublishToClipboard  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1843
 4.20.1.17 PublishToFile  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1844
 4.21 PublishTable Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 1846
 4.21.1 PublishTable Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1847
 4.21.1.1 AddColumn . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1847
 4.21.1.2 AddColumnGroupTitle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1849
 4.21.1.3 AddRowNumbering  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 1850
 4.21.1.4 SetRowTitle. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1851
 4.21.1.5 SetRealFormat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1852
 4.21.1.6 SetTableStyle. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1853
 4.21.1.7 SetCellStyle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1854
 4.21.1.8 SetCellReal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1855
 4.21.1.9 SetCellInteger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1856
 4.21.1.10 SetCellText . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1857
 4.21.1.11 SetMultiCellStyle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1858
 4.21.1.12 SetMultiCellReal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1859
 4.21.1.13 SetMultiCellInteger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1860
 4.21.1.14 SetMultiCellText . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1861
 4.21.1.15 Publish . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1862
 4.22 BodyMesher Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1863
 4.22.1 BodyMesher Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1863
 4.22.2 BodyMesher Object Option Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1866
 4.22.2.1 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1866
 4.22.2.2 Dialog  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1867
 4.22.2.3  Size . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1868
 4.22.2.4 UseSizing. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1869
 4.22.2.5 Associate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1870
 4.22.2.6 CalculateDefaultMeshSize  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1871
 4.22.2.7 SetSizeOnCurve  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1872
 4.22.2.8 SetSizeOnSurfaces  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1873
 4.22.3 BodyMesher Object Oper ation Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1874
 4.22.3.1 MeshBodies . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1874
 4.22.3.2 MeshOnMesh  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1875
5. FEMAP Entity Objects
 5.1 Common Entity Properties and Method s  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1883
 5.1.1 Common Entity Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1883
 5.1.2 Common Entity Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1884
 5.1.2.1 Get . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 1884
 5.1.2.2 GetLibrary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1885
 5.1.2.3 Put . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1887
 5.1.2.4 PutLibrary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1888
 5.1.2.5 GetTitleList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1889
 5.1.2.6 GetTitleIDList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1890
 5.1.2.7 ParseTitleID. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1892
 5.1.2.8 Exist. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 1894
 5.1.2.9 Deletable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1895
 5.1.2.10 Delete. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1896
 5.1.2.11 DeleteLibrary. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1897
 5.1.2.12 Reset  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1898
 5.1.2.13 Next . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1899
 5.1.2.14 NextInSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1900
 5.1.2.15 Prev . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1901
 5.1.2.16 First . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . 1902
 5.1.2.17 FirstInSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1903
 5.1.2.18 Last  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1904
 5.1.2.19 NextSet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1905
 5.1.2.20 PrevSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1906
 5.1.2.21 NextEmptySet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1907
 5.1.2.22 PrevEmptySet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1908
 5.1.2.23 NextID. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1909
 5.1.2.24 PrevID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1910
 5.1.2.25 NextEmptyID  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1911
 5.1.2.26 PrevEmptyID  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1912
 5.1.2.27 SelectID. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1913
 5.1.2.28 SelectIDWithNew . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1914
 5.1.2.29 CountSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1915
 5.2 Aero Panel/Body Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1916
 5.2.1 Aero Panel/Body Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1916
 5.2.2 Aero Panel/Body Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1917
 5.2.2.1 GetDivisionList. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1917
 5.2.2.2 PutDivisionList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1918
 5.2.2.3 SlenderBodyCount  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1919
 5.2.2.4 InterferenceBodyCount. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 1920
 5.2.2.5 PanelSpanCount . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1921
 5.2.2.6 PanelChordCount . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1922
 5.2.2.7 GetBoxSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1923
 5.2.2.8 AeroChordXYZ  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1924
 5.2.2.9 AeroSpanXYZ  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1925
 5.3 Aero Property Object s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 1926
 5.3.1 Aero Property Object Pr operties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1926
 5.3.2 Aero Property Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1927
 5.3.2.1 GetThetaList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1927
 5.3.2.2 PutThetaList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1928
 5.3.2.3 GetRadiList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1929
 5.3.2.4 PutRadiList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1930
 5.3.2.5 ClearSbList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1931
 5.3.2.6 ClearIbList  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1932
 5.3.2.7 ClearTheta1List. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1933
 5.3.2.8 ClearTheta2List. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1934
 5.3.2.9 SlenderBodyDivisionsByProp  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 1935
 5.3.2.10 InterferenceBodyDivisionsByProp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1936
 5.3.2.11 GetSBRadiCount. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1937
 5.3.2.12 GetIBRadiCount . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1938
 5.4 Aero Spline Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 1939
 5.4.1 Aero Spline Object  Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1939
 5.4.2 Aero Spline Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1940
 5.4.2.1 GetNodeSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1940
 5.4.2.2 GetBoxSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1941
 5.5 Aero Surface Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1942
 5.5.1 Aero Surface Object  Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1942
 5.5.2 Aero Surface Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1943
 5.5.2.1 PutSurfaceSet1  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1943
 5.5.2.2 PutSurfaceSet2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1944
 5.5.2.3 GetS urfaceSet1 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1945
 5.5.2.4 GetS urfaceSet2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1946
 5.5.2.5 ClearSurfaceSet1. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1947
 5.5.2.6 ClearSurfaceSet2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1948
 5.6 AnalysisCase Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 1949
 5.6.1 AnalysisCase Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1949
 5.6.2 AnalysisCase Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1978
 5.6.2.1 InitAnalysisCase . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1978
 5.6.2.2 DeleteAnalysisCase  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1979
 5.6.2.3 ActiveContactEntities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1980
 5.6.2.4 GetContactTable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1981
 5.6.2.5 PutContactTable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1982
 5.6.2.6 GetStandardTrim . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 1983
 5.6.2.7 PutStandardTrim . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1984
 5.6.2.8 GetTrimControlSurf  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1985
 5.6.2.9 PutTrimControlSurf. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1986
 5.6.2.10 GetOptLimits. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1987
 5.6.2.11 PutOptLimits . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 1988
 5.6.2.12 GetStep  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 1989
 5.6.2.13 PutStep. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1990
 5.6.2.14 DeleteStep . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1991
 5.6.3 AnalysisCase Object - ANSYS Specific Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1 992
 5.6.3.1 KBC. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 1992
 5.6.3.2 PSTRES. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1993
 5.6.3.3 TIME . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1994
 5.6.3.4 AUTOTS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1995
 5.6.3.5 LANBOPTION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 1996
 5.6.3.6 PCGOPT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1997
 5.6.3.7 SUBOPT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 1998
 5.6.3.8 LUMPM  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 1999
 5.6.3.9 ALPHAD. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2000
 5.6.3.10 BETAD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2001
 5.6.3.11 DMPSTR . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2002
 5.6.3.12 DMPRAT  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2003
 5.6.3.13 NEQIT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2004
 5.6.3.14 NLGEOM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2005
 5.6.3.15 ARCLEN . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2006
 5.6.3.16 LNSRCH . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2007
 5.6.3.17 PRED. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2008
 5.6.3.18 SPOPT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2009
 5.6.3.19 PSDUNIT  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2010
 5.6.3.20 PFACT. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2011
 5.6.3.21 PSDCOM. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2012
 5.7 AnalysisMgr Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 2013
 5.7.1 AnalysisMgr Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2013
 5.7.2 AnalysisMgr Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2069
 5.7.2.1 InitAnalysisMgr. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2069
 5.7.2.2 GetText . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2070
 5.7.2.3 PutText  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2071
 5.7.2.4 AllFreqOn . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2072
 5.7.2.5 AllFreqOff . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2073
 5.7.2.6 TurnOnFreq . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2074
 5.7.2.7 TurnOffFreq  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2075
 5.7.2.8 GetUsedFREQS. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2076
 5.7.2.9 PutUsedFREQS . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2077
 5.7.2.10 GetCorrelate  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2078
 5.7.2.11 GetCorrelate2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2079
 5.7.2.12 PutCorrelate. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2080
 5.7.2.13 PutCorrelate2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2081
 5.7.2.14 ActiveContactEntities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2082
 5.7.2.15 GetContactTable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2083
 5.7.2.16 PutContactTable  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2084
 5.7.2.17 Case . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2085
 5.7.2.18 Analyze . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2086
 5.7.2.19 AnalyzeMultiple . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2087
 5.7.2.20 ClearAnalysisQueue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2088
 5.7.2.21 Preview . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2089
 5.7.2.22 GetStandardTrim . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2090
 5.7.2.23 PutStandardTrim . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2091
 5.7.2.24 GetTrimControlSurf . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2092
 5.7.2.25 PutTrimControlSurf  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2093
 5.7.2.26 GetOptVars . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2094
 5.7.2.27 PutOptVars . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2095
 5.7.2.28 GetOptLimits  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2096
 5.7.2.29 PutOptLimits. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2097
 5.7.2.30 GetOptMCs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2098
 5.7.2.31 PutOptMCs . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2099
 5.7.2.32 GetMptSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2100
 5.7.2.33 PutMptSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2101
 5.7.2.34 PutMptSetID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2102
 5.7.2.35 ClearMptSet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2103
 5.7.2.36 DeleteAnalysisCase  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2104
 5.7.3 AnalysisMgr Objects - AN SYS Specific Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 21 05
 5.7.3.1 KBC  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2105
 5.7.3.2 PSTRES  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2106
 5.7.3.3 TIME. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2107
 5.7.3.4 AUTOTS. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2108
 5.7.3.5 LANBOPTION . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2109
 5.7.3.6 PCGOPT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2110
 5.7.3.7 SUBOPT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2111
 5.7.3.8 LUMPM  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2112
 5.7.3.9 ALPHAD  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2113
 5.7.3.10 BETAD . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2114
 5.7.3.11 DMPSTR. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2115
 5.7.3.12 DMPRAT  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2116
 5.7.3.13 NEQIT. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2117
 5.7.3.14 NLGEOM . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2118
 5.7.3.15 ARCLEN. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2119
 5.7.3.16 LNSRCH. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2120
 5.7.3.17 PRED  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2121
 5.7.3.18 SPOPT. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2122
 5.7.3.19 PSDUNIT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2123
 5.7.3.20 PFACT  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2124
 5.7.3.21 PSDCOM  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2125
 5.7.3.22 AnsWriteGroup. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2126
 5.7.3.23 AnsSkipCSys  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2127
 5.7.3.24 AnsSkipNode  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2128
 5.7.3.25 AnsSkipElem  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2129
 5.7.3.26 AnsSkipMatl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2130
 5.7.3.27 AnsSkipProp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2131
 5.7.3.28 AnsSkipGroup. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2132
 5.7.3.29 AnsSkipMisc. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2133
 5.7.3.30 AnsRSTComp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2134
 5.7.4 AnalysisMgr Objects - LS -Dyna Specific Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 135
 5.7.4.1 DynWriteGroup  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2135
 5.7.4.2 DynSkipCSys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2136
 5.7.4.3 DynSkipNode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2137
 5.7.4.4 DynSkipElem . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2138
 5.7.4.5 DynSkipMatl. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2139
 5.7.4.6 DynSkipProp. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2140
 5.7.4.7 DynSkipGroup  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2141
 5.7.4.8 DynSkipMisc  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2142
 5.8  AnalysisStep Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2143
 5.8.1 AnalysisStep Obj ect Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2143
 5.8.2 AnalysisStep Obj ect Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2151
 5.8.2.1  InitAnalysisStep . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2151
 5.8.2.2 DeleteAnalysisStep . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2152
 5.8.2.3 ActiveContactEntities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2153
 5.9 AnalysisStudy Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 2154
 5.9.1 AnalysisStudy Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2154
 5.9.2 AnalysisStudy Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2155
 5.9.2.1 CountOutputSets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2155
 5.9.2.2 OutputSets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2156
 5.9.2.3 HasOutputSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2157
 5.9.2.4 AddOutputSets  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2158
 5.9.2.5 RemoveOutputSets . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2159
 5.9.2.6 RemoveAllOutputSets. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2160
 5.9.2.7 Delete. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2161
 5.10 BCDefinition Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2162
 5.10.1 BCDefinition Object Prop erties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2162
 5.10.2 BCDefinition Object Me thods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2163
 5.10.2.1 PutAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2163
 5.10.2.2 ResetNextBC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2164
 5.10.2.3 NextBC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2165
 5.10.2.4 CountBCs  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2166
 5.11 BCEqn Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 2167
 5.11.1 BCEqn Object Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2167
 5.11.2 BCEqn Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2168
 5.11.2.1 GetAll  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2168
 5.11.2.2 PutAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2169
 5.11.2.3 NextOnNode . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2170
 5.12 BCGeom Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 2171
 5.12.1 BCGeom Object Pr operties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2171
 5.12.2 BCGeom Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2173
 5.12.2.1 GetSearch  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2173
 5.12.2.2 SetSurfSliding . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2174
 5.12.2.3 SetSurfNormal. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2175
 5.12.2.4 SetSurfDirection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2176
 5.12.2.5 SetCylinder . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2177
 5.12.2.6 SetFixed. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2178
 5.12.2.7 SetPinned. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2179
 5.12.2.8 SetNoRotation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2180
 5.12.2.9 SetArbitrary . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2181
 5.12.2.10 NextOnEntity. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2182
 5.13 BCNode Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2183
 5.13.1 BCNode Object Pr operties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2183
 5.13.2 BCNode Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2184
 5.13.2.1 Add  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2184
 5.13.2.2 AddArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2185
 5.13.2.3 AddNonZero . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2186
 5.13.2.4 PutArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2188
 5.13.2.5 GetAllArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2189
 5.13.2.6 PutAllArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2190
 5.14 BCSet Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 2191
 5.14.1 BCSet Object Prop erties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2191
 5.14.2 BCSet Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2192
 5.14.2.1 Expand. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2192
 5.14.2.2 Compress . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2193
 5.14.2.3 ResetNextBC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2194
 5.14.2.4 NextBC . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2195
 5.14.2.5 ResetNextBCDef . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2197
 5.14.2.6 NextBCDef . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2198
 5.14.2.7 GetCombination  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2200
 5.14.2.8 PutCombination  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2201
 5.14.2.9 NodesAsSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2202
 5.15 Chart Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2203
 5.15.1 Chart Object  Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2203
 5.15.2 Chart Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2209
 5.15.2.1 AddDataSeries  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2209
 5.15.2.2 RemoveDataSeries  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2210
 5.15.2.3 RemoveAllDataSeries. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2211
 5.15.2.4 GetDataSeries . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2212
 5.15.2.5 ShowPane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2213
 5.16 Chart Data Series Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . 2214
 5.16.1 Chart Data Series Obj ect Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2214
 5.16.2 Chart Data Series Obj ect Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2220
 5.16.2.1 GetXY . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2220
 5.16.2.2 CopyToClipboard . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2221
 5.16.2.3 GetEntityType. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2222
 5.17 Connection Property Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2223
 5.17.1 Connection Property Object Prope rties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2223
 5.17.2 Accessing Connection Property Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 2223
 5.17.2.1 Connection Property Array Index Values. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 222 5
 5.17.3 Connection Property Object Method s. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2235
 5.17.3.1 SetDefaults  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2235
 5.18 Connection Region Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2236
 5.18.1 Connection Region Object Proper ties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2236
 5.18.2 Connection Region Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2240
 5.18.2.1 GetContactList  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2240
 5.18.2.2 PutContactList. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2241
 5.18.2.3 GetEntities. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2242
 5.18.2.4 GetEntitiySet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2243
 5.18.2.5 AddContact . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2244
 5.18.2.6 SetOutputType  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2245
 5.18.2.7 SetOffset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2246
 5.18.2.8 GetOffset. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2247
 5.18.2.9 SetFriction. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2248
 5.18.2.10 GetFriction  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2249
 5.18.2.11 SetAnalyticSurfaceType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2250
 5.18.2.12 GetAnalyticSurfaceType. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2251
 5.18.2.13 SetRigidType  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2252
 5.18.2.14 IsRigidType. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2253
 5.18.2.15 Expand  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2254
 5.18.2.16 Compress. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2255
 5.18.2.17 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2256
 5.18.2.18 Reverse . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2257
 5.18.2.19 Enable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2258
 5.18.2.20 IsEnabled. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2259
 5.18.2.21 BoundingBox  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2260
 5.18.2.22 BoundingBoxInCSys  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2261
 5.18.2.23 IsEmpty . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2262
 5.18.2.24 RemoveDuplicates  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2263
 5.18.2.25 NodesAsSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2264
 5.18.2.26 ElementsAsSet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2265
 5.19 Connection Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 2266
 5.19.1 Connection Object Prop erties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2266
 5.19.2 Connection Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2267
 5.19.2.1 Prop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2267
 5.19.2.2 Enable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2268
 5.19.2.3 IsEnabled. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2269
 5.19.2.4 BoundingBox. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2270
 5.19.2.5 BoundingBoxInCSys. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2271
 5.19.2.6 ConnectionsByType  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2272
 5.19.2.7 CombinationsByType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2273
 5.19.2.8 IsGlueConntor . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2275
 5.19.2.9 GetCombinations. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2276
 5.20 CSys Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2277
 5.20.1 CSys Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2277
 5.20.2 CSys Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2278
 5.20.2.1 XYPoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2278
 5.20.2.2 Axis . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2279
 5.20.2.3 TwoAxes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2280
 5.21 Curve Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 2281
 5.21.1 Curve Object Pr operties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2281
 5.21.1.1 The Curve Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2284
 5.21.2 Curve Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2285
 5.21.2.1 Reverse  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2285
 5.21.2.2 EndPoints. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2286
 5.21.2.3 PointsAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2287
 5.21.2.4 ArcCircleInfo. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2288
 5.21.2.5 ParamToXYZ  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2289
 5.21.2.6 XYZToParam  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2290
 5.21.2.7 Project . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2291
 5.21.2.8 ProjectToClosest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2292
 5.21.2.9 ProjectAlongVect or. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2293
 5.21.2.10 Tangent . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2294
 5.21.2.11 Length . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2295
 5.21.2.12 PartialLength . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2296
 5.21.2.13 ParamAtLength . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2297
 5.21.2.14 MeshParam . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2298
 5.21.2.15 AddMeshLoc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2300
 5.21.2.16 AddMeshLocXYZ. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2301
 5.21.2.17 Nodes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2302
 5.21.2.18 NodesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2304
 5.21.2.19 Elements  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2305
 5.21.2.20 ElementsAsSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2306
 5.21.2.21 ElementsWithFaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2307
 5.21.2.22 BoundingBox. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2308
 5.21.2.23 BoundingBoxInCSys. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2309
 5.21.2.24 GetMeshLoc  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2310
 5.21.2.25 GetMeshLocXYZ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2311
 5.21.2.26 IsSmoothEdge . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2312
 5.21.2.27 Surfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2313
 5.21.2.28 SurfacesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2314
 5.21.2.29 Normal. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2315
 5.21.2.30 IsCombinedCurve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2316
 5.21.2.31 GetCombinedCurves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2317
 5.21.2.32 CombinedCurvesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2318
 5.21.2.33 CombineCurves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2319
 5.21.2.34 Facets. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2320
 5.21.2.35 PartialLengthXYZ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2321
 5.21.2.36 PartialLengthNode. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2322
 5.21.2.37 IsStraight . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2323
 5.21.2.38 IsArc  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2324
 5.21.2.39 IsNonManifold  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2325
 5.21.2.40 IsGeneral . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2326
 5.21.2.41 IsSmooth . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2327
 5.21.2.42 IsMergeable. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2328
 5.21.2.43 IsFreeEdge  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2329
 5.21.2.44 IsOnSolidRegion. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2330
 5.21.2.45 TangentAtEnds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2331
 5.21.2.46 CurvatureAcrossEdge . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2332
 5.21.2.47  ClosestPointToCurve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2333
 5.21.2.48 ClosestPointToSurface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2334
 5.21.2.49 MinRadius. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2335
 5.21.2.50 ParamOnCombinedCurve . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2336
 5.21.2.51 IsSuppressed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2337
 5.21.2.52 ClearMeshLoc. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2338
 5.21.2.53 HasMeshSize. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2339
 5.21.2.54 SetSimpleMeshLoc . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2340
 5.21.2.55 MeshCount . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2341
 5.21.2.56 CommonPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2342
 5.21.2.57 Solid  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2343
 5.21.2.58 Midpoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2344
 5.21.2.59 Center  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2345
 5.21.2.60 GetPrecision  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2346
 5.21.2.61 ResetPrecision. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2347
 5.21.2.62 InitMeshAttributes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2348
 5.21.2.63 ManifoldType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2349
 5.21.2.64 IsFacet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2350
 5.22 Data Surface Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 2351
 5.22.1 Data Surface Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2351
 5.22.2 Data Surface Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2353
 5.22.2.1 GetDataSurf  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2353
 5.22.2.2 PutDataSurf. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2354
 5.22.2.3 VarAlongCoord. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2355
 5.22.2.4 VarBetween2Pts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2356
 5.22.2.5 VarBetween4Pts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2358
 5.22.2.6 VarBetween8Pts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2359
 5.22.2.7 VarParametric2Pt  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2360
 5.22.2.8 VarParametric4Pt  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2361
 5.22.2.9 VarOutputMapV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2362
 5.22.2.10 VarMeshSurface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2363
 5.22.2.11 VarSpatialUVtable  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2364
 5.22.2.12 VarSpatialXYZTable  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2365
 5.22.2.13 VarArbitrary3DCoord. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2366
 5.22.2.14 VarEquation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2367
 5.22.2.15 GetCellValue. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2368
 5.22.2.16 SetCellValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2369
 5.22.2.17 SetCellEquation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2370
 5.22.2.18 GetColumnTitle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2371
 5.22.2.19 GetColumnValue  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2372
 5.22.2.20 GetRowTitle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2373
 5.22.2.21 SetRowTitle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2374
 5.22.2.22 GetRowValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2375
 5.22.2.23 SetRowValue  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2376
 5.22.2.24 GetPageTitle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2377
 5.22.2.25 SetPageTitle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2378
 5.22.2.26 GetPageValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2379
 5.22.2.27 SetPageValue  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2380
 5.22.2.28 SetColumTitle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2381
 5.22.2.29 SetColumValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2382
 5.22.2.30 SetCellBlank . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2383
 5.22.2.31 GetDataSurfInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2384
 5.22.2.32 GetPageInfo. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2385
 5.22.2.33 Resize  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2386
 5.22.2.34 Evaluate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2387
 5.22.2.35 GetData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2388
 5.22.2.36 GetDataArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2391
 5.22.2.37 GetDataSurfType. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2392
 5.23 Direct Matrix Input Obj ects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2394
 5.23.1 Direct Matrix Input Object Prope rties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2394
 5.23.2 Direct Matrix Input Object Method s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2396
 5.23.2.1 PutMatrixEntry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2396
 5.23.2.2 GetMatrixEntry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2397
 5.23.2.3 PutMatrixList. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2398
 5.23.2.4 GetMatrixList  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2399
 5.23.2.5 PutCombination. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2400
 5.23.2.6 GetCombination  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2401
 5.23.2.7 PutCombinations . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2402
 5.23.2.8 GetCombinations. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2403
 5.23.2.9 GetCombinationSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2404
 5.24 Discrete Value Set Object . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . 2405
 5.24.1 Discrete Value Set Obj ect Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2405
 5.24.2 Discrete Value Set Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2406
 5.24.2.1 GetNumberLevels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2406
 5.24.2.2 GetLevelInteger. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2407
 5.24.2.3 SetLevelInteger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2408
 5.24.2.4 AddLevelInteger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2409
 5.24.2.5 GetLevelFloat . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2410
 5.24.2.6 SetLevelFloat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2411
 5.24.2.7 AddLevelFloat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2412
 5.24.2.8 Sort  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2413
 5.24.2.9 GetTitle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2414
 5.24.2.10 SetTitle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2415
 5.24.2.11 CreateRangeInteger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2416
 5.24.2.12 CreateRangeIFloat. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2417
 5.24.2.13 AutoCreateLevels . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2418
 5.25 Element Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2420
 5.25.1 Element Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2420
 5.25.1.1 Accessing Element Nodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2423
 5.25.2 Element Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2424
 5.25.2.1 GetAllArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2424
 5.25.2.2 GetAllArray2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2428
 5.25.2.3 GetAllArray3. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2430
 5.25.2.4 PutAllArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2432
 5.25.2.5 GetGeomPropArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2434
 5.25.2.6 GetNodeList  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2435
 5.25.2.7 PutNodeList. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2436
 5.25.2.8 ClearNodeList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2437
 5.25.2.9 GetSpringOrient  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2438
 5.25.2.10 SetSpringOrient . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2439
 5.25.2.11 GetSpringOffset. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2440
 5.25.2.12 SetSpringOffset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2441
 5.25.2.13 Prop . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2442
 5.25.2.14 Matl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2443
 5.25.2.15 GetCentroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2444
 5.25.2.16 GetCentroidArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2445
 5.25.2.17 GetFaceCentroid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2446
 5.25.2.18 GetFaceNormal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2447
 5.25.2.19 GetFaceArea . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2448
 5.25.2.20 GetSingleFaceInfoArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2449
 5.25.2.21 GetMultiFaceInfoArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2451
 5.25.2.22 GetFaceNodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2453
 5.25.2.23 GetFaceNodes2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2454
 5.25.2.24 GetEdgeNodes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2455
 5.25.2.25 IsParabolic. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2456
 5.25.2.26 Thickness  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2457
 5.25.2.27 Length . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2458
 5.25.2.28 Area. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2459
 5.25.2.29 Inertia  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2460
 5.25.2.30 GetMinMaxEdgeLength . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 2461
 5.25.2.31 ElementHasThickness. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2462
 5.25.2.32 SetPlateThickness . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2463
 5.25.2.33 GetAnsysFormulationArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 2464
 5.25.2.34 PutAnsysFormulationArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 2465
 5.25.2.35 GetAnsysKeyoptArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2466
 5.25.2.36 PutAnsysKeyoptArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2467
 5.25.2.37 HasProp. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2468
 5.25.2.38 HasMatl. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2469
 5.25.2.39 GetMatlOrientVec. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2470
 5.25.2.40 ElementalCSys  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2471
 5.26 Freebody Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 2473
 5.26.1 Freebody Object Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2473
 5.26.2 Freebody Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2477
 5.26.2.1 GetElements  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2477
 5.26.2.2 SetElements. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2478
 5.26.2.3 ClearElemen ts . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2479
 5.26.2.4 GetNodes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2480
 5.26.2.5 SetNodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2481
 5.26.2.6 ClearNodes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2482
 5.26.2.7 CalculateNodalCenter . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2483
 5.26.2.8 CalculateSummation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2484
 5.26.2.9 CalculateSummation2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2485
 5.26.2.10 GetNodalSums  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2486
 5.26.2.11 GetSumAtNode. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2487
 5.26.2.12 GetSectionCutSums  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2488
 5.26.2.13 SetLocationFromCoord. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2489
 5.26.2.14 Show . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2490
 5.27 Frequency Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2492
 5.27.1 Frequency Object Proper ties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2492
 5.27.2 Frequency Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2493
 5.27.2.1 AddFreq  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2493
 5.27.2.2 AddFreqByFuncID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2494
 5.27.2.3 UpdFreq  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2495
 5.27.2.4 UpdFreqByFuncID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2496
 5.27.2.5 AddFreq1  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2497
 5.27.2.6 UpdFreq1  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2498
 5.27.2.7 AddFreq2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2499
 5.27.2.8 UpdFreq2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2500
 5.27.2.9 AddFreq3  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2501
 5.27.2.10 UpdFreq3  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2502
 5.27.2.11 AddFreq4  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2503
 5.27.2.12 UpdFreq4  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2504
 5.27.2.13 AddFreq5  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2505
 5.27.2.14 AddFreq5ByFuncID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2506
 5.27.2.15 UpdFreq5  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2507
 5.27.2.16 UpdFreq5ByFuncID . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2508
 5.27.2.17 AllOn . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2509
 5.27.2.18 AllOff  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2510
 5.27.2.19 TurnOn  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2511
 5.27.2.20 TurnOff . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2512
 5.27.2.21 GetFREQType. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2513
 5.27.2.22 GetFREQData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2514
 5.27.2.23 GetFREQ1Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2515
 5.27.2.24 GetFREQ2Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2516
 5.27.2.25 GetFREQ3Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2517
 5.27.2.26 GetFREQ4Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2518
 5.27.2.27 GetFREQ5Data . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2519
 5.27.2.28 SetFREQData  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2520
 5.27.2.29 SetFREQ1Data  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2521
 5.27.2.30 SetFREQ2Data  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2522
 5.27.2.31 SetFREQ3Data  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2523
 5.27.2.32 SetFREQ4Data  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2524
 5.27.2.33 SetFREQ5Data  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2525
 5.28 Function Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2526
 5.28.1 Function Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2526
 5.28.2 Function Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2527
 5.28.2.1 GetFunctionList. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2527
 5.28.2.2 PutFunctionList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2528
 5.28.2.3 GetValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2529
 5.29 GFXArrow Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2530
 5.29.1 GFXArrow Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2530
 5.29.2 GFXArrow Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2531
 5.29.2.1 PutAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2531
 5.29.2.2 PutAllArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2532
 5.29.2.3 PutCoordArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2533
 5.29.2.4 DeleteAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2534
 5.30 GFXLine Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2535
 5.30.1 GFXLine Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2535
 5.30.2 GFXLine Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2536
 5.30.2.1 PutAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2536
 5.30.2.2 PutAllArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2537
 5.30.2.3 PutCoordArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2538
 5.30.2.4 DeleteAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2539
 5.31 GFXPoint Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2540
 5.31.1 GFXPoint Object Proper ties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2540
 5.31.2 GFXPoint Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2541
 5.31.2.1 PutAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2541
 5.31.2.2 PutAllArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2542
 5.31.2.3 PutCoordArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2543
 5.31.2.4 DeleteAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2544
 5.32 GFXQuad4 Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2545
 5.32.1 GFXQuad4 Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2545
 5.32.2 GFXQuad4 Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2546
 5.32.2.1 PutAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2546
 5.32.2.2 PutAllArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2547
 5.32.2.3 PutCoordNormalArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2548
 5.32.2.4 PutCoordArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2549
 5.32.2.5 DeleteAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2550
 5.33 GFXTria3 Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2551
 5.33.1 GFXTria3 Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2551
 5.33.2 GFXTria3 Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2552
 5.33.2.1 PutAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2552
 5.33.2.2 PutAllArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2553
 5.33.2.3 PutCoordNormalArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2554
 5.33.2.4 PutCoordArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2555
 5.33.2.5 DeleteAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2556
 5.34 GlobalPly Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 2557
 5.34.1 GlobalPly Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2557
 5.34.2 GlobalPly Object Method s . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2557
 5.35 GlobalStep Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2559
 5.35.1 GlobalStep Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2559
 5.35.2 GlobalStep Object Meth ods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2566
 5.35.2.1  InitGlobalStep  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2566
 5.35.2.2 DeleteGlobalStep  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2567
 5.35.2.3 ActiveContactEntities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2568
 5.36 Group Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 2569
 5.36.1 Group Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2569
 5.36.1.1 Group Range Types  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2571
 5.36.1.2 Group List Types  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2573
 5.36.2 Group Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2574
 5.36.2.1 List  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2574
 5.36.2.2 GetList. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2576
 5.36.2.3 HasList  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2577
 5.36.2.4 CountList. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2578
 5.36.2.5 Range  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2579
 5.36.2.6 RangeReset . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2581
 5.36.2.7 RangeGetAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2582
 5.36.2.8 RangeNext. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2583
 5.36.2.9 RangeAdd . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2584
 5.36.2.10 RangeDelete  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2585
 5.36.2.11 RangeDeleteAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2586
 5.36.2.12 SetAdd. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2587
 5.36.2.13 SetAdd2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2588
 5.36.2.14 SetAddOpt. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2589
 5.36.2.15 SetAddOpt2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2590
 5.36.2.16 Add . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2591
 5.36.2.17 Add2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2592
 5.36.2.18 AddOpt . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2593
 5.36.2.19 AddOpt2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2594
 5.36.2.20 AddRelated . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2595
 5.36.2.21 SelectModel  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2596
 5.36.2.22 SelectMesh . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2597
 5.36.2.23 SelectContact  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2598
 5.36.2.24 SelectAllOnLayer . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2599
 5.36.2.25 ReferencedGroups. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2600
 5.36.2.26 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2601
 5.37 Layer Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2602
 5.37.1 Layer Object Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2602
 5.37.2 Layer Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2603
 5.37.2.1 InitAllLayerInfo  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2603
 5.37.2.2 InitLayerContentsInfo.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2604
 5.37.2.3 InitLayerGroupReferen ceInfo. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2605
 5.37.2.4 InitLayerViewReferenceInfo  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2606
 5.37.2.5 ClearLayerInfo  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2607
 5.37.2.6 ResetNextLayerInfo  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2608
 5.37.2.7 NextLayerInfo. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2609
 5.37.2.8 FindLayerInfo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2610
 5.37.2.9  FindAlIReferencedLayers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2611
 5.37.2.10 FindEmptyLayers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2612
 5.37.2.11 FindMissingLayers . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2613
 5.38 Layup Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 2614
 5.38.1 Layup Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2614
 5.38.2 Layup Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2616
 5.38.2.1 AddPly. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2616
 5.38.2.2 AddPly2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2617
 5.38.2.3 InsertPly. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2618
 5.38.2.4 InsertPly2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2619
 5.38.2.5 SetPly. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2620
 5.38.2.6 SetPly2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2621
 5.38.2.7 SetAllPly . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2622
 5.38.2.8 SetAllPly2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2623
 5.38.2.9 GetPly . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2624
 5.38.2.10 GetPly2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2625
 5.38.2.11 GetAllPly. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2626
 5.38.2.12 GetAllPly2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2627
 5.38.2.13 DeletePly . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2628
 5.38.2.14 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2629
 5.38.2.15 Compute  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2630
 5.38.2.16 Compute2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2631
 5.38.2.17 HasGlobalPly. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2632
 5.38.2.18 HasMaterial . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2633
 5.38.2.19 HasFullGlobalPly  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2634
 5.39 LoadBolt Object. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2635
 5.39.1 LoadBolt Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2635
 5.39.2 LoadBolt Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2636
 5.39.2.1 AddArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2636
 5.39.2.2 PutArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2637
 5.39.2.3 GetAllArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2638
 5.39.2.4 PutAllArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2639
 5.40 LoadDefinition Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2640
 5.40.1 LoadDefinition Object Pr operties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2640
 5.40.2 LoadDefinition Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2641
 5.40.2.1 PutAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2641
 5.40.2.2 ResetNextLoad  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2642
 5.40.2.3 NextLoad . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2643
 5.40.2.4 CountLoads . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2644
 5.40.2.5 IsTotalLoad . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2645
 5.40.2.6 SetTotalLoad . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2646
 5.41 LoadETemp Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . 2647
 5.41.1 LoadETemp Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2647
 5.41.2 LoadETemp Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2648
 5.41.2.1 AddArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2648
 5.41.2.2 PutArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2649
 5.41.2.3 GetAllArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2650
 5.41.2.4 PutAllArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2651
 5.42 LoadGeom Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2652
 5.42.1 LoadGeom Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2652
 5.42.2 LoadGeom Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2656
 5.42.2.1 GetSearch  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2656
 5.42.2.2 NextOnEntity. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2657
 5.42.3 LoadGeom Load Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2658
 5.43 LoadMesh Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 2660
 5.43.1 LoadMesh Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2660
 5.43.2 LoadMesh Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2664
 5.43.2.1 GetSearch  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2664
 5.43.2.2 Add  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2665
 5.43.2.3 AddArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2666
 5.43.2.4 GetAllArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2668
 5.43.2.5 PutArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2670
 5.43.2.6 PutAllArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2672
 5.43.2.7 NextOnEntity  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2674
 5.43.3 LoadMesh Load Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2675
 5.44 LoadNTemp Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2676
 5.44.1 LoadNTemp Object Proper ties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2676
 5.44.2 LoadNTemp Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2677
 5.44.2.1 AddArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2677
 5.44.2.2 PutArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2678
 5.44.2.3 GetAllArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2679
 5.44.2.4 PutAllArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2680
 5.45 LoadSet Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2681
 5.45.1 LoadSet Object Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2681
 5.45.2 LoadSet Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2686
 5.45.2.1 Expand  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2686
 5.45.2.2 Compress. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2687
 5.45.2.3 ResetNextLoad . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2688
 5.45.2.4 NextLoad. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2689
 5.45.2.5 ResetNextLoadDef . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2691
 5.45.2.6 NextLoadDef. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2692
 5.45.2.7 GetCombination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2694
 5.45.2.8 PutCombination  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2695
 5.45.2.9 NodesAsSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2696
 5.45.2.10 ElementsAsSet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2697
 5.46 MapOutput Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2698
 5.46.1 MapOutput Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2698
 5.46.2 MapOutput Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2700
 5.46.2.1 MapFromModelToSetV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 2700
 5.46.2.2 MapFromModelToSet2V2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2703
 5.46.2.3 MapFromModelToLocationV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 706
 5.46.2.4 GetOutputDataSurface  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2708
 5.46.2.5 MapOutputDataToLocation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 2709
 5.47 Material Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2712
 5.47.1 Material Object Proper ties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2712
 5.47.1.1 Accessing Material Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 2714
 5.47.1.2 Material Array Index Values. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2714
 5.47.2 Material Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2720
 5.47.2.1 AutoComplete . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2720
 5.47.2.2 AreDuplicate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2721
 5.47.2.3 GetLibraryOfType  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2722
 5.47.2.4 GetValueArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2723
 5.47.2.5 PutValueArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2725
 5.47.2.6 PutValue . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2727
 5.47.2.7 CopyArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2728
 5.48 Mesh Point Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2730
 5.48.1 MeshHardPoint Object Pr operties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2730
 5.48.2 MeshHardPoint Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2731
 5.48.2.1 Enable . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2731
 5.48.2.2 IsEnabled. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2732
 5.48.2.3 OnPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2733
 5.48.2.4 AutoDistanceToG eometry  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2734
 5.48.2.5 UpdateMeshPoints  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2735
 5.48.2.6 UpdateMeshPointsOnGeometry . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 736
 5.49 Mesh Point Definition Ob jects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2739
 5.49.1 MeshHardPointDefinition Object Prope rties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 2739
 5.49.2 MeshHardPointDefinition Object Meth ods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2740
 5.49.2.1 ResetNextMeshPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2740
 5.49.2.2 NextMeshPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2741
 5.49.2.3 CountMeshPoints  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2742
 5.50 Monitor Point Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 2744
 5.50.1 Monitor Point Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2744
 5.50.2 Monitor Point Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2746
 5.50.2.1 PutComponentSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2746
 5.50.2.2 PutAeroMeshSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2747
 5.50.2.3 GetComponentSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2748
 5.50.2.4 GetAeroMeshSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2749
 5.50.2.5 ClearComponentSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2750
 5.50.2.6 ClearAeroMeshSet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2751
 5.51 Node Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2752
 5.51.1 Node Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2752
 5.51.2 Node Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2753
 5.51.2.1 GetAll  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2753
 5.51.2.2 GetAllArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2754
 5.51.2.3 GetAllArray2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2755
 5.51.2.4 GetCoordArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2756
 5.51.2.5 GetCoordArray2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2757
 5.51.2.6 PutAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2758
 5.51.2.7 PutAllArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2759
 5.51.2.8 PutCoordArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2760
 5.51.2.9 GetClosest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2761
 5.51.2.10 IsMidsideNode  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2762
 5.52 Optim Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 2763
 5.52.1 Optim Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2763
 5.52.2 Optim Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2764
 5.53 Optimization Manufacturing Constraints Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2766
 5.53.1 Optimization Manufacturing Constraint Object Properties.  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2766
 5.53.2 Optimization Manufacturing Constraints Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2768
 5.53.2.1 SetAddm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2768
 5.53.2.2 GetAddm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2769
 5.53.2.3 SetCast. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2770
 5.53.2.4 GetCast  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2771
 5.53.2.5 SetCheckerboar d . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2772
 5.53.2.6 GetCheckerboard. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2773
 5.53.2.7 SetCycSym  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2774
 5.53.2.8 GetCycSym . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2775
 5.53.2.9 SetExtrusion  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2776
 5.53.2.10 GetExtrusion . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2777
 5.53.2.11 SetMinSize  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2778
 5.53.2.12 GetMinSize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2779
 5.53.2.13 SetMaxSize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2780
 5.53.2.14 GetMaxSize . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2781
 5.53.2.15 SetPlSym . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2782
 5.53.2.16 GetPlSym. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2783
 5.54 Optimization Relationship (Variable) Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2784
 5.54.1 Optimization Relationship Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 2784
 5.54.2 Optimization Relationship Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2785
 5.54.2.1 SetupTopology  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2785
 5.54.2.2 GetTopology . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2786
 5.54.2.3 SetupShellT . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2787
 5.54.2.4 GetShellT. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2788
 5.54.2.5 SetupProp  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2789
 5.54.2.6 GetProp . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2790
 5.54.2.7 SetupMatl  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2791
 5.54.2.8 GetMatl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2792
 5.54.2.9 CalculateBounds . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2793
 5.55 Optimization Response (Limits) Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2794
 5.55.1 Optimization Response (Limits) Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2794
 5.55.2 Optimization Response (Limits) Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2796
 5.55.2.1 SetEntities . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2796
 5.55.2.2 GetEntities. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2797
 5.55.2.3 SetupDisplacement . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2798
 5.55.2.4 GetDisplacement. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2799
 5.55.2.5 SetupSPCForce . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2800
 5.55.2.6 GetSPCForce. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2801
 5.55.2.7 SetupElemV2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2802
 5.55.2.8 GetElemV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2803
 5.55.2.9 SetupESE  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2804
 5.55.2.10 GetESE . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2805
 5.55.2.11 SetupFreq  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2806
 5.55.2.12 GetFreq . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2807
 5.55.2.13 SetupEign . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2808
 5.55.2.14 GetEign . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2809
 5.55.2.15 SetupBuckle  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2810
 5.55.2.16 GetBuckle . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2811
 5.55.2.17 SetConstraints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2812
 5.55.2.18 GetConstraints. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2813
 5.56 Output Objects (OBSOLETE). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2814
 5.56.1 Output Object Properties (OBSOLETE). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2814
 5.56.1.1 Output Components (O BSOLETE)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2816
 5.56.1.2 Output Vector IDs (O BSOLETE)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 817
 5.56.2 Output Object Methods (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 2818
 5.56.2.1 GetFromSet (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2818
 5.56.2.2 GetOutputList (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  2819
 5.56.2.3 GetOutputListAtID (OBS OLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282 0
 5.56.2.4 GetOutputListAtSet (OBSOLETE)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282 1
 5.56.2.5 GetModel (OBSOLETE)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 2822
 5.56.2.6 SetModel (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2823
 5.56.2.7 SetComplexOptions (O BSOLETE)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2824
 5.56.2.8 Clear (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2825
 5.56.2.9 PutOutputList (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2826
 5.56.2.10 InitScalarAtNode (OBSOLETE)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 27
 5.56.2.11 GetScalarAtNode (OBSOLETE)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 282 8
 5.56.2.12 GetScalarAtNodeSet (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2829 5.56.2.13 PutScalarAtNode (OBS OLETE). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 30
 5.56.2.14 InitVectorAtNode (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283 1
 5.56.2.15 GetVectorAtSingleNode (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2832
 5.56.2.16 GetVectorAtNode (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2833 5.56.2.17 GetVectorAtNodeSet (OBSOLETE)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2834 5.56.2.18 PutVectorAtNode (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283 5
 5.56.2.19 InitScalarAtElem (OBS OLETE). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 836
 5.56.2.20 GetScalarAtElem (OBSOLETE)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 283
7
 5.56.2.21 GetScalarAtElemSet (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2838
 5.56.2.22 PutScalarAtElem (OBS OLETE). . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 39
 5.56.2.23 InitElemWithCorner (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2840 5.56.2.24 GetElemWithCorner (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2842
 5.56.2.25 GetElemWithCornerSet (OBSOLET E)  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2844
 5.56.2.26 PutElemWithCorner (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2846 5.56.2.27 InitScalarAtBeam (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 28 48
 5.56.2.28 PutScalarAtBeam (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 284 9
 5.56.2.29 FindMaxMin (OBSOLETE) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2 850
 5.57 OutputSet Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 2851
 5.57.1 OutputSet Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2851
 5.57.2 OutputSet Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2853
 5.57.2.1 VectorV2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2853
 5.57.2.2 OutputVectorsV2. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2854
 5.57.2.3 SetComplexOptions. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2855
 5.57.2.4 SetCombination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2856
 5.57.2.5 SetStudyCombination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2857
 5.57.2.6 ExpandCombination . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2858
 5.58 Plane Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2860
 5.58.1 Plane Object Prop erties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2860
 5.58.2 Plane Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2861
 5.58.2.1 PutAll. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2861
 5.59 Point Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . 2862
 5.59.1 Point Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2862
 5.59.2 Point Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2863
 5.59.2.1 Nodes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2863
 5.59.2.2 NodesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2865
 5.59.2.3 Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2866
 5.59.2.4 CurvesAsSet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2867
 5.59.2.5 SurfacesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2868
 5.59.2.6 Solid. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2869
 5.59.2.7 GetClosest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2870
 5.59.2.8 GetAllArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2871
 5.59.2.9 GetCoordArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2872
 5.60 Property Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2873
 5.60.1 Property Object Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2873
 5.60.2 Accessing Property Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2875
 5.60.2.1 Property Array Index Values. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2877
 5.60.3 Property Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2894
 5.60.3.1 ComputeShape. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2894
 5.60.3.2 ComputeStdShape . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2895
 5.60.3.3 ComputeStdShape2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2897
 5.60.3.4 ComputeGeneralShape . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2899
 5.60.3.5 ComputeGeneralShape2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2900
 5.60.3.6 Matl . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2901
 5.60.3.7 Layup. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2902
 5.60.3.8 Thickness. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2903
 5.60.3.9 Area . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2904
 5.60.3.10 Inertia. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2905
 5.60.3.11 AreDuplicate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2906
 5.60.3.12 GetLibraryOfType. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2907
 5.60.3.13 GetValueArray  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2909
 5.60.3.14 PutValueArray. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2910
 5.60.3.15 PutValue  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2911
 5.60.3.16 CopyArray . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2912
 5.60.3.17 HasMatl  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2913
 5.61 Reference Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 2914
 5.61.1 Reference Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2914
 5.61.2 Reference Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2915
 5.61.2.1 DeleteAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2915
 5.62 Report Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 2916
 5.62.1 Report Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2916
 5.62.2 Report Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2916
 5.63 Superelement Reference Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2917
 5.63.1 Superelement Reference Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 2917
 5.64 Solid Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . 2918
 5.64.1 Solid Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2918
 5.64.2 Solid Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2920
 5.64.2.1 Points. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2920
 5.64.2.2 PointsAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2921
 5.64.2.3 Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2922
 5.64.2.4 CurvesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2923
 5.64.2.5 FreeCurvesAsSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2924
 5.64.2.6 Surfaces. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2925
 5.64.2.7 SurfacesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2926
 5.64.2.8 SheetFacesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2927
 5.64.2.9 WireCurvesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2928
 5.64.2.10 MassProp. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2929
 5.64.2.11 Export . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2930
 5.64.2.12 IsSolid . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2931
 5.64.2.13 IsSheet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2932
 5.64.2.14 IsWire . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2933
 5.64.2.15 IsGeneral . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2934
 5.64.2.16 Inside. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2935
 5.64.2.17 Facets  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2936
 5.64.2.18 Nodes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2937
 5.64.2.19 NodesAsSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2939
 5.64.2.20 Elements . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2940
 5.64.2.21 ElementsAsSet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2941
 5.64.2.22 BoundingBox  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2942
 5.64.2.23 InitializeAttributes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2943
 5.64.2.24 Volume . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2944
 5.64.2.25 IsFacet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2945
 5.64.2.26 IsAllFacet  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2947
 5.64.2.27 IsFacet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2948
 5.65 Surface Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 2949
 5.65.1 Surface Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2949
 5.65.2 Surface Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2953
 5.65.2.1 Inside. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2953
 5.65.2.2 InsideXYZ. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2954
 5.65.2.3 ParamToXYZ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2955
 5.65.2.4 XYZToParam . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2956
 5.65.2.5 CG . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2957
 5.65.2.6 Area. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 2958
 5.65.2.7 ApproximateArea . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2959
 5.65.2.8 Tangents  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2960
 5.65.2.9 Normal  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2961
 5.65.2.10 NormalAtXYZ  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2962
 5.65.2.11 ProjectOnto . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2963
 5.65.2.12 ProjectToClosest . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2964
 5.65.2.13  ProjectAlongVector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2965
 5.65.2.14 Solid  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2966
 5.65.2.15 BoundarySurfaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2967
 5.65.2.16 BoundarySurfacesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2968
 5.65.2.17 AdjacentSurfaces  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 2969
 5.65.2.18 AdjacentSurfacesAsSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 2970
 5.65.2.19 Curves . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2971
 5.65.2.20 CurveLoops. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2972
 5.65.2.21 CurvesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2974
 5.65.2.22 Points. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2975
 5.65.2.23 PointsAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 2976
 5.65.2.24 EndPoints  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2977
 5.65.2.25 EndPointsAsSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2978
 5.65.2.26 Planar. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2979
 5.65.2.27 Cylindrical . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2980
 5.65.2.28 Spherical . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2981
 5.65.2.29 Conical. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2982
 5.65.2.30 Toroidal . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2983
 5.65.2.31 IsPlane . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2984
 5.65.2.32 IsCylinder  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2985
 5.65.2.33 IsSphere . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2986
 5.65.2.34 IsCone . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2987
 5.65.2.35 IsTorus. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2988
 5.65.2.36 IsBlend. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2989
 5.65.2.37 IsBoundingSolidRegion  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2990
 5.65.2.38 Facets. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2991
 5.65.2.39 Nodes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 2992
 5.65.2.40 NodesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2994
 5.65.2.41 Elements  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 2995
 5.65.2.42 ElementsAsSet. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2996
 5.65.2.43 ElementsWithFaces . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 2997
 5.65.2.44 ElementFaces. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 2998
 5.65.2.45 BoundingBox. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 2999
 5.65.2.46 BoundingBoxInCSys. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 3000
 5.65.2.47 BoundingSize  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 3001
 5.65.2.48 NormalBox  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3002
 5.65.2.49 MaxNormalDeviation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . 3003
 5.65.2.50 AngleAtPoint. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3004
 5.65.2.51 HasPole . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3005
 5.65.2.52 MinRadiiOfCurvature . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3006
 5.65.2.53 RationalParamToXYZ. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3007
 5.65.2.54 ResetMeshAttr. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 3008
 5.65.2.55 Mesh  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 3009
 5.65.2.56 CurvesAtPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 3011
 5.65.2.57 CommonCurvesAsSet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 3012
 5.65.2.58 FindMappedMeshingCorners . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  3013
 5.65.2.59 IsSuppressed . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3014
 5.65.2.60 Curvature . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 3015
 5.65.2.61 IsMappedApproach . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3016
 5.65.2.62 IsMappable  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3017
 5.65.2.63 AddMeshPoint. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3018
 5.65.2.64 RemoveMeshPoint  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3019
 5.65.2.65 RemoveAllMeshPoints . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3020
 5.65.2.66 CountMeshPoint . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 3021
 5.65.2.67 IsMultiLoop. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3022
 5.65.2.68 PointLoops. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3023
 5.65.2.69 InitMeshAttributes. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3024
 5.65.2.70 IsFacet . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3025
 5.66 Table Data Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 3027
 5.66.1 Table Data Object Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3027
 5.66.2 Table Data Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3028
 5.66.2.1 GetFunction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3028
 5.66.2.2 PutFunction . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 3029
 5.66.2.3 CellRange  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 3030
 5.66.2.4 SaveToFile. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 3031
 5.66.2.5 Initialize. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 3032
 5.66.2.6 Resize  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3033
 5.66.2.7 Clear  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 3034
 5.66.2.8 SetCellDouble . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3035
 5.66.2.9 SetCellinteger  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3036
 5.66.2.10 SetCellText . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3037
 5.66.2.11 SetCellEquation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3038
 5.66.2.12 SetCellEntity . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3039
 5.66.2.13 GetCellDouble  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3040
 5.66.2.14 GetCellinteger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3041
 5.66.2.15 GetCellText. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3042
 5.66.2.16 GetCellEntity  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3043
 5.66.2.17 SetMultiCellDouble  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 3044
 5.66.2.18 SetMultiCellInteger. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 3046
 5.66.2.19 SetMultiCellText. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3047
 5.66.2.20 GetMultiCellDouble . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . 3048
 5.66.2.21 GetMultiCellInteger . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3049
 5.67 Text Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . . 3050
 5.67.1 Text Object Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 3050
 5.67.2 Text Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3051
 5.67.2.1 GetFontData  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3051
 5.67.2.2 SetFontData. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3052
 5.68 TMGBC Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 3053
 5.68.1 TMGBC Object Prop erties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 3053
 5.68.2 TMGBC Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3054
 5.68.2.1 GetAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3054
 5.68.2.2 PutAll  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3055
 5.68.2.3 GetAll2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 3056
 5.68.2.4 PutAll2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 3057
 5.69 TMGCtrl Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3058
 5.69.1 TMGCtrl Object Properties. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3058
 5.69.2 TMGCtrl Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 3059
 5.69.2.1 GetAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3059
 5.69.2.2 PutAll  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3060
 5.69.2.3 GetAll2 . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 3061
 5.69.2.4 PutAll2  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 3062
 5.70 TMGInt Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . 3063
 5.70.1 TMGInt Object Properti es. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3063
 5.70.2 TMGInt Object Methods. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3064
 5.70.2.1 GetAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3064
 5.70.2.2 PutAll  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3065
 5.71 TMGOpt Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 3066
 5.71.1 TMGOpt Object Properti es . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 3066
 5.71.2 TMGOpt Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3067
 5.71.2.1 GetAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3067
 5.71.2.2 PutAll  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3068
 5.72 TMGReal Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 3069
 5.72.1 TMGReal Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 3069
 5.72.2 TMGReal Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3070
 5.72.2.1 GetAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3070
 5.72.2.2 PutAll  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3071
 5.73 Variable Objects  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3072
 5.73.1 Variable Object Properties  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3072
 5.73.2 Variable Object Methods  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3073
 5.73.2.1 GetVarID. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 3073
 5.73.2.2 Evaluate. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 3074
 5.73.2.3 Define . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3075
 5.73.2.4 DefineReal  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3076
 5.74 Vector Objects. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . . . 3078
 5.74.1 Vector Object Pr operties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 3078
 5.74.2 Vector Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3079
 5.74.2.1 PutAll  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3079
 5.75 View Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3080
 5.75.1 View Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3080
 5.75.1.1 View Object Freebody Interface . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 3103
 5.75.1.2 View Option Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 3105
 5.75.1.3 Model Contour Data Types . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . 3115
 5.75.2 View Object Methods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 3119
 5.75.2.1 Initialize. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 3119
 5.75.2.2 GetMultiGroupList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 3120
 5.75.2.3 SetMultiGroupList. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3121
 5.75.2.4 ClearMultiGroupList . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3122
 5.75.2.5 Visible . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 3123
 5.75.2.6 Redraw. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 3124
 5.75.2.7 Regenerate . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 3125
 5.75.2.8 IsLayerVisible . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3126
 5.75.2.9 SetLayerVisible . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3127
 5.75.2.10 Rotate. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3128
 5.75.2.11 AlignCSys . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3129
 5.75.2.12 AlignVector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3130
 5.75.2.13 Align2Vector . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3131
 5.75.2.14 AlignWorkplane  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 3132
 5.75.2.15 AutoscaleAll . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3133
 5.75.2.16 AutoscaleVisible . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 3134
 5.75.2.17 FitVisible . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3135
 5.75.2.18 SetModelDataContourFo rm  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3136
 5.75.2.19 GetModelDataContourForm . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3137
 5.75.2.20 SetModelDataContourTy pe. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . 3138
 5.75.2.21 GetModelDataContourType . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3139
 5.75.2.22 GetFontData  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3140
 5.75.2.23 SetFontData . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3141
 5.76 ViewOrient Objects . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . . 3142
 5.76.1 ViewOrient Object Properties . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3142
 5.76.2 ViewOrient Object Met hods . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 3144
 5.76.2.1 SetEyeDirection. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3144
 5.76.2.2 GetEyeDirection . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . 3145
 5.76.2.3 SetRotationAngles. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3146
 5.76.2.4 GetRotationAngles  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . 3147
 5.76.2.5 SnapToAxes  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3148
 5.76.2.6 ViewRotation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . 3149
 5.76.2.7 ModelRotation. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3150
 5.76.2.8 CoordSysRotation . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3151
 5.76.2.9 VectorRotation  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3152
 5.76.2.10 RollThru  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . 3153
 5.76.2.11 GetFirstPathID. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3154
 5.76.2.12 GetNextPathID  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3155
 5.76.2.13 Spin . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . 3156
6. FEMAP Events
 6.1 Receiving and Processing Events  . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3157
 6.2 Alternate Method - Event Callbacks . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . 3157
 6.3 Format of Event Messages. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3158
 6.4 The FEMAP Events . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3158
 6.5 Using FEMAP Events . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .  . . . . . . . . . . . . 3160
   API-51
1. Introduction to the FEMAP API
FEMAP provides a robust set of  finite element modeling and post-processing functionality. At 
times, however, you may need a sp ecific capability that is not incl uded in the standard product. 
The FEMAP Application Programmin g Interface (API) lets you cu stomize FEMAP to meet your 
specific needs. 
The FEMAP API is an OLE/COM-based programming interface to FEMAP. It contains hundreds 
of functions that can be called from Visual Basic, VBA (Excel, Word, Access, ... ), C, or C++. The 
FEMAP API Reference  documents the objects and functions that are available in the FEMAP API.
To use the FEMAP API successfully, you need to understand:
•Objects, Methods and Properties
•Data Types
•Memory Allocation
•Global Constants 
For examples of how to use the FEMAP API,  see Section 2, "Using the FEMAP API".
1.1  Objects, Methods and Properties
The FEMAP API is an object-oriented system. If  you are familiar with object-oriented program-
ming, you should have no problem understanding the concepts discussed. If you are not, this sec-
tion briefly introduces those concepts. You shou ld refer to other sources for more complete 
information.
Throughout the FEMAP API Reference , you will see references to objects, methods, and proper-
ties. Access to functionality and data is through th e “objects” that are defined by the API. There 
are only two levels of objects in the current API: the application object, and other objects.
1.1.1  The Application Object
The first level includes a single object: the FEMAP application obj ect. In every application that 
you write, you will always define and referen ce a FEMAP application object, which forms the 
connection between your applica tion and FEMAP. For more inform ation, see Section 3, "The 
FEMAP Application Object". 
The application object contains properties (data)  and methods (functionality) that are global in 
nature. For example, all of the global da ta for your FEMAP sessi on (defined under File, Prefer-
ences ) can be accessed as properties of the applica tion object (see Section 3.3, "FEMAP Object 
Properties"). Almost all of the same functionality in the FEMAP menus is av ailable as methods in 
the application object. These are described in the other sections under Section 3, "The FEMAP 
Application Object",  and are organized according to their locations in the menu.
1.1.2  Other Objects
In addition to the main FEMAP ap plication object, the API also defines many other objects that 
provide detailed access to the entities in your mode ls. Since most of the model entities represent 
 API-52  API Definition in the Manual
the underlying modeling data, these objects are very  rich in property defi nitions. In addition, the 
API includes methods that are used to find, retrie ve, traverse and store the entities. For a full listing 
of objects, see Section 5, "FEMAP Entity Objects". 
As an important starting point to using any of th e entity objects, refer to Section 5.1, "Common 
Entity Properties and Method s" . It describes the properties an d methods that are common to all of 
the objects. This informa tion is not repeated in each of the individual objects. You should under-
stand these options before  proceeding to the detailed descrip tion of the unique capabilities of each 
object.
1.2  Data Types
To use the API, you must understand the types of data that it requires and returns. Because of dif-
ferences in the data type definitions depending on  whether you will call the API from Basic, C++, 
or some other source, all of the documentation is  presented in a “language-neutral”, more descrip-
tive form. The actual data types that you use will change from langu age to language , however, the 
underlying format of those data types must ma tch what the API requires. The following table sum-
marizes what you will find in the manual:
1.2.1  Using Visual Basic .NET
The INT4 data type, which is wide ly used throughout the API, must  be declared differently if you 
are using Visual Basic 6 or Visual Basic .NET. In Visual Basic 6, the type “Long” maps to the 4-
byte integers used by FEMAP. In Visual Basic .NET , the “Integer” type must be used to map to the 
same 4-byte integers, as the “Long” type has change d to map to 8-byte in tegers which are incom-
patible with the FEMAP API.
One other difference with Visual Basic .NET is that you must always initialize String variables 
before they can be passed. Even for methods, lik e feNotesGet in the FEMAP object, which return 
a string to you, the variable mu st be initialized prior to the call.  For example, you can not use the 
following:API Definition 
in the ManualDescription From Basic From C++
Visual 
Basic 6Visual Basic 
.NET
BOOLSingle byte, True/
False valueBoolean Boolean Unsigned Char
INT2 2-byte integer I nteger Integer short
INT4 4-byte integer L ong Integer long, int
INT8 8-byte integer n/a Int64 longlong, int64REAL4 4-byte real Single Single floatREAL8 8-byte real Double Double double
STRINGcharacter string, 
null terminatedString String char[..]
   API-53

Dim s as String 
rc = femap.feNotesGet( 1, s )
This will generate a type mismat ch error, because the String va riable has not been initialized. If 
instead you use:

Sub Main             'Full Subroutine usable in FEMAP API window 
    Dim App As femap.model      ' Declare “App” model object 
   Set App = GetObject(,"femap.model") ' Instantiate “App” object 
   Dim s As String 
   s = "" 
   
   rc = App.feNotesGet( 1, s ) ' Puts model notes into String “s” 
   
   MsgBox(s)  ' Shows String “s” in modal dialog box 

End Sub
then, everything will work properly.
One final difference is that the “Set” command is  no longer used in Vi sual Basic .NET. Through-
out this document, you will see examples that still in clude “Set”, as is requir ed for the older Visual 
Basic 6. For example,

Dim femap as Object 
Set femap = GetObject(, “femap.model”)
If you are using Visual Basic .NET, you must simply  ignore (or remove) the “Set”, leaving the cor-
rect syntax:

Dim femap as Object 
femap = GetObject(, “femap.model”)
1.2.2  Arrays and Variants
In addition to the basic data types, you will often see references to arrays of values, for example: 
INT4  x[0..9]
This implies that an array of 10, 4-byte intege rs is required. Through the API (COM) interface, 
however, all arrays must be passed as Variant da ta types. In many current  languages (for example, 
Visual Basic .NET, Visual Basic for Applicatio ns in Microsoft Office 2007, and WinWrap Basic 
embedded in FEMAP) the details of this can be hidden from you, and you can write code that 
directly passes array variables. 
Dim x(10) as Long 
x(0) = 5 
 API-54  
x(1) = 4 
...
and then x can be passed directly in calls that require an array.
In older languages like Visual Basic 6, where you need to manually declar e the Variants, you can 
create it fairly easily. For example:

Dim x(10) as Long 
Dim vx as Variant 
x(0) = 5 
x(1) = 4 
...
vx = x
This will define a variant, vx, that  contains all of the values assign ed to the x array. This variant 
can then be passed through the AP I to FEMAP in place of the array.
For any method that returns an array, you do not need to define an array variable in Basic. You 
simply define the variant, pass it to the API, and then reference it like an array afterward. This 
applies to both current and older languages.  For example,

Sub Main 
  Dim App As femap.model 
  Set App = feFemap() 
   Dim rc As Long 
  Dim a(3) As Double 
  Dim va As Variant 
   ' Create and store some userdata
   Dim e As UserData 
  Set e = App.feUserData 
  a(0) = 1.290 
  a(1) = 2*a(0) 
  a(2) = 2*a(1) 

  va = a                          ' Variant to Array 
  rc = e.WriteDoubleArray(3, va)  ' Write Variant as Array 
  rc = e.Put(1) 
   ' Retrieve userdata 
  Dim vb As Variant 
  Dim i As Long 
  Dim f As UserData 
  Set f = App.feUserData 

   API-55
  rc = f.Get (1) 
  rc = f.ReadDoubleArray ( i, vb ) ' Read Array from DB 
                                   'into Variant 

  Dim mstr As String  'Convert Doubles in Variant to Strings 
  mstr =Str$(vb(0)) + " " + Str$(vb(1))+" "+Str$(vb(2)) 
  MsgBox(mstr) 

End Sub
1.2.3  An Array Shortcut
In current languages where you can pass arrays di rectly without manually declaring a Variant, 
there is a non-standard programming shortcut that you can use to simplify some of your coding. If 
there is an array that is used as an input paramete r to a function, and you want to specify all entries 
in the array to have the same value,  rather than declaring an array at  all, you can simply pass a sin-
gle value - either as a constant or a single va riable. FEMAP will automatically treat this single 
value if it were an array of the proper size with each entry in the array equal to the value you 
passed. Of course, if you need to  specify different values for the array entries, then the normal 
method must be used.  For example, the node  object has a method called PutAllArray() that 
requires multiple input a rrays, so we could use....
Sub Main 
  Dim App As femap.model 
  Set App = feFemap() 
Dim rc As Long 
Dim nd as femap.node 
Set nd = App.feNode 
Dim numNode as Long 
Dim ndID(10) as Long 
Dim xyz(30) as Long 
Dim layer as Long 
layer = 1 
...
rc = nd.PutAllArray( numNode, ndID, xyz, layer, 43, 0, 0, 0, 0 )

End Sub
Note that all the arguments including and after “l ayer” actually require arrays, but are being passed 
as single values because we are assi gning the same constant value to all of the nodes being defined 
in the call to this method.
1.2.4  Arrays and Visual Basic .NET
If you were using Visual Basic 6, then as stated, a ll array variables are passed via the Variant type. 
With the release of Visual Basic .NET, the Variant da ta type is no longer available in Basic. To use 
Visual Basic .NET,  simply declare all of the vari ables that you would have declared as “Variant” 
in Visual Basic 6, as the “Object” data type. With  this change, the remainder of your code will 
work as it did previously. 
 API-56  API Definition in the Manual
1.2.5  Arrays a nd Visual C++
If you are callinig the API from Visual  C++, probably the easiest appr oach to accessing arrays is to 
use the ATL capability to create Safe Arrays  and Variants. To create Safe Arrays, use
CComSafeArray<data_type> ldof(size);
Where “data_type” is the type of data in the array, and size is th e number of entries. You should 
use the following “data_type”s to  be compatible with the API::
To create Variants, you can use:
CComVariant vdir;
You can fill the Variant by simply setting it equal to the Safe Array,  and then pass it to the API. 
Refer to Section 2.10, "Calling th e API from Visual C++", for an ex ample of using this approach.
1.2.6  Using Multi- dimensional Arrays
Even though this documents shows arrays as being dimensioned as 
REAL8 xyz[0..11]
It may be more convenient is some cases to think of them in terms of mu lti-dimensional arrays. 
For example, the above array may really contain 4 se ts of coordinates (3 values for each coordinate 
- x, y and z), in which case referencing it as 
REAL8 xyz[4][3]
may simplify your coding. With some care and un derstanding this is possible. There are two basic 
issues that need to be properly hand led to use multi-dimensional arrays
Array Storage Order
Depending on the language that you are using to call the API, multi-dimensi onal arrays store data 
in different order. FEMAP requires data stored in these arrays to be in a specific order that is 
described with the individual property or method - it is up to you to properly arrange the array 
indices so that data is stored as needed - and this varies by language. Fo r example, in the above 
array FEMAP expected to have the data arrang ed as follows (X1,Y1,Z 1, X2,Y2,Z2, X3,Y3,Z3, 
X4,Y4,Z4). If you were calling the API from C or C++, the rightmost index varies first, so declar-
ing the array as:
double xyz[4][3]                 (in C or C++)
would be appropriate. On the other hand, if you were using Basic, then the leftmost index varies 
first and you would have to declare the array as:
Dim xyz(2,3) as double             (in Basic)API Definition 
in the ManualSafe Array Creation
BOOL CComSafeArray<BOOL> ...
INT4 CComSafeArray<LONG> ...REAL8 CComSafeArray<DOUBLE> ...
   API-57
to get the data into the proper locations. Also notic e in Basic, that the dimensions are the values of 
the largest index, not the size to alloca te, so the numbers decreased by 1 each.
Proper Dimensioning
To get all of the data in the proper locations, you can not “over-size” a multi-dimensional array - 
except in the final dimension. In general, you will want to make your arrays just big enough to 
hold the data that you are using, and no larger. In  some cases however, it is convenient to have one 
or more large arrays that simply collect data an d may not be completely filled. When using multi-
dimensional arrays however, care must be taken. In the above case, from C, when you declared the 
array as 
double xyz[4][3]                 (in C or C++)
everything was fine and data is stored as (X 1,Y1,Z1, X2,Y2,Z2, X3,Y 3,Z3, X4,Y4,Z4). If how-
ever you declared the array as 
double xyz[4][4]                 (in C or C++)
then data would be stored as (X1,Y1,Z 1,HOLE1, X2,Y2,Z2,HOLE2, X3,Y3,Z3,HOLE3 
X4,Y4,Z4,HOLE4), and you can see that the “holes” will move th e data to the wrong locations. 
Similarly, if you over-dimension the first index in Basic, the same thing will happen.
You can successfully over-dimension the fi nal index however. In C, for example,
double xyz[100][3]                 (in C or C++)
would be fine, since data would be stored as (X1,Y1,Z1, X2,Y2,Z2, X3,Y3,Z3, X4,Y4,Z4, ... 
X100, Y100, Z100), and even if on ly 4 sets of X,Y ,Z values were ne eded, they will still be in their 
proper locations.
1.2.7  Multiple Definitions of Array Properties
As you look through the document ation for the various entity typ es, you will see definitions of 
properties that look like the following:
Both of these properties provide a ccess to the same data. The first (in this case “dof”) lets you 
access individual array entries, one at a time (fo r example, dof[2]). The second Variant property 
lets you access the entire array in one OLE/COM call. To access these Variant properties, you must 
create a “Variant” variable in your application, lo ad the entire array into it (by setting it equal to the 
property), manipulate your local va riable as needed, then put the entire array back into the FEMAP 
object (by setting it equal to your local Variant). Once again, in Visual Basic .NET, use the generic 
“Object” data type instead of “Variant” which is no longer supported.
1.3  Memory Allocation
Like any OLE/COM implementation, when using th e FEMAP API, it is the responsibility of the 
calling program (the one you write) to free all memo ry when it is no longer  needed. This means if 
you call an API method that returns a variant (a st ring or array), you must free the memory used by 
that variable when you no longer need it.Property Description
BOOL dof[0..5]
or
V ARIANT vdofAn array of flags telling whet her or not the corresponding 
degrees of freedom are constrained (True) or free (False) in this 
set.
 API-58  
If you are using Basic, as soon as a variable goes  out of scope (your program finishes, or the proce-
dure where the variable was defined finishes), it is automatically freed. If you are using another 
language, like C or C++, you need  to explicitly free the memory.
It is not just variables that are returned from the API that you need to free . If you allocate memory 
for a variable and pass it to an API method, the me mory will not be freed (you might still need it). 
It is your responsibility to fr ee all memory for your variables.
1.4  Global Constants
Throughout this manual are refere nces to certain constant values: fo r example, error return values, 
entity type values, group defini tion types, events, and other options. Please see Section 3.3.6, 
"Entity Types", Section 3.3.7, "FEMAP Constants", Section 4.6. 2.7, "Group Se lection Rules", 
Section 5.36.1.1, "Group Range Types", and Section 6.4, "The FEMAP Events" for more informa-
tion.
   API-59
2. Using the FEMAP API
This chapter includes some fair ly simple examples that can be  implemented using the FEMAP 
API. These examples show some of the basic setup  and syntax of using the API, but do not attempt 
to show the breadth of the API’s capabilities. 
2.1  Using Visual Basic .NET
These examples were created to use Visual Basic 6. As such they use the “Long” and “Variant” 
data types that are required in that version of Vi sual Basic. If you want to use them with Visual 
Basic .NET, the “Long” data types must be changed to “Integer” and the “Variant” data types to “Object”.
2.2  Loading Data into Excel
This program shows a simple example of connec ting to FEMAP from Excel, and loading all of the 
nodal data into the worksheet. A lthough this program loads nodal da ta, the approach is the same 
for other data types. To load other data types, you would simply dimension and access other 
FEMAP objects and reference their prop erties as you are storing the data.
______________________________________________________________________________
Private Sub LoadNodalData()
'1. Attach to the model in a FEMAP session th at is already running . (The comma before 
femap.model is used externally for a FEMAP model already open.)
Dim femap As Object
Set femap = GetObject(, "femap.model")
'2.  Create a Node object.
Dim nd As Object
Set nd = femap.feNode
'3.  Make the titles in the first row of the worksheet.
    Row = 1
    Worksheets(1).Cells(Row, 1).Value = "ID"
    Worksheets(1).Cells(Row, 2).Value = "Layer"
    Worksheets(1).Cells(Row, 3).Value = "Color"
    Worksheets(1).Cells(Row, 4).Value = "Def CSys"
    Worksheets(1).Cells(Row, 5).Value = "Out CSys"
    Worksheets(1).Cells(Row, 6).Value = "X"
    Worksheets(1).Cells(Row, 7).Value = "Y"
    Worksheets(1).Cells(Row, 8).Value = "Z"
 API-60  
'4.  Loop over all of the nodes in the model.
While nd.Next
    Row = Row + 1
'5.  Store properties for each node in successive worksheet rows.
    Worksheets(1).Cells(Row, 1).Value = nd.ID
    Worksheets(1).Cells(Row, 2).Value = nd.layer
    Worksheets(1).Cells(Row, 3).Value = nd.Color
    Worksheets(1).Cells(Row, 4).Value = nd.defCSys
    Worksheets(1).Cells(Row, 5).Value = nd.outCSys
    Worksheets(1).Cells(Row, 6).Value = nd.x
    Worksheets(1).Cells(Row, 7).Value = nd.y
    Worksheets(1).Cells(Row, 8).Value = nd.z
Wend
End Sub
______________________________________________________________________________
While the previous program is fairly simple, it does require calling FEMAP  for each of the nodal 
quantities. For example, each time you reference nd.x, nd.y, or nd .z, your program must call 
FEMAP to retrieve that informatio n. This approach provides the simplicity of the object-oriented 
approach, but does not necessarily  perform as well as making just  one call for multiple pieces of 
data. The following program does exactly the same thing as the prev ious one, but makes far fewer 
calls, and therefore performs better.
______________________________________________________________________________
Private Sub LoadNodalDataFast()
'1. Attach to the model in a FEMAP session that is already running.
Dim femap As Object
Set femap = GetObject(, "femap.model")
'2.  Create a Node object.
Dim nd As Object
Set nd = femap.feNode
'3.  Dimension local variables to receive the data.
Dim x As Double
Dim y As Double
Dim z As Double
Dim l As Long
Dim co As Long
Dim d As Long
Dim oc As Long
Dim e As Long
Dim rc As Long
Dim ID As Long
   API-61
Dim pb As Variant
'4.  Make the titles in the first row of the worksheet.
Row = 1
    Worksheets(1).Cells(Row, 1).Value = "ID"
    Worksheets(1).Cells(Row, 2).Value = "Layer"
    Worksheets(1).Cells(Row, 3).Value = "Color"
    Worksheets(1).Cells(Row, 4).Value = "Def CSys"
    Worksheets(1).Cells(Row, 5).Value = "Out CSys"
    Worksheets(1).Cells(Row, 6).Value = "X"
    Worksheets(1).Cells(Row, 7).Value = "Y"
    Worksheets(1).Cells(Row, 8).Value = "Z"
'5.  Loop over all of the nodes in the model.
ID = nd.nextID
While ID < 2147000000
    Row = Row + 1
'6.  Call the GetAll method of the No de object to retrieve all of the required properties in one call. 
Store the retrieved data into the worksheet.
    rc = nd.GetAll(ID, x, y, z, l, co, e, d, oc, pb)
    Worksheets(1).Cells(Row, 1).Value = ID
    Worksheets(1).Cells(Row, 2).Value = l
    Worksheets(1).Cells(Row, 3).Value = co
    Worksheets(1).Cells(Row, 4).Value = d
    Worksheets(1).Cells(Row, 5).Value = oc
    Worksheets(1).Cells(Row, 6).Value = x
    Worksheets(1).Cells(Row, 7).Value = y
    Worksheets(1).Cells(Row, 8).Value = z
'(These fields were not loaded by the first example,  but show the use of the Variant data type to 
access array data.)
    Worksheets(1).Cells(Row, 9).Value = pb(0)
    Worksheets(1).Cells(Row, 10).Value = pb(1)
    Worksheets(1).Cells(Row, 11).Value = pb(2)
    Worksheets(1).Cells(Row, 12).Value = pb(3)
    Worksheets(1).Cells(Row, 13).Value = pb(4)
    Worksheets(1).Cells(Row, 14).Value = pb(5)
    ID = nd.nextID
Wend
End Sub
______________________________________________________________________________
2.3  Loading Data from Excel
This program reverses the programs shown in the pr evious example. It takes the same nodal data 
that was stored in the worksheet, and updates th e nodes in FEMAP to have the worksheet values. 
Used together, these two examples allow you to use Excel as an editor. Running the first example 
 API-62  
loads data into your wo rksheet, where you can edit it using the tools 
available in Excel. When your edits  are complete, this program puts 
the changes back into FEMAP.
______________________________________________________________________________
Private Sub UpdateNodalData()
'1. Attach to the model in a FEMAP session that is already running.
Dim femap As Object
Set femap = GetObject(, "femap.model")
'2.  Create a Node object.
Dim nd As Object
Set nd = femap.feNode
'3.  Loop over all rows of the wo rksheet that have an ID value.
Row = 2
ID = Worksheets(1).Cells(Row, 1).Value
While ID > 0
'4.  Retrieve the node to load all of its properties.
    rc = nd.Get(ID)    
'5.  Update the properties that you have edited.
    nd.layer = Worksheets(1).Cells(Row, 2).Value
    nd.Color = Worksheets(1).Cells(Row, 3).Value
    nd.defCSys = Worksheets(1).Cells(Row, 4).Value
    nd.outCSys = Worksheets(1).Cells(Row, 5).Value
    nd.x = Worksheets(1).Cells(Row, 6).Value
    nd.y = Worksheets(1).Cells(Row, 7).Value
    nd.z = Worksheets(1).Cells(Row, 8).Value
'6.  Put the changes ba ck into the database.
    rc = nd.Put(ID)
'7.  Go to the next row.
    Row = Row + 1
    ID = Worksheets(1).Cells(Row, 1).Value
Wend
End Sub
______________________________________________________________________________
   API-63
Just as before, you can also do this function with a single call 
approach to reduce the number of times that you reference the Node 
object. 
______________________________________________________________________________
Private Sub UpdateNodalDataFast()
'1. Attach to the model in a FEMAP session that is already running.
Dim femap As Object
Set femap = GetObject(, "femap.model")
'2.  Create a Node object.
Dim nd As Object
Set nd = femap.feNode
'3.  Dimension local variables to receive the data.
Dim x As Double
Dim y As Double
Dim z As Double
Dim l As Long
Dim co As Long
Dim d As Long
Dim oc As Long
Dim e As Long
Dim rc As Long
Dim ID As Long
'4.  Arrays are passed as variants. Dimension both , assign the array to the variant, and pass the 
variant.
Dim pb As Variant
Dim p(6) As Long
pb = p
Row = 2
ID = Worksheets(1).Cells(Row, 1).Value
While ID > 0
'5.  Load the local variables with worksheet values.
    l = Worksheets(1).Cells(Row, 2).Value
    co = Worksheets(1).Cells(Row, 3).Value
    d = Worksheets(1).Cells(Row, 4).Value
    oc = Worksheets(1).Cells(Row, 5).Value
    x = Worksheets(1).Cells(Row, 6).Value
    y = Worksheets(1).Cells(Row, 7).Value
    z = Worksheets(1).Cells(Row, 8).Value
    pb(0) = Worksheets(1).Cells(Row, 9).Value
 API-64  
    pb(1) = Worksheets(1).Cells(Row, 10).Value
    pb(2) = Worksheets(1).Cells(Row, 11).Value
    pb(3) = Worksheets(1).Cells(Row, 12).Value
    pb(4) = Worksheets(1).Cells(Row, 13).Value
    pb(5) = Worksheets(1).Cells(Row, 14).Value
'6.  Put all data back into FEMAP with one call.
    rc = nd.PutAll(ID, x, y, z, l, co, e, d, oc, pb)
'7.  Go to the next row.
    Row = Row + 1
    ID = Worksheets(1).Cells(Row, 1).Value
Wend
End Sub
______________________________________________________________________________
2.4  Working with Output in FEMAP 2020.1 and above
The static ranges of Output Vector IDs in prev ious versions of FEMAP cannot accommodate the 
large numbers of new output quantities and elemen t types that are found in  today’s solutions. To 
accommodate the ongoing addition of  output quantities, some of th e existing output vectors have 
been moved to new ID ranges. 
All API object methods which required a vector ID  as an argument in version 2019.1 and below 
have been deprecated. Identical “…V2” methods have been added to work with the “version 
2020.1 and above vector IDs” (“New Vector IDs”) . Because of this, the deprecated properties and 
methods should no longer be used, however, these properties and methods will still work, they 
simply require the use of “version 2019.1 and be low vector IDs” (“Old Vector IDs”). Internally, 
FEMAP will convert any old vector ID to the appropriate new vect or ID and execute the API call 
in the same manner it would have been executed in FEMAP 2019.1 and below.
For example, the “.AddColumn” method on  the Results Browsing Object is now 
“.AddColumnV2”. It is used to add a column cont aining data from a given output vector. To fill a 
column with “Plate Bottom von Mises Stress” data, th e original method used the vector ID of 7433 
as the second argument.
rc = RBO.AddColum(nSetID, 7433, False, nCol, cIndex)
In FEMAP 2020.1 and beyond, the ID in the user interface for “Plate Bottom von Mises Stress” is 
9033. This is because the “offset” of plat e results has changed from 200 to 1000.
For example, in FEMAP 2019.1 and previous, the vector ID for “Plate Top von Mises Stress” was 
7033. Adding an offset of 200 places “Plate Mid von Mises Stress” at 7233  and “Plate Bottom von 
Mises Stress” at 7433. For FEMAP 2020.1 and above,  the offset is now 1000, which places “Plate 
Mid von Mises Stress” at 8033 and “Plate Bottom vo n Mises Stress” at 9033. Therefore, Using the 
“.AddColumn” call from above in FEMAP 2020.1 an d above will internally  convert 7433 to the 
new ID of 9033 and retrieve the results of “Plate Bottom von Mises Stress”.
Note: If the “.AddColumn” method is used, an Obsolete API Warning  message will appear. The 
user is advised to update scripts to the new “… V2” properties and methods at the earliest conve-
nience to avoid confusion of output vector IDs shown in the user interface going forward.
   API-65
The Warning Frequency  section can be used to control how often FEMAP warns the user about 
using deprecated API calls and/or how the user will be warned for a given FEMAP session:
Every Occurrence  - This is the default setting and i ssues a warning message every time a depre-
cated call, method, and/or property  involving output vector IDs or the Output Object (feOutput) is 
encountered in an API script or program.
Once Per Method/Property  - When selected, a warning will be issued a single time for each depre-
cated for each call, method, or property involvin g output vector IDs or the Output Object (feOut-
put) is encountered in an API script or program.
No More Warnings this Session  - When selected, no more warnin g messages will be issued while 
the current FEMAP session is open for any deprecate d call, method, and/or property involving out-
put vector IDs or the Output Object (feOutput) is encountered in an API script or program.
When enabled, the Warnings in Message Window Only  option will no long er display the Obsolete 
API Warning  dialog box and only list th ese warning messages to the Messages  window until the 
FEMAP session is closed. Once FEM AP is closed, all settings will re turn to the default settings 
and the next time FEMAP is opened, th e user can select their options again.

 API-66  
There are also two API calls, Pref_API_Warni ngLevel and Pref_API_WarningInDialog, which 
can be used to contro l the warning messages.
To see a full list of the remapped vector IDs,  see Section 4.9.3.2, "Output Vector IDs". 
When updating to the “…V2” method s, the new vector IDs must be  used. There is no conversion 
happening internally. If 7433 is used as an argume nt in a “…V2” version of a method, that method 
will execute with whatever output vector now uses that ID or fail if  the vector does not exist (i.e. 
7433 no longer represents Plate Bottom von Mises Stress in FEMAP 2020.1 and beyond). 
Additionally, the entire Output Obj ect has been deprecated. This Ob ject should no longer be used 
going forward. To accommodate the deprecation of the Output Object, the Results Browsing 
Object has been enhanced to matc h the functionality of the Output Ob ject. As a benefit, the Results 
Browsing Object is a more capable and efficien t way of retrieving and creating output data. 
To help mitigate the ID changes, a new “ResultsID Query Object” has been cr eated to help the user 
determine the new vector ID of a specific output quantity. This provides th e means to acquire vec-
tor IDs using a more descriptive “keyword” approach. 
For example, suppose a user want s to retrieve both “Plate Top von Mises Stress” and “Plate Bot-
tom von Mises Stress” output values to export to  Microsoft Excel. Instead of hard-coding the new 
vector IDs directly in the method arguments, the user can now fill a variable with the new vector 
ID using the “ResultsIDQuery Object”. The Result sIDQuery Object has several different methods. 
Each method can be used to loca te the new vector ID(s) for a spec ific type of output, such as 
“Nodal” for nodal output, “Line” for line element output, “Plate” for plate element output, and so 
on. The required arguments for each  method depend on the entity type, location on the entity, etc. 
of the output.
To learn more about the “Results IDQuery Object”, see Section 4.18, "Results Vector ID Query 
Objects". 
The example below fills two variables with the r espective centroid IDs of the Plate Top and Plate 
Bottom von Mises Stress output vectors a nd echoes them to the messages window.
’1. Attach to the model in a FEMAP session that is already running.
Sub Main
Dim App as femap.model
Set App = feFemap()
’2. Create a ResultsIDQuery Object
Dim lookUpID As femap.ResultsIDQuery
Set lookUpID = App.feResultsIDQuery
’3. Initialize variables for output vector IDs
Dim topVonMisesID As Long
Dim botVonMisesID As Long
’4. Use the Plate method on the ResultsIDQuery Obje ct to fill the variables with the vector IDs.
topVonMisesID = lookUpID.Plate(VPV_STRESS, VPT_VON_MISES, VPP_TOP, 
VPL_CENTROID)
   API-67
botVonMisesID = lookUpID.Plate(VPV_STRESS, VPT_VON_MISES, VPP_BOT, 
VPL_CENTROID)
’5. Write the IDs to the messages window.
App.feAppMessage(FCM_NORMAL, "Plate Top Von Mises ID:" +
Str$(topVonMisesID))
App.feAppMessage(FCM_NORMAL, "Plate Bottom Von Mises ID:" +
Str$(botVonMisesID))
End Sub
Below are two examples of how to create output using the Results Browsing Object. 
The first example creates nodal data  with component vectors. The sc ript prompts to select nodes to 
create output on and fills 3 arrays of the corresp onding size with dummy data for X, Y and Z. It 
then initializes columns to fill th e data with via “.AddVectorAtN odeColumnsV2”. Finally, it sets 
the data in the columns and sav es them as output using the “.SetVectorAtNodeColumnsV2” and 
“.Save” methods, respectively.
Sub Main
’1. Attach to the model in a FEMAP session that is already running.
    Dim App as femap.model
    Set App = feFemap()
’2. Create Objects
Dim rbo As femap.Results
Set rbo = App.feResults
Dim os As femap.OutputSet
Set os = App.feOutputSet
Dim ndSet As femap.Set
Set ndSet = App.feSet
’3.  Create variables for later use
'Variable to store newly created Output Set ID
Dim oSetID As Long
'Array to store selected El ement IDs for creating output
Dim nIDs As Variant
'Variable for how many nodes are selec ted use for creating output method
Dim listcount As Long
 API-68  
'Array to store the column indices of where  the nodal output vectors are initialized
Dim cIndex As Variant
'Arrays for output data
Dim xVals As Variant
Dim yVals As Variant
Dim zVals As Variant
’4. Initialize Output Set and store it
oSetID = os.NextEmptyID
os.title = "Create Output on Nodes Example"
os.value = 35.4
os.analysis = 5
os.Put(oSetID)
’5. Select Nodes to create results on 
ndSet.Select(FT_NODE, True, "Select Nodes to create output on")
'Find the count of nodes selected
listcount = ndSet.Count
'Fill array of the selected node IDs
ndSet.GetArray(listcount, nIDs)
'Redim data arrays to size of the nodes selected
ReDim xVals(listcount-1) As Variant
ReDim yVals(listcount-1) As Variant
ReDim zVals(listcount-1) As Variant
’6. Initialize the Result Browsing Object to create nodal vector output
'In this case, you will create total vect or and x, y, z, component vectors.
'These vectors will be stored in the 24 ,000,000 IDs for u ser defined output.
rbo.AddVectorAtNodeColumnsV2(oSetID, 24000000, 24000001, 24000002, 
24000003, "Displacement", FOT_DISP, True, cIndex)
’7. Create some data the the nodal results
For i = 0 To (listcount-1)
xVals(i) = 0.001 * i
yVals(i) = -(0.002 * i - 0.001)
zVals(i) = 0.0
   API-69
Next
’8. Set the data into the columns of the results brow sing object and then save it to store as an out-
put vector
rbo.SetVectorAtNodeColumnsV2(cIndex, listcount, nIDs, xVals, yVals, zVals)
rbo.Save( )
End Sub
The second example creates scalar elemental data. Si milarly the script prompts to select elements 
to create output on and fills an array with the corresponding size with du mmy data. It then initial-
izes a column to fill the data with via “.AddCol umnsV2”. Finally, it sets the columns and saves it 
as output using the “.SetColumnV2” and “.Save” methods.
Sub Main
’1. Attach to the model in a FEMAP session that is already running.
Dim App as femap.model
Set App = feFemap()
’2. Create Objects
Dim rbo As femap.Results
Set rbo = App.feResults
Dim os As femap.OutputSet
Set os = App.feOutputSet
Dim eSet As femap.Set
Set eSet = App.feSet
’3. Create variables for later use
'Variable to store newly created Output Set ID
Dim oSetID As Long
'Array to store selected El ement IDs for creating output
Dim eIDs As Variant
'Variable for how many nodes are selec ted use for creating output method
Dim listcount As Long
 API-70  
'Variable to store the column index of wh ere the element output vector is initialized
Dim cIndex As Long
'Arrays for output data
Dim eVals As Variant
’4. Initialize Output Set and store it
oSetID = os.NextEmptyID
os.title = "Create Output on Elements Example"
os.value = 35.4
os.analysis = 5
os.Put(oSetID)
’5. Select Elements to create results on 
eSet.Select(FT_ELEM, True, "Select Elements to create output on")
'Find the count of nodes selected
listcount = eSet.Count
'Fill array of the selected element IDs
eSet.GetArray(listcount, eIDs)
'Redim data arrays to size of the elements selected
ReDim eVals(listcount-1) As Variant
’6. Initialize the Result Browsing Object to create a column to  store elemental data
'In this case, you will create total vect or and x, y, z, component vectors.
'These vectors will be stored in the 24 ,000,000 IDs for u ser defined output.
rbo.AddScalarAtElemColumnV2(oSetID, 24000000, "Element Stress", 
FOT_STRESS, False, cIndex)
’7. Create some data the the nodal results
For i = 0 To (listcount-1)
eVals(i) = i *100 + 1200
Next
’8. Set the data into the columns of the results brow sing object and then save it to store as an out-
put vector
rbo.SetColumn(cIndex, listcount, eIDs, eVals)
   API-71
rbo.Save( )
End Sub
2.5  Using the ReadFile Object
The FEMAP API provides an object that lets you read data lines from text files and parse their 
contents. While you can use the native file read ca pabilities of the programmi ng language that you 
are using, this object is often faster than tho se routines. The extra speed  comes from the internal 
buffering of data that the object provides.
This example illustrates using this object to read  and extract all of the GRID (node) lines from a 
NASTRAN file. It is not intended to be a general NASTRAN reader. It can only handle small-field 
(or free format) lines, and only GRID statements in  already defined coordinate systems; however, 
it could be easily modified for othe r purposes. The results of this reader are used to create nodes in 
the FEMAP model, but they could just as easily be used for some other purpose.
______________________________________________________________________________
Sub Main
'1. Attach to the model in a FEMAP session that is already running.
Dim App As Object
Set App = GetObject(, "femap.model")
'2.  Create ReadFile Object.
Dim f As Object
Set f = App.feRead
'3.  Create a Node object.
Dim nd As Object
Set nd = App.feNode
Dim rc As Long
'4.  Set up field widths: 10 fields, 8 characters wide.
Dim w(10) As Long
For i = 0 To 9
   w(i) = 8
Next i
Dim wVar As Variant
wVar = w
'5.  Prepare to read the file. Read only “GRID” lines in fixe d or free format.
rc = f.SetSearchString("GRID", "")
rc = f.FixedFormat(10, wVar)
rc = f.SetAutoFormat()
rc = f.Open("d:\temp\grid.nas", 100)
 API-72  
'6.  Begin reading.
  Do
    rc = f.Read()
'7.   Put the data into the nodes.
    nd.x = f.RealField(4, 0#)
    nd.y = f.RealField(5, 0#)
    nd.z = f.RealField(6, 0#)
    nd.defCSys = f.IntField(3, 0)
    nd.outCSys = f.IntField(7, 0)
'8.  Save the nodes.
    rc = nd.Put(f.IntField(2, 0))
'9.  Keep reading until you get to the end of the file.
  Loop Until f.AtEOF()
  rc = f.Close()
End Sub
______________________________________________________________________________
2.6  Storing Your Own Data in the FEMAP Database
The FEMAP API provides the UserData object, whic h lets you store your own data in the FEMAP 
database. You can think of this st orage approach as basically a bina ry file. You write whatever data 
you want to the file, then, at a later time, you can read the data back using the same approach. The 
format and order of the data is up to you. The on ly restriction is that yo ur code must remember 
what format you used when writing the data, or you will be unable to read it later. 
The following example shows writing a number of data types to a UserData object.
______________________________________________________________________________
Dim App As femap.object  'For use by all local subroutines
'1.  Simple driver to load and then retrieve userData
Sub Main()
'2.  Attach to the model in a FEMA P session that is already running.
  Set App = GetObject(, "femap.model") 

  Call SaveUserData() 
  Call LoadUserData() 
End Sub
Private Sub SaveUserData()
   API-73
'3.  Create the UserData object.
   Dim d As Object 
   Set d = App.feUserData() 

   Dim a(5) As Double 
   Dim va As Variant 
   Dim rc As Long 
   Dim b(4) As Boolean 
   Dim vb As Variant 
   Dim p As Long 
'4.  Start writing data to the UserData storage object.
   d.WriteDouble (8.3) 
   d.WriteDouble (76.34) 
   d.WriteLong (-345) 
   d.writestring ("This is my text") 
   d.WriteDouble (3457000000000#) 
   a(0) = 0.1234 
   a(1) = 0.5432 
   a(2) = 0.9876 
   a(3) = 0.234 
   a(4) = 13.44 
   va = a 
   rc = d.WriteDoubleArray(5, va) 
   b(0) = True 
   b(1) = False 
   b(2) = True 
   b(3) = True 
   b(4) = 3 
   vb = b 
   rc = d.WriteBoolArray(5, vb) 
'5.  Assign a title and store object.
   d.Title = "ABCProduct" 
   d.Put (1)
End Sub
'______________________________________________________________________________
Private Sub LoadUserData() ' Reloads  and displays data
'6.  Create the UserData object.
   Dim e As Object 
   Set e = App.feUserData() 
 API-74  
'7.  Reload the UserData object.
   e.Get (1) 
   MsgBox (e.Title) 
   
   Dim x As Double 
   Dim i As Long 
   Dim s As String 
   Dim vb As Variant 
   Dim cc As Variant 
'8.  Start reading and displaying the data.
   rc = e.ReadDouble(x) 
   MsgBox (Str$(x)) 
   rc = e.ReadDouble(x) 
   MsgBox (Str$(x)) 
   rc = e.ReadLong(i) 
   MsgBox (Str$(i)) 
   rc = e.readstring(s) 
   MsgBox (s) 
   rc = e.ReadDouble(x) 
   MsgBox (Str$(x)) 
   rc = e.ReadDoubleArray(i, vb) 
   MsgBox (Str$(i)) 
   MsgBox (Str$(vb(0))) 
   MsgBox (Str$(vb(4))) 
   rc = e.ReadBoolArray(i, cc) 
   MsgBox (Str$(i)) 
   MsgBox (Str$(cc(0))) 
   MsgBox (Str$(cc(1))) 
   MsgBox (Str$(cc(2))) 
   MsgBox (Str$(cc(3))) 
   MsgBox (Str$(cc(4))) 
End Sub
______________________________________________________________________________
2.7  Creating a Rigid Element
Another application for the FEMAP API is to exte nd the functionality that is already present in 
FEMAP. As an example, you may sometimes need to  create a rigid, “spider” element inside a hole 
so that you can distribute a load, or make an other connection. This no rmally involves multiple 
steps. First you must find and create a node at the center of the hole or node pattern, then you must 
reselect that node and the surrounding nodes to cr eate the element. With a little bit of work with 
the API, this routine can be auto mated to simply let you select th e nodes that you want to connect.
The following example shows how to automate creating a rigid spider.
______________________________________________________________________________
   API-75
Sub Main()
'1. Initialize variables.
Dim App As femap.model
Dim feNode As Object
Dim fN As Object
Dim nodeSet As Object
Dim feElem As Object
Dim nodeCount As Long
Dim nodeX As Double
Dim nodeY As Double
Dim nodeZ As Double
Dim nodeID As Long
Dim elemID As Long
Dim vDOF As Variant
Dim vNodeArray As Variant
Dim vDum As Variant
vDOF = DOF
nodeX = 0#
nodeY = 0#
nodeZ = 0#
'2.  Attach to FEMAP.
Set App = GetObject(, "femap.model")
'3.  Ask the user to select nodes for the rigid element.
Set nodeSet = App.feSet()
rc = nodeSet.Select(7, True, "Select Nodes for Rigid Spider")
If rc = -1 Then   
'4.  Identify how many nodes were selected.
    nodeCount = nodeSet.Count()
    If nodeCount > 0 Then
'5.  Make some local arrays to ho ld the data that was collected.
        ReDim nodeArray(nodeCount) As Long
        ReDim faceArray(nodeCount) As Long
        ReDim Weight(nodeCount) As Long
        ReDim DOFArray(nodeCount * 6) As Long
        
        vDOF = DOFArray
        vWeight = Weight
        vfaceArray = faceArray
 API-76  
        
        Dim passCount As Long
        passCount = 0    
'6.  Walk the nodes.
        Set fN = App.feNode()
        rc = nodeSet.Reset()
        nodeID = nodeSet.Next()
'7.  Store the IDs.
        Do While nodeID <> 0
            nodeArray(passCount) = nodeID
            passCount = passCount + 1
            rc = fN.Get(nodeID)
            
            nodeX = nodeX + fN.x
            nodeY = nodeY + fN.y
            nodeZ = nodeZ + fN.z
            
            nodeID = nodeSet.Next()
        Loop
'8.  Compute the centroid and create the Node at the centroid.
        Set feNode = App.feNode()
        vNodeArray = nodeArray
        
        nodeID = feNode.NextEmptyID
        
        feNode.x = nodeX / nodeCount
        feNode.y = nodeY / nodeCount
        feNode.z = nodeZ / nodeCount
'9.  Store the node.
        rc = feNode.Put(nodeID)
        
        If rc = -1 Then 'return code FE_OK
'10. Create the element.
            Set feElem = App.feElem()
            
            elemID = feElem.NextEmptyID
            
            feElem.Type = 29 'Rigid
            feElem.topology = 13 'Rigid
            feElem.node(0) = nodeID 'Independent Node
            feElem.Release(0, 0) = 1
            feElem.Release(0, 1) = 1
   API-77
            feElem.Release(0, 2) = 1
            
            vDum = nodeArray
           rc = feElem.PutNodeList(0, nodeCount, vNodeArray, _ 
                                       vfaceArray, vWeight, vDOF )
'11. Store the element.
            rc = feElem.Put(elemID)
            
        End If
       End If
   End If
End Sub
______________________________________________________________________________
2.8  Working with Lo ads and Constraints
Working with Loads and Constraints includes:
Section 2.8.1, "Creatin g Multiple Loads at Once in a Single Load Set"
Section 2.8.2, "Walking Through Mesh-Based Loads and Constraints"
2.8.1  Creating Multiple Loads  at Once in a Single Load Set 
The numbered list below is the work flow for crea ting loads from scratch that is needed to assure 
the load creation is successful.
1. Create Load Set Object, Load Defi nition Object, and LoadMesh, Load Bolt, Load ETemp, or LoadNTemp 
to be created
2. Assign Load Set Object properties.
3. Use the Put method to save Load Set in the model.
4. Assign Load Definition Object prop erties. The setID proper ty of the load definition object should corre-
spond with the ID of the Load Set Entity that was created in Step 3.
5. Use the Put method to save Load Definition in the model.
6. Assign the setID property on the Load  Mesh Object (or other) correspo nding to the Load Set that was cre-
ated in Step 3. When using the PutArray method , the LoadDefinitionID property on the Load Mesh 
Object (or other) needs to be set beforehand. If usi ng the PutAllArray method, the load definition ID will 
be assigned from an argument of the call. In both cas es the ID(s) must correspon d with the load definition 
ID that was created in Step 5. Note that when us ing the PutArray or PutAllArray methods, the Put method 
on the Load Mesh Object (or other) is not needed. Thes e calls are made to save multiple loads to the data-
base with a single call. 
2.8.2  Walking Through Mesh-B ased Loads and Constraints
This example demonstrates how to walk through all of the mesh-based loads and constraints in 
your model. If any, expanded geometry-based loads or constraints are found, they are converted to 
permanent loads or constraints. WARNING - RUNNING THIS PROGRAM WILL PREVENT YOU FROM COMPRESSING THESE LOADS BACK TO PURELY GEOMETRIC LOADS.
 API-78  
This script connects to an open FEMAP session, and starts to query the database.
______________________________________________________________________________
Sub Main
Dim App As Object
Set App = GetObject(, "femap.model")
Dim rc as Integer
Dim BCSet As Object
Set BCSet = App.feBCSet
Dim BC As Object
Set BC = App.feBCNode
Dim LdSet As Object
Set LdSet = App.feLoadSet
Dim Ld As Object
Set Ld = App.feLoadMesh
Dim Nt As Object
Set Nt = App.feLoadNTemp
Dim Et As Object
Set Et = App.feLoadETemp
'1. Do the Constraints.
While (BCSet.Next())
    BC.setID = BCSet.ID
    BC.ID = -1
    While (BC.Next())
      If (BC.expanded) Then
          BC.expanded = False
          BC.Put (BC.ID)
      End If
    Wend
Wend
'2.  Do the Loads.
While (LdSet.Next())
'3.    Mesh-based loads.
    Ld.setID = LdSet.ID
    Ld.ID = -1
    While (Ld.Next())
       If (Ld.expanded) Then
           Ld.expanded = False
           Ld.Put (Ld.ID)
       End If
    Wend
   API-79
'4.    Elemental Temps.
    Et.setID = LdSet.ID
    Et.ID = -1
    While (Et.Next())
       If (Et.expanded) Then
           Et.expanded = False
           Et.Put (Et.ID)
       End If
    Wend    
'5.    Nodal Temps.
    Nt.setID = LdSet.ID
    Nt.ID = -1
    While (Nt.Next())
       If (Nt.expanded) Then
           Nt.expanded = False
           Nt.Put (Nt.ID)
       End If
    Wend
  Wend
End Sub
______________________________________________________________________________
2.9  Charting FEMAP Results in Excel
This example demonstrates FEMAP’s ability to communicate with other programs. Here you will 
create a table of data and an associated chart in Microsoft Excel using the data that is currently 
being used in a deformed display in FEMAP. 
This script connects to an open FEMAP session, pulls the values of the vector selected for the 
deformed plot and places them  into Sheet 1. The script th en sub-graphs the values.
______________________________________________________________________________
'Before running this script, you must have a de formed model displayed in the active view.
Sub Button3_Click()
’1. Attach to the model in the FEMA P session that is already running.
Dim femap As Object
Set femap = GetObject(, "femap.model")
’2. Create the View objects and collect the view information.
Dim View As Object 'The FEMAP view object
Set View = femap.feView
 API-80  
’3.  Use the feOutputSet method of the FEMAP Ap plication object to work with Results Sets.
Dim outset As Object
Set outset = femap.feOutputSet
’4. Use the Results Browsing Object to work with Results Vector data
Dim RBO As Object
Set RBO = femap.feResults
Dim v As Long
Dim setID As Long
Dim def_vecID As Long
Dim Nodal As Boolean
Dim vec_title As String
Dim LCol As Long
Dim vCol As Variant
'********************************************************************
’5. Use the feAppGetActiveView User Interface Me thod to return Active View of the active 
'Model.
ret = femap.feAppGetActiveView(v)
’6.  Use the Get property to retr ieve the record of the FEMAP view number that is entered. In 
this case, you are getting the active view.
View.Get (v)
’7. Use this If statement to make sure that an XY display is not being ' displayed.
If (View.Mode < 6) Then
’8. Use the Deformed property to return the de formed style: 0=Off, 1=Deformed, 2=Animate. 
This If statement makes sure that you are using a deformed display.
    If Not (View.Deformed = 0) Then
’9. Use the OutputSet property to retur n the ID of the active output 'set.
        If (View.OutputSet > 0) Then
            setID = View.OutputSet
’10.'Use the DeformData property to return the ID of the vector selected for the deformed display.
            def_vecID = View.DeformDataV2
            ret = outset.Get(setID)
            ret = RBO.AddColumnV2(setID, def_vecID, False, LCol, vCol)
            ret = RBO.Populate
            'ret = RBO.SendToDataTable 'Useful for debugging. (*Note: 
'Data Table unlocking omitted)
        End If
    Else
   API-81
            MsgBox "Model needs to be deformed."
            End
    End If
End If
’11.' Use the DataLocation method to return how th e output is computed and stored. Nodal = 7, so 
this checks if the deformed output vector is Nodal or Elemental.
Dim dLocation As Long
ret = RBO.DataLocation(dLocation)
Nodal = False
If dLocation = 7 Then
    Nodal = True
End If
’12.' Get the title of the output vector.
ret = RBO.VectorTitleV2(setID, def_vecID, vec_title)
’13.' Next, fill the Worksheet Sheet1 with the node IDs, nodal coordinates, and values. If the data 
is elemental, use instead the element IDs and values. 
’14.  Use the feNode method of the FEMAP Application object to create 'Node objects.
Dim Node As Object
Set Node = femap.feNode
’15.' Use the feElement method of the FEMAP Ap plication object to create Element objects.
Dim Element As Object
Set Element = femap.feElem
Dim Counter As Long
’16.' Turn off Excel’s screen updating so that  the data from FEMAP will be retrieved faster.
Application.ScreenUpdating = False
’17.' Clear the desired Excel Range
Range("A:E").Clear
’18.' Name the column 1 header “Elements” if the data is elemental, or “Nodes” if the data is 
nodal.
If Not (Nodal) Then
    Worksheets("Sheet1").Cells(1, 1).Formula = "Elements"
Else
    Worksheets("Sheet1").Cells(1, 1).Formula = "Nodes"
 API-82  
    Worksheets("Sheet1").Cells(1, 2).Formula = "X"
    Worksheets("Sheet1").Cells(1, 3).Formula = "Y"
    Worksheets("Sheet1").Cells(1, 4).Formula = "Z"
End If
Worksheets("Sheet1").Cells(1, 5).Formula = vec_title
Counter = 1
’19.  Use the Results Browsing Object to return a column of Deformed data
    Dim vIDs As Variant
    Dim vValues As Variant
    Dim endRow As Long
    
    ret = RBO.GetColumn(0, vIDs, vValues)
    endRow = UBound(vIDs) + 2
’20.' Send the column of Node or Element IDs to Excel all at once
    Range(Cells(2, 1), Cells(endRow, 1)).Value2 = _
                                    Application.Transpose(vIDs)
    
’21.' Retrieve the coordinate values if using Nodal data.
If Nodal Then
’22.' Use GetAllArray method on No de Objects to reduce FEMAP calls
Dim LnumNode As Long
Dim vEntID As Variant, vXYZ As Variant, vLayer As Variant
Dim vColor As Variant, vNdType As Variant, vDefCSys As Variant 
Dim vOutCSys As Variant, vPermBC As Variant
    
    ret = Node.GetAllArray(0, LnumNode, vEntID, vXYZ, vLayer, vColor,_ 
                              vNdType, vDefCSys, vOutCSys, vPermBC)
’23.' Use a For Loop to create a matrix array to send all coordinate values at once to Excel
    countEntities = UBound(vEntID) + 1
    
    Dim vCoords() As Double
    ReDim vCoords(1 To countEntities, 1 To 3) 'Rows, Cols
    
    a = 1
    b = 0
    For i = 0 To UBound(vEntID)
        vCoords(a, 1) = vXYZ(b)
        vCoords(a, 2) = vXYZ(b + 1)
        vCoords(a, 3) = vXYZ(b + 2)
        b = b + 3
   API-83
        a = a + 1
    Next
’24.' Send Coordinate values all at once to Excel
    Range(Cells(2, 2), Cells(2 + countEntities, 4)).Value2 = vCoords
    
End If
’25.' Send values, either Elemental or Nodal all at once to Column E
Range(Cells(2, 5), Cells(endRow, 5)).Value2 = Application.Trans -
pose(vValues)
’26.' Now that Sheet1 is populated, use the  Create_chart sub to create an Excel chart.
Create_chart
’27.' Turn screen updating back on.
Application.ScreenUpdating = True
End Sub
'*******************************************************************
Sub Create_chart()
’28.' Make column 5 the active selection. The Deformed data.
Columns(5).Select
’29.' Assign the address of the select ed column of cells to ValueColumn.
ValueColumn = Selection.Address
’30.' Make column 1 the active selection.
Columns(1).Select
’31.' Assign the address of the selected column of cells to xcolumn.
XColumn = Selection.Address
ChartTitle = Worksheets("Sheet1").Cells(1, 5)
XTitle = Worksheets("Sheet1").Cells(1, 1)
’32.' Create and format the chart.
Charts.Add
ActiveChart.ChartType = xlXYScatter
ActiveChart.SetSourceData Source:= _
 API-84  
Sheets("Sheet1").Range(ValueColumn)
ActiveChart.Location where:=xlLocationAsObject, Name:="Sheet1"
ActiveChart.SeriesCollection(1).XValues = _
Sheets("Sheet1").Range(XColumn)
With ActiveChart
    .HasTitle = True
    .ChartTitle.Characters.Text = ChartTitle
    .Axes(xlCategory, xlPrimary).HasTitle = True
    .Axes(xlCategory, xlPrimary).AxisTitle.Characters.Text = XTitle
    .Axes(xlValue, xlPrimary).HasTitle = False
End With
ActiveChart.HasLegend = False
End Sub
______________________________________________________________________________
2.10  Calling the API from Visual C++ 
The examples in this manual use Visual Basic to ca ll the API because, in ge neral, it is much easier 
to do. If you want to, however, the API can be calle d using Visual C++. For example, to simply tell 
FEMAP to exit using Visual Basic, you could use the following Basic program:
Dim femap As Object
Set femap = GetObject(, "femap.model")
femap.feFileExit
If you want to use Visual C++ to accomplish th e same thing, without us ing the supplied FEMAP 
Type Library, the code is much more complex:
{
// Get the CLSID for the FEMAP Application Object
CLSIDclsid;
CLSIDFromProgID( L"femap.model", &clsid );
// Create an instance of the Applications IUnknown interface
IUnknown* pUnk;
HRESULThr = ::CoCreateInstance( clsid, NULL, CLSCTX_SERVER, IID_IUn -
known, (void **) &pUnk );
// Query IUnknown to retrieve a pointer to the IDispatch interface
IDispatch*pDispApp;
hr = pUnk->QueryInterface( IID_IDispatch, (void**)&pDispApp );
OLECHARFAR* szFunction;
DISPIDdispid;
DISPPARAMSdispparamsNoArgs = { NULL, NULL, 0, 0 };
VARIANTretcode;
   API-85
szFunction = OLESTR("feFileExit");
hr = pDispApp->GetIDsOfNames( IID_NULL, &szFunction, 1, LOCALE_US -
ER_DEFAULT, &dispid );
hr = pDispApp->Invoke( dispid, IID_NULL, LOCALE_USER_DEFAULT, DIS -
PATCH_METHOD, &dispparamsNoArgs, &retcode, NULL, NULL );
}
The example above ca lls a function with no arguments. Callin g functions with array arguments can 
be even more complex since these need to be passed and accessed as V ARIANT data types, which 
must be properly handled in C++.
Using the FEMAP Type Library and ATL makes this  function much easier, and more readable. To 
do that however, you must first import the Type Library into your application. In your program’s 
header file, add the following line:
#import “d:\\v9\run\femap.tlb” named_guids
This will automatically create and include header files that make the API functionality available to 
your application. 
In addition, you should include the ATL and OLE Automation header files:
#include “atlsafe.h”
#include “oleauto.h”
Once you have done this, you can write th e above code in th e following format.
CLSID       clsid; 
HRESULT hr=AfxGetClassIDFromString( "femap.model", &clsid); 
IUnknown    FAR *punk; 
if ( hr == S_OK ) 
{
    hr=GetActiveObject(clsid,NULL,&punk); 
    if ( hr == S_OK ) 
    {
        CComQIPtr<femap::Imodel> pModel; 
        pModel=punk; 
        pModel->feFileExit(); 
    }
}
Furthermore, once you have the “pModel” pointer, you can then simply use it like you would use 
the “femap” object in Visual Basic to prov ide direct access to the remainder of the API.
CLSID       clsid; 
HRESULT hr=AfxGetClassIDFromString( "femap.model", &clsid); 
IUnknown    FAR *punk; 
if ( hr == S_OK ) 
{
    hr=GetActiveObject(clsid,NULL,&punk); 
    if ( hr == S_OK ) 
 API-86  
    {
        CComQIPtr<femap::Imodel> pModel; 
        pModel=punk; 

        CComQIPtr<femap::IDBase> pEntity; 
        CComQIPtr<femap::INode> pNode; 

        pEntity = pModel->feNode; 
        pNode = pEntity; 
        pEntity->Get(23); 

        double xyz[3]; 

        xyz[0] = pNode->x; 
        xyz[1] = pNode->y; 
        xyz[2] = pNode->z; 
     }
}
If you are working with an object that contains array properties you can typically either use the 
Variant properties, or direct access to the arrays. For the Variant property - you can use code that 
looks like the following:
CComQIPtr<femap::IBCGeom> pBCGeom; 
pBCGeom=pModel->feBCGeom; 
...
CComVariant vldof; 
CComSafeArray<BOOL> ldof(6); 
ldof[0]=TRUE; 
ldof[1]=TRUE; 
ldof[2]=TRUE; 
ldof[3]=FALSE; 
ldof[4]=FALSE; 
ldof[5]=FALSE; 
vldof = ldof; 
...
pBCGeom->type = 0; 
pBCGeom->geomType = 5; 
pBCGeom->Layer = 1; 
pBCGeom->color = 4; 
pBCGeom->vdof = vldof; 
...
pBCGeom->setID = 1; 
pBCGeom->Put(pBCGeom->NextEmptyID()); 
   API-87
To retrieve values from an array property, you can simply reverse this:
CComVariant vldof; 
CComSafeArray<BOOL> ldof(6); 
BOOL dof; 
...
vldof = pBCGeom->vdof; 
ldof = vldof.parray; 
dof = ldof.GetAt(0); 
...
Or the simpler sequence, which bypasses the Variant...
CComSafeArray<BOOL> ldof(6); 
BOOL dof; 
...
ldof = pBCGeom->vdof.parray; 
dof = pBCGeom->vdof.GetAt(0); 
...
Or the even simpler approach which uses direct access to the arrays...
...
pBCGeom->dof[0] = TRUE; 
pBCGeom->dof[1] = TRUE; 
pBCGeom->dof[2] = TRUE; 
pBCGeom->dof[3] = FALSE; 
pBCGeom->dof[4] = FALSE; 
pBCGeom->dof[5] = FALSE; 
...
dof = pBCGeom->dof[0]; 
...
______________________________________________________________________________
2.11  Calling the API from Python
This section is intend ed to introduce core concepts fo r writing FEMAP API scripts through 
Python. Part 1 outlines installation an d setup. Part 2 covers Python basi cs. Part 3 goes into detail of 
Python-FEMAP specifics. Example problems are provided in Parts 2 and 3, with sample solutions 
given at the end.
Version and Acknowledgments
This guide utilizes Pyth on version 3.4, with PythonWin vers ion 3.4.4 as the ID E, operating on a 
Windows 10 machine running FEMAP  version 2019.1. Steps outlined here are based on this guide 
found on the Siemens FEMAP Community Forum an d personal user experience. Code was for-
matted using an online resource to automate the process.
Part 1 - Installation and Setup
If you have a working installation of Python, skip to Part 2 - Python Basics. If you are already pro-
ficient with Python and have a working Python installa tion, skip to Part 3 - FEMAP API through 
Python. 
 API-88  
Setting up Python
The first step is to down load and install Python. Python.org is  naturally the best option for doing 
so. While the most up-to-date version is recomm ended, this guide utilizes Python 3.4.0, and may 
contain minor syntactical differen ces to the most recent release.
Next, an interpreter is required  to compile and run Py thon scripts. While many viable options 
exist, an interpreter with a live command window is tremendously useful for testing small amounts 
of code at a time. Using an IDE (Integrated De velopment Environment) is a good start for new 
users, as it encompasses both a text editor (where scripts are written) and an interpreter (where 
scripts are run) in a single inst allation. This guide utilizes Pyth onWin 3.4.4 as an IDE for conve-
nience, as it is bundled in the Pywin32 installation covered in th e following section. Programs like 
Visual Studio and Notepad++ can even be set to run Python scrip ts by calling an external inter-
preter.
The screenshot above show s a sample IDE, PythonWin. The left window is the Live Interpreter, 
which allows the user to test small amounts of code, as shown with the “test” variable. The right 
window is the Script Editor. Here scripts are writte n and saved as *.Py files, which are called using 
the “Run” command from the main window.
Transferring the FEMAP Type Library
The FEMAP API can be written in just about any programming language, so  long as the type 
library is transferred. 
Python communicates with FEMAP via OLE/COM object s, so in order to transfer the type library, 
Pywin32 must first be downloaded . Select the proper version from https://sourceforge.net/projects/
pywin32/files/pywin32/Build%20220/ corresponding to your Python/Windows versions, close all 
Python applications (including interpreters and IDEs ), and run the Pywin32 executable. During 
installation, verify that the correct Python directory is identified by the installer. 

   API-89
Next, reopen the Python interpre ter/IDE (i.e. PythonWin) and exec ute the following code. Ensure 
that the file path in the “sys.argv” call is direct ed to the “femap.tlb” of the desired version of 
FEMAP, wherever that is installed on your computer:
import sys
from win32com.client import makepy
sys.argv = [“makepy”, “-o Pyfemap.py”, r“C:\ Program Files\Sie -
mens\FEMAPv2019.1\femap.tlb”]  
makepy.main() 
The installation directory of the desired Python version should now contain a newly created file, 
“Pyfemap.py”. Move this f ile into the “\Lib” folder contained in the Python installation directory. 
The “Pyfemap.py” library contains the entire FEMAP type library imported fo r use in Python. Part 
3 will cover how to access and utilize this library, as  well as how to browse the file's contents to 
troubleshoot unexpected behavior.
Differences across Interpreters
Some commands may function s lightly differently across inte rpreters. For example, calling:
 sys.exit('femap not open') 
in Visual Studio has been known to raise errors. Th is line is included at the start of some examples 
throughout this guide. Be aware of the quirks in your chosen interpreter as you become more 
familiar with it, and adjust acco rdingly. A Python environment in  Visual Studio will exit success-
fully with:
raise SystemExit(0)
Part 2 - Python Basics
If you already have a working knowledge of Python, fe el free to skip ahead to Part 3, which covers 
specific issues of writing th e FEMAP API through Python.
“Learning Python” is not so much  mastering a set of skills as it is familiarizing oneself with the 
language. Designed around natura l readability, Python concepts and syntax become simple to self-
teach once the basics are grasped. Below is a selection of such basics. For more comprehensive 
coverage, see guides  such as “https://docs.python.org/3/tuto rial/index.html”, or the myriad other 
online resources available. 
Creating Variables
A major component of Python is flexibility. Variab les do not need to be defined ahead of assign-
ment, and data type is never specified - any data can be stored to a variable. Every variable in 
Python is an object. The example below shows the variable “test” being written as a number, a 
string, and a list.
 API-90  
The Flexibility of Lists
Lists are zero-indexed data structures. Beyond th at, there are very few limits on lists. The use of 
“squares” above is built using a li st comprehension, a set of logi c packaged into an assignment 
statement. In this case, “sq uares” is a list of the square of all items in “test” that are greater than 0. 
Lists can be appended to as shown using “.append”.
“big_list” and “bigger_list” are simp ly lists of lists. Notice that list items need not be the same size 
- they can even be different data types. The fina l call in the example return s the third entry of the 
zeroth entry of the zeroth entry of “bigger_list”. Although co mplex, this shows how flexible data 

   API-91
storage in lists can be. A word of caution: this fl exibility leaves ample room for user error. Be care-
ful in data assignment and querying!
Control Flow Tools - if, for, etc.
Like most languages Python utilizes common loops such as if, for, and while. Python denotes the 
extent of loops, if statements, and other Contro l Flow Tools by indentation. There are no “end” 
statements needed to resume normal coding, simp ly reduce the indentation.  The line containing the 
Control Flow statement itself is al ways ended with a “:” (colon). 
The example above shows several Control Flow Tools in use. The “try / except” pair may be unfa-
miliar: this is used to have Pyth on attempt a section of code, and sp ecify a fallback set of code if 
the “try” statement raises any errors, known as ex ceptions. Specific excep tions can be handled, 
with an “except [type]:” syntax, specifying on e of the pre-defined Python exception types. 
More Data Structures
The example above makes use of two data structur es that may be unfamiliar. “number_names” is a 
Python dictionary, which is a set of key:value pairings. Within the “ex cept” statement, “num-
ber_names” is indexed by “number” to  return a string. Note that di ctionaries can contain only one 

 API-92  
value for every key, but can contain multiple keys that all return the same value. Values can even 
be functions, which is importan t because Python does not have a case structure built in. Dictionar-
ies or conditional statements prov ide all the functionality and more that a case structure has to 
offer. 
There is additionally a set object included in the example above; “new_set” is defined as a set cre-
ated from a list of 6 entries. Set objects behave like a mathematical set, supporting operations such 
as union, intersect, and many others from set theory. 
Familiarity with the vari ous data structures within Python can often save the hassle of writing 
complex logic to keep lists in order, or help shrink bloated syntax down to a concise solution.
Modules
Delving into increasingly complex tasks will of ten require tools beyond Python's standard func-
tionality. For this, modules present an excellent solution. Modules are essentially toolkits contain-
ing functions and object classes designed for spec ific applications. There are several modules built 
into Python, but the mo st notable for the purpose of th is guide is the Pyfemap module.
The example above contains sever al import statements with a sampling of styles. The typical 
“import [module name]” simply imports that modu le into the script, allo wing items within the 
module to be accessed by typing “[module name]. [object name]”. An example of this would be 
“Pyfemap.constants”, which contains the enumerated constants defined in FEMAP. 
At times the dot-indexed syntax can become unrul y. In these cases, the “import as” format shown 
in the example above is a good way to cut out un necessary syntactical bulk. In the example above, 
FEMAP enumerated constants can be accessed by typing:
feConstants.FT_ELEM
If no dot notation is desired, the “from [module] import *” syntax can be used. However, be wary 
of using “import *” as this imports a potentially large number of variables, whose names may not 

   API-93
all be known. This may overwrite existing variable s in the project namespace, or if the module's 
creator was not careful, exis ting reserved Python names, eliminating entire functions.
Example Problem 1
A program that prints all integer factors of an in teger. For example, inpu tting “6” into the program 
would return something like, “The factors of 6 are: 1, 2, 3, 6.”
For Added Challenge
1. “Foolproof” the program - handle the cases where a user inputs a decimal, a string, or something else that 
might disrupt the script. 
2. Design a GUI for the program using Python's tkinter module
For the solution, see “Exa mple Problem 1 - Solution”
Part 3 - FEMAP API through Python 
With a working grasp of both Python and the FEM AP API, merging the two is quite simple. As 
mentioned in Part 2, importing the Pyfemap module is accomplishe d in a single line. This section 
outlines the additional legwork to  connect to an active FEMAP ses sion, as well as some common 
pitfalls and recommendatio ns for avoiding them.
Connecting to a FEMAP ModelConnection to an active FEMAP session is acc omplished via OLE/COM between Python and 
FEMAP. While certainly not the only  way to do this, the following code is a useful starting point 
for getting a FEMAP Python API started:
import pythoncom
import Pyfemap
from Pyfemap import constants as feConstants
import sys
import win32com.client as win32
win32.gencache.is_readonly=False
    
existObj = pythoncom.connect(Pyfemap.model.CLSID)
App = Pyfemap.model(existObj)
except:  
sys.exit(“femap not open”)   
App.feAppUndoCheckpoint(“Undo Python Script”)
rc = App.feAppMessage(0,“Python API Started”)
This code template imports all required modules, including FEMAP constants as “feCon-
stants.[desired constant]”. Next, it attempts to  make a connection with the active FEMAP session, 
saving this reference as "App". If this fails, the “except” statement notifies a failure in the IDE and 
exits the script. On a successful connection, “Pyt hon API Started” is printed to the FEMAP Mes-
sages window, and an undo point is set.
 API-94  
Pass by Reference - Output Specification
Python does not support the pass by reference ou tput assignment utilized in the native FEMAP 
API methods. Pass by reference m eans that output from a method is  stored into entities whose IDs 
are given as arguments to the method. For exampl e, the following code demonstrates calling the 
"Curves" method on a Solid object “sol”:
rc = sol.Curves(FCC_BOTH, numCurves, curveID) # Native FEMAP API
[rc, numCurves, curveID] = sol.Curves(constants.FCC_BOTH) # Python
In either case, “FCC_BOTH” is th e only input value, with “rc”, “numCurves”, and “curveID” all 
being outputs. In Python, only th e method's inputs are passed as arguments, with all of the outputs 
on the left side of the assignment. In the nativ e FEMAP API, outputs and inputs are passed as 
arguments in an order specifie d by the method's definition.
One benefit of not requiring pass by reference coding  is that specific values  can be queried without 
wasting effort dimensioning variables for, and savi ng, the rest of the output s. For example, if all 
that is really needed is the Curve IDs:
curveID = sol.Curves(constants.FCC_BOTH)[2] # Only return the IDs 
Since the method returns a list of  three items, the list can be indexe d as the method is called. Out-
put variables need not be defined ahead of time in Python, since me thods do not require references 
to existing, properly defined outp ut variables in order to execute. 
Setting Properties
In the native FEMAP API, proper ties are accessed in the same wa y for both reading and writing, 
an ability not available in Pyth on. A call such as “feElem.Node(0) = 2” in the native FEMAP API 
would set the reference node of the rigid element “feElem” to Node ID 2, while in Python this 
would crash the script. 
feElem.Node(0) = 2 # Setting a FEMAP property with native WinWrap API
feElem.SetNode(0,2) # Setting a FEMAP property with Python API
The Pyfemap library comes equipped with a set of  functions to handle exactly this. For every 
FEMAP property “[property]”, there is an associat ed method “Set[property] ”. It's important to 
note that these methods exist so lely within Python, and are not FEMAP API methods. They are 
created purely to bridge  the syntactical gap between the two pr ograms, so that API scripts can be 
written similarly in either. 
Custom User Dialogs
While FEMAP's built-in dialog box designer is  inaccessible from Python, the "tkinter" module 
supports Python GUI design. Tkinter offers tremen dous flexibility in design  and operation of cus-
tom GUIs. 
Overall functionality between the two platforms is  quite similar. The native API dialogue boxes 
are overall easier to setup on the fly, and WinWra p-savvy users can write event-handling into func-
tions within the script so dialog s can respond in real time. Howeve r, this functionality is far easier 
to achieve in Python, since cust om dialogs are designed around event callbacks to begin with. 
While a simple dialog box with a few choices and on e or two buttons is far fa ster to create in the 
native FEMAP API, more complicated UI requirem ents are far simpler to lay out in Python, once 
the basic structure of windows, frames, and widget  types is solidified, and event callback can be 
bound in-line as the widget is created.
   API-95
Considerations of Speed
As further usage will show, certain operations are performed slower via Python than via FEMAP 
WinWrap BASIC. Operations such as a “.Get()” ca n often take over twice as long to perform via 
Python compared to the native FEMAP API, due to the Windows OLE/COM overhead. It's 
important to consider performance factors, especial ly when designing an algorithm for a large data 
set. Python modules like “time” will be useful for m easuring performance.
Generally speaking, the fastest algorithm will mini mize the number of queries between Python and 
FEMAP, as commun ication across the two platforms is often the primary performance bottleneck. 
Best practice is to gather large amounts of data  in a single call from FEMAP, perform processing 
in Python, then export results to FEMAP. Methods like “GetAllArra y()” are hugely beneficial for 
minimizing the sheer number of calls between Python and FEMAP. 
Issues to Note
Given that the Pyfemap libra ry is auto-generated by makepy, it is  possible for errors to occur. An 
example is with the Pyfemap func tion “.feSelectOutput()”. This meth od is expected to return a 
populated Set object (FEMAP Set, not Python set).  Instead, it returns a COM object that references 
a FEMAP Set. The difference is subtle, but significant (both written in Python syntax):
feSet.Count() # Set object, only works if parentheses present
feSet.Count # COM object, will raise error if parentheses present
The difference is that the COM object behaves like a native Python class object, whereas the 
FEMAP Set (defined through the Py femap library) must call a method to return a property from 
the FEMAP database. Take caution to look for th is issue whenever using the following methods:
NextBC, NextBCDef, NextLoad, NextLoadDef, feFileAttachInfo, 
feSelectOutput, feSelectOutputSets
Browsing the Pyfemap Library 
Part 1 of this document outlines how to genera te the Pyfemap library, an  import of the FEMAP 
type library for use in Py thon. This file, a *.Py file like any other Python module, can be browsed 
to investigate unexpected behavior of converte d FEMAP methods, properties, or objects. The 
Pyfemap library outlines every imported class, along  with all associated methods and properties. 
Consider the example method definition below:
def SetNode(self, nVectorIndex=defaultNamedNotOptArg, arg1=defaultUn -
namedArg):  
        return self._oleobj_.InvokeTypes(18002, LCID, 4, (24, 0), ((3, 
1), (3, 1)),nVectorIndex  
            , arg1)  
This is the definition for the “SetNode” method di scussed in Part 3 - Setting Properties. Recall that 
this method was created by makepy for setting th e “Node” property on Elements. The definition is 
truly just a wrapper on a single OLE/COM call querying the database of the connected FEMAP 
model. The set of tuples ((3,1),(3,1 )) specifies the data type of the two inputs. In this case, 3 speci-
fies an integer, and 1 specifies that they are bo th inputs. With the FEMAP API manual in-hand and 
a bit of internet investigation, these tuples can typically grant most of the information about a 
given definition. 
An example of browsing the Pyfemap library is the issue mentioned in th e preceding section about 
Set objects returning as COM object s. The underlying link between the methods listed as potential 
 API-96  
issues is that all of their function definitions sp ecify a (16393, 2) tuple for their output values, 
meaning they all return the same type of object. This information was uncovered simply by search-
ing the Pyfemap.Py file for the fi rst method encountered that gave this issue, examining the rele-
vant argument tuple, searching the library for th at tuple, then testing the resultant methods in 
scripts. 
Example Problem 2
A Python program that counts  all Elements of a specif ic type in a FEMAP model.
For Added Challenge
1. Count Elements of all types in the model,  storing the count for each type separately
2. Export the Element count data to Excel
For solution, see “Examp le Problem 2 - Solution”
Solutions to Example Problems
All example solutions given address all parts of the Example Problem, incl uding items under “For 
Added Challenge.” Note that many solutions exis t for a given problem, but a valid solution func-
tions for all expected inputs, and is not tripped up  by reasonable deviations from expected input, 
such as a user keystroke error.
The solutions presented here are merely for ex ample, and make no claim of being optimized. 
Example Problem 1 - Solution
The prompt itself is addressed almost entirely w ithin the “findFactors” function. The rest of the 
code is setup for the GUI, or callback defi nitions for GUI widgets and specific events.
Notice the use of the “lambda” fu nction to define the pushbutton ca llback command. “lambda” is a 
Python utility function that essentia lly creates a function reference to  whatever follows. Removing 
the “lambda” function in this case would instead bi nd the return value of “cbButton(entryBox)” to 
the button click, rather than having the button run the “cbButto n” function with the argument 
“entryBox” every time.
import tkinter as tk  
  
title = "Number Factorizer"  
  
# Set up main window  
root = tk.Tk()  
root.title(title)  
root.geometry("300x150")  
  
# String Variables for dynamic Labels  
strStatus = tk.StringVar()  
strStatus.set("Ready")  
  
# Use frames to organize the window  
frameTop = tk.LabelFrame(root, text = "Input an Integer")  
frameTop.pack(side = tk.TOP, fill = tk.BOTH, expand = True, padx = 5, 
pady = 5)  
  
frameBottom = tk.Frame(root)  
frameBottom.pack(side = tk.TOP, fill = tk.X, expand = True)  
   API-97
  
# Entry widget for users to input data  
entryBox = tk.Entry(frameTop, width = 20)  
entryBox.pack(side = tk.TOP, pady = 5)  
  
# Label widget to display info to the user  
label = tk.Label(frameBottom, textvariable = strStatus, wraplength = 
300)  
label.pack(side = tk.LEFT, expand = False)  
  
# Callback for the button widget  
def cbButton(widget):  
    # Get Entry value  
    val = widget.get()  
  
    # Reset text color, info string  
    widget.config(fg = 'black')  
    strStatus.set("Processing...")  
  
    # Exit function if no input given  
    if val == "" :  
            strStatus.set("Ready")  
            return  
  
    # Pre-Screen user input  
    try :  
        if len(val) > 14 : # Toss out big numbers  
            strStatus.set("Number too large!")  
            raise  
  
        if val != str( int( float(val) ) ): # Integers only  
            strStatus.set("Not an integer!")  
            raise  
  
        if int(val) < 0 : # No negativity  
            strStatus.set("No negative numbers!")  
            raise  
  
        # Convert from string and run processing function  
        val = int(val)  
        findFactors(val)  
  
    # Make text red to indicate bad input if the above fails  
    except :  
        widget.config(fg = 'red')  
        return  
  
 # Processing Function - finds all factors of pre-screened input value 
'val'  
def findFactors(val):  
 API-98  
  
    # Create list of all factors as tuples  
    facs = [(i, int(val/i)) for i in range (1, int(val**0.5) + 1 )\  
            if val % i == 0 ]  
  
    # Write results to Status String  
    strStatus.set( "Factors of " + str(val) + " : " + \  
                str(facs)[1:len( str(facs) ) - 1] )  
  
# Define pushbutton  
button = tk.Button(frameTop, text = "GO!", command = lambda: cbBut -
ton(entryBox) )  
button.pack(side = tk.TOP, pady = 5)  
  
# Bind 'Return' key to mimic "GO!" Button press  
root.bind('<Return>', lambda self: cbButton(entryBox) )  
  
# Launch UI  
root.mainloop()   
Example Problem 2 - Solution
Barring the 42-line Dictionary definition and the 15  lines of setup code, this example is really quite 
concise. The base problem prompt is solved, where “i” can be substituted for a user-specified Ele-
ment type (based on the FEMAP enumerated constant for Element type). 
Here a Python Dictionary is used to simplify the process of appending the Element type string into 
Excel, eliminating the need for a lengthy “if/else” statement. 
This solution is a minor revision of an example given in the guide referenced under “Versioning 
and Acknowledgements” in this document.
import pythoncom
import Pyfemap
from Pyfemap import constants   
import sys
  
import win32com.client as win32  
win32.gencache.is_readonly=False  
  
try:  
    existObj = pythoncom.connect(Pyfemap.model.CLSID) # Grabs active 
model  
    App = Pyfemap.model(existObj)  
except:  
    sys.exit("femap not open") # Exits program if there is no active 
femap model  
  
# Create checkpoint for FEMAP “undo” to revert to
App.feAppUndoCheckpoint("Undo Python Script")  
rc = App.feAppMessage(constants.FCM_NORMAL,"Python API Started")  
  
   API-99
# Package code into function to enable easy exit with "return" call
def main() :  
    # Define FEMAP Set to hold relevant Elements  
    pElemSet = App.feSet  
  
    # Exit API if no Elements exist  
    pElemSet.AddAll(constants.FT_ELEM)  
    if pElemSet.Count() <= 0:  
        App.feAppMessage(constants.FCM_NORMAL,'No Elements found!')  
        return  
  
    # Calls and creates new excel application  
    appExcel = win32.Dispatch('Excel.Application')  
  
    # Add sheet to workBook  
    workBook = appExcel.Workbooks.Add()  
    workSheet = workBook.Worksheets(1)  
  
    # Set column headers  
    workSheet.Cells(1,1).Value = "Element Type"  
    workSheet.Cells(1,2).Value = "Element Count"  
  
    # Initialize row counter  
    row = 2  
  
    # Define dicitonary of all Element types by FEMAP Enum  
    typeDict = {1:"L_ROD elements", \  
                2:"L_BAR elements", \  
                3:"L_TUBE elements", \  
                4:"L_LINK elements", \  
                5:"L_BEAM elements", \  
                6:"L_SPRING elements", \  
                7:"L_DOF_SPRING elements", \  
                8:"L_CURVED_BEAM elements", \  
                9:"L_GAP elements", \  
                10:"L_PLOT elements", \  
                11:"L_SHEAR elements", \  
                12:"P_SHEAR elements", \  
                13:"L_MEMBRANE elements", \  
                14:"P_MEMBRANE elements", \  
                15:"L_BENDING elements", \  
                16:"P_BENDING elements", \  
                17:"L_PLATE elements", \  
                18:"P_PLATE elements", \  
                19:"L_PLANE_STRAIN elements", \  
                20:"P_PLANE_STRAIN elements", \  
                21:"L_LAMINATE_PLATE elements", \  
                22:"P_LAMINATE_PLATE elements", \  
                23:"L_AXISYM elements", \  
                24:"P_AXISYM elements", \  
 API-100  
                25:"L_SOLID elements", \  
                26:"P_SOLID elements", \  
                27:"L_MASS elements", \  
                28:"L_MASS_MATRIX elements", \  
                29:"L_RIGID elements", \  
                30:"L_STIFF_MATRIX elements", \  
                31:"L_CURVED_TUBE elements", \  
                32:"L_PLOT_PLATE elements", \  
                33:"L_SLIDE_LINE elements", \  
                34:"L_CONTACT elements", \  
                35:"L_AXISYM_SHELL elements", \  
                36:"P_AXISYM_SHELL elements", \  
                37:"P_BEAM elements", \  
                38:"L_WELD elements", \  
                39:"L_SOLID_LAMINATE elements", \  
                40:"P_SOLID_LAMINATE elements", \  
                41:"L_SPRING_to_GROUND elements", \  
                42:"L_DOF_SRPING_to_GROUND elements", \  
                 }  
  
    # Check for Elements of all types  
    for i in range(1,42):  
        pElemSet.clear() # Clear out old Elements found  
# Add all Elements of new type
        pElemSet.AddRule(i,constants.FGD_ELEM_BYTYPE)   
        # If any Elements of type "i" found, add to spreadsheet  
        if pElemSet.Count() > 0:  
            workSheet.Cells(row, 1).Value = typeDict[i]  
            workSheet.Cells(row, 2).Value = str(pElemSet.Count())  
            row += 1  
  
    # Make Excel visible  
    appExcel.Visible = True  
  
# Invoke main function to run API   
main()    
  
rc = App.feAppMessage(constants.FCM_NORMAL,"Python API Example Fin -
ished")  
______________________________________________________________________________
2.12  Creating Output in FE MAP prior to 2020.1 (OBSOLETE)
NOTE: Starting with FEMAP 2020.1, the entire Output Object has been deprecated and the 
Results Browsing Object MUST be used in plac e of the Output Object. The Results Browsing 
Object provides more capability when review ing existing results and methods were added 
for FEMAP 2020.1 to provide superior functionality to the Output Object. 
For an example of using the Resu lts Browsing Object to create output, see Section 2.4, "Working 
with Output in FEMAP 2020.1 and above"
   API-101
This example demonstrates the use of several API functions that could be used to create your own 
output data in FEMAP. The exampl e simply loads dummy results as output, but you could modify 
it to be part of a larger program that comput es its own real output, uses existing output from 
FEMAP to do further processing, or  reads output from another program.
This example assumes that the existing model in FEMAP already contains 100,000 nodes and 
90,000 planar elements. To be useful as a real pr ogram, the sections of code that generate the out-
put must be rewritten to check the model and get or compute real results from some other source.
______________________________________________________________________________
Sub Main
'1. Attach to the model in a FEMAP session that is already running.
Dim App As Object 
Set App = GetObject(, "femap.model")
'2.  Create an Output Set object.
Dim os As Object 
Set os = App.feOutputSet
'3.  Create an Output object.
Dim o As Object 
Set o = App.feOutput 
Dim rc As Long 
Dim i As Long
'4.  Initialize an Output Set and store it.
os.title = "My Test Set" 
os.value = 35.4 
os.analysis = 5 
os.Put (1)
'5.  Initialize the Output object to create nodal vector output. 
' (In this case, you will create a total vector and x, y and z component vectors.)
rc = o.InitVectorAtNode(1, 300000, 300001, 300002, 300003, _ 
       "Displacement", 1, True) 
Dim ID(100000) As Long 
Dim x(100000) As Double 
Dim y(100000) As Double 
Dim z(100000) As Double 
Dim xV As Variant 
Dim yV As Variant 
Dim zV As Variant 
Dim idV As Variant
 API-102  
'6.  Make up some output values for 100,000 nodes. 
 '  (Replace this section with some code th at creates or reads   real results values.)
For i = 0 To 99999 
ID(i) = i + 1 
x(i) = 0.001 * i 
y(i) = 0# 
z(i) = 0.02 * Sin(360# / 99999# * i * 3.14 / 180#) 
Next i
xV = x
yV = y
zV = z
idV = ID
'7.  Save the displacement output in the database.
rc = o.PutVectorAtNode(100000, idV, xV, yV, zV) 
rc = o.Put(-1)
'8.  Make some elemental stress out put. Reinitialize the output object.

rc = o.InitElemWithCorner(1, 100, 101, 102, 103, 104, 0, 0, 0, 0, _ 
        "Stress", 2, True) 
Dim c(100000) As Double 
Dim c1(100000) As Double 
Dim c2(100000) As Double 
Dim c3(100000) As Double 
Dim c4(100000) As Double 
Dim cV As Variant 
Dim c1V As Variant 
Dim c2V As Variant 
Dim c3V As Variant 
Dim c4V As Variant
'9.  Make output for 90,000 elements. Ma ke both the center and corner results.
For i = 0 To 89999 
ID(i) = i + 1 
c(i) = i 
c1(i) = i + 0.1 
c2(i) = i + 0.2 
c3(i) = i - 0.2 
c4(i) = i - 0.1 
Next i
cV  = c 
c1V = c1 
c2V = c2 
c3V = c3 
c4V = c4 
   API-103
'10. Store the elemental results in the database.
rc = o.PutElemWithCorner(90000, 4, idV, cV,c1V, c2V, _ 
c3V, c4V, c4V, c4V, c4V, c4V) 
rc = o.Put(-1) 
End Sub
______________________________________________________________________________
 API-104  
3. The FEMAP Application 
Object
3.1  Getting Started
The first thing that you must do before you can use any of the other functionality in the FEMAP 
API is to access the FEMAP model, or application object. This object provides access to all of the 
other methods and properties, including the methods used to  create other model objects. 
Normally, when you define your “femap” object, yo u will want to make it a global object. Once 
you “get” or “create” the object, you will want it to remain available for the entire duration of your 
application. In most cases, you will not want to repeatedly create and destroy this object
3.1.1  Using the FEMA P API Programming Window
The quickest way to get started using the FEMAP  API is to open the API Programming window. 
This provides access to WinWrap® Basic from Polar Engineering and Consulting. It provides a 
complete editing, debugging and ru ntime environment with a language  that closely follows Visual 
Basic. More importantly, since it is integrated  with FEMAP, it is always readily available.
3.1.2   Creating a FEMAP Object
To link your application to FEMAP, you must decl are an object and then connect it to FEMAP. In 
Basic, this is done via the GetObject  or CreateObject functions. To de cide which of these to use, 
you must decide whether your application needs to access a FEMAP session that is already in 
progress - in which case you would use GetObject. If you need to start a new FEMAP session, you 
must use CreateObject.
Example of Creating a FEMAP Application Object
 The following shows a sample (in Basic) of ho w to create a FEMAP Application Object, and con-
nect to a running FEMAP session.

Dim App As Object 
Set App = GetObject(, "femap.model") 
If instead, you wanted to start a new FEMAP session, the proper approach would be:

Dim App As Object 
Set App = CreateObject("femap.model") 
This call to CreateObject starts a new FEMAP sess ion, but it will not be visible. If you want 
FEMAP to be visible, you must then call the feAppVisible method.
   API-105
If you have an application that creates a new FEM AP session and then want to exit FEMAP and no 
longer have it running as a process, you need to:
Set the femap instance to “null” or “nothing”.
femap = nothingAlso, if you are working on most .net platforms, you will also want to call the .net “Garbage Col-
lector”.
System.GC.Collect()If you have an application that connects to a running FEMAP session and then want to exit 
FEMAP and no longer have it running as a process, you need to call feFileExit () first, then also 
perform the steps above.
Issues When Connecting to an Existing Session
When you are connecting to an existing session ther e are some special considerations. If you are 
programming in an environment outside of FEMAP (anything but the FEMAP API Programming 
Window), then you must use “GetObject” to conn ect. This uses standard OLE/COM mechanisms 
to find the FEMAP object, but imposes a limita tion. If you have multip le copies of FEMAP run-
ning (multiple processes, not multip le models open in the same FEMAP), GetO bject will always 
connect you to the process that wa s started first. This is simply a limitation of the OLE/COM inter-
face and can not be avoided.
If you are using the integrated WinWrap environm ent (API Programming) however, you can over-
come this limitation by never us ing “GetObject”. Instead, you can connect to the current FEMAP 
session, no matter how many FEMAP processes are running by using

Dim App As Object 
Set App = feFemap() 
or more appropriately, to access the object inform ation provided by the Type Library (as described 
below)

Dim App As femap.model 
Set App = feFemap() 
The feFemap() method does the same thing as “G etObject”, but since the programming environ-
ment is fully integrated with FEM AP, it can always determine the session that launched your appli-
cation and communicate directly w ith that process. This will work  even if you save your Basic 
script from the API Programming window and connec t it as a User Command to a toolbar button 
or menu command.
3.1.3  Using the FE MAP Type Library
As shown above, you can declare your FEMAP object as a generic “Object”, whether you are pro-
gramming in Visual Basic or any other Basic Ed itor outside of FEMAP (such as in Excel). If you 
do work in Visual Basic however, you have the option of referencing the FEMAP Type library and 
explicitly using the object s that it defines (The API Programming  Dockable Pane inside of 
FEMAP automatically uses the FEMAP Type Librar y). Using the Type library provides you with 
several very helpful benefits. First you will be able  to use the Object Browser  to view the available 
 API-106  
properties and methods. Even more convenient however when you are working with an object or 
method, you will see popup tooltips that give you information rega rding the available properties, 
or the required parameter lists. 
If you are using a different language, like C++, you will always want to use the Type Library, since 
it provides much simpler acc ess to the API functionality.
Referencing the Type Library
Before you can use the Type library, you must refe rence it. The command to do this can be differ-
ent depending on where you are working.
In Visual Basic
In Microsoft Visual Basic, go to the Project- >References command (or Project->Add Reference in 
VB .NET) Look through the list of available re ferences. If you find “fem ap”, make sure it is 
checked. If not, press the Browse button, and find the file “femap .tlb”, which should be in the 
directory where you installed FEMAP. Once you selec t that file, it should appear in the list of ref-
erences (possibly at the bottom, and not in alphabetical order). Find the reference to “femap”, 
make sure it is checked and press OK. Although th e list may be somewhat different, you should 
end up with “femap” checked as an available reference, as shown.
In Visual Basic for Applications
If you are programming with Microsoft Excel, Word  or other Office applications, you will be 
using Visual Basic for Applications. The process to  access the Type library is the same, except that 
instead of using the Project->References comm and, you must use the Tools->References com-
mand.
In Visual C++
In a Visual C++ project, you must add a reference to the Type Library by adding a reference to it in 
your header file. Add a line similar to:
#import "path\femap.tlb" named_guids

   API-107
into your header file. Modify “pat h” to accurately locate the Type  Library that you want to refer-
ence.
Using the Object Browser
Once you have referenced the FEMA P Type library, you will be able to use the Object Browser to 
review the objects, properties an d methods that are available. Si mply go to the View, Object 
Browser (F2) command. You will see a form that  looks something like the one shown here. To 
limit the information shown to th e FEMAP classes, make sure you change the Proj ect/Library to 
“femap” in the drop-down control near the top of the window. You can then browse through the 
list of available classes, and their associated prop erties and methods. When you select one of these 
items, a description of the item, along with any pa rameter lists is displaye d at the bottom of the 
browser.
Using the Type Library
To use the information from the Type library, you mu st declare your objects using one of the avail-
able classes - not using the more generic “Object” definition.  For example, instead of using:
Dim App as Object
you must code,Dim App as femap.model
Once you have declared the FEMAP object as shown, you still must Get/Set it in the same way 
that you did above. Therefore, to use the type  library, and access an existing FEMAP session, the 
code required would be:
Set this to 
“femap”
 API-108  
Dim App as femap.model 
Set App = GetObject(,”femap.model”)
or once again, if you are programming in the API Programming window, you should use
Dim App as femap.model 
Set App = feFemap()
to always connect to th e current FEMAP session.
To create a new FEMAP session, using 
the type library use: 
Dim App as femap.model 
Set App = CreateOb-ject(“femap.model”)
As stated previously, there are definite 
advantages to using the type library. One of which is the popup list of avail-
able properties and methods. For 
example, after having defined your FEMAP/App object, as you type “App.” you will see a popup that 
shows the available properties and methods. Further, as you continue to type you will see a popup 
tooltip that shows you the pa rameter list for the method that you are working on.  
The various classes from the Type library can also be  used to define your other objects (not just 
“App”). This is described later in “FEMAP Entity Objects” on page 1877.
3.2  Working with the User Interface
In addition to the basic decision  about whether or not to connec t to a running FEMAP session, you 
must also decide how you want the user interface of your application to interact with the FEMAP 
user interface. There are several approaches  that you might want to use, including:
•running as two separate ap plications (no interaction)
•running FEMAP as a hidden server
•running your application as a FEMAP add-in
•embedding FEMAP graphics and messages in your application
Proper setup for each of these options is described in the following sections.
3.2.1  Running as two se parate applications
As you might expect, this is possibly the simplest of the approaches to in teraction. Since neither 
FEMAP, nor your application, need to  really know anything about the user interface of the other, 
there is no additional setup requir ed. Simply start your application, then “get” or “create” your 

   API-109
FEMAP object as described above. If you used GetO bject to attach to a running session, there is 
nothing more to do. If yo u used CreateObject however, a ne w FEMAP session will be started, but 
FEMAP will not be visible. To make your FEMAP  session visible, after calling CreateObject, you 
must call femap.feAppVisible. You do not need to call “feAppVisible” if you used GetObject, 
because FEMAP will already be visible.
In summary, if you want to run as two se parate, on-screen, visible applications, use
Dim App as Object 
Set App = GetObject(,”femap.model”)
to work with an exis ting FEMAP session. Or to start a new FEMAP, use
Dim App as Object 
Dim rc as Long 
Set App = CreateObject(“femap.model”) 
rc = App.feAppVisible(True)
3.2.2  Running FEMA P as a hidden server
If you want your application to be the only user interface that is vi sible to the user, then the process 
is very similar to running as two separate applicatio ns. In this case however, you will never want to 
use GetObject to attach to an existing FEMAP - yo u will use CreateObject, to create a new, hidden 
FEMAP object. Simply use :
Dim App as Object 
Set App = CreateObject(“femap.model”) 
At this point a new FEMAP session  will be started and through th e API you can access any of the 
available functionality. You will have to develop y our own user interface to present the capabili-
ties that you want to the user, and then call FEMAP API functions to implement that functionality. 
When you are running FEMAP in this mode, in general you will not want to call the numerous 
FEMAP API calls that optionally display dialog boxes  to ask for user input.  If you must call meth-
ods that display dialog or messag e boxes, you can control whether or not they are displayed using 
the “DialogAutoAnswer” variable. By default the boxes will just be cancelled, however if you 
choose to show the dialogs, th ese methods will still work, and di alog boxes will be displayed, 
(although their placement may be somewhat random), even though FEMAP is hidden. If you want to work in a totally hidden mode , with nothing displayed, you simp ly have to set the return code 
you want - dialog boxes that collect additional user input must be displayed if  you want the data to 
be properly defined.
3.2.3  Running your appli cation as a FEMAP add-in
If you want your application to become a FEMAP “add-in”, then you need to follow several addi-
tional steps. In this case, the ove rall interface that will be visible to the user will be FEMAP. Your 
application will become part of that interface. Yo u will probably want to build your application 
with its main window as a dialog box. 
To begin, simply follow the steps described ab ove for running as two separate, visible applica-
tions. Call GetObject or CreateObject to attach to  FEMAP, and call feAppVisible if you created a 
new FEMAP session. Finally, you will want to call feAppRegisterAddInPane (Section 3.16.5.2, 
"feAppRegisterAddInPane"). In th is call you will specify the handles  to your application window, 
and where in the FEMAP user interface you want it placed. Using this capability, you can build a 
user interface that looks something like:
 API-110  
In this case the “add-in” application (FEMAP Edito r) has been added to a pane in the FEMAP user 
interface in the upper-left corn er, using the following method:
rc = App.feAppRegisterAddInPane( True, Form1.DefInstance.Handle.ToInt32, 
0, False, False, 3, 2)
Note that the messageID window was not sp ecified, because events are not being used.
If you have registered your application as a FEMAP add-in, remember to call feAppRegisterAd-
dInPane again to “unregister” yo ur application before it exits.
3.2.4  Embedding FEMAP in your application
Instead of embedding your application in the FEMAP user interface, you might also want to 
embed parts of FEMAP into your interface. To do this, you embed the entire FEMAP window, and then you can selectively turn off/hi de various portions of the user interface, until you are left with 
the parts you want. Probably the most useful capability is that the FEMAP graphics windows can 

   API-111
be embedded directly into one of your windows. This can provide you all of the graphical capabil-
ities of FEMAP without having to reimplement th em yourself, and with a very simple setup.
Once again, you will connect to the FEMAP session using either Ge tObject or CreateObject. You 
will probably want to use CreateObject in most cases, however an existi ng FEMAP session can be 
embedded into your application. Even though this is possible however, you should not normally 
“grab” a user’s session and change it that dramatically.
3.2.4.1  Embedding FEMAP in your Application
 To embed the FEMAP windows into your applica tion, you simply call the feAppEmbed method. 
Here you specify the handle to your applicatio n window where you want the graphics embedded, 
the portion of that window to use for FEMAP. Here is a sample that embeds FEMAP when the but-
ton is pushed:
Dim femap As Object 
Dim rc As Long 

Private Sub Command1_Click() 
    Set femap = CreateObject("femap.model") 
    rc = femap.feAppEmbed(Me.Handle, 120, 10, 660, 420) 
End Sub
Alternatively, with a few more calls, you can turn  off various parts of  the FEMAP interface to 
leave just the graphics window.
Dim femap As Object 
Dim rc As Long 

Private Sub Command1_Click() 

 API-112  
    Set femap = CreateObject("femap.model") 
    rc = femap.feAppManageToolbars("", False) 
    rc = femap.feAppManageStatusBar(False) 
    rc = femap.feAppManagePanes("", 0) 
    rc = femap.feAppManageGraphicsTabs(False) 
    rc = femap.feAppEmbed(Me.Handle, 120, 10, 660, 420) 
End Sub
As your application window is moved around the screen the FEMAP windows will move with it, 
staying visible in the same rela tive location. If you want the FEMAP windows to resize as you 
resize your window, then you need to update  the FEMAP window as you are resizing. During 
resizing, simply keep calling feAppEmbed with  new coordinates and sizes.  You can still maxi-
mize FEMAP, and if you do, it will fill the client  area of your window, possibly covering other 
items (like the button above). You can control th e look of the FEMAP graphics windows by mod-
ifying the various view options prior to making a view visible.
Note that you do not want to call feAppVisible if you want to run in this mode. Calling feAp-
pEmbed will automatically make the windows visi ble, and calling feAppVisible first will just 
cause unnecessary flashing of the windows. 
3.2.4.2  Capturing the FEMAP Messages
In addition to embedding graphics or messages windows, you may want to capture the text that is displayed in the FEMAP message window and display it in one of your own windows.
Capturing the FEMAP message stream is a bit more  involved than a single method call, however it 
is not too difficult. It is very similar to the ap proach needed for capturing FEMAP events. In addi-
tion, you can turn message capture on and off at any time. The procedure to capture messages is as 
follows:

   API-113
•Get or Create a FEMAP object
•Call feAppRegisterMessageHandler to provide the handle to a window which will process the 
messages. This does not have to be the window  where the messages will be displayed, but it 
must be a window with a message loop that you can watch and modify.
•Override the standard Windows pr ocedure for the window that you registered. This requires a 
call to the Windows function  SetWindowsLong, setting the GWL_WNDPROC constant. You 
need to Declare this Windows function and define the constant before accessing it.
•Write the new Windows procedure to process the WM_COPYDATA messages  that you will be 
receiving from FEMAP. You should also pass al l other messages along to the standard Win-
dows procedure that you overrode. In this procedure, every time you receive a WM_COPY-
DATA message, you will extract the text stri ng (and possibly the color) from the message, 
process it in any way that you choose, and display it wherever you want.
•To stop capturing messages, or when you ex it your application, ca ll feAppRegisterMessage-
Handler again to “unregister” your window and stop FEMAP from sending WM_COPYDATA 
messages. You should also replace the original Window message procedure.
Format of the WM_COPYDATA messages
Since Windows only passes messages with wParam an d lParam values, both of which are “long” 
values, it is difficult to pass a general text  string through a messa ge. The WM_COPYDATA mes-
sage however was created to allow interprocess co mmunication of other data types. In this mes-
sage, the “lParam” value contains the address  of a data structure defined as follows:
Type COPYDATASTRUCT 
   dwData As Long 
   cbData As Long 
   lpData As Long 
End Type 
“cbData” contains the number of bytes of data in “lpData”. FEMAP uses this to pass the text string 
for each message in the lpData portion of the structure. You can use the Windows CopyMemory 
function to move the data in the structure to  a variable defined as a COPYDATASTRUCT, and 
then again to extract the string data from lpData.
In addition to the string data, FEMAP also pas ses the message color/status information in the 
dwData field. Refer to the feAppMessage method  (Section 3.16.8.1, "feAppMessage") for more 
information regard ing color values.
Sample Program to Capture and Display FEMAP Messages
The following program is a fairly simple example of what is required to  capture and display the 
messages from FEMAP. As you can see, it does requir e quite a bit more work than simply embed-
ding a messages window, but does provide the fl exibility of modifying an d displaying the mes-
sages in any way you would like.
Each of the declarations in the beginning of th is program are necessary for its proper operation. 
You must have proper access to these global Windows constants and functions. The MsgWindow-
Proc function is used to override the stan dard Windows message loop and process the WM_-
COPYDATA messages coming from FEMAP. In this  case, once the message is extracted, it is 
simply added to a listbox control on the main form.
 API-114  
CaptureMessages connects to FEMAP and sets up the message capture, including defining 
MsgWindowProc as the procedure to override message processing. ReleaseMessages terminates 
message capture and can be called either at shutdown  or if you simply want  to stop capturing mes-
sages.
Global femap As Object 
Global Const GWL_WNDPROC = (-4&) 
Global Const GWL_HWNDPARENT = (-8) 
Global Const WM_COPYDATA = &H4A 
Global PreviousWindowProc As Long 
'=============================================================== 
Type COPYDATASTRUCT 
   dwData As Long 
   cbData As Long 
   lpData As Long 
End Type 
'=============================================================== 
' Public Declarations to provide access to Windows API functions 
'--------------------------------------------------------------- 
Public Declare Function GetWindowLong Lib "user32" _ 
        Alias "GetWindowLongA" (ByVal hwnd As Long, _ 
        ByVal nIndex As Long) As Long 
Public Declare Function RegisterWindowMessage Lib "user32" _ 
       Alias "RegisterWindowMessageA" (ByVal lpString As String) _ 
        As Long 
Public Declare Function SetWindowLong Lib "user32" _ 
        Alias "SetWindowLongA" (ByVal hwnd As Long, _ 
        ByVal nIndex As Long, ByVal dwNewLong As Long) _ 
        As Long 
Public Declare Function CallWindowProc Lib "user32" _ 
        Alias "CallWindowProcA" (ByVal lpPrevWndFunc As Long, _ 
        ByVal hwnd As Long, ByVal Msg As Long, _ 
        ByVal wParam As Long, ByVal lParam As Long) As Long 
Public Declare Sub CopyMemory Lib "kernel32" _ 
        Alias "RtlMoveMemory" _ 
        (hpvDest As Any, hpvSource As Any, ByVal cbCopy As Long) 
'================================================================ 
' Override Window procedure and process WM_COPYDATA messages 
'---------------------------------------------------------------- 
Public Function MsgWindowProc(ByVal hwnd As Long, _ 
        ByVal uMsg As Long, ByVal wParam As Long, _ 
        ByVal lParam As Long) As Long 
   Dim rc As Long 
   Dim cds As COPYDATASTRUCT 
   Dim buf(1 To 255) As Byte 
   If uMsg = WM_COPYDATA Then 
      Call CopyMemory(cds, ByVal lParam, Len(cds)) 
      Call CopyMemory(buf(1), ByVal cds.lpData, cds.cbData) 
      a$ = StrConv(buf, vbUnicode) 
      a$ = Left$(a$, InStr(1, a$, Chr$(0)) - 1) 
   API-115
      'Add to Listbox 
      Form1.List1.AddItem (a$) 
      MsgWindowProc = True 
   Else 
      MsgWindowProc = CallWindowProc(PreviousWindowProc, _ 
                             hwnd, uMsg, wParam, lParam) 
   End If 
End Function 
'================================================================ 
' Initialize FEMAP object and capture messages 
'---------------------------------------------------------------- 
Public Sub CaptureMessages() 
    Dim rc As Long 
    Set femap = GetObject(, "femap.model") 
    rc = femap.feAppRegisterMessageHandler(True, Form1.hwnd) 
    PreviousWindowProc = SetWindowLong(Form1.hwnd, GWL_WNDPROC, _ 
                                        AddressOf MsgWindowProc) 
End Sub 
'================================================================ 
' Stop capturing messages 
'---------------------------------------------------------------- 
Public Sub ReleaseMessages() 
    Dim rc As Long 
    If PreviousWindowProc Then 
        rc = femap.feAppRegisterMessageHandler(False, Form1.hwnd) 
        rc = SetWindowLong(Form1.hwnd, GWL_WNDPROC, _ 
                                PreviousWindowProc) 
        PreviousWindowProc = 0 
    End If 
End Sub 
'================================================================ 
When combined with a Basic Form, this code drives an application that looks like:
In addition to the code shown abov e, the following code connects the buttons on the form to the 
previous code. 

 API-116  
Private Sub Capture_Click() 
   Call CaptureMessages 
End Sub 
Private Sub ListInfo_Click() 
   rc = femap.feFileProgramRun(False, True, False, "{LI}") 
End Sub 
Private Sub Release_Click() 
    Call ReleaseMessages 
End Sub 
Private Sub Form_Unload(Cancel As Integer) 
    Call ReleaseMessages 
End Sub 
3.2.5  API Performance
As described in the previous sections, there are ma ny ways to integrate y our API application with 
FEMAP. No matter which of these methods you u se however, the overall performance of your 
application can vary greatly depending on how you implement the integration.  Whenever it is vis-
ible, the FEMAP user interface is being continually updated to reflect the changing states of your 
models. While this is very desi rable in most situations, and ce rtainly desirable when running 
FEMAP interactively, it can result in substantial overhead during API ca lls. There are two basic 
approaches that you can take to prevent this overhead, and substa ntially improve the performance 
of your application:
1. Hide the FEMAP user interface using feAppVisible ( ). The user interface is not updated if it is 
not visible and therefore the API calls will run fa ster. If you started FEMAP from your API, then it 
will start in the invisible state, so if you never call feAppVisible( True ), to make it visible, you 
will not have to hide it. If you attach to a running FEMAP session, th en calling feAppVisible( 
False ) will hide it and improve performance. Using this  hide/show approach certainly works, 
however it will result in FEMAP di sappearing and reappearing on the screen which might not be 
desirable.
2. Lock the FEMAP user interface us ing feAppLock( ). This is the method that you will typically 
want to use unless you are launching your own FE MAP session and running it totally in the invis-
ible state (with-out calling feAppVisible( True ) ).  Using this function simp ly locks the user inter-
face so that it is not usable, no r updated. This function also has the added benefit of preventing the 
user from accidentally picking commands or changing anything while your application is running. 
Depending on what your application does, you will either want to call feAppLock( ) at the begin-
ning of your application, and feAppUnlock( ) at the end, or place feAppLock( ) / feAppUnlock( ) pairs around API intensive portions of your applic ation (like commands), so  that the FEMAP user 
interface updates at the end of that portion, bu t does not slow down the work being performed. 
You must always pair feAppLock( ) and feAppUnloc k( ) calls - there must be an equal number of 
feAppUnlock( ) calls as ther e were feAppLock( ) calls.
A few simple tests using thes e methods show that using th em can improve the perfor-
mance of your application by a factor of 10 or more in areas where many API calls are 
being made, so it is worth the time  to implement these simple methods.
   API-117
3.3  FEMAP Object Properties
Methods and Properties
The following sections describe the methods and properties that are available directly from the 
FEMAP application object. In gene ral, these provide access to “globa l” data that applies to your 
entire model, and access to func tionality that is equivalent to many of the interactive menu com-
mands. Access to lower level func tionality, like querying and editing of individual entity data, is 
available through the other ob jects that you can create from the application object.
The FEMAP object properties are global in nature . Changing their values will have an immediate 
impact on the FEMAP session. Use care when changing these (or any other) properties. 
In these tables, you will see some properties that list two names - one of which is an array, the 
other a Variant. Refer to Section 1.2.7, "Multiple  Definitions of Array Properties" for more infor-
mation.
3.3.1  Global Properties - File menu commands
These Global Properties are used to se t options for various commands on the File menu in 
FEMAP. These commands are File, Import, Geometry; File, Page Setup; and File, Preferences  in 
FEMAP. Depending on the Global property, it ma y require an Integer (INT4), Real (REAL8), 
Boolean (BOOL), or String (STRING). The type is noted for each Global Property. Each tab of the 
Preferences  dialog box is discussed in greater detail below.
3.3.1.1  File, Import, Geometry  - Geometry Replacement Options
These Global Properties set the options on the Geometry Replacement Options  dialog box after a 
file has been selected for import and the “Update Existing Geometry” option is available:

 API-118  Geometry Replacement Options
Geometry Replacement Options
Property Description Type
Solid_UpdateActiveIf True, active Parasolid geometry will be updated 
with the geometry being im ported.  This option is 
actually on the Solid Model Read Options  dialog 
box and allows access to the other options.BOOL
Mesh SizingSolid_UpdateResizeModeThe type of mesh resizing to do if you are updating 
Parasolid geometry on import: 0=Keep existing 
sizes, 1=Update sizes on curves that exceed a cer-
tain length change to lerance, 2=Resize all.INT4
Solid_UpdateResizeTolThe tolerance above which curve mesh sizes will 
be recomputed when curv es change length during 
import of updated Parasolid geometry. Only used 
if the appropriate Solid_UpdateResizeMode is used.REAL8
Update Options
Solid_UpdateDeleteIf True, active Parasolid geometry and any mesh 
on that geometry will be deleted if updated geome-
try is imported. Only u sed if Solid_UpdateActive 
is also True.BOOL
Solid_UpdateParasolidIdentIf True, the geometry will be updated using Para-
solid Identifiers. Only used if Solid_UpdateActive 
is also True.BOOL
Solid_UpdateMaterialDataIf True, the existing geomet ry will be updated to 
use the Material Data of the imported solid. Only 
used if Solid_UpdateActive is also True.BOOL
Page Setup Properties   API-119
3.3.1.2  File, Page Setup
These Global Properties are used to set the options on the Page Setup  dialog box:
Page Setup Properties
Property Description Type
Page Header and FooterPgSetup_Header Text for Print header. STRINGPgSetup_Footer Text for Print footer. STRINGPgSetup_DefaultHdrFont If True, use the defa ult system font for header/footer. BOOL
PgSetup_HdrFontName of font to use for header/footer. Only used if 
PgSetup_DefaultHdrFont=False.STRING
PgSetup_HdrFontSize Size in points of the header/footer font. INT4
Other Printed TextPgSetup_DefaultTextFont If True, use the de fault system font for header/footer. BOOL

 API-120  
PgSetup_TextFontName of font to use for other text. Only used if PgSet-
up_DefaultTextFont=False.STRING
PgSetup_TextFontSize Size in points of the font for printed text. INT4
Page MarginsPgSetup_LeftMargin
Page margins.REAL8
PgSetup_RightMargin REAL8PgSetup_TopMargin REAL8PgSetup_BottomMargin REAL8Plot and Metafile StylePgSetup_PrintBorder If True, a border is drawn around the plot. BOOL
PgSetup_SwapBWIf True, black and white colors are reversed for print-
ing and metafiles.BOOL
PgSetup_Monochrome If True, print is done in monochrome. BOOL
PgSetup_TransparentBkgdIf True, the background is not filled in a printer resolu-
tion print or Metafile.BOOL
PgSetup_PenScaleHas been removed. Use Pref_ResPenMethod =1 and 
Pref_ResPenScale insteadINT4
PgSetup_RenderScaleHas been removed. Use Pref_ResCopySaveMethod =1 
and Pref_ResCopySaveScale insteadREAL8
Plot Position and Size
PgSetup_MaintainAspectIf True, plots will maintain th e same aspect ratio as the 
on-screen window.BOOL
PgSetup_IntegerScalingIf True, the plotting dimensions  in device units (pixels) 
must be an integer multiple  of the dimensions of the 
on-screen window. This is primarily used for printing 
bitmaps with the highest possible accuracy.BOOL
PgSetup_FillMarginsIf True, plot will fill the prin ter margins. If False, use 
the custom height and width.BOOL
PgSetup_CustomHeightHeight and width for custom print size (only used if 
PgSetup_FillMargins = False).REAL8
PgSetup_CustomWidth REAL8PgSetup_VertAlign Vertical alignment: T/B Center=0, Top=1, Bottom=2. INT4
PgSetup_HorzAlign Horizontal alignment:  L/R Center=0, Left=1, Right=2. INT4Page Setup Properties
Property Description Type
Messages Preference Properties   API-121
3.3.1.3  File, Preferences - Messages tab
These Global Properties are used to set the options on the Messages  tab of the Preferences  dialog 
box:
Messages Preference Properties
Property Description Type
General

 API-122  
Pref_ScrollBackLinesNumber of lines of text to be saved for “scroll-
back” in the Messages and Lists window.INT4
Pref_MsgWndRepeatedErrorsNumber of times an error message will be repeated 
before listing stops.  A fi nal message will be listed 
with an error count.INT4
Fonts and Colors
Pref_MessageFontName of font used for messages (other than list-
ings) in the Message Window.STRING
Pref_MsgWndFontSize Message window font size in points. REAL8
Pref_ListingFontName of font (fixed-pitch) used for listings in the 
Message Window.STRING
Pref_ProgramFontName of font used for API and Program File win-
dows.STRING
Pref_ProgramFontSizeFont size of the font used for the API and Program 
File panesREAL8
Pref_MsgWndBackColor Message wi ndow Background Color. INT4
Pref_MsgWndTextColor Message window Text Color. INT4
Pref_MsgWndTextBoldIf True, normal Text written to the Message Win-
dow uses a bold fontBOOL
Pref_MsgWndCmdColor Message window Command Color INT4
Pref_MsgWndCmdBoldIf True, Command names written to the Message 
Window use a bold fontBOOL
Pref_MsgWndHighColor Message window Highlighted Text Color. INT4Pref_MsgWndHighBoldIf True, Highlighted Text written to the Message 
Window uses a bold fontBOOL
Pref_MsgWndWarnColor Message wi ndow Status Message Color. INT4
Pref_MsgWndWarnBoldIf True, Status Messages written to the Message 
Window use a bold fontBOOL
Pref_MsgWndErrorColor Messag e window Error Color. INT4
Pref_MsgWndErrorBoldIf True, Error messages written to the Message 
Window use a bold fontBOOL
Pref_MsgWndFontName of fixed-pitch font to be used in Messages 
and Lists window.STRINGMessages Preference Properties
Property Description Type
Views Preference Properties   API-123
3.3.1.4  File, Preferences - Views tab
These Global Properties are used to set the options on the Views  tab of the Preferences  dialog box:
Views Preference Properties
Property Description Type
Startup View (from View Library)Pref_LibViewNumber Index of default view in the view library. INT4

 API-124  
Background Bitmaps (Render Only)
Pref_ViewBkgdBitmap Filename for the Background bitmap. STRINGPref_ViewLogo Filename for the Logo bitmap. STRING
Pref_ViewLogoScreenResIf True, the View Logo is defined in Screen Reso-
lution, and will be scaled when printed. If False, it 
is in Print Resolution and is scaled for Screen dis-play.BOOL
Picture Copy
Pref_PictureCopyTextForXYControls whether comma-se parated text is sent to 
the clipboard when an XY plot is copied. True = 
Include Text.BOOL
Pref_MetafileToClipControls whether a Windows Metafile is sent to 
the clipboard when the graphics area is copied. True = Include Metafile format.BOOL
Picture Save Defaults
Pref_PictureFormatControls the default picture format for Picture 
Save. 0=BMP, 1=JPG, 2=PNG, 3=GIF, 4=TIFINT4
Pref_AnimationFormatControls the default anim ation format for Picture 
Save. 0=BMP, 1=BMP series, 2=A VI, 3=GIFINT4
Pref_JTFileVersion Sets the default file version for JT files INT4Pref_RenderCaptureIconifiedIf True, Iconified views can be captured when sav-
ing a picture.BOOL
Picture Save Defaults (Resolution Options)
Pref_ResPrintMethodSpecifies the Print Resolution method (0=Printer, 
1=Screen, 2=Screen Scaled By)INT4
Pref_ResPrintScaleScale factor used by Scr een Scaled By method in 
the Print Resolution sectionREAL8
Pref_ResCopySaveMethodSpecifies the Copy/Save Resolution method 
(0=Screen, 1=Screen Scal ed By, 2=Screen Scaled 
With Width, 3=Screen Scaled With Height, 
4=Fixed Size)INT4
Pref_ResCopySaveScaleScale factor used by Scr een Scaled By method in 
the Copy/Save Resolution sectionREAL8
Pref_ResScaleWithWidthResolution used by Screen Scaled With Width 
method in the Copy/Save Resolution sectionINT4Views Preference Properties
Property Description Type
   API-125
Pref_ResScaleWithHeightResolution used by Screen  Scaled With Height 
method in the Copy/S ave Resolution section.INT4
Pref_ResFixedWidthResolution used by Fixed Size method to set the 
Width in the Copy/Save Resolution sectionINT4
Pref_ResFixedHeightResolution used by Fixed Size method to set the 
Height in the Copy/S ave Resolution sectionINT4
Pref_ResPenMethodSpecifies the Pen Width method 
(0=Auto, 1=Manual Factor)INT4
Pref_ResPenScaleSets Line value in the Pen Width and Font Size 
sectionINT4
Pref_ResFontScaleSets Font value in the Pen Width and Font Size 
sectionINT4
Pref_ResScreenLogoScaleSets the value for Screen Scale in the Logo and 
Background Bitmap  Scaling sectionREAL8
Pref_ResPrintLogoScaleSets the value for Print Scale in the Logo and 
Background Bitmap  Scaling sectionREAL8
Pref_ResCopySaveLogoScaleSets the value for Copy/Save Scale in the Logo 
and Background Bitmap Scaling sectionREAL8
Picture Save Defaults (GIF Options)Pref_GIFColorOptThe color options for creating a GIF picture file.
1=Network, 2=Octree, 3= Color Diffusion (Dither)INT4
Pref_GIFAnimationDelay The delay between frames of an animated GIF file INT4
Pref_GIFOptimized Toggles the Op timized check box on/off BOOL
Pref_GIFFrameSeriesControls whether Animatio ns will be saved in GIF 
formats as a series of files or a single animated 
GIF. True=Save GIF Frame Series.BOOL
OptionsPref_WorkplaneNotVisibleControls whether the workplane will be visible 
when you start a new model.  True = Workplane 
Never Visible in New ViewBOOL
Pref_AltContourPaletteObsolete - see Pref_DefContourPaletteBOOL
Pref_DefContourPaletteDefault Contour Palette 0=Standard, 1=No 
Magenta, 2=Temperature, 3=Red,Yellow,Green, 
4=GrayINT4Views Preference Properties
Property Description Type
 API-126  
Pref_AspectRatio Aspect ratio for new views. REAL8
(Obsolete) Pref_2DTensorPlotOver-
rideThis option has been removed for 11.3 and no lon-
ger does anything.BOOL
Pref_ViewPostDynamicMaxMinIf True, Max/Min data is automatically shown and 
updated as you change output sets/vectors in the Post Data dialogBOOL
View and Dynamic Rotation
Pref_DeltaAngleAngle for incremental rotation in the View, Rotate 
command.REAL8
Pref_ViewDynamicModeDynamic rotation mode: 0=Fast Redraw, 
1=Reduced Bitmap, 2=Full Bitmap.INT4
Pref_ViewDynamSpeed Speed of dynamic rotation. REAL8
Pref_ViewDimetric Text for Dimetric  button in View, Rotate. STRING
Pref_ViewIsometric Text for Isometric  button in View, Rotate. STRING
Pref_ViewTrimetric Text for Trimetric  button in View, Rotate. STRING
Pref_AngleIsometric[0..2]
orV ARIANT vPref_AngleIsometric
The rotation angles assigned  to the corresponding 
buttons in the View, Rotate  command.REAL8
Pref_AngleDimetric[0..2]
or
V ARIANT vPref_AngleDimetricREAL8
Pref_AngleTrimetric[0..2]
or
V ARIANT vPref_AngleTrimetricREAL8
Pref_SynchronizedRotationIf True, the Synchroniz ed Rotation option is 
enabled.BOOL
Default View Font (not currently in GUI)Pref_GraphicsFontName of font used for the view (the default is Mic-
rosoft Sans Serif)STRING
Pref_GraphicsFontSizeView font size in points , between 6 and 72 (allows 
half sizes)REAL8
Suppress Screen Entities (not currently in GUI)
Pref_SuppressScreenEntitiesIf True, disables active screen entities (View Leg-
end, View Axes, Post Titles, and Contour Legend)BOOLViews Preference Properties
Property Description Type
Graphics Preference Properties   API-127
3.3.1.5  File, Preferences - Graphics tab
These Global Properties are used to set the options on the Graphics  tab of the Preferences  dialog 
box:
Graphics Preference Properties
Property Description Type
Graphics Options

 API-128  
Pref_RenderHWIf True, OpenGL will atte mpt to use Hardware 
Acceleration.BOOL
Pref_RenderBestAvailable*If True, automatically queries the computer and 
automatically specifies option for Performance 
Graphics and Memory Optimization, as well as 
selected values for the Vertex Arrays drop-down, 
Max VBO MB, and Min VBO BBOOL
Pref_PerformanceGraphics* If True, Performance Graphics mode is enabled BOOL
Pref_RenderVertexArrays*0=No use of Vertex Arrays, 1=Partial, 2=Full for 
all graphicsINT4
Pref_RenderMaxVBOMBSets the maximum amount of memory that can be 
used by VBOs – if this is exceeded, any remaining 
graphics data is drawn using vertex arraysINT4
Pref_RenderMinVBOBAny block of graphics data smaller than this value 
will not use VBOs as large numbers of small VBOs is not more efficient than vertex arraysINT4
Pref_RenderMemoryOpt* If True, Graphics Memory Optimization is on BOOL
Pref_RenderMidsideIf True, Render mode will Use Midside Nodes 
when drawing elements.BOOL
Pref_RenderMultiModelMem If True , Multi-Model Memory is on BOOL
Pref_RenderBeamEdgesControls drawing of Beam Facet Edges between 
cross sections of beamsBOOL
Pref_RenderSmoothLines If True, uses antialiasing to render smooth lines BOOLPref_RenderAutoRegenIf True, graphics are completely regenerated after 
every commandBOOL
Pref_NewPickIf True, enables picking technology implemented 
for version 2021.1 and aboveBOOL
Pref_RenderFastPickIf True, enables faster, in-memory selection of 
entitiesBOOL
Pref_RenderFastPickVisibleIf True, enables fast front pick and also allows 
front picking to work when area picking.BOOL
Pref_RenderXORPicking If True, XOR Picking Graphics in on BOOL
Pref_RenderEdgesAsLinesIf True, element and surface edges are drawn as 
lines rather than using edge flags.BOOL
Pref_RenderDialogRefresh If True , Dialog Refresh in on BOOLGraphics Preference Properties
Property Description Type
   API-129
Pref_RenderCtrlGGroupEvaluateIf True, Ctrl-G Group Evaluate option is enabled, 
which performs Group, Operations, Evaluate on 
all visible groups in the active modelBOOL
Pref_RenderDisableAbortIf True, Disable Abort is enabled, which disables 
the ability to abort a redraw of the graphics win-
dow, which can improve redraw performanceBOOL
Pref_RenderMaxMagnificationSets the value for Max Mag, must be between 
10,000 and 1.0E+15REAL8
Include In Dynamic Rotation
Pref_RenderRotate[0..22]*
or
V ARIANT vPref_RenderRotateThe flags used to indicate  which entities will be on 
for dynamic rotation. 0-Po int, 1-Curve, 2-Surface, 
3-Boundary, 4-Solid, 5-Text, 6-Coordinate Sys, 7-
Node, 8-Element, 9-Constraint, 10-Load, 11-Con-nections, 12-Fill, 13-Filled Edges, 14-Shading, 15-Undeformed, 16-Labels, 17-Workplane, 18-Mesh 
Locations, 19-Smooth Lines, 20-Elements as Free 
Edge, 21-Element Symbols, 22-CenterBOOL
Textures
Pref_RenderTex2D If True, uses 2D Texture Mapping BOOLPref_RenderTexSmooth If True, uses smooth textures BOOLPref_RenderTexAllTri* If True, forces all triangles for texture mapping BOOL
Pref_RenderTexNumber Max Number of Textures INT4Block Control
Pref_RenderBlockSizeSets the Block Size.  Available values are 4, 8, 16, 
32, 64, 128, 256, 512, and 1024INT4
Pref_RenderSearchDepthSearch Depth for adding entities to graphics sys-
temINT4
Digit Control - Locale
Pref_DL_UseIntIAllSets On/Off for User Region Separator Style/
(Negative/Values). BOOL
Pref_DL_DecimalSeparatorSets the option for Decimal Separator. 
0 = 1 234 
1 = 1.234 
2 = 1,234 
3 = 1’234INT4Graphics Preference Properties
Property Description Type
 API-130  
Pref_DL_DigitGroupSeparatorSets the option for Digit Group Separator. 
0 = 123 456 
1 = 123.456 
2 = 123,456 
3 = 123’456 INT4
Pref_DL_DigitGroupOptionSets the option for Separator Style. 
0 = 1234567 
1 = 1,234,567 
2 = 1234,567 
3 = 12,34,567INT4
Pref_DL_DigitGroupFlag Sets On/Off for Separator afte r the decimal. BOOL
Pref_DL_ExponentCharSets the Exponent Character. 
0 = E
1 = e
2 = D
3 = d
4 = F
5 = fINT4
Pref_DL_ForceSingleZero Sets On/Off for Force Single Zero. BOOL
Pref_DL_ForcePlusSign Sets On/Off for “+” Sign. BOOLPref_DL_NegativeBraces Sets On/O ff for (Negative Value). BOOL
Pref_DL_TrailingZeros Sets On/Off  for Remove Trailing Zeros. BOOL
Digit Control - Options
Pref_DO_OptionSets the Method in Digit Options. 
1 = Exponent 
2 = Significant Figures 
3 = Decimal Places 
4 = Femap ClassicINT4
Pref_DO_RoundToZero Sets On/Off for Round To Zero. BOOL
Pref_DO_RoundToZeroValue Sets value for Round To Zero. REAL8
Pref_DO_BeforeDecimalSeparatorSets the before Exponent Style. 
0 = .123
1 = 0.123 
2 = 1.123INT4Graphics Preference Properties
Property Description Type
   API-131
Pref_DO_MinimumExponentSizeSets the minimum exponent size. 
0 = No E+0
1 = e+1
2 = e+01
3 = e+001INT4
Pref_DO_ExponentDigitsSets the number of digits for the Exponent method. 
Can be 2 to 15 digits.INT4
Pref_DO_SigFigsSets the number of Significant Figures for the Sig-
nificant Figure Method. Can be 1 to 15INT4
Pref_DO_LeadingZerosSets the Maximum Zeros after Decimal Separator 
for the Significant Figure Method. Can be 0 to 10.INT4
Pref_DO_TrailingZerosSets the Maximum Zeros before Decimal Separa-
tor for the Significant Figure Method. Can be 0 to 10.INT4
Pref_DO_DecimalPlacesSets the Number of decimal places for the Decimal 
Place Method. Can be 1 to 15.INT4
Pref_DO_MaxDigitsSets the Maximum number of digits for the Deci-
mal Place Method. Can be 2 to 16. Must be greater 
than number of decimal places.INT4
Pref_DO_BaseExponentSets the Base Exponent for the Decimal Place 
Method. Can be -30 to 30.INT4
Pref_DO_OriginalDigitsSets the Number of Digits for the Femap Classic 
Method. Can be 0 to 15.INT4
Pref_DO_ExponentSets the On/Off for For ce Exponent in the Femap 
Classic Method. BOOL
Advanced/Debug Options
Pref_RenderTiming If True, prints render timings BOOLPref_RenderDebugElapsedTime If True, prints elapsed times BOOLPref_RenderDebugAllTime If True, prints All times BOOL
Pref_RenderDebugOGLErrors If True, prints OpenGL errors (if there are any) BOOL
Pref_RenderBitmapAlignmentAlignment of Bitmaps stor ed for OpenGL - do not 
change.INT4
Pref_RenderPixelFormatControls selection of Graphics Descriptors - 
0=AutomaticINT4Graphics Preference Properties
Property Description Type
 API-132  
The feFilePreferencesSave call MUST be used af ter using this option for the preference to be 
changed correctly. See Section 3.4.12.3, "feF ilePreferencesSave" for more information.Pref_RenderBitBltDelayValue needed for Delay in synchronizing OpenGL 
and GDI on some graphics cards (0..1000)INT4
Pref_RenderDebugFrameRateThis option writes a frames per second calculated 
from the display time without having to have any of the debug messages on. It gives a more accurate 
timing while dynamically ro tating. Used to deter-
mine which graphics prefer ences give the best per-
formance.BOOL
Pref_RenderVBOUsageOutputs information abou t memory used by VBOs
0 – No messages
1 – Only when VBO memory exceeded2 – Output detailed VBO memory usageINT4
Pref_RenderTDRProtectSets value for TDR Protec tion, which allows the 
graphics driver to have more time to receive mes-
sages from FEMAP.INT4
Pref_OpenMPIf True, enables OpenMP functionality in FEMAP 
(currently only used by  functionality which has 
been coded specifically to take advantage of 
OpenMP architecture)BOOL
PrefOpenMPThreads Number or threads for OpenMP to attempt to use INT4Graphics Preference Properties
Property Description Type
User Interface Preference Properties   API-133
3.3.1.6  File, Preferences - User Interface tab
These Global Properties are used to set the options on the User Interface  tab of the Preferences  
dialog box:
User Interface Preference Properties
Property Description Type
Global Options

 API-134  
Pref_GlobalLanguageSets the Language option. 
0=Default (FLNG_AUTO)
1=English (FLNG_EN)2=German (FLNG_DE)
3=Japanese (FLNG_JP)
4=Chinese, Traditional (FLNG_TW)5=Chinese, Simplified (FLNG_CN)INT4
Pref_GlobalUIScalingSets the UI Scaling option. 0=Enabled, 1=Dis-
abled, 2=WindowsINT4
Menus and Dialog Boxes
Pref_AltThemeIf True, use an Alternate Color Scheme and style 
for the user interfaceBOOL
Pref_RepeatCreateIf True, entity Create Commands will repeat (Pre-
viously, this was misspelled Pref_RepeateCreate, which has identical functiona lity, but should not be 
used)BOOL
Pref_RememberDialogPosIf True, each dialog position is remembered during 
a session and if a dialog is redisplayed it will be 
located at the same position as when it was last 
closed.BOOL
Pref_AltAcceleratorIf True, redefine certain accelerator keys to access 
Top, Bottom, ... Views.BOOL
Pref_ConfirmDelete If True, Ask for Conf irmation Before Delete is on. BOOL
Pref_Show0To360AnglesIf True, shows angles from 0 to 360 instead of -
180 to 180.BOOL
Pref_FastOutputDeleteSets the Fast Output Delete option. 0=Confirm, 
1=Fast (No Undo), and 2=Preserve Undo.INT4
Pref_RecentlyUsedFiles Number of files on  the Most Recently Used list. INT4
Graphical SelectionPref_TrackMousePick Activates dynamic selection tracking. BOOL
Pref_PickAllInsideControls selection of entities when screen area 
picking is used.BOOL
Pref_PickMethodControls the default Pick  Method. 0=Pick Normal, 
1=Pick Query, and 2=Pick FrontINT4
Pref_SnapToControls the default Sn ap Method. 0=Screen, 
1=Grid, 2=Point, 3=Node, 4=SmartINT4User Interface Preference Properties
Property Description Type
   API-135
Pref_TooltipDelayDelay before Selector Tooltips appear (in tenths of 
a second).INT4
Pref_TooltipDurationLength of time before Selector Tooltips automati-
cally disappear (in tenths of a second).INT4
Mouse InterfacePref_ZoomAroundCursorWhen on, zooming by sc rolling the mouse wheel 
will zoom about the cursor location.BOOL
Pref_RotateAroundCursorWhen on, rotation will oc cur about a location on 
the model, close to the cursor location.BOOL
Pref_ReverseMouseWheelControls the direction of zoom when you turn the 
mouse wheelBOOL
Pref_MiddleMouseButtonOKWhen on, the middle mouse button (wheel) can be 
clicked without moving the mouse to OK dialog boxesBOOL
Pref_ReversePanZoomIf True, hold down Shift to Zoom, and Ctrl for Pan 
in Dynamic Rotation. If False, reverse the keys.BOOL
Pref_PlaneWheelFactorAdjusts how much the cutting plane moves when 
holding Ctrl+scrolling the mouse for Dynamic Cutting Plane and Model Cutting PlaneREAL8
Meshing Toolbox
Pref_TbxExpandActive If True, only th e active tool will be expanded BOOL
Pref_TbxAutomesh0=AutoRemesh, 1=Track Changes, 2=Disable 
RemeshINT4
Dockable Panes
Pref_AnimatePanesIf True, the docking panes will animate when you 
click on their tab to make them visible.BOOL
Pref_PaneCaptionsOnTopIf True, the docking panes will always have their 
captions placed on the top of the pane. Otherwise 
they are either on the to p or left, whichever takes 
less space.BOOL
Pref_PaneAltDockSymbolsIf True, the docking position indicators will be 
shown using the “original” symbols instead of the 
“new” symbols.BOOL
Pref_LegacyXYPlottingIf True, the Legacy XY plo tting in Views will be 
enabled.BOOLUser Interface Preference Properties
Property Description Type
 API-136  
Model Info
Pref_ModelInfoMaxEntityLimits the max number of items of each type to 
show in the Model Info tree.INT4
Pref_AutomaticTitlesControls whether automatic titles will be given to 
otherwise untitled entities.BOOL
Show Entities Defaults
Pref_ShowModeSets the Mode for the Show Entities Defaults.  0 = 
Highlight, 1 = Transparent Highlight, and 
2 = Show Selected OnlyINT4
Pref_ShowLabels When True, Show  Labels option will be on BOOL
Pref_ShowNormals When True, Show  Normals option will be on BOOL
Pref_ShowColor Sets color va lue for Highlight Color INT4
Pref_ShowAutoscale When True, Autoscale option will be on BOOL
International Localization
Pref_UseRegionDecimalCharWhen on, uses the appropriate settings “.” and “,” 
based on the region being used by Windows OSBOOL
Pref_TabPasteIgnoreDelimeterWhen on, ignores delimite rs when pasting from 
the clipboard, provided a tab exists between valuesBOOLUser Interface Preference Properties
Property Description Type
Database Preference Properties   API-137
3.3.1.7  File, Preferences - Database tab
These Global Properties are used to set the options on the Database  tab of the Preferences  dialog 
box:
Database Preference Properties
Property Description Type
Database Options

 API-138  
Pref_BackupModelIf True, any existing model will be copied before 
each save.BOOL
Pref_CleanupModellIf True, any model will undergo a File, Rebuild 
before being saved to remove unused space.BOOL
Pref_DeleteScratchFileIf True, scratch files are automatically deleted 
whenever you exit a model.BOOL
Pref_PreserveNextID When True, Preserve  Next ID during Rebuild is on BOOL
Pref_ResetNextID When True, Reset Next ID after Delete All is on BOOL
Pref_DBLowDiskWarningIssues a warning when free space on the model 
scratch disk falls below this amount (in MByte). 
0=Disable.INT4
Pref_DBUndoLevels Maximum number of undo levels. INT4
Database Performance
Pref_DBCacheMaxMemoryPctSets max percentage valu e to use for Database 
Memory Limit INT4
Pref_DBCacheBlocksPerPage Number of bloc ks per page in the database cache. INT4
Pref_DBCacheMaxLabel Maximum cached database node/element label. INT4
Pref_OpenSaveMethodChoose and Open/Save Method.  0=Window I/O, 
1=C I/O, 2=Windows 64K I/O, and 3=C 64K I/O.
See Section 3.4.12.5, "f eRunIOTest" for informa-
tion about running the Read /Write Test to deter-
mine the preferred value for Open/Save MethodINT4
Timed Save
Pref_TimedSaveOn Turns on Timed Save  automatically. BOOL
Pref_TimedSaveNotify Sets Timed Save  to notify you before saving. BOOL
Pref_TimedSaveInterval Number of  minutes between timed saves. INT4
Pref_TimedSaveCommands Number of commands between timed saves. INT4
Windows Explorer Data
Pref_ModelThumbnailWhen True, thumbnail im age shown with model 
file in Windows Explorer saved with model.BOOL
Pref_ModelTooltipWhen True, model info fo r Tooltip available when 
hovering over model file in Windows Explorer saved with model.BOOLDatabase Preference Properties
Property Description Type
   API-139
3.3.1.8  File, Preferences - Solvers
These Global Properties are used to set the options on the Solvers  tab of the Preferences  dialog 
box:Scratch Directory
Pref_DBScratch Path (no filename) for model scratch file. STRINGDatabase Preference Properties
Property Description Type

 API-140  Geometry/Model Preference Properties
Geometry/Model Preference Properties
Property Description Type
NX NastranPref_SolNXNastProgram Specifies path to NX Nastran solver STRINGPref_SolNXNastCmd Command line arguments for NX Nastran STRINGMSC/MD NastranPref_SolMSCNastProgram Specifies path  to MSC/MD Nastran solver STRING
Pref_SolMSCNastCmd Command line argu ments for MSC/MD  Nastran STRING
Autodesk NastranPref_SolNEINastProgram Specifies path  to Autodesk Nastran solver STRING
Pref_SolNEINastCmd Command line argu ments for Autodesk Nastran STRING
AbaqusPref_SolAbaqusProgram Specifies path to Abaqus solver STRINGPref_SolAbaqusCmd Command line arguments for Abaqus Nastran STRINGAnsysPref_SolAnsysProgram Specifies path to Ansys solver STRINGPref_SolAnsysCmd Command line arguments for Ansys Nastran STRINGLS-DYNAPref_LSDynaProgram Specifies path to LS-DYNA solver STRING
Pref_LSDynaCmd Command line argu ments for LS-DYNA Nastran STRING
All Solvers
Pref_SolEchoCmdWhen on, turns on Echo Command Line to Message 
Window optionBOOL
Geometry/Model Preference Properties   API-141
3.3.1.9  File, Preferences - Geometry/Model tab
These Global Properties are used to set the options on the Geometry/Model  tab of the Preferences  
dialog box:
Geometry/Model Preference Properties
Property Description Type
Geometry Preferences

 API-142  
Pref_GeomEngine Default geometry engine: 0=Std, 1=Parasolid. INT4
Pref_GeometryScaleSolid geometry scale factor used to make sure that 
geometry fits inside th e limited coordinate spaces 
used by the solid modeling engines. This value is copied to Info_GeometryScale when a model is 
started, and is used throughout that model.
Setting this value to: 39.37 will change the dr op-down to 0..Inches
1.0 will change the drop-down to 1..Meters
1000.0 will change the drop-down to 2..MillimetersAll other values change the drop-down to 3..OtherREAL8
Pref_ConstructionGeometryDefault for construction  geometry: 0=Delete, 
1=Move To No Pick Layer, 2=Do Nothing.INT4
Pref_GeometryBooleanToleranceTolerance Parasolid uses when performing Boolean 
operations. A value of 0.0 causes the tolerance to be automatically determined. This value should only 
be changed from 0.0 when instructed to do so by 
FEMAP development or GTAC.REAL8
Pref_GeomScaleAdjustIf True, geometry scale factors are automatically 
adjusted to match the modeling scale factor.BOOL
Pref_GeomOptimizeIf True, imported geometry is run through additional 
options in Parasolid to tr y and simplify the geometryBOOL
Pref_NonmanifoldBooleansIf True, imported geometry is run through additional 
options in Parasolid to tr y and simplify the geometryBOOL
Load Expansion on Midside Nodes
Pref_GeomLoadEdgeFactorAdjustment factor for load expansion on midside 
nodes along edges.REAL8
Pref_GeomLoadTriFactorAdjustment factor for load expansion on midside 
nodes on tri faces.REAL8
Pref_GeomLoadQuadFactorAdjustment factor for load expansion on midside 
nodes on quad faces.REAL8
Pref_AdjMidsideGeomLoadEnables default adjustment of nodal loads at the 
midside of parabolic elemen ts during geometry load 
expansion.BOOL
Log File
Pref_GeomLogFileEnables a log file for all solid modeling operations 
(for debugging purposes only).BOOLGeometry/Model Preference Properties
Property Description Type
   API-143
Other Load Options
Pref_LoadModifyRotateControls whether loads shou ld be rotated or other-
wise modified when the m esh or geometry the load 
is applied on has been copied, scaled, rotated, or reflected. Also, if the mode l has been modified using 
Modify, Move By, CSys; M odify, Rotate By, CSys; 
Modify, Align, CSys; Modify, Scale, CSysBOOL
Meshing and Properties
Pref_MeshInMemoryAllows the bounda ry mesher to allocate additional 
memory to speed up its operation.BOOL
Pref_FastTriMeshChooses the Fast Tri Mesher as the default triangular 
mesher.BOOL
Pref_FastHoleMeshingUsed to enable and set value, “n”, for the Alternate 
Subdivision Meshing of Su rfaces with more than 
“n” holes option. When set to 0, the option is dis-
abled. When set to > 0, enables the option and the 
specified integer value is used for “n”INT4
Pref_AltSectionProp If True, uses the a lternate section property calculator BOOL
Pref_LengthBasedMeshSize0 = 0..Parametric, 1 = 1..Equal Length, 2 = 2..Para-
metric/Equal LengthINT4
Element Quality button - Femap tab
Pref_ElemQualAspectRatio If True, Aspect Ratio element check is on BOOLPref_ElemQualAspectRatioVal Value for Aspect Ratio element check REAL8Pref_ElemQualTaper If True, Taper element check is on BOOLPref_ElemQualTaperVal Value for Taper element check REAL8Pref_ElemQualAltTaper If True, Alternate Taper element check is on BOOLPref_ElemQualAltTaperVal Value for Alternate Taper element check REAL8Pref_ElemQualIntAngles If True, Intern al Angles element check is on BOOL
Pref_ElemQualIntAnglesVal Value for Internal Angles element check REAL8Pref_ElemQualSkew If True, Skew element check is on BOOLPref_ElemQualSkewVal Value for Skew element check REAL8Pref_ElemQualWarping If True, Warping element check is on BOOLPref_ElemQualWarpingVal Value for Warping element check REAL8Geometry/Model Preference Properties
Property Description Type
 API-144  
Pref_ElemQualNastranWarping If True, Nastran Warping element check is on BOOL
Pref_ElemQualNastranWarpingVal Value fo r Nastran Warping element check REAL8
Pref_ElemQualTetCollapse If True, Te t Collapse element check is on BOOL
Pref_ElemQualTetCollapseVal Value for Tet Collapse element check REAL8Pref_ElemQualJacobian If True, Jacobian element check is on BOOLPref_ElemQualJacobianVal Value for Jacobian element check REAL8Pref_ElemQualCombined If True, Combin ed Quality element check is on BOOL
Pref_ElemQualCombinedVal Value for Co mbined Quality element check REAL8
Pref_ElemQualExplicitTime If True, Explicit Time Step element check is on BOOLPref_ElemQualExplicitTimeVal Value for Ex plicit Time Step element check REAL8
Element Quality button - NX Nastran tabPref_ElemQualQuadSkew If True, QUAD SKEW element check is on BOOLPref_ElemQualQuadSkewVal Value for QUAD SKEW element check REAL8Pref_ElemQualQuadTaper If True, QUAD TAPER element check is on BOOLPref_ElemQualQuadTaperVal Value for QUAD TAPER element check REAL8Pref_ElemQualQuadWarp If True, QUAD WARP element check is on BOOLPref_ElemQualQuadWarpVal Value for QUAD WARP element check REAL8Pref_ElemQualQuadIAMin If True, QUAD IAMIN element check is on BOOLPref_ElemQualQuadIAMinVal Value for QUAD IAMIN element check REAL8Pref_ElemQualQuadAR If True, QUAD AR element check is on BOOLPref_ElemQualQuadARVal Value for QUAD AR element check REAL8Pref_ElemQualQuadIAMax If True, QUAD IAMAX element check is on BOOLPref_ElemQualQuadIAMaxVal Value for QUAD IAMAX element check REAL8Pref_ElemQualTriaSkew If True, TRIA  SKEW element check is on BOOL
Pref_ElemQualTriaSkewVal Value for TRIA SKEW element check REAL8Pref_ElemQualTriaIAMax If True, TRIA IAMAX element check is on BOOLPref_ElemQualTriaIAMaxVal Value for TRIA IAMAX element check REAL8Pref_ElemQualTriaAR If True, TRIA AR element check is on BOOLGeometry/Model Preference Properties
Property Description Type
   API-145
Pref_ElemQualTriaARVal Value for TRIA AR element check REAL8
Pref_ElemQualTriaEPLR If True, TRIA AR element check is on BOOLPref_ElemQualTriaEPLRVal Value fo r TRIA AR element check REAL8
Pref_ElemQualTetAspectRatio If True, TETRA AR element check is on BOOLPref_ElemQualTetAspectRatioVal Value  for TETRA AR element check REAL8
Pref_ElemQualTetEPLR If True, TETRA EPLR element check is on BOOLPref_ElemQualTetEPLRVal Value for TETRA EPLR element check REAL8Pref_ElemQualTetDetJ If True, TETRA DETJ element check is on BOOLPref_ElemQualTetDetJVal Value fo r TETRA DETJ element check REAL8
Pref_ElemQualTetEPIA If True, TETRA EPIA element check is on BOOLPref_ElemQualTetEPIA Val Value for TETRA EPIA element check REAL8Pref_ElemQualHexAspectRatio If True, HEX AR element check is on BOOLPref_ElemQualHexAspectRatioVal Value for HEX AR element check REAL8Pref_ElemQualHexEPLR If True, HEX EPLR element check is on BOOLPref_ElemQualHexEPLRVal Value for HEX EPLR element check REAL8Pref_ElemQualHexDetJ If True, HEX DETJ element check is on BOOLPref_ElemQualHexDetJVal Value for HEX DETJ element check REAL8Pref_ElemQualHexEPIA If True, HEX EPIA element check is on BOOLPref_ElemQualHexEPIA Val Value for HEX EPIA element check REAL8Pref_ElemQualHexWarp If True, HEX WARP element check is on BOOLPref_ElemQualHexWarpVal Value for HEX WARP element check REAL8Pref_ElemQualPenAspectRatio If True, PENTA AR element check is on BOOL
Pref_ElemQualPenAspectRatioVal Valu e for PENTA AR element check REAL8
Pref_ElemQualPenEPLR If True, PENTA EPLR element check is on BOOLPref_ElemQualPenEPLRVal Value for PENTA EPLR element check REAL8Pref_ElemQualPenDetJ If True, PENTA DETJ element check is on BOOLPref_ElemQualPenDetJVal Value for PENTA DETJ element check REAL8Pref_ElemQualPenEPIA If True, PENTA EPIA element check is on BOOLGeometry/Model Preference Properties
Property Description Type
 API-146  
Pref_ElemQualPenEPIA Val Value for PENTA EPIA element check REAL8
Pref_ElemQualPenWarp If True, PENTA WARP element check is on BOOLPref_ElemQualPenWarpVal Value for PENTA WARP element check REAL8Pref_ElemQualPyrAspectRatio If True, PYR AR element check is on BOOLPref_ElemQualPyrAspectRatioVal Value for PYR AR element check REAL8Pref_ElemQualPyrEPLR If True, PYR EPLR element check is on BOOLPref_ElemQualPyrEPLRVal Value for PYR EPLR element check REAL8Pref_ElemQualPyrDetJ If True, PYR DETJ element check is on BOOLPref_ElemQualPyrDetJVal Value for PYR DETJ element check REAL8Pref_ElemQualPyrEPIA If True, PYR EPIA element check is on BOOLPref_ElemQualPyrEPIA Val Value for PYR EPIA element check REAL8Pref_ElemQualPyrWarp If True, PYR WARP element check is on BOOLPref_ElemQualPyrWarpVal Value for PYR WARP element check REAL8Output Orientation button
Pref_OrientSolidIsoOutputDefines raw orientation of isotropic material solid 
element output vector data
0 = Material Direction
1 = Global Rectangular3 = ElementINT4
Pref_OrientSolidAnisoOutputDefines raw orientation of anisotropic material solid 
element output vector data
0 = Material Direction1 = Global Rectangular
3 = ElementINT4
Pref_OrientSolidHyperOutputDefines raw orientation of hyperelastic material 
solid element output vector data0 = Material Direction
1 = Global Rectangular
3 = ElementINT4
Pref_OrientTria3StressOutputDefines raw orientation of Tria3 stress output vector 
data
0 = First Edge
1 = Midside Location3 = Material DirectionINT4Geometry/Model Preference Properties
Property Description Type
   API-147
Pref_OrientTria3StrainOutputDefines raw orientation of Tria3 strain output vector 
data
0 = First Edge1 = Midside Location
3 = Material DirectionINT4
Pref_OrientTria3ForceOutputDefines raw orientation of Tria3 force output vector 
data0 = First Edge
1 = Midside Location
3 = Material DirectionINT4
Pref_OrientTria6StressOutputDefines raw orientation of Tria6 stress output vector 
data
0 = First Edge
1 = Midside Location3 = Material DirectionINT4
Pref_OrientTria6StrainOutputDefines raw orientation of Tria6 strain output vector 
data
0 = First Edge
1 = Midside Location3 = Material DirectionINT4
Pref_OrientTria6ForceOutputDefines raw orientation of Tria6 force output vector 
data
0 = First Edge1 = Midside Location
3 = Material DirectionINT4
Pref_OrientQuad4StressOutputDefines raw orientation of Quad4 stress output vec-
tor data0 = First Edge
1 = Midside Location
2 = Diagonal Bisector3 = Material DirectionINT4
Pref_OrientQuad4StrainOutputDefines raw orientation of Quad4 strain output vec-
tor data
0 = First Edge1 = Midside Location
2 = Diagonal Bisector
3 = Material DirectionINT4Geometry/Model Preference Properties
Property Description Type
 API-148  
Pref_OrientQuad4ForceOutputDefines raw orientation of Quad4 force output vec-
tor data
0 = First Edge1 = Midside Location
2 = Diagonal Bisector
3 = Material DirectionINT4
Pref_OrientQuad8StressOutputDefines raw orientation of Quad8 stress output vec-
tor data
0 = First Edge
1 = Midside Location2 = Diagonal Bisector
3 = Material DirectionINT4
Pref_OrientQuad8StrainOutputDefines raw orientation of Quad8 strain output vec-
tor data0 = First Edge1 = Midside Location
2 = Diagonal Bisector
3 = Material DirectionINT4
Pref_OrientQuad8ForceOutputDefines raw orientation of Quad8 force output vec-
tor data
0 = First Edge
1 = Midside Location2 = Diagonal Bisector
3 = Material DirectionINT4Geometry/Model Preference Properties
Property Description Type
Interfaces Preference Properties   API-149
3.3.1.10  File, Preferences - Interfaces tab
These Global Properties are used to set the options on the Interfaces  tab of the Preferences  dialog 
box:
Interfaces Preference Properties
Property Description Type
Interface options

 API-150  
Pref_AnalysisProgDefault analysis program Interface. It is easiest to 
use the FTR_ enums to sel ect a default solver.INT4
Pref_AnalysisType Default Analysis Type. INT4
Pref_NeutralVersionNeutral file version number when writing Neutral 
files for third party analysis programs.REAL8
Pref_InterfaceStyleDefault user Interface Style: 0=Structural, 1=Ther-
mal, 2=Adv. Thermal.INT4
Pref_UseOldAnalysisInterfacesIf True, older, unsupported analysis program inter-
faces will still be available.BOOL
Pref_NeutralDigitsNumber of significant dig its for real numbers in 
Neutral files. As of FEMA P 11.4, this item has been 
removed from the User Interface and should only 
be used if a specific number of digits is required.INT4
Analysis Filtering Options
Pref_Filter_AnalysisIf True, the Enable Analysis Filtering option is 
enabled.BOOL
Pref_Filter_SC_Nastran_LinearIf True, the Linear option under Simcenter Nastran 
in the Select Solvers to F ilter dialog box is enabled.BOOL
Pref_Filter_SC_Nastran_MSNLIf True, the Mutistep Structural option under 
Simcenter Nastran in the Select Solvers to Filter 
dialog box is enabled.BOOL
Pref_Filter_SC_Nastran_MSNLKIf True, the Multistep Kinematic option under 
Simcenter Nastran in the Select Solvers to Filter dialog box is enabled.BOOL
Pref_Filter_SC_Nastran_ADVNLIf True, the Advanced Nonlinear option under 
Simcenter Nastran in the Select Solvers to Filter 
dialog box is enabled.BOOL
Pref_Filter_SC_Nastran_ADVNLEIf True, the Explicit option under Simcenter Nas-
tran in the Select Solvers to Filter dialog box is 
enabled.BOOL
Pref_Filter_MSC_NastranIf True, the MSC Nastran option in the Select Solv-
ers to Filter dialog box is enabled.BOOL
Pref_Filter_Autodesk_NastranIf True, the Autodesk Nastran option in the Select 
Solvers to Filter dialog box is enabled.BOOL
Pref_Filter_DYNAIf True, the LS-DYNA option in the Select Solvers 
to Filter dialog box is enabled.BOOLInterfaces Preference Properties
Property Description Type
   API-151
Pref_Filter_ABAQUSIf True, the ABAQUS option in the Select Solvers 
to Filter dialog box is enabled.BOOL
Pref_Filter_ANSYSIf True, the ANSYS option in the Select Solvers to 
Filter dialog box is enabled.BOOL
Pref_Filter_SINDAIf True, the SINDA option in the Select Solvers to 
Filter dialog box is enabled.BOOL
Pref_Filter_MARCIf True, the MARC option in the Select Solvers to 
Filter dialog box is enabled.BOOL
Analysis Monitor Options
Pref_AnalysisMonAutoLoadIf True, will automatically load results when using 
the Analysis MonitorBOOL
Pref_AnalysisMonMaxLinesDefault Max number of line s to include in the Anal-
ysis MonitorINT4
File Reference OptionsPref_FileRefCheckIf True, checks file refere nces when the model is 
openedBOOL
Pref_FileRefGeometryIf True, creates geometry references when files are 
readBOOL
Pref_FileRefModelIf True, creates analysis model references when 
files are readBOOL
Pref_FileRefResultsIf True, creates results file references when files are 
read.BOOL
General Solver Options
Pref_UseVisQFor an integerated solver, turning this on will start 
the solver with VisQ (if it is available). When on, 
the default option for Solv e Using is set to VisQ 
when creating a new analysis set.BOOL
Pref_WriteCommentsIf True, comments will NOT be written to NAS-
TRAN. This can get around some character set 
issues in entity titles.BOOL
Pref_EnableLegacyAnsysInterfaceIf True, the Analysis Set Manager will use the dia-
log boxes and translator for ANSYS from versions 
of FEMAP prior to version 12.BOOL
Nastran OptionsInterfaces Preference Properties
Property Description Type
 API-152  
Pref_UseMSCNastran2004If True, enables the MSC.Nastran 2004 interface 
optionsBOOL
Pref_ImproveSinglePrecisionIf True, FEMAP writes real numbers to Nastran 
files using a nonstandard exponential format that improves precision.BOOL
Pref_NasAlternateContinueIf True FEMAP will write an alternate line continu-
ation using “+”BOOL
Pref_NastranMemory Amount of memory specified for Nastran solver INT4
Pref_NastranScratchLocationSpecifies option for Scratch Directory. 0 = Nastran 
Default, 1 = FEMAP Scratch, and 2 = Output DirectoryINT4
Pref_NasDballScratchIf True Femap will use the dbs command line to 
specify a alternate location for user database files. BOOL
Pref_NastranOutputToLocation of Nastran Output Files (0=Current Direc-
tory, 1=Model File Directory, 2=Specified Direc-
tory)INT4
Pref_NastranOutputPathName/path of specified Output Directory for Nas-
tran solver outputSTRING
Pref_NXNastEntLicenseServerUsed to specify a license server if using an enter-
prise version of NX Nastran. Simply enter the “@” 
symbol followed by the name of the license server (i.e., @Nastran_Server_Name)STRING
Pref_NastranWriteAllLdbcSetsDefault for Analysis Set to write all Static Loads/
Boundary conditions.BOOL
Pref_ReadCommentsIf True, an attempt will be made to read NASTRAN 
comment cards as entity titles.BOOL
Pref_DeleteRdScratchLdSetsIf True, FEMAP will delete “Synthetic” load sets 
that it creates during reading of NASTRAN LOAD 
cards.BOOL
Pref_GroupIncludeFilesIf True, FEMAP will create groups based on enti-
ties  in INCLUDE files found in a Nastran input file.BOOL
Pref_PreserveIncludesIf True, then Nastran INCLUDE statements are 
read as Bulk Data text ra ther than reading their con-
tents into the modelBOOL
ABAQUS OptionsInterfaces Preference Properties
Property Description Type
   API-153
Pref_Abaqus_PreserveCompressed-
LoadsIf True, loads and boundary conditions which are 
defined with *SET(s) in th e ABAQUS input file are 
used to automatically create Load Definition(s) and Constraint Definition(s) during importBOOLInterfaces Preference Properties
Property Description Type
 API-154  
3.3.1.11  File, Preferences - Results tab
These Global Properties are used to set the options on the Results  tab of the Preferences  dialog 
box:

Results Preference Properties   API-155
Results Preference Properties
Property Description Type
File Options
Pref_AutoAttachResultsIf True, FEMAP will automatically attach to 
external results files rather  than reading the results 
into the database.BOOL
Pref_MemoryMappedFilesIf True, when attaching to external results files, 
memory mapped files will be utilized.BOOL
Pref_AutoConvertOdbIf True, when attaching to an ODB results file, the 
database will be up dated automaticallyBOOL
Pref_CreateResultStudyIf True, an analysis study will be created for each 
imported or attach ed output file. BOOL
Pref_ResultStudyTitleSpecifies option for Study Titles. 0=Default, 
1=Analysis Set Title, 2=File Name, 3=Nastran TITLEINT4
Nastran OptionsPref_OutputSetTitlesUsed by the Nastran OP2 file reader to set Output 
Set titles. 0=Default, 1=TITLE, 2=SUBTITLE, 
3=LABEL, 4=SUBTITLE, LABELINT4
Pref_UseSubcaseIDForOutputIf True, an attempt will be made to match the 
FEMAP Output Set ID to the Nastran Subcase IDBOOL
Pref_NasResTrackRevisionIf True, any output set with the same Subcase ID 
(Case ID) as an existing output set will be given a 
revision number.BOOL
Pref_StudyAppendFemapTitlesIf True, each output set title will be appended with 
any value associated with the output set, such as time or frequency.BOOL
Pref_SkipDMIGEntriesIf True, DMIG entries will be skipped when read-
ing input files.BOOL
General Solver Options
Pref_ComputePrincipalIf True, FEMAP automatically Computes Princi-
pal Stress/Strain and other quantities if they have not been read from results.BOOL
Pref_ComputeAverageMidResultsIf True, FEMAP automatically Computes average 
results values from top and bottom results if they 
have not been read from results.BOOL
 API-156  
Pref_AssumeEngrStrainIf True, FEMAP Assumes Shear Strain results are 
Engineering shear strain.BOOL
Pref_ReadDirCosIf True, FEMAP will read direction cosine matri-
ces for stress/strain results.BOOL
Freebody DefaultsPref_DefaultFreebodyReverseIf True, the Reverse Freebody Values option will 
be enabled for all new models.BOOL
Pref_FBDispModeSets default setting for Freebody Display Mode: 
0=Freebody 
(FBD_DISPLAYMODE_FREEBODY)1=Interface Load 
(FBD_DISPLAYMODE_INTERFACE) 
2=Section Cut (FBD_DISPLAYMODE_SECTION)INT4
Pref_FBDefContributions[0..7]
or VA R I A N T  
vPref_FBDefContributions [Sets defaults for Fr eebody Contributions:
0=Applied (FBL_APPLIED)
1=Reaction (FBL_SPC)
2=MultiPoint Reaction (FBL_MPC)3=Freebody Elements (FBL_EL_FB)
4=Peripheral Elements (FBL_EL_PER)
5=Nodal Summation (FBL_TOTAL)6=Contact (FBL_CONTACT)
7=Glue (FBL_GLUE)
True = contribution includedBOOL
Pref_FBDefNodalVectorMode[0..1]
or
V ARIANTvPref_FBDefNodalVectorModeSets defaults for Ve ctor Display (Nodal):
0=Nodal Forces
1=Nodal Moments
Set value to:
0=Off (FBD_VEC_MODE_OFF)1=Display Components 
(FBD_VEC_MODE_COMPONENT)
2=Display Resultant(FBD_VEC_MODE_RESULTANT)INT4Results Preference Properties
Property Description Type
   API-157
Pref_FBDefTotalVectorMode[0..1]
or
V ARIANTvPref_FBDefTotalVectorModeSets defaults for Vector Display (Total):
0=Total Forces
1=Total Moments
Set option:
0=Off (FBD_VEC_MODE_OFF)1=Display Components 
(FBD_VEC_MODE_COMPONENT)
2=Display Resultant(FBD_VEC_MODE_RESULTANT)INT4
Pref_FBDefComponents[0..5]
or 
V ARIANT vPref_FBDefComponentsSets defaults for Load Components in Total Sum-
mation:
0=Fx (FBC_FX)1=Fy (FBC_FY)
2=Fz (FBC_FZ)
3=Mx (FBC_MX)4=My (FBC_MY)5=Mz (FBC_MZ)
True = component includedBOOL
Auto Answer Post Questions
Pref_NasQstOn[0..5]
or
V ARIANT vPrefNasQstOnPref_NasQstOn enables Auto Answer for each 
question.
Questions:
0-Not Used, 1-Output Contains QUADR Ele-
ments, 
2-Output Contains Corner Output, 3-Read PSD/Freq Functions, 4-Read Corner Output, 5-Hide f06 
Warning dialog
Pref_NasQstVal sets the question answer.
Answers:
0 - No, 1 - YesBOOL
Pref_NasQstVal[0..5]
orV ARIANT vPrefNasQstValBOOLResults Preference Properties
Property Description Type
 API-158  
3.3.1.12  File, Preferences - Library/Startup tab
These Global Properties are used to set the options on the Library/Startup  tab of the Preferences  
dialog box:

Library/Startup Preference Properties   API-159
Library/Startup Pref erence Properties
Property Description Type
LibrariesPref_LibView Filename for View Library. STRINGPref_LibMatl Filename for Material Library. STRINGPref_LibProp Filename for Property Library. STRINGPref_LibLayup Filename for Layup Library STRINGPref_LibConnectionProp Filename for Connection Property Library STRING
Pref_LibFunction Filename for Function Library. STRINGPref_LibAnalysis Filename fo r Analysis Library. STRING
Pref_LibReport Filename for report Format Library. STRINGPref_LibChart Filename for Chart Library. STRINGLibrariesPref_SharedLibPath Directory Path for Shared Libraries STRINGOther LibrariesPref_LibMatlDef Filename for Material Definition Library. STRINGStartup Program File/Basic Script/Executable and Custom Tools
Pref_CustomToolsPathName/path of specified directory for Custom 
ToolsSTRING
Pref_UserToolsPath Name/path of specified directory for User Tools STRINGPref_StartupProgName/path of a startup program (Program File or 
API)STRING
Pref_RunProgNewModelsIf True, the startup program will be run every time 
a new model is opened.BOOL
 API-160  
3.3.1.13  File, Preferences - Color tab
These Global Properties are used  to set the options on the Color  tab of the Preferences  dialog box:

Color Preference Properties   API-161
Color Preference Properties
Property Description Type
Entity Colors
Pref_EntityColor[0..23]
or
V ARIANT vPref_EntityColorDefault colors used for various entity types when 
starting a new database.
0 - Coord Sys
1 - Point2 - Curve
3 - Surface, 
4 -V olume/Solid5 - Boundary
6 - Text
7 - Node8 - Element
9 - Material
10 - Property11 - Load12 - Nodal Constraint
13 - Constraint Eqn, 
14 - Region15 - Connector
16 - Connection Property
17 - Combined Curve18 - Aero Panel
19 - Aero Prop
20 - Aero Spline21 - Aero Control Surface
22 - Mesh Point
23 - Monitor PointINT4
Palettes (Blank for Standard)
Pref_LibPalette Filename for Color Palette Library. STRINGPref_LibContPal Filename for User Contour Palette Library. STRING
 API-162  
3.3.1.14  File, Preferences - Spaceball tab
These Global Properties are used to set the options on the Spaceball  tab of the Preferences  dialog 
box:

Spaceball Preference Properties   API-163
3.3.2  Global Integer PropertiesSpaceball Preference Properties
Property Description Type
Scale Factors
Pref_Spaceball Factors[6]
orV ARIANT vPref_SpaceballFactors Allows specification for each degree of freedom. 
[0] = Translation X
[1] = Translation Y
[2] = Translation Z[3] = Rotation X
[4] = Rotation Y
[5] = Rotation ZREAL8
Pref_SpaceballSensitivityUsed to set the Directional Sensitivity. Value must 
be between 0.0 and 100.0REAL8
Debug Options
Pref_SpaceballDebug When True, prints  debug messages for Spaceball BOOL
Global Integer Properties
Property Description
Window Handles
hMainWndThe handle to the FEMAP main window (read-only).  
NOTE: This is an 8-byte integer, not a 4-byte integer like 
most other properties.
hListWndThe handle to the FEMAP Messages and Lists window (read-
only).
NOTE: This is an 8-byte integer, not a 4-byte integer like 
most other properties.
Event Properties
EventLParamThe lParam value for the active even t. This is not used for many 
events, but can be accessed from any event callback.  
NOTE: This is an 8-byte integer, not a 4-byte integer like 
most other properties.
Deprecated API Warning
 API-164  Global Integer Properties
Pref_API_WarningLevelThe warning level for deprecated API properties and methods. 
0 = APIWARN_EVERY , 1 = API_ONCEPERITEM, 2 = API-
WARN_ONCEPERSESSION3 = APIWARN_NEVER. This works in conjunctions with Pref_API_WarningInDialog Bool-
ean. 
File Print
Print_CopiesNumber of copies to print (only works with printers that sup-
port setting a number of copies).
Message Window
List_DestinationA combination of one or more destinations (Screen, Printer, 
File) where listings are sent. 1=Messages Window only, 
16=Printer only, 256=File only, 17=Messages Window and 
Printer, 257=Messages Window and File, 272=Printer and File, 273=Messages Window, Printer, and File.(INT4)
List_FileNameThe path to a file to use for lis ting when the File destination is 
chosen.(STRING)
Model Info
Info_CommandNumberThe number of commands that have been performed in this 
database (read-only).
Info_MaxID[entity]
orV ARIANT vInfo_MaxIDThe maximum ID of the selecte d entity (read-only). For infor-
mation on entities, see Section 3.3.6, "Entity Types".
Info_MinID[entity]
or
V ARIANT vInfo_MinIDThe minimum ID of th e selected entity (read-only). For infor-
mation on entities, see Section 3.3.6, "Entity Types". 
Info_Increment[entity]
or
V ARIANT vInfo_IncrementThe ID creation increment for th e selected entity. For informa-
tion on entities, see Sectio n 3.3.6, "Entity Types".
Info_Count[entity]
orV ARIANT vInfo_CountThe number of selected entities in the database (read-only). For 
information on entities, see Sec tion 3.3.6, "Entity Types".
Info_NextID[entity]
or
V ARIANT vInfo_NextIDThe ID of the next entity of a given type to be created.
Info_ActiveID[entity]
or
V ARIANT vInfo_ActiveIDThe Active ID of the selected en tity.  For information on enti-
ties, see Section 3.3.6, "Entity Types".Global Integer Properties
Property Description
Global Integer Properties   API-165
Info_ActiveType[entity]
or
V ARIANT vInfo_ActiveTypeThe Active Type of the selected entity.  For information on enti-
ties, see Section 3.3.6, "Entity Types".
Info_Color[entity]
or
V ARIANT vInfo_ColorThe default color for the selec ted entity. For information on 
entities, see Section 3.3.6, "Entity Types".
Info_OutputCSys The default output coordinate system for node creation.
Info_NodeTypeThe default node type for node creation: 0=Node, 1=Scalar, 
2=Extra.
Info_TextBorderColor The defau lt color for the border of te xt objects that are created.
Info_WorkplaneOnSurfaceThe surface ID where the workplane is located. The value is 0 if 
the workplane is simply located somewhere in model space.
Info_WorkplaneOnSurfacePrev The previo us value of Info_WorkplaneOnSurface.
Info_SnapToCurrent snap mode: 0=Screen , 1=Grid, 2=Point, 3=Node, 
4=Smart.
Info_SnapStyle The snap grid style: 0=Invisible, 1=Dots, 2=Lines.
Info_SnapSpacingModeThe snap grid spacing mode: 0=Automatic, 1=Uniform, 
2=Nonuniform.
Info_WorkplaneTicsThe number of divisions between labels along the workplane 
rulers.
Info_MatlAngleMethodSets the method for defining ma terial angles for planar ele-
ments: 0=None - Default Orientation, 1=Vector Direction, 
2=Coordinate Axis, 3=Angle Value, 4=X Axis of CSys
Info_MatlAngleDirSets the direction (0=X, 1=Y , 2=Z, 3=-X, 4=-Y , 5=-Z) in the 
specified coordinate system to be  used for material angles. Only 
used if Info_MatlAngle Method=Coordinate Axis.
Info_MatlAngleCSysSets the coordinate system ID to  be used for the definition of 
material angles for planar elements if InfoMatlAngle-
Method=Coordinate Direction or X Axis of CSys.
Info_MeshSizeMinElemSets the default for the minimu m number of elements on any 
curves where a mesh size has not been explic itly specified. 
From Mesh, Mesh Control, Default Size command.
Info_SurfDivisi onsLinear[0..1]
orV ARIANT vInfo_SurfDivisionsLin-
earSets the default number of divisions to be displayed in the para-
metric directions of surfaces along linear edges:  0=s dir, 1=t dirGlobal Integer Properties
Property Description
 API-166  Global Integer Properties
Info_SurfDivisionsCurved[0..1]
or
V ARIANT vInfo_SurfDivisions-
CurvedSets the default number of divisions to be displayed in the para-
metric directions of surfaces al ong curved edges. Unlike linear 
edges, which specify the total numb er of divisions, this number 
is the total to be displayed fo r a closed surface. The actual num-
ber displayed depends on the total curvature of the surface.
Info_ViewShowColor The color to be used by the View, Show  command.
Info_ViewShowEntityThe default type of entity  to be shown by the View, Show  com-
mand.
Info_ViewShowLabelIf nonzero, the View, Show  command will label all selected enti-
ties.
Info_GroupAutomaticAddControls the setting of the Group, Automatic Add comman:  
0=Off, -1=Active Group, or specify an existing group ID to 
automatically add to that group.
Info_SplineOrderThe default order of splines created with the standard geometry 
engine.
Info_LayerNoPick Specifies the ID of the NoPick Layer. Set to 0 for None.Info_MatlUserType The default type of u ser-defined material to be created.
Info_ElemFormulation1[0..34]
or
V ARIANT vInfo_ElemFormulation1The formulation options which are available for the various 
types of elements. Data is stored as bits inside these values.Info_ElemFormulation2[0..34]
orV ARIANT vInfo_ElemFormulation2
Info_SuppressedCurveColor The color used to draw curves that are suppressed for meshing
Info_SuppressedSurfaceColor The color used to draw surfaces that are suppressed for meshing
User Interface
Info_OrientSolidIsoOutputDefines raw orientation of isotro pic material solid element out-
put vector data
0 = Material Direction1 = Global Rectangular
3 = Element
Info_OrientSolidAnisoOutputDefines raw orientation of anis otropic material solid element 
output vector data0 = Material Direction
1 = Global Rectangular
3 = ElementGlobal Integer Properties
Property Description
Global Integer Properties   API-167
Info_OrientSolidHyperOutputDefines raw orientation of hypere lastic material solid element 
output vector data
0 = Material Direction1 = Global Rectangular
3 = Element
Info_OrientTria3StressOutputDefines raw orientation of Tria3 stress output vector data
0 = First Edge1 = Midside Location
3 = Material Direction
Info_OrientTria3StrainOutputDefines raw orientation of Tria3 strain output vector data
0 = First Edge1 = Midside Location
3 = Material Direction
Info_OrientTria3ForceOutputDefines raw orientation of Tria3 force output vector data
0 = First Edge1 = Midside Location3 = Material Direction
Info_OrientTria6StressOutputDefines raw orientation of Tria6 stress output vector data
0 = First Edge
1 = Midside Location3 = Material Direction
Info_OrientTria6StrainOutputDefines raw orientation of Tria6 strain output vector data
0 = First Edge
1 = Midside Location3 = Material Direction
Info_OrientTria6ForceOutputDefines raw orientation of Tria6 force output vector data
0 = First Edge
1 = Midside Location3 = Material Direction
Info_OrientQuad4StressOutputDefines raw orientation of Quad4 stress output vector data
0 = First Edge
1 = Midside Location2 = Diagonal Bisector
3 = Material Direction
Info_OrientQuad4StrainOutputDefines raw orientation of Quad4 strain output vector data
0 = First Edge1 = Midside Location
2 = Diagonal Bisector
3 = Material DirectionGlobal Integer Properties
Property Description
 API-168  Global Integer Properties
Info_OrientQuad4ForceOutputDefines raw orientation of Quad4 force output vector data
0 = First Edge
1 = Midside Location2 = Diagonal Bisector
3 = Material Direction
Info_OrientQuad8StressOutputDefines raw orientation of Quad8 stress output vector data
0 = First Edge1 = Midside Location
2 = Diagonal Bisector
3 = Material Direction
Info_OrientQuad8StrainOutputDefines raw orientation of Quad8 strain output vector data
0 = First Edge
1 = Midside Location
2 = Diagonal Bisector3 = Material Direction
Info_OrientQuad8ForceOutputDefines raw orientation of Quad8 force output vector data
0 = First Edge
1 = Midside Location
2 = Diagonal Bisector3 = Material Direction
User Interface - Other Items
DialogAutoAnswerWhen you are running FEMAP in hidden mode (user interface 
not visible), then you may not want dialog or message boxes 
popping up. Set this option to control the automatic return 
codes from boxes in this cond ition. 0=No/Cancel, 1=Yes/OK, 
2=Show dialog/message boxes even  though main user interface 
is hidden
DialogAutoSkipSame as DialogAutoAnswer, but works even if the user inter-
face is not hidden
DialogAutoSkipMsgAutomatically “answers” any messages that are displayed while 
an API is running. The value specifies the answer that is 
selected.0=Display Message Box and wait for user answer
1=Press First Button
2=Press Second Button3=Press Third Button
-1, -2 and -3 are the same as 1, 2,3 except that the message is not 
echoed to the Message Window.
CoordDialogMethodThe current method used by the standard coordinate dialog box. 
Refer to “Coordinate Dialog Me thods” for poss ible values.Global Integer Properties
Property Description
Global Integer Properties   API-169
VectorDialogMethodThe current method used by the standard vector dialog box. 
Refer to “Vector Dialog Methods” for possible values.
PlaneDialogMethodThe current method used by the standard plane dialog box. 
Refer to “Plane Dialog Methods” for possible values.
PickBoundaryInternalModeThe current mode of the Combined/Boundary Surface Picking 
option
0=Default, Pick Combined Su rfaces, no Internal Surfaces
1=Pick Both Combined and Internal Surfaces2=Pick Only Internal Surfaces
3=Pick Only Combined Surfaces
PickCombinedCurveInternalModeThe current mode of the Combined Curve Picking Option
0=Default, Pick Combined Curves, no Internal Curves
1=Pick Both Combined  and Internal Curves
2=Pick Only Internal Curves
3=Pick Only Combined Curves4=Never Pick Combined Curves5=Never Pick Combined nor Internal Curves
Mesh Propagation Defaults
Info_MeshSizePropagation_SelModeDefault Mode for option in Limit Selection section of the Mesh 
Size Propagation Options dialog box
0=All Solids / Surfaces (MSPS_ALL)1=Meshed Solids/Surfaces Only (MSPS_MESHED)
Info_MeshSizePropagation_EdgeOp-
tionDefault Mode for option in Limit Selection section of the Mesh 
Size Propagation Options dialog box
0=None (MSPE_OFF)1=Free Surface Edges Only (MSPE_FREEONLY)
2=Free Surface Edges and Other Edges (MSPE_FREEPLUS)
3=All Edges (MSPE_ALL)
Complex Results - Model Options
Info_ComplexSyncMethodSets the option in Model Op tions of Complex Results, 
0=Selected Results - Ignore Phase Differences, 1=Synchronize 
Phase. Used in conjunction w ith Info_ComplexSyncPhase and 
Info_ComplexSyncIncrementGlobal Integer Properties
Property Description
 API-170  Global Real Properties
3.3.3  Global Real Properties
Global Real Properties
Property Description
Model and Session
ModelMigratedFromVersionVersion of FEMAP the current model was migrated from by auto-
matic neutral file conversion  during File, Open (read-only)
Model Info
Info_VersionThe current database version. This may not equal the software 
version - for example, FEMAP v10.1.1 uses a v10.1 database. 
(read-only).
Info_WorkplaneOrigin[0..2]
orV ARIANT vInfo_WorkplaneOri-
ginThe coordinates of the origin of  the workplane. Specified in 
global rectangular model coordinates.
Info_WorkplaneX[0..2]
or
V ARIANT vInfo_WorkplaneX
The direction cosines of the wo rkplane axes. Like the origin, 
these are specified in global rectangular model coordinates.Info_WorkplaneY[0..2]
or
V ARIANT vInfo_WorkplaneY
Info_WorkplaneZ[0..2]
orV ARIANT vInfo_WorkplaneZ
Info_WorkplanePrevOrigin [0..2]
or
V ARIANT vInfo_WorkplanePrev-OriginThe coordinates of the previous origin of the workplane. These 
are saved values of Info_WorkplaneOrigin, used by the Previous 
Workplane command.
Info_WorkplanePrevX[0..2]
or
V ARIANT vInfo_Workplane-PrevX
The direction cosines of the wo rkplane axes. Like the origin, 
these are specified in global rectangular model coordinates.Info_WorkplanePrevY[0..2]
or
V ARIANT vInfo_Workplane-PrevY
Info_WorkplanePrevZ[0..2]
or
V ARIANT vInfo_Workplane-PrevZ
Global Real Properties   API-171
Info_SnapSpacing[0..1]
or
V ARIANT vInfo_SnapSpacingThe snap grid spacing X and Y values.
Info_WorkplaneSizeX[0..1]
or
V ARIANT vInfo_Workplane-
SizeXThe minimum and maximum dimensions of the workplane in the 
X and Y directions.Info_WorkplaneSizeY[0..1]
or
V ARIANT vInfo_Workplane-
SizeY
Info_WorkplaneLabels The length betw een labels on the workplane rulers.
Info_DefaultX
The default values for the coordinate dialog box. Stored in global 
rectangular model coordinates.Info_DefaultY
Info_DefaultZInfo_LineLength The default length used to  create horizontal and vertical lines.
Info_ModelSizeX[0..1]
orV ARIANT vInfo_ModelSizeX
The minimum and maximum coordinates of the current model in 
the corresponding global rectangular direction. These values are only valid if the “model box” has been computed and Info_Mod-
elNeedBox is False (read_only).Info_ModelSizeY[0..1]
or
V ARIANT vInfo_ModelSizeY
Info_ModelSizeZ[0..1]
or
V ARIANT vInfo_ModelSizeZ
Info_MatlAngleVec[0..2]
orV ARIANT vInfo_MatlAngleVecThe vector to be used for definitio n of material angles for planar 
elements (only used if In fo_MatlAngleMethod=Vector).
Info_MatlAngleSets the angle to be used for th e definition of material angles for 
planar elements when In foMatlAngleMethod=Angle.
Info_MeshSizeDefaultThe default mesh size for geomet ry where mesh sizes have not 
been explicitly defined. From Mesh, Mesh Control, Default Size  
command.
Info_GeometryScaleSolid geometry scale factor. This is copied from Pref_Geometry-
Scale when a model is started, and is used to make sure that solid 
geometry fits inside the limited  coordinate space allowed by the 
solid modeling engines (read-only).Global Real Properties
Property Description
 API-172  Global Boolean Properties
3.3.4  Global Boolean PropertiesInfo_FacetAngleTolerance
Factors used for Curve Facettin g - found in Tools Parameters Info_FacetChordTolerance
Info_FacetCurveFactorTools
Tool_MergeToleranceThe default coincident location merge tolerance for the model. 
Only used if Tool_MergeToleranceAuto is False
Mesh Propagation Defaults
Info_MeshSizePropagation_Toler-
anceSpecifies a default value for Tole rance when Specified option is 
selected in the Edge Pairing Tolerance section of the Mesh Size Propagation Options dialog box . Used in conjunction with 
Info_MeshSizePropagation_UseTolerance.
Complex Results - Model Options
Info_ComplexSyncPhase Specifies value fo r Display Phase Angle in Model Options 
Info_ComplexSyncIncrem ent Specifies value for Animation Phase Increment in Model Options
Global Boolean Properties
Property Description
Deprecated API Warning
Pref_API_WarningInDialogControls whether the deprecat ed API warning dialog will 
appear when using deprecated API properties and methods. If True, this works in conjunc tion with Pref_API_Warning-
Level. 
File Preferences
Pref_CompressBitmapsControls whether Windows Bitmaps will be compressed 
during Picture Save
Model and Session
ModelFromPreviousVersionIf True, current model was migr ated from a previous version 
into the version currently in u se via automatic neutral file con-
version invoked by the File, Open command (read-only)
Model InfoGlobal Real Properties
Property Description
Global Boolean Properties   API-173
Info_PermBC[0..5]
or
V ARIANT vInfo_PermBCThe default permanent boundary  conditions for node creation.
Info_WorkplaneModelAdjustAutomatically adjust the size of  the workplane to the model 
size.
Info_WorkplaneSurfaceAdjustAutomatically adjust the size of  the workplane to the size of 
any surface where it is located.
Info_WorkplaneRuler[0..1]
orV ARIANT vInfo_WorkplaneRulerIf True, draws the workplane X and Y rulers  respectively.
Info_SnapFullPrecisionControls whether coordinates or equations functions are 
loaded into the dialog boxes when a user picks coordinates.
Info_SnapCoordOnlyIf True, the snap mode will only  be used duri ng coordinate 
picking.
Info_ModelNeedBoxIf True the model box has been computed, otherwise the box 
coordinates are not valid.
Info_UpdateAllViews The current setting of the View, All Views  command.
Info_TranslateNotesIf True, the Notes translation text will be written during a 
model export.
Info_ViewShowEraseIf True, the View, Show  command will erase the window 
before showing entities.
Info_ViewShowUseColorIf True, View, Show  will use the color specified by Info_View-
ShowColor, otherwise ent ity colors will be used.
Info_ViewShowNormalIf True, the View, Show  command will show element normal 
vectors when highlighting
Info_ViewShowTranparentIf True, the View, Show  command makes the model transpar-
ent when highlighting
Info_ViewShowAutoscaleIf True, the View, Show  command “autoscales” to “zoom in” 
to the entities when highlighting
Info_MeshSizeAutoDefaultIf True, default mesh sizing w ill be automatically calculated 
when it is used
Info_FreebodyReverseIf True, the Reverse Freebody Values  option in the Freebody 
Tool of the PostProcessing Toolbox  is enabled.
GeometryGlobal Boolean Properties
Property Description
 API-174  Global Boolean Properties
(Do Not Use) SolidAllowNonMani-
foldIf True, allows other Solid Mode ling APIs to work with/create 
nonmanifold bodies (i.e., when “Ok to create nonmanifold 
geometry?” appears because of a Solid Modeling command, setting SolidAllowNonManifold to  True answers that question 
Yes, False answers that question No).
ToolsTool_CursorXYZ[0..2]
orV ARIANT vTool_CursorXYZIf True, the corresponding coordinate direction will be picked 
whenever you select a coordinate with the mouse. Automati-cally updated with every pick.
Tool_CursorSingleIf True, each cursor pick selects and updates only a single 
coordinate value.
Tool_MergeToleranceAutoIf True, the merge tolerance is automatically calculated, if 
False, then Tool_MergeTolerance is used.
UndoGrayedIf True, the Tools, Undo command is not available for selec-
tion. Set to False to enable the Tools, Undo command again.
Mesh Propagation Defaults
Info_MeshSizePropagation_OnIf True, the Propagate Sizing opt ion is enabled in all dialog 
boxes it exists and the Turn On /Off Mesh Sizing Propagation 
icon in the Mesh Control Expl orer will be enabled by default.
Info_MeshSizePropagation_Slaved-
MappedIf True, the Slaved and Mapped Surfaces option in the On Sol-
ids section of the Mesh Size Propagation Options dialog box will be enabled by default.
Info_MeshSizePropagation_Same-
SolidIf True, the Include Edges on Sa me Solid option in the Edges 
to Pair section of the Mesh Size Propagation Options dialog 
box will be enabled by default.
Info_MeshSizePropagation_UseToler-
anceIf True, the Specified option in  the Edge Pairing Tolerance 
section of the Mesh Size Propagation Options dialog box will 
be enabled by default.
User Interface - Other Items
PickVisibleOnlyIf True, the “Select Visible Only ” option will be enabled in the 
Pick^ menu of the standard selection dialog box. This also enables the “Select Visible Only” option on the Selector 
Actions menu of the Select toolbar.
SelectOutputSetsFromStudiesIf True, any dialog box which allows selection of Output Sets 
will display any existing Analys is Studies containing appro-
priate Output Sets under each St udy. Set to False to show all 
available Output Sets w ithout Analysis Studies.Global Boolean Properties
Property Description
Global String Properties   API-175
3.3.5  Global String PropertiesPref_API_UseAlternateFileDialog If True, uses the a lternate File Open dialog box to open files.
Pref_API_HonorWorkingDirectoryIf True, allows setting initial dir ectory when File Open dialog 
box is opened.
Global String Properties
Property Description
Initialization and Configuration File PathsInitializationPath Name/path for the femap.ini file.
ConfigurationPath Name/path for the config.ini file.
File Preferences
Pref_NetKeyDirName/path of network license file (only used when FlexLM net-
work licensing is in use).
Model and Session
ModelNameThe name of the current model f ile. This will be blank if the 
model has not yet b een saved (read-only)
ModelMigratedFromDBThe name of the original model file which went through neutral 
file conversation during the File , Open command and is now the 
current model (read-only)
ScratchNameThe name of the working scratch file (OEM character set) (read-
only)
FullScratchNameThe full path to the working sc ratch file (ANSI character set) 
(read-only)
ExePathThe path to the FEMAP executab le (without the filename) (read-
only)
SerialNumber The current FEMAP li cense serial number. (read_only)
Message Window
List_FileNameThe path to a file to use for list ing when the File  destination is 
chosen.Global Boolean Properties
Property Description
 API-176  Global String Properties
3.3.6  Entity Types
The following table list the values to  be used for each of the entity  types. These values are typi-
cally used as an index into on e of the global arrays such as Info_MaxID, Info_ActiveID...
Note: Some of the abbreviations for the entity type s are very obvious, while others are not. 
For more information about the entity types marked with a “*”, please see the expla-
nations after the table.  
Entity Type Numeric 
ValueEntity Type Numeric Value
FT_POINT 3 FT_MODEL_NOTES * 54FT_CURVE 4 FT_CONTACT * 58FT_SURFACE 5 FT_AMGR_DIR 60FT_VOLUME 6 FT_AMGR_CASE 61FT_NODE 7 FT_REFERENCE * 68FT_ELEM 8 FT_DATA_SURF 69
FT_CSYS 9 FT_CONNECTION 71
FT_MATL 10 FT_CONNECTION_PROP 72FT_PROP 11 FT_BC_DEFINITION * 80FT_LOAD_DIR * 12 FT_LAYUP 81FT_SURF_LOAD * 13 FT_LAYUP_PLY 82FT_GEOM_LOAD * 14 FT_LAYUP_GLOBALPLY 83FT_NTHERM_LOAD * 15 FT_BOLT_PRELOAD 84FT_ETHERM_LOAD * 16 FT_FREQUENCY* 88FT_BC_DIR * 17 FT_AERO_PANEL 95FT_BCO * 18 FT_AERO_PROP 96FT_BCO_GEOM * 19 FT_AERO_SPLINE 98FT_BEQ * 20 FT_AERO_SURF 99FT_TEXT 21 FT_FREEBODY 102FT_VIEW 22 FT_RES_ATTACH* 103FT_GROUP 24 FT_CHART 106FT_V AR * 27 FT_CHART_SERIES* 107FT_OUT_CASE * 28 FT_ANALYSIS_STUDY 113FT_OUT_DIR * 29 FT_TABLE_DATA* 124
Global String Properties   API-177
*FT_LOAD_DIR = FEMAP Load Set
FT_SURF_LOAD = Nodal or Elemental Nodes
FT_NTHERM_LOAD = Nodal Temperatures
FT_ETHERM_LOAD = Elem ental Temperatures
FT_BC_DIR = FEMAP Constraint Set
FT_BCO = Nodal Constraint
FT_BCO_GEOM = Constraint on geometric entityFT_BEQ = Constraint Equation
FT_V AR = FEMAP Variable (“Tools, Varibales”...command in FEMAP)
FT_OUT_CASE = FEMAP Output SetFT_OUT_DIR = Output Vector Header (includes Ou tput Vector ID, Title, Type - Nodal or Ele-
mental, Max and Min Values)
FT_OUT_DATA = Output Vector Data (Data at each node or element)
FT_REPORT = “List, Output” Format
FT_DESIGN_OPT = Design Optimization
FT_MODEL_NOTES = Notes saved in “File, Notes”FT_CONTACT = FEMAP Region 
FT_CONNECTION = FEMAP Connector (contact pair)
FT_REFERENCE = References sa ved in “File, References”
FT_BC_DEFINITION = FEMAP Constraint Definition.FT_OUT_DATA * 30 FT_VECTOR 132
FT_REPORT * 31 FT_PLANE 133FT_BOUNDARY 32 FT_DISCRETE_V ALUE_DIR 134FT_LAYER 33 FT_MESH_POINT_DEFINITION 136FT_FUNCTION_DIR 35 FT_MESH_POINT 137FT_FUNCTION_TABLE 36 FT_OPT_REL* 138FT_SOLID 39 FT_OPT_RESP* 140FT_COLOR 40 FT_OPT_MANCON* 146FT_OUT_CSYS 41 FT_MONITOR_POINT 149FT_DESIGN_OPT * 45 FT_MATRIX_INPUT* 150FT_LOAD _DEFINITION 46Entity Type Numeric 
ValueEntity Type Numeric Value
 API-178  Global String Properties
FT_FREQUENCY = Solution Freque ncies for Dynamic Analysis
FT_RES_ATTACH = Attached Results Files
FT_CHART_SERIES = Chart Data Series
FT_TABLE_DATA = Table entity created via Function/Table EditorFT_OPT_REL = Optimization Variable/Topology Region
FT_OPT_RESP = Optimization Limit
FT_OPT_MANCON = Topology Optimiz ation Manufacturing Constraint
FT_MATRIX_INPUT = Direct Matr ix Input (Simulation Entities)
TMG Objects
3.3.7  FEMAP Constants
The following tables list th e constants which can be used for each of the FEMAP Objects. These 
constants always begin with “F” then a two letter abbreviation of  the particular FEMAP Object 
where they can be used, followed by what the constant represents.
For Example, if you are looking for the Constant to use for a Ruled surface, then the constant 
would be FSU_RULED. In this case, SU represents  “Surface” and RULED represents the type of 
surface to create.
Model Merge Renumbering Methods
The following table lists constant s to used to set the renumber ing method for the Merge Tool.
Analysis Types
The following table lists constants to be used for Analysis Types.  Entity Type Numeric 
ValueEntity Type Numeric 
Value
FT_TMG_BCO 164 FT_TMG_REAL 167FT_TMG_CONTROL 165 FT_TMG_OPTION 168
FT_TMG_INTEGER 166FT_MESH_POINT_DEFINI-
TION
Constant Name Constant Name
FMRRNM_NONE FMRRNM_OFFSETFMRRNM_MINIMAL FMRRNM_COMPRESSFMRRNM_BLOCK
Constant Name Constant Name
FAT_UNKNOWN FAT_FATIGUEFAT_STATIC FAT_DATA_RECOVERY
Global String Properties   API-179
Analysis Manager Solvers
The following table lists constants to be used for Analysis Manager Solvers.
Analysis Manager So lve Using Options
The following table lists constants to be used fo r the Solve Using section of the Analysis Set dia-
log box in the Analysis Manager .FAT_MODES FAT_CFD 
FAT_TRANSIENT FAT_STEADY_STATE_HEATFAT_FREQUENCY_RESPONSE FAT_TRANSIENT_HEATFAT_RESPONSE_SPECTRUM FAT_601_STATICFAT_RANDOM FAT_601_TRANSIENTFAT_LINEAR_BUCKLING FAT_701_EXPLICITFAT_DESIGN_OPTIMIZATION FAT_LSDYNA_IMPLICITFAT_EXPLICIT FAT_AERO_FLUTTERFAT_NONLINEAR_STATIC FAT_MULTISTEP_NONLINEARFAT_AERO_STATIC FAT_MULTISTEP_KINEMATICFAT_NONLINEAR_BUCKLING FAT_IMPLICIT_NONLINEARFAT_NONLINEAR_TRANSIENT
Constant Name Constant Name
FAM_UNKNOWN FAM_MARCFAM_MSC_NASTRAN FAM_NE_NASTRANFAM_ANSYS FAM_FEMAP_STRUCTURALFAM_ABAQUS FAM_NX_NASTRAN
Constant Name Constant Name
FS_INTEGRATED FS_VISQFS_LINKED Constant Name Constant Name
 API-180  Global String Properties
Analysis Programs
The following table lists constants to  be used for Analysis Programs.   
Analysis Boundary Condition Set Types
The following table lists constants to be u sed for Analysis Boundary Condition Set Types.  Constant Name Constant Name
FAP_UNKNOWN FAP_CDA_SPRINT FAP_FEMAP_GEN FAP_CAEFEMFAP_PAL FAP_IDEASFAP_PAL2 FAP_ME_NASTRANFAP_MSC_NASTRAN FAP_ADINAFAP_ANSYS FAP_GENESISFAP_STARDYNE FAP_ODBCFAP_COSMOS FAP_CSA_NASTRANFAP_PATRAN FAP_CFDESIGN
FAP_NEUTRAL FAP_LS_DYNA
FAP_ALGOR FAP_MARCFAP_PC_NASTRAN FAP_SINDAFAP_TABLE FAP_NE_NASTRAN FAP_UAI_NASTRAN FAP_SATOOLKITFAP_COSMIC_NASTRAN FAP_TMGFAP_STAAD FAP_FEMAP_STRUCTURALFAP_ABAQUS FAP_VR_NASTRANFAP_WECAN FAP_NX_NASTRANFAP_SAP FAP_AP_SATOOLKIT
Constant Name Constant Name
FABT_CONSTRAINTS FABT_SUPORT1_DOFFABT_CONSTRAINT_EQUATIONS FABT_OMIT_DOFFABT_LOADS FABT_QSET_DOFFABT_INITIAL_CONDITIONS FABT_CSET_DOFFABT_MASTER_DOF FABT_BSET_DOF
Global String Properties   API-181
Analysis - Superelement Creation
The following table lists constants to  be used for Superelement Creation.
Analysis - Superelement Reference
The following table lists constants to be used for Superelement Reference
Analysis - Superelement Assign Form
The following table lists constants to be used  for the NasExtSEOutAssignForm property on the 
AnalysisMgr object
Analysis - Solution Frequency List Types
The following table lists constants used when speci fying the type of list when creating a list of 
solution frequencies.FABT_SUPORT_DOF FABT_BOLT_PRELOADS
Constant Name Constant Name
EXTSEOUTTO_DMIGPCH EXTSEOUTTO_MATOP4EXTSEOUTTO_DMIGOP2 
Constant Name Constant Name
SEREF_PCH SEREF_OP4SEREF_OP2
Constant Name Constant Name
AAF_NONE AAF_LITTLEENDIANAAF_FORMATTED AAF_BIGENDIANAAF_UNFORMATTED
Constant Name Constant Name
FREQ FREQ3
FREQ1  FREQ4
FREQ2 FREQ5Constant Name Constant Name
 API-182  Global String Properties
Analysis Output Requests
The following table lists constants to be used for Analysis Output Requests.   
Point Types
The following table lists constant s to be used for Point Types.   
Curve Types
The following table lists constant s to be used for Curve Types.   Constant Name Constant Name
FABC_ND_APPLIED LOAD FABC_EL_PLASTIC_STRAINFABC_ND_REACTION_FORCE FABC_EL_STRAIN_ENERGYFABC_ND_DISPLACEMENT FABC_EL_HEAT_FLUXFABC_ND_VELOCITY FABC_EL_ENTHALPYFABC_ND_ACCELERATION FABC_EL_ENTHALPY_RATEFABC_ND_TEMPERATURE FABC_EL_CONTACTFABC_ND_HEAT_FLUX FABC_EL_TEMPERATUREFABC_ND_MPC_FORCES FA BC_EL_KINETIC_ENERGY
FABC_ND_FORCE_BALANCE FABC_EL_ENERGY_LOSS
FABC_ND_KINETIC_ENERGY FABC_EL_FLUID PRESSURE
FABC_EL_FORCE FABC_EL_THERMAL_STRAINFABC_EL_STRESS FABC_EL_ELASTIC_STRAINFABC_EL_STRAIN
Constant Name Constant Name
FPT_DEFAULT FPT_SOLID
Constant Name Constant Name
FCU_LINE FCU_BSPLINEFCU_ARC FCU_SOLIDFCU_CIRCLE FCU_COMPOSITEFCU_SPLINE
Global String Properties   API-183
Curve Orient Methods
The following table lists constants to  be used for Curve Orient methods.   
Curve Offset Methods
The following table lists constants to  be used for Curve Offset methods.   
Curve - From Surface,  Pad Alignment Methods
The following table lists constants to be used to set the Alignment method for the Pad command
Curve - From Surface,  Pad Offset Types
The following table lists constants to be used  to set the Offset type for the Pad command  
Curve Project Onto Options
The following table lists constants to be used as Project Onto options with the Modify, Project 
commandsConstant Name Constant Name
FCR_BY_VECTOR FCR_BY_VECTOR_REVFCR_BY_LOCATION FCR_BY_LOCATION_REV
Constant Name Constant Name
FCO_BY_VECTOR FCO_POINTFCO_RADIAL
Constant Name Constant Name
FPAD_AUTO FPAD_CURVEFPAD_VECTOR
Constant Name Constant Name
FPAD_SCALE FPAD_DIST
Constant Name Constant Name
FPO_CURVE FPO_VECTORFPO_SURFACE FPO_PLANE
 API-184  Global String Properties
Curve Project Along Options
The following table lists constants to be used as Project Along options with the Modify, Project 
commands   
Curve Remove Options
The following table lists constants to be used as Project Along options with the Modify, Project 
commands   
Curve Manifold Types
The following table lists constants to be used wh en determining th e manifold type of a curve...
Combined Curve Methods
The following table lists constants to be used for Combined Curve methods.   
Surface Types
The following table lists constant s to be used for Surface Types.Constant Name Constant Name
FPA_CLOSEST FPA_RADIAL_VECTORFPA_VECTOR FPA_RADIAL_POINT
Constant Name Constant Name
FCRO_NORMAL FCRO_COMBINEFCRO_AGRESSIVE
Constant Name Constant Name
FCMT_UNKNOWN FCMT_MANIFOLDFCMT_WIREEDGE FCMT_NONMANIFOLDFCMT_FREEEDGE
Constant Name Constant Name
FCC_OFF FCC_BOTHFCC_ON
Constant Name Constant Name
FSU_BILINEAR FSU_BEZIERFSU_RULED FSU_SOLIDFSU_REVOLUTION FSU_BSPLINE
Global String Properties   API-185
Surface - Mesh Approaches
The following table lists constants to be used for Surface Mesh Apporaches.
Surface - Mesh Offset Attribute
The following table lists constants to be used for Surface Mesh Offset Attribute.
Surface - Triangle Mesher Attribute
The following table lists constants to be used  for Surface Mesh “Triangle Mesher” Attribute.
Solid - Alignment Options
The following table lists constants to be used  for alignment options for feSolidAlignSplits.   FSU_COONS FSU_BOUNDARY
Constant Name Constant Name
FMAP_NONE FMAP_MAP_4CORNERFMAP_FREE_PARAMETRIC FMAP_MAP_3CORNERFMAP_FREE_PLANAR FMAP_MAP_3CORNERFANFMAP_TRI_PARAMETRIC FMAP_MAP_LINKEDFMAP_TRI_PLANAR
Constant Name Constant Name
FMOF_CENTERLINE FMOF_BOTTOMFMOF_TOP
Constant Name Constant Name
FMSH_AUTO FMSH_FASTTRIFMSH_SUBDIVISION FMSH_3DTRI
Constant Name Constant Name
FSA V_VECAUTO FSA V_VECASKFSA V_VECINPUTConstant Name Constant Name
 API-186  Global String Properties
Solid - Tet Meshing Approach
The following table lists constants to be used for meshing approach op tion for feMeshTetSolid3.   
Volume Types
The following table lists constant s to be used for V olume Types.   
Node Types
The following table lists constant s to be used for Node Types.   
Material Types
The following table lists constants to be used for Material Types.   
Element Topology Types
The following table lists constants to be used for Element Topology Types.  Constant Name Constant Name
FTP_SURFACEONLY FTP_PYRFTP_TET
Constant Name Constant Name
FVO_BRICK FVO_PYRAMIDFVO_WEDGE FVO_TETRA
Constant Name Constant Name
FND_NODE FND_EPOINTFND_SPOINT FND_FLPOINT
Constant Name Constant Name
FMT_ISOTROPIC FMT_ANISOTROPIC_3D
FMT_ORTHOTROPIC_2D  FMT_HYPERELASTIC
FMT_ORTHOTROPIC_3D FMT_GENERAL
FMT_ANISOTROPIC_2D FMT_FLUID
Constant Name Constant Name
FTO_POINT1 FTO_WEDGE15FTO_LINE2 FTO_PYRAMID5FTO_LINE3 FTO_PYRAMID13
Global String Properties   API-187
Element Types
The following table lists constant s to be used for Element Types.   FTO_TRIA3 FTO_BRICK8
FTO_TRIA6 FTO_BRICK20FTO_QUAD4 FTO_MULTILIST2FTO_QUAD8 FTO_RIGIDLISTFTO_TETRA4 FTO_RIGIDLIST2FTO_TETRA10 FTO_CONTACT2FTO_WEDGE5 FTO_WELD2
Constant Name Constant Name
FET_NONE FET_L_PLANE_STRAINFET_L_ROD FET_P_PLANE_STRAIN FET_L_TUBE FET_L_AXISYM_SHELLFET_L_CURVED_TUBE FET_P_AXISYM_SHELLFET_L_BAR FET_L_PLOT_PLATEFET_L_BEAM FET_L_AXISYMFET_P_BEAM FET_P_AXISYMFET_L_LINK FET_L_SOLIDFET_L_CURVED_BEAM FET_P_SOLIDFET_L_SPRING FET_L_LAMINATE_SOLIDFET_L_DOF_SPRING FET_P_LAMINATE_SOLIDFET_L_GAP FET_L_COHESIVE_SOLIDFET_L_PLOT FET_P_COHESIVE_SOLIDFET_L_SHEAR FET_L_MASSFET_P_SHEAR FET_L_MASS_MATRIXFET_L_MEMBRANE FET_L_SPRING_TO_GROUNDFET_P_MEMBRANE FET_L_DOF_SPRING_TO_GROUNDFET_L_BENDING FET_L_RIGID FET_P_BENDING FET_L_STIFF_MATRIXConstant Name Constant Name
 API-188  Global String Properties
Beam Section Calculator Orientation
The following table lists constants used to set the orientation for the beam section calculator.
Beam Section Calculator Shape
The following table lists constants to be used to set the shape for the beam section calculator.   FET_L_PLATE FET_L_SLIDE_LINE
FET_P_PLATE FET_L_WELDFET_L_LAMINATE_PLATE FET_L_NASTRAN_MATRIXFET_P_LAMINATE_PLATE FET_L_CONTACT
Constant Name Constant Name
FSOR_RIGHT FSOR_LEFTFSOR_UP FSOR_DOWN
Constant Name Constant Name
FSHP_RECT_BAR FSHP_NAS_IFSHP_RECT_TUBE FSHP_NAS_CHANFSHP_TRAP_BAR FSHP_NAS_TFSHP_TRAP_TUBE FSHP_NAS_BOXFSHP_CIRC_BAR FSHP_NAS_BARFSHP_CIRC_TUBE FSHP_NAS_CROSS
FSHP_HEX_BAR FSHP_NAS_HFSHP_HEX_TUBE FSHP_NAS_T1FSHP_I FSHP_NAS_I1FSHP_C FSHP_NAS_CHAN1FSHP_L FSHP_NAS_ZFSHP_T FSHP_NAS_CHAN2FSHP_Z FSHP_NAS_T2FSHP_HAT FSHP_NAS_BOX1FSHP_NAS_ROD FSHP_NAS_HEXAFSHP_NAS_TUBE FSHP_NAS_HATConstant Name Constant Name
Global String Properties   API-189
Beam Section Evaluation Method
The following table lists constants used to set  the beam section calcu lator evaluation method.
Spring/Damper Element Orientation
The following table lists constants to be used for Spring/Damper Orientation options.  
Spring/Damper Element Offset
The following table lists constants to be  used for Spring/Damper Offset options.  
Modify Element Thickness/Offset - Updating
The following table lists constants to select what type of update will be performed by a feModify-
PlateThickOffset... call.  FSHP_NAS_L FSHP_NAS_HAT1
Constant Name Constant Name
FSEV_AUTO FSEV_ALTFSEV_ORIG FSEV_PBEAML
Constant Name Constant Name
FESO_NONE FESO_ELCIDFESO_NODE FESO_PRCIDFESO_VECTOR
Constant Name Constant Name
FESL_DEFAULT FESL_PRLOCFESL_ELLOC FESL_OFFSET
Constant Name Constant Name
FPTO_ELEM_THICKNESS FPTO_ELEM_OFFSETFPTO_PROP_THICKNESSConstant Name Constant Name
 API-190  Global String Properties
Modify Element Thickn ess/Offset - Method
The following table lists constants to select the me thod used to perform an update by a feModify-
PlateThickOffset... call.  
Coordinate System Types
The following table lists constants to be used for Coordinate System Types.   
Connection Region Types
The following table lists constants to be used for Connection Region Types.   
Connection Property Types
The following table lists constants to be used for Connec tion Property Types.   
Geometric Boundary Condition Types
The following table lists constants to be used for Geometric Bo undary Condition Types.   Constant Name Constant Name
FPTM_SETTOV ALUE FPTM_TOPTONODEFPTM_INCREMENT FPTM_BOTTOMTONODEFPTM_ADJUSTPCT
Constant Name Constant Name
FCS_RECTANGULAR FCS_SPHERICALFCS_CYLINRICAL
Constant Name Constant Name
FRT_CONNECTION FRT_ROTORFRT_FLUID FRT_NSMFRT_BOLT
Constant Name Constant Name
FCPT_CONTACT FCPT_GLUED
Constant Name Constant Name
FBG_DOF FBG_SURFNONSLIDINGFBG_GENERAL FBG_SURFDIRSLIDINGFBG_SURFSLIDING FBG_CYLINDER
Global String Properties   API-191
Load Direction Methods
The following table lists constants to be used for Load Direction Methods.   
Load Variation Methods
The following table lists constants to be used for Load Variation Methods.   
Load Types
The following table lists constants to be u sed for Nodal Load Types except for FLT_NBODY 
which represents a Body Load.   Constant Name Constant Name
FLD_NONE FLD_NORMALTOPLANEFLD_VECTOR FLD_NORMALTOSURFACEFLD_ALONGCURVE
Constant Name Constant Name
FLV_NONE FLV_FUNCTIONFLV_EQUATION FLV_INTERPOLATION
FLV_DATASURFACE
Constant Name Constant Name
FLT_NBODY FLT_NHEATGENFLT_NFORCE FLT_NTRANSIENT FLT_NFOLLOWERFORCE FLT_NPRESSUREFLT_NMOMENT FLT_NTOTALPRESSUREFLT_NFOLLOWERMOMENT FLT_NSCALARFLT_NDISPLACEMENT FLT_NSTEAMQUALITY FLT_NROTDISPLACEMENT FLT_NHUMIDITYFLT_NVELOCITY FLT_NFLUIDHEIGHTFLT_NROTVELOCITY FLT_NUNKNOWNCONDITIONFLT_NACCELERATION FLT_NSLIPCONDITIONFLT_NROTACCELERATION FLT_NFANCURVEFLT_NTEMPERATURE FLT_NPERIODICFLT_NHEATFLUX
 API-192  Global String Properties
The following table lists constants to  be used for Elemental Load Types.   
The following table lists constants to be used for Loads Types on Geometric Points which are 
expanded to nodes.   
The following table lists constants to be used for Loads Types on Geometric Curves which are 
expanded to nodes.   Constant Name Constant Name
FLT_ELINELOAD FLT_ECONVECTION FLT_EPRESSURE FLT_ERADIATIONFLT_ETEMPERATURE FLT_EHEATGENFLT_EHEATFLUX FLT_EBOLTPRELOAD
Constant Name Constant Name
FLT_PNFORCE FLT_PNHEATGENFLT_PNFOLLOWERFORCE FLT_PNPRESSUREFLT_PNMOMENT FLT_PNTOTALPRESSURE FLT_PNFOLLOWERMOMENT FLT_PNSCALARFLT_PNDISPLACEMENT FLT_PNSTEAMQUALITYFLT_PNROTDISPLACEMENT FLT_PNHUMIDITY FLT_PNVELOCITY FLT_PNFLUIDHEIGHTFLT_PNROTVELOCITY FLT_PNUNKNOWNCONDITIONFLT_PNACCELERATION FLT_PNSLIPCONDITIONFLT_PNROTACCELERATION FLT_PNFANCURVEFLT_PNTEMPERATURE FLT_PNPERIODICFLT_NPRESSUREFLT_PNHEATFLUX
Constant Name Constant Name
FLT_CNFORCE FLT_CNHEATGENFLT_CNFORCEPERLEN FLT_CNPRESSUREFLT_CNFORCEATNODE FLT_CNTOTALPRESSUREFLT_CNMOMENT FLT_CNSCALARFLT_CNMOMENTPERLEN FLT_CNSTEAMQUALITYFLT_CNMOMENTATNODE FLT_CNHUMIDITY FLT_CNDISPLACEMENT FLT_CNFLUIDHEIGHT
Global String Properties   API-193
The following table lists constants to be used for Loads Types on Geometric Curves which are 
expanded to elements.   
The following table lists constants to be used for Loads Types on Geometric Surfaces which are 
expanded to nodes.   FLT_CNROTDISPLACEMENT FLT_CNUNKNOWNCONDITION
FLT_CNVELOCITY FLT_CNSLIPCONDITIONFLT_CNROTVELOCITY FLT_CNFANCURVEFLT_CNACCELERATION FLT_CNPERIODICFLT_CNROTACCELERATION FLT_CNTORQUEFLT_CNTEMPERATURE FLT_CNBEARINGFLT_CNHEATFLUX FLT_CNFOLLOWERFORCEFLT_CNHEATFLUXPERLEN FLT_CNFOLLOWERMOMENTFLT_CNHEATFLUXATNODE
Constant Name Constant Name
FLT_CEPRESSURE FLT_CECONVECTION FLT_CETEMPERATURE FLT_CERADIATIONFLT_CEHEATFLUX FLT_CEHEATGEN
Constant Name Constant Name
FLT_SNFORCE  FLT_SNHEATGEN
FLT_SNFORCEPERAREA FLT_SNPRESSURE  
FLT_SNFORCEATNODE FLT_SNTOTALPRESSURE
FLT_SNMOMENT FLT_SNSCALARFLT_SNMOMENTPERAREA FLT_SNSTEAMQUALITYFLT_SNMOMENTATNODE FLT_SNHUMIDITYFLT_SNDISPLACEMENT FLT_SNFLUIDHEIGHTFLT_SNROTDISPLACEMENT FLT_SNUNKNOWNCONDITIONFLT_SNVELOCITY FLT_SNSLIPCONDITIONFLT_SNROTVELOCITY FLT_SNFANCURVEFLT_SNACCELERATION FLT_SNPERIODICFLT_SNROTACCELERATION FLT_SNTORQUEConstant Name Constant Name
 API-194  Global String Properties
The following table lists constants to be used for Loads Types on Geometric Surfaces which are 
expanded to elements.   
Load Selection Types
The following table lists constants to be used when selecting partic ular load types to perform an 
operation on them, such as deleting loads.   FLT_SNTEMPERATURE FLT_SNBEARING
FLT_SNHEATFLUX FLT_SNFOLLOWERFORCEFLT_SNHEATFLUXPERAREA FLT_SNFOLLOWERMOMENTFLT_SNHEATFLUXATNODE 
Constant Name Constant Name
FLT_SEPRESSURE FLT_SECONVECTION FLT_SETEMPERATURE FLT_SERADIATIONFLT_SEHEATFLUX FLT_SEHEATGEN
Constant Name Constant Name
FLS_ANY FLS_NTEMP FLS_BODY FLS_ETEMPFLS_NONLINEAR FLS_ECONVECTIONFLS_NHTGEN FLS_ERADIATIONFLS_NHTFLUX FLS_NTRANSIENTFLS_FORCE FLS_FLPRESSUREFLS_DISP FLS_FLTRACKINGFLS_ACCEL FLS_FLUNKNOWNFLS_LINELOAD FLS_FLSLIPFLS_VELOCITY FLS_FLFANFLS_PRESS FLS_FLPERIODICFLS_EHTGEN FLS_NONEFLS_EHTFLUXConstant Name Constant Name
Global String Properties   API-195
Function/Table Type
The following table lists constants to be used for Type of Function or Table in the Function/Table 
Editor Type.  
Function Types
The following table lists constants to be used for Function Types.(i.e., wh en entity type in the 
Function/Table Editor Type is FTBL_FUNCTION)   Constant Name Constant Name
FTBL_NONE FTBL_LOADSETCOMBINATIONFTBL_FUNCTION FTBL_RESULTSETPROCESSFTBL_VECTORFUNCTION
Constant Name Constant Name
FTB_NONE FTB_ROTFREQFTB_TIME FTB_VELFREQFTB_TEMP FTB_ANGVELFREQFTB_FREQ FTB_ACCFREQFTB_STRESSSTRAIN FTB_ANGACCFREQFTB_FUNCTEMP FTB_FORCEFREQFTB_GDAMP FTB_MOMENTFREQFTB_CRITDAMP FTB_STRESSFREQFTB_QDAMP FTB_STRAINFREQFTB_STRAINRATE FTB_MACHFREQFTB_FUNCSTRAINRATE FTB_AEROFACTORFTB_CURVELENGTH FTB_ACCELLOCFTB_CURVEPARAM FTB_VELOCITYFTB_STRAINSTRESS FTB_PRESSUREFTB_PLASTICSTRAIN FTB_WA VELENGTHFTB_FUNCV AL FTB_TEMPDIFFFTB_DAMPFUNC FTB_HEATFLOWRATEFTB_ANGLEINCIDENCE FTB_MASSFLOWRATEFTB_DIRECTIONINCIDEN CE FTB_VOLUMEFLOWRATE
FTB_TBLM1LINLIN FTB_THERMALCAPACITANCE
 API-196  Global String Properties
Table Type
The following table lists constants to be used for the Type of Table (i.e., when entity type in the 
Function/Table Editor Type is FTBL_VECTORFUNCTION).  
MapOutput Constants
The following table lists constants to be used for “LoadType” that can be mapped from output 
using MapFromModelToSet method   
The following table lists constants to be used fo r “MapOption” that can be used to specify algo-
rithm to map output to loads where meshes do not coincide.
These constants are used for the MapFromModelToSet method .  FTB_TBLM1LOGLIN FTB_LATITUDE
FTB_TBLM1LINLOG FTB_TRUESTRAINSTRESSFTB_TBLM1LOGLOG FTB_TRUEPLASTICSTRAINFTB_MODE FTB_TBLM5DAMAGEFORCEFTB_DISPFREQ
Constant Name Constant Name
FTBV_NONE FTBV_SUNPLANETALTITUDEFTBV_ACCELERATION FTBV_SPHERICALVECTORSUNPLANET
FTBV_SUNPLANET FTBV_SPHERICALVECTORSUNPLANETALTITUDE
Constant Name Constant Name
FMLT_NTEMPERATURE FMLT_NACCELERATIONFMLT_NFORCE FMLT_NROTACCELERATIONFMLT_NMOMENT FMLT_ETEMPERATUREFMLT_NDISPLACEMENT FMLT_EHEATFLUXFMLT_NROTDISPLACEMENT FMLT_EHEATGENFMLT_NVELOCITY FMLT_EPRESSUREFMLT_NROTVELOCITY FMLT_NPRESSURE
Constant Name Constant Name
FMO_ZERO FMO_INTERPFMO_V ALUE FMO_NONEConstant Name Constant Name
Global String Properties   API-197
The following table lists constants to be used for “MapToType” that can be used to specify target 
mapping type. FMP_STANDARD is us ed if source output is from same entity type (Node or Ele-
ment) as the desired target load. 
These constants are used for MapFromModelToSet method.
The following table lists constants to be used for “DataConversion” that can be used to specify the 
data conversion method u sed to interpret the output data from the source model.
These constants are used for the MapFromModelToSet method .  
Data Surface Constants
The following table lists constants to  be used for Da ta Surface Types   
The following table lists constants to be used for Data Surface Cell Types   FMO_EXTEND
Constant Name Constant Name
FMP_STANDARD FMP_ELEMENTFMP_NODE
Constant Name Constant Name
FMDC_VU FMDC_A VG_SKIP_CORNER
FMDC_A VG FMDC_MAX_SKIP_CORNERFMDC_MAX FMDC_MIN_SKIP_CORNERFMDC_MIN
Constant Name Constant Name
FDSU_TABULAR FDSU_4PT_BILINEARFDSU_EQ FDSU_8PT_TRILINEARFDSU_NODE FDSU_2PT_LINEARFDSU_ELEM FDSU_ARB_3DFDSU_ALG_CURVE FDSU_OUTPUT_MAPFDSU_ALG_SURF FDSU_LOADSET_COMBINEFDSU_ALG_COORD FDSU_RESULTSET_COMBINE
Constant Name Constant Name
FDT_V ALUE_X FDT_PAGEV ALUEFDT_V ALUE_Y FDT_BASECOLUMNTITLEConstant Name Constant Name
 API-198  Global String Properties
The following table lists constants to be used for Data Surface Dimension   
Data Table Constants
The Data Table is used to create tables of data extracted from Model(s) cu rrently open in FEMAP 
which are presented in a “spread sheet” format.
The following table lists constants to be  used for the Data Table Column Type.  
The following table lists constants to be used for the Da ta Table Alignment.  
The following table lists constants to be used  for the Data Table Save to a File Format   
Results ID Query 
The constants for the Results ID Query Object ar e located in the docume ntation for the object 
itself, as it was logical to put all of that inform ation in single section. For more information, see 
Section 4.18.1, "Results Vector ID Query Constants (Enumerations)".FDT_V ALUE_Z FDT_COLUMNTITLE
FDT_ROWV ALUE FDT_PAGETITLEFDT_COLUMNV ALUE FDT_PAGESIZE
Constant Name Constant Name
FDM_1D FDM_3DFDM_2D
Constant Name Constant Name
FCT_BOOL FCT_DOUBLEFCT_INT FCT_STRING
Constant Name Constant Name
FAL_LEFT FAL_RIGHTFAL_CENTER
Constant Name Constant Name
FSF_TEXT FSF_RTFFSF_CSV FSF_HTMLConstant Name Constant Name
Global String Properties   API-199
Output Types
The following table lists constant s to be used for Output Types.   
Output - Complex Types
The following table lists constants to  be used for Complex Output Types.   
Output - Transformation Types
The following table lists constants to be  used for Output Transformation Types.  
Output - Invariant Types
The following table lists constants to be used for Output  Invariant Types.Constant Name Constant Name
FOT_ANY FOT_STRESSFOT_DISP FOT_STRAINFOT_ACCEL FOT_TEMPFOT_FORCE
Constant Name Constant Name
FOC_ANY FOC_REAL
FOC_MAGNITUDE FOC_IMAGINARY
FOC_PHASE
Constant Name Constant Name
FOD_NONE FOD_PLATE_TO_VECTORFOD_VECTOR_TO_CSYS FOD_SOLID_TO_CSYSFOD_VECTOR_TO_NODE_OUTPUT_CSYS FOD_SOLID_TO_MATLFOD_PLATE_TO_MATL FOD_LINE_TO_CSYSFOD_PLATE_TO_CSYS
Constant Name Constant Name
FIVT_MAX_PRIN FIVT_MEAN_PRINFIVT_MIN_PRIN FIVT_MAX_SHEARFIVT_MID_PRIN FIVT_VON_MISES
 API-200  Global String Properties
Output Set - Output Pr ocess Operation (Combination) Types
The following table lists constants to be u sed for Output Processing Operation Types.   
View Modes
The following table lists constant s to be used for View Modes.
Entity Visibility
The following table lists constants to be used for Entity Visibility.Constant Name Constant Name
FRPROC_NONE FRPROC_ENV_ABSMAXFRPROC_LINEAR FRPROC_ENV_MAX_SETIDFRPROC_RSS FRPROC_ENV_MIN_SETIDFRPROC_ENV_MAX FRPROC_ENV_ABSMAX_SETIDFRPROC_ENV_MIN
Constant Name Constant Name
FVM_DRAW FVM_XY_VS_ID
FVM_FEATURE FVM_XY_VS_CASEFVM_SORT FVM_XY_VS_V ALUEFVM_HIDE FVM_XY_VS_POSITIONFVM_FREE FVM_XY_OF_FUNCTIONFVM_FREE_FACE
Constant Name Constant Name
FVIS_POINT FVIS_ELEM_TYPEFVIS_CURVE FVIS_ELEM_SHAPEFVIS_SURFACE FVIS_MATLFVIS_SOLID FVIS_PROPFVIS_CSYS FVIS_AERO_PANELFVIS_CONNECTION_REGION FVIS_AERO_SPLINEFVIS_CONNECTION FVIS_AERO_SURFACEFVIS_ELEM FVIS_FREEBODY
Global String Properties   API-201
View Options
A list of the View Options consta nts for use with Draw, Label, Color, and ColorMode can be found 
in Section 5.75.1.2, "View Option Types" with  Text in View Options and Index number.
Deformed Formats
The following table lists constants to  be used for Deformed Formats .   
Contour Formats
The following table lists constants to be used for Contour Formats.
Freebody Display Modes
The following table lists constants to  be used for Freebody Display Mode
Freebody Vector Modes
The following table lists constants to be  used for Freebody Vector Display ModeConstant Name Constant Name
FDF_NONE FDF_ANIMATE_MULTICASEFDF_MODEL_UNDEF FDF_ARROW FDF_DEFORMED FDF_TRACEFDF_ANIMATE FDF_STREAMLINE
Constant Name Constant Name
FCF_NONE FCF_BEAM_DIAGRAMFCF_MODEL_COLOR FCF_ISOSURFACE FCF_CONTOUR FCF_SECTION_CUTFCF_CRITERIA FCF_CONTOUR_VECTOR
Constant Name Constant Name
FBD_DISPLAYMODE_FREEBODY FBD_DISPLAYMODE_SECTIONFBD_DISPLAYMODE_INTERFACE
Constant Name Constant Name
FBD_VEC_MODE_OFF FBD_VEC_MODE_RESULTANTFBD_VEC_MODE_COMPONENT
 API-202  Global String Properties
Freebody Components
The following table lists constants to be used for Freebody Components to Display. 
Freebody Contributions
The following table lists constants to  be used for Freebody Contributions   
Freebody Section Cut En tity Selection Modes
The following table lists constants to be used for Freebody Entity Selection Mode when Freebody 
Display Mode is set to Section Cut   
Freebody Section Cut Summation Location
The following table lists constants to be used  for Summation Location when Freebody Display 
Mode is set to Section Cut   Constant Name Constant Name
FBC_FX FBC_MXFBC_FY FBC_MYFBC_FZ FBC_MZ
Constant Name Constant Name
FBL_APPLIED FBL_EL_PERFBL_SPC FBL_TOTAL
FBL_MPC FBL_CONTACT
FBL_EL_FB FBL_GLUE
Constant Name Constant Name
FBD_SECTMODE_PLANENORMAL FBD_SECTMODE_VECTORFBD_SECTMODE_PLANEVECTOR FBD_SECTMODE_CURVE
Constant Name Constant Name
FBD_SECTION_SUMLOC_BASE FBD_SECTION_SUMLOC_LOCATIONFBD_SECTION_SUMLOC_CENTROID
Global String Properties   API-203
Group Data Types
The following table lists constants to be used when selecting DataTypes for Groups.   
Group Definition Types
The following table lists constants to be used for adding Text to Groups    
The following table lists constants to be used for adding Points to GroupsConstant Name Constant Name
FGR_CSYS 0 FGR_BEQ 14
FGR_POINT 1 FGR_PLOAD 15FGR_CURVE 2 FGR_CLOAD 16FGR_SURFACE 3 FGR_SLOAD 17FGR_VOLUME 4 FGR_PBCO 18FGR_TEXT 5 FGR_CBCO 19Not Used 6 FGR_SBCO 20FGR_NODE 7 FGR_SOLID 21FGR_ELEM 8 FGR_CONNECTION 22
FGR_MATL 9 FGR_CONTACT 23
FGR_PROP 10 FGR_CONNECTIONPROP 24FGR_NLOAD 11 FGR_REGLOAD 25FGR_ELOAD 12 FGR_LAYUP 26FGR_BCO 13 FGR_MESHPOINT 27
Constant Name Constant Name
FGD_TEXT_ID FGD_TEXT_BYLAYERFGD_TEXT_BYCOLOR
Constant Name Constant Name
FGD_POINT_ID FGD_POINT_ONSOLIDFGD_POINT_BYDEFCSYS FGD_POINT_BYCOLORFGD_POINT_ONCURVE FGD_POINT_BYLAYERFGD_POINT_ONSURFACE FGD_POINT_BYPROP
 API-204  Global String Properties
The following table lists constants to be used for adding Curves to Groups   
The following table lists constants to be used for adding Surfaces to Groups  
The following table lists constants to be used for adding V olumes to Groups    
The following table lists constants to be used for adding Solids to Groups  
The following table lists constants to be used for adding Mesh Points to GroupsConstant Name Constant Name
FGD_CURVE_ID FGD_CURVE_BYLAYERFGD_CURVE_BYPOINT FGD_CURVE_BYPROPFGD_CURVE_ONSURFACE FGD_CURVE_ONSOLIDFGD_CURVE_BYCOLOR
Constant Name Constant Name
FGD_SURFACE_ID FGD_SURFACE_BYLAYERFGD_SURFACE_BYCURVE FGD_SURFACE_BYPROPFGD_SURFACE_ONVOLUME FGD_SURFACE_ONSOLID
FGD_SURFACE_BYCOLOR
Constant Name Constant Name
FGD_VOLUME_ID FGD_VOLUME_BYLAYERFGD_VOLUME_BYSURFACE FGD_VOLUME_BYPROPFGD_VOLUME_BYCOLOR
Constant Name Constant Name
FGD_SOLID_ID FGD_SOLID_BYLAYERFGD_SOLID_BYCURVE FGD_SOLID_BYPROPFGD_SOLID_BYSURFACE FGD_SOLID_BYTYPEFGD_SOLID_BYCOLOR
Constant Name Constant Name
FGD_MESHPOINT_ID FGD_MESHPOINT_BYSOLIDFGD_MESHPOINT_BYPOINT FGD_MESHPOINT_BYCOLORFGD_MESHPOINT_BYCURVE FGD_MESHPOINT_BYLAYERFGD_MESHPOINT_BYSURFACE
Global String Properties   API-205
The following table lists constants to be u sed for adding Connection Properties to Groups    
The following table lists constants to be used for adding Regions to Groups    
The following table lists constants to be used fo r adding Connectors (contact pairs) to Groups.
The following table lists constants to be u sed for adding Coordinate Systems to Groups   
The following table lists constants to be used for adding Nodes to Groups.Constant Name Constant Name
FGD_CONNECTIONPROP_ID FGD_CONNECTIONPROP_BYCOLORFGD_CONNECTIONPROP_BYCOLOR FGD_CONNECTIONPROP_ONCONNECTION
Constant Name Constant Name
FGD_CONNECTION_ID FGD_CONNECTION_BYPROPFGD_CONNECTION_BYCOLOR FGD_CONNECTION_BYCONTACTFGD_CONNECTION_BYLAYER
Constant Name Constant Name
FGD_CONTACT_ID FGD_CONTACT_BYELEMFGD_CONTACT_BYCOLOR FGD_CONTACT_BYNODEFGD_CONTACT_BYLAYER FGD_CONTACT_BYCURVEFGD_CONTACT_ONCONNECTION FGD_CONTACT_BYSURFACEFGD_CONTACT_ONSOLID FGD_CONTACT_BYPROP
Constant Name Constant Name
FGD_CSYS_IDF FGD_CSYS_ONNODEFGD_CSYS_BYDEFCSYS FGD_CSYS_ONELEMFGD_CSYS_BYTYPE FGD_CSYS_ONPOINTFGD_CSYS_BYCOLOR FGD_CSYS_ONCSYSFGD_CSYS_BYLAYER FGD_CSYS_ONPROP
Constant Name Constant Name
FGD_NODE_ID FGD_NODE_ATSOLIDFGD_NODE_BYDEFCSYS FGD_NODE_BYCOLOR
FGD_NODE_BYOUTCSYS
FGD_NODE_BYLAYER  
FGD_NODE_ONELEM FGD_N ODE_ONELEMASORIENT
FGD_NODE_ATPOINT FGD_NODE_BYSUPERELEMENT
 API-206  Global String Properties
The following table lists constants to be  used for adding Elements to Groups.
The following table lists constants to be  used for adding Ma terials to Groups.
The following table lists constants to be  used for adding Properties to Groups.
The following table lists constants to be used for adding Layups to Groups    FGD_NODE_ATCURVE FGD_NODE_BYTYPE
FGD_NODE_ATSURFACE FGD_NODE_ONREGION
Constant Name Constant Name
FGD_ELEM_ID FGD_ELEM_BYCOLORFGD_ELEM_BYMATL FGD_ELEM_BYLAYERFGD_ELEM_BYPROP FGD_ELEM_BYSHAPEFGD_ELEM_BYTYPE FGD_ELEM_BYLAYUPFGD_ELEM_BYNODE FGD_ELEM_BYALLNODESFGD_ELEM_ATPOINT FGD_ELEM_BYGLOBALPLYFGD_ELEM_ATCURVE FGD_ELEM_BYORIENTNODEFGD_ELEM_ATSURFACE FGD_ELEM_ALLNODESONSOLIDFGD_ELEM_ATSOLID
Constant Name Constant Name
FGD_MATL_ID FGD_MATL_BYTYPEFGD_MATL_ONPROP FGD_MATL_BYCOLORFGD_MATL_ONELEM FGD_MATL_BYLAYER
Constant Name Constant Name
FGD_PROP_ID FGD_PROP_BYCOLORFGD_PROP_ONELEM FGD_PROP_BYLAYERFGD_PROP_BYMATL FGD_PROP_BYLAYUPFGD_PROP_BYTYPE
Constant Name Constant Name
FGD_LAYUP_ID FGD_LAYUP_ONPROPFGD_LAYUP_BYMATL FGD_LAYUP_BYGLOBALPLYConstant Name Constant Name
Global String Properties   API-207
The following table lists constants to be used for adding Loads to Groups.  
The following table lists constants to be used  for adding Boundary Conditions to Groups.
The following table lists constants to be used for adding Aero Entities to Femap Sets
Although Aero entities are not currently supported in Femap gr oups the group rules can be used 
for adding Aero entities to Femap Set Objects.
Print Source Options
The following table lists constants to  be used for Print Source Options.  Constant Name Constant Name
FGD_LOAD_BYNODE FGD_LOAD_BYCURVEFGD_LOAD_BYELEM FGD_LOAD_BYSURFACEFGD_LOAD_BYPOINT FGD_LOAD_BYREGION
Constant Name Constant Name
FGD_BCO_ID FGD_BCO_BYCURVEFGD_BEQ_BYNODE FGD_BCO_BYSURFACEFGD_BCO_BYPOINT
Constant Name Constant Name
FGD_AEROPROP_ID FGD_AEROSPLINE_BYCOLORFGD_AEROPROP_BYCOLOR FGD_AEROSPLINE_BYLAYERFGD_AEROPROP_BYLAYER FGD_AEROSPLINE_BYPANELFGD_AEROPANEL_ID FGD_AEROCTRLSURF_IDFGD_AEROPANEL_BYCOLOR FGD_AEROCTRLSURF_BYCOLORFGD_AEROPANEL_BYLAYER FGD_AEROCTRLSURF_BYLAYERFGD_AEROSPLINE_ID
Constant Name Constant Name
FPS_VIEW FPS_MESSAGESFPS_DESKTOP FPS_PROGRAMFILEFPS_FILE FPS_ENTITYINFOFPS_LAYOUT FPS_APIPROGRAM
 API-208  Global String Properties
Return Codes
The following table lists constants to be used for Return Codes. These can be helpful when testing 
and debugging a program created with the FEMAP API.  
FEMAP Events
The following table lists constant s to be used for FEMAP Events.  Constant Name Constant Name
FE_OK -1 FE_BAD_DATA 9
FE_FAIL 0 FE_NO_MEMORY 10FE_CANCEL 2 FE_NEGATIVE_MASS_VOLUME 11FE_INV ALID 3 FE_INV ALID_DEVELOPER 12FE_NOT_EXIST 4 FE_NO_V ALID_GRAPHICS_WINDOW 13FE_SECURITY 5 FE_NO_V ALID_GRAPHIC_VIEW 14FE_NOT_A V AILABLE 6 FE_FILE_OPEN_FAILED 15FE_TOO_SMALL 7 FE_NO_FILENAME 16FE_BAD_TYPE 8 FE_FILE_WRITE_FAILED 17
Constant Name Constant Name
FEVENT_INITIALIZE 1 FEVENT_ANALYSISEND 10FEVENT_NEWMODEL 2 FEVENT_RESULTSEND 11FEVENT_ENDMODEL 3 FEVENT_SWITCHMODEL 12FEVENT_SHUTDOWN 4 FEVENT_SELECTOR 13FEVENT_COMMAND 5 FEVENT_UPDATEDSA VEDSET 14FEVENT_PROGSTART 6 FEVENT_CLOSINGMODEL 15FEVENT_PROGEND 7 FEVENT_LEA VINGMODEL 16FEVENT_DRAWSTART 8 FEVENT_FILEOPENEND 17FEVENT_DRAWEND 9 FEVENT_FILEIMPORTEND 18
Global String Properties   API-209
FEMAP Colors
The following table lists constants to be used for Colors located in the Fi rst and Second Rows of 
the FEMAP color palette. Colo r Number listed in Column.
Constant Name Constant Name
FCL_BLACK 0 FCL_MIDNIGHTBLUE 25
FCL_SEPIA 1 FCL_EGGPLANT 26FCL_DARKRED 2 FCL_DARKRASPBERRY 27FCL_MAROON 3 FCL_RASPBERRY 28FCL_RED 4 FCL_CRIMSON 29FCL_DARKESTGREEN 5 FCL_DARKSLATEGRAY 30FCL_DARKOLIVEGREEN 6 FCL_DARKGRAY 31FCL_BROWN 7 FCL_CAMOUFLAGEGREEN 32FCL_SIENNA 8 FCL_FIREBRICK 33FCL_ORANGERED 9 FCL_TOMATO 34FCL_GREEN 10 FCL_PINEGREEN 35FCL_FERNGREEN 11 FCL_FORESTGREEN 36FCL_OLIVE 12 FCL_PALEOLIVE 37FCL_DARKGOLDENROD 13 FCL_PERU 38FCL_ORANGE 14 FCL_CORAL 39FCL_LIMEGREEN 15 FCL_DARKPASTELGREEN 40FCL_YELLOWLIMEGREEN 16 FCL_PALELIMEGREEN 41FCL_A VOCADO 17 FCL_YELLOWGREEN 42FCL_OLIVEYELLOW 18 FCL_OLDGOLD 43FCL_GOLD 19 FCL_GOLDENROD 44FCL_LIME 20 FCL_BLUELIME 45FCL_BRIGHTLIME 21 FCL_PALELIME 46FCL_CHARTREUSE 22 FCL_PALEBRIGHTGREEN 47FCL_BRIGHTCHARTREUSE 23 FCL_GREENYELLOW 48FCL_YELLOW 24 FCL_NOTEYELLOW 49
 API-210  Global String Properties
The following table lists constants to be used for Colors located in the Third and Fourth Rows of 
the FEMAP color palette. Colo r Number listed in Column.
Constant Name Constant Name
FCL_DARKBLUE 50 FCL_MEDIUMBLUE 75
FCL_INDIGO 51 FCL_BLUEINDIGO 76FCL_PURPLE 52 FCL_DARKVIOLET 77FCL_MEDIUMVIOLETRED 53 FCL_VIOLETEGGPLANT 78FCL_DEEPPINK 54 FCL_FUCHSIA 79FCL_DARKCERULEAN 55 FCL_COBALT 80FCL_DARKSLATEBLUE 56 FCL_PALEBLUEPURPLE 81FCL_PALEPURPLE 57 FCL_MEDIUMPURPLE 82FCL_MAUVE 58 FCL_ORCHID 83FCL_CERISE 59 FCL_PINKCERISE 84FCL_DARKCYAN 60 FCL_CERULEAN 85FCL_VIRIDIAN 61 FCL_STEELBLUE 86FCL_GRAY 62 FCL_SLATEBLUE 87FCL_ROSYBROWN 63 FCL_PLUM 88FCL_LIGHTSALMON 64 FCL_REDPINK 89FCL_JADE 65 FCL_DARKTURQUOISE 90FCL_SEAGREEN 66 FCL_MEDIUMTURQUOISE 91FCL_DARKSEAGREEN 67 FCL_MEDIUMAQUAMARINE 92FCL_DARKKHAKI 68 FCL_SILVER 93FCL_SANDYBROWN 69 FCL_PALEREDVIOLET 94FCL_SPRINGGREEN 70 FCL_MEDIUMSPRINGGREEN 95FCL_LIGHTSPRINGGREEN 71 FCL_TURQUOISE 96FCL_LIGHTGREEN 72 FCL_AQUAMARINE 97FCL_TEAGREEN 73 FCL_MINTCREAM 98FCL_PALEYELLOW 74 FCL_LEMONCHIFFON 99
Global String Properties   API-211
The following table lists constants to be used for Colors located in the Fift h and Sixth Rows of the 
FEMAP color palette. Color Nu mber listed in Column.
Constant Name Constant Name
FCL_BLUE 100 FCL_GRAYBLUE_EXTRADARK 150
FCL_PERSIANBLUE 101 FCL_GRAYBLUE_DARK 151FCL_VIOLET 102 FCL_GRAYBLUE 152FCL_BRIGHTVIOLET 103 FCL_GRAYBLUE_LIGHT 153FCL_MAGENTA 104 FCL_GRAYBLUE_EXTRALIGHT 154FCL_BRIGHTCOBALT 105 FCL_GRAYGREEN_EXTRADARK 155FCL_PALECOBALT 106 FCL_GRAYGREEN_DARK 156FCL_BLUEVIOLET 107 FCL_GRAYGREEN 157FCL_MEDIUMORCHID 108 FCL_GRAYGREEN_LIGHT 158FCL_HOTPINK 109 FCL_GRAYGREEN_EXTRALIGHT 159FCL_DODGERBLUE 110 FCL_GRAYBEIGE_EXTRADARK 160FCL_ROYALBLUE 111 FCL_GRAYBEIGE_DARK 161FCL_MEDIUMSLATEBLUE 112 FCL_GRAYBEIGE 162FCL_WISTERIA 113 FCL_GRAYBEIGE_LIGHT 163FCL_PINK 114 FCL_GRAYBEIGE_EXTRALIGHT 164FCL_DEEPSKYBLUE 115 FCL_USER1 165FCL_SKYBLUE 116 FCL_USER2 166FCL_PALESKYBLUE 117 FCL_USER3 167FCL_THISTLE 118 FCL_USER4 168FCL_PALEPINK 119 FCL_USER5 169FCL_CYAN 120 FCL_USER6 170FCL_BRIGHTTURQUOISE 121 FCL_USER7 171FCL_PALEBLUE 122 FCL_USER8 172FCL_POWDERBLUE 123 FCL_USER9 173FCL_WHITE 124 FCL_USER10 174
 API-212  Global String Properties
The following table lists constants to be used for Colors located in th e Grayscale Row of the 
FEMAP color palette. Color Nu mber listed in Column.
Constant Name Constant Name
FCL_GRAY10 125
FCL_GRAY20 126FCL_GRAY30 127FCL_GRAY40 128FCL_GRAY50 129FCL_GRAY60 130FCL_GRAY70 131FCL_GRAY80 132FCL_GRAY90 133FCL_GRAY100 134FCL_GRAY110 135FCL_GRAY120 136FCL_GRAY130 137FCL_GRAY140 138FCL_GRAY150 139FCL_GRAY160 140FCL_GRAY170 141FCL_GRAY180 142FCL_GRAY190 143FCL_GRAY200 144FCL_GRAY210 145FCL_GRAY220 146FCL_GRAY230 147FCL_GRAY240 148FCL_GRAY250 149
Global String Properties   API-213
FEMAP Brush Patterns
The following table lists constants to be used for FEMAP Brush Patterns.  These can be added to a 
FEMAP color using an “or” betw een the Color Name and the Brus h Pattern Constant.  For Exam-
ple, to make a green color with level 4 transparency, you would put “FCL_GREEN or 
FPF_TRANSPARENT4”.
FEMAP Pen Linestyles
The following table lists constants to be used fo r FEMAP Pen Linestyles.  These can be added to a 
FEMAP color using an “or” between the Brus h Pattern Constant and the Pen Linestyle.  
FEMAP Picture Regions
The following table lists constants to be used to  determine which portion of the FEMAP interface 
to copy or save.  Constant Name Constant Name
FPF_SOLID FPF_TRANSPARENT7FPF_HORIZONTAL FPF_TRANSPARENT6FPF_VERTICAL FPF_TRANSPARENT5FPF_FDIAGONAL FPF_TRANSPARENT4FPF_BDIAGONAL FPF_TRANSPARENT3FPF_CROSS FPF_TRANSPARENT2FPF_DIAGCROSS FPF_TRANSPARENT1
FPF_TRANSPARENT8
Constant Name Constant Name
FPL_SOLID FPL_DASHDOTDOTFPL_DASH FPL_THICK2FPL_DOT FPL_THICK3FPL_DASHDOT FPL_THICK4
Constant Name Constant Name
FPRG_WINDOW FPRG_DESKTOPFPRG_LAYOUT
 API-214  Global String Properties
FEMAP Picture Formats
The following table lists constants to  be used for FEMAP Picture Formats.  
FEMAP Picture Formats
The following table lists constants to be used for FEMAP Picture Formats used by the feCrossSec-
tionReport function.
FEMAP Default Picture Formats
The following table lists constants to be used for FEMAP Default Pictur e Formats which can be 
set via the Preferences.
FEMAP Default Animation Formats
The following table lists constants to be used  for FEMAP Default Animation Formats which can 
be set via the Preferences.  Constant Name Constant Name
FPM_BMP FPM_JTFPM_METAFILE (Constant Reserved) FPM_PLACEMF FPM_GIFFPM_JPEG FPM_GIFANIMFPM_BMPSERIES FPM_TIFFPM_A VI FPM_PNGFPM_A VI_UNCOMPRESSED
Constant Name Constant Name
FPM2_BMP FPM2_TIFFPM2_JPEG FPM2_PNGFPM2_GIF
Constant Name Constant Name
PPFM_BMP PPFM_GIFPPFM_JPEG PPFM_TIFPPFM_PNG
Constant Name Constant Name
PAFM_BMP PAFM_AVIPAFM_BMPSERIES PAFM_GIF
Global String Properties   API-215
FEMAP GIF Options
The following table lists constants to be used for GIF Formats which can be set via the Prefer-
ences.
FEMAP Language Options
The following table lists constants to be used fo r the Language preference on User Interface tab.
Messages Window Text Colors
The following table lists constants to be  used for Messages Window Text Colors.
PublishTool Object
The following table lists constant s used by AddPicture method.  
The following table lists consta nts used by SetFormat method.  
The following table lists constants u sed by SetParagraphAlignment method.Constant Name Constant Name Constant Name
GIFC_NET GIFC_OCTREE GIFC_DITHER
Constant Name Constant Name
FLNG_AUTO FLNG_JPFLNG_EN FLNG_TWFLNG_DE FLNG_CN
Constant Name Constant Name
FCM_NORMAL FCM_ERRORFCM_HIGHLIGHT FCM_COMMANDFCM_WARNING
Constant Name Constant Name
PUBIF_BITMAP PUBIF_GIFPUBIF_JPEG PUBIF_TIFPUBIF_PNG
Constant Name Constant Name
PUB_RTF PUB_HTML
Constant Name Constant Name Constant Name
PUBALN_LEFT PUBALN_CENTER PUBALN_RIGHT
 API-216  Global String Properties
FEMAP Default Solver/Translator
The following table lists constants used to set a default solver (Interface option on the Interfaces 
tab in the Preferences). There are also constants for the ge ometry translators.
Constant Name Constant Name
FTR_NONE FTR_ODBCFTR_MSC_NASTRAN FTR_CSA_NASTRANFTR_PC_NASTRAN FTR_SLAFTR_PAL_2 FTR_CFDESIGNFTR_STARDYNE FTR_ACISFTR_ANSYS FTR_PARASOLIDFTR_ANSYS_PC_LINEAR FTR_LS_DYNAFTR_ALGOR FTR_MARCFTR_COSMOS FTR_SINDAFTR_PATRAN FTR_NE_NASTRANFTR_FEMAP_NEUTRAL FTR_SATOOLKITFTR_DXF FTR_TMGFTR_IGES FTR_MODEL_SOLUTIONFTR_TABLE FTR_CATIAFTR_UAI_NASTRAN FTR_PROEFTR_COSMIC_NASTRAN FTR_VDAFTR_STAAD FTR_SOLIDEDGEFTR_ABAQUS FTR_STEPFTR_WECAN FTR_UNIGRAPHICSFTR_SAP FTR_VR_NASTRANFTR_CDA_SPRINT FTR_NX_NASTRANFTR_CAEFEM FTR_CATIA_V5FTR_IDEAS FTR_SOLIDWORKSFTR_ME_NASTRAN FTR_TOSCAFTR_ADINA FTR_JTFTR_GENESIS FTR_FIBERSIM
Global String Properties   API-217
Coordinate Dialog Methods
The following table lists constants to be used for Coordinate Dialog Methods.  These can be help-
ful when testing and debugging a pr ogram created with the FEMAP API.  
Vector Dialog Methods
The following table lists constants to be used for Vector Dialog Methods..  
Plane Dialog Methods
The following table lists constants to be used for Plane Dialog Methods..  Constant Name Constant Name
FCD_COORDINATES FCD_BETWEENFCD_WORKPLANE_COORDINATES FCD_INTERSECTIONFCD_USE_POINTS FCD_MIDPOINTFCD_USE_NODES FCD_PROJECT_ON_CURVEFCD_OFFSET FCD_PROJECT_ON_SURFACEFCD_DISTANCE FCD_ON_SURFACEFCD_CENTER FCD_INTERSECTCURVESURFACEFCD_ALONG FCD_CG_SURFACEFCD_MESH_LOCATION FCD_ALONGLENGTH
Constant Name Constant Name
FVD_POSITION FVD_BISECTFVD_POSITION_LENGTH FVD_NORMALFVD_USE_POINTS FVD_DEFCS_AXISFVD_USE_NODES FVD_GLOBAL_AXISFVD_COMPONENTS FVD_NORMAL_TO_VIEWFVD_DIRECTION FVD_AXIS_OF_SURFACEFVD_TANGENT FVD_SA VEDFVD_NORMAL_TO_SURFACE
Constant Name Constant Name
FPD_POSITION FPD_DEFCS_AXISFPD_USE_POINTS FPD_GLOBAL_AXISFPD_USE_NODES FPD_NORMAL_TO_VIEW
 API-218  Global String Properties
Selector Constants
The Selector (Select Toolbar) is used to create “Selection sets” in FEMAP which may contain dif-
ferent entity types and can also be used to load entities into the Data Table and Entity Editor.
The following table lists constants to be  used for the Selector Entity Type.  
The following table lists constants to be  used for Selector Pick (Drill) Method   FPD_COMPONENTS FPD_NORMAL_TO_CURVE
FPD_BISECT FPD_NORMAL_TO_SURFACEFPD_NORMAL FPD_SA VED
Constant Name Constant Name
FS_POINT FS_LOAD_NODALFS_CURVE FS_LOAD_ELEMENTALFS_SURFACE FS_LOAD_ON_POINTFS_SOLID FS_LOAD_ON_CURVEFS_CONNECTION_PROP FS_LOAD_ON_SURFACEFS_CONNECTION_REGION FS_BC_NODALFS_CONNECTION FS_BC_EQUATIONFS_CSYS FS_BC_ON_POINTFS_NODE FS_BC_ON_CURVEFS_ELEM FS_BC_ON_SURFACEFS_MATL FS_TEXTFS_PROP
Constant Name Constant Name
FSD_OFF FSD_FRONTFSD_QUERYConstant Name Constant Name
Global String Properties   API-219
FEMAP Library Options
The following table lists constants to be used to specify a tab in the various FEMAP Library dialog 
boxes.  
Real Number Formats
The following table lists formats av ailable for writing out real numbers.  
Chart Data Series Types
The following table lists constants to be used fo r Chart Data Series Type in the Charting pane.  
Chart Data Series Comp lex Conversion Methods
The following table specifies available methods da ta series can use to convert complex output .  Constant Name Constant Name
FLIB_DIALOG FLIB_SHAREDFLIB_PERSONAL FLIB_SYSTEM
Constant Name Constant Name
FRFM_NORMAL FRFM_NASTRANFRFM_EXPONENTIAL
Constant Name Constant Name
FCHD_TYPE_ID FCHD_TYPE_VECVECFCHD_TYPE_SET FCHD_TYPE_CPLXEXPFCHD_TYPE_SETV AL FCHD_TYPE_COMBOFCHD_TYPE_POSITION FCHD_TYPE_COMBOV ALFCHD_TYPE_FUNCTION
Constant Name Constant Name
FCSCM_NONE FCSC_ADDFCSCM_MATCHMODEL FCSC_SUBTRACTFCSCM_MATCHVIEW FCSC_MULTIPLYFCSCM_SYNC FCSC_DIVIDE
 API-220  Global String Properties
Chart Styles
The following table lists constants to be used for Chart Style in the Charting pane.  
Chart Axis Styles
The following table lists constants to be used  for Chart Axis Styles  in the Charting pane.  
Chart Palette
The following table lists constants to be u sed for Chart Palette in the Charting pane.  
Chart Legend Location
The following table lists constants to be used for Chart Legend Locatio n in the Charting pane.  
Chart Legend Direction
The following table lists constants to be used for Chart Legend Direction in the Charting pane.  Constant Name Constant Name
FCH_STYLE_POINT FCH_STYLE_LINESTEPFCH_STYLE_LINE FCH_STYLE_AREAFCH_STYLE_LINEFAST FCH_STYLE_AREASTEP
Constant Name Constant Name
FCH_AXISSTYLE_LINEAR FCH_AXISSTYLE_LOG
Constant Name Constant Name
FCH_PALETTE_FEMAP FCH_PALETTE_BLUEFCH_PALETTE_GRAY FCH_PALETTE_BROWNFCH_PALETTE_OFFICE FCH_PALETTE_GREENFCH_PALETTE_VIBRANT FCH_PALETTE_RED
Constant Name Constant Name
FCH_LEGEND_LOCATION_NEAROUTSIDE FCH_LEGEND_LOCATION_FARFCH_LEGEND_LOCATION_NEAR FCH_LEGEND_LOCATION_FAROUTSIDEFCH_LEGEND_LOCATION_CENTER
Constant Name
FCH_LEGEND_DIRECTION_TOPTOBOTTOMFCH_LEGEND_DIRECTION_LEFTTORIGHT
Global String Properties   API-221
Chart Title Location
The following table lists constants to be used  for Chart Title Location in the Charting pane.  
Chart Text Justification
The following table lists constants to be used fo r Chart Text Justification in the Charting pane.  
Chart Number Format
The following table lists constants to be used for Chart Number Format in the Charting pane.  
Chart Marker Style
The following table lists constants to be used  for Chart Marker Style in the Charting pane.  
Chart Secondary Plot Location
The following table lists constants to be used  for ComplexPlotLocation in the Charting pane.  Constant Name Constant Name
FCH_TITLE_LOCATION_TOP FCH_TITLE_LOCATION_RIGHTFCH_TITLE_LOCATION_LEFT FCH_TITLE_LOCATION_BOTTOM
Constant Name Constant Name
FCH_TEXT_JUSTIFICATION_LEFT FCH_TEXT_JUSTIFICATION_RIGHTFCH_TEXT_JUSTIFICATION_CENTER
Constant Name Constant Name
FCH_FORMAT_STANDARD FCH_FORMAT_PERCENTAGEFCH_FORMAT_SCIENTIFIC
Constant Name Constant Name
FCH_MARKERSTYLE_CIRCLE FCH_MARKERSTYLE_PENTAGONFCH_MARKERSTYLE_SQUARE FCH_MARKERSTYLE_HEXAGONFCH_MARKERSTYLE_DIAMOND FCH_MARKERSTYLE_STARFCH_MARKERSTYLE_TRIANGLE
Constant Name Constant Name
FCCL_OFF FCCL_BOTTOMFCCL_TOP
 API-222  Global String Properties
Results Exist State
The following table lists constants to be used to determine if data exists in the Results Browsing 
Object.  
Results Locate Options
The following table lists constants to be used to  locate results in the Results Browsing Object.  
Results Conversion Options
The following table lists constants used to specify data conversion in the Results Browsing Object.  
Attached Results Management
The following table lists constants to be used to manage attached results files.  
Attached Results Status
The following table lists constants to be used to  determine status of attached results files. Constant Name Constant Name
FEX_EXISTING FEX_NONEXISTING
Constant Name Constant Name
FLO_AFTER FLO_AFTER_EQUALFLO_BEFORE FLO_BEFORE_EQUAL
Constant Name Constant Name
FRC_NONE FRC_A VG_SKIP_CORNERFRC_A VG FRC_MAX_SKIP_CORNERFRC_MAX FRC_MIN_SKIP_CORNERFRC_MIN
Constant Name Constant Name
FMRA_LOAD FMRA_DETACHFMRA_UNLOAD FMRA_UPDATE_PATH
Constant Name Constant Name
FRA_UNLOADED FRA_ERRORFRA_OPEN FRA_UNLOAD_CHECKFRA_OPEN_CHECK
Global String Properties   API-223
Results Location
The following table lists constants to be used to determine the loca tion of results, which may be in 
the FEMAP database, in an attached resu lts file, or in a virtual output set. 
Beam Calculator Stress Component
The following table lists constant s used for to specify which st ress component to return when 
using the Beam Calculator.  
Set Object - AddConstrain ed Method Match Options
The following table lists constant s used for to specify enMatch fo r the AddConstrained method of 
the Set Object.  
Set Object - AddLoaded Method Range Options
The following table lists constant s used for to specify enRangeOpt  for the AddLoaded method of 
the Set Object.  Constant Name Constant Name
FRL_DB FRL_CSVFRL_OP2 FRL_VIRTUALFRL_FNO FRL_ODBFRL_XDB
Constant Name Constant Name
FBMC_SC_ALL FBMC_SC_VONMISESFBMC_SC_MAXSHEAR FBMC_SC_MAXPRINFBMC_SC_MINPRIN FBMC_SC_AXIALFBMC_SC_YSHEAR FBMC_SC_ZSHEARFBMC_SC_COMBSHEAR
Constant Name Constant Name
FMTCH_ANY FMTCH_ALL_TRUEFMTCH_ALL FMTCH_ANY_CONSTRAINEDFMTCH_ANY_TRUE FMTCH_ALL_CONSTRAINED
Constant Name Constant Name
FRNG_ANY FRNG_BETWEENFRNG_ABOVE FRNG_OUTSIDE
 API-224  Global String Properties
Results Ranking to Data Table Options
The following table lists constants to be used to  specify the Ranking Meth od when using the feRe-
sultsRankingToDataTable function.
The following table lists constants to be used to specify the Ranking Ap proach when using the 
feResultsRankingToDataTable function.
The following table lists constants to be used to specify the Ranking Type when using the feRe-
sultsRankingToDataTable function.
Model Data Contour and Discrete Value Plots
The constants used for plotting displays of model data and discrete values are described in Section 
5.75.1.3, "Model Contour Data Types"
Nastran License Types
The following table lists constants used to specify license types for NX Nastran.  
Orient Plate Output
The following table lists constants used to specify methods for orie ntation of plate element output.  FRNG_BELOW
Constant Name Constant Name
FRKM_SETS FRKM_ENTITY
Constant Name Constant Name
FRKA_ALL FRKA_EACH
Constant Name Constant Name
FRKT_MAX FRKT_MAXABSFRKT_MIN
Constant Name Constant Name
FSNAS_LIC_DESK FSNAS_LIC_ENT
Constant Name Constant Name
FOOP_FIRSTEDGE FOOP_MATLFOOP_MIDSIDE FOOP_BODYFOOP_BISECTConstant Name Constant Name
Global String Properties   API-225
Orient Solid Output
The following table lists constants used to specify methods for orie ntation of solid element output.
Rigid Method
The following table lists constants used to specify methods for Rigid Elements. .
Analytic Surface Types
The following table lis ts types available for analytic surfaces. .
Update Line Directions
The following table lists constants used to update line directions. .
Copy Renumber Methods
The following table lists the renumbering capab ility available when copying geometry and/or 
mesh in the CopyTool  . .Constant Name Constant Name
FOOS_MATL FOOS_ELEMFOOS_GLOBALRECT FOOS_BODY
Constant Name Constant Name
FRIG_METHOD_AUTO FRIG_METHOD_LAGRANFRIG_METHOD_STIFF FRIG_METHOD_LGELIMFRIG_METHOD_LINEAR
Constant Name Constant Name
FARS_CYLINDER FARS_REVOLUTIONFARS_SEGMENTS
Constant Name Constant Name
FULD_REVERSE FULD_VECTORFULD_ELEM
Constant Name Constant Name
FCPRNM_DEFAULT FCPRNM_OFFSETFCPRNM_BLOCK
 API-226  Global String Properties
Copy Property Approach
The following table lists the proper ty options available when copying geometry and/or mesh in the 
CopyTool.
Optimization Goal
The following table lists constants to be used for Optimization Goal Method.   
Optimization Variable / Topology Region Type
The following table lists type s available for optimization va riables or topology regions. .
Optimization Response Category
The following table lists constants used to specify type of optimization limits. .Constant Name Constant Name
FCPPR_KEEP FCPPR_DUP_MATLFCPPR_DUP_PROP FCPPR_OVERRIDE
Constant Name Constant Name
FOG_NONE
(obsolete, use FOG_DRESP)FOG_MINWEIGHT
(obsolete, use FOG_WEIGHT)
FOG_DRESP FOG_VOLUMEFOG_WEIGHT FOG_COMPLIANCE
Constant Name Constant Name
FOPRT_PROPERTY FOPRT_TOPOLOGYFOPRT_MATERIAL FOPRT_ELEM
Constant Name Constant Name
FOPRSP_CUSTOM FOPRSP_EIGENFOPRSP_NDISP FOPRSP_BUCKLEFOPRSP_SPCFORCE FOPRSP_COMPLFOPRSP_ELEM FOPRSP_VOLFOPRSP_ESE FOPRSP_WEIGHTFOPRSP_FREQ
Global String Properties   API-227
Optimization Response Attribute Type 
The following table lists attrib utes for optimization response. .
Optimization Manufacturi ng Constraint Types
The following table lists type s available when specifying manufacturing constraints. .
Optimization Variab le Bounds Options
The following table lists the types ava ilable for optimizatio n variable bounds.
Optimization Constants
The following table lists constants to  be used for Optimization Methods.   
The following table lists constants to be used for Optimization Goal Method.   Constant Name Constant Name
FOPATT_BLANK FOPATTB_INTFOPATTB_CHAR FOPATTB_REAL
Constant Name Constant Name
FOPMC_ADDM FOPMC_EXTRFOPMC_CAST FOPMC_MINSFOPMC_CHECK FOPMC_MAXS
FOPMC_CSYM FOPMC_PSYM
Constant Name Constant Name
FOPBT_V ALUES FOPBT_PCTFOPBT_RELATIVE
Constant Name Constant Name
FOP_NONE FOP_V ARYFOP_GOAL FOP_LIMIT
Constant Name Constant Name
FOG_NONE
(obsolete, use FOG_DRESP)FOG_MINWEIGHT
(obsolete, use FOG_WEIGHT)
FOG_DRESP FOG_VOLUMEFOG_WEIGHT FOG_COMPLIANCE
 API-228  Global String Properties
The following table lists constants to be used for Optimization Vary Method.   
The following table lists constants to be used for Optimization Limit Method.  .
Monitor Point Constants
The following table lists constants to  be used for Monitor Point Type.   Constant Name Constant Name
FOV_NONE FOV_BARI1FOV_RODAREA FOV_BARI2FOV_RODTORSION FOV_BARTORSIONFOV_BARAREA FOV_PLATETHICKNESS
Constant Name Constant Name
FOL_NONE FOL_BARMINSTRAINFOL_NODXDISP FOL_PLTXNORMALSTRESSFOL_NODYDISP FOL_PLTYNORMALSTRESSFOL_NODZDISP FOL_PLTXYSHEARSTRESSFOL_NODXRDISP FOL_PLTMAXPRINSTRESSFOL_NODYRDISP FOL_PLTMINPRINSTRESSFOL_NODZRDISP FOL_PLTVONMISESSTRESSFOL_RODAXIALSTRESS FOL_PLTXNORMALSTRAINFOL_RODTORSIONSTRESS FOL_PLTYNORMALSTRAINFOL_RODAXIALSTRAIN FOL_PLTXYSHEARSTRAINFOL_RODTORSIONSTRAIN FOL_PLTMAXPRINSTRAINFOL_BARAXIALSTRESS FOL_PLTMINPRINSTRAINFOL_BARMAXSTRESS FOL_PLTVONMISESSTRAINFOL_BARMINSTRESS FOL_FREQUENCYFOL_BARAXIALSTRAIN FOL_EIGENV ALUEFOL_BARMAXSTRAIN 
Constant Name Constant Name
MPT_1_AEROPANEL MPT_1_STRUCTMPT_1_AEROMESH MPT_3
Global String Properties   API-229
The following table lists constants to be used for Monito r Point Components   
The following table lists constants to be  used for Monitor Point Contributions.   
Direct Matrix Input Simu lation Entity Constants
The following table lists constants to be used  for Direct Matrix Input - Data Source type   
The following table lists constants to be u sed for Direct Matrix Input - File Format.   
The following table lists constants to be u sed for Direct Matrix  Input - Input Format   
The following table lists constants to be used  for Direct Matrix I nput - Input/Output Type   
The following table lists constants to be used  for Direct Matrix I nput - Complex Format.   Constant Name Constant Name
MPT_FX MPT_MXMPT_FY MPT_MYMPT_FZ MPT_MZ
Constant Name Constant Name
MPT_SPC MPT_APPLIEDMPT_MPC MPT_DMIG
Constant Name Constant Name
MAT_INT MAT_COMBMAT_EXT
Constant Name Constant Name
MAT_PCH MAT_OP2
Constant Name Constant Name
MAT_SQUARE MAT_RECT2MAT_SYMMETRIC MAT_RECT9
Constant Name Constant Name
MAT_MACHPRES MAT_CPLX_SINGLEMAT_REAL_SINGLE MAT_CPLX_DOUBLEMAT_REAL_DOUBLE
Constant Name Constant Name
MAT_REAL_IMAG MAT_AMP_PHASE
 API-230  
3.4  File Methods
The File Methods include:
•Section 3.4.1, "File Open/Exit"
•Section 3.4.2, "File Save"
•Section 3.4.3, "Import Geometry"
•Section 3.4.4, "Import Analysis Model"
•Section 3.4.5, "Import Analysis Results"
•Section 3.4.6, "Attach To Results File"
•Section 3.4.7, "Import/Export Neutral File"
•Section 3.4.8, "Export Geometry"
•Section 3.4.9, "Export Analysis Model"
•Section 3.4.10, "Notes"
•Section 3.4.11, "Print and Copy"
•Section 3.4.12, "Rebuild and Preferences"
feFileNew   API-231
3.4.1  File Open/Exit 
3.4.1.1  feFileNew
feFileNew
( void )
Description:This function starts a ne w model. It works like the File, New command.
Input:NoneOutput:NoneReturn Code:
FE_FAIL Unable to create a new file.
Remarks/Usage:In releases prior to v9, this AP I function required 2 arguments be cause multiple models were not sup-
ported and the previous model needed to be closed prior to opening the new model. 
Example:None
 API-232  feFileOpen
3.4.1.2  feFileOpen
feFileOpen
( useDlg, fName )
Description:This function opens an exis ting model, or starts a new model and loads the contents of a file in one of 
the supported analysis fo rmats. It works like the File, Open  command.
Input:BOOL useDlg If True, fName is ignored and the standard dialog boxes are dis-
played allowing the user to choo se a model to open. If False, the 
model specified in fName is opened.
STRING fName The filename of the file to be  opened. In general, this name should be 
specified with a complete path. If no path is supplied, the file will be 
opened from the current FEMAP directory.
Output:
None
Return Code:FE_FAIL Unable to open file.FE_NOT_EXIST Specified file does not exist.
Remarks/Usage:feFileOpen( True, “wing.mod” ) - in teractive use, even t hough you specif ied a filename, it will not be 
opened - the user will be  asked to choose a model.
feFileNew( False, “C:\Models\Bracket.mod” ) - Opens the model “C:\Mode ls\Bracket.mod” without 
asking for user input.
Example:None
feFileClose   API-233
3.4.1.3  feFileClose
feFileClose
( saveChanges )
Description:This function clos es the active model 
Input:BOOL saveChanges If True, any changes in the model will be saved. If False, the model 
will simply close, di scarding any changes.
Output:NoneReturn Code:NoneRemarks/Usage:This function will always display a dialog box asking for a filename  if you are saving changes to a 
model that has never been saved pr eviously. To prevent this, you must  either discard the changes, or 
save the model prior to calling this method.
Example:None
 API-234  feFileExit
3.4.1.4  feFileExit
feFileExit
( void )
Description:This function causes FEMAP to exit. Input:NoneOutput:NoneReturn Code:FE_OK The exit operation succeeded.FE_FAIL The file exit operation failed.  The lock_count has not been decre-
mented to zero preventing Femap from exiting.
Remarks/Usage:This function will always display a dialog box askin g for confirmation to save the current model unless 
it has not been modified since the last  save. Therefore, to exit with no user interaction, you must either 
use one of the FileSave functions or feFileNe w immediately prior to calling this function.
Example:None
feFileSave   API-235
3.4.2  File Save 
3.4.2.1  feFileSave
feFileSave
( useDlg )
Description:This function saves the current mode l to the current model name, like the File, Save command. 
Input:BOOL useDlg If True, the function runs inte ractively. In this mode, if the model 
name has not been specified, the Save As  dialog will be displayed to 
allow you to choose the name. If a model filename has been speci-
fied, the model will simply be saved.
If False, the model will be saved if the filename has been selected, or 
the function will fail if the mo del has never been saved before.
Output:NoneReturn Code:FE_FAIL The save operation failed. Eith er the filename specified cannot be 
written, or some other error oc curred during the save operation.
FE_NO_FILENAME useDlg=False and the mode l name has never been specified. Use 
feFileSaveAs instead to specify a na me to be used to save the model.
Remarks/Usage:NoneExample:None
 API-236  feFileSaveAs
3.4.2.2  feFileSaveAs
feFileSaveAs
( useDlg, fName )
Description:This function saves the current model, like the File, Save As  command. The filename can either be spec-
ified or chosen interactively.
Input:BOOL useDlg If True, the filename to be used to save the current model will be 
chosen interactively by display the Save As  dialog box.
If False, operation is automatic and the fName parameter must be 
specified.
STRING fName The filename to use to save the current mode l. This is only used if 
useDlg=False.
Output:
None
Return Code:FE_FAIL The save operation failed. Eith er the filename specified cannot be 
written, or some other error oc curred during the save operation.
FE_CANCEL useDlg=True and the user cancelled the save operation.FE_INV ALID The filename is not valid to save the model.Remarks/Usage:feFileSaveAs( True, “ “ ) - ask the user for a file name and save the current model to that file.
feFileSaveAs( False, “c:\m odels\car.modfem” ) - automatically save  the current model to the specified 
file.
Example:None
feFileTimedSave   API-237
3.4.2.3  feFileTimedSave
feFileTimedSave
( useDlg, saving, notify, interval, commands )
Description:This function controls whether or not timed save is  turned on, and sets the available parameters for 
timed save operation. It works like the File, Timed Save command.
Input:BOOL useDlg If True, the function runs inte ractively and displays the dialog box 
displayed by the File, Timed Save  command. In this case, all other 
parameters are ignored.If False, the other parameters au tomatically define the timed save 
options.
BOOL saving Turns on/off timed save ( True = on, False = off).BOOL notify If this is on, then the user w ill be notified prior to a timed save taking 
place.
INT4 interval Time in minutes  between timed saves ( 1..999 ).
INT4 commands Number of commands between timed saves ( 0, 1..999 ). If you set 
this to 0, then timed saves w ill be done based on time only.
Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID At least one of the arguments contains data that is invalid or out of 
the allowable range.
Remarks/Usage:Calling this function automatically stops any previous timed save oper ations. When the function is com-
plete, if timed save is turned on, it is reinitialized.
Example:None
 API-238  feFileReadAcisOpt
3.4.3  Import Geometry
3.4.3.1  feFileReadAcisOpt
feFileReadAcisOpt
( useDlg, fName, title, layer, color, increment_layer, increment_color, assign_color, con-
vert_to_splines, convert_format, clean, heal, check, stringent, delete_invalid, faces, scale )
Description:This function loads geometry from an ACIS .SAT file. It works like File, Import, Geometry,  when you 
pick an ACIS file. The file is  loaded into the current model.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. Only the fName option is used; 
all others are ignored.
If False, the other parameters auto matically define the ACIS read 
options.
STRING fName The filename/path of the ACIS file to be read.STRING title The title that is assigned  to created laye rs and the solid.
INT4 layer The ID of the layer for new geometry. Set to -1 to use the active 
layer.
INT4 color The color used for the geometry  that is created. Set to -1 to use the 
active solid color. Only used if assign_color=True
BOOL increment_layer If True and you read an assembly, geometry for each solid is placed 
on a different layer; otherwise all geometry is on the specified layer.
BOOL increment_color If True and you read an assembly, geometry for each solid is colored 
differently.
BOOL assign_color If True, the specified color value is used for ge ometry; otherwise the 
default colors are used.
BOOL convert_to_splines If True, surfaces are all converted to B-Spline surfaces. If False, sur-
faces retain their original definition.
BOOL convert_format Should always be set to True. ACIS geometry can no longer be read 
in native format - it is alwa ys converted to Parasolid.
BOOL clean Only used if convert_format=T rue. If True, this attempts to detect 
and remove sliver faces or other geometric problems.
BOOL heal Only used if co nvert_format=True. If True, attempts to close gaps 
and correct geometric inaccuracies.
BOOL check Only used if convert_format =True. If True, checks converted Paraso-
lid geometry to find and report any problems.
feFileReadAcisOpt   API-239
BOOL stringent Only used if convert_form at=True. If True, checks for surface dis-
continuities or irregularities in the converted Parasolid geometry.
BOOL delete_invalid Only used if conver t_format=True. If True  and geometry was 
checked, this deletes any geomet ry that failed the checking.
BOOL faces Only used if convert_format=T rue. If True and it wa s not possible to 
convert a complete solid, this w ill allow unstitched, free surfaces to 
be retained. 
REAL8 scale Only used if co nvert_format=True. This is a scale factor that is 
applied to the geometry during conversion. It is used to ensure that 
the geometry lies inside the Par asolid modeling box (+/- 500 units).
Output:None
 
Return Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID You specified a parameter th at was not in the supported range.
FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
FE_FAIL No FEMAP model is open.Remarks/Usage:In general, you will not want to convert geometry to Parasolid format. In that case, all of the parameters 
after convert_format are ignored.
Example:NonefeFileReadAcisOpt
( useDlg, fName, title, layer, color, increment_layer, increment_color, assign_color, con-
vert_to_splines, convert_format, clean, heal, check, stringent, delete_invalid, faces, scale )
 API-240  feFileReadAcis
3.4.3.2  feFileReadAcis
feFileReadAcis
( fName )
Description:Short form of feFileReadAcisOpt( ).Input:STRING fName The filename/path of the ACIS file to be read.Return Code:FE_FAIL No FEMAP model is open.Remarks/Usage:Using this function is equivalent to calling:
feFileReadAcisOpt( FALSE, fName, "", -1, -1, FALSE, TRUE, FALSE, 
FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 1.0 )
For details, see Section 3.4.3.1, "feFileReadAcisOpt". 
Example:None
feFileReadCatia   API-241
3.4.3.3  feFileReadCatia
feFileReadCatia
( useDlg, fName, rdAnalytical, rdTopology, rdCurves, stitch, heal )
Description:This function loads geometry from a CATIA (.model, mdl, .exp) file. It works like File, Import, Geome-
try, when you pick a CATIA file. The file  is loaded into the current model.
Additional options are avai lable by using the feFileReadCatia2( ) method.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. Only the fName option is used; 
all others are ignored.
If False, the other parameters auto matically define the CATIA read 
options.
STRING fName The filename/path of  the CATIA file to be read.
BOOL rdAnalytical Set to True to read the analytical definition for surfaces defined as 
splines.
BOOL rdTopology Set to True to  read the CATIA topology to create a solid. Generally, it 
is better to set to False to read  the surfaces as individual surfaces. 
BOOL rdCurves Set to True to read 3D trim ming curves, or False to read 2D trimming 
curves.
BOOL stitch Set to True to automatically stitch surfaces into a solid. If False, indi-
vidual surfaces will be read.
BOOL heal Set to True to attempt to  repair tolerance and gap problems.
Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID You specified a parameter th at was not in the supported range.
FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
FE_FAIL No FEMAP model is open.Remarks/Usage:None
 API-242  feFileReadCatia
Example:
NonefeFileReadCatia
( useDlg, fName, rdAnalytical, rdTopology, rdCurves, stitch, heal )
feFileReadCatia2   API-243
3.4.3.4  feFileReadCatia2
feFileReadCatia2
( useDlg, fName, rdAnalytical, rdTopology, rdCurves, rdNoShow, rdNoPick, rdWork-
planes, stitch, heal, check )
Description:This function loads geometry from a CATIA (.model, mdl, .exp) file. It works like File, Import, Geome-
try, when you pick a CATIA file. The file  is loaded into the current model.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. Only the fName option is used; 
all others are ignored.
If False, the other parameters auto matically define the CATIA read 
options.
STRING fName The filename/path of  the CATIA file to be read.
BOOL rdAnalytical Set to True to read the analytical definition for surfaces defined as 
splines.
BOOL rdTopology Set to True to  read the CATIA topology to create a solid. Generally, it 
is better to set to False to read  the surfaces as individual surfaces. 
BOOL rdCurves Set to True to read 3D trim ming curves, or False to read 2D trimming 
curves.
BOOL rdNoShow If True, entities that are ma rked as “No Show” in the Catia model 
will be read
BOOL rdNoPick If True, entities on the “No Pick” layer will be read
BOOL rdWorkplanes If True, work plane geometry will be read
BOOL stitch Set to True to automatically stitch surfaces into a solid. If False, indi-
vidual surfaces will be read.
BOOL heal Set to True to attempt to  repair tolerance and gap problems.
BOOL check If True, the geometry will be checked for validity.
Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID You specified a parameter th at was not in the supported range.
FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
 API-244  feFileReadCatia2
FE_SECURITY The required module for this function  is not properly licensed.
FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:NonefeFileReadCatia2
( useDlg, fName, rdAnalytical, rdTopology, rdCurves, rdNoShow, rdNoPick, rdWork-
planes, stitch, heal, check )
feFileReadCatiaV5   API-245
3.4.3.5  feFileReadCatiaV5
feFileReadCatiaV5
( useDlg, fName, fPath, rdNoShow, rdInactiveLayers, rdPoints, rdCurves, rdSurfaces, 
rdBodies, simplify )
Description:This function loads geometry from a CATIA V5 (.CATpart or .CATproduct) file. It works like File, 
Import, Geometry , when you pick a CATIA V5 file. The f ile is loaded into the current model.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the op tions. The fName and fPath options 
can not be set using this method, other options set the defaults for the 
dialog box. If False, the other para meters automatically define the 
CATIA V5 read options.
STRING fName The filename/path of the CATIA V5 file to be read.
STRING fPath The search path for other a ssembly parts. If all parts are in the same 
directory as the file you specify, yo u can pass this as a blank string. If 
you need to search multiple direct ories, you must separate the paths 
with semicolons in this string.
BOOL rdNoShow If True, reads “No Show” geometry.BOOL rdInactiveLayers If True, reads ge ometry from layers marked as Inactive.
BOOL rdPoints Set to True to read pointsBOOL rdCurves Set to True to read curvesBOOL rdSurfaces Set to True to read surfacesBOOL rdBodies Set to True to read bodiesBOOL simplify If True, simplifies the unde rlying geometry for curves and surfaces
Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
FE_FAIL No FEMAP model is open.Remarks/Usage:None
 API-246  feFileReadCatiaV5
Example:
NonefeFileReadCatiaV5
( useDlg, fName, fPath, rdNoShow, rdInactiveLayers, rdPoints, rdCurves, rdSurfaces, 
rdBodies, simplify )
feFileReadDxf   API-247
3.4.3.6  feFileReadDxf
feFileReadDxf
( useDlg, fName, rdText, rd3DFace, rdBlocks, rdPolyelem, rdTraceBoundary, rdTrace-
Centerline, rdLayer, firstLayer, mergePoints, mergeDist )
Description:This function loads geometry (a nd other entities) from a DXF fo rmatted file. It works like File, Import, 
Geometry , when you pick a DXF file. The file  is loaded into the current model.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. Only the fName option is used; 
all others are ignored.
If False, the other parameters au tomatically define the DXF read 
options.
STRING fName The filename/path of  the DXF file to be read.
BOOL rdText If True, reads text or notes. Skipped if False.BOOL rd3DFace If True, reads 3DFaces as elements. If False, lines are created to form 
the outline of the face.
BOOL rdBlocks If True, entities inside  block references will be read.
BOOL rdPolyelem If True, reads polygon meshes as elements.BOOL rdTraceBoundary If True, creates lines to represent the edges of a traceline.BOOL rdTraceCenterline If True, creates line s to represent the center of a traceline.
BOOL rdLayer If True, reads color and laye r information and assi gns it to the geom-
etry.
INT4 firstLayer If rdLayer=True, this is the ID of the first layer that will be created. 
A unique layer is created for each unique layer name in the DXF file.
BOOL mergePoints If True, coincident points  will be merged after geometry is read.
REAL8 mergeDist If mergePoints=True, this is  the distance used to determine coinci-
dent points. Points that are closer  than this distance from each other 
will be merged.
Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID You specified an layer th at was not in the supported range.
 API-248  feFileReadDxf
FE_FAIL No FEMAP model is open.
Remarks/Usage:NoneExample:NonefeFileReadDxf
( useDlg, fName, rdText, rd3DFace, rdBlocks, rdPolyelem, rdTraceBoundary, rdTrace-
Centerline, rdLayer, firstLayer, mergePoints, mergeDist )
feFileReadIgesAdv   API-249
3.4.3.7  feFileReadIgesAdv
feFileReadIgesAdv
( useDlg, fName, read_curves, read_untrimmed_surfaces, read_trimmed_surfaces, 
read_solids, flavor, trim_curve_option )
Description:This function loads geometry from a IGES (.IGS) file. It works like File, Import, Geometry,  when you 
pick an IGES file, and choose th e Alternate/Advanced interface. The file is loaded into the current 
model.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. Only the fName option is used; 
all others are ignored.
If False, the other parameters au tomatically define the IGES read 
options.
STRING fName The filename/path of  the IGES file to be read.
BOOL read_curves Set to True to read free curves (curves that are not connected to sur-
faces or solids).
BOOL read_untrimmed_sur-
facesSet to True to read free untrimmed surfaces.
BOOL read_trimmed_surfaces Set to True to read free trimmed surfaces.
BOOL read_solids Set to Tr ue to read solid data.
INT4 flavor =0 for No flavoring, =1 for AutoCAD customization (old versions of 
AutoCAD only).
INT4 trim_curve_option =0 for default trim curv es, =1 for 2D trim curves, =2 for 3D trim 
curves
Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID You specified a parameter th at was not in the supported range.
FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
FE_FAIL No FEMAP model is open.Remarks/Usage:
 API-250  feFileReadIgesAdv
If you are having trouble reading solid data, try turn ing off read_solids, and ju st read the trimmed sur-
faces. These surfaces can then be stitched into a solid.
Example:NonefeFileReadIgesAdv
( useDlg, fName, read_curves, read_untrimmed_surfaces, read_trimmed_surfaces, 
read_solids, flavor, trim_curve_option )
feFileReadIges   API-251
3.4.3.8  feFileReadIges
feFileReadIges
( useDlg, fName, merge_points, read_layer, read_geom_only, read_surface_data, 
trim_preference, min_resolution )
Description:This function loads geometry from a IGES (.IGS) file. It works like File, Import, Geometry , when you 
pick an IGES file, and you do not choose the Alternat e/Advanced interface. The file is loaded into the 
current model.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. Only the fName option is used; 
all others are ignored.
If False, the other parameters au tomatically define the IGES read 
options.
STRING fName The filename/path of  the IGES file to be read.
BOOL merge_points Set to True to merge all coincident points that are created.
BOOL read_layer Set to True to read laye r information and assign geometry to the 
appropriate layers.
BOOL read_geom_only Set to  True to only read data marked as geometry.
BOOL read_surface_data Set to Tr ue to read trimmed surface data. If you set this to True, you 
must have the appropriate license.
INT4 trim_preference =0 for Default Trim curves per the IGES file specification. =1 for 2D 
trim curves, =2 fo r 3D trim curves.
REAL8 min_resolution Set to the minimum resolutio n for coincident points  in the file. Used 
for tolerances of surface data, an d for merging coincident points.
Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_SECURITY The required module for this function  is not properly licensed.
FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:
 API-252  feFileReadIges
NonefeFileReadIges
( useDlg, fName, merge_points, read_layer, read_geom_only, read_surface_data, 
trim_preference, min_resolution )
feFileReadParasolidOpt   API-253
3.4.3.9  feFileReadParasolidOpt
feFileReadParasolidOpt
( useDlg, fName, title, layer, color, increment_layer, increment_color, assign_color,  con-
vert_format, clean, heal, check, stringent, delete_invalid, faces, scale )
Description:This function loads geometry from a Parasolid .X_T file. It works like File, Import, Geometry , when 
you pick a Parasolid file. The file is loaded into the current model.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. Only the fName option is used; 
all others are ignored.
If False, the other parameters automa tically define the Parasolid read 
options.
STRING fName The filename/path of the Parasolid file to be read.
STRING title The title that is assigned  to created laye rs and the solid.
INT4 layer The ID of the layer for new geometry. Set to -1 to use the active 
layer.
INT4 color The color used for the geometry  that is created. Set to -1 to use the 
active solid color. Only used if assign_color=True.
BOOL increment_layer If True and you read an assembly, geometry for each solid is placed 
on a different layer; otherwise, all geometry is on the specified layer.
BOOL increment_color If True and you read an assembly, geometry for each solid is colored 
differently.
BOOL assign_color If True, the specified color value is used for geometry; otherwise, the 
default colors are used.
BOOL convert_format Should always be set to False. Parasolid geometry can no longer be 
converted to ACIS format.
BOOL clean Only used if convert_format=T rue. If True, this attempts to detect 
and remove sliver faces or other geometric problems.
BOOL heal Only used if co nvert_format=True. If True, attempts to close gaps 
and correct geometric inaccuracies.
BOOL check Only used if co nvert_format=True. If True, checks converted ACIS 
geometry to find and report any problems.
BOOL stringent Only used if convert_form at=True. If True, checks for surface dis-
continuities or irregularities in  the converted ACIS geometry.
BOOL delete_invalid Only used if conver t_format=True. If True  and geometry was 
checked, this deletes any geomet ry that failed the checking.
 API-254  feFileReadParasolidOpt
BOOL faces Only used if convert_format=T rue. If True and it wa s not possible to 
convert a complete solid, this w ill allow unstitched, free surfaces to 
be retained. 
REAL8 scale Only used if co nvert_format=True. This is a scale factor that is 
applied to the geometry during conversion. It is used to ensure that 
the geometry lies inside the ACIS modeling box.
Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID You specified a parameter th at was not in the supported range.
FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
FE_FAIL No FEMAP model is open.Remarks/Usage:In general, you will not want to co nvert geometry to ACIS format. In that case, all of the parameters 
after convert_format are ignored.
Example:NonefeFileReadParasolidOpt
( useDlg, fName, title, layer, color, increment_layer, increment_color, assign_color,  con-
vert_format, clean, heal, check, stringent, delete_invalid, faces, scale )
feFileReadParasolid   API-255
3.4.3.10  feFileReadParasolid
feFileReadParasolid
( fName )
Description:Short form of feFile ReadParasolidOpt( ).
Input:STRING fName The filename/path of the Parasolid file to be read.
Return Code:FE_FAIL No FEMAP model is open.Remarks/Usage:Using this function is equivalent to calling:
feFileReadParasolidOpt( FALSE, fName, "", -1, -1, FALSE, TRUE, 
FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, FALSE, 1.0 )
For more detailed documentation, see Se ction 3.4.3.9, "feFileReadParasolidOpt".
Example:None
 API-256  feFileReadProe
3.4.3.11  feFileReadProe
feFileReadProe
( fName )
Description:This function loads geometry from a Pro/E (.PRT) file. It works like File, Import, Geometry , when you 
pick a Pro/E file. The file is loaded into the current model.
Input:STRING fName The filename/path of the Pro/E file to be read.Output:NoneReturn Code:FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
feFileReadSolidEdge   API-257
3.4.3.12  feFileReadSolidEdge
feFileReadSolidEdge
( fName )
Description:This function loads geomet ry from a Solid Edge (.PA R) file. It works like File, Import, Geometry , when 
you pick a Solid Edge file. The file  is loaded into the current model.
Input:STRING fName The filename/path of th e Solid Edge file to be read.
Output:NoneReturn Code:FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
 API-258  feFileReadStepOpt2
3.4.3.13  feFileReadStepOpt2
feFileReadStepOpt2
( useDlg, fName, layer, color, increment_layer, increment_color, assign_color, bodies, 
faceted, Surfaces, Curves, Points, optimize, simplify )
Description:This function loads geometry from a STEP (.STP) file. It works like File, Import, Geometry , when you 
pick a STEP file. The file is loaded into the current model.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. Only the fName option is used; 
all others are ignored.
If False, the other parameters au tomatically define the STEP read 
options.
STRING fName The filename/path of the STEP file to be read.INT4 layer The ID of the layer for new geometry. Set to -1 to use the active 
layer. GUI specifies the active layer
INT4 color The color used for the geometry  that is created. Set to -1 to use the 
active solid color. Only used if assign_color=True.
BOOL increment_layer If True and you read an assembly, geometry for each solid is placed 
on a different layer; otherwise all geometry is on the specified layer. 
Default in GUI is False
BOOL increment_color If True and you read an assembly, geometry for each solid is colored 
differently. Default in GUI is True
BOOL assign_color If True, the specified color value is used for geometry; otherwise, the 
default colors are used. Default in GUI is True
BOOL bodies Set to True if you want to  read Bodies. Default in GUI is True.
BOOL faceted Set to True if you want to  read Faceted Bodies. Default in GUI is 
True.
BOOL Surfaces Set to True if you want to  read Surfaces. Defau lt in GUI is True.
BOOL Curves Set to True if you want to  read Curves. Default in GUI is True.
BOOL Points Set to True if you want to  read Points. Default in GUI is True.
BOOL optimize Set to True if you want to  Optimize Bodies. Default in GUI is True.
BOOL simplify Set to True if you want to Simplify Geometry. Default in GUI is 
False.
Output:
feFileReadStepOpt2   API-259
None
Return Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID You specified a parameter th at was not in the supported range.
FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:NonefeFileReadStepOpt2
( useDlg, fName, layer, color, increment_layer, increment_color, assign_color, bodies, 
faceted, Surfaces, Curves, Points, optimize, simplify )
 API-260  feFileReadStep
3.4.3.14  feFileReadStep
feFileReadStep
( fName )
Description:Short form of feFileReadStepOpt2( ).Input:STRING fName The filename/path of the STEP file to be read.Return Code:FE_FAIL No FEMAP model is open.Remarks/Usage:Using this function is equivalent to calling:
feFileReadStepOpt( FALSE, fName, "",  -1, -1, FALSE, TRUE, FALSE, 
TRUE, TRUE, TRUE, TRUE, TRUE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE, FALSE, TRUE, FALSE )
For more detailed documentation, see Section 3.4.3.13, "feFileReadStepOpt2".
Example:None
feFileReadStepOpt   API-261
3.4.3.15  feFileReadStepOpt - Obsolete
feFileReadStepOpt
( useDlg, fName, title, layer, color, increment_layer, increment_color, assign_color, 
class_VI, class_V, class_IV, class_III, class_II_wf, class_II_curv, class_II_rect, 
class_II_2d, smooth_g1, explode, analytics, stitch, closed_orient, pro_e, check_input, 
check_output )
Description:This method is obsole te and should no longer be used . Use feFileReadStepOpt2 instead.
This function loads geometry from a STEP (.STP) file. It works like File, Import, Geometry , when you 
pick a STEP file. The file is loaded into the current model.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. Only the fName option is used; 
all others are ignored.
If False, the other parameters au tomatically define the STEP read 
options.
STRING fName The filename/path of the STEP file to be read.STRING title The title that is assigned  to created laye rs and the solid.
INT4 layer The ID of the layer for new geometry. Set to -1 to use the active 
layer.
INT4 color The color used for the geometry  that is created. Set to -1 to use the 
active solid color. Only used if assign_color=True.
BOOL increment_layer If True and you read an assembly, geometry for each solid is placed 
on a different layer; otherwise all geometry is on the specified layer.
BOOL increment_color If True and you read an assembly, geometry for each solid is colored 
differently.
BOOL assign_color If True, the specified color value is used for geometry; otherwise, the 
default colors are used.
BOOL class_VI Set to True if you want to read Class VI solids.BOOL class_V Set to True if you want to read Class V faceted solids.BOOL class_IV Set to True if you want to read Class IV surfaces.BOOL class_III Set to True if you want to  read Class III wireframe - edge based and 
shell based wireframe geometry.
BOOL class_II_wf Set to True if you want to read Class II wirefra me - wireframe with-
out topology or other underlying surfaces.
BOOL class_II_curv Set to True if you wa nt to read Class II curve bounded surfaces.
 API-262  feFileReadStepOpt
BOOL class_II_rect Set to True if you want to  read Class II rectangular trimmed surfaces. 
Normally this is False, because these surfaces are usually used for 
construction geometry, not part geometry.
BOOL class_II_2d Set to True to read 2D  trimming curves for surfaces. These are 
curves in the surface pa rametric coordinates. If you set this to False, 
3D trimming curves will be read.
BOOL smooth_g1 If True, attempts to elim inate discontinuities in the STEP geometry 
which cannot be represented in Paraso lid. Set this to True for the best 
conversion.
BOOL explode If True, STEP geometry will be  read as independent faces, then Para-
solid will be used to restitch the so lid. If False, the topology will be 
constructed directly from the data in the STEP file. Setting this to 
True will help to eliminate ge ometric tolerancing problems.
BOOL analytics If True, geometry will be si mplified to analytical surfaces whenever 
possible.
BOOL stitch If True, surfaces will be stitched into a solid.
BOOL closed_orient If True, extra checking is done to eliminate problems that can occur 
in closed analytical (sphere and to rus) surfaces that produce comple-
mentary surfaces.
BOOL pro_e If True, forces angle units to degrees to work around a problem in old 
Pro/E STEP files. Always set to Fals e unless you are having specific 
problems with Pro/E files.
BOOL check_input If True, syntax  checking of the STEP file is done prior to reading.
BOOL check_output If True, the Parasolid geom etry is checked for validity after the con-
version.
Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID You specified a parameter th at was not in the supported range.
FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.feFileReadStepOpt
( useDlg, fName, title, layer, color, increment_layer, increment_color, assign_color, 
class_VI, class_V, class_IV, class_III, class_II_wf, class_II_curv, class_II_rect, class_II_2d, smooth_g1, explode, analytics, stitch, closed_orient, pro_e, check_input, 
check_output )
feFileReadStepOpt   API-263
FE_FAIL No FEMAP model is open.
Remarks/Usage:NoneExample:NonefeFileReadStepOpt
( useDlg, fName, title, layer, color, increment_layer, increment_color, assign_color, 
class_VI, class_V, class_IV, class_III, class_II_wf, class_II_curv, class_II_rect, class_II_2d, smooth_g1, explode, analytics, stitch, closed_orient, pro_e, check_input, 
check_output )
 API-264  feFileReadJT
3.4.3.16  feFileReadJT
feFileReadJT
( fName )
Description:This function loads geometry from a JT file. It works like File, Import, Geometry , when you pick a JT 
file. The file is loaded into the current model.
Input:STRING fName The filename/path of the JT file to be read.Return Code:FE_FAIL No FEMAP model is open.FE_NOT_A V AILABLE JT importer not installed/found.Remarks/Usage:NoneExample:None
feFileReadStl   API-265
3.4.3.17  feFileReadStl
feFileReadStl
( useDlg, fName, skip_s hort_edges, merge_nodes, close_gaps, PATRAN_file, min_dis-
tance )
Description:This function loads geometry from a Ster eolithography (.STL) file. It works like File, Import, Geometry,  
when you pick an STL file. The file is loaded into the current model.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. Only the fName option is used; 
all others are ignored.
If False, the other parameters au tomatically define the STL read 
options.
STRING fName The filename/path of the STL file to be read.BOOL skip_short_edges Set to Tr ue to skip edges that are sh orter than the min_distance set-
ting.
BOOL merge_nodes Set to True to merge all coincident nodes after the file is loaded.
BOOL close_gaps Set to True to atte mpt to close gaps in the STL mesh.
BOOL PATRAN_file Set to True to read a PATRAN generated STL file where negative 
coordinates can run together with no spaces between them.
REAL8 min_distance The minimum distance of short edges to be skipped.Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID You specified a parameter th at was not in the supported range.
FE_NOT_A V AILABLE No FEMAP model is open.FE_FAIL An error occurred while reading the file.
Remarks/Usage:NoneExample:None
 API-266  feFileReadUg
3.4.3.18  feFileReadUg
feFileReadUg
( useDlg, fName, rdBlanked, rdLayers )
Description:This function loads geometry from a Un igraphics (.PRT) file. It works like File, Import, Geometry , 
when you pick a Unigraphics file. The f ile is loaded into the current model.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. Only the fName option is used; 
all others are ignored.If False, the other parameters auto matically define the Unigraphics 
read options.
STRING fName The filename/path of the Unigraphics file to be read.
BOOL rdBlanked Set to True to read parts that are blanked. If False, only unblanked 
parts will be read.
BOOL rdLayers Set to True to read parts th at are on invisible layers. If False, only 
parts on visible layers will be read.
Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID You specified a parameter th at was not in the supported range.
FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
feFileReadSolidWorks   API-267
3.4.3.19  feFileReadSolidWorks
feFileReadSolidWorks
( fName )
Description:This function loads geometry from a SolidWorks part (.sldprt) or assembly (.sldasm) file. It works like 
File, Import, Geometry, when you pick a SolidWorks file. The file is loaded  into the current model
Input:STRING fName The filename/path of the SolidWo rks part or assembly file to be read.
Return Code:FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
 API-268  feFileReadAbaqus
3.4.4  Import Analysis Model
3.4.4.1  feFileReadAbaqus
feFileReadAbaqus
( brand, fName )
Description:This function loads finite element mo del data from an existing ABAQUS file.
Input:INT4 brand Used to select the format of  the ABAQUS file. 0=Abaqus Input File 
(.INP), 1=Abaqus Results File (.FIL)
STRING fName The filename of th e ABAQUS input file to read.
Output:NoneReturn Code:FE_INV ALID You specified an invalid value for the brand option.FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
feFileReadAnsys   API-269
3.4.4.2  feFileReadAnsys
feFileReadAnsys
( brand, fName )
Description:This function loads finite element mo del data from an existing ANSYS file.
Input:INT4 brand Used to select the format of the ANSYS input file. 4 = Version 4, 5 = 
Version 5+.
STRING fName The filename of the ANSYS input file to read.Output:NoneReturn Code:FE_INV ALID You specified an invalid value for the brand option.FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
 API-270  feFileReadDyna
3.4.4.3  feFileReadDyna
feFileReadDyna
( brand, fName )
Description:This function loads finite element model data from an existing LS-DYNA file.
Input:INT4 brand Used to select the format of  the DYNA file. Currently this MUST be 
specified as 1=DYNA Results file.
STRING fName The filename of the DYNA file to read.Output:NoneReturn Code:FE_INV ALID You specified an invalid value for the brand option.FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
feFileReadMarc   API-271
3.4.4.4  feFileReadMarc
feFileReadMarc
( brand, fName )
Description:This function loads finite element mo del data from an existing Marc file.
Input:INT4 brand Used to select the format of  the Marc file. Currently this MUST be 
specified as 1=Marc Results file.
STRING fName The filename of the Marc file to read.Output:NoneReturn Code:FE_INV ALID You specified an invalid value for the brand option.FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
 API-272  feFileReadNastran
3.4.4.5  feFileReadNastran
feFileReadNastran
( brand, fName )
Description:This function loads finite element mo del data from an existing NASTRAN file.
Input:INT4 brand Used to select the format  of the NASTRAN input file: 0=MSC, 
1=NE, 2=UAI, 3=CSA, 4=SSS, 5=Cosmic, 6=ME, 7=VR, 8=NX.
STRING fName The filename of th e NASTRAN input file to read.
Output:NoneReturn Code:FE_INV ALID You specified an invalid value for the brand option.FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
feFileReadPatran   API-273
3.4.4.6  feFileReadPatran
feFileReadPatran
( fName, bSaveZeroDispAsBC )
Description:This function loads finite element mo del data from an existing Patran file.
Input:STRING fName The filename of th e Patran input file to read.
BOOL bSaveZeroDispAsBC If True, Zero Nodal Displacements are stored as Constraints. If 
False, they are stored as loads.
Output:NoneReturn Code:FE_NOT_EXIST The file you specified does not exist.FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
 API-274  feFileReadIdeas
3.4.4.7  feFileReadIdeas
feFileReadIdeas
( fName )
Description:This function loads finite elemen t data from an existing I-DEAS Universal (.UNV) file. It works like 
File, Import, Analysis Model , when you pick I-DEAS file. The file  is loaded into the current model.
Input:STRING fName The filename/path of the I-DEAS Universal file to be read.
Output:NoneReturn Code:FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
FE_FAIL No FEMAP model is open.Remarks/Usage:This call replaces an older version of feFileReadId eas, which was used to import I-DEAS Geometry 
(.IDI) files. It is no longer possible to import *IDI  files into FEMAP and anot her geometry format, such 
as STEP or IGES, should be used to tr ansfer geometry fro m I-DEAS to FEMAP.
Example:None
feFileReadAbaqusResults   API-275
3.4.5  Import Analysis Results
3.4.5.1  feFileReadAbaqusResults
feFileReadAbaqusResults
( brand, fName )
Description:This function loads finite element resu lts data from an existing ABAQUS file.
Input:INT4 brand Used to select the format of the ABAQUS file. Currently this MUST 
be specified as 1=Ab aqus Results file.
STRING fName The filename of the ABAQUS results file to read.
Output:NoneReturn Code:FE_INV ALID You specified an invalid value for the brand option.FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
 API-276  feFileReadAnsysResults
3.4.5.2  feFileReadAnsysResults
feFileReadAnsysResults
( brand, fName )
Description:This function loads finite element resu lts data from an existing ANSYS file.
Input:INT4 brand Used to select the format of the ANSYS results file. 4 = Version 4, 5 
= Version 5..9, 10 = 10 and up.
STRING fName The filename of th e ANSYS results file to read.
Output:NoneReturn Code:FE_INV ALID You specified an invalid value for the brand option.FE_FAIL No FEMAP model is open.Remarks/Usage:This function can read results files from st ructural (.RST) and thermal analyses (.RTH).
Example:None
feFileReadDynaResults   API-277
3.4.5.3  feFileReadDynaResults
feFileReadDynaResults
( brand, fName )
Description:This function loads finite element resu lts data from an existing LS-DYNA file.
Input:INT4 brand Used to select the format of  the DYNA file. Currently this MUST be 
specified as 1=DYNA Results file.
STRING fName The filename of the DYNA results file to read.Output:NoneReturn Code:FE_INV ALID You specified an invalid value for the brand option.FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
 API-278  feFileReadMarcResults
3.4.5.4  feFileReadMarcResults
feFileReadMarcResults
( brand, fName )
Description:This function loads finite element resu lts data from an existing Marc file.
Input:INT4 brand Used to select the format of  the Marc file. Currently this MUST be 
specified as 1=Marc Results file.
STRING fName The filename of the Marc file to read.Output:NoneReturn Code:FE_INV ALID You specified an invalid value for the brand option.FE_FAIL No FEMAP model is open.Remarks/Usage:NoneExample:None
feFileReadNastranResults   API-279
3.4.5.5  feFileReadNastranResults
feFileReadNastranResults
( brand, fName )
Description:This function loads finite element resu lts data from an exis ting NASTRAN file.
Input:INT4 brand Used to select the format of the NASTRAN results file: 0=MSC, 
1=NE, 2=UAI, 3=CSA, 4=SSS, 5=Cosmic, 6=ME, 7=VR, 8=NX.
STRING fName The filename of the NASTRAN results file to read.Output:NoneReturn Code:FE_INV ALID You specified an invalid value for the brand option.FE_FAIL No FEMAP model is open.Remarks/Usage:This function can read both NASTRAN printed re sults file (.F06) or OUTPUT2 files (.OP2).
Example:None
 API-280  feFileReadCSVResults
3.4.5.6  feFileReadCSVResults
feFileReadCSVResults
( fName )
Description:This function loads finite element results data from an existing CSV (comma-separated values) file for-
matted for use with FEMAP. 
Input:STRING fName The filename of th e CSV results file to read.
Output:NoneReturn Code:FE_FAIL No FEMAP model is open.Remarks/Usage:This call automatically determines if  output is stored using the “C omma-Separated Table Format” or 
“Extended Comma-Separated Table Format”, then re ads the results. See Section 8.l0.3 “The Comma-
Separated Table Format” or Section 8.10.4 “The Extended Comma-Separated Table Format” in the 
FEMAP User Guide fo r more information.
Example:None
feFileAttachResults   API-281
3.4.6  Attach To Results File
3.4.6.1  feFileAttachResults
feFileAttachResults
( brand, fName, memory_mapped_file )
Description:This method is used to Attach a Results File to Femap for postprocessing.
Input:INT4 brand Analysis Program of Results File to Attach. 4 = MSC Nastran 
(FAP_MSC_NASTAN), 31 = NEi Nastran (FAP_NE_NASTRAN), 36 = NX Nastran (FAP_NX_NASTRAN), 16 = ABAQUS 
(FAP_ABAQUS), 12 = CSV File (FAP_TABLE), 1 = FNO File 
(FAP_FEMAP_GEN)
STRING fName The filename and path of the Results File to Attach.
BOOL memory_mapped_file If True Operating System  attempts to load file into System RAM 
Output:NoneReturn Code:FE_FAIL Error Attaching to Results File.FE_INV ALID Solver is not supported.Remarks/Usage:NoneExample:None
 API-282  feFileAttachManage
3.4.6.2  feFileAttachManage
feFileAttachManage
( attSetID, opt, fName )
Description:This method is used to Manage Attached Results.
Input:INT4 attSetID ID if Femap Set that contains  the Attached IDs. Alternatively, if you 
specify a negative value, this is si mply the ID of a single Attached 
Results Set.
INT4 opt Manage Options:
FMRA_LOADFMRA_UNLOAD
FMRA_DETACH 
FMRA_UPDATE_PATH
STRING fName The filename and path of the Results file.Output:NoneReturn Code:FE_FAIL Failed to perform  operation on Results.
Remarks/Usage:NoneExample:
Sub Main
    Dim App As femap.model
    Set App = feFemap()    Dim atts As femap.Set
    Set atts =  App.feSet
    Dim fName As String
    rc = atts.Select(FT_RES_ATTACH , True, “Select Attach” )
    App.feFileAttachManage( atts.ID , FMRA_UNLOAD , fName )End Sub
feFileAttachInfo   API-283
3.4.6.3  feFileAttachInfo
feFileAttachInfo
( ID, status, ModelName, pOutSets )
Description:This method retrieves information for the selected Attached Results. 
Input:INT4 ID ID of Attached Re sults to retrieve info.
Output:INT4 status Status of the Results:
FRA_UNLOADED
FRA_OPEN
FRA_OPEN_CHECKFRA_ERROR
FRA_UNLOAD_CHECK
STRING ModelName The filename of  the selected Attached Results. 
OBJECT pOutputSets A Set object that contains  the Femap Output Sets that are associated 
with the selected Results. 
Return Code:FE_FAIL Error retrieving in fo from Attach ed Results.
Remarks/Usage:For any method where API obje cts are returned as parameters, such as this one, it is your responsibility 
to free that object when you are finished using the object. Some pr ogramming languages like Basic will 
do this automatically, but others lik e C++, require you to do this manu ally. The objects are only created 
or returned when the Return Code is FE_OK.
Example:
 API-284  feFileAttachInfo
Sub Main
Dim App As femap.model
Set App = feFemap()Dim atts As femap.Set
Set atts = App.feSet
Dim fName As StringDim ID As Long
Dim cset As femap.Set
Set cset = App.feSetDim status As Long
atts.Select(FT_RES_ATTACH, True, “Select Attached Results”)ID = atts.First()
While ID <> FE_FAIL
     rc = App.feFileAttachInfo( ID, status, fName, cset )
     App.feAppMessage (FCM_NORMAL, "Status " + Str( status ) )     App.feAppMessage (FCM_NORMAL, fName )
     App.feAppMessage (FCM_NORMAL, Str( cset.Count() ) + "Output-
Sets from this Attach”)
     ID = atts.Next()
WendEnd SubfeFileAttachInfo
( ID, status, ModelName, pOutSets )
feFileAttachSaveV2   API-285
3.4.6.4  feFileAttachSaveV2
feFileAttachSaveV2
(ID, outSetID, vecSetID, ndSetID, elSetID )
Description:This method will store Results fro m an Attached File to the Femap Database . The method replaces 
feFileAttachSave. For more informa tion, see Section 2.4, "Working w ith Output in FEMAP 2020.1 and 
above".
Input:INT4 ID ID of Femap Set that contains  the IDs of the At tached Results to 
Save to the Femap Database. Altern atively, if you specify a negative 
value, this is simply the ID of  a single Attached Results Set. 
INT4 outSetID ID of Femap Set that contains  Output Sets to Save. Alternatively, if 
you specify a zero all Output Sets  in the Result File will be saved.
INT4 outVecID ID of Femap Set that contains  Output Vectors to Save. Alternatively, 
if you specify a zero all Output Vectors in the Result File will be saved.
INT4 ndSetID ID of Femap Set that contai ns the nodes where output will be saved. 
Alternatively, if you specify a zero , results for all nodes in the Result 
File will be saved.
INT4 elSetID ID of Femap Set that contains  elements where outp ut will be saved. 
Alternatively, if you specify a zero,  results for all elements in the 
Result File will be saved.
Output:NoneReturn Code:FE_FAIL Error saving results from A ttached File to Femap Database.
Remarks/Usage:When saving results Femap will preserve the Femap Output Set and automatically detach the Results 
File when finished. 
Example:
 API-286  feFileAttachSaveV2
Sub Main
Dim App As femap.model
Set App = feFemap()Dim selID As Long
Dim outvec As femap.Set
Set outvec = App.feSetDim ndset As femap.Set
Set ndset = App.feSet
Dim atts As femap.SetSet atts = App.feSet
atts.SelectID (FT_RES_ATTACH, "Select Attached File To Save", 
selID)
ndset.Select(FT_NODE, True, “Select Nodes”)
outvec.Add(1)
App.feFileAttachSaveV2(-selID, 0, outvec.ID, ndset.ID, 0)
End SubfeFileAttachSaveV2
(ID, outSetID, vecSetID, ndSetID, elSetID )
feFileAttachSave2V2   API-287
3.4.6.5  feFileAttachSave2V2
feFileAttachSave2V2
(ID, outSetID, vecSetID, ndSetID, elSetID, bDetach )
Description:This method will store Results fro m an Attached File to the Femap Database. This method replace 
feFileAttachSave2. For mo re information, see Sec tion 2.4, "Working with Output in FEMAP 2020.1 
and above"
Input:INT4 ID ID of Femap Set that contains  the IDs of the At tached Results to 
Save to the Femap Database. Altern atively, if you specify a negative 
value, this is simply the ID of  a single Attached Results Set. 
INT4 outSetID ID of Femap Set that contai ns Output Sets to Save. If you specify a 
zero all Output Sets in the Result File will be saved. If you specify a 
negative value, this is simply the ID of a single Results Set.
INT4 outVecID ID of Femap Set that contains Output Vectors to Save. If you specify 
a zero all Output Vectors in the Result File will be saved. If you 
specify a negative value, this is simp ly the ID of a single Output Vec-
tor.
INT4 ndSetID ID of Femap Set that contai ns the nodes where output will be saved. 
Alternatively, if you specify a zero , results for all nodes in the Result 
File will be saved.
INT4 elSetID ID of Femap Set that contains  elements where outp ut will be saved. 
Alternatively, if you specify a zero,  results for all elements in the 
Result File will be saved.
BOOL bDetach If True, result file w ill be detached after save operation.
Output:NoneReturn Code:FE_FAIL Error saving results from A ttached File to Femap Database.
Remarks/Usage:If bDetach is False then selected Output Sets will be saved to a new ids. If true then Femap will preserve 
the Femap Output Set and automatically de tach the Results File when finished. 
Example:
 API-288  feFileAttachSave2V2
Sub Main
Dim App As femap.model
Set App = feFemap()
Dim selID As Long
Dim ndset As femap.SetSet ndset = App.feSet
Dim atts As femap.Set
Set atts = App.feSet
atts.SelectID(FT_RES_ATTACH, "Select Attached File To Save", 
selID )
ndset.Select(FT_NODE, True, "Select Nodes" )
App.feFileAttachSave2V2(-selID, -1, -1, ndset.ID, 0, True)
End SubfeFileAttachSave2V2
(ID, outSetID, vecSetID, ndSetID, elSetID, bDetach )
feFileAttachByOutset   API-289
3.4.6.6  feFileAttachByOutset
feFileAttachByOutset
( ID )
Description:This method returns the ID of the A ttached Results. This is the same ID  that is displayed in the Manage 
Results Files Dialog Box. 
Input:INT4 ID ID of Output Set.Output:NoneReturn Code:Attach ID ID of the Attached Results.Remarks/Usage:NoneExample:None
 API-290  feFileReadNeutral
3.4.7  Import/Export Neutral File
3.4.7.1  feFileReadNeutral
feFileReadNeutral
( brand, fName, read_geometry, read_model, read_output, status_messages, offsetID )
Description:This method is the same as calling feFileReadNeutral2 with read_g roups and read_views equal to 
read_model. Refer to that me thod for more information.
Return Code:FE_FAIL No FEMAP model is open.FE_FILE_OPEN_FAILED The neut ral file failed to open.
feFileReadNeutral2   API-291
3.4.7.2  feFileReadNeutral2
feFileReadNeutral2
( brand, fName, read_geometry, read_model, read_output, read_groups, read_views, 
status_messages, offsetID )
Description:This method is the same as calling feFileReadNeutral3 with renumber _layers and renumb er_load_bc set 
to True, and create_new_output set to False.
Return Code:FE_FAIL No FEMAP model is open.FE_FILE_OPEN_FAILED The neut ral file failed to open.
 API-292  feFileReadNeutral3
3.4.7.3  feFileReadNeutral3
feFileReadNeutral3
( brand, fName, read_geometry, read_model, read_output, read_groups, read_views, 
status_messages, offsetID, renumber_layers, renumber_load_bc, create_new_output )
Description:This function reads a FEMAP Neutral file.Input:INT4 brand Used to select the format of  the Neutral file. Not currently used.
STRING fName The filename of the Neutral file to read.
BOOL read_geometry If True, geom etry is read from the file.
BOOL read_model If True, finite elemen t model data is read from the file.
BOOL read_output If True, analysis results will be re ad from the file.
BOOL read_groups If True, groups  will be read from the file.
BOOL read_views If True, views will be read from the file.
BOOL status_messages If True, status messages will be written to the Messages and Lists 
window to show how ma ny entities are read.
INT4 offsetID Normally set to  0. If you specify another value, all IDs that are read 
are offset by this value.
BOOL renumber_layers If True, layers will be re numbered by the offsetID along with the rest 
of the model. If False, they are not renumbered.
BOOL renumber_load_bc If True, Load and Constr aint sets are renumbered by offsetID along 
with the rest of the model. If False, they are not renumbered.
BOOL create_new_output If True, Output Sets are never overwritten - new ones are always cre-
ated. The Output Set IDs in the file are used to determine the order in 
which they are created - the ID is  added to the previous maximum 
Output Set ID in the model. For ex ample, if your model already con-
tained Output Sets up to  10, then if you read Ou tput Set 1 it would be 
stored as 11, Set 2 would become 12 and so on. If your model did not contain output, this option has no effect.
Output:NoneReturn Code:FE_FAIL No FEMAP model is open.FE_FILE_OPEN_FAILED The neut ral file failed to open.
feFileReadNeutral3   API-293
Remarks/Usage:
NoneExample:NonefeFileReadNeutral3
( brand, fName, read_geometry, read_model, read_output, read_groups, read_views, 
status_messages, offsetID, renumber_layers, renumber_load_bc, create_new_output )
 API-294  feFileWriteNeutral
3.4.7.4  feFileWriteNeutral
feFileWriteNeutral
( brand, fName, write_geometry_model, write_analysis_model, write_output, write_ad-
dl_info, expand_geometric, minimize_size, digits, version, groupID )
Description:This method is the same as calling feFileWriteNeutral2 with write_sel ector and write_palette equal to 
True, and write_groups and write_views equal to write_a nalysis_model. Refer to that method for more 
information.
feFileWriteNeutral2   API-295
3.4.7.5  feFileWriteNeutral2
feFileWriteNeutral2
( brand, fName, write_geometry_model, write_analysis_model, write_output, write_se-
lector, write_palette, write_groups, write_views,  write_addl_info, expand_geometric, 
minimize_size, digits, version, groupID )
Description:This function writes a FEMAP Neutral file.Input:INT4 brand Used to select the format of  the Neutral file: 0=FEMAP Neutral (the 
default), 1=CAEFEM, 2=CDA/Sprint, 3=CFDesign, 4=SINDA. The formats other than 0 should not be used unless you are writing a file 
specifically to be used with that program.
STRING fName The filename of the Neutral file to write.BOOL write_geometry_model If True, geometry is written to the file.
BOOL write_analysis_model If True, finite el ement model data is written to the file.
BOOL write_output If True, analysis re sults will be written to the file.
BOOL write_selector If True, selector in formation will be written to the file
BOOL write_palette If True, color palette information will be written to the file
BOOL write_groups If True, grou ps will be written to the file
BOOL write_views If True, views will be written to the fileBOOL write_addl_info If True, some  additional data blocks will be written to the file. This 
should normally be False if the Neut ral file is to be reloaded into 
FEMAP.
BOOL expand_geometric If True, geometric load s and constraints will be expanded before 
being written.
BOOL minimize_size If True, spaces are compressed out of the file to reduce its size.INT4 digits The number of digits of precision for all real numbers (must be 2 to 
20).
REAL8 version The version of the Neutral file to produce. Set to 0.0 to create the lat-
est version. If you do not use 0.0, some model data may not be com-patible with the file y ou write and will be lost.
INT4 groupID The ID of the group to write to the file. Specify 0 to write the entire 
model.
Output:None
 API-296  feFileWriteNeutral2
Return Code:
FE_INV ALID You specified an invalid value for digits.FE_NOT_EXIST You chose a group that does not exist.FE_FAIL An error occurred processing the group.Remarks/Usage:NoneExample:NonefeFileWriteNeutral2
( brand, fName, write_geometry_model, write_analysis_model, write_output, write_se-
lector, write_palette, write_groups, write_views,  write_addl_info, expand_geometric, minimize_size, digits, version, groupID )
feFileWriteFNOV2   API-297
3.4.7.6  feFileWriteFNOV2
feFileWriteFNOV2
( nSetSet, nVectorSet, nGroup, fName )
Description:This function writes a FEMAP Neutral Output File (.FNO). This method replaces feFileWriteFNO. For 
more information, see Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:INT4 nSetSet The ID of a Set Object that contains the IDs of the Output Sets to 
write to the FNO File. If you simply want to write all available Out-
put Sets, specify 0.
INT4 nVectorSet The ID of a Set Object that contains the IDs of the Output Vectors to 
write to the FNO File. If you simply want to write all available Out-
put Vectors, specify 0.
INT4 nGroup The ID of a Group that contains the nodes and/or elements whose 
output will be written. If you specify 0, output for all nodes/elements 
will be written. If the Group contains  only elements and no nodes, 
and you choose to write nodal vectors, only output on the nodes con-
nected to the selected elements will be written.  If the Group contains 
nodes, then output on only those nodes will be written.
STRING fName The filename of the FNO file to write.Output:NoneReturn Code:FE_FAIL An error occurred writing the FNO file.Remarks/Usage:This method allows you to extract all or a subset of results from the FEMAP database or other attached 
results files and write it to a FEMAP Neutral Output F ile which can then be either read into the FEMAP 
database or attached.
Example:None
 API-298  feFileWriteFNO2V2
3.4.7.7  feFileWriteFNO2V2
feFileWriteFNO2V2
( nSetSet, nVectorSet, nOuptutOnGroup, nElementConnectivityGroup, fName )
Description:This function writes a FEMAP Neutral Output File (. FNO) with option to also  include element connec-
tivity records in the file. This method replaces feF ileWriteFNO2. For more information, see Section 2.4, 
"Working with Output in FEMAP 2020.1 and above".
Input:INT4 nSetSet The ID of a Set Object that contains the IDs of the Output Sets to 
write to the FNO File. If you simply want to write all available Out-put Sets, specify 0.
INT4 nVectorSet The ID of a Set Object that contains the IDs of the Output Vectors to 
write to the FNO File. If you simply want to write all available Out-
put Vectors, specify 0.
INT4 nOutputOnGroup The ID of a Group that contains the nodes and/or elements whose 
output will be written. If you specify 0, output for all nodes/elements 
will be written. If the Group contains  only elements and no nodes, 
and you choose to write nodal vectors, only output on the nodes con-
nected to the selected elements will be written. If the Group contains 
nodes, then output on only those nodes will be written.
INT4 
nElementConnectivityGroupDoes not affect output being sent to the FNO. The ID of a Group that 
contains plot only elements to be  written. If you specify 0, no ele-
ments will be written to the FNO file.
STRING fName The filename of the FNO file to write.Output:NoneReturn Code:FE_FAIL An error occurred writing the FNO file.Remarks/Usage:This method allows you to extract all or a subset of results from the FEMAP database or other attached 
results files and write it to a FEMAP Neutral Output F ile which can then be either read into the FEMAP 
database or attached. It also allows element connectivity records to be written to the FNO.
Example:None
feFileWriteFNO3V2   API-299
3.4.7.8  feFileWriteFNO3V2
feFileWriteFNO3V2
( nSetSet, nVectorSet, nOuptutOnGroup, nElementConnectivityGroup, fName )
Description:This function writes a FEMAP Neutral Output File (. FNO) with option to also  include element connec-
tivity records in the file. The file version must be specified for the ma p of output vector IDs. For more 
information, see Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:INT4 nSetSet The ID of a Set Object that contains the IDs of the Output Sets to 
write to the FNO File. If you simply want to write all available Out-put Sets, specify 0.
INT4 nVectorSet The ID of a Set Object that contains the IDs of the Output Vectors to 
write to the FNO File. If you simply want to write all available Out-
put Vectors, specify 0.
INT4 nOutputOnGroup The ID of a Group that contains the nodes and/or elements whose 
output will be written. If you specify 0, output for all nodes/elements 
will be written. If the Group contains  only elements and no nodes, 
and you choose to write nodal vectors, only output on the nodes con-
nected to the selected elements will be written. If the Group contains 
nodes, then output on only those nodes will be written.
INT4 
nElementConnectivityGroupDoes not affect output being sent to the FNO. The ID of a Group that 
contains plot only elements to be  written. If you specify 0, no ele-
ments will be written to the FNO file.
INT4 nFileVersion The version of file to write.STRING fName The filename of the FNO file to write.Output:NoneReturn Code:FE_FAIL An error occurred writing the FNO file.Remarks/Usage:This method allows you to extract all or a subset of results from the FEMAP database or other attached 
results files and write it to a FEMAP Neutral Output F ile which can then be either read into the FEMAP 
database or attached. It also allows element connectivity records to be written to the FNO.
Example:None
 API-300  feFileWriteAcis
3.4.8  Export Geometry
3.4.8.1  feFileWriteAcis
feFileWriteAcis
( useDlg, fName, version, solidSET )
Description:This function writes solids from you r model into a ACIS SAT file.
Input:BOOL useDlg If True, the function runs inte ractively. The dialog box that asks you 
to pick the solids to write will be displayed. 
STRING fName The filename of the ACIS SAT file to write.REAL8 version The ACIS version number of the file to be written. Set this to 0 to use 
the current version of ACIS. Ava ilable previous versions are the 
same numbers as displayed in th e dialog box when you run the File, 
Export, Geometry  command.
INT4 solidSET The ID of a selection set that contains the IDs of the solids to write. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to write. Not used if useDlg=True.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
feFileWriteIges   API-301
3.4.8.2  feFileWriteIges
feFileWriteIges
(  fName,  spline_curves, spline_surfaces, bounded_surfaces, customization, sur-
face_options, export_as, solidSET )
Description:This function writes selected solids to an IGES file.Input:STRING fName The filename of the IGES file to write.BOOL spline_curves If True, all curves are written as splines.BOOL spline_surfaces If True, surfaces are written as splines.BOOL bounded_surfaces If True, surfaces will be written as Type  143, bounded surfaces. Oth-
erwise, Type 144 trimmed surfaces will be written.
INT4 customization Controls the IGES cust omization options: 0= None, 1=AutoCAD, 
2=JAMA-IS, 3=I-DEAS.
INT4 surface_options Controls how trimmi ng curves will be written: 0=Both, 1=2D 
Curves, 2=3D Curves.
INT4 export_as Controls how to write so lids: 0=Solid MSBO, 1=Trimmed Surfaces, 
2=Wireframe.
INT4 solidSET The ID of a selection set that contains the IDs of the solids to write. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to write.
Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID You specified a parameter th at was not in the supported range.
FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
Remarks/Usage:Only Parasolid solids can be written to an IGES file.Example:None
 API-302  feFileWriteParasolid
3.4.8.3  feFileWriteParasolid
feFileWriteParasolid
( useDlg, fName, version, solidSET )
Description:This function writes solids from your model into a Parasolid X_T file.
Input:BOOL useDlg If True, the function runs inte ractively. The dialog box that asks you 
to pick the solids to write will be displayed. 
STRING fName The filename of th e Parasolid X_T file to write.
REAL8 version The Parasolid version number of the file to be written. Set this to 0 to 
use the current version of Parasolid . Available previous versions are 
the same numbers as displayed in the dialog box when you run the File, Export, Geometry  command.
INT4 solidSET The ID of a selection set that contains the IDs of the solids to write. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to write. Not used if useDlg=True.
Output:NoneReturn Code:NoneRemarks/Usage: NoneExample:None
feFileWriteStep2   API-303
3.4.8.4  feFileWriteStep2
feFileWriteStep2
(  fName,  solidSET )
Description:This function writes selected solids to a STEP file.Input:STRING fName The filename of the STEP file to write.INT4 solidSET The ID of a selection set that contains the IDs of the solids to write. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to write.
INT4 format The format to use when exporting the STEP file, 0=AP203, 
1=AP203 Edition 2, 2=AP214
Output:NoneReturn Code:FE_INV ALID You specified a parameter th at was not in the supported range.
FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
Remarks/Usage:NoneExample:None
 API-304  feFileWriteStep
3.4.8.5  feFileWriteStep - Obsolete
feFileWriteStep
(  fName,  solidSET )
Description:This method is obsole te and should no longer be used . Use feFileWriteStepOpt2 instead.
This function writes selected solids to a STEP file.
Input:STRING fName The filename of the STEP file to write.INT4 solidSET The ID of a selection set that contains the IDs of the solids to write. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to write.
Output:NoneReturn Code:FE_CANCEL The user aborted the oper ation by cancelling a dialog box.
FE_INV ALID You specified a parameter th at was not in the supported range.
FE_NOT_A V AILABLE The required module for this  function is not load ed on this system.
FE_SECURITY The required module for this function  is not properly licensed.
Remarks/Usage:NoneExample:None
feFileWriteJT   API-305
3.4.8.6  feFileWriteJT
feFileWriteJT
(  fName,  solidSET )
Description:This function writes selec ted solids to a JT file.
Input:STRING fName The filename of the STL file to write.INT4 solidSET The ID of a selection set that contains the IDs of the solids to write. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to write.
Output:None
Return Code:
FE_FAIL Unable to Export.FE_INV ALID Found a Solid that wasn’t Parasolid.FE_NOT_EXIST No Parasolid Solids selected to output.
FE_NOT_A V AILABLE JT exporter not installed/found.Remarks/Usage:NoneExample:None
 API-306  feFileWriteStl
3.4.8.7  feFileWriteStl
feFileWriteStl
(  fName,  elemSET )
Description:This function writes elements, or the faces of elements (solids) in to a stereolithography (STL) file.
Input:STRING fName The filename of the STL file to write.INT4 elemSET The ID of a selection set that contains the IDs of the elements to 
write. Alternatively, if you specify a negative value, this is simply the 
ID of the single element to write.
Output:None
Return Code:
NoneRemarks/Usage:All entities written to the STL file are in the form of  triangles. Any quadrilatera l faces that are selected 
are split into two triangles. Faces w ith midside nodes are split into mu ltiple triangles. Planar elements 
are written “as-is”, while solid elements are comb ined and only their “ free-faces” are written.
Example:None
feFileWriteTopologyStl   API-307
3.4.8.8  feFileWriteTopologyStl
feFileWriteTopologyStl
(  fName,  solidSET )
Description:This function writes elements from criteria plot into a stereolithography (STL) file.
Input:STRING fName The filename of the STL file to write.Output:NoneReturn Code:FE_FAIL Unable to Export.Remarks/Usage:A criteria plot of the model must be shown in the active view to write an STL file. All entities written to 
the STL file are in the form of triangles. Any quadr ilateral faces that are select ed are split into two trian-
gles. Faces with midside nodes are split into multiple  triangles. Planar elem ents are written “as-is”, 
while solid elements are combined an d only their “free-faces” are written.
Example:None
 API-308  feFileWriteVrml
3.4.8.9  feFileWriteVrml
feFileWriteVrml
(  fName, version, write_solid, single_color, write_deformed, write_contour, write_back-
ground, background_color, color, solidSET )
Description:This function writes either elem ents or solids to a VRML file.
Input:STRING fName The filename of the VRML file to write.REAL8 version Either 1.0 or 2.0. Specifies the version of VRML to write.BOOL write_solid If True, the solids selected  in solidSET will be written to the VRML 
file; otherwise, the elements disp layed in the active view will be 
written.
BOOL single_color If True, all entities are written in the color specified.BOOL write_deformed If True and elements are written and the current view style is 
deformed, then the ge ometry written is in its deformed location.
BOOL write_contour If True and elements are writ ten and the current view style is contour, 
then the geometry written will include contour information.
BOOL write_background If True, a plane represen ting the background is written along with the 
model geometry.
INT4 background_color If the backgroun d is written, this is its color.
INT4 color If single_color=True, this  is the color used for all entities.
INT4 solidSET If write_solid=True,  then this is the ID of a selection set that contains 
the solids to write. Alte rnatively, you can speci fy a negative number 
that will be the ID of a single solid to write.
Output:NoneReturn Code:FE_INV ALID One of the color values is outside of its acceptable range.
Remarks/Usage:NoneExample:None
feFileWriteAbaqus   API-309
3.4.9  Export Analysis Model
3.4.9.1  feFileWriteAbaqus
feFileWriteAbaqus
( brand, fName )
Description:This function writes an ABAQUS input file.Input:INT4 brand Not currently used.STRING fName The filename of th e ABAQUS input file to write.
Output:None
Return Code:
NoneRemarks/Usage:If you have an active analysis set, preferably one that has ABAQUS selected as the solver, then no dia-
log boxes will be displayed. If not, th is function will display dialog boxes to collect whatever data that it 
needs to complete the file using th e legacy analysis translator. The global variable Pref_AnalysisType is 
used to determine the type of analysis that is to be performed by the file.
Example:None
 API-310  feFileWriteAnsys
3.4.9.2  feFileWriteAnsys
feFileWriteAnsys
( brand, fName )
Description:This function writes an ANSYS input file.
Input:INT4 brand Not currently used.STRING fName The filename of the ANSYS input file to write.Output:NoneReturn Code:NoneRemarks/Usage:If you have an active analysis set, preferably one that has ANSYS selected as the solver, then no dialog 
boxes will be displayed. If not, this function will di splay dialog boxes to collect  whatever data that it 
needs to complete the file using th e legacy analysis translator. The global variable Pref_AnalysisType is 
used to determine the type of analysis that is to be performed by the file.
Example:None
feFileWriteDyna   API-311
3.4.9.3  feFileWriteDyna
feFileWriteDyna
( brand, fName )
Description:This function writes an LS-DYNA input file.Input:INT4 brand Not currently used.STRING fName The filename of the DYNA file to write.Output:NoneReturn Code:NoneRemarks/Usage:If you have an active analysis set, preferably one th at has LS-DYNA selected as the solver, then no dia-
log boxes will be displayed. If not, th is function will display dialog boxes to collect whatever data that it 
needs to complete the file using th e legacy analysis translator. The global variable Pref_AnalysisType is 
used to determine the type of analysis that is to be performed by the file.
Example:None
 API-312  feFileWriteIdeas
3.4.9.4  feFileWriteIdeas
feFileWriteIdeas
( fName, PartName, WriteGroups, AbsoluteTempScale, UnitSystem, UserLengthFactor, 
UserForceOrMass, UserForceOrMassFactor , UserTempFactor, UserTempOffset)
Description:This function writes an I-DEAS universal file.Input:STRING fName The filename of the I-DEAS universal file to write.STRING PartName The “Part Name” sp ecified in the universal file.
BOOL WriteGroups When True, groups in the model will be written to the universal file. 
When False, no groups are written.
BOOL AbsoluteTempScale When Tr ue, sets the “Temperature Mode” to Kelvin or Rankine 
(depends on option set in UnitSystem ), while False sets it to either 
Celsius or Fahrenheit.
INT4 UnitSystem Sets Unit Systems. 1=SI: Meter (newton), 2=BG: Foot (pound f), 
3=MG: Meter (kilogram f), 4=BA: Foot (poundal), 5=MM: mm 
(milli-newton), 6=CM: cm (centi-n ewton), 7=IN: Inch (pound f), 
8=GM: mm (kilogram f), 9=MN : mm (newton), 10=US: User 
Defined (“User” values below only used when set to 10)
REAL8 UserLengthFactor “units/meter” scale factorBOOL UserForceOrMass When True, uses units/force. When False, uses units/mass REAL8 
UserForceOrMassFactor“units/force” or “units/mass” scale factor 
REAL8 UserTempFactor “units/degree” scale factor (UnitSystem = User Defined only)
REAL8 UserTempOffset offset from temperat ure (UnitSystem = User Defined only)
Output:NoneReturn Code:FE_INV ALID You specified an invalid value.FE_BAD_DATA Your model is invalid or contains unsupported dataRemarks/Usage:This function matches using the File, Export, Analysis Model  command and I-DEAS  has been selected.
Example:None
feFileWriteMarc   API-313
3.4.9.5  feFileWriteMarc
feFileWriteMarc
( brand, fName )
Description:This function writes a Marc input file.Input:INT4 brand Not currently used.STRING fName The filename of the Marc file to read.Output:NoneReturn Code:NoneRemarks/Usage:If you have an active analysis set, preferably one th at has MARC selected as the solver, then no dialog 
boxes will be displayed. If not, this function will di splay dialog boxes to collect  whatever data that it 
needs to complete the file using th e legacy analysis translator. The global variable Pref_AnalysisType is 
used to determine the type of analysis that is to be performed by the file.
Example:None
 API-314  feFileWriteNastran
3.4.9.6  feFileWriteNastran
feFileWriteNastran
( brand, fName )
Description:This function writes a NASTRAN input file.Input:INT4 brand Used to select the format  of the NASTRAN file. 0=MSC, 1=NE, 
2=UAI, 3=CSA, 4=SSS, 5=Cosmic, 6=ME, 7=VR, 8=NX.
STRING fName The filename of th e NASTRAN input file to write.
Output:NoneReturn Code:FE_INV ALID You specified an invalid value for the brand option.Remarks/Usage:If you have an active analysis set, preferably one that has the appropriate “brand” of NASTRAN 
selected as the solver, then  no dialog boxes will be displayed. If not, this function will display dialog 
boxes to collect whatever data that it needs to complete the file using the specified legacy analysis trans-
lator. The global variable Pref_AnalysisType is used to  determine the type of anal ysis that is to be per-
formed by the file.
Example:None
feFileWriteSTAAD   API-315
3.4.9.7  feFileWriteSTAAD
feFileWriteSTAAD
( fName, AnalysisType, sStructType, sLengthUnits, sForceUnits, sPropUnits, 
dGravConstant, bModalCalc, dModalCutOffFreq, nModalCutOffMode, 
bPrintModel, bPrintDisp, bPrintReactions, bPrintMemberForces, 
bPrintMemberStresses, bPrintElemForces, bPrintJointForces, 
bPostDisp, bPostSectionDisp, bPostMemberForces, bPostStresses)
Description:This function writes a STAAD input file.Input:STRING fName The filename of the STAAD input file to write.INT4 AnalysisType 1=Static, 2=ModesSTRING sStructType “PLANE”, “SPACE”, “TRUSS”, “FLOOR” or “DATA”STRING sLengthUnits “INCHES”, “FEET”, “CM”, “METER”, “MMS”, “DME” or “KM”STRING sForceUnits “KIP”, “POUND”, “KG”, “MTON”, “NEWTON”, “KNS”, “MNS” 
or “DNS”
STRING sPropUnits “INCHES”, “FEET”, “CM”, “METER”, “MMS”, “DME” or “KM”REAL8 dGravConstant The gravity constantBOOL bModalCalc True=MODAL CALC ULATION REQUESTED,   False=CALCU-
LATE NATURAL FREQUENCY . Only used if AnalysisType is 
Modes.
REAL8 dModalCutOffFreq The maximum frequency re quested. Only used if AnalysisType is 
Modes.
INT4 nModalCutOffMode The maximum mode number requested. Only used if AnalysisType 
is Modes.
BOOL bPrintModel 
BOOL bPrintDisp 
BOOL bPrintReactions 
BOOL bPrintMemberForces 
BOOL bPrintMemberStresses 
BOOL bPrintElemForces 
BOOL bPrintJointForcesIf True, the associated info rmation/output is printed
BOOL bPostDisp 
BOOL bPostSectionDisp 
BOOL bPostMemberForces 
BOOL bPostStressesIf True, the associated results  are written for postprocessing.
Output:
 API-316  feFileWriteSTAAD
None
Return Code:FE_INV ALID You specified an invalid value.FE_BAD_DATA Your model is invalid or contains unsupported dataRemarks/Usage:NoneExample:NonefeFileWriteSTAAD
( fName, AnalysisType, sStructType, sLengthUnits, sForceUnits, sPropUnits, 
dGravConstant, bModalCalc, dModalCutOffFreq, nModalCutOffMode, 
bPrintModel, bPrintDisp, bPrintReactions, bPrintMemberForces, 
bPrintMemberStresses, bPrintElemForces, bPrintJointForces, 
bPostDisp, bPostSectionDisp, bPostMemberForces, bPostStresses)
feNotesGet   API-317
3.4.10  Notes
3.4.10.1  feNotesGet
feNotesGet
( noteSET, notes )
Description:This function retrieves the currently defined model notes.
Input:INT4 noteSET 1 = Model Notes, 2 = Translation TextOutput:STRING notes The string containing the notes.Return Code:
FE_FAIL An error occurred allocating the notes string.
FE_NOT_EXIST There are no currently defined notes.Remarks/Usage:This function automatically allocat es/reallocates the string for the returned notes. Notes can contain 
multiple lines and will have carriage return (CR) and linefeed (LF) char acters between the lines. It is the 
responsibility of the calling program to free th e memory allocated to the returned string.
Example:None
 API-318  feNotesPut
3.4.10.2  feNotesPut
feNotesPut
( noteSET, clear, notes )
Description:This function updates the currently defined model notes.Input:INT4 noteSET 1 = Model Notes, 2 = Translation TextBOOL clear If True, any existing notes ar e deleted before these notes are added; 
otherwise, this function ap pends to the current notes.
STRING notes The string containing the notes to add.Output:NoneReturn Code:FE_FAIL An error occurred creating the notes.Remarks/Usage:If you want to create notes with multiple lines, yo u must add carriage return (CR) and linefeed (LF) 
characters between the lines. For ex ample, from Basic, you could use:
s = "First Line" & Chr(13) & Chr(10) & "Second Line"rc = femap.feNotesPut(1, True, s)
Example:None
feFilePageSetupSave   API-319
3.4.11  Print and Copy
3.4.11.1  feFilePageSetupSave
feFilePageSetupSave
( void )
Description:This function permanently save s the current page setup settings . It is the same as pressing the Perma-
nent button in the Page Setup command.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-320  feFilePageSetupReset
3.4.11.2  feFilePageSetupReset
feFilePageSetupReset
( void )
Description:This function sets all of the page setup settings back to  their default values. It is the same as pressing the 
Reset  button in the Page Setup command.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
feFilePrint   API-321
3.4.11.3  feFilePrint
feFilePrint
( useDlg, asBitmap, source, fromFile, toFile )
Description:This function is obso lete. You should use feFilePrint2( ) instead
This function invokes the printing function. It can be u sed to print data that is in the current session, or 
saved in a file.
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. If False, the other parameters 
automatically define the printing options.
BOOL asBitmap If True, printing is done at screen (bitmap) resolution. If False, print-
ing is in printer resolution.
INT4 source Selects the data  to print. (Active View=0 , Desktop=1, File=2, Multi-
View Layout=3, Messag es=4, Program File=5, Entity Info=6, API 
Programming=7, Data Table=8) 
STRING fromFile Only used if source=2, print from file. In this case, this is the full 
pathname of the file to print.
STRING toFile Complete path/filename of prin t destination. If blank, print will go to 
the current printer.
Output:NoneReturn Code:FE_CANCEL User cancelled the dialog box.FE_FAIL An error occurred while printing.Remarks/Usage:NoneExample:None
 API-322  feFilePrint2
3.4.11.4  feFilePrint2
feFilePrint2
( useDlg, source, toFile )
Description:This function invokes the printing function. 
Input:BOOL useDlg If True, the function runs inte ractively and displays a dialog box to 
allow the user to define the optio ns. If False, the other parameters 
automatically define the printing options.
INT4 source Selects the data  to print. (Active View=0 , Desktop=1, File=2, Multi-
View Layout=3, Messag es=4, Program File=5, Entity Info=6, API 
Programming=7, Data Table=8, Charting=9) 
STRING toFile Complete path/filename of prin t destination. If blank, print will go to 
the current printer.
Output:
NoneReturn Code:FE_CANCEL User cancelled the dialog box.FE_FAIL An error occurred while printing.Remarks/Usage:NoneExample:None
feFilePictureCopy   API-323
3.4.11.5  feFilePictureCopy
feFilePictureCopy
( void )
Description:This function copies the cont ents of the current Graphics window to the clipboard.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method is obsolete. Fo r new applications you should use feFilePictureCopy2( )
If you are copying a bitmap, then vi ew that you are copying must be visible on the screen. If it is par-
tially or fully obscured by other applications, then the picture that you copy will not be correct. 
Example:None
 API-324  feFilePictureCopy2
3.4.11.6  feFilePictureCopy2
feFilePictureCopy2
( saveRegion )
Description:This function copies portions of the screen to the clipboard.
Input:INT4 saveRegion 0=Graphics Window, 1=Layout, 2=Entire DesktopOutput:NoneReturn Code:NoneRemarks/Usage:If you are copying a bitmap, then vi ew that you are copying must be visible on the screen. If it is par-
tially or fully obscured by other applications, then the picture that you copy will not be correct. 
Example:None
feFilePictureSave   API-325
3.4.11.7  feFilePictureSave
feFilePictureSave
( useDlg, saveDesktop, format, fName )
Description:This function copies the contents of the current Gr aphics window (or the en tire desktop) to a file.
Input:BOOL useDlg If True, this function runs interactively and displays a dialog box to 
ask the user to define the format and fName options.
BOOL saveDesktop If True, the entire desktop (scr een) is copied to the file. If False, only 
the contents of the active Graphics window are copied. If you are 
copying the desktop, the only valid  formats are Bitmap, JPEG, PNG, 
GIF, and TIFF
INT4 format The format of the file to create. 1=Bitmap, 2=Metafile, 3=Placeable 
Metafile, 4=JPEG, 5=Bitmap Series , 6=A VI, 7=JT, 8=“Reserved for 
internal use”, 9=GIF, 10=Animated GIF, 11=TIF, 12=PNG.  Bitmap Series, Animated GIF, and A VI fo rmats are only available for ani-
mating windows. Metafiles and Pla ceable Metafiles are only avail-
able for non-Render windows.
STRING fName The name of the file to create.Output:NoneReturn Code:FE_INV ALID You specified an invalid format.FE_FAIL An error occurred saving the file.Remarks/Usage:This method is obso lete - you should use feFilePict ureSave2 for new applications.
If you are saving a bitmap, then view  that you are saving must be visibl e on the screen. If it is partially 
or fully obscured by other applications, then the file that you create will not be correct. 
Example:None
 API-326  feFilePictureSave2
3.4.11.8  feFilePictureSave2
feFilePictureSave2
( useDlg, saveRegion, format, fName )
Description:This function copies the contents of the current Gr aphics window (or the en tire desktop) to a file.
Input:BOOL useDlg If True, this function runs interactively and displays a dialog box to 
ask the user to define the format and fName options.
INT4 saveRegion 0=Graphics Window, 1=Layout, 2=Entire DesktopINT4 format The format of the file to create. 1=Bitmap, 2=Metafile, 3=Placeable 
Metafile, 4=JPEG, 5=Bitmap Series , 6=A VI, 7=JT, 8=“Reserved for 
internal use”, 9=GIF, 10=Animated GIF, 11=TIF, 12=PNG.  Bitmap Series, Animated GIF, and A VI fo rmats are only available for ani-
mating windows. Metafiles and Pla ceable Metafiles are only avail-
able for non-Render windows.
STRING fName The name of the file to create.Output:NoneReturn Code:FE_INV ALID You specified an invalid format.FE_FAIL An error occurred saving the file.Remarks/Usage:If you are saving a bitmap, then view  that you are saving must be visibl e on the screen. If it is partially 
or fully obscured by other applications, then the file that you create will not be correct. 
Example:None
feFilePictureReplay   API-327
3.4.11.9  feFilePictureReplay
feFilePictureReplay
( fName )
Description:This function replays an ex isting bitmap or metafile.
Input:STRING fName The name of the picture to re play - must be a bitmap or metafile.
Output:NoneReturn Code:FE_FAIL An error occurred replaying the pi cture - most likely the file does not 
exist.
Remarks/Usage:This function displays the picture using the FEMAP Replay program, which is launched in a separate 
window. There is no function availa ble to automatically close this re play window. The Replay program 
can only replay bitmaps and metafile s. Other picture file formats can be saved, but cannot be replayed 
using this method.
Example:None
 API-328  feFilePictureSaveJT
3.4.11.10  feFilePictureSaveJT
feFilePictureSaveJT
( UseDlg, fName, eJTFileVErsion, eJTFileUnits, JTHierarchy, eLoadSetOption, Load-
Sets, eBCSetOption, BCSets, LinesAsCylinders, dCylinderFactor )
Description:This function saves a “Standard Output” JT visualization file using the specified options
Input:BOOL UseDlg If True, this function runs inte ractively and displays a dialog box to 
ask the user to define fName and al l other available options to create 
a JT visualization file.
STRING fName The name of JT visualization file.enum eJTFileVersion JT Version - use enum zJT_FileVersion:
JT_V_8_0 = 8.0 (80), JT_V_8_1 = 8.1 (81), JT_V_8_2 = 8.2 (82), 
JT_V_9_0 = 9.0 (90), JT_V_9_1 = 9.1 (91), JT_V_9_2 = 9.2 (92), 
JT_V_9_3 = 9.3 (93), JT_V_9_4 = 9.4 (94), JT_V_9_5 = 9.5 (95), JT_V_10_0 = 10.0 (100), JT_V_10_1 = 10.1 (101),JT_V_10_2 = 10.2 (102), JT_V_10_3 = 10.3 (103),
JT_V_10_4 = 10.4 (104), JT_V_10_5 = 10.5 (105),
JT_V_10_6 = 10.6 (106),
enum eJTFileUnits JT Units - use enum zJT_FileUnits:
JT_UNIT_UNKNOWN = Unknown (0)
JT_UNIT_MICRO = Micrometer (1)
JT_UNIT_MILLI = Millimeter (2)JT_UNIT_CENTI = Centimeter (3)
JT_UNIT_DECI = Decimeter (4)
JT_UNIT_METER = Meter (5)JT_UNIT_KILO = Kilometer (6)
JT_UNIT_INCH = Inch (7)
JT_UNIT_FEET = Feet (8)JT_UNIT_YARD = Yard (9)
JT_UNIT_MILE = Mile (10)
JT_UNTI_MIL = Mil (11)
INT4 JTHeirarchy [0..6] Positions in the JT Hi erarchy go from Top (0) to Bottom (6). All 7 
items below must appear in the list but can only appear in the list 
once. The items are: Model = 1, En tity Type = 2, Entity Subtype = 3, 
Layer = 4, Property = 5, Material = 6, Curve & Surface ID = 7. Spec-ifying a positive value for an item means item is enabled, while spec-
ifying a negative value for an item means item is deactivated.
enum eLoadSetOption Load Set option - use enum zJT_SetOption:
JT_SETS_NONE = None (0), JT_SETS_VISIBLE = Visible (1), JT_SETS_ACTIVE = Active (2), JT_SETS_ALL = All (3), 
JT_SETS_SELECT = Select (4)
feFilePictureSaveJT   API-329
V ARIANT LoadSets Only used when eLoadS etOption is set to JT_SETS_SELECT and 
contains the IDs of the Load Se ts to include in the JT File
enum eBCSetOption Constraint Set option - use enum zJT_SetOptio n (see eLoadSetOp-
tion)
V ARIANT BCSets Only used when eBCSet Option is set to JT_SETS_SELECT and 
contains the IDs of the Load Se ts to include in the JT File
BOOL LinesAsCylinders When True, enable s the Draw Lines as Cylinders option
REAL8 dCylinderFactor Specifies value for DiameterOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:NonefeFilePictureSaveJT
( UseDlg, fName, eJTFileVErsion, eJTFileUnits, JTHierarchy, eLoadSetOption, Load-
Sets, eBCSetOption, BCSets, LinesAsCylinders, dCylinderFactor )
 API-330  feFilePictureSaveJTMultiResults
3.4.11.11  feFilePictureSaveJTMultiResults
feFilePictureSaveJTMultiResults
( UseDlg, fName, eJTFileVErsion, eJTFileUnits, OutputSets, OutputVectors, bRaw, bAv-
erage, bTransform, bCorners )
Description:This function saves a “Multi Result Output” JT visualization file using the specified options
Input:BOOL UseDlg If True, this function runs inte ractively and displays a dialog box to 
ask the user to define fName and al l other available options to create 
a JT visualization file.
STRING fName The name of JT visualization file.enum eJTFileVersion JT Version - use enum zJT_FileVersion:
JT_V_8_0 = 8.0 (80), JT_V_8_1 = 8.1 (81), JT_V_8_2 = 8.2 (82), 
JT_V_9_0 = 9.0 (90), JT_V_9_1 = 9.1 (91), JT_V_9_2 = 9.2 (92), 
JT_V_9_3 = 9.3 (93), JT_V_9_4 = 9.4 (94), JT_V_9_5 = 9.5 (95), JT_V_10_0 = 10.0 (100), JT_V_10_1 = 10.1 (101),JT_V_10_2 = 10.2 (102), JT_V_10_3 = 10.3 (103),
JT_V_10_4 = 10.4 (104), JT_V_10_5 = 10.5 (105),
JT_V_10_6 = 10.6 (106)
enum eJTFileUnits JT Units - use enum zJT_FileUnits:
JT_UNIT_UNKNOWN = Unknown (0)
JT_UNIT_MICRO = Micrometer (1)
JT_UNIT_MILLI = Millimeter (2)JT_UNIT_CENTI = Centimeter (3)
JT_UNIT_DECI = Decimeter (4)
JT_UNIT_METER = Meter (5)JT_UNIT_KILO = Kilometer (6)
JT_UNIT_INCH = Inch (7)
JT_UNIT_FEET = Feet (8)JT_UNIT_YARD = Yard (9)
JT_UNIT_MILE = Mile (10)
JT_UNTI_MIL = Mil (11)
V ARIANT OutputSets IDs of the Output Sets to include in the JT visualization file
V ARIANT OutputVectors IDs of the Output Vect ors to include in the JT visualization file
BOOL bRaw When True, the Raw Output Da ta option is specif ied. When False, 
Collated Vectors and Tensors is specified.
BOOL bAverage When True, enables the U se Averaging Options option. Only used 
when bRaw = False
BOOL bTransform When True, enables the Use Transformation Options option. Only 
used when bRaw = False
feFilePictureSaveJTMultiResults   API-331
BOOL bCorners When True, enables the Use Corner Data option. Only used when 
bRaw = False
Output:NoneReturn Code:NoneRemarks/Usage:Not all applications which allow vi sualization of JT data have the ability to display the CAE data cre-
ated using the options in the Multi Result section. If a warning stating “The current service level doesn’t 
support displaying multiple CAE results.” or sim ilar, then this functionality is not available.
Example:NonefeFilePictureSaveJTMultiResults
( UseDlg, fName, eJTFileVErsion, eJTFileUnits, OutputSets, OutputVectors, bRaw, bAv-
erage, bTransform, bCorners )
 API-332  feFileMessageCopy
3.4.11.12  feFileMessageCopy
feFileMessageCopy
( void )
Description:This function copies the selected messages from the Messages and Lists wi ndow to the clipboard.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:If no messages are selected, then all messages will be copied; otherwise,  only the selected ones are cop-
ied.
Example:None
feFileMessageSave   API-333
3.4.11.13  feFileMessageSave
feFileMessageSave
( useDlg,  fName )
Description:This function copies the selected messages to a file.Input:BOOL useDlg If True, this function runs interactively and displays a dialog box to 
ask the user to define the filename.
STRING fName The name of the file to create.Output:NoneReturn Code:FE_FAIL An error occurred saving the file.Remarks/Usage:If no messages are selected, then all messages will be copied; otherwise,  only the selected ones are cop-
ied.
Example:None
 API-334  feFileMessageSelect
3.4.11.14  feFileMessageSelect
feFileMessageSelect
( firstLine,  lastLine )
Description:This function selects the specified li nes in the Messages and Lists window.
Input:INT4 firstLine The line number of the first line of text to be selected.
INT4 lastLine The line number of the last line of text to be selected.Output:NoneReturn Code:FE_INV ALID One of the line numbers that you selected was outside of the range of 
lines that are available.
Remarks/Usage:If either firstLine or lastLine are -1, the selection w ill be reset - no lines will be selected. Setting first-
Line = 0, will automatically select starting at the fi rst available line. Setting lastLine = 0 will automati-
cally select up to the last available line.
You can use the feFileMessageLineNumber( ) method to retrieve the current line number in the Mes-
sages and Lists Window. You can then save this va lue and later use it as a line number to select.
Example:None
feFileMessageLineNumber   API-335
3.4.11.15  feFileMessageLineNumber
feFileMessageLineNumber
( nLine )
Description:This function returns the line number of th e last line currently in the message window
Input:NoneOutput:INT4 nLine The line number of th e last line in the message window
Return Code:FE_INV ALID Either the message window is closed or the last line can not be 
retrieved.
Remarks/Usage:You can use this function to retrieve the current li ne number in the Messages and Lists window. You can 
then save this value and later use it as a line number to call feFileMessageSelect.
Example:None
 API-336  feFileRebuild
3.4.12  Rebuild and Preferences
3.4.12.1  feFileRebuild
feFileRebuild
( useDlg, fullRebuild )
Description:This function is similar to the File,Rebuild  command. It rebuilds the current FEMAP database and 
checks it for integrity.
Input:BOOL useDlg If True, this function runs interactively and displays a dialog box to 
ask whether to do a full or partia l rebuild. An additional dialog box 
may also be displayed if solid geometry is found that cannot be 
loaded.
BOOL fullRebuild Only used if  useDlg=False. If True, a full rebuild is performed and 
all internal database pointers are reconstructed. If False, a partial 
rebuild is performed. This simply checks data references to make 
sure that all required entities still exist, and re sets all usag e counters.
Output:NoneReturn Code:FE_FAIL An error occurred during rebuild. Some data is missing or corrupted. 
(or the rebuild was cancelled if useDlg=True)
Remarks/Usage:NoneExample:None
feFileRecoverDBData   API-337
3.4.12.2  feFileRecoverDBData
feFileRecoverDBData
( useDlg, fName )
Description:This function is a low-level attempt to  recover whatever data is still available in the scratch file of a cor-
rupted model. It will no t fully recover the model.
Input:BOOL useDlg If True, this function runs interactively and displays a dialog box to 
choose the file to recover
STRING fName Only used if useDlg=False. Th e filename/path of the _DBData file to 
attempt to recover
Output:NoneReturn Code:FE_FAIL Unable to recover from specified file.FE_NOT_EXIST The specifie d file does not exist.
Remarks/Usage:NoneExample:None
 API-338  feFilePreferencesSave
3.4.12.3  feFilePreferencesSave
feFilePreferencesSave
( void )
Description:This function permanently saves th e current preference settings. It is  the same as saving the preferences 
when you leave the File, Preferences  command.
Input:NoneOutput:NoneReturn Code:FE_FAIL A problem occurred trying to save the settings.Remarks/Usage:This command does not allow you to change the preference settings. All preference settings can be 
accessed and changed using global variables. You shou ld change the settings th at you want to modify, 
then call this function to make those changes permanent.
Example:None
feFilePreferencesReset   API-339
3.4.12.4  feFilePreferencesReset
feFilePreferencesReset
( void )
Description:This function permanently resets the preference settings back to their de fault values. It is the same as 
pressing the Reset  button in the File, Preferences command.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-340  feRunIOTest
3.4.12.5  feRunIOTest
feRunIOTest
( sPath, nMethod )
Description:This function runs the “Read/Write Test” found in the Database  tab of the  File, Preferences  command.
Input:STRING sPath Directory path to the current  Scratch directory, where the test will 
take place.
Output:INT4 nMethod Preferred result of test. 0= Windows I/O, 1=C I/O, 2=Windows 64K 
I/O, or 3=C 64K I/O.
Return Code:
None
Remarks/Usage:NoneExample:None
feModelFileVersionV2   API-341
3.4.13  Version Number
3.4.13.1  feModelFileVersionV2
feModelFileVersionV2
( void )
Description:This function finds the FEMAP version number of a given file.Input:STRING fName The file path and name.Output:REAL8 The FEMAP version number.Return Code:
None
Remarks/Usage:NoneExample:None
 API-342  
3.5  Tool Methods
Tool Methods include:
•Section 3.5.1, "Units"
•Section 3.5.2, "Variables"
•Section 3.5.3, "Layers"
•Section 3.5.4, "Text"
•Section 3.5.5, "Measure"
•Section 3.5.6, "Checks"
•Section 3.5.7, "Charting Pane"
feToolUnitConver tFactors   API-343
3.5.1  Units
3.5.1.1  feToolUnitConvertFactors
feToolUnitConvertFactors
( baseMult, baseAdd, factorMult, factorAdd )
Description:This function computes the “computed” factors to  use in a unit conversion of the current model.
Input:REAL8 baseMult[0..5] Base factors used to multiply dimensions.
REAL8 baseAdd[0..5] Base factors added to converted dimensions.Output:REAL8 factorMult[0..29] Computed f actors used to multiply dimensions
REAL8 factorAdd[0..29] Computed fact ors added to converted dimensions.
Return Code:
FE_TOO_SMALLOne of the arrays has dimensions th at are too small to be used where 
you specified it.
FE_NOT_A V AILABLE One of the arrays does not contain the required data.
FE_INV ALID Data in the input arrays  is outside the acceptable bounds.
FE_BAD_TYPEData in the input arrays is not of  the correct type (e.g. REAL8 or 
INT4).
Remarks/Usage:For baseMult[ ] and baseAdd[ ] the array indices are:
0=Length, 1=Force, 2=Time, 3=Mass, 4=Temperature, 5=Energy
For factorMult[ ] and factorAdd[ ], the array indices are:
0=Length, 1=Area, 2=Inertia, 3=Force, 4=Moment, 5=Spring, 6=SpringRot, 7=Pressure, 8=Accelera-
tion, 9=AccelRot, 10=VelocityRot, 11=Damping, 12=DampingRot, 13=Mass, 14=Mass-Len, 15=Mass-
PerLen, 16=MassPerArea, 17=Density, 18=MassIne rtia, 19=Temperature, 20=ThermalExpansion, 
21=ThermConductivity, 22=SpecificHeat, 23=Heat GenRate, 24=Velocity, 25=EnergyPerMass, 
26=SpringRatePerArea, 27=DampingPerV olume, 28=V olumePerForce, 29=ThermalConductivity-
LengthPerArea
This method can be called prior to  calling feToolUnitConvert to comput e the factor arrays needed for 
that method. 
Example:None
 API-344  feToolUnitConvert
3.5.1.2  feToolUnitConvert
feToolUnitConvert
( baseMult, baseAdd, factorMult, factorAdd )
Description:This function converts the units of the current model.
Input:REAL8 baseMult[0..5] Base factors used to multiply dimensions.
REAL8 baseAdd[0..5] Base factors added to converted dimensions.REAL8 factorMult[0..29] Computed f actors used to multiply dimensions
REAL8 factorAdd[0..29] Computed fact ors added to converted dimensions.
Output:NoneReturn Code:
FE_TOO_SMALLOne of the arrays has dimensions th at are too small to be used where 
you specified it.
FE_NOT_A V AILABLE One of the arrays does not contain the required data.
FE_INV ALID Data in the input arrays  is outside the acceptable bounds.
FE_BAD_TYPEData in the input arrays is not of  the correct type (e.g. REAL8 or 
INT4).
Remarks/Usage:For baseMult[ ] and baseAdd[ ] the array indices are:
0=Length, 1=Force, 2=Time, 3=Mass, 4=Temperature, 5=Energy
For factorMult[ ] and factorAdd[ ], the array indices are:
0=Length, 1=Area, 2=Inertia, 3=Force, 4=Moment, 5=Spring, 6=SpringRot, 7=Pressure, 8=Accelera-
tion, 9=AccelRot, 10=VelocityRot, 11=Damping, 12=DampingRot, 13=Mass, 14=Mass-Len, 15=Mass-
PerLen, 16=MassPerArea, 17=Density, 18=MassIne rtia, 19=Temperature, 20=ThermalExpansion, 
21=ThermConductivity, 22=SpecificHeat, 23=HeatGe nRate, 24=Velocity, 25=EnergyPerMass,sion, 
21=ThermConductivity, 22=SpecificHeat, 23=Heat GenRate, 24=Velocity, 25=EnergyPerMass, 
26=SpringRatePerArea, 27=DampingPerV olume, 28=V olumePerForce, 29=ThermalConductivity-
LengthPerArea
You can use the feToolUnitConvertFactors( ) method  to automatically comput e values for factorMult 
and factorAdd prior to calling this method. 
Example:
feToolUnitConvert   API-345
NonefeToolUnitConvert
( baseMult, baseAdd, factorMult, factorAdd )
 API-346  feVarPut
3.5.2  Variables
3.5.2.1  feVarPut
feVarPut
( varName, evalEqn, setConst, varValue, varEqn )
Description:This function adds a vari able/equation to the model.
Input:
STRING varNameSpecifies the name of the variable  to define. Must follow normal 
FEMAP variable naming conventions - start with a letter, unique to 5 
characters.
BOOL evalEqn If True, the varEqn equatio n is evaluated to compute varValue.
BOOL setConstIf True, the varValue value is converted to a text string and used as a 
constant equation in varEqn.
REAL8 varValueCurrent evaluated value for the vari able. Should be the current value 
of the equation specified.
STRING varEqn The defining equation for the variable.Output:NoneReturn Code:FE_BAD_DATA The equation that you specified in varEqn cannot be evaluated.FE_INV ALID You specified an  invalid variable name.
Remarks/Usage:Normally you will not specify both evalEqn=True and setConst=True, but if you do, evalEqn is done 
first. Your original varEqn will be evaluated to find  a constant which will then overwrite the original 
equation.
Example:None
feVarGet   API-347
3.5.2.2  feVarGet
feVarGet
( varName, varValue, varEqn )
Description:This function retrieves a variable includ ing its current value and defining equation.
Input:
STRING varNameSpecifies the name of the variable  to retrieve. Must follow normal 
FEMAP variable naming conventions - start with a letter, unique to 5 
characters.
Output:REAL8 varValue Current evaluated value for the variable.STRING varEqn The defining equation for the variable.
Return Code:
FE_NOT_EXIST The variable name that you specified has not been defined.FE_INV ALID You specified an  invalid variable name.
Remarks/Usage:NoneExample:None
 API-348  feVarEval
3.5.2.3  feVarEval
 
feVarEval
( varEqn, varValue )
Description:This function eval uates an equation.
Input:
STRING varEqnThe equation to be evaluated. This  string can follow the syntax of 
any equation that you can define in FEMAP, including the use of 
functions and other variables.
Output:REAL8 varValue Evaluated value for the equation.Return Code:
FE_BAD_DATA The equation cannot be evaluated.
Remarks/Usage:This function does not store its re sults or create any variables. It si mply evaluates the expression that 
you supply.
Example:None
feLayerPut   API-349
3.5.3  Layers
3.5.3.1  feLayerPut
feLayerPut
( layID, layColor, layTitle )
Description:This function creates or updates a layer.Input:INT4 layID The ID of the layer to create or update.
INT4 layColorThe color used for the layer that is cr eated. Set to -1 to use the active 
layer color.
STRING layTitle The title to be used for the layer.Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-350  feLayerGet
3.5.3.2  feLayerGet
feLayerGet
( layID, layColor, layTitle )
Description:This function retrieves information about a layer.
Input:INT4 layID The ID of the layer to create or update.Output:INT4 layColor The layer color.STRING layTitle The title of the layer.Return Code:FE_NOT_EXIST The layer that you requested has not been defined.Remarks/Usage:NoneExample:None
feTextPut   API-351
3.5.4  Text
3.5.4.1  feTextPut
feTextPut
( textID, drawPointer, drawBorder, modelPos, horzJust, vertJust, visView, layer, fontID, 
backColor, bordColor, textColor, textLoc, pointerLoc, text)
Description:This function creates or updates a text annotation.Input:INT4 textID The ID of the text entity to create or update.
BOOL drawPointerIf True, a pointer will be drawn from the text to a location that you 
specify in pointerLoc.
BOOL drawBorder If True, a border will be drawn around the text.
BOOL modelPosIf True, both the textLoc and poin terLoc are in global Cartesian 
model coordinates. If False, they are in screen coordinates.
INT4 horzJust The horizon tal justification: 0=Center, 1=Left, 2=Right.
INT4 vertJust The vertical justifi cation: 0=Center, 1=Top, 2=Bottom.
INT4 visViewSpecifies the views where the text  will be visible: -1=All Views, 
0=Currently Active View, >0=Specified View ID.
INT4 layer The layer attribute for the text.
INT4 fontIDThe ID of the font for the text. Same fonts as in the Tools, Text com-
mand.
INT4 backColor The color of the background of the border (if drawBorder=True).INT4 bordColor The color of the edge of the border (if drawBorder=True).
INT4 textColor The color of the text.
REAL8 textLoc[0..2]The location of the text. If in mode l coordinates, the X,Y ,Z coordi-
nates in global Cartesian. If in screen, the X and Y screen coordi-
nates. In this case, the third co ordinate should always be 0.0
REAL8 pointerLoc[0..2] The locatio n of the tip of the pointer.
STRING text The text to create.Output:NoneReturn Code:None
 API-352  feTextPut
Remarks/Usage:
If you want to create text with mu ltiple lines, you must add carriage return (CR) and linefeed (LF) char-
acters between the lines. For exam ple, from Basic, you could use:
s = "First Line" & Chr(13) & Chr(10) & "Second Line"
Example:NonefeTextPut
( textID, drawPointer, drawBorder, modelPos, horzJust, vertJust, visView, layer, fontID, 
backColor, bordColor, textColor, textLoc, pointerLoc, text)
feTextMultiPut   API-353
3.5.4.2  feTextMultiPut
feTextMultiPut
( drawPointer, drawBorder, modelPos, horzJust, vertJust, visView, layer, fontID, back-
Color, bordColor, textColor, nCount, textLoc, pointerLoc, text)
Description:This function creates mu ltiple text annotations.
Input:
BOOL drawPointerIf True, a pointer will be drawn from the text to a location that you 
specify in pointerLoc.
BOOL drawBorder If True, a border will be drawn around the text.
BOOL modelPosIf True, both the textLoc and poin terLoc are in global Cartesian 
model coordinates. If False, they are in screen coordinates.
INT4 horzJust The horizon tal justification: 0=Center, 1=Left, 2=Right.
INT4 vertJust The vertical justifi cation: 0=Center, 1=Top, 2=Bottom.
INT4 visViewSpecifies the views where the text  will be visible: -1=All Views, 
0=Currently Active View, >0=Specified View ID.
INT4 layer The layer attribute for the text.
INT4 fontIDThe ID of the font for the text. Same fonts as in the Tools, Text com-
mand.
INT4 backColor The color of the background of the border (if drawBorder=True).INT4 bordColor The color of the edge of the border (if drawBorder=True).
INT4 textColor The color of the text.
INT4 nCountThe number of text items to create . This value specifies the number 
of entries in the remaining parameters
REAL8 textLoc[0..3*nCount-
1]The location of the text. If in mode l coordinates, the X,Y ,Z coordi-
nates in global Cartesian. If in screen, the X and Y screen coordi-nates. In this case, the third coordi nate should always be 0.0. Entries 
in this array are stored [Text1 X,Text1Y ,Text1Z,Text2X,...TextNZ]
REAL8 pointer-
Loc[0..3*nCount-1]The location of the tip of the poin ter. Stored the same as textLoc.
STRING text[0..nCount-1] The text items to create . Each string creates a unique Text entity.
Output:NoneReturn Code:
 API-354  feTextMultiPut
None
Remarks/Usage:If you want to create text with mu ltiple lines, you must add carriage return (CR) and linefeed (LF) char-
acters between the lines. For exam ple, from Basic, you could use:
s = "First Line" & Chr(13) & Chr(10) & "Second Line"
Example:
Sub Main 
    Dim App As femap.model 
    Set App = feFemap() 
    Dim xyz(8) As Double 
    Dim t(2) As String 
    Dim n As femap.Node 
    Set n = App.feNode() 

    n.Get(1) 
    xyz(0) = n.x 
    xyz(1) = n.y 
    xyz(2) = n.z 

    n.Get(2) 
    xyz(3) = n.x 
    xyz(4) = n.y 
    xyz(5) = n.z 
    n.Get(3) 
    xyz(6) = n.x 
    xyz(7) = n.y 
    xyz(8) = n.z 

    t(0) = "AA" 
    t(1) = "This is" & Chr(13) & Chr(10) & "Multi line" 
    t(2) = "XYZDEF" 
    App.feTextMultiPut ( False, False, True, 0, 0, -1, 1, 2, 
               FCL_RED, FCL_BLUE, FCL_RED, 3, xyz, xyz, t ) 
End Sub feTextMultiPut
( drawPointer, drawBorder, modelPos, horzJust, vertJust, visView, layer, fontID, back-
Color, bordColor, textColor, nCount, textLoc, pointerLoc, text)
feTextGet   API-355
3.5.4.3  feTextGet
feTextGet
( textID, drawPointer, drawBorder, modelPos, horzJust, vertJust, visView, layer, fontID, 
backColor, bordColor, textColor, textLoc, pointerLoc, text)
Description:This function retrieves a text entity.Input:INT4 textID The ID of the text entity to create or update.
Output:BOOL drawPointer The status  of the pointer (True=On).
BOOL drawBorder The status of the border (True=On).
BOOL modelPosIf True, both the textLoc and poin terLoc are in global Cartesian 
model coordinates. If False, they are in screen coordinates.
INT4 horzJust The horizon tal justification: 0=Center, 1=Left, 2=Right.
INT4 vertJust The vertical justifi cation: 0=Center, 1=Top, 2=Bottom.
INT4 visViewSpecifies the views where the text  will be visible: -1=All Views, 
0=Currently Active View, >0=Specified View ID.
INT4 layer The layer attribute for the text.
INT4 fontIDThe ID of the font for the text. Same fonts as in the Tools, Text  com-
mand.
INT4 backColor The color of the background of the border (if drawBorder=True).INT4 bordColor The color of the edge of the border (if drawBorder=True).
INT4 textColor The color of the text.
REAL8 textLoc[0..2]The location of the text. If in mode l coordinates, the X,Y ,Z coordi-
nates in global Cartesian. If in screen, the X and Y screen coordi-
nates. In this case the third coordinate should always be 0.0.
REAL8 pointerLoc[0..2] The locatio n of the tip of the pointer.
STRING textThe text. If there are multiple lines  of text, there will be carriage 
return and linefeed characters in the string.
Return Code:FE_NOT_EXIST The text entity that  you requested does not exist.
Remarks/Usage:
None
 API-356  feTextGet
Example:
NonefeTextGet
( textID, drawPointer, drawBorder, modelPos, horzJust, vertJust, visView, layer, fontID, 
backColor, bordColor, textColor, textLoc, pointerLoc, text)
feMeasureDistance   API-357
3.5.5  Measure
3.5.5.1  feMeasureDistance
feMeasureDistance
( p1, p2, dist )
Description:This function measures the distance between two coordinates.Input:REAL8 p1[0..2] The first coordinate location.REAL8 p2[0..2] The second coordinate location.Output:REAL8 dist The distance betwee n the coordinate locations.
Return Code:
NoneRemarks/Usage:The coordinate locations must be in  the same rectangular coordinate system for this function to work 
properly - preferably in global rectangular.
Example:None
 API-358  feMeasureDistanceToPlane
3.5.5.2  feMeasureDistanceToPlane
feMeasureDistanceToPlane
( p1, planePt, planeNorm, dist )
Description:This function measures the distan ce between a coordinate location and a plane. The distance is the 
length of the perpendicula r projection onto the plane.
Input:REAL8 p1[0..2] The coordinate location.REAL8 planePt[0..2] The coordinates of any point on the plane.REAL8 planeNorm[0..2] The components of the perpendicular vector to the plane.Output:
REAL8 distThe distance from the coordinate lo cation to its projection onto the 
plane.
Return Code:NoneRemarks/Usage:The coordinate locations and components must be in  the same rectangular coor dinate system for this 
function to work properly - pref erably in global rectangular.
Example:None
feMeasureDistanceBetweenGeometry   API-359
3.5.5.3  feMeasureDistanceBetweenGeometry
feMeasureDistanceBetweenGeometry
( enFromType, nFromSet, enToType, nToSet, bMinimum, nFromID, nToID, vFrom, vTo, 
dDistance )
Description:This function measures the distance between two sets of  geometric entities or a set of nodes and a set of 
geometric entities. The maximum or minimum distance is calculated using any combination of sets con-
taining only points, curv es, surfaces, or solids. 
Input:
INT4 enFromTypeThe type of entities to measure “F rom”. For entity in formation, Sec-
tion 3.3.6, "Entity Types". Can be FT_NODE (7), FT_POINT (3), 
FT_CURVE (4), FT_SURFACE (5), or FT_SOLID (39).
INT4 nFromSetThe ID of a set that contains a list  of point, curve, surface, or solid 
IDs. Alternatively, if you specify a negative value, this is simply the 
ID of the single entity to measure “From”.
INT4 enToTypeThe type of entities to measure  “To”. Can be FT_POINT (3), 
FT_CURVE (4), FT_SURFACE (5), or FT_SOLID (39).
INT4 nToSetThe ID of a set that contains a list  of point, curve, surface, or solid 
IDs. Alternatively, if you specify a negative value, this is simply the 
ID of the single entity to measure “To”
INT4 bMinimumWhen True, calculates the minimum distance between geometric 
entities. When False, calcu lates the maximum distance.
Output:
INT4 nFromIDThe ID of the geometric entity used  as the “From” entity to deter-
mine minimum/maximum distance
INT4 nToIDThe ID of the geometric entity used  as the “To” entity to determine 
minimum/maximum distance
REAL8 vFrom[0..2]The coordinates of the location on the nFromID entity used to deter-
mine minimum/maximum distance
REAL8 vTo[0..2]The coordinates of the location on  the nToID entity used to deter-
mine minimum/maximum distance
REAL8 dDistance The distance between the vFrom and vTo coordinatesReturn Code:FE_NOT_EXIST One or more of th e geometric entities does not exist
Remarks/Usage:Offers similar functionality to the Tools, Measure, Distance Between Geometry  command.
 API-360  feMeasureDistanceBetweenGeometry
Example:
NonefeMeasureDistanceBetweenGeometry
( enFromType, nFromSet, enToType, nToSet, bMinimum, nFromID, nToID, vFrom, vTo, 
dDistance )
feMeasureDistanceBetweenNodesV2   API-361
3.5.5.4  feMeasureDi stanceBetweenNodesV2
feMeasureDistanceBetweenNodesV2
( nFrom, nTo, nOutSetID, nOutVecID, nCSysID, vecBase, vecDist, magDist )
Description:This function measures the distance between two nodes which are optionally deformed using selected 
results. This function is supersed ed by feMeasureDistanceBetween Nodes2. This method replaces 
feMeasureDistanceBetweenNodes. Fo r more information, seeSection 2. 4, "Working with Output in 
FEMAP 2020.1 and above".
Input:INT4 nFrom The ID of th e node to measure from
INT4 nTo The ID of the node to measure to
INT4 nOutSetIDThe ID of the output set which cont ains the results to use to deform 
the nodes. If 0, use the undeformed location of the nodes.
INT4 nOutVecIDThe ID of the output vector in nO utSetID which contains the results 
to use to deform the nodes. If 0, use the undeformed locations.
INT4 nCSysID The ID of the coordinate sy stem in which the results are returned.
Output:
REAL8 vecBase[0..2]The coordinates of the nFrom node  (possibly deformed) in CSys 
nCSysID
REAL8 vecDist[0..2] The components of the vector from nFrom to nTo in CSys nCSysIDREAL8 magDist The distance between the nodesReturn Code:FE_NOT_A V AILABLE Selected resu lts Set/Vector do not exist
FE_INV ALIDNo output available for one or mo re of the nodes in the selected 
results vector.
FE_NOT_EXIST One or more of the nodes does not existRemarks/Usage:NoneExample:None
 API-362  feMeasureDistanceBetweenNodes2V2
3.5.5.5  feMeasureDi stanceBetweenNodes2V2
feMeasureDistanceBetweenNodes2V2
( nFrom, nTo, nOutSetID, nOutVecID, nCSysID, vecBase, vecTip, vecDist, magDist )
Description:This function measures the distance between two nodes which are optionally deformed using selected 
results.This function is supersedes by feMeasureDis tanceBetweenNodes. This method replaces feMea-
sureDistanceBetweenNodes2. For more  information, seeSection 2.4, "W orking with Output in FEMAP 
2020.1 and above".
Input:INT4 nFrom The ID of th e node to measure from
INT4 nTo The ID of the node to measure to
INT4 nOutSetIDThe ID of the output set which cont ains the results to use to deform 
the nodes. If 0, use the undeformed location of the nodes.
INT4 nOutVecIDThe ID of the output vector in nO utSetID which contains the results 
to use to deform the nodes. If 0, use the undeformed locations.
INT4 nCSysID The ID of the coordinate sy stem in which the results are returned.
Output:
REAL8 vecBase[0..2]The coordinates of the nFrom node  (possibly deformed) in CSys 
nCSysID
REAL8 vecTip0..2]The coordinates of the nTo node (possibly deformed) in CSys 
nCSysID
REAL8 vecDist[0..2] The components of the vector from nFrom to nTo in CSys nCSysIDREAL8 magDist The distance between the nodesReturn Code:FE_NOT_A V AILABLE Selected resu lts Set/Vector do not exist
FE_INV ALIDNo output available for one or mo re of the nodes in the selected 
results vector.
FE_NOT_EXIST One or more of the nodes does not existRemarks/Usage:NoneExample:None
feMeasureDistanceBetweenLines   API-363
3.5.5.6  feMeasureDistanceBetweenLines
feMeasureDistanceBetweenLines
( pA1, pA2, pB1, pB2, dist )
Description:This function measures the minimum distance betw een two line segments in space which are specified 
by the coordinates of their endpoints.
Input:REAL8 pA1[0..2] The coordinates at the first end of the first line.REAL8 pA2[0..2] The coordinates at the second end of the first line.REAL8 pB1[0..2] The coordinates at the first end of the second line.REAL8 pB2[0..2] The coordinates at the second end of the second line.Output:REAL8 dist The minimum distance  between the two line segments.
Return Code:NoneRemarks/Usage:The coordinate locations must be in  the same rectangular coordinate system for this function to work 
properly - preferably in global r ectangular. The minimum distance will be the perpendicular distance if 
the closest point of approach lies w ithin the lengths of the segments. If it does not, then the distance will 
be the distance from one of th e endpoints to the other line.
Example:None
 API-364  feMeasureDistanceBetweenSolids
3.5.5.7  feMeasureDistanceBetweenSolids
feMeasureDistanceBetweenSolids
( solidID1, solidID2, dist )
Description:This function measures the minimum distance between two solids in space 
Input:INT4 solidID1
The IDs of the two solids to measure between.
INT4 solidID2
Output:REAL8 dist The minimum distance between the two solidsReturn Code:NoneRemarks/Usage:NoneExample:None
feMeasureAngle   API-365
3.5.5.8  feMeasureAngle
feMeasureAngle
( center, p1, p2, angle )
Description:This function measures the angle between three coordinate locations.
Input:REAL8 center[0..2] The coordinates of the center location.REAL8 p1[0..2] The first coordinate location.REAL8 p2[0..2] The second coordinate location.Output:REAL8 angle The angle between the coordinate locations (in degrees).Return Code:NoneRemarks/Usage:The coordinate locations must be in  the same rectangular coordinate system for this function to work 
properly - preferably in global rectangular. The ce nter location is the point about which the angle is 
measured. The angle is the angle between the vector fro m the center to p1 and the vector from the center 
to p2. The angle returned is always less than 180 de grees. There is no indication of the direction swept 
by the angle.
Example:None
 API-366  feMeasureAngleBetweenNodesV2
3.5.5.9  feMeasureAngleBetweenNodesV2
feMeasureAngleB etweenNodesV2
( nVertex, nFrom, nTo, nOutSetID, nOutVecID, nCSysID, vecBase, vecNormal, magAn-
gle )
Description:This function measures the angle between three coordinate locations . This method replaces feMeasure-
AngleBetweenNodes. For mo re information, see Section 2.4, "Wor king with Output in FEMAP 2020.1 
and above".
Input:INT4 nVertex The ID of a node at the vertex of the angleINT4 nFrom The ID of a node  to measure the angle from
INT4 nTo The ID of a node to measure the angle to
INT4 nOutSetIDThe ID of the output set which cont ains the results to use to deform 
the nodes. If 0, use the undeformed location of the nodes.
INT4 nOutVecIDThe ID of the output vector in nO utSetID which contains the results 
to use to deform the nodes. If 0, use the undeformed locations.
INT4 nCSysID The ID of the coordinate sy stem in which the results are returned.
Output:
REAL8 vecBase[0..2]The coordinates of the nVertex node (possibly deformed) in CSys 
nCSysID
REAL8 vecNormal[0..2]The components of the vector that is normal to the plane formed by 
the three (possibly deformed) nodes, in CSys nCSysID
REAL8 magAngle The angle between the nodesReturn Code:NoneRemarks/Usage:NoneExample:None
feMeasureCurve   API-367
3.5.5.10  feMeasureCurve
feMeasureCurve
( curveSET, totalLength )
Description:This function measures the le ngth of one or more curves.
Input:
INT4 curveSETThe ID of a selection set that contains the IDs of the curves to mea-
sure. Alternatively, if you specify a negative value, this is simply the 
ID of the single curve to measure.
Output:REAL8 totalLength The total length of all the curves. 
Return Code:
None
Remarks/Usage:The total length of the curves is  simply the sum of the lengths of  the individual curves, it does not 
account for any overlap in the curves.
Example:None
 API-368  feMeasureSurfaceArea
3.5.5.11  feMeasureSurfaceArea
feMeasureSurfaceArea
( surfaceSET, totalArea )
Description:This function measures the area of one or more surfaces.Input:
INT4 surfaceSETThe ID of a selection set that contains the IDs of the surfaces to mea-
sure. Alternatively, if you specify a negative value, this is simply the 
ID of the single surface to measure.
Output:REAL8 totalArea The total area  of the selected surfaces.
Return Code:
FE_NOT_EXISTOne or more of the surfaces that yo u selected did not exist. totalArea 
is still the area of the existing surfaces.
FE_BAD_TYPE One or more of the surfaces that you selected was not a solid surface.Remarks/Usage:This function only works for solid  surfaces. Surfaces created with th e standard geometry engine and 
boundary surfaces cannot be measured for area.
Example:None
feMeasureSolidMassProp   API-369
3.5.5.12  feMeasureSolidMassProp
feMeasureSolidMassProp
( solidID, area, volume, cg, inertia )
Description:This function computes the mass properties of a solid.
Input:INT4 solidID The ID of the solid to compute the mass properties.
Output:REAL8 area The total surface area of the solid.REAL8 volume The volume of the solid (if closed).REAL8 cg[0..2] The location of the center of gravity of the solid.
REAL8 inertia[0..9]The 3x3 inertia matrix stored in row order [0][0], [0][1], [0][2], 
[1][0]...[2][2].
Return Code:FE_NOT_EXIST The solid that you have selected does not exist.Remarks/Usage:The cg and inertia terms are in global rectangular coordinates.Example:None
 API-370  feMeasureMeshMassProp
3.5.5.13  feMeasureMeshMassProp
feMeasureMeshMassProp
( elemSET, csysID, printResults, printDetails, len, area, volume, structMass, nonstruct-
Mass, totalMass, structCG, nonstructCG, totalCG, inertia, inertiaCG )
Description:This function computes the mass properties of a mesh.Input:
INT4 elemSETThe ID of a selection set that contains the IDs of the elements to 
measure. Alternatively, if you specify  a negative value, this is simply 
the ID of the single element to measure.
INT4 csysID The coordinate system used to compute the mass properties.BOOL printResults If True, the mass properties are also listed to the print destination.
BOOL printDetailsIf True, and printResults=True, the detailed properties for each ele-
ment are listed.
Output:REAL8 len The total length of  all selected line elements.
REAL8 area The total area of all selected planar elements.REAL8 volume The total volume of all selected elements.
REAL8 structMass The structural mass of all selected elements.
REAL8 nonstructMass The nonstructural mass of all selected elements.REAL8 totalMass The total (str uctural+nonstructural) mass  of all selected elements.
REAL8 structCG[0..2] The center of gravity of the structural mass.
REAL8 nonstructCG[0..2] The center of gravity of the nonstructural mass.REAL8 totalCG[0..2] The center of gravity of the total mass.
REAL8 inertia[0..5]The inertias of the selected elements  ( 0=I11, 1=I21, 2=I22, 3=I31, 
4=I32, 5=I33) about the origin of  the selected coordinate system.
REAL8 inertiaCG[0..5]The inertias of the selected elements  ( 0=I11, 1=I21, 2=I22, 3=I31, 
4=I32, 5=I33) about the center of gravity.
Return Code:FE_NOT_EXIST The solid that you have selected does not exist.
FE_NEGATIVE_MASS_VOL-
UMESome of the elements that you ha ve selected have either negative 
mass or volume. Returned values may be less than the total absolute 
mass or volume.
feMeasureMeshMassProp   API-371
Remarks/Usage:
Only total mass properties are returned . If you want to get individual pr operties, you must call this func-
tion and just select a single element.
Example:NonefeMeasureMeshMassProp
( elemSET, csysID, printResults, printDetails, len, area, volume, structMass, nonstruct-
Mass, totalMass, structCG, nonstructCG, totalCG, inertia, inertiaCG )
 API-372  feMeasureSurfSectionProp
3.5.5.14  feMeasur eSurfSectionProp
feMeasureSurfSectionProp
( surfID, vecBase, vecDir, sectProp )
Description:This function computes the sectio n properties for a planar surface.
Input:INT4 surfID The ID of the surface to compute the properties.
REAL8 vecBase[0..2]The coordinates of the origin of the orientation vector. Section prop-
erties are reported about this point.
REAL8 vecDir[0..2]A vector in the direction of the Y ax is of the section. Section proper-
ties are reported about this axis.
Output:
REAL8 sectProp[0..24]The computed properties. 
0= Area, 1= Y centroid, 2= Z centroid, 3= Y moment of inertia, 4= Z 
moment of inertia, 5= YZ product of inertia, 6= Angle to principal axes, 7= Y radius of gyration, 8= Z radius of gyration, 9= Polar 
moment of inertia, 10= Max Principal moment of inertia, 11= Min 
Principal moment of inertia, 12= Y Principal moment of inertia, 13= Z Principal moment of inertia, 14 = YZ Principal moment of inertia, 
15= Y Shear Center - from origin, 16= Z Shear Center - from origin, 
17= Y Shear Center - from centroid , 18= Z Shear Center - from cen-
troid, 19= Y Shear Area, 20= Z Shear Area, 21= YZ Shear Area, 22= 
Warping Constant, 23= Torsio nal Constant, 24= Not Used.
Return Code:
FE_TOO_SMALLOne of the arrays has dimensions which are too small to be used 
where you specified it.
FE_NOT_A V AILABLE One of the arrays does not contain the required data.
FE_INV ALID Data in the input arrays  is outside the acceptable bounds.
FE_BAD_TYPEData in the input arrays is not of  the correct type (e.g. REAL8 or 
INT4).
Remarks/Usage:NoneExample:None
feMeasureMeshSectionProp   API-373
3.5.5.15  feMeasureMeshSectionProp
feMeasureMeshSectionProp
( elemSET, vecBase, vecDir, sectProp )
Description:This function computes the section properties for a selected set of elements.Input:
INT4 elemSETThe ID of a selection set that contains the IDs of the elements to 
measure. Alternatively, if you specify  a negative value, this is simply 
the ID of the single element to measure.
REAL8 vecBase[0..2]The coordinates of the origin of the orientation vector. Section prop-
erties are reported about this point.
REAL8 vecDir[0..2]A vector in the direction of the Y ax is of the section. Section proper-
ties are reported about this axis.
Output:
REAL8 sectProp[0..24]The computed properties: 
0= Area, 1= Y centroid, 2= Z centroid, 3= Y moment of inertia, 4= Z 
moment of inertia, 5= YZ product of inertia, 6= Angle to principal 
axes, 7= Y radius of gyration, 8= Z radius of gyration, 9= Polar moment of inertia, 10= Max Principal moment of inertia, 11= Min 
Principal moment of inertia, 12= Y Principal moment of inertia, 13= 
Z Principal moment of inertia, 14 = YZ Principal moment of inertia, 
15= Y Shear Center - from origin, 16= Z Shear Center - from origin, 
17= Y Shear Center - from centroid , 18= Z Shear Center - from cen-
troid, 19= Y Shear Area, 20= Z Shear Area, 21= YZ Shear Area, 22= Warping Constant, 23= Torsio nal Constant, 24= Not Used.
Return Code:
FE_TOO_SMALLOne of the arrays has dimensions which are too small to be used 
where you specified it.
FE_NOT_A V AILABLE One of the arrays does not contain the required data.
FE_INV ALID Data in the input arrays  is outside the acceptable bounds.
FE_BAD_TYPEData in the input arrays is not of  the correct type (e.g. REAL8 or 
INT4).
Remarks/Usage:The elements that you select sh ould all be planar elements.
Example:None
 API-374  feCheckCoincidentNode
3.5.6  Checks
3.5.6.1  feCheckCoincidentNode
feCheckCoincidentNode
( keepSET, mergeSET, tolerance, merge, messages, coinCount, coinNodes )
Description:This function checks, and optionally merges, coincide nt nodes. This method is obsolete and should be 
replaced by feCheckCoincidentNode3.
Input:
INT4 keepSETThe ID of a selection set that contains the IDs of the nodes to check 
for coincidence. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single node to check. The nodes in this set are 
retained if they are merged with a node in the mergeSET.
INT4 mergeSETThe ID of a selection set that contains the IDs of the nodes to check 
for coincidence. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single node to check. The nodes in this set are 
removed if they are merged with  a node in the keepSET. You can 
specify the same value for both  the keepSET and the mergeSET.
REAL8 tolerance The distance be low which nodes will be cons idered to be coincident.
BOOL merge If True, coincident nodes will be merged.
BOOL messagesIf True, messages will be printed listin g all coincident nodes that are 
found.
Output:INT4 coinCount The number of pairs of coincident nodes in coinNodes.
INT4 coinNodes[0..N]The IDs of the nodes that are found to be coincident. The entries in 
this array come in pairs. That is, coinNodes[0] and coinNodes[1] are 
coincident with each other, as are coinNodes[2] and coinNodes[3]. The entries in coinNodes[0], coin Nodes[2], coinNodes[4]... come 
from the keepSET, coinNodes[1], coinNodes[3]... come from the 
mergeSET. There are coinCount pairs. 
Return Code:
FE_TOO_SMALLOne of the arrays has dimensions which are too small to be used 
where you specified it.
FE_NOT_A V AILABLE One of the arrays does not contain the required data.
FE_INV ALID Data in the input arrays  is outside the acceptable bounds.
FE_BAD_TYPEData in the input arrays is not of  the correct type (e.g. REAL8 or 
INT4).
feCheckCoincidentNode   API-375
Remarks/Usage:
NoneExample:NonefeCheckCoincidentNode
( keepSET, mergeSET, tolerance, merge, messages, coinCount, coinNodes )
 API-376  feCheckCoincidentNode2
3.5.6.2  feCheckCoincidentNode2
feCheckCoincidentNode2
( mergeSET, tolerance, merge, mergeMode, mergeLoc, bMergeAcrossConnections, 
nMessageMode, bSaveGroups )
Description:This function checks, and optionally merges, coincide nt nodes. This method is obsolete and should be 
replaced by feCheckCoincidentNode3.
Input:
INT4 mergeSETThe ID of a selection set that contains the IDs of the nodes to check 
for coincidence. 
REAL8 tolerance The distance be low which nodes will be cons idered to be coincident.
BOOL mergeIf True, coincident nodes will be me rged, otherwise just checked for 
coincidence
INT4 mergeMode Select Nodes to Keep   0=Automatic, 1=LowerID, 2=HigherID
INT4 mergeLocLocation of merged nodes 0=Original, 1=LowerID, 2=HigherID, 
3=Middle
BOOL bMergeAcrossConnec-
tionsIf True, nodes can be merged even though they are on opposite sides 
of a connection. Otherwise they are not merged.
INT4 nMessageMode Message Mode 0=Off, 1=On, 2=Detailed
BOOL bSaveGroupsIf True, groups are created of the nodes to be kept, and if 
merge=False of the nodes to be merged.
Output:NoneReturn Code:FE_FAIL Unable to check for coincident nodesRemarks/Usage:NoneExample:None
feCheckCoincidentNode3   API-377
3.5.6.3  feCheckCoincidentNode3
feCheckCoincidentNode3
( mergeSET, tolerance, merge, mergeMode, mergeLoc, bMergeAcrossConnections, 
bMergeAcrossOutputCSys, nMergeAcrossCS ysID, nMessageMode, bSaveGroups )
Description:This function checks, and optionally merges, coinci dent nodes. This method supersedes both feCheck-
CoincidentNode and feCheckCoincidentNode2
Input:
INT4 mergeSETThe ID of a selection set that contains the IDs of the nodes to check 
for coincidence. 
REAL8 tolerance The distance be low which nodes will be cons idered to be coincident.
BOOL mergeIf True, coincident nodes will be me rged, otherwise just checked for 
coincidence
INT4 mergeMode Select Nodes to Keep   0=Automatic, 1=LowerID, 2=HigherID
INT4 mergeLocLocation of merged nodes 0=Original, 1=LowerID, 2=HigherID, 
3=Middle
BOOL 
bMergeAcrossConnectionsIf True, nodes can be merged even though they are on opposite sides 
of a connection. Otherwise they are not merged.
BOOL 
bMergeAcrossOutputCSysIf True, nodes can be merged even though they have different output 
coordinate systems.
INT4 nMergeAcrossCSysIDID of coordinate system to use for nodes merged which had different 
output coordinate systems before merg ing. Set to -1 to use the output 
coordinate system of the node that was “kept” after the merge.
INT4 nMessageMode Message Mode 0=Off, 1=On, 2=Detailed
BOOL bSaveGroupsIf True, groups are created of the nodes to be kept, and if 
merge=False of the nodes to be merged.
Output:NoneReturn Code:FE_FAIL Unable to check for coincident nodesRemarks/Usage:NoneExample:None
 API-378  feCheckCoincidentNode4
3.5.6.4  feCheckCoincidentNode4
feCheckCoincidentNode4
( mergeSET, bMergeIntoAll, tolerance, merge, mergeMode, mergeLoc, bMergeAcross-
Connections, bMergeAcrossOutputCSys, nMergeAcrossCSysID, nMessageMode, bSa-
veGroups )
Description:This function checks, and optionally merges, coinci dent nodes. This method supersedes both feCheck-
CoincidentNode, feCheckCoincident Node2 and feCheckCoincidentNode3.
Input:
INT4 mergeSETThe ID of a selection set that contains the IDs of the nodes to check 
for coincidence. 
BOOL bMergeIntoAllIf True, all nodes in mergeSet will be checked against all other coin-
cident nodes whether also in mergeS et or not. If False, only nodes 
within mergeSet will be checked for coincidence against other nodes 
in mergeSet. 
REAL8 tolerance The distance be low which nodes will be cons idered to be coincident.
BOOL mergeIf True, coincident nodes will be me rged, otherwise just checked for 
coincidence
INT4 mergeMode Select Nodes to Keep   0=Automatic, 1=LowerID, 2=HigherID
INT4 mergeLocLocation of merged nodes 0=Original, 1=LowerID, 2=HigherID, 
3=Middle
BOOL 
bMergeAcrossConnectionsIf True, nodes can be merged even though they are on opposite sides 
of a connection. Otherwise they are not merged.
BOOL 
bMergeAcrossOutputCSysIf True, nodes can be merged even though they have different output 
coordinate systems.
INT4 nMergeAcrossCSysIDID of coordinate system to use for nodes merged which had different 
output coordinate systems before merg ing. Set to -1 to use the output 
coordinate system of the node that was “kept” after the merge.
INT4 nMessageMode Message Mode 0=Off, 1=On, 2=Detailed
BOOL bSaveGroupsIf True, groups are created of the nodes to be kept, and if 
merge=False of the nodes to be merged.
Output:NoneReturn Code:FE_FAIL Unable to check for coincident nodes
feCheckCoincidentNode4   API-379
Remarks/Usage:
NoneExample:NonefeCheckCoincidentNode4
( mergeSET, bMergeIntoAll, tolerance, merge, mergeMode, mergeLoc, bMergeAcross-
Connections, bMergeAcrossOutputCSys, nMergeAcrossCSysID, nMessageMode, bSa-
veGroups )
 API-380  feCheckCoincidentPoint
3.5.6.5  feCheckCoincidentPoint
feCheckCoincidentPoint
( keepSET, mergeSET, tolerance, merge, messages, coinCount, coinPoints )
Description:This function checks, and optionally merges, coincident points.Input:
INT4 keepSETThe ID of a selection set that contains the IDs of the points to check 
for coincidence. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single point to  check. The points in this set are 
retained if they are merged with a point in the mergeSET.
INT4 mergeSETThe ID of a selection set that contains the IDs of the points to check 
for coincidence. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single point to  check. The points in this set are 
removed if they are merged with  a point in the keepSET. You can 
specify the same value for both  the keepSET and the mergeSET.
REAL8 tolerance The distance be low which points will be cons idered to be coincident.
BOOL merge If True, coincident points will be merged.
BOOL messagesIf True, messages will be printed listin g all coincident points that are 
found.
Output:INT4 coinCount The number of pairs of  coincident points in coinPoints.
INT4 coinPoints[0..N]The IDs of the points that are found to be coincident. The entries in 
this array come in pair s. That is, coinPoints[0] and coinPoints[1] are 
coincident with each other, as are coinPoints[2] and coinPoints[3]. 
The entries in coinPoin ts[0], coinPoints[2], coinPoints[4]... come 
from the keepSET, coinPoints[1], coinPoints[3]... come from the 
mergeSET. There are coinCount pairs. 
Return Code:
FE_TOO_SMALLOne of the arrays has dimensions which are too small to be used 
where you specified it.
FE_NOT_A V AILABLE One of the arrays does not contain the required data.
FE_INV ALID Data in the input arrays  is outside the acceptable bounds.
FE_BAD_TYPEData in the input arrays is not of  the correct type (e.g. REAL8 or 
INT4).
Remarks/Usage:None
feCheckCoincidentPoint   API-381
Example:
NonefeCheckCoincidentPoint
( keepSET, mergeSET, tolerance, merge, messages, coinCount, coinPoints )
 API-382  feCheckCoincidentCurve
3.5.6.6  feCheckCoincidentCurve
feCheckCoincidentCurve
( curveSET, tolerance )
Description:This function checks and merges coincident curves.Input:
INT4 curveSETThe ID of a selection set that contai ns the IDs of the curves to check 
for coincidence. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single curve to check. 
REAL8 toleranceThe distance below which curves (a nd their endpoints) will be con-
sidered to be coincident.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
feCheckPlanarNodes   API-383
3.5.6.7  feCheckPlanarNodes
feCheckPlanarNodes
( nodeSET, messages, project, tolerance, askPlane, planeBase, planeNormal )
Description:This function checks a set of nodes to see if they are planar. The nodes can also be projected onto the 
plane.
Input:
INT4 nodeSETThe ID of a selection set that contains the IDs of the nodes to check. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single node to check. 
BOOL messagesIf True, status messages are written showing the nodes that are not on 
the plane.
BOOL projectIf True, nodes that are not in the plane but are less than the tolerance 
distance out of the plane will be pr ojected onto the plane. Nodes that 
are greater than the tolerance distance away from the plane will remain in their current location.
REAL8 toleranceThe maximum distance from the plane for nodes to be moved onto 
the plane. Only used if project=True.
BOOL askPlaneIf True, a dialog box will be disp layed asking the user to pick a 
plane. If False, the planeBase and planeNormal will be used to spec-
ify the plane location.
REAL8 planeBase[0..2] A location (in global  rectangular coordinates) on the plane.
REAL8 planeNormal[0..2] A vector that is normal to the plane.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-384  feCheckCoincidentElem
3.5.6.8  feCheckCoincidentElem
feCheckCoincidentElem
( elemSET, chkTYPE, chkSHAPE, chkMASS, doLIST, makeGROUP1, makeGROUP2 )
Description:This function checks a set of elements to see if any of them are coincident (share the same nodes).
Input:
INT4 elemSETThe ID of a selection set that contains the IDs of the elements to 
check. Alternatively, if you specify a negative value, this is simply 
the ID of the single element to check. 
BOOL chkTYPE If True, elements of different type can still be considered coincident.
BOOL chkSHAPEIf True, elements of different shape can be considered coincident if 
all of the nodes of one of the el ements are on the other element.
BOOL chkMASS If True, mass elements are included in the check.
BOOL doLISTIf True, coincident elements are listed in the Messages and Lists win-
dow.
BOOL makeGROUP1 If True, a group is made of the first element in the coincident pair.BOOL makeGROUP2 If True, a group is made of the second element in the coincident pair.Output:NoneReturn Code:NoneRemarks/Usage:This function only finds coincident elements that share the same nodes - not ones that may be coincident 
in physical location, but still have different nodes.
Example:None
feCheckElemFixup   API-385
3.5.6.9  feCheckElemFixup
feCheckElemFixup
( elemSET )
Description:This function checks and attempts  to fix a set of elements to see if any of them are invalid.
Input:
INT4 elemSETThe ID of a selection set that contains the IDs of the elements to 
check. Alternatively, if you specify a negative value, this is simply 
the ID of the single element to check. 
Output:NoneReturn Code:
None
Remarks/Usage:This function is just lik e the fixup option in the Tools, Check, Distortion command. Checks include zero 
length, twisted faces, inverted so lids, and element/property mismatch.
Example:None
 API-386  feCheckElemDistortion
3.5.6.10  feCheckElemDistortion
feCheckElemDistortion
( elemSET, doLIST, makeGROUP, chkASPECT, chkTAPER, chkANGLE, chkWARP, 
chkALTTAPER, chkTET, chkJDet, chkComb, maxASPECT, maxTAPER, maxANGLE, 
maxWARP, maxALTTAPER, maxTET, maxJDet, maxComb )
Description:This function checks a set of elements  to see if any of them are distorted.
Input:
INT4 elemSETThe ID of a selection set that contains the IDs of the elements to 
check. Alternatively, if you specify a negative value, this is simply 
the ID of the single element to check. 
BOOL doLISTIf True, distorted elements are listed in the Messages and Lists win-
dow.
BOOL makeGROUP If True, a group is made of the distorted elements.
BOOL chkASPECT If True, the aspect ratio check is performed.
BOOL chkTAPER If True, element taper is checked.BOOL chkANGLE If True, the element in ternal angle check is performed.
BOOL chkWARP If True, the element warping check is performed.BOOL chkALTTAPER If True, the alternat e element taper check is performed.
BOOL chkTET If True, tetrahedral elements are checked for collapse.BOOL chkJDet If True, checks element JacobianBOOL chkComb If True, checks for combined element distortion factor
REAL8 maxASPECT Limit for aspect ratio check.REAL8 maxTAPER Limit for taper check.REAL8 maxANGLE Limit for internal angle check.REAL8 maxWARP Limit for warping check.REAL8 maxALTTAPER Limit for a lternate element taper check.
REAL8 maxTET Limit for tet collapse check.REAL8 maxJDet Limit for Jacobian checkREAL8 maxComb Limit for Combin ed Element Distortion check
Output:None
feCheckElemDistortion   API-387
Return Code:
FE_INV ALIDData in the limit values is outside the acceptable bounds.
Remarks/Usage:
This function is just like the Tools, Check, Distortion command. The checks performed and the limit 
values are identical  to that command.
Example:NonefeCheckElemDistortion
( elemSET, doLIST, makeGROUP, chkASPECT, chkTAPER, chkANGLE, chkWARP, 
chkALTTAPER, chkTET, chkJDet, chkComb, maxASPECT, maxTAPER, maxANGLE, maxWARP, maxALTTAPER, maxTET, maxJDet, maxComb )
 API-388  feCheckElemDistortion2
3.5.6.11  feCheckElemDistortion2
feCheckElemDistortion2
( elemSET, doLIST, makeGROUP, chkASPECT, chkTAPER, chkANGLE, chkWARP, 
chkALTTAPER, chkTET, chkJDet, chkComb, chkExpTime, maxASPECT, maxTAPER, 
maxANGLE, maxWARP, maxALTTAPER, maxTET, maxJDet, maxComb, maxExpTime )
Description:This function checks a set of elements  to see if any of them are distorted.
Input:
INT4 elemSETThe ID of a selection set that contains the IDs of the elements to 
check. Alternatively, if you specify a negative value, this is simply 
the ID of the single element to check. 
BOOL doLISTIf True, distorted elements are listed in the Messages and Lists win-
dow.
BOOL makeGROUP If True, a group is made of the distorted elements.
BOOL chkASPECT If True, the aspect ratio check is performed.
BOOL chkTAPER If True, element taper is checked.BOOL chkANGLE If True, the element in ternal angle check is performed.
BOOL chkWARP If True, the element warping check is performed.BOOL chkALTTAPER If True, the alternat e element taper check is performed.
BOOL chkTET If True, tetrahedral elements are checked for collapse.BOOL chkJDet If True, checks element JacobianBOOL chkComb If True, checks for combined element distortion factor
BOOL chkExpTime If True, checks for Explicit Time Step factorsREAL8 maxASPECT Limit for aspect ratio check.REAL8 maxTAPER Limit for taper check.REAL8 maxANGLE Limit for internal angle check.REAL8 maxWARP Limit for warping check.REAL8 maxALTTAPER Limit for a lternate element taper check.
REAL8 maxTET Limit for tet collapse check.REAL8 maxJDet Limit for Jacobian checkREAL8 maxComb Limit for Combin ed Element Distortion check
REAL8 maxExpTime Limit for Explicit Time Step check
feCheckElemDistortion2   API-389
Output:
NoneReturn Code:
FE_INV ALIDData in the limit values is outside the acceptable bounds.
Remarks/Usage:
This function is just like the Tools, Check, Distortion command. The checks performed and the limit 
values are identical  to that command.
Example:
NonefeCheckElemDistortion2
( elemSET, doLIST, makeGROUP, chkASPECT, chkTAPER, chkANGLE, chkWARP, 
chkALTTAPER, chkTET, chkJDet, chkComb, chkExpTime, maxASPECT, maxTAPER, maxANGLE, maxWARP, maxALTTAPER, maxTET, maxJDet, maxComb, maxExpTime )
 API-390  feGetElemDistortion
3.5.6.12  feGetElemDistortion
feGetElemDistortion
( elemID, valASPECT, valTAPER, valANGLE, valWARP, valNasWARP, valALTTAPER, 
valTET, valJDet, valComb )
Description:This function checks an element and returns the distortion values.Input:INT4 elemID The ID of the element to check for distortion.Output:REAL8 valASPECT Result of aspect ratio check.REAL8 valTAPER Result of taper check.REAL8 valANGLE Result of internal angle check.
REAL8 valWARP Result of warping check.REAL8 valNasWARP Result of Nastran warping checkREAL8 valALTTAPER Result of a lternate element taper check.
REAL8 valTET Result of tet collapse check.REAL8 valJDet Result of Jacobian check.REAL8 valComb Results of Combined Quality check
Return Code:NoneRemarks/Usage:This function is just like the Tools, Check, Distortion  command. The checks perfo rmed and the returned 
values are identical  to that command.
Example:None
feGetElemDistortion2   API-391
3.5.6.13  feGetElemDistortion2
feGetElemDistortion2
( elemID, valASPECT, valTAPER, valANGLE, valWARP, valNasWARP, valALTTAPER, 
valTET, valJDet, valComb, valExpTime )
Description:This function checks an element and returns the distortion values.Input:INT4 elemID The ID of the element to check for distortion.Output:REAL8 valASPECT Result of aspect ratio check.REAL8 valTAPER Result of taper check.REAL8 valANGLE Result of internal angle check.
REAL8 valWARP Result of warping check.REAL8 valNasWARP Result of Nastran warping checkREAL8 valALTTAPER Result of a lternate element taper check.
REAL8 valTET Result of tet collapse check.REAL8 valJDet Result of Jacobian check.REAL8 valComb Results of Combined Quality check
REAL8 valExpTime Results of Explicit Time Step checkReturn Code:NoneRemarks/Usage:This function is just like the Tools, Check, Distortion  command. The checks perfo rmed and the returned 
values are identical  to that command.
Example:None
 API-392  feCheckElemNormal
3.5.6.14  feCheckElemNormal
feCheckElemNormal
( elemSET, csysID, doLIST, swapNORMAL, autoNORMAL, manNORMAL )
Description:This function checks and optionally reverses element normals.Input:
INT4 elemSETThe ID of a selection set that contains the IDs of the elements to 
check. Alternatively, if you specify a negative value, this is simply 
the ID of the single element to check. 
INT4 csysIDThe coordinate system in which the check is done. If you are specify-
ing manNORMAL, it must be in  this coordinate system.
BOOL doLISTIf True, swapped elements are listed in the Messages and Lists win-
dow.
BOOL swapNORMALIf True, elements with normals that  are opposite to the desired nor-
mal are reversed.
BOOL autoNORMALIf True, the desired normal direc tion is automatically determined 
from the first selected element. If False, the normal must be specified 
in manNORMAL.
REAL8 manNORMAL[0..2]A unit vector, with coordinates in CSys “csysID”, in the direction of 
the desired normal. Only used if autoNORMAL=False.
Output:NoneReturn Code:
FE_TOO_SMALLOne of the arrays has dimensions which are too small to be used 
where you specified it.
FE_NOT_A V AILABLE One of the arrays does not contain the required data.
FE_INV ALID Data in the input arrays  is outside the acceptable bounds.
FE_BAD_TYPEData in the input arrays is not of  the correct type (e.g. REAL8 or 
INT4)
Remarks/Usage:Only works with planar elements.Example:None
feCheckConstraints   API-393
3.5.6.15  feCheckConstraints
feCheckConstraints
( doPERM, doLIST, bcSUM, bcSEP )
Description:This function checks constraint s in the active constraint set.
Input:BOOL doPERM If True, permanent nodal co nstraints are included in the check.
BOOL doLIST If True, a summary report is listed.Output:
REAL8 bcSUM[0..5]The sum of the constraint values in each of the six degrees of free-
dom.
REAL8 bcSUM[0..8]The max separation of constraints. [0],[1],[2] are the max XYZ sepa-
ration of the X constraints. [3],[4 ],[5] are the XYZ separation of the 
Y constraints, [6],[7],[8] are the XYZ separation of the Z constraints.
Return Code:
FE_TOO_SMALLOne of the arrays has dimensions which are too small to be used 
where you specified it.
FE_NOT_A V AILABLE One of the arrays does not contain the required data.
FE_INV ALID Data in the input arrays  is outside the acceptable bounds.
FE_BAD_TYPEData in the input arrays is not of  the correct type (e.g. REAL8 or 
INT4).
Remarks/Usage:Automatically uses whichever constraint set is active.
Example:None
 API-394  feCheckCoincidentLoads
3.5.6.16  feCheckCoincidentLoads
feCheckCoincidentLoads
( loadSET, mergeLOADS )
Description:This function checks loads from a group of load sets to see if similar load s are applied to the same 
geometry or mesh.
Input:
INT4 loadSETThe ID of a selection set that contains the IDs of the load sets to 
check. Alternatively, if you specify a negative value, this is simply 
the ID of the single load set to check. 
BOOL mergeLOADSIf True and coincident loads are foun d, an attempt is made to merge/
combine them.
Output:NoneReturn Code:NoneRemarks/Usage:Unlike the Tools, Check, Coincident Loads  command, this command does not give you the opportunity 
to selectively merge individual types of loads - either all types, or no types, are merged.
Example:None
feCheckSumForces   API-395
3.5.6.17  feCheckSumForces
feCheckSumForces
( expandGEOM, doLIST, useSETS, nodeSET, elemSET, basePOINT, csysID, summed-
FORCES )
Description:This function checks loads from the ac tive load set and sums the forces around a sp ecific location. This 
function is obsolete and has been superseded by feCheckSumForces2.
Input:
BOOL expandGEOMIf True, geometric loads are expanded before the check. If not, 
nonexpanded geometric loads will be ignored.
BOOL doLIST If True, a summary report is written.
BOOL useSETSIf True, nodeSET and elemSET must  specify the nodes and ele-
ments to consider in the summa tion. If False, the full model is 
used.
INT4 nodeSETThe ID of a selection set that contains the IDs of the nodes to 
check. Alternatively, if you specify a negative value, this is simply 
the ID of the single node to ch eck. Only used if useSETS=True.
INT4 elemSETThe ID of a selection set that contains the IDs of the elements to 
check. Alternatively, if you specify a negative value, this is simply 
the ID of the single element to ch eck. Only used if useSETS=True.
REAL8 basePOINT[0..2]The coordinates of the location to sum about. Must be in global 
rectangular coordinates.
INT4 csysIDThe coordinate system used to report and return ed the summed 
loads.
Output:
REAL8 summedFORCES[0..26]The results of the force summatio n. Entries [0..5] are the nodal 
force summations, [6..8] contain the elemental force summation, 
[9..14] contain the total summati on, [15-17] contain body transla-
tional acceleration, [18-20] contain body varying translational 
acceleration, [21-23] contain body  rotational acceleration, [24-26] 
contain body rotational velocity.
Return Code:NoneRemarks/Usage:Uses the loads in the active load set.Example:
 API-396  feCheckSumForces
NonefeCheckSumForces
( expandGEOM, doLIST, useSETS, nodeSET, elemSET, basePOINT, csysID, summed-
FORCES )
feCheckSumForces2   API-397
3.5.6.18  feCheckSumForces2
feCheckSumForces2
( useBodyLoad, expandGEOM, doLIST, useSETS, nodeSET, elemSET, loaddefSET, base-
POINT, csysID, summedFORCES )
Description:This function checks loads from the active load set and sums the forces around a specific location.
Input:
BOOL useBodyLoadIf True, body loads will be included in the calculation. If not, body 
loads will be ignored
BOOL expandGEOMIf True, geometric loads are expand ed before the check. If not, non-
expanded geometric loads will be ignored.
BOOL doLIST If True, a summary report is written.
BOOL useSETSIf True, nodeSET and elemSET OR loaddefSET must specify the 
nodes and elements OR load defin itions to consider in the summa-
tion. To use nodeSET and elemSET, set loaddefSET = 0, otherwise, 
loaddefSET will be used. If Fa lse, the full model is used.
INT4 nodeSETThe ID of a selection set that contains the IDs of the nodes to check. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single node to check. Only used if useSETS=True and loaddef-
SET = 0
INT4 elemSETThe ID of a selection set that contains the IDs of the elements to 
check. Alternatively, if you specify a negative value, this is simply 
the ID of the single el ement to check. Only used if useSETS=True 
and loaddefSET = 0.
INT4 loaddefSETThe ID of a selection set that contai ns the IDs of the load definitions 
to check. Alternatively, if you specify  a negative value, this is simply 
the ID of the single load defin ition. Only used if useSETS=True.
REAL8 basePOINT[0..2]The coordinates of the location to su m about. Must be in global rect-
angular coordinates.
INT4 csysID The coordinate system used to report and returned the summed loads.Output:
REAL8 summed-
FORCES[0..26]The results of the force summation.  Entries [0..5] are the nodal force 
summations. [6..8] contain the elem ental force summation. [9..14] 
contain the total summation. [15- 17] contain body translational 
acceleration. [18-20] contain body va rying translational acceleration. 
[21-23] contain body rotational acceleration. [24-26] contain body rotational velocity.
Return Code:
 API-398  feCheckSumForces2
None
Remarks/Usage:Uses the loads in the active load set.Example:NonefeCheckSumForces2
( useBodyLoad, expandGEOM, doLIST, useSETS, nodeSET, elemSET, loaddefSET, base-
POINT, csysID, summedFORCES )
feCheckElemInterference   API-399
3.5.6.19  feCheckElemInterference
feCheckElemInterference
( nSetID, bFreeFaceSolids, bMakeGroup  )
Description:This function checks the interferences of a give set of elements.Input:INT4 nSetID The ID of the set of elements to check.
BOOL bFreeFaceSolidsIf True, limits to free faces of solid elements. If False, all faces are 
checked.
BOOL bMakeGroup If True, a group will be made with the elements that interfere.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-400  feCheckElemInterference2
3.5.6.20  feCheckElemInterference2
feCheckElemInterference2
( elSetID, bFreeFaceSolids, bMakeGroup, bIntFactor, dTol  )
Description:This function checks the interferences of a give set of elements.Input:INT4 elSetID The ID of the set of elements to check.
BOOL bFreeFaceSolidsIf True, limits to free faces of solid elements. If False, all faces are 
checked.
BOOL bMakeGroup If True, a group will be made with the elements that interfere.
BOOL bIntFactor If True, use Interference Factor. If False, use Proximity Factor.REAL8 dTol Specifies value for Inte rference Factor/Proximity Factor
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
feChartPaneGetDisplayed   API-401
3.5.7  Charting Pane
3.5.7.1  feChartPaneGetDisplayed
feChartPaneGetDisplayed
( void )
Description:This function gets the ID  of the chart object displayed in the charting pane
Input:NoneOutput:NoneReturn Code:
INT4Returns a integer value correspon ding to the displayed chart
>= 1: Chart ID
0: No active chart-1: Chart pane is not visible
Remarks/Usage:NoneExample:None
 API-402  feChartPaneSetDisplayed
3.5.7.2  feChartPaneSetDisplayed
feChartPaneSetDisplayed
( nChartID )
Description:This function sets the displa yed chart in the charting pane
Input:INT4 nChartID ID of the chart object to display in the charting paneOutput:NoneReturn Code:FE_FAIL Charting pane is not displayedFE_NOT_EXIST Provided chart ID does not existRemarks/Usage:NoneExample:None
feChartPaneCopy   API-403
3.5.7.3  feChartPaneCopy
feChartPaneCopy
( bCopyPicture , bCopyText )
Description:This function will send a copy of th e image currently shown in the charting pane and/or text of the data 
currently being displayed in the charting pane to the clipboard.
Input:
BOOL bCopyPictureIf True, a copy of the image currently displayed in the Charting Pane 
will be sent to the clipboard.
BOOL bCopyTextIf True, text representing the data currently being displayed in the 
Charting Pane will be sent to the clipboard.
Output:NoneReturn Code:FE_FAIL Charting pane is not displayedRemarks/Usage:If both the image and the text are se nt to the clipboard at the same time with this call, only the text will 
be available to paste into some app lications, while other applications w ill give the user a choice to paste 
either the image or the text.
Example:None
 API-404  
3.6  Geometry Methods
Geometry Methods include:
•Section 3.6.1, "Lines"
•Section 3.6.2, "Arcs"
•Section 3.6.3, "Circles"
•Section 3.6.4, "Splines"
•Section 3.6.5, "Curves from Surfaces Methods"
•Section 3.6.6, "Curve Modification Methods"
•Section 3.6.7, "Boundaries"
•Section 3.6.8, "Surfaces"
•Section 3.6.9, "Midsurfaces"
•Section 3.6.10, "Solids"
•Section 3.6.11, "Geometry and Mesh Generation Methods"
•Section 3.6.12, "Meshing Toolbox - Geometry Editing Tool Methods"
•Section 3.6.13, "Creating FEMAP geometry from Parasolid Geometry"
•Section 3.6.14, "Nodal Area on Geometry"
feLinePoints   API-405
3.6.1  Lines
3.6.1.1  feLinePoints
feLinePoints
( ontoWorkplane, p1, p2, messages )
Description:Creates a line between two coordinate locations.Input:
BOOL ontoWorkplaneIf True, the coordinates specified are projected onto the workplane 
before the line is created.
REAL8 p1[0..2] Coordinates at the first end of the line.REAL8 p2[0..2] Coordinates at the second end of the line.
BOOL messagesIf True, messages are written to the Message and Lists window as the 
curve is created.
Output:NoneReturn Code:FE_FAIL Could not create the line.Remarks/Usage:NoneExample:None
 API-406  feLineHorzVert
3.6.1.2  feLineHorzVert
feLineHorzVert
( horizontal, p1, length, messages )
Description:Creates a horizontal or ver tical line in the workplane.
Input:
BOOL horizontalIf True, the line will be horizontal (workplane X axis). If False, the 
line will be vertical (workplane Y axis).
REAL8 p1[0..2]Coordinates that will be projected onto the workplane at the center of 
the line.
REAL8 length The overall length of the line.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Could not create the line.Remarks/Usage:NoneExample:None
feLineAtAngle   API-407
3.6.1.3  feLineAtAngle
feLineAtAngle
( angle, curveID, origin, side, messages )
Description:Creates a line at an angle to th e workplane, or another curve.
Input:REAL8 angle The angle from the workpl ane X axis, or the selected curve.
INT4 curveIDThe ID of the curve used to measure the angle. Set to 0 if you want to 
specify the angle from the workpl ane X axis (toward the Y axis).
REAL8 origin[0..2]The coordinates at the start of the line. These are pr ojected onto the 
curve to find location where the tang ent vector is determined and at 
which the angle is measured.
REAL8 side[0..2]A location on the side of the curve where the line will be drawn 
toward. Not used if you are meas uring from the workplane X axis. 
The line does not necessarily  pass through this poin t; it is just used to 
determine which direction to go from the origin location.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Could not create the line - probably the curve does not exist.
Remarks/Usage:NoneExample:None
 API-408  feLineParallel
3.6.1.4  feLineParallel
feLineParallel
( offset, curveID, side, messages )
Description:Creates a line parallel to another in the workplane.Input:
REAL8 offsetThe perpendicular distan ce from the selected curve used to locate the 
new curve.
INT4 curveID The ID of the reference curve.
REAL8 side[0..2]A location on the side of the curve where the line will be drawn. The 
line does not necessarily pass through this point; it is just used to 
determine which direction to go from the reference curve location.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:
FE_FAILCould not create the line - either the curve does not exist or it is not 
of the correct type.
Remarks/Usage:NoneExample:None
feLineMidline   API-409
3.6.1.5  feLineMidline
feLineMidline
( curve1, curve2, messages )
Description:Creates a line that is midway between two other lines.Input:INT4 curve1
The two reference curves used to  determine the midline location.
INT4 curve2
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:
FE_FAILCould not create the line - either one of  the curves does not exist or is 
not of the correct type.
Remarks/Usage:NoneExample:None
 API-410  feLinePointTangent
3.6.1.6  feLinePointTangent
feLinePointTangent
( curveID, origin, side, messages )
Description:Creates a line through an origin that  is tangent to a selected curve.
Input:INT4 curveID The ID of the curve that the line will be tangent to.
REAL8 origin[0..2]The location at the start of the line. The line will pass through this 
location and be tangent to the curve.
REAL8 side[0..2]A location on the side of the curv e where the line will be tangent. 
The line does not normally pass throug h this point; it is just used to 
determine which tangent to select.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:
FE_FAILCould not create the line - either the curve does not exist or there is 
no tangent that could be computed.
Remarks/Usage:NoneExample:None
feLine2Tangent   API-411
3.6.1.7  feLine2Tangent
feLine2Tangent
( curve1, curve2, side, messages )
Description:Creates a line that is tangen t to two selected curves.
Input:INT4 curve1
The IDs of the curves that the line will be tangent to.
INT4 curve2
REAL8 side[0..2]A location on the side of the firs t curve where the line will be tan-
gent. The line does not normally p ass through this point; it is just 
used to determine whic h tangent to select.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:
FE_FAILCould not create the line - either on e of the curves does not exist or 
there is no tangent that could be computed.
Remarks/Usage:NoneExample:None
 API-412  feLineRectangle
3.6.1.8  feLineRectangle
feLineRectangle
( p1, p2, messages )
Description:Creates four lines that form a rectangle in the workplane be tween two diagonal locations.
Input:REAL8 p1[0..2]The diagonal locations that define the corners of the rectangle. These 
locations are projected onto the workplane.REAL8 p2[0..2]
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the curves.Remarks/Usage:NoneExample:None
feLinePointIDs   API-413
3.6.1.9  feLinePointIDs
feLinePointIDs
( p1, p2, messages )
Description:Creates a line that joins two points.Input:INT4 p1 The ID of the point at the start of the line.INT4 p2 The ID of the point at the end of the line.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the line - prob ably one of the points does not exist.
Remarks/Usage:NoneExample:None
 API-414  feArcCenterStartEnd
3.6.2  Arcs
3.6.2.1  feArcCenterStartEnd
feArcCenterStartEnd
( center, start, end, messages )
Description:Creates an arc in the workplane by specifying the cent er of the arc, a starting location, and an ending 
location.
Input:REAL8 center[0..2] The locations used to define the arc. The center  is at the center of the 
arc. start is a point on the perimeter at  the beginning of the arc, and 
defines the radius. end is not necessarily on the arc, but specifies the 
ending location.REAL8 start[0..2]
REAL8 end[0..2]
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the arc.Remarks/Usage:NoneExample:None
feArcRadiusStartEnd   API-415
3.6.2.2  feArcRadiusStartEnd
feArcRadiusStartEnd
( radius, start, end, messages )
Description:Creates an arc in the workplane by specifying the ra dius of the arc, a starting location and an ending 
location.
Input:REAL8 radius The radius of the arc.REAL8 start[0..2] The locations  used to define the arc. start is a point on the perimeter 
at the beginning of the arc, end is on the perimeter at the end of the 
arc. REAL8 end[0..2]
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:
FE_FAILUnable to create the arc - radius could be too small for locations 
specified.
Remarks/Usage:NoneExample:None
 API-416  feArcAngleStartEnd
3.6.2.3  feArcAngleStartEnd
feArcAngleStartEnd
( angle, start, end, messages )
Description:Creates an arc in the workplane by specifying the incl uded angle of the arc, a starting location, and an 
ending location.
Input:REAL8 angle The included angle swept out by the arc.REAL8 start[0..2] The locations  used to define the arc. start is a point on the perimeter 
at the beginning of the arc, end is on the perimeter at the end of the 
arc. REAL8 end[0..2]
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the arc - angle may not be valid.Remarks/Usage:NoneExample:None
feArcAngleCenterStart   API-417
3.6.2.4  feArcAngleCenterStart
feArcAngleCenterStart
( angle, center, start, messages )
Description:Creates an arc in the workplane by specifying the incl uded angle of the arc, a location at the center, and 
a location on the perimeter.
Input:REAL8 angle The included angle swept out by the arc.REAL8 center[0..2] The locations  used to define the arc. center  is at the center of the arc. 
start is a point on the perimeter and is used with center  to determine 
the radius. REAL8 start[0..2]
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the arc - angle may not be valid.Remarks/Usage:NoneExample:None
 API-418  feArcChordCenterStart
3.6.2.5  feArcChordCenterStart
feArcChordCenterStart
( length, center, start, messages )
Description:Creates an arc in the workplane by specifying the chor d length of the arc, a location at the center, and a 
location on the perimeter.
Input:REAL8 length The chord length of the arc,  used to determine the included angle.
REAL8 center[0..2] The locations  used to define the arc. center  is at the center of the arc. 
start is a point on the perimeter and is used with center to determine 
the radius. REAL8 start[0..2]
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the arc.Remarks/Usage:NoneExample:None
feArcPoints   API-419
3.6.2.6  feArcPoints
feArcPoints
( start, mid, end, messages )
Description:Creates a 3D arc in space, through the three points.Input:REAL8 start[0..2]
The three points on the arc. The arc goes from start, toward mid and 
stops at end.REAL8 mid[0..2]
REAL8 end[0..2]
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the arc - points may be colinear.Remarks/Usage:NoneExample:None
 API-420  feArcCenterPoints
3.6.2.7  feArcCenterPoints
feArcCenterPoints
( center, start, mid, end, messages )
Description:Creates a 3D arc in space, about a center and defined by three additional points.
Input:REAL8 center[0..2] The locatio n at the center of the arc.
REAL8 start[0..2]The location at the start of the arc. This, along with center , determine 
the radius of the arc.
REAL8 mid[0..2]A location used to determine the direction of the arc from start - it 
does not necessarily lie on the arc.
REAL8 end[0..2]A location used to determine the en ding angle of the arc - it does not 
necessarily lie on the arc.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the arc - points may be colinear or invalid.
Remarks/Usage:NoneExample:None
feArcTangentStartEnd   API-421
3.6.2.8  feArcTangentStartEnd
feArcTangentStartEnd
( tangent, start, end, messages )
Description:Creates a 3D arc in space, from a poin t with a specified starting tangent.
Input:REAL8 tangent[0..2] A vector in the direc tion of the starting tangent of the arc.
REAL8 start[0..2] The location at the start of the arc. 
REAL8 end[0..2] The locatio n at the end of the arc.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the arc.Remarks/Usage:NoneExample:None
 API-422  feCircleRadius
3.6.3  Circles
3.6.3.1  feCircleRadius
feCircleRadius
( center, start, messages )
Description:Creates a circle in the workplan e defined by a location at the center and one on the perimeter.
Input:REAL8 center[0..2] The location at the center of the circle.
REAL8 start[0..2] A location on the perimeter of the circle.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the circle.Remarks/Usage:NoneExample:None
feCircleDiameter   API-423
3.6.3.2  feCircleDiameter
feCircleDiameter
( dia1, dia2, messages )
Description:Creates a circle in the workplan e defined by two locations at th e opposite ends of a diameter.
Input:REAL8 dia1[0..2]
The locations at the opposite ends  of the diameter of the circle.
REAL8 dia2[0..2]
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the circle.Remarks/Usage:NoneExample:None
 API-424  feCircleCenter
3.6.3.3  feCircleCenter
feCircleCenter
( radius, center, messages )
Description:Creates a circle in the workplane de fined a center location and the radius.
Input:REAL8 radius The radius of the circle.sREAL8 center[0..2] The location of  the center of the circle.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the circle.Remarks/Usage:NoneExample:None
feCircle2Point   API-425
3.6.3.4  fe Circle2Point
feCircle2Point
( radius, pt1, pt2, messages )
Description:Creates a circle in the workplane defined by  two points on the circle, and the radius.
Input:
REAL8 radiusThe radius of the circle. Specify a positive number to go in a counter-
clockwise direction from “pt1” to “pt2”. Specify a negative number 
to go in a clockwise dir ection. This is used to pick which of the two 
possible circles through th e two points that you are trying to define.
REAL8 pt1[0..2]
The locations on the circle.
REAL8 pt2[0..2]
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the circle.Remarks/Usage:NoneExample:None
 API-426  feCircleConcentric
3.6.3.5  feCircleConcentric
feCircleConcentric
( radius, curveID, messages )
Description:Creates a circle in the workplane, w ith a specified radius, that is concentric with another arc or circle.
Input:REAL8 radius The radius of the circle.INT4 curveID The ID of another arc or circle - used to define the center.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the circle.Remarks/Usage:NoneExample:None
feCircle3Point   API-427
3.6.3.6  fe Circle3Point
feCircle3Point
( pt1, pt2, pt3, messages )
Description:Creates a circle, in 3D space, through three points.Input:REAL8 pt1[0..2]
The locations on the circle. REAL8 pt2[0..2]
REAL8 pt3[0..2]
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the circle.Remarks/Usage:NoneExample:None
 API-428  feCircleCenterPoints
3.6.3.7  feCircleCenterPoints
feCircleCenterPoints
( center, pt1, pt2, messages )
Description:Creates a circle, in 3D space, using a center location, and specifie d by two other points.
Input:REAL8 center[0..2] The center of the circle.REAL8 pt1[0..2] Two additiona l points on the circle. pt1 is used to define the radius of 
the circle. Both points (and the cent er) are used to define the plane of 
the circle. REAL8 pt2[0..2]
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the circle.Remarks/Usage:NoneExample:None
feCircleCenterTangent   API-429
3.6.3.8  feCircleCenterTangent
feCircleCenterTangent
( curveID, center, messages )
Description:Creates a circle in the workplane that is tangent to a selected curve and uses the specified center.
Input:INT4 curveID ID of the curve that this circle will be tangent to.
REAL8 center[0..2] The center of the circle.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the circle.Remarks/Usage:NoneExample:None
 API-430  feCircleTangentTangent
3.6.3.9  feCircleTangentTangent
feCircleTangentTangent
( curve1, curve2, radius, nearloc, messages )
Description:Creates a circle in the workplane that is tangen t to two other curves, with a specified radius.
Input:INT4 curve1
IDs of the curves that this circle will be tangent to.
INT4 curve2
REAL8 radius The radius of the circle being created.
REAL8 nearloc[0..2]A location near the tangency. This is used to select which tangency to 
use when there are several possible circles that meet the tangency 
and radius criteria.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the circle.Remarks/Usage:NoneExample:None
feSplinePoints   API-431
3.6.4  Splines
3.6.4.1  feSplinePoints
feSplinePoints
( project, controlpoints, count, xyz, messages )
Description:Creates a spline using the specified points.Input:
BOOL projectSet to True if you want to projec t the xyz coordinates onto the work-
plane before creating the spline.
BOOL controlpointsSet to True if xys contains coordi nates of the spline control points. 
Set to False if it contains coordinates of points that actually lie on the 
spline.
INT4 countThe number of coordinates specified in xyz. Count must be at least 4, 
and can be no larger than 109.
REAL8 xyz[0..3*count-1]The coordinates of the locations used  to define the spline. This array 
contains 3 * count entries stored as: x1,y1,z1,x2,y2,z2...xN,yN,zN.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the spline.Remarks/Usage:NoneExample:
 API-432  feSplinePoints
This is a sample program to cr eate a spline through 6 points.

Sub Main 
Dim App As femap.model 
Set App = feFemap() 
Dim x(18) As Double 
Dim v As Variant 
Dim rc As Integer 

x(0) = 0# 
x(1) = 0# 
x(2) = 0# 
x(3) = 1# 
x(4) = 0# 
x(5) = 0 
x(6) = 1 
x(7) = 1 
x(8) = 0 
x(9) = 2 
x(10) = 1 
x(11) = 0 
x(12) = 2 
x(13) = 0 
x(14) = 0 
x(15) = 2.5 
x(16) = 1 
x(17) = 1 
v = x

rc = App.feSplinePoints(False, False, 6, v, True) 
App.feViewRegenerate(0) 
End SubfeSplinePoints
( project, controlpoints, count, xyz, messages )
feSplineTangent   API-433
3.6.4.2  feSplineTangent
feSplineTangent
( x1, v1, x2, v2, messages )
Description:Creates a spline using the tangent vectors at each end.Input:REAL8 x1[0..2] The coordinates of the start of the spline.REAL8 v1[0..2] The components of th e starting tangent of the spline.
REAL8 x2[0..2] The coordinates of the ending location of the spline.REAL8 v2[0..2] The components of the ending tangent of the spline.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the spline.Remarks/Usage:NoneExample:None
 API-434  feSplineEllipse
3.6.4.3  feSplineEllipse
feSplineEllipse
( center, vector, a, b, messages )
Description:Creates splines in the workpl ane that form an ellipse.
Input:REAL8 center[0..2] The coordinates at the center of the ellipse.REAL8 vector[0..2] The components of the vector along one axis of the ellipse.
REAL8 a The radius of the ellipse along the vector.
REAL8 b The radius of the ellipse  perpendicular to the vector.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the spline.Remarks/Usage:NoneExample:None
feSplineParabola   API-435
3.6.4.4  feSplineParabola
feSplineParabola
( center, focus, trim, messages )
Description:Creates a spline in the workplan e in the shape of a parabola.
Input:REAL8 center[0..2] The coordinates at the center of the parabola.REAL8 focus[0..2] The coordinates of the focus of the parabola.REAL8 trim[0..2] The coordinates used to  trim the outer end of the parabola.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the spline.Remarks/Usage:NoneExample:None
 API-436  feSplineHyperbola
3.6.4.5  feSplineHyperbola
feSplineHyperbola
( center, towardfocus, angle, height, trim, messages )
Description:Creates a spline in the workplan e in the shape of a hyperbola.
Input:REAL8 center[0..2] The coordinates at the center of the hyperbola.
REAL8 towardfocus[0..2]The components of a vector in the direction pointing toward the 
focus from the center.
REAL8 angle The asymptote angle.REAL8 height The vertex height.REAL8 trim[0..2] The coordinates used to  trim the outer end of the hyperbola.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the spline.Remarks/Usage:NoneExample:None
feSplineBlend   API-437
3.6.4.6  feSplineBlend
feSplineBlend
( curve1, near1, curve2, near2, factor, messages )
Description:Creates a spline in that blends the ends of two curves.Input:INT4 curve1 The ID of the first curve.REAL8 near1[0..2] Coordinates ne ar the desired end of curve1.
INT4 curve2 The ID of the second curve.REAL8 near2[0..2] Coordinates ne ar the desired end of curve2.
REAL8 factorThe blend factor - adjusts the cu rvature of the spline between the 
curves.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the spline.Remarks/Usage:NoneExample:None
 API-438  feSplineMultipleCurve
3.6.4.7  feSplin eMultipleCurves
feSplineMultipleCurve
( cuSetID )
Description:This method creates a spline from a set of curves.Input:INT4 cuSetID The ID of the set of curves.Output:NoneReturn Code:FE_FAIL Unable to create the spline.Remarks/Usage:NoneExample:None
feCurveUpdateSurfaces   API-439
3.6.5  Curves from Surfaces Methods
3.6.5.1  feCurveUpdateSurfaces
feCurveUpdateSurfaces
( update, messages )
Description:This method sets the fl ag that decides whether the “Curves from Surfaces” methods will update their 
underlying surface.
Input:
BOOL updateSet to True to update /split the underlying surfa ces as curves are pro-
jected or created on th e surfaces. If False, then  the curves will be cre-
ated at the same locations, but the surfaces will remain unchanged.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-440  feCurveIntersectSolids
3.6.5.2  feCurveIntersectSolids
feCurveIntersectSolids
( solid1, solid2 )
Description:This method creates curves along the intersections of two solids. It can also be used to intersect two 
solid surfaces.
Input:INT4 solid1 The IDs of the two solids to intersect. Th ese solids can be regular 
solids, or sheet solids (solids w ith one or more surfaces, but no 
enclosed volume). INT4 solid2
Output:
NoneReturn Code:FE_FAIL Unable to create the curves.Remarks/Usage:If feCurveUpdateSurfaces is True, th e surfaces of the solids will be split at the intersection curves.
Example:None
feCurveProjectOntoSolid   API-441
3.6.5.3  feCurveProjectOntoSolid
feCurveProjectOntoSolid
( projectNormal, along, solidID, curveSET, messages )
Description:Creates curves by projecting one or more curves onto a solid.Input:
BOOL projectNormalIf True, the projection is done to the closest location on the solid. If 
False, the projection is along the “along” vector.
REAL8 along[0..2]The components of the vector to project along. Ignored unless pro-
jectNormal is False.
INT4 solidID The ID of th e solid to project onto.
INT4 curveSETThe ID of the set of existing curves to project onto the solid. Specify 
as a negative value to project a single curve.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the curves.Remarks/Usage:If feCurveUpdateSurfaces is True, th e surfaces of the solids will be  split at the projected curves.
Example:None
 API-442  feCurveProjectOntoSurfaces
3.6.5.4  feCurveProjectOntoSurfaces
feCurveProjectOntoSurfaces
( projectNormal, along, surfSET, curveSET, messages )
Description:Creates curves by projecting one or more curves onto one or more surfaces.Input:
BOOL projectNormalIf True, the projection is done to the closest location on the surface. 
If False, the projection is along the “along” vector.
REAL8 along[0..2]The components of the vector to project along. Ignored unless pro-
jectNormal is False.
INT4 surfSETThe ID of the set of existing surfaces to project onto. Specify as a 
negative value to project onto a single surface.
INT4 curveSETThe ID of the set of existing curves to project onto the surfaces. 
Specify as a negative value to project a single curve.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the curves.Remarks/Usage:If feCurveUpdateSurfaces is Tr ue, the surfaces will be spl it at the projected curves.
Example:None
feCurveParametricOnSurface   API-443
3.6.5.5  feCurveParametricOnSurface
feCurveParametricOnSurface
( surfID, uDir, location, messages )
Description:Creates a curve on a surface along one of the parametric directions of the surface.Input:INT4 surfID The ID of the surface  used to define the curve.
BOOL uDirIf True, the curve will be along the surface U parametric direction. If 
False, the V parametric direction will be used.
REAL8 location[0..2]A location that the curve will pass th rough. This location is projected 
onto the surface and used to find th e parametric value used to define 
the curve.
BOOL messagesIf True, messages are written to th e Messages and Lists window as 
the curve is created.
Output:NoneReturn Code:FE_FAIL Unable to create the curves.Remarks/Usage:If feCurveUpdateSurfaces is True, the surface will be split at the parametric curve.
Example:None
 API-444  feCurveSlice
3.6.5.6  feCurveSlice
feCurveSlice
( solidID, planeBASE, planeNORMAL, planeX )
Description:Creates curves by slicing a solid with a plane.Input:INT4 solidID The ID of the solid being sliced.
REAL8 planeBASE[0..2] Any lo cation that lies on the plan e used to slice the solid.
REAL8 planeNORMAL[0..2] The components of a vector that is normal to the plane.
REAL8 planeX[0..2]The components of a reference vector  that lies in the plane - must be 
perpendicular to planeNORMAL.
Output:NoneReturn Code:FE_FAIL Unable to create the curves.Remarks/Usage:If feCurveUpdateSurfaces is True, the surfaces of the solid will be split at the sl icing plane. This does 
not slice the solid into two solid s. It simply splits the surfaces.
Example:None
feCurveOffsetCurveWasher   API-445
3.6.5.7  feCurveOffsetCurveWasher
feCurveOffsetCurveWasher
( curveSET, faceID, nMode, bAutoSelect, bSaveSplit, bExtend, dOffset )
Description:This method is obsolete and should no longer be  used. It has been repl aced by feCurveOffsetCurve-
Washer2. Creates curves by offsetting selected curves on a surface
Input:INT4 curveSET The ID of the set of existing cu rves to create a washer or offset curve.
INT4 faceID The ID of the surfa ce to offset the curves on.
INT4 nMode Offset Type: 0 = Curve, 1 = Washer
BOOL bAutoSelectOffset Only: Flag to automatically of fset the selected curves to all of 
the surfaces connected to those curves
BOOL bSaveSplit Flag to keep split lines u sed when creating washer or offset curves.
BOOL bExtend Offset Only: Flag to exte nd offset curves to closest edge.
REAL8 dOffset Distance to offset curves.Output:NoneReturn Code:FE_FAIL Unable to create the curves.Remarks/Usage:NoneExample:None
 API-446  feCurveOffsetCurveWasher2
3.6.5.8  feCurveOffsetCurveWasher2
feCurveOffsetCurveWasher2
( curveSET, faceID, nMode, bAutoSelect, bSaveSplit, bExtend, dValue, nOffMode )
Description:Creates curves by offsetting selected curves on a surface
Input:INT4 curveSET The ID of the set of existing cu rves to create a washer or offset curve.
INT4 faceID The ID of the surfa ce to offset the curves on.
INT4 nMode Offset Type: 0 = Curve, 1 = Washer
BOOL bAutoSelectOffset Only: Flag to automatically of fset the selected curves to all of 
the surfaces connected to those curves
BOOL bSaveSplit Flag to keep split lines u sed when creating washer or offset curves.
BOOL bExtend Offset Only: Flag to exte nd offset curves to closest edge.
REAL8 dValue Distance to off set curves or washer factor
INT4 nOffModenMode=0 - nOffMode: 1 = Offset Distance
nMode=1 - nOffMode: 0 = Factor, 1 = Offset Distance
Output:NoneReturn Code:FE_FAIL Unable to create the curves.Remarks/Usage:NoneExample:None
feCurveSplitPointToPoint   API-447
3.6.5.9  feCurveSplitPointToPoint
feCurveSplitPointToPoint
( nPtA, nPtB )
Description:Splits a surface between two selected pointsInput:INT4 nPtA
The two points to sp lit the surface between
INT4 nPtB
Output:NoneReturn Code:FE_FAIL Unable to create th e curves / split the surface.
Remarks/Usage:Both points must be on the same surface.
Example:None
 API-448  feCurveSplitPointToEdge
3.6.5.10  feCurveSplitPointToEdge
feCurveSplitPointToEdge
( nPtA, nCuID )
Description:Splits a surface between a point and an edgeInput:INT4 nPtA The points to split the surface fromINT4 nCuID The ID of the curve to split toOutput:NoneReturn Code:FE_FAIL Unable to create th e curves / split the surface.
Remarks/Usage:The surface is split from the point to the closest location on the curve.  Both the point and the edge must 
lie on the same surface.
Example:None
feCurveSplitEdgeToEdge   API-449
3.6.5.11  feCurveSplitEdgeToEdge
feCurveSplitEdgeToEdge
( nLongEdge, nShortEdgeSet )
Description:Splits a surface between a long edge and the en dpoints of one or more selected other edges
Input:INT4 nLongEdge The ID of the edge to be split
INT4 nShortEdgeSetThe ID of a Set that contains th e IDs of the edges whose endpoints 
will be used to split the long e dge and associated surface. Alterna-
tively, specify a negativ e value to choose the ID of a single short 
edge.
Output:NoneReturn Code:FE_FAIL Unable to create th e curves / split the surface.
Remarks/Usage:The surface is split fro m the endpoints of the selected edges to point to the closest location on the long 
edge.  All edges must lie on the same surface.
Example:None
 API-450  feCurvePad
3.6.5.12  feCurvePad
feCurvePad
( curveSET, dValue, enPadOffsetType, enPadAlignment, bPadAddWasher, nPadAlign-
Curve, bSetupMappedMeshing, alignVEC )
Description:Creates a rectangular Pad around a circular hole.Input:INT4 curveSET The ID of the set of existing curves to create a pad.REAL8 dValue Factor or Offset distance for Pad creation.enum zPadOffsetType 
enPadOffsetTypeType of offset value: FPAD_SCALE, FPAD_DIST
enum zPadAlignment 
enPadAlignmentAlignment type: FPAD_AUTO, FPAD_VECTOR, FPAD_CURVE
BOOL bPadAddWasher Flag to add washer around circular hole.
INT4 nPadAlignCurve ID of curve to align pad to.BOOL bSetupMappedMeshing Flag to set up  mapped meshing approaches and sizing.
REAL8 alignVEC[0..2]The components of the vector to align pad. Ignored unless 
enPadAlignment = FPAD_VECTOR. 
Output:NoneReturn Code:FE_FAIL Unable to create the pad.Remarks/Usage:NoneExample:
feCurvePad   API-451
Sub Main
    Dim App As femap.model
    Set App = feFemap()
    Dim cSet As femap.Set
    Set cSet = App.feSet
    cSet.Select ( FT_CURVE , True, "Select Curves For Pad")    
    Dim dFact As Double
    Dim aCuID As Long    Dim bMap As Boolean
    Dim bWash As Boolean
    Dim valign As Variant
    Dim align(3) As Double
    dFact = 1
    
    align(0) = 1.0    align(1) = 0.0
    align(2) = 1.0
    valign = align    'aCuID = 1204
    bMap = True
    bWash = True
    App.feCurvePad( cSet.ID, dFact, FPAD_SCALE, FPAD_AUTO, bWash, 
aCuID, bMap, valign )
End SubfeCurvePad
( curveSET, dValue, enPadOffsetType, enPadAlignment, bPadAddWasher, nPadAlign-
Curve, bSetupMappedMeshing, alignVEC )
 API-452  feCurveTrim
3.6.6  Curve Modification Methods
3.6.6.1  feCurveTrim
feCurveTrim
(  curveID, trimID, nearLoc, extend )
Description:Trims a curve to its inter section with another curve.
Input:INT4 curveID The ID of the curve to be trimmed.
INT4 trimID The ID of the curve to use as the trimming boundary.
REAL8 nearLoc[0..2]The coordinates, in global rectangu lar, of the location near which the 
curve will be trimmed. This helps to resolve ambiguities of which 
end of the curve to trim, and to  choose between multiple intersec-
tions of the curves.
BOOL extendIf True, the trim curve is consider ed infinite and intersections are 
found anywhere along its length. If False, intersections must be 
between the curve endpoints.
Output:NoneReturn Code:FE_FAIL Did not trim the curve - po ssibly there was no intersection.
Remarks/Usage:This call mimics the behavior of the Modify, Trim command
Example:None
feCurveExtend   API-453
3.6.6.2  feCurveExtend
feCurveExtend
(  curveID, nearLoc )
Description:Extends a curve to a specified location.Input:INT4 curveID The ID of the curve to be extended.
REAL8 nearLoc[0..2]The coordinates, in global rectangu lar, of the location to which the 
curve will be extended. The loca tion does not have to lie on the 
extended curve; it is automatically projected as the curve is extended.
Output:None
Return Code:
FE_FAIL Did not extend the curve.Remarks/Usage:This call mimics the behavior of the Modify, Extend command
Example:None
 API-454  feCurveBreak
3.6.6.3  feCurveBreak
feCurveBreak
(  curveID, nearLoc )
Description:Breaks a curve at a specified location.Input:INT4 curveID The ID of the curve to be broken.
REAL8 nearLoc[0..2]The coordinates, in global rectangu lar, of the location at which the 
curve will be broken. The location does not have to lie on the curve; 
it is automatically projecte d to the break location.
Output:None
Return Code:
FE_FAIL Did not break the curve.Remarks/Usage:This call mimics the behavior of th e Modify, Break, At Location command
Example:None
feCurvesBreakAtIntersections   API-455
3.6.6.4  feCurvesBreakAtIntersections
feCurvesBreakAtIntersections
(  curveSET )
Description:Breaks all curves in a given set at all in tersections between the curves in the set.
Input:
INT4 curveSETThe ID of a set that contains a lis t of Curve IDs used to break curves 
at all intersections betwee n the curves in the set.
Output:NoneReturn Code:FE_FAIL No intersections were foun d between the curves in the set.
Remarks/Usage:This call mimics the behavior  of the Modify, Break, At  All Intersections command
Example:None
 API-456  feCurveJoin
3.6.6.5  feCurveJoin
feCurveJoin
(  curve1, curve2, nearLoc, update1, update2 )
Description:Extends or trims two curves to their intersection location.
Input:INT4 curve1 The ID of the first curve to be joined.
INT4 curve2 The ID of the second curve to be joined.
REAL8 nearLoc[0..2]The coordinates, in global rectangu lar, of the location near which the 
curves will be joined. This helps to resolve ambiguities of which end 
of the curves to trim/extend, an d to choose between multiple inter-
sections of the curves.
BOOL update1If True, curve1 is extended or trim med to the join location. If False, 
curve1 is left unchanged.
BOOL update2If True, curve2 is extended or trim med to the join location. If False, 
curve2 is left unchanged.
Output:NoneReturn Code:FE_FAIL Did not join the curves - possibly there was no intersection.
Remarks/Usage:This call mimics the behavior of the Modify, Join command. Also, do not set update1=update2=False. 
In this case, nothing will be changed. 
Example:None
feCurveFillet   API-457
3.6.6.6  feCurveFillet
feCurveFillet
(  radius, curve1, curve2, nearLoc, update1, update2 )
Description:Fillets the intersection of two curves.Input:REAL8 radius The fillet radius.INT4 curve1 The ID of the first curve to be filleted.
INT4 curve2 The ID of the se cond curve to be filleted.
REAL8 nearLoc[0..2]The coordinates, in global rectangu lar, of the location near which the 
curves will be filleted. Specification of this location is very import-
ant. It chooses the quadrant of the intersection that is going to be fil-
leted.
BOOL update1If True, curve1 is extend ed or trimmed to the fillet location. If False, 
curve1 is left unchanged.
BOOL update2If True, curve2 is extend ed or trimmed to the fillet location. If False, 
curve2 is left unchanged.
Output:NoneReturn Code:FE_FAIL Did not fillet the curves - possibly there was no intersection.
Remarks/Usage:This call mimics the behavior of the Modify, Fillet command.
Example:None
 API-458  feCurveChamfer
3.6.6.7  feCurveChamfer
feCurveChamfer
(  len1, len2, curve1, curve2, nearLoc, update1, update2 )
Description:Chamfers the intersection of two curves.Input:REAL8 len1 The chamfer length along curve1.REAL8 len2 The chamfer length along curve2.INT4 curve1 The ID of the fi rst curve to be chamfered.
INT4 curve2 The ID of the second curve to be chamfered.
REAL8 nearLoc[0..2]The coordinates, in global rectangu lar, of the location near which the 
curves will be chamfered. Specifi cation of this location is very 
important. It chooses the quadrant of  the intersection th at is going to 
be chamfered.
BOOL update1If True, curve1 is extend ed or trimmed to the fillet location. If False, 
curve1 is left unchanged.
BOOL update2If True, curve2 is extend ed or trimmed to the fillet location. If False, 
curve2 is left unchanged.
Output:NoneReturn Code:FE_FAIL Did not chamfer the curves - possibly there was no intersection.Remarks/Usage:This call mimics the behavior of the Modify, Chamfer command.
Example:None
feBoundaryFromPoints   API-459
3.6.7  Boundaries
3.6.7.1  feBoundaryFromPoints
feBoundaryFromPoints
( nCSys, nPoints, pXYZ, nBoundaryID )
Description:Creates a boundary surface from a group of lo cations specified in order around the surface
Input:
INT4 nCSysThe ID of a Coordinate System that the pXYZ coordinates are 
defined in. 0=Global Rectangular
INT4 nPoints The number of locations specified in the pXYZ array
REAL8 pXYZ[0..3*nPoints-1]The coordinates of the points used to define the boundary, specified 
in the selected Coordinate System. The array must be stored as 
[x0,y0,z0,x1,y1,z1,...xN,yN,zN]
Output:
INT4 nBoundaryID The ID of the boundary that is created.Return Code:
FE_FAILUnable to create the boundary - eith er points and curves failed to be 
created or the loop is not connected.
Remarks/Usage:This method creates points at the locations specified, and lines between  them to form a loop. The points 
must define a single loop. If you need to create a boundary with multiple loops (holes), then you must 
use feBoundaryFromCurves. The ID of the boundary created will use the next available surface ID. 
Example:None
 API-460  feBoundaryFromCurves
3.6.7.2  feBoundaryFromCurves
feBoundaryFromCurves
( setID )
Description:Creates a boundary surface from a group of connected curves.Input:
INT4 setIDThe ID of a set that contains a list  of Curve IDs used to define the 
boundary. Alternatively, if you spec ify a negative value, this is sim-
ply the ID of the single curve to write (which must be closed).
Output:NoneReturn Code:
FE_FAILUnable to create the boundary - eith er curves do not exist, or are not 
connected.
Remarks/Usage:The ID of the boundary created w ill use the next available surface ID . The curves selected must form 
one or more closed loops. If there are multiple loops,  there must be one outer loop, and one or more 
internal loops which are used as holes. Loops may not be nested inside holes.
Example:This function creates a boundary from four curves.
Sub Main 
Dim App As femap.model 
Set App = feFemap() 
Dim s As Object 
Set s = femap.feSet() 
Dim rc As Integer 
startID = 1 
stopID = 4 
IDincrement = 1 

rc = s.AddRange(startID, stopID, IDincrement) 
rc = femap.feBoundaryFromCurves(s.Id) 

App.feViewRegenerate(0)
End Sub
feBoundaryFromSurfaces   API-461
3.6.7.3  feBounda ryFromSurfaces
feBoundaryFromSurfaces
( surfaceSET )
Description:Creates a boundary surface from a gr oup of adjacent surfaces on a solid.
Input:
INT4 surfaceSETThe ID of a set that contains a list of Surface IDs used to define the 
boundary. Alternatively, if you spec ify a negative value, this is sim-
ply the ID of the single surface to use.
Output:NoneReturn Code:
FE_FAILUnable to create the boundary - ei ther surfaces do not exist, or are 
not adjacent.
Remarks/Usage:The ID of the boundary created will use the next available surface ID.
Example:This function creates a boundary from two surfaces.

Sub Main 
Dim femap As femap.model 
Set App = feFemap() 

Dim s As Object 
Set s = femap.feSet() 
Dim rc As Integer 
surf1 = 14 
surf2 = 17 

rc = s.Add(surf1) 
rc = s.Add(surf2) 
rc = femap.feBoundaryFromSurfaces(s.ID) 
App.feViewRegenerate(0)
End Sub
 API-462  feBoundaryAddSurfaces
3.6.7.4  feBoundaryAddSurfaces
feBoundaryAddSurfaces
( nBoundaryID, surfaceSET, bAddToExisting )
Description:Adds surfaces to an already defined multi-surface boundaryInput:INT4 nBoundaryID The ID of the boundary to update
INT4 surfaceSETThe ID of a set that contains a list of Surface IDs used to define the 
boundary. Alternatively, if you spec ify a negative value, this is sim-
ply the ID of the single surface to use.
BOOL bAddToExisting Set to True, to add th e new surfaces into the existing boundary.
Output:
None
Return Code:
FE_FAILUnable to create the boundary - ei ther surfaces do not exist, or are 
not adjacent.
Remarks/Usage:The ID of the boundary created will use the next available surface ID.
Example:This function creates a boundary from two surfaces.

Sub Main 
Dim femap As femap.model 
Set App = feFemap() 

Dim s As Object 
Set s = femap.feSet() 
Dim rc As Integer 
surf1 = 14 
surf2 = 17 

rc = s.Add(surf1) 
rc = s.Add(surf2) 
rc = femap.feBoundaryFromSurfaces(s.ID) 
App.feViewRegenerate(0)
End Sub
feBoundaryUpdateSurfaces   API-463
3.6.7.5  feBoundaryUpdateSurfaces
feBoundaryUpdateSurfaces
( boundaryID )
Description:Updates a boundary that was defined from surf aces, when the underlying surfaces have changed.
Input:INT4 boundaryID The ID of the boundary surface to update.Output:NoneReturn Code:
FE_FAILUnable to update the boundary - poss ibly the original definition is no 
longer valid.
Remarks/Usage:NoneExample:None
 API-464  feSurfaceCorners
3.6.8  Surfaces
3.6.8.1  feSurfaceCorners
feSurfaceCorners
( fourCorners, c1, c2, c3, c4 )
Description:Creates a surface defined by thr ee or four corner locations.
Input:
BOOL fourCornersSet to True to define a surface from four corners,  or False to define a 
three-corner surface.
REAL8 c1[0..2]
The corner locations. Th ese locations should be specified in global 
coordinates, and must be specifie d in a continuous loop around the 
surface. When fourCorners is set to  False, values must be specified 
in the c4 array, even though  these values will be ignoredREAL8 c2[0..2]
REAL8 c3[0..2]REAL8 c4[0..2]Output:NoneReturn Code:FE_FAIL Unable to create surface. Points may be colinear.Remarks/Usage:NoneExample:None
feSurfaceCornersMultiple   API-465
3.6.8.2  feSurface CornersMultiple
feSurfaceCornersMultiple
( NumberOfSurfaces, fourCorners, c1, c2, c3, c4 )
Description:Creates multiple surfaces, each defined by three or four corner locations.
Input:INT4 NumberOfSurfaces The number of surfaces to create.BOOL fourCorners[0..(Num-
berOfSurfaces -1)]Set to True to define a surface from four corners,  or False to define a 
three-corner surface.
REAL8 c1[0..(3*NumberOf-
Surfaces)-1]
The corner locations. Th ese locations should be specified in global 
coordinates, and must be specifie d in a continuous loop around each 
surface. When fourCorners is set to  False, values must be specified 
in the c4 array for every surface, even though the values will be 
ignored.REAL8 c2[0..(3*NumberOf-
Surfaces)-1]
REAL8 c3[0..(3*NumberOf-
Surfaces)-1]
REAL8 c4[0..(3*NumberOf-
Surfaces)-1]
Output:NoneReturn Code:FE_FAIL Unable to create surface. Points may be colinear.Remarks/Usage:NoneExample:
 API-466  feSurfaceCornersMultiple
The following example creates 8 1.0 x 1.0 four  corner surfaces and 2 three corner surfaces
Sub Main
Dim App As femap.model
Set App = feFemap()
'Dimension Array for fourCorners option for 10 surfaces
Dim FourC(9) As Boolean'Dimension Array for Corner 1 Coordinates for 10 surfaces
Dim corn1(29) As Double
'Dimension Array for Corner 2 Coordinates for 10 surfacesDim corn2(29) As Double
'Dimension Array for Corner 3 Coordinates for 10 surfaces
Dim corn3(29) As Double'Dimension Array for Corner 4 Coordinates for 10 surfaces
Dim corn4(29) As Double
For i = 0 To 9
Select Case i
Case 0,9
FourC(i) = FalseCase Else
FourC(i) = True
End Select
corn1(i*3) = i
corn1(i*3+1) = 0.0corn1(i*3+2) = 0.0
corn2(i*3) = i+1
corn2(i*3+1) = 0.0
corn2(i*3+2) = 0.0
corn3(i*3) = i+1
corn3(i*3+1) = 1.0
corn3(i*3+2) = 0.0
corn4(i*3) = i
corn4(i*3+1) = 1.0corn4(i*3+2) = 0.0
Next
App.feSurfaceCornersMultiple (10, FourC, corn1, corn2, corn3, corn4)
End SubfeSurfaceCornersMultiple
( NumberOfSurfaces, fourCorners, c1, c2, c3, c4 )
feSurfaceEdgeCurves   API-467
3.6.8.3  feSurfaceEdgeCurves
feSurfaceEdgeCurves
( curve1, curve2, curve3, curve4 )
Description:Creates a surface defined by three or four edge curves.
Input:INT4 curve1 ID of the first curve to select as a surface edgeINT4 curve2 ID of the second curveINT4 curve3 ID of the third curveINT4 curve4 ID of the fourth curve (If curve4=0, create a 3 sided surface)
Output:NoneReturn Code:
FE_FAILUnable to create surface. Curves may not be connected, or may not 
form a closed loop to  define the surface.
Remarks/Usage:The curve IDs must be specified in order,  forming a closed loop around the surface.
Example:None
 API-468  feSurfaceAlignedCurves
3.6.8.4  feSurfaceAlignedCurves
feSurfaceAlignedCurves
( curveCOUNT, curveID )
Description:Creates a surface defined by  multiple aligned curves.
Input:INT4 curveCOUNT The number of curve IDs that are specified in curveID.
INT4 curveID[0..curve-
COUNT]The IDs of the curves that will be used to create the surface. This 
array must contain as many curveI Ds as are specified by curve-
COUNT. Furthermore, the curves must  be specified in the order that 
they will be used to cr eate the lofted surface.
Output:NoneReturn Code:
FE_FAILUnable to create surface. Curves may not be defined properly to cre-
ate aligned surface.
Remarks/Usage:NoneExample:
feSurfaceAlignedCurves   API-469
The following shows an example of connecting to a model and creating a surf ace through six curves. 
This assumes that the curves already existed.
Sub Main 
Dim App As femap.model 
Set App = feFemap()

Dim curveID(10) As Long 
Dim vcurveID As Variant 
Dim curveCOUNT As Long 
Dim rc As Long 

curveCOUNT = 6 
curveID(0) = 5 
curveID(1) = 4 
curveID(2) = 3 
curveID(3) = 2 
curveID(4) = 6 
curveID(5) = 1 
vcurveID = curveID 

rc = App.feSurfaceAlignedCurves(curveCOUNT, vcurveID) 
App.feViewRegenerate(0)
End SubfeSurfaceAlignedCurves
( curveCOUNT, curveID )
 API-470  feSurfaceRuled
3.6.8.5  feSurfaceRuled
feSurfaceRuled
( c1, c2 )
Description:Creates a ruled surface between two curves.Input:INT4 c1 The ID of the first curv e used to define the surface.
INT4 c2 The ID of the second cu rve used to define the surface.
Output:NoneReturn Code:FE_FAIL Unable to create su rface. Curves may not exist.
Remarks/Usage:NoneExample:None
feSurfaceExtrude   API-471
3.6.8.6  feSurfaceExtrude
feSurfaceExtrude
( curveSET, axisLEN, axisVEC )
Description:Creates one or more surfaces by extruding a set of curves.Input:
INT4 curveSETID of set containing the IDs of the curves to be extruded. Alterna-
tively, if you specify a negative value,  this is simply the ID of the sin-
gle curve to extrude.
REAL8 axisLEN The length of the extrusion.
REAL8 axisVEC[0..2]The components of the extrusion vector. This vector is normalized 
and multiplied by axisLEN to find  the total extrusion vector.
Output:NoneReturn Code:FE_FAIL Unable to create su rface. Curves may not exist.
Remarks/Usage:Curves are extruded from their current location along the specified vector.
Example:None
 API-472  feSurfaceRevolve
3.6.8.7  feSurfaceRevolve
feSurfaceRevolve
( curveSET, axisANGLE, axisBASE, axisVEC )
Description:Creates one or more surfaces by revolving a set of curves.Input:
INT4 curveSETID of set containing the IDs of th e curves to be revolved. Alterna-
tively, if you specify a negative value,  this is simply the ID of the sin-
gle curve to revolve.
REAL8 axisANGLE The angle of revolution, in degrees.
REAL8 axisBASE[0..2]A location, specified in global coor dinates, that defines the base of 
the axis of revolution.
REAL8 axisVEC[0..2]The components of the axis of revolu tion. This vector will be located 
at the axisBASE location, and th e curves will be revolved around it.
Output:NoneReturn Code:FE_FAIL Unable to create su rface. Curves may not exist.
Remarks/Usage:Curves are revolved from their current location around the specified vector.
Example:None
feSurfaceSweep   API-473
3.6.8.8  feSurfaceSweep
feSurfaceSweep
( curveSET, pathSET )
Description:Creates one or more surfaces by sweeping a set of curves along a path.Input:
INT4 curveSETID of set containing the IDs of the curves to be swept. Alternatively, 
if you specify a negative value, this is simply the ID of the single 
curve to sweep.
INT4 pathSETID of a set containing the IDs of the curves to be used as a path. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single curve to use as the pa th. If you specify a set, the curves 
must form a single connected path . If you are not using the standard 
FEMAP geometry engine, then this set must contain a single curve. 
Only the standard engine can sweep along a multicurve path.
Output:NoneReturn Code:
FE_FAILUnable to create surface. Curves may not exist, or path may not be 
connected.
Remarks/Usage:NoneExample:None
 API-474  feSurfaceNormalDeviation
3.6.8.9  feSurfaceNormalDeviation
feSurfaceNormalDeviation
( surfaceSetID, dAvgNormal, dMaxAngle )
Description:Finds the average normal of a set of surfaces and the maximum deviation of the normal from that aver-
age
Input:
INT4 surfaceSetIDThe ID of a Set containing the ID s of one or more Surfaces. If you 
want to test just one surface, simply specify surfaceSetID equal to 
the negative of the Surface ID.
Output:
REAL8 dAvgNormal[0..2]The vector components of the average normal to the entire set of 
selected surfaces
REAL8 dMaxAngleThe maximum angle, in degrees, th at any surface normal deviates 
from the vector returned in dAvgNormal.
Return Code:FE_FAIL Unable to determine average normal and deviation.Remarks/Usage:NoneExample:None
feSurfaceConvert   API-475
3.6.8.10  feSurfaceConvert
feSurfaceConvert
( surfaceSET, bDelete )
Description:Converts FEMAP boundary surfaces in to Solid (Parasolid) surfaces.
Input:
INT4 surfaceSetIDThe ID of a Set containing the IDs of one or more boundary surfaces 
to convert. If you want to convert just one boundary surface, simply 
specify surfaceSET equal to the ne gative of the Boundary Surface 
ID.
BOOL bDeleteIf True, the original Boundary Surfaces are deleted after being con-
verted.
Output:NoneReturn Code:FE_FAIL Unable to convert one or more of the boundary surfacesRemarks/Usage:NoneExample:None
 API-476  feSurfaceNonManifoldAdd
3.6.8.11  feSurfaceNonManifoldAdd
feSurfaceNonManifoldAdd
( solidSET )
Description:Adds solids and sheet solids (surfaces) together to create a “general  body” in parasolid using the default 
Non-Manifold Add Tolerance.
Input:
INT4 solidSETThe ID of a set that contains a list  of Solid IDs that will be added to 
create a “general body”.
Output:NoneReturn Code:
FE_FAIL Could not add selected solids and sheet solids into a “general body”
Remarks/Usage:NoneExample:None
feSurfaceNonManifoldAdd2   API-477
3.6.8.12  feSurfaceNonManifoldAdd2
feSurfaceNonManifoldAdd2
( solidSET, dTolerance )
Description:Adds solids and sheet solids (surfaces ) together to create a “general bo dy” in Parasolid using the speci-
fied Non-Manifold Add Tolerance.
Input:
INT4 solidSETThe ID of a set that contains a list  of Solid IDs that will be added to 
create a “general body”.
REAL8 dTolerance The tolerance at which to attempt to add the solids together.
Output:None
Return Code:
FE_FAIL Could not add selected solids and sheet solids into a “general body”Remarks/Usage:NoneExample:None
 API-478  feSurfaceNonManifoldAdd3
3.6.8.13  feSurfaceNonManifoldAdd3
feSurfaceNonManifoldAdd3
( solidSET,  dTolerance, bIntermediateCheck)
Description:Adds solids and sheet solids (surfaces ) together to create a “general body” in parasolid using a user-
specified Non-Manifold Add Tolerance value. Also has an option to enable or disable “Incremental 
Checking” when more than 2 solids and/or shee t solids are being Non-Ma nifold added together.
Input:
INT4 solidSETThe ID of a set that contains a list  of Solid IDs that will be added to 
create a “general body”.
REAL8 dTolerance The Non-Manifold Add Tolerance value.
BOOL bIntermediateCheckIf True, “Incremental Checking” w ill be enabled, meaning that the 
“general body” is checked after each solid or sheet solid is added to 
the “general body” to make sure it passes body checking. If the addi-
tion of a solid or sheet solid caus es the “general body” to fail body 
checking, that addition will be rolle d back and that solid or sheet 
solid will not be added to the “gener al body”. If False, “Incremental 
Checking” will not be done.
Output:NoneReturn Code:FE_FAIL Could not add selected solids and sheet solids into a “general body”Remarks/Usage:NoneExample:None
feSurfaceNonManifoldAddExpress   API-479
3.6.8.14  feSurfaceNonManifoldAddExpress
feSurfaceNonManifoldAddExpress
( solidSETID,  dTolerance )
Description:Adds solids and sheet solid s (surfaces) together to create a “general body” using a single call to the 
Parasolid engine and also allows a user-s pecified Non-Manifold Add Tolerance value.
Input:
INT4 solidSETIDThe ID of a set that contains a list  of Solid IDs that will be added to 
create a “general body”.
REAL8 dTolerance The Non-Manifold Add Tolerance value.Output:None
Return Code:
FE_FAIL Could not add selected solids and sheet solids into a “general body”Remarks/Usage:NoneExample:None
 API-480  feSurfaceRecoverManifold
3.6.8.15  feSurfaceRecoverManifold
feSurfaceRecoverManifold
( solidSET )
Description: Recovers “manifold” solids and sheet solids fro m “General Bodies” created using NonManifold Add 
command.
Input:
INT4 solidSETThe ID of a set that contains a list of Solid IDs (General Body IDs) to 
recover manifold geometry from. Alternatively, if you specify a neg-
ative value, this is simply the ID of the single “General Body”.
Output:NoneReturn Code:FE_FAIL Could not recover manifold geometry from “General Body”Remarks/Usage:NoneExample:None
feSurfaceExtract   API-481
3.6.8.16  feSurfaceExtract
feSurfaceExtract
( suSetID )
Description:Extracts surfaces from existing Parasolid bodies (Solid s, Sheet Solids, “General Bodies”) and creates 
appropriate sheet solids and/or general bodies, as needed
Input:
INT4 suSetIDThe ID of a Set containing the IDs of one or more Surfaces to extract 
from an existing Parasolid body. Altern atively, if you want to extract 
just one surface from a Parasolid bo dy, simply specify suSetID equal 
to the negative of the Surface ID.
Output:NoneReturn Code:FE_FAIL Unable to extract one or more surfacesRemarks/Usage:NoneExample:None
 API-482  feSurfaceRemoveHole
3.6.8.17  feSurfaceRemoveHole
feSurfaceRemoveHole
( curveSET )
Description:Removes holes from a surface by curve. Input:
INT4 curveSETThe ID of a set that contains a list of Curve IDs that are part of a one 
or more holes to remove from a surfa ce. Alternatively, if you specify 
a negative value, this is simply  the ID of the single curve.
Output:NoneReturn Code:
FE_FAIL Could not remove hole from body.
Remarks/Usage:NoneExample:None
feSurfaceFromMesh   API-483
3.6.8.18  feSurfaceFromMesh
feSurfaceFromMesh
( elemSetID, bDeleteMesh, bWireframeOnly, tolerance, bLengthCutoff, lengthCutVal )
Description:This method is obsolete and should no longer be  used. It has been replaced by feSurfaceFromMesh2. 
Create a surface that approx imates a shell element mesh. 
Input:
INT4 elemSetIDThe ID of a set that contains a list of shell element IDs that are used 
to create an approximate surface.
BOOL bDeleteMeshIf True, the specified elements w ill be deleted when  the surface is 
created.
BOOL bWireframeOnly Create only the edges/ curves that bound the mesh, not the surface.
REAL8 toleranceThe tolerance that is used to calcula te an approximate surface fit thru 
the mesh.
BOOL bLengthCutoffIf True, the lengthCutVal is used so  that any edge greater than this 
value will create a single line. The edge will not be included in any 
spline or curved edge of the surface.
REAL8 lengthCutVal The length used if bLengthCutoff is TrueOutput:NoneReturn Code:FE_FAIL Unable to create surfaceRemarks/Usage:NoneExample:None
 API-484  feSurfaceFromMesh
3.6.8.19  feSurfaceFromMesh2
feSurfaceFromMesh
( elemSetID, bDeleteMesh, bWireframeOnly, tolerance, bLengthCutoff, lengthCutVal, 
ang_tol )
Description:Create a surface that approximates a shell element mesh. This method supe rsedes feSurfaceFromMesh.
Input:
INT4 elemSetIDThe ID of a set that contains a list of shell element IDs that are used 
to create an approximate surface.
BOOL bDeleteMeshIf True, the specified elements w ill be deleted when  the surface is 
created.
BOOL bWireframeOnly Create only the edges/ curves that bound the mesh, not the surface.
REAL8 toleranceThe tolerance that is used to calcula te an approximate surface fit thru 
the mesh.
BOOL bLengthCutoffIf True, the lengthCutVal is used so  that any edge greater than this 
value will create a single line. The edge will not be included in any 
spline or curved edge of the surface.
REAL8 lengthCutVal The length used if bLengthCutoff is True
REAL8 ang_tolThe tolerance controls how close the resulting surface will match the 
average mesh normal at each node.
Output:NoneReturn Code:FE_FAIL Unable to create surfaceRemarks/Usage:NoneExample:None
feSurfaceRayFire   API-485
3.6.8.20  feSurfaceRayFire
feSurfaceRayFire
( suSetID, nNumRay, vRayLoc, vRayDir, nHitSurface, vHitLoc )
Description:This method finds the locatio ns on surfaces “hit” by “rays” specified by the user
Input:
INT4 soSetIDID of a Set object containing the IDs of the surfaces that you want to 
“hit”
INT4 nNumRay The number of “rays” that are contained in vRayLoc, vRayDirREAL8 vRayLoc[0..3*nNum-
Ray-1]The location of the base of the ra y/vector in Global Rectangular 
coordinates
REAL8 vRayDir[0..3*nNum-
Ray-1]The components of the direction of the ray
Output:
INT4 nHitSurface[0..nNum-
Ray-1]The ID of the surface that each ray hits (0 if it misses all surfaces)
REAL8 vHitLoc[0..3*nNum-
Ray-1]The Global Rectangular XYZ coordinates where the ray hit the sur-
faces
Return Code:FE_BAD_DATA If any of the surfaces have a different scale factor than the othersFE_NOT_A V AILABLE If none of the Surface IDs you specified exist.
Remarks/Usage:
Example:
None
 API-486  feImprintLocationInSurface
3.6.8.21  feImprintLocationInSurface
feImprintLocationInSurface
( vXYZ, nSurfaceID)
Description:This method imprints an intern al point on a parasolid surface.
Input:REAL8 vXYZ[0..2] A variant with th e location the point to imprint.
INT4 nSurfaceID The ID of the surface to imprint a point in.
Output:NoneReturn Code:FE_NOT_EXIST If the Surface ID specified does not exist.Remarks/Usage:
Example:
None
feSurfaceMidSingle   API-487
3.6.9  Midsurfaces
3.6.9.1  feSurfaceMidSingle
feSurfaceMidSingle
( trim, surfID1, surfID2 )
Description:Creates a midsurface between two existing surfaces.Input:
BOOL trimIf True, the new surface is trimmed to lie within the bounds of the 
solid containing the original surfaces.
INT4 surfID1 The first surface to use to generate the midsurface.
INT4 surfID2 The other surface used to genera te the midsurface.
Output:NoneReturn Code:FE_FAIL Could not create the midsurface.Remarks/Usage:NoneExample:None
 API-488  feSurfaceMidAuto
3.6.9.2  feSurfaceMidAuto
feSurfaceMidAuto
( surfSET, thick )
Description:Creates midsurfaces between a set of selected surfa ces using the Pre-V11.1 midsurfacing capabilities 
(i.e., does not use Paraso lid face pairing algorithm). 
Input:
INT4 surfSETID of set containing the IDs of th e surfaces to be used to generate 
midsurfaces.
REAL8 thick The target thickness to  be used to find midsurfaces.
Output:None
Return Code:
FE_FAIL Could not create the midsurfaces.Remarks/Usage:Similar to the Geometry, Midsurface, Automatic command when using the pre-V11.1 Midsurface 
Method
Example:None
feSurfaceMidAuto2   API-489
3.6.9.3  feSurfaceMidAuto2
feSurfaceMidAuto2
( suSETID, dTargetThickness, bCombineTangent, dAngleTolerance, bAutoAdd, bRe-
versePairs )
Description:Creates midsurfaces between a set of selected surfaces using Parasolid face pairing algorithm. This 
method is obsolete ans should no longer be u sed. It has been replaced  by feSurfaceMidAuto3.
Input:
INT4 suSETIDID of set containing the IDs of th e surfaces to be used to generate 
midsurfaces.
REAL8 dTargetThickness The target thickn ess to be used to find midsurfaces.
BOOL bCombineTangent When True, us es Combine Tangent Surfaces option
REAL8 dAngleToleranceThe Angle Tolerance used to dete rmine surface tangen cy. Only used 
when bCombineTangent = True
BOOL bAutoAdd When True, uses Combine Midsurfaces optionBOOL bReversePairs When True, uses Reverse Pairs optionOutput:NoneReturn Code:FE_FAIL Could not create the midsurfaces.Remarks/Usage:Similar to the Geometry, Midsurface, Automatic commandExample:None
 API-490  feSurfaceMidAuto3
3.6.9.4  feSurfaceMidAuto3
feSurfaceMidAuto3
( suSETID, dTargetThickness, bCombineTangent, dAngleTolerance, bAutoAdd, bRe-
versePairs, bVariableThick )
Description:Creates midsurfaces between a set of selected surfaces using Parasolid face pairing algorithmInput:
INT4 suSETIDID of set containing the IDs of th e surfaces to be used to generate 
midsurfaces.
REAL8 dTargetThickness The target thickn ess to be used to find midsurfaces.
BOOL bCombineTangent When True, us es Combine Tangent Surfaces option
REAL8 dAngleToleranceThe Angle Tolerance used to dete rmine surface tangen cy. Only used 
when bCombineTangent = True
BOOL bAutoAdd When True, uses Combine Midsurfaces optionBOOL bReversePairs When True, uses Reverse Pairs optionBOOL bVariableThick When True, uses Variable Thickness Processing optionOutput:NoneReturn Code:FE_FAIL Could not create the midsurfaces.Remarks/Usage:Similar to the Geometry, Midsurface, Automatic commandExample:None
feSurfaceMidAuto4   API-491
3.6.9.5  feSurfaceMidAuto4
feSurfaceMidAuto4
( suSETID, dTargetThickness, bCombineTangent, dAngleTolerance, bAutoAdd, bRe-
versePairs, bVariableThick, bOverlapRepair )
Description:Creates midsurfaces between a set of selected surfaces using Parasolid face pairing algorithmInput:
INT4 suSETIDID of set containing the IDs of th e surfaces to be used to generate 
midsurfaces.
REAL8 dTargetThickness The target thickn ess to be used to find midsurfaces.
BOOL bCombineTangent When True, us es Combine Tangent Surfaces option
REAL8 dAngleToleranceThe Angle Tolerance used to dete rmine surface tangen cy. Only used 
when bCombineTangent = True
BOOL bAutoAdd When True, uses Combine Midsurfaces optionBOOL bReversePairs When True, uses Reverse Pairs optionBOOL bVariableThick When True, uses Variable Thickness Processing optionBOOL bOverlapRepair When True, uses Overlap Repair optionOutput:NoneReturn Code:FE_FAIL Could not create the midsurfaces.Remarks/Usage:Similar to the Geometry, Midsurface, Automatic commandExample:None
 API-492  feSurfaceOffsetTangent
3.6.9.6  feSurfaceOffsetTangent
feSurfaceOffsetTangent
( nSurfaceID, dTolerance, bAutoOffset, dO ffset, bDeleteOriginal, bCreateGroup )
Description:Creates midsurfaces by offsetting a set of  surfaces tangent to specified seed surface
Input:INT4 nSurfaceID Seed surface ID  to find tangent surfaces.
REAL8 dToleranceTangency tolerance (def ault in GUI is 0.1). Value between 0.0 and 
360.0.
BOOL bAutoOffset Automatically attempt to offset to the solid mid-thickness
REAL8 dOffset Offset value, ignored if bAutoOffset is TRUEBOOL bDeleteOriginal Delete the original solidBOOL bCreateGroup Create a group of new surfacesOutput:NoneReturn Code:FE_FAIL Unable to offset surfaceRemarks/Usage:NoneExample:None
feSurfaceOffset   API-493
3.6.9.7  feSurfaceOffset
feSurfaceOffset
( surfID, dOffset )
Description:Creates a new surface offset from the original surface  by the specified amount. This method is obsolete 
and should no longer be used. It h as been replaced by feSurfaceOffset2.
Input:INT4 surfID ID of surface to offset
REAL8 dOffsetOffset value. Positive value = of fset direction matches surface nor-
mal, negative value = offset dir ection opposite surface normal.
Output:None
Return Code:
FE_FAIL Unable to offset surfaceRemarks/Usage:NoneExample:None
 API-494  feSurfaceOffset
3.6.9.8  feSurfaceOffset2
feSurfaceOffset
( surfaceSet, dOffset )
Description:Creates a new surface offset from the orig inal surface(s) by th e specified amount.
Input:
INT4 surfaceSetID of the set object containing the surfaces to offset. Alternatively 
use a negative value to identify a single surface.
REAL8 dOffsetOffset value. Positive value = of fset direction matches surface nor-
mal, negative value = offset dir ection opposite surface normal.
Output:None
Return Code:
FE_FAIL Unable to offset surface(s)
Remarks/Usage:NoneExample:None
feSurfaceMidAttrib   API-495
3.6.9.9  feSurfaceMidAttrib
feSurfaceMidAttrib
( surfSET, matlID )
Description:Assigns meshing attributes, including thicknesses , to surfaces that were created as midsurfaces.
Input:
INT4 surfSETID of set containing the IDs of the surfaces to have attributes 
assigned. Alternatively, if you specify  a negative value, this is simply 
the ID of the single surface to use.
INT4 matlID The ID of the material to assign as a meshing attribute.Output:None
Return Code:
FE_FAIL Could not assign attributes.Remarks/Usage:The surface set that you specify can include surfaces that were not generated as midsurfaces, but only 
those surfaces that were midsurfaces will have mesh ing attributes assigned. This means that you can 
simply include all surfaces in the model and it will automatically find all th e midsurfaces and assign 
attributes.
Example:None
 API-496  feSurfaceTrimToSolid
3.6.9.10  feSurfaceTrimToSolid
feSurfaceTrimToSolid
( sheetID, solidID )
Description:Trims an open, sheet solid to the bo undaries of a solid that contains it.
Input:
INT4 sheetIDThe ID of the solid that is defined by the surfaces that are to be 
trimmed.
INT4 solidID The ID of the bounding  solid used to trim the “sheet”.
Output:NoneReturn Code:FE_FAIL Could not trim to the selected surface.Remarks/Usage:NoneExample:None
feSurfaceTrimWithCurves   API-497
3.6.9.11  feSurfaceTrimWithCurves
feSurfaceTrimWithCurves
( surfID, curveSET )
Description:Trims a surface with one or more curves.Input:INT4 surfID The ID of the surface to be trimmed.
INT4 curveSETID of set containing the IDs of the curves to be used for trimming. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single curve to use.
Output:None
Return Code:
FE_FAIL Could not trim the selected surface.Remarks/Usage:NoneExample:None
 API-498  feSurfaceExtend
3.6.9.12  feSurfaceExtend
feSurfaceExtend
( curveSET, Shape, ExtendTo, ExtendToSolidID, ExtendToLoc, ExtendDist )
Description:Extends a surface edge using one of several methods.Input:
INT4 curveSETID of set containing the IDs of the curves to be used for trimming. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single curve to use.
INT4 ShapeThe Shape of the extended Surface  0=Linear, 1=Continuous Curva-
ture, 2=Reflective
INT4 ExtendToThe Location to Extend the surface to 0=ID of  Solid, 1=To Specified 
Location, 2=Specified Distance
INT4 ExtendToSolidIDOnly used if ExtendTo=0. The ID of  the Solid to extend surface until 
it hits this solid
REAL8 ExtendToLoc[0..2]Only used if ExtendTo=1. The lo cation in Global Rectangular coor-
dinates of the location to extend to.
REAL8 ExtendDist Only used  if ExtendTo=2. The distance to extend the surface
Output:NoneReturn Code:FE_FAIL Could not extend the selected surface.Remarks/Usage:Although only one of the ExtendToSolidID, ExtendToLoc and ExtendDist are used depending on the 
value of ExtendTo, all must be provided. Th e values of the unused ones do not matter. 
Example:None
feSurfaceGetUnderlying   API-499
3.6.9.13  feSurfaceGetUnderlying
feSurfaceGetUnderlying
( nSurfaceID, bAutoOffset, dOffset, dSizeFactor )
Description:This function extracts the complete  surface underlying a Parasolid face , i.e. without any of its current 
edge curves, it then make a parametrically rectan gular patch, matching the rough size of the surface
Input:INT4 nSurfaceID ID of the original Parasolid surface
BOOL bAutoOffsetWhen True, the new surfa ce will be offset an amount determined by 
the program. When False, the new surface will be offset using the 
value specified in dOffset
REAL8 dOffsetDistance to offset new surface fro m original surface when bAutoOff-
set is set to False
REAL8 dSizeFactorScale Factor applied to new surface.  Setting this value above 1.0 will 
create a larger rectangular surface,  while setting the value below 1.0 
will create a smaller rectangular surface.
Output:NoneReturn Code:FE_FAIL Could not extend the selected surface.Remarks/Usage: Example:None
 API-500  feSolidPrimitive
3.6.10  Solids
3.6.10.1  feSolidPrimitive
feSolidPrimitive
( operation, shape, positive, origin, size, title )
Description:Creates a solid primitive.Input:
INT4 operationThe type of operation to perform when creating the solid: 0=Create 
New Solid, 1=Add to Active Solid , 2=Remove from Active Solid, 
3=Common with Active Solid.
INT4 shapeThe type of primitive to create: 0= Block (Center), 1= Block (Corner), 
2=Cylinder, 3=Cone, 4=Sphere, 5=Sphere (Alt)
BOOL positiveSet to True if the Z direction sh ould be in the positive workplane Z 
direction, or False to go in th e negative workplane Z direction. 
Dimensions should all be positive.
REAL8 origin[0..1] The location, in the wo rkplane, of the origin of the solid.
REAL8 size[0..2]The size of the primitive to creat e. The exact meaning of these 
dimensions varies depending on the value of shape . Refer to the table 
at the end of this command for details.
STRING title The title to assign to the so lid - only used if creating a new solid.
Output:NoneReturn Code:FE_FAIL Could not create the primitive.Remarks/Usage:The Add, Remove and Common operations manipulate  the active solid. You can select the active solid 
by setting femap.Info_ActiveID(39) to the ID of the solid that you want to use.
Example:
Primitive/Shape Size
Block (Center or Corner)size(0) = X length (in workplane)
size(1) = Y length (in workplane)size(2) = Z length (in workplane)
feSolidPrimitive   API-501
Cylindersize(0) = Radius
size(1) = not usedsize(2) = Height
Conesize(0) = Bottom Radius
size(1) = Top Radiussize(2) = Height
Spheresize(0) = Radius
size(1) = not usedsize(2) = not usedPrimitive/Shape Size
 API-502  feSolidExtrude
3.6.10.2  feSolidExtrude
feSolidExtrude
( operation, surfID, dirMode, depthMode, dirVec, depthVec )
Description:Extrudes a surface into a solid, or mo difies an existing solid by extruding.
Input:
INT4 operationThe type of operation to perform when creating the solid: 0=Create 
New Solid, 1=Add to Active Solid , 2=Remove from Active Solid.
INT4 surfIDThe surface to extrude. This surface can either be an existing solid 
surface, or a planar boundary.
INT4 dirModeSpecifies the approach you will us e to specify the extrusion direc-
tion: 0=Positive Surface Norm al, 1=Negative Surface Normal, 
2=Surface Normal, Both Positive an d Negative, 3=Along the Vector 
specified in dirVec, 4=Opposite the Vector specified in dirVec, 
5=Along and Opposite the Vector specified in dirVec.
INT4 depthModeSpecifies the approach you will use to specify the extrusion length/
depth: 0=Specified Depth - the depth is defined in depthVec[0], 1=To Location - the location to ex trude to is specified in depth-
Vec[0..2], in global coordinates, 2=Thru All - Only used for the 
Remove  operation to cut completely  through the active solid.
REAL8 dirVec[0..2]The components, in global rectangu lar coordinates, of the extrusion 
vector. Only used if dirMode = 3, 4 or 5.
REAL8 depthVec[0..2]The extrusion length (depthMode=0) or the location to extrude to, in 
global rectangular coordinates (d epthMode=1). Not used for Thru 
All extrusions.
Output:NoneReturn Code:FE_FAIL Could not create the extrusion.Remarks/Usage:The Add and Remove operations ma nipulate the active solid. You can select the active solid by setting 
femap.Info_ActiveID(39) to the ID of  the solid that you want to use.
Example:None
feSolidRevolve   API-503
3.6.10.3  feSolidRevolve
feSolidRevolve
( operation, surfID, dirMode, angleMode, axisBase, axisVec, angleVec )
Description:Revolves a surface into a solid, or mo difies an existing solid by revolving.
Input:
INT4 operationThe type of operation to perform when creating the solid: 0=Create 
New Solid, 1=Add to Active Solid , 2=Remove from Active Solid.
INT4 surfIDThe surface to revolve. This surface can either be an existing solid 
surface, or a planar boundary.
INT4 dirModeSpecifies the approach you will us e to specify the extrusion direc-
tion: 0=Positive Aroun d Axis, 1=Negative Around Axis, 2=Both 
Positive and Negative Around Axis.
INT4 angleModeSpecifies the approach you will use to specify the angle of revolu-
tion: 0=Specified Angle - the angle is defined in angleVec[0], 1=To 
Location - the location to  revolve to is specified in angleVec[0..2], 
2=Full 360 degree revolution. All an gles are specified in degrees.
REAL8 axisBase[0..2]The location of the base of the axis  of revolution, specified in global 
rectangular coordinates.
REAL8 axisVec[0..2]The components of the axis of revol ution, specified in global rectan-
gular coordinates.
REAL8 angleVec[0..2]The angle of revolution (angleMode=0 ) or the location to revolve to, 
in global rectangular coordinates (angleMode=1). Not used for Full 360 revolutions.
Output:NoneReturn Code:FE_FAIL Could not create the revolution.Remarks/Usage:The Add and Remove operations ma nipulate the active solid. You can select the active solid by setting 
femap.Info_ActiveID(39) to the ID of  the solid that you want to use.
Example:None
 API-504  feSolidExplode
3.6.10.4  feSolidExplode
feSolidExplode
( solidSET )
Description:Explodes selected solids in to individual surfaces.
Input:
INT4 solidSETThe ID of a set that contains a list of Solid IDs that will be exploded. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to explode.
Output:NoneReturn Code:
FE_FAIL Could not explode selected solids.
Remarks/Usage:NoneExample:None
feSolidStitch   API-505
3.6.10.5  feSolidStitch
feSolidStitch
( surfaceSET, tolerance )
Description:Stitches selected surfaces into solids. A solid cleanup routine is  run at the end of the command to 
remove any redundant geometry and simplify the geometry.
Input:
INT4 surfaceSETThe ID of a set that contains a list of  Surface IDs that will be stitched. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single surface to stitch.
REAL8 toleranceThe tolerance to use wh en stitching the surfaces (Parasolid only). 
Specify 0.0 to use the de fault stitching tolerance.
Output:NoneReturn Code:FE_FAIL Could not stitch selected surfaces.Remarks/Usage:NoneExample:None
 API-506  feSolidStitchNoCleanup
3.6.10.6  feSolidStitchNoCleanup
feSolidStitchNoCleanup
( surfaceSET, tolerance )
Description:Stitches selected surfaces in to solids. A solid cleanup routine is NOT run at the end of the command to 
remove any redundant geometry, therefore all intern al curves and individual surfaces remain intact.
Input:
INT4 surfaceSETThe ID of a set that contains a list of  Surface IDs that will be stitched. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single surface to stitch.
REAL8 toleranceThe tolerance to use wh en stitching the surfaces (Parasolid only). 
Specify 0.0 to use the de fault stitching tolerance.
Output:NoneReturn Code:FE_FAIL Could not stitch selected surfaces.Remarks/Usage:NoneExample:None
feSolidSweep   API-507
3.6.10.7   feSolidSweep
feSolidSweep
( surfaceSET, curveSET)
Description:Creates solid(s) by selecting any number of surfaces to be swept along any number of curves along a 
connected path. 
Input:
INT4 surfaceSETThe ID of a set that contains a list of Surface IDs to sweep. Alterna-
tively, if you specify a negative value,  this is simply the ID of a sin-
gle surface to sweep.
INT4 curveSETThe ID of a set that contains a list of Curve IDs representing a sweep 
path. Alternatively, if you specify a negative value, this is simply the 
ID of a single curve to use as the sweep path.
Output:
None
Return Code:
FE_FAILUnable to create solid. Curves may not exist, or path may not be con-
nected.
Remarks/Usage:Similar functionality to the Geometry, Solid, Sweep  command.
Example:None
 API-508  feSolidSweepBetween
3.6.10.8  feSolidSweepBetween
feSolidSweepBetween
( faceID1, faceID2, ptID1, ptID2, blendFactor )
Description:Creates a swept solid between from one surface to an other surface by matching a point specified on one 
surface to a point specified on the other surface. Additionally, a blend factor may be specified to poten-
tially change the curvature of the swept solid.
Input:INT4 faceID1 The ID of a surface to use as the “From” surfaceINT4 faceID2 The ID of a surface to use as the “To” surface.INT4 ptID1 The ID of a point to use as the “From” pointINT4 ptID2 The ID of a point to use as the “To” point.
REAL8 blendFactor Adjusts the curvatur e of the swept solid (default = 1.0).
Output:NoneReturn Code:FE_FAIL Could not sweep solid between selected surfaces and points.Remarks/Usage:Similar functionality to the Geometry, Solid, Sweep Between  command.
The normal direction of the two surfaces should  typically face one anot her for best results.
The blendFactor refers to how long  the swept solid follows tangency between the normal vector calcu-
lated at the centroid of each surface. By specifying a larger value, the swept bo dy will closely follow the 
tangents for a longer distance, t ypically causing more curvature near the center of the swept solid. 
Smaller values make the tangency weaker, therefore, mo st of the curvature will be near the ends of the 
swept solid.
Example:None
feSolidFillet   API-509
3.6.10.9  feSolidFillet
feSolidFillet
( curveSET, radius )
Description:Fillets one or more edges of a solid.Input:
INT4 curveSETThe ID of a set that contains a list  of Curve IDs that will be filleted. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single curve to fillet.
REAL8 radius The fillet radius.Output:None
Return Code:
FE_FAIL Could not fillet selected curves.Remarks/Usage:NoneExample:None
 API-510  feSolidChamfer
3.6.10.10  feSolidChamfer
feSolidChamfer
( curveSET, length )
Description:Chamfers one or more edges of a solid.Input:
INT4 curveSETThe ID of a set that contains a list of Curve IDs that will be cham-
fered. Alternatively, if you specify a negative value, this is simply the 
ID of the single curve to chamfer.
REAL8 chamfer The chamfer length.Output:None
Return Code:
FE_FAIL Could not chamfer selected curves.Remarks/Usage:NoneExample:None
feSolidAdd   API-511
3.6.10.11  feSolidAdd
feSolidAdd
( solidSET, redraw )
Description:Adds two or more solids to form a new solid.Input:
INT4 solidSETThe ID of a set that contains a list  of Solid IDs that will be added. 
This list must contain at least two solids to be added.
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:None
Return Code:
FE_FAIL Could not add the selected solids.Remarks/Usage:NoneExample:None
 API-512  feSolidRemove
3.6.10.12  feSolidRemove
feSolidRemove
( baseID, solidSET, redraw )
Description:Removes (subtracts) one or more solids from a base solid.Input:
INT4 baseIDThe ID of the base solid, from wh ich the solids in solidSET will be 
removed.
INT4 solidSETThe ID of a set that contains a list of Solid IDs that will be removed. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to remove.
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:NoneReturn Code:FE_FAIL Could not remove the selected solids.Remarks/Usage:NoneExample:None
feSolidCommon   API-513
3.6.10.13  feSolidCommon
feSolidCommon
( baseID, toolID, redraw )
Description:Creates a new solid that represents the co mmon volume between two original solids.
Input:INT4 baseID The ID of the base solid.INT4 toolID The ID of the tool solid.
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:NoneReturn Code:FE_FAIL Could not find the common volume between the selected solids.Remarks/Usage:NoneExample:None
 API-514  feSolidEmbed
3.6.10.14  feSolidEmbed
feSolidEmbed
( baseID, toolID, redraw )
Description:Embeds one solid (the tool) inside another (the base).Input:INT4 baseID The ID of the base solid.INT4 toolID The ID of the tool solid.
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:NoneReturn Code:FE_FAIL Could not embed the selected solid.Remarks/Usage:NoneExample:None
feSolidEmbedMultiple   API-515
3.6.10.15  feSolidEmbedMultiple
feSolidEmbedMultiple
( baseID, toolSetID, redraw )
Description:Embeds any number of solids (the tool s) inside another solid (the base).
Input:INT4 baseID The ID of the base solid.
INT4 toolSetIDThe ID of a set that contains a list of solid IDs to embed into the base 
solid. Alternatively, if you specify a negative value, this is simply the 
ID of the single curve to use.
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:NoneReturn Code:FE_FAIL Could not embed the selected solid.Remarks/Usage:NoneExample:None
 API-516  feSolidIntersect
3.6.10.16  feSolidIntersect
feSolidIntersect
( solidSET, redraw )
Description:Breaks all of the surfaces of the selected so lids at their intersections with other surfaces.
Input:
INT4 solidSETThe ID of a set that contains a li st of solid IDs that will be inter-
sected. This list must contain at least two solids.
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:None
Return Code:
FE_FAIL Could not intersect the selected solids.Remarks/Usage:NoneExample:None
feSolidShell   API-517
3.6.10.17  feSolidShell
feSolidShell
( baseID, surfaceSET, thickness, redraw )
Description:Converts a solid into a thin-walle d solid by offsetting outer surfaces.
Input:INT4 baseID The ID of the base solid to be modified.
INT4 surfaceSETThe ID of a set that contains a list of surface IDs that will be 
“pierced” by the shelling operation: that is, th e list of surfaces that 
are really on the “thru-the-thickness” edges of the shelled solid. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single surface to pierce.
REAL8 thicknessThe thickness of the resulting shelle d solid. This is the distance that 
the outer surfaces are offset to form the inner surfaces.
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:NoneReturn Code:FE_FAIL Could not she ll the selected solid.
Remarks/Usage:NoneExample:None
 API-518  feSolidSlice
3.6.10.18  feSolidSlice
feSolidSlice
( solidSET, planeBASE, planeNORMAL, redraw )
Description:Slices one or more solids with a plane.Input:
INT4 solidSETThe ID of a set that contains a list  of solid IDs that will be sliced. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to slice.
REAL8 planeBASE[0..2] Any lo cation that lies on the plan e used to slice the solid.
REAL8 planeNORMAL[0..2] The components of a vector that is normal to the plane.
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:NoneReturn Code:FE_FAIL Could not slice the selected solids.Remarks/Usage:This method corre sponds to the Geometry, Solid, Slice  command found in FEMAP prior to version 11.2 
To use features of the Geometry, Solid, Slice  command implemented in FEMAP 11.2, use feSolidSlice2
Example:None
feSolidSliceMatch   API-519
3.6.10.19  feSolidSliceMatch
feSolidSliceMatch
( solidSET, planeBASE, planeNORMAL, redraw )
Description:Slices one or more solids with a plane and leaves matching surfaces on both new solids.
Input:
INT4 solidSETThe ID of a set that contains a list  of solid IDs that will be sliced. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to slice.
REAL8 planeBASE[0..2] Any lo cation that lies on the plan e used to slice the solid.
REAL8 planeNORMAL[0..2] The components of a vector that is normal to the plane.
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:NoneReturn Code:FE_FAIL Could not slice the selected solids.Remarks/Usage:This method corre sponds to the Geometry, Solid, Slice Match  command found in FEMAP prior to ver-
sion 11.2. The functionality of Geometry, Solid, Slice Match  was incorporated into the Geometry, Solid, 
Slice  command implemented in FEMAP 11.2, so use fe SolidSlice2 with bMatchAcrossSlice=True to 
duplicate the functiona lity of this method.
Example:None
 API-520  feSolidSlice2
3.6.10.20  feSolidSlice2
feSolidSlice2
( solidSET, planeBASE, planeNORMAL, bSlic eOrSection, bMatchAcrossSlice, nNumber 
of Planes, dMultiPlaneOffset, nSliceColor, redraw )
Description:Slices one or more solids with a single plane or any number of planes which are parallel to, and offset 
from, the specified plane. Also, offe rs an option to use each slice pl ane to create a surface representing 
the cross-section of each solid at the slice location,  instead of slicing each solid into multiple solids.
Input:
INT4 solidSETThe ID of a set that contains a list  of solid IDs that will be sliced. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to slice.
REAL8 planeBASE[0..2] Any lo cation that lies on the plan e used to slice the solid.
REAL8 planeNORMAL[0..2] The components of a vector that is normal to the plane.
BOOL bSliceOrSectionIf True, each solid will be sliced in to multiple solids. If False, cross-
sectional surface(s) will be created for each solid.
BOOL bMatchAcrossSliceIf True, matching surfaces will be created on both new solids. Only 
used when bSliceOrSection is True.
INT4 nNumberOfPlanes If value > 1, multiple slice planes will be used
REAL8 dMultiPlaneOffsetOffset distance between each parallel plane. Only used when nNum-
berOfPlanes is > 1.
INT4 nSliceColorSpecifies the color of the surfaces at the slice locations. To use the 
Active Color for Solids, specify a -1
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:NoneReturn Code:FE_FAIL Could not slice the selected solids.Remarks/Usage:This method provides access to features of the Geometry, Solid, Slice  command implemented in 
FEMAP 11.2, when Method  is set to With Plane . Also, combines functiona lity of feSolidSlice and 
feSolidSliceMatch.
Example:None
feSolidSliceAlongFace   API-521
3.6.10.21  feSolidSliceAlongFace
feSolidSliceAlongFace
( surfaceID )
Description:Separates a solid by slici ng it with one of its surfaces.
Input:
INT4 surfaceIDThe ID of the surface used to slice th e solid. This surface is also used 
to determine the solid to slice, sin ce only the solid that contains the 
surface can be sliced.
Output:NoneReturn Code:
FE_FAIL Could not slice the solid with the selected surface.
Remarks/Usage:This method corre sponds to the Geometry, Solid, Slice Along Face  command found in FEMAP prior to 
version 11.2. To use features of the Geometry, Solid, Slice  command implemented in FEMAP 11.2, use 
feSolidSliceAlongFace2
Example:None
 API-522  feSolidSliceAlongFace2
3.6.10.22  feSolidSliceAlongFace2
feSolidSliceAlongFace2
( surfaceID, bSliceOrSection, bMatchAcrossSlice, nSliceColor, redraw )
Description:Separates a solid by slicing it with one of its surf aces. Essentially, performs the same operation as feSol-
idSliceAlongFace, while offeri ng some additional options.
Input:
INT4 surfaceIDThe ID of the surface used to slice th e solid. This surface is also used 
to determine the solid to slice, sin ce only the solid that contains the 
surface can be sliced. To prompt the user to select a surface via a dia-log box, enter a value of 0.
BOOL bSliceOrSectionIf True, each solid will be sliced in to multiple solids. If False, cross-
sectional surface(s) will be created for each solid.
BOOL bMatchAcrossSliceIf True, matching surfaces will be created on both new solids. Only 
used when bSliceOrSection is True.
INT4 nSliceColorSpecifies the color of the surfaces at the slice locations. To use the 
Active Color for Solids, specify a -1
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:NoneReturn Code:FE_FAIL Could not slice the solid with the selected surface.Remarks/Usage:This method provides access to features of th e Geometry, Solid, Slice command implemented in 
FEMAP 11.2, when Method  is set to Along Face .
Example:None
feSolidSliceWithSheet2   API-523
3.6.10.23  feSolidSliceWithSheet2
feSolidSliceWithSheet2
( solidSET, sheetID, bSliceOrSection, bMatchAcrossSlice, nSliceColor, deleteTool, 
redraw )
Description:Slices one or more solids with any number of “shee t solids” (i.e., any number of surfaces stitched 
together into a single body or a single surface). Also , offers an option to use each “sheet solid” to create 
a surface representing the cross-section of each solid at the slice location, instead of slicing each solid 
into multiple solids.
Input:
INT4 solidSETThe ID of a set that contains a list  of solid IDs that will be sliced. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to slice.
INT4 sheetSETThe ID of a set that contains a list of sheet solid IDs that will be used 
as “slicing tools”. Alternatively, if you specify a negative value, this 
is simply the ID of the single sh eet solid to use as a “slicing tool”.
BOOL bSliceOrSectionIf True, each solid will be sliced in to multiple solids. If False, cross-
sectional surface(s) will be created for each solid.
BOOL bMatchAcrossSliceIf True, matching surfaces will be created on both new solids. Only 
used when bSliceOrSection is True.
INT4 nSliceColorSpecifies the color of the surfaces at the slice locations. To use the 
Active Color for Solids, specify a -1
BOOL deleteTool If True, the “sheet solids” used as “slicing tools” will be deleted.
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:NoneReturn Code:FE_FAIL Could not slice a solid with the selected sheet solid.Remarks/Usage:This method provides access to features of th e Geometry, Solid, Slice command implemented in 
FEMAP 11.2, when Method  is set to With Sheet Solid . Also, there was never a feSolidSliceWithSheet 
method, as the “2” simply indicates  this method was impl emented at the same time as “feSolidSlice2”.
Example:None
 API-524  feSolidSliceWithCurve2
3.6.10.24  feSolidSliceWithCurve2
feSolidSliceWithCurve2
( solidSET, curveID, bSliceOrSection, bMatchAcrossSlice, nSliceColor, , bAlongCurve-
Normal, bVectorDirectionOnly, vectorBase, vectorDirection, deleteTool, redraw )
Description:Slices one or more solids with any number of curves,  which has been “extruded ” along a vector normal 
to the curve normal or along a vect or specified by the user. Also, offe rs an option to use the “extruded 
curve” to create a surface representing the cross-sectio n of each solid at the slice location, instead of 
slicing each solid into multiple solids.
Input:
INT4 solidSETThe ID of a set that contains a list  of solid IDs that will be sliced. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to slice.
INT4 curveIDThe ID of a set that contains a list of curve IDs that will be used as 
“slicing tools”. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single curve to use as a “slicing tool”.
BOOL bSliceOrSectionIf True, each solid will be sliced in to multiple solids. If False, cross-
sectional surface(s) will be created for each solid.
BOOL bMatchAcrossSliceIf True, matching surfaces will be created on both new solids. Only 
used when bSliceOrSection is True.
INT4 nSliceColorSpecifies the color of the surfaces at the slice locations. To use the 
Active Color for Solids, specify a -1
BOOL bAlongCurveNormalIf True, “extrudes” the curve along the curve normal, which can only 
be inferred for planar curves (i.e., arcs, circles, but NOT straight 
lines). If False, “extrudes” the curve along the vector specified with the vectorBase and vectorDirection arguments.
BOOL bVectorDirectionOnlyIf True, “extrudes”, thus “slices” in the vector direction only. If 
False, “extrudes, thus  “slices” in both the positive and negative vec-
tor directions. Only used wh en bAlongCurveNormal = False
REAL8 vectorBase[0..2] Location at base of vector to slice alongREAL8 vectorDirection[0..2] Direction of sliceBOOL deleteTool If True, the curves us ed as “slicing tools” will be deleted.
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:NoneReturn Code:
feSolidSliceWithCurve2   API-525
FE_FAIL Could not slice a solid with the selected curve.
Remarks/Usage:This method provides access to features of th e Geometry, Solid, Slice command implemented in 
FEMAP 11.2, when Method  is set to With Curve . Also, there was never a feSolidSliceWithCurve 
method, as the “2” simply indicates  this method was impl emented at the same time as “feSolidSlice2”.
Example:NonefeSolidSliceWithCurve2
( solidSET, curveID, bSliceOrSection, bMatchAcrossSlice, nSliceColor, , bAlongCurve-
Normal, bVectorDirectionOnly, vectorBase, vectorDirection, deleteTool, redraw )
 API-526  feSolidEmbedFace
3.6.10.25  feSolidEmbedFace
feSolidEmbedFace
( surfaceID, dirMode, curveOpt, direction, offset, redraw )
Description:Uses a surface of a solid to divide it.Input:
INT4 surfaceIDThe ID of the surface used to slice th e solid. This surface is also used 
to determine the solid to slice, sin ce only the solid that contains the 
surface can be sliced.
INT4 dirModeThe option used to determine whic h direction the surface will be pro-
jected as it is embedded into the solid: 0=Automatic direction and 
offset selection, 1=Specified dir ection, Automatic offset, 2= Auto-
matic Direction, Specified offset.
INT4 curveOptThe option used to determine wh ich curves of the surface will be 
embedded: 0=Outline only (skip interior curves/holes), 1=All Curves.
REAL8 direction[0..2]The vector used to specify the dir ection to embed the face - only used 
if dirMode=1.
REAL8 offsetThe distance that the face will be em bedded into the so lid. Only used 
if dirMode=1 or dirMode=2.
BOOL redrawIf True, the graphics will be redrawn to reflect the updated solids fol-
lowing this operation.
Output:NoneReturn Code:FE_FAIL Could not embed the surface into the solid.Remarks/Usage:NoneExample:None
feSolidCleanup   API-527
3.6.10.26  feSolidCleanup
feSolidCleanup
( solidSET, redundant, sliver, check )
Description:Performs various cleanup and checking on selected solids.
Input:
INT4 solidSETThe ID of a set that contains a list  of solid IDs that will be checked. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to check.
BOOL redundantIf True, redundant geometry that is not required to define the solid 
will be removed. For example, extra lines or surfaces that were “cut” 
into the underlying su rfaces will be removed.
BOOL sliverIf True, an attempt will be made to  remove any and all small sliver 
surfaces. This option is only availabl e if the solid is a Parasolid solid.
BOOL checkIf True, the solids will be checked to ensure that they are still valid. 
This is especially important if yo u have attempted to  remove sliver 
surfaces.
Output:NoneReturn Code:FE_FAIL Could not cleanup the selected solids.Remarks/Usage:NoneExample:None
 API-528  feSolidCleanupAdvanced
3.6.10.27  feSolidCleanupAdvanced
feSolidCleanupAdvanced
( solidSET, RepairEdges, RepairEdgesVal, CleanSmoothDiscont, CleanSmoothDiscont-
Val, RemoveSelfInt, AllowSurfMod, RemoveSpikes, RemoveSpikesVal, RemoveS-
mallEdges, RemoveSmallEdgesVal, RemoveSmallFaces, RemoveSmallFacesVal, 
RemoveSliverFaces, RemoveSliverFacesVal, ConvertToAnalytic, ConvertToAnalyt-icVal, RecalcEdges, RecalcEdgesVal, MergeEdges, HealSurfaces, HealSurfacesVal, 
HealSmoothDiscont, HealSmoothDiscontVal, ReplaceMissing )
Description:
Performs more advanced cleanup and checking on selected solids.Input:
INT4 solidSETThe ID of a set that contains a list  of solid IDs that will be checked. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to check.
BOOL RepairEdges If True, turn on Cleaning Repair Edges
REAL8 RepairEdgesVal Size for repairing edgesBOOL CleanSmoothDiscont If True, turn on  Cleaning Smooth or Split Discontinuities
REAL8 CleanSmoothDiscont-
ValAngle for Smooth or Split Discontinuities
BOOL RemoveSelfInt If True, turn on Cl eaning Remove Surface Self-Intersections
BOOL AllowSurfMod If True, turn on Cleaning Allow Surface Modifications
BOOL RemoveSpikes If True, turn on Small Feature Remove Spikes
REAL8 RemoveSpikesVal S ize for spike removal
BOOL RemoveSmallEdges If True, turn on  Small Feature Remove Small Edges
REAL8 RemoveSmallEdges-
ValSize for small edge removal
BOOL RemoveSmallFaces If True, turn on Small Feature Remove Small Faces
REAL8 RemoveSmallFacesVal Si ze for small face removal
BOOL RemoveSliverFaces If True, turn on Small Feature Remove Sliver FacesREAL8 RemoveSliverFacesVal Si ze for sliver face removal
BOOL ConvertToAnalyticIf True, turn on Geometry Simplifi cation Convert to Analytic Geom-
etry
REAL8 ConvertToAnalyticVal Value fo r Analytic Geometry conversion
BOOL RecalcEdges If True, turn on Edge Heal Recalculate Edge Geometry
( solidSET, RepairEdges, RepairEdgesVal, CleanSmoothDiscont, CleanSmoothDiscontVal, Remove-
REAL8 RecalcEdgesVal Value for recalculating edge geometry
BOOL MergeEdges If True, turn on Edge Heal Merge EdgesBOOL HealSurfaces If True, turn on Surface Heal and Stitch Heal Surfaces
REAL8 HealSurfacesVal Value for healing surfaces
BOOL HealSmoothDiscontIf True, turn on Surface Heal an d Stitch Smooth or Split Discontinu-
ities
REAL8 HealSmoothDiscont-
ValValue for Smoothing/Splitting Disco ntinuities during Surface Heal-
ing
BOOL ReplaceMissing If True, turn on Surfa ce Heal and Stitch Repl ace Missing Geometry
Output:NoneReturn Code:FE_FAIL Could not cleanup the selected solids.Remarks/Usage:For all numeric values used  by this method, specifying a value of  0.0 will automatica lly use the default 
value that is shown in the dialog when you access this functionality fro m the user interface.
Example:This example calls Advanced Cleanup on Solid 1, with all the default op tions that would be used had the 
functionality been accessed from the user interface.
Sub Main 
Dim App As femap.model 
Set App = feFemap() 
App.feSolidCleanupAdvanced( -1, True, 0.0, True, 0.0, True, _    
True, True, 0.0, True, 0.0, True, 0.0, True, 0.0, True, 0.0, _ 
True, 0.0, True, False, 0.0, False, 0.0, False )
End SubfeSolidCleanupAdvanced
( solidSET, RepairEdges, RepairEdgesVal, CleanSmoothDiscont, CleanSmoothDiscont-
Val, RemoveSelfInt, AllowSurfMod, RemoveSpikes, RemoveSpikesVal, RemoveS-mallEdges, RemoveSmallEdgesVal, RemoveSmallFaces, RemoveSmallFacesVal, 
RemoveSliverFaces, RemoveSliverFacesVal, ConvertToAnalytic, ConvertToAnalyt-
icVal, RecalcEdges, RecalcEdgesVal, MergeEdges, HealSurfaces, HealSurfacesVal, 
HealSmoothDiscont, HealSmoothDiscontVal, ReplaceMissing )
 API-530  feSolidRemoveFace
3.6.10.28  feSolidRemoveFace
feSolidRemoveFace
( surfaceSET, aggressive, redraw )
Description:Removes face(s) from a solid and then heals the gap.Input:
INT4 surfaceSETThe ID of a set that contains a list of surface IDs that will be 
removed. Alternatively, if you specif y a negative value, this is simply 
the ID of the single surface to remove.
BOOL aggressive Attempts aggressive face removal.BOOL redraw Redraw the model after command.Output:
None
Return Code:FE_FAIL Could not remove face.Remarks/Usage:NoneExample:None
feSolidRemoveCurve   API-531
3.6.10.29  feSolidRemoveCurve
feSolidRemoveCurve
( cuSET, nRemoveOption )
Description:Removes curve(s) from a solid or sheet solid.Input:
INT4 cuSETThe ID of a set that contains a list of curve IDs that will be removed. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single curve to remove.
INT4 nRemoveOptionAllows you to choose a curves remova l strategy:
0=Basic (FCRO_NORMAL)1=Aggressive (FCRO_AGGRESSIVE)
2=Combine Surfaces (FCRO_COMBINE)
Output:
None
Return Code:FE_FAIL Could not remove curve.Remarks/Usage:NoneExample:None
 API-532  feSolidExtendToSurface
3.6.10.30  feSolidExtendToSurface
feSolidExtendToSurface
( suID1, suID2 )
Description:Attempts to extend a select ed surface on a solid to a different surface, which may or may not be part of 
a solid. If successful, the origin al solid will be modified.
Input:
INT4 suID1The ID of a set that contains a list of surface IDs that will be 
extended. Alternatively, if you spec ify a negative value, this is sim-
ply the ID of the single surface on a solid to extend.
INT4 suID2ID of a single surface or surface on a solid to extend the solid con-
taining the surface specified in suID1 to.
Output:NoneReturn Code:FE_FAIL Could not extend face(s) of solid(s) to specified surface.
Remarks/Usage:NoneExample:None
feSolidFillCavity   API-533
3.6.10.31  feSolidFillCavity
feSolidFillCavity
( curveID )
Description:Fills a cavity or hole in a solid by selecting a single seed curve, usually part of a loop.
Input:
INT4 curveIDThe ID of a single curve to use as the seed curve, usually part of a 
loop.
Output:NoneReturn Code:FE_FAIL Could not remove face.Remarks/Usage:Using this API call is essentially the same as using the Geometry, Solid, Fill Hole  command in the user 
interface.
Example:None
 API-534  feSolidRemoveBlendsBelowRadius
3.6.10.32  feSolidRemoveBlendsBelowRadius
feSolidRemoveBlendsBelowRadius
( soSetID, max_rad )
Description:This method attempts to remove all blends (fillet surfaces) from a solid, with an option to limit blend 
removal to the blends which have a radius less than or equal to  the specified value.
Input:
INT4 solSetIDID of a Set object containing exis ting solids for blend removal. Alter-
natively, specify as a negative va lue try and remove blends from a 
single solid.
REAL8 max_radValue of maximum blend radius to remove. An attempt will be made 
to remove all blends w ith a radius less than or equal to this value. 
Enter a value of 0.0 to  attempt to remove all blends, regardless of 
radius.
Output:NoneReturn Code:FE_FAIL Could not remove face.Remarks/Usage:Using this call is essentially the same as using the Feature Removal Tool in the Meshing Toolbox with 
Feature Type set to Blends and max_rad being > 0.0 enables Limit Size and sets the value.
Example:None
feSolidRemoveRedundantPoint   API-535
3.6.10.33  feSolidRemoveRedundantPoint
feSolidRemoveRedundantPoint
( ptID )
Description:This method attempts to  remove redundant vertices from a solid. Internally, this command will take a 
vertex on a Parasolid body, and if the attached curves are tangent, it attempts to replace the curves with 
a single one, and remove the vertex.
Input:INT4 ptID ID of point to attempt to remove
Output:NoneReturn Code:
FE_FAIL Could not remove point
Remarks/Usage:
Example:
None
 API-536  feSolidMidSurfaceManualInput
3.6.10.34  feSolidMidSurfaceManualInput
feSolidMidSurfaceManualInput
( suSet1_ID, suSet2_ID )
Description:This method attempts to  create a midsurface using the Variable  Thickness Processing option between 
two sets of specified surfaces. 
Input:
INT4 suSet1_IDID of a Set object containing existi ng surfaces on “side 1” of a solid. 
Alternatively, specify as a negative value to select a single surface.
INT4 suSet2_IDID of a Set object containing existi ng surfaces on “side 2” of a solid. 
Alternatively, specify as a negative value to select a single surface.
Output:NoneReturn Code:
Remarks/Usage:Example:
None
feSolidRayFire   API-537
3.6.10.35  feSolidRayFire
feSolidRayFire
( soSetID, nNumRay, vRayLoc, vRayDir, nHitSurface, vHitLoc )
Description:This method finds the loca tions on solids “hit” by “r ays” specified by the user
Input:
INT4 soSetIDID of a Set object containing the IDs of the solids that you want to 
“hit”
INT4 nNumRay The number of “rays” that are contained in vRayLoc, vRayDirREAL8 vRayLoc[0..3*nNum-
Ray-1]The location of the base of the ra y/vector in Global Rectangular 
coordinates
REAL8 vRayDir[0..3*nNum-
Ray-1]The components of the direction of the ray
Output:
INT4 nHitSurface[0..nNum-
Ray-1]The ID of the surface that each ray hits (0 if it misses all surfaces)
REAL8 vHitLoc[0..3*nNum-
Ray-1]The Global Rectangular XYZ coordinates where the ray hit the sur-
faces
Return Code:FE_BAD_DATA If any of the solids have a different scale factor than the othersFE_NOT_A V AILABLE If none of the Solid IDs you specified exist.Remarks/Usage:
Example:
None
 API-538  feSolidAlignSplits
3.6.10.36  feSolidAlignSplits
feSolidAlignSplits
( entType, setID, vecMode, alignVec )
Description:The method attempts to reorient the split lines of “periodic faces” (i.e., holes, cylinders, cones, etc), 
either automatically or using a alig nment vector specified by the user.
Input:
INT4 entTypeType of entities which will be in the input set, setID, will contain, 
surfaces (5=FT_SURFACE) or so lids (39=FT_SOLID). If you spec-
ify just surfaces, only those specifie d will be reoriented (and their 
matching 180 to 360 surface). If you specify solids, all faces on the 
solid that can be reorie nted, will be reoriented.
INT4 setIDID of a Set object containing existing surfaces or solids of a solid. 
Alternatively, specify as a negative value to select a single surface or solid.
INT4 vecModeVector Mode.
0 = FSA V_VECAUTO - Automatically picks a vector perpendicular 
to the axis of spherical, conical, toroidal, or cylindrical surfaces.  
Any co-aligned surface of these t ypes will always get the same per-
pendicular vector, therefore exactly aligning their splits.
1 = FSA V_VECINPUT - Use the vector specified in alignVec to re-
orient the surfaces.2 = FSA V_VECASK - Prompts user to choose a vector.
REAL8 alignVec[0..2] Alignment Vector (only vecMode = FSA V_VECINPUT)Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
feSolidThicken   API-539
3.6.10.37  feSolidThicken
feSolidThicken
( nSurfaceSet, dThickIn, dThickOut, nBooleanMode, bIdividual, bDeleteOriginalSurface)
Description:The method attempts to th icken a surface of a solid.
Input:
INT4 nSurfaceSetID of a Set object containing existing surfaces of a solid. Alterna-
tively, specify as a negative va lue to select a single surface.
REAL8 dThickIn The value of the distan ce to thicken the surface inward.
REAL8 dThickOut The value of the dist ance to thicken the surface outward.
INT4 nBooleanModeNumber of the mode to use. Use 0 for None, 1 for Add, 2 for Sub-
tract, or 3 for Embed.
BOOL bCleanIf True, an attempt will be made to clean the geometry. This option is 
only available if the Add, Subtract, or Embed is chosen.
BOOL bIndividualIf True, each surface selected to thicken will create and individual 
solid.
BOOL bDeleteOriginalSurface If True, an attempt w ill be made to delete the selected surface(s). 
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-540  feSolidInsideMulti
3.6.10.38  feSolidInsideMulti
feSolidInsideMulti
( soSetID, nNumPoints, vPtLocs, nInside )
Description:The method determines if a location is “inside”, “outside”, or “on” a po int, curve, or surface of all the 
selected solids considered as a “single combined solid”.  To determine if a loca tion is “inside”, “out-
side”, or “on” a point, curve, or surface of a particul ar solid, then only the ID of  that single solid should 
be included in the Set object.
Input:
INT4 soSetIDID of a Set object containing exis ting solids to be considered as a 
“single combined solid”. Alternativ ely, specify as a negative value to 
select a single solid.
INT4 nNumPtsNumber of locations to test for “i nside”, “outside” or “on” a point, 
curve, or surface of the “single combined solid”
REAL8 vPtLocs
[0..3*nNumPts-1]The Global Rectangular coordinates of the location(s) to be tested.
Output:
INT4 nInside0=Location is outside the single combined solid, 1=Location is 
inside the single combined solid, 2= Location is on a point, curve, or 
surface of the single combined solid.
Return Code:NoneRemarks/Usage:NoneExample:None
feGenerateCopy   API-541
3.6.11  Geometry and Mesh Generation Methods
In FEMAP v12 and above, a CopyTool Object w as created to grant users access the enhanced 
Copy, Rotate, and Reflect commands on both th e Geometry and Mesh me nus. For more informa-
tion, see Section 4.15, "CopyTool Objects". T
The commands on the Copy... (Section 3.6.11.2, "feGenerateCopy2"), Rotate (Section 3.6.11.8, 
"feGenerateRotate2"), and Reflect... (Section 3. 6.11.10, "feGenerateReflect2") menus which 
existed in FEMAP prior to version 12, along with  the commands on the current Radial Copy... 
(Section 3.6.11.4, "feGenerateRadialCopy2") and Scale... Section 3.6.11.6, "feGenerateScale2") 
menus for both Geometry and Mesh, may be accessed  using the methods descri bed in this section. 
The appropriate entities that ca n be used with each method ar e listed in the method tables.
3.6.11.1  feGenerateCopy
feGenerateCopy
( entityTYPE, entitySET, alongVEC, nodeINC, match )
Description:Creates new entities by copying exis ting entities along a vector. This call behaves identically to feGen-
erateCopy2 when matchColorLayer argument is set to False.
Input:
INT4 entityTYPEThe entity type to copy: 
3=Point, 4=Curve, 5=Surface, 6= V olume, 7=Node, 8=Element,  
39=Solid.
INT4 entitySETThe ID of a set that contains a list  of entity IDs that will be copied. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to copy.
REAL8 alongVEC[0..2]The components of the vector used to copy the entities. Components 
must be specified in global rectangu lar coordinates. This is not a unit 
vector; the entities are copied a dist ance equal to the length of the 
vector.
INT4 nodeINCOnly used if entityTYPE=Element. When you are copying elements, 
there are two possible approaches that you can take. You can either 
copy the elements and all of the n odes that they are used to define 
them, or you can just copy the element connectivity onto another 
existing set of nodes. If you want to  copy the nodes and elements, set 
nodeINC=0. If you want to copy the elements onto existing nodes, 
you should set nodeINC equal to th e difference in nodeIDs from the 
nodes on the existing elements to  the nodes on the new elements.
BOOL matchIf True, then loads and constraints on the original entities are copied 
to the newly created entities. If False, only the selected entities are 
duplicated.
Output:None
 API-542  feGenerateCopy
Return Code:
FE_FAIL Could not copy the entities.Remarks/Usage:NoneExample:NonefeGenerateCopy
( entityTYPE, entitySET, alongVEC, nodeINC, match )
feGenerateCopy2   API-543
3.6.11.2  feGenerateCopy2
feGenerateCopy2
( entityTYPE, entitySET, alongVEC, nodeINC, match, matchColorLayer )
Description:Creates new entities by copying existing entities along a vector. When matchColor Layer argument is set 
to False, behaves identi cal to feGenerateCopy.
Input:
INT4 entityTYPEThe entity type to copy: 
3=Point, 4=Curve, 5=Surface, 6= V olume, 7=Node, 8=Element,  
39=Solid.
INT4 entitySETThe ID of a set that contains a list  of entity IDs that will be copied. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to copy.
REAL8 alongVEC[0..2]The components of the vector used to copy the entities. Components 
must be specified in global rectangu lar coordinates. This is not a unit 
vector; the entities are copied a dist ance equal to the length of the 
vector.
INT4 nodeINCOnly used if entityTYPE=Element. When you are copying elements, 
there are two possible approaches that you can take. You can either 
copy the elements and all of the n odes that they are used to define 
them, or you can just copy the element connectivity onto another 
existing set of nodes. If you want to  copy the nodes and elements, set 
nodeINC=0. If you want to copy the elements onto existing nodes, you should set nodeINC equal to th e difference in nodeIDs from the 
nodes on the existing elements to  the nodes on the new elements.
BOOL matchIf True, then loads and constraints on the original entities are copied 
to the newly created entities. If False, only the selected entities are duplicated.
BOOL matchColorLayerIf True, then color, layer, and some  additional parameters of original 
entities are transferred to the newly created entities. If False, active 
parameters for the entity type will be used for the new entities.
Output:NoneReturn Code:FE_FAIL Could not copy the entities.Remarks/Usage:
 API-544  feGenerateCopy2
Additional parameters incl uded when matchColorLayer is True fo r Nodes include definition coordinate 
system, output coordinate system, permanent constr aints, and Superelement ID, while additional param-
eters for Elements include formulat ion and material orientation angle
Example:NonefeGenerateCopy2
( entityTYPE, entitySET, alongVEC, nodeINC, match, matchColorLayer )
feGenerateRadialCopy   API-545
3.6.11.3  feGenerateRadialCopy
feGenerateRadialCopy
( entityTYPE, entitySET, origVEC, length, Match )
Description:Creates new entities by radially copy ing existing entities about an orig in. This call behaves identically 
to feGenerateRadialCopy2 when matchColorLayer and bScaleAroundVec arguments are set to False.
Input:
INT4 entityTYPEThe entity type to copy:
3=Point, 4=Curve, 5=Surface, 6= V olume, 7=Node, 8=Element. Sol-
ids cannot be radially copied.
INT4 entitySETThe ID of a set that contains a list  of entity IDs that will be copied. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to copy.
REAL8 origVEC[0..2]The coordinates of the origin arou nd which the radial copy will be 
performed. The coordinates must  be in global rectangular.
REAL8 lengthThe radial distance to copy the entities. A positive value increases 
the distance from the origin. A ne gative value decreases the distance.
BOOL MatchIf True, then loads and constraints on the original entities are copied 
to the newly created entities. If False, only the selected entities are 
duplicated.
Output:NoneReturn Code:FE_FAIL Could not copy the entities.Remarks/Usage:NoneExample:None
 API-546  feGenerateRadialCopy2
3.6.11.4  feGenerateRadialCopy2
feGenerateRadialCopy2
( entityTYPE, entitySET, origXYZ, aroundVec, length, bScaleAroundVec, Match, match-
ColorLayer )
Description:Creates new entities by radially copy ing existing entities about an origin or about a vector. When both 
matchColorLayer and bScaleAroundVec arguments are se t to False, behaves identical to feGenerateRa-
dialCopy.
Input:
INT4 entityTYPEThe entity type to copy:
3=Point, 4=Curve, 5=Surface, 6= V olume, 7=Node, 8=Element. Sol-
ids cannot be radially copied.
INT4 entitySETThe ID of a set that contains a list  of entity IDs that will be copied. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to copy.
REAL8 origXYZ[0..2]When bScaleAroundVec=True, coordinates of the origin of the axis 
around which the radial copy will be performed. When bScale-
ArouncVec=False, coordinates of the origin around which the radial 
copy will be performed. In both cases, the coordinates must be 
defined in global rectangular.
REAL8 aroundVec[0..2]When bScaleAroundVec=True, components of the axis of radial 
copy, in global rectangular co ordinates. When bScaleAround-
Vec=False, argument is ignored.
REAL8 lengthThe radial distance to copy the entities. A positive value increases 
the distance from the origin. A ne gative value decreases the distance.
BOOL bScaleAroundVecIf True, radial copy is performed around vector defined by both 
origXYZ and aroundVec. If False, ra dial copy is performed around 
location specified in origXYZ only.
BOOL MatchIf True, then loads and constraints on the original entities are copied 
to the newly created entities. If False, only the selected entities are 
duplicated.
BOOL matchColorLayerIf True, then color, layer, and some  additional parameters of original 
entities are transferred to the newly created entities. If False, active 
parameters for the entity type will be used for the new entities.
Output:NoneReturn Code:FE_FAIL Could not copy the entities.
feGenerateRadialCopy2   API-547
Remarks/Usage:
Additional parameters incl uded when matchColorLayer is True fo r Nodes include definition coordinate 
system, output coordinate system, permanent constr aints, and Superelement ID, while additional param-
eters for Elements include formulat ion and material orientation angle
Example:NonefeGenerateRadialCopy2
( entityTYPE, entitySET, origXYZ, aroundVec, length, bScaleAroundVec, Match, match-
ColorLayer )
 API-548  feGenerateScale
3.6.11.5  feGenerateScale
feGenerateScale
( entityTYPE, entitySET, origVEC, scaleVEC, csysID, match )
Description:Creates new entities by scaling entities about a locatio n. This call behaves iden tically to feGenerateS-
cale2 when matchColorLayer argument is set to False.
Input:
INT4 entityTYPEThe entity type to scale:
3=Point, 4=Curve, 5=Surface, 6= V olume, 7=Node, 8=Element,  
39=Solid.
INT4 entitySETThe ID of a set that contains a list  of entity IDs that will be scaled. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to scale.
REAL8 origVEC[0..2]The coordinates of the origin around which the scale will be per-
formed. The coordinates must be in  the coordinate system specified 
in csysID - not necessarily global rectangular.
REAL8 scaleVEC[0..2]The scaling values. The entries in th is vector are the scale factors in 
the X,Y and Z coordinate directions of the csysID coordinate system. 
If you want a uniform scale, you must  still set all three values to the 
same scale factor.
INT4 csysIDThe ID of a coordinate system that will be used to perform the scal-
ing. Usually this will be 0=Global rectangular, unless you want to 
scale about some rotated set of axes.
BOOL matchIf True, then loads and constraints on the original entities are copied 
to the newly created entities. If False, only the selected entities are duplicated.
Output:NoneReturn Code:FE_FAIL Could not scale the entities.Remarks/Usage:NoneExample:None
feGenerateScale2   API-549
3.6.11.6  feGenerateScale2
feGenerateScale2
( entityTYPE, entitySET, origVEC, scaleV EC, csysID, match, matchColorLayer )
Description:Creates new entities by scaling entities about a loca tion. When matchColorLayer argument is set to 
False, behaves identical to feGenerateScale.
Input:
INT4 entityTYPEThe entity type to scale:
3=Point, 4=Curve, 5=Surface, 6= V olume, 7=Node, 8=Element,  
39=Solid.
INT4 entitySETThe ID of a set that contains a list  of entity IDs that will be scaled. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to scale.
REAL8 origVEC[0..2]The coordinates of the origin around which the scale will be per-
formed. The coordinates must be in  the coordinate system specified 
in csysID - not necessarily global rectangular.
REAL8 scaleVEC[0..2]The scaling values. The entries in th is vector are the scale factors in 
the X,Y and Z coordinate directions of the csysID coordinate system. 
If you want a uniform scale, you must  still set all three values to the 
same scale factor.
INT4 csysIDThe ID of a coordinate system that will be used to perform the scal-
ing. Usually this will be 0=Global rectangular, unless you want to 
scale about some rotated set of axes.
BOOL matchIf True, then loads and constraints on the original entities are copied 
to the newly created entities. If False, only the selected entities are duplicated. (only available in v8.2 and later)
BOOL matchColorLayerIf True, then color, layer, and some  additional parameters of original 
entities are transferred to the newly created entities. If False, active 
parameters for the entity type will be used for the new entities.
Output:NoneReturn Code:FE_FAIL Could not scale the entities.Remarks/Usage:Additional parameters incl uded when matchColorLayer is True fo r Nodes include definition coordinate 
system, output coordinate system, permanent constr aints, and Superelement ID, while additional param-
eters for Elements include formulat ion and material orientation angle
 API-550  feGenerateScale2
Example:
NonefeGenerateScale2
( entityTYPE, entitySET, origVEC, scaleV EC, csysID, match, matchColorLayer )
feGenerateRotate   API-551
3.6.11.7  feGenerateRotate
feGenerateRotate
( entityTYPE, entitySET, origVEC, axisVEC, rotANGLE, transDIST, match )
Description:Creates new entities by rotating ent ities about an axis. This call beha ves identically to feGenerateRo-
tate2 when matchColorLayer argument is set to False.
Input:
INT4 entityTYPEThe entity type to rotate:
3=Point, 4=Curve, 5=Surface, 6= V olume, 7=Node, 8=Element,  
39=Solid.
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be rotated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to rotate.
REAL8 origVEC[0..2]The coordinates of the origin of th e axis of rotation. Must be speci-
fied in global rectangular coordinates.
REAL8 axisVEC[0..2]The components of the axis of rotation, in global rectangular coordi-
nates. The rotation will be in posi tive, right-hand rule sense about 
this axis.
REAL8 rotANGLE The angle of rotation about the axis vector, in degrees.
REAL8 transDISTThe translation distance, through which the entities are translated 
along the rotation axis, as they ar e rotated. Usually this is zero.
BOOL matchIf True, then loads and constraints on the original entities are copied 
to the newly created entities. If False, only the selected entities are duplicated.
Output:NoneReturn Code:FE_FAIL Could not rotate the entities.Remarks/Usage:NoneExample:None
 API-552  feGenerateRotate2
3.6.11.8  feGenerateRotate2
feGenerateRotate2
( entityTYPE, entitySET, origVEC, axisVEC, rotANGLE, transDIST, match, matchColor-
Layer )
Description:Creates new entities by rotating entities about an axis. When matchColorLayer argument is set to False, 
behaves identical to feGenerateRotate.
Input:
INT4 entityTYPEThe entity type to rotate:
3=Point, 4=Curve, 5=Surface, 6= V olume, 7=Node, 8=Element,  
39=Solid.
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be rotated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to rotate.
REAL8 origVEC[0..2]The coordinates of the origin of th e axis of rotation. Must be speci-
fied in global rectangular coordinates.
REAL8 axisVEC[0..2]The components of the axis of rotation, in global rectangular coordi-
nates. The rotation will be in posi tive, right-hand rule sense about 
this axis.
REAL8 rotANGLE The angle of rotation about the axis vector, in degrees.
REAL8 transDISTThe translation distance, through which the entities are translated 
along the rotation axis, as they ar e rotated. Usually this is zero.
BOOL matchIf True, then loads and constraints on the original entities are copied 
to the newly created entities. If False, only the selected entities are 
duplicated.
BOOL matchColorLayerIf True, then color, layer, and some  additional parameters of original 
entities are transferred to the newly created entities. If False, active 
parameters for the entity type will be used for the new entities.
Output:NoneReturn Code:FE_FAIL Could not rotate the entities.Remarks/Usage:Additional parameters incl uded when matchColorLayer is True fo r Nodes include definition coordinate 
system, output coordinate system, permanent constr aints, and Superelement ID, while additional param-
eters for Elements include formulat ion and material orientation angle
feGenerateRotate2   API-553
Example:
NonefeGenerateRotate2
( entityTYPE, entitySET, origVEC, axisVEC, rotANGLE, transDIST, match, matchColor-
Layer )
 API-554  feGenerateReflect
3.6.11.9  feGenerateReflect
feGenerateReflect
( entityTYPE, entitySET, origVEC , normVEC, trapWIDTH, match )
Description:Creates new entities by reflecting entities about a plan e. This call behaves iden tically to feGenerateRe-
flect2 when matchColorLayer argument is set to False.
Input:
INT4 entityTYPEThe entity type to reflect:
3=Point, 4=Curve, 5=Surface, 6= V olume, 7=Node, 8=Element,  
39=Solid.
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be reflected. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to reflect.
REAL8 origVEC[0..2]The coordinates of the origin of the reflection plane. Must be speci-
fied in global rectangular coordinates.
REAL8 normVEC[0..2]The components of the normal to th e reflection plane, in global rect-
angular coordinates. It is not neces sary for this axis to point toward 
(or away from) the existing entities - either vector will yield the same 
result.
REAL8 trapWIDTHThe trapWIDTH of the reflection plan e. Entities that fall within this 
distance from the reflection plane will not be reflected.
BOOL matchIf True, then loads and constraints on the original entities are copied 
to the newly created entities. If False, only the selected entities are 
duplicated.
Output:NoneReturn Code:FE_FAIL Could not reflect the entities.Remarks/Usage:NoneExample:None
feGenerateReflect2   API-555
3.6.11.10  feGenerateReflect2
feGenerateReflect2
( entityTYPE, entitySET, origVEC, normVEC, trapWIDTH, match, matchColorLayer )
Description:Creates new entities by reflecting en tities about a plane. When matchC olorLayer argument is set to 
False, behaves identical to feGenerateReflect.
Input:
INT4 entityTYPEThe entity type to reflect:
3=Point, 4=Curve, 5=Surface, 6= V olume, 7=Node, 8=Element,  
39=Solid.
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be reflected. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to reflect.
REAL8 origVEC[0..2]The coordinates of the origin of the reflection plane. Must be speci-
fied in global rectangular coordinates.
REAL8 normVEC[0..2]The components of the normal to th e reflection plane, in global rect-
angular coordinates. It is not neces sary for this axis to point toward 
(or away from) the existing entities - either vector will yield the same 
result.
REAL8 trapWIDTHThe trapWIDTH of the reflection plan e. Entities that fall within this 
distance from the reflection plane will not be reflected.
BOOL matchIf True, then loads and constraints on the original entities are copied 
to the newly created entities. If False, only the selected entities are 
duplicated.
BOOL matchColorLayerIf True, then color, layer, and some  additional parameters of original 
entities are transferred to the newly created entities. If False, active 
parameters for the entity type will be used for the new entities.
Output:NoneReturn Code:FE_FAIL Could not reflect the entities.Remarks/Usage:Additional parameters incl uded when matchColorLayer is True fo r Nodes include definition coordinate 
system, output coordinate system, permanent constr aints, and Superelement ID, while additional param-
eters for Elements include formulat ion and material orientation angle
Example:
 API-556  feGenerateReflect2
NonefeGenerateReflect2
( entityTYPE, entitySET, origVEC, normVEC, trapWIDTH, match, matchColorLayer )
feCurveProjectCurvesOntoSurfaces   API-557
3.6.12  Meshing Toolbox - Ge ometry Editing Tool Methods
The methods described in this sec tion provide access to certain operations found in the Meshing 
Toolbox’s Geometry Editing Tool.
3.6.12.1  feCurveProjectCurvesOntoSurfaces
feCurveProjectCu rvesOntoSurfaces
( cuSetID, suSetID, extendMode, attrib_trans )
Description:This method mimics the functiona lity of the Meshing Toolbox's Geom etry Editing Tool - Project Curve 
Operation, which projects any number of select ed curves onto any number of selected surfaces
Input:
INT4 cuSetIDThe ID of the set of existing curves to project. Alternatively, specify 
as a negative value to project a single curve.
INT4 suSetIDThe ID of the set of existing surfaces to project onto. Alternatively, 
specify as a negative value to project onto a single surface.
INT4 extendModeSpecifies the Imprint Mode, 0=Im pint (no extension of curves), 
1=Imprint, Extend, 2=Im print, Extend, Clean
BOOL attrib_transIf True, will assign any meshing attr ibutes on the curves in cuSetID 
and assign them to the new curves created by the projection.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-558  feSolidExtendEdgesToSurfaces
3.6.12.2  feSolidExtendEdgesToSurfaces
feSolidExtendEdgesToSurfaces
( cuSetID, suSetID, extendShape, bEdgeAuto )
Description:This method mimics the functiona lity of the Meshing Toolbox's Geom etry Editing Tool - Extend Oper-
ation, which extends any number of selected surface edge curves to the selected surfaces
Input:
INT4 cuSetIDID of a Set object containing exis ting surface edge curves to extend 
to a surface. Alternatively, specify as a negative value to extend a 
single surface edge curve.
INT4 suSetIDID of a Set object containing exis ting surfaces to extend to. Alterna-
tively, specify as a negative value to extend to a single surface.
INT4 extendShapeSpecifies the Extend Shape, 0=Linear, 1=Continuous Curvature, 
2=Reflective
BOOL bAutoEdgeIf True, will attempt to automatically  select additional curves needed 
to extend an entire body at once (i.e.,  if one curve at the end of a pipe 
is selected, both curves on the end of a pipe would be extended when 
this option is set to True). Wh en False, only selected curves are 
extended
Output:NoneReturn Code:NoneRemarks/Usage:Using this call with bAutoEdge set to False mimics  behavior of the Extend Operation when using 
Extend To set to Surface, while setting it to True mi mics behavior of Extend  To set to Surface Auto 
Curve.
Example:None
feSolidMovePointOntoGeometry   API-559
3.6.12.3  feSolidMov ePointOntoGeometry
feSolidMovePoi ntOntoGeometry
( ptSetID, geomID, extendShape, bAlongEdge )
Description:This method mimics the functionality of the Mesh ing Toolbox's Geometry Editing Tool - Project/Move 
Point Operation, which moves points to a specified poin t or projects points onto the specified curve, sur-
face, or solid. This only works for points on solid or surface geometry  and the underlying geometry will 
be modified after the points are moved/projected.
Input:
INT4 ptSetIDID of a Set object containing existing points on solids or surfaces to 
move onto the type of geometry selected with geomType. Alterna-
tively, specify as a negative value to move a single point.
INT4 geomIDID of geometric entity to move/pro ject the points. Type of entity 
defined using geomType
INT4 geomTypeType of geometric entity to move to/project onto. Use enum zData-
Type to select from available entity types.
BOOL bAlongEdgeIf True, will project using a vector matching an edge each point is 
connected to instead of doing a no rmal projection based on proxim-
ity to the curve, surface, or solid.
Output:NoneReturn Code:NoneRemarks/Usage:
Example:
None
 API-560  feCurveSolidToFEMAP
3.6.13  Creating FEMAP geomet ry from Parasolid Geometry
3.6.13.1  feCurveSolidToFEMAP
feCurveSolidToFEMAP
( cuSetID )
Description:Creates new FEMAP curves with FEMAP points matching the selected Parasolid curves.Input:
INT4 cuSetIDID of set containing Parasolid curv es. Alternatively, specify a nega-
tive value to choose the ID of  a single Parasolid Curve.
Output:NoneReturn Code:
FE_FAILCould not create FEMAP curves. This can occur if a single FEMAP 
curve is selected instead of Parasolid curve
Remarks/Usage:If both Parasolid curves and FEMAP curves are selected, the FEMAP cu rves will be ignored.
Example:None
feSolidExtractCenterlines   API-561
3.6.13.2  feSolidExtractCenterlines
feSolidExtractCenterlines
( solidSetID, inMatID, tubular_only )
Description:Extracts lines and arcs at the centerline of the in put solid geometry. Straight and curved tubes are 
extracted first, properties are created as FEMAP Circ ular Bar or Circular Tube. A second method is 
used for all other solids, the longest line or arc on th e surface is found, a cross section is then found per-
pendicular to this curve. A new centerline line or arc is then created through the neutral axis of that sec-
tion and added to the model
Input:
INT4 solidSetIDID of a Set object containing exis ting solids to be processed. Alterna-
tively, specify as a negative value to process a single solid.
INT4 inMatIDThe input material ID. 
If -1 is specified, FEMAP will use the material associated with the 
solid if defined for the beam proper ty. If no material is defined for a 
solid, FEMAP will prompt the user to  create one. That material will 
then be used for all solids that do not have a property/material 
assigned. 
If 0 is specified, FEMAP will prompt the user for a material, and 
then use that material for a ll beam properties created. 
Any value above 0 is an override, this material ID will be assigned to 
all beam properties whether th e material exists or not.
BOOL tubular_onlyIf True, command will only attempt to find circular bar and tube 
cross sections. If False, after all ci rcular bar and tube cross sections 
are processed, command moves on to  other selected solids using the 
longest line/arc algorithm described above.
Output:NoneReturn Code:FE_FAILRemarks/Usage:NoneExample:None
 API-562  feGetNodalAreaOrLength
3.6.14  Nodal Area on Geometry
3.6.14.1  feGetNodalAreaOrLength
feGetNodalAreaOrLength
( nNumElem, nElems, nFaces, bAdjustMideside, bUnitArea, pnNumNodes, pvNodes, 
pvAreaOrLength )
Description:Extracts the area, unit area, or length for the nodes of a given set of elements and face ID.
Input:INT4 nNumElem The number of elements to get. INT4 nElems[0..nNumElems-
1]An array with the element IDs.
INT4 nFaces[0..nNumElems-1] An array with th e corresponds face ID of the element.
BOOL bAdjustMidside If True, accounts for midside nodes.
BOOL bUnitArea If True, unit area is found. If Fa lse, the portion of the entire area 
defined by the given elements is found.
Output:INT4 pnNumNodes The number of nodes found on the given elements.INT4 pvNodes[0..nNumNodes-
1]An array with the node IDs. 
REAL8 pvAreaOr-
Length[0..nNumNodes-1]An array with the corresponding values of area or length
Return Code:
NoneRemarks/Usage:NoneExample:None
feGetNodalAreaOnSurface   API-563
3.6.14.2  feGetNodalAreaOnSurface
feGetNodalAreaOnSurface
( nSurface, bAdjustMideside, bUnitArea, pnNumNodes, pvNodes, pvAreas)
Description:Extracts the area or unit area for the nodes of associated elements of a given surface.Input:INT4 nNumElem The ID of the surface to find get associated nodes from.BOOL bAdjustMidside If True, accounts for midside nodes.
BOOL bUnitArea If True, unit area is found. If False, portion of the surface area is 
found. 
Output:INT4 pnNumNodes The number of nodes found on the given surfaceINT4 pvNodes[0..nNumNodes-
1]An array with the node IDs. 
REAL8 pvAreas[0..nNum-
Nodes-1]An array with the corresponding values of area or length
Return Code:
NoneRemarks/Usage:NoneExample:None
 API-564  
3.7  Connection Methods
Connection Methods include:
•Section 3.7.1, "Generating Connections"
feConnectAuto   API-565
3.7.1  Generating Connections
3.7.1.1  feConnectAuto
feConnectAuto
( solidSET, linearTolerance, angleTolerance, strategy, bSelfConnect, bCombineAll, 
nConnectProp, bGlued )
Description:This function is obsolete. It is th e same as calling feConnectAuto2( ) with connectType = 1. Refer to the 
documentation for that func tion for more information.
 API-566  feConnectAuto2
3.7.1.2  feConnectAuto2
feConnectAuto2
( solidSET, connectType, linearTolerance, angleTolerance, strategy, bSelfConnect, 
bCombineAll, nConnectProp, bGlued )
Description:Automatically generates co nnections between solids
Input:
INT4 solidSETThe ID of a Set object that cont ains the IDs of solids to connect. 
Alternatively, if solidSET is negative , it is the ID of a single solid to 
use (although this will not do anythi ng unless bSelfConnect is also 
True)
INT4 connectTypeThe type of connections to search for 0=All, 1=Face to Face, 2=Edge 
to Face
REAL8 linearToleranceThe maximum distance between adja cent faces to find connections. 
If 0.0, then use default.
REAL8 angeToleranceThe maximum angle deviation between  adjacent planar faces to still 
consider them for connection.  If 0.0, then use default.
INT4 strategyA value between 1 and 5 that indicates the search strategy. You can 
also specify strategy = 0 to use the default strategy
BOOL bSelfConnect If True, allow connections between surfaces of the same solid
BOOL bCombineAllIf True, connections between faces of the same two solids will be 
combined into a single connection
INT4 nConnectPropThe ID of a Connection Property to  be used for th e connections (if 
nonzero, this Connection Property must exist). If specified as 0, a 
new default property will be created.
BOOL bGluedOnly used if nConnectProp is 0. If True, the default property will be 
a Glued type, otherwise a Contact type.
Output:NoneReturn Code:FE_FAIL Creating connections failedFE_INV ALID The search strategy is invalidFE_NOT_EXIST The Connection Property does not exist.Remarks/Usage:None
feConnectAuto2   API-567
Example:
The following routine automati cally connects all solids w ith a new Glued connection...
Sub Main 
Dim App As femap.model 
Set App = feFemap()

Dim s As femap.Set 
Set s = App.feSet 
s.AddAll( FT_SOLID ) 
App.feConnectAuto2(s.ID, 1, 0.001, 1.0, 0, False, True, 0, True)

End SubfeConnectAuto2
( solidSET, connectType, linearTolerance, angleTolerance, strategy, bSelfConnect, 
bCombineAll, nConnectProp, bGlued )
 API-568  
3.8  Model Methods
In general, the API does not contain methods that  duplicate the functionality that is found on the 
Model menu. Most of these commands simply create single finite element entities in your model, 
and those operations are supporte d through the Entity objects, d escribed in Section 5, "FEMAP 
Entity Objects".
In addition to those basic crea tion capabilities however, there ar e several output processing com-
mands that are located on the Model  menu. Those are supported directly, and are described in the 
following sections.
Model Methods include:Section 3.8.1, "Model Load Methods"
Section 3.8.2, "Model Constraint Methods"
Section 3.8.3, "Model Output Methods"Section 3.8.4, "Model Information Methods"
feLoadCombine   API-569
3.8.1  Model Load Methods
3.8.1.1  feLoadCombine
feLoadCombine
( fromSET, toSET, scale )
Description:Combines a Load set into another setInput:INT4 fromSET The ID of the Load Set to be combined
INT4 toSET The ID of the Load Set wh ich will contain the combined loads.
REAL8 scaleA scale factor to apply to the load s being combined. Normally set to 
1.0 to simply combine loads.
Output:NoneReturn Code:FE_FAIL Could not combine the load set, most likely it does not exist.
Remarks/Usage:The functionality of this me thod is identical to the Model, Load, Combine  command. All restrictions on 
combinations and scale factors that apply to that command apply equally to this method.
Example:None
 API-570  feLoadFromFreebody
3.8.1.2  feLoadFromFreebody
feLoadFromFreebody
( freebodyID, nodeSetID, outSetID, loadSetID, doSummation, doNodes, overrideNo-
deCheck)
Description:Creates applied loads from freebody loadsInput:INT4 freebodyID ID of freebody to use to determine load values
INT4 nodeSetIDSet ID containing node IDs to load; note that given nodes must exist 
in the specified freebody 
INT4 outSetID Output set ID from which to retrie ve load values
INT4 loadSetID Load set ID to store load definitions
BOOL doSummation Create lo ads for total summation
BOOL doNodes Create loads for nodal summations
BOOL overrideNodeCheckWhen set to False, then if you sp ecify a node that is not in the free-
body and potentially may not have any nodes, the routine returns 
FE_FAIL or FE_NOT_EXIST.  If True, the loads will be created anyway (has potential to create Zero loads).
Output:NoneReturn Code:FE_FAIL Invalid freebody, node(s), outp ut set, or load set ID specified 
FE_NOT_EXISTFreebody, node(s), output set, or lo ad set specified does not exist in 
the database
FE_INV ALIDOne or more of the nodes specified  are not included in the freebody 
object or doSummation is TRUE wh en specified freebody is not in 
interface mode
Remarks/Usage:feLoadFromFreebody creates applied loads from freeb ody loads. The load co mponents and contribu-
tions to be included in the created loads are obta ined from the specified freebod y. Up four load defini-
tions will be created in th e specified load set based on the opti ons specified in this command and the 
attributes set in the freebody: total resultant forces , total resultant moments,  nodal forces, and nodal 
moments.
Example:None
feBCCombine   API-571
3.8.2  Model Constraint Methods
3.8.2.1  feBCCombine
feBCCombine
( fromSET, toSET, overwrite )
Description:Combines a Constraint set into another setInput:INT4 fromSET The ID of the Co nstraint Set to be combined
INT4 toSETThe ID of the Constraint Set wh ich will contain the combined con-
straints.
BOOL overwriteIf True, constraints in the “to SET” will be overwritten with any 
duplicate constraints on the same no de. If False, degrees of freedom 
on the common nodes w ill be combined to form a new constraint. 
Does not apply to constraint equations.
Output:NoneReturn Code:FE_FAIL Could not combine the constrai nt set, most likely it does not exist.
Remarks/Usage:The functionality of this me thod is identical to the Model, Constraint, Combine  command. All restric-
tions on combinations that apply to that  command apply equally to this method.
Example:None
 API-572  feOutputProcessV2
3.8.3  Model Output Methods
3.8.3.1  feOutputProcessV2
NOTE: This method is obsolete. There are many co mbinations of options that could be passed 
to this method that are invalid and will not wo rk. Please switch to using one of the other “Out-
putProcess” methods that provide specific access to each of the processing methods.
feOutputProcessV2
( count, full_set, processing_method, approach, from_setID, from_vectorID, to_setID, 
to_vectorID, groupID, factor, overwrite, ply_summary, set_info )
Description:Provides the functionality th at is available through the Model, Output, Process  command to copy, com-
bine, envelope, or convert output . This method replaces feOutputPr ocess. For more information, see 
Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:
INT4 countThe number of processing operations; that is, the number of entries 
in the other arrays.
BOOL full_setSet to True if the operations will process entire sets of output, or 
False if individual vectors are to be processed. If True, from_vecto-
rID and to_vectorID are ignored.
INT4 processing_methodThe type of processing to be done: 0=Copy, 1=Combine, 2=Linear, 
3=RSS, 4=Convert, 5=Envelope, 6=Error Estimate.
INT4 approach[0..count-1]Additional approach required by certain methods. If processing_-
method=5,Envelope then (0=Max, 1=Min, 2=Max Abs). If process-
ing_method=6, Error Estimate then (0=Max Diff, 1=Diff to Avg, 
2=%Max Diff, 3=%Diff to Avg, 4=Norm% Max Diff, 5=Norm% Diff to Avg). If processing_method=4, Convert then (0=Avg, 
1=Max).
INT4 from_setID[0..count-1] The ID of the output set to process.INT4 from _vec torID[0..count-
1]The ID of the output vector to pr ocess (not used if full_set=True).
INT4 to_setID[0..count-1] The ID  of the output set where pr ocessed data will be created.
INT4 to_vectorID[0..count-1]The ID of the output vector where processed data will be created (not 
used if full_set=True).
INT4 groupID[0..count-1]The ID of the group used to restrict output processing. If 0, all avail-
able output, on the fu ll model is processed.
REAL8 factor[0..count-1]The scale factor for linear and RSS combinations. The Skip Below  
value for Error Estimates.
feOutputProcessV2   API-573
BOOL overwrite[0..count-1] Flag to overwrite existing output if you are combining output.
BOOL ply_summary[0..count-
1]For Envelope, if True, this will compute the ply summary informa-
tion for laminate output.
BOOL set_info[0..count-1]For Envelope, if True and doing full  sets, this will compute the addi-
tional set summary informatio n for the enveloped data.
Output:NoneReturn Code:FE_FAIL Could not process th e requested information.
Remarks/Usage:
Only combinations of options  that are available in the Model, Output, Process  command in FEMAP will 
correctly process inform ation through the API.
Example:NonefeOutputProcessV2
( count, full_set, processing_method, approach, from_setID, from_vectorID, to_setID, 
to_vectorID, groupID, factor, overwrite, ply_summary, set_info )
 API-574  feOutputProcessCopyV2
3.8.3.2  feOutputProcessCopyV2
feOutputProcessCopyV2
( bFullSet, from_setID, from_vectorID, to_setID )
Description:Allows you to Copy a single outp ut set or vector. This method replaces feOutputProcessCopy. For more 
information, see Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:
BOOL bFullSetSet to True if the operation will proc ess entire sets of output, or False 
if individual vectors are to be processed. If True, from_vectorID and 
to_setID are ignored.
INT4 from_setID The ID of the output set to process.INT4 from _vectorID The ID of th e output vector to process
INT4 to_setIDThe ID of the Set to contain the resulting copy.  If 0, a new Output 
Set will be created.
Output:NoneReturn Code:FE_FAIL Could not process th e requested information.
Remarks/Usage:NoneExample:None
feOutputProcessMergeV2   API-575
3.8.3.3  feOutputProcessMergeV2
feOutputProcessMergeV2
( bFullSet, bOverwrite, nCount, from _setID, from_vectorID, to_setID )
Description:Allows you to Combine/Merge Output  in Sets or Vectors. This method replaces feOutputProcessMerge. 
For more information, see Sec tion 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:
BOOL bFullSetSet to True if the operation will proc ess entire sets of output, or False 
if individual vectors are to be processed. If True, from_vectorID and 
to_setID are ignored.
BOOL bOverwriteIf True, existing Output will be over written. If False, output will only 
be merged onto nodes/elemen ts that have no output.
INT4 nCount The number of entri es in from_setID and from_vectorID
INT4 from_setID[0..nCount-1] The IDs of the output sets to process.INT4 from _vecto-
rID[0..nCount-1]The IDs of the output vectors to process.
INT4 to_setIDThe ID of the Set to contain the resulting copy.  If 0, a new Output 
Set will be created. 
Output:NoneReturn Code:FE_FAIL Could not process th e requested information.
Remarks/Usage:Each entry in from_setID and from_vectorID is used as a pair. For ex ample from_setID[0] and 
from_vectorID[0] mean output in the ve ctor from_vectorID[0] in from_setID[0].
Example:None
 API-576  feOutputProcessLinearCombinationV2
3.8.3.4  feOutputProcessLinearCombinationV2
feOutputProcessLin earCombinationV2
( bFullSet, nApproach, nCount, dScaleFactor, from_setID, from_vectorID, to_setID )
Description:Performs a linear combination, with a scale factor, of  Output Sets or Vectors. This method replaces 
feOutputProcessLinearCombination. Fo r more information, see Section 2.4, "Working with Output in 
FEMAP 2020.1 and above".
Input:
BOOL bFullSetSet to True if the operation will proc ess entire sets of output, or False 
if individual vectors are to be processed. If True, from_vectorID and 
to_setID are ignored.
INT4 nApproach0=Combine All Vectors in All Sets , 1=Combine All Vectors in Each 
Set, 2=Combine Each Vector across All Sets. Ignored and always =2 
if bFullSet is True.
INT4 nCountThe number of entries in dScaleFactor, from_setID and from_vecto-
rID
REAL8 dScaleFac-
tor[0..nCount-1]The scale factor to apply to each set or vector.
INT4 from_setID[0..nCount-1] The IDs of the output sets to process.
INT4 from _vecto-
rID[0..nCount-1]The IDs of the output vectors to process.
INT4 to_setIDThe ID of the Set to contain the resulting combination.  If 0, a new 
Output Set will be created.
Output:NoneReturn Code:FE_FAIL Could not process th e requested information.
Remarks/Usage:NoneExample:None
feOutputProcessRSSCombinationV2   API-577
3.8.3.5  feOutputProcessRSSCombinationV2
feOutputProcessR SSCombinationV2
( bFullSet, nApproach, nCount, dScaleFactor, from_setID, from_vectorID, to_setID )
Description:Performs an RSS (root sum squared) combination, with a scale factor, of  Output Sets or Vectors. This 
method replaces feOutputProcessRSSCombination. For more information, see Section 2.4, "Working 
with Output in FEMAP 2020.1 and above".
Input:
BOOL bFullSetSet to True if the operation will proc ess entire sets of output, or False 
if individual vectors are to be processed. If True, from_vectorID and 
to_setID are ignored.
INT4 nApproach0=Combine All Vectors in All Sets , 1=Combine All Vectors in Each 
Set, 2=Combine Each Vector across All Sets. Ignored and always =2 
if bFullSet is True.
INT4 nCountThe number of entries in dScaleFactor, from_setID and from_vecto-
rID
REAL8 dScaleFac-
tor[0..nCount-1]The scale factor to apply to each set or vector.
INT4 from_setID[0..nCount-1] The IDs of the output sets to process.
INT4 from _vecto-
rID[0..nCount-1]The IDs of the output vectors to process.
INT4 to_setIDThe ID of the Set to contain the resulting combination.  If 0, a new 
Output Set will be created.
Output:NoneReturn Code:FE_FAIL Could not process th e requested information.
Remarks/Usage:NoneExample:None
 API-578  feOutputProcessConvertV2
3.8.3.6  feOutputProcessConvertV2
feOutputProcessConvertV2
( approach, from_setID, from_vectorID, to_setID, to_vectorID, groupID )
Description:Allows you to “Convert” a single output vector between nodal and elementa l locations. This method 
replaces feOutputProcessConvert. For more informatio n see, Section 2.4, "Working with Output in 
FEMAP 2020.1 and above".
Input:INT4 approach 0=Avg, 1=MaxINT4 from_setID The ID of the output set to process.INT4 from _vectorID The ID of th e output vector to process
INT4 to_setID Not Used
INT4 to_vectorID Not Used
INT4 groupIDThe ID of the group used to restrict output processing. If 0, all avail-
able output, on the fu ll model is processed.
Output:NoneReturn Code:FE_FAIL Could not process th e requested information.
Remarks/Usage:NoneExample:None
feOutputProcessEnvelopeV2   API-579
3.8.3.7  feOutputProcessEnvelopeV2
feOutputProcessEnvelopeV2
( bFullSet, nType, nApproach, bEnvelopeInSets, bEnvelopeAcrossSets, bSetInfo, 
nCount, from_setID, from_vectorID, to_setID )
Description:Envelopes results in one or more Output Sets or Vectors to find worst-case scenarios. This method 
replaces feOutputProcessEnvelope. Fo r more information, see Section 2.4, "Working with Output in 
FEMAP 2020.1 and above".
Input:
BOOL bFullSetSet to True if the operation will proc ess entire sets of output, or False 
if individual vectors are to be processed. If True, from_vectorID and 
to_setID are ignored.
INT4 nTypeThe Type of envelope to create 0=Max, 1=Min, 2=Max Absolute 
Value.
INT4 nApproach0=Envelope All Vectors in All Sets , 1=Envelope All Locations (like 
all Plys, all Stress Recovery Locatio ns, ...), 2=Envelope Each Vector 
across All Sets. Ignored and always =2 if bFullSet is True.
BOOL bEnvelopeInSetsIf True, an Envelope is created and stored in the same set as the orig-
inal results Ignored and always False if bFullSet=True or nAp-
proach=2
BOOL bEnvelopeAcrossSetsIf True, results for similar vectors are enveloped across all of the 
selected sets. Ignored and always True if bFullSet=True or nAp-
proach=2
BOOL bSetInfoIf True extra output vectors are created which contain the ID of the 
set and possibly the location wh ere the envelope value came from.
INT4 nCount The number of entri es in from_setID and from_vectorID
INT4 from_setID[0..nCount-1] The IDs of the output sets to process.INT4 from _vecto-
rID[0..nCount-1]The IDs of the output vectors to process. Ignored if bFullSet=True
INT4 to_setIDThe ID of the Set to contain the resulting combination.  If 0, a new 
Output Set will be created. Ignored and always 0 if bFullSet=True or 
nApproach=2
Output:NoneReturn Code:FE_FAIL Could not process th e requested information.
 API-580  feOutputProc essEnvelopeV2
Remarks/Usage:
Provides more flexibility than feOutputProcessEnvelopeFromSets as different output vectors may be 
specified for each output set.
Example:NonefeOutputProcessEnvelopeV2
( bFullSet, nType, nApproach, bEnvelopeInSets, bEnvelopeAcrossSets, bSetInfo, 
nCount, from_setID, from_vectorID, to_setID )
feOutputProcessEnvelopeFromSetsV2   API-581
3.8.3.8  feOutputProcessEnvelopeFromSetsV2
feOutputProcessEnvelopeFromSetsV2
( bFullSet, nType, nApproach, bEnvelopeInSets, bEnvelopeAcrossSets, bSetInfo, 
setSET, vectorSET, to_setID )
Description:Envelopes results in one or more Output Sets or V ectors to find worst-case scen arios specified via a set 
of Output Sets and optionally a set of Output Vect ors. This method replaces feOutputProcessEnvelope-
FromSets. For more information, see Section 2.4, "W orking with Output in FEMAP 2020.1 and above".
Input:
BOOL bFullSetSet to True if the operation will proc ess entire sets of output, or False 
if individual vectors are to be processed. If True, from_vectorID and 
to_setID are ignored.
INT4 nTypeThe Type of envelope to create 0=Max, 1=Min, 2=Max Absolute 
Value.
INT4 nApproach0=Envelope All Vectors in All Sets , 1=Envelope All Locations (like 
all Plys, all Stress Recovery Locatio ns, ...), 2=Envelope Each Vector 
across All Sets. Ignored and always =2 if bFullSet is True.
BOOL bEnvelopeInSetsIf True, an Envelope is created and stored in the same set as the orig-
inal results Ignored and always False if bFullSet=True or nAp-
proach=2
BOOL bEnvelopeAcrossSetsIf True, results for similar vectors are enveloped across all of the 
selected sets. Ignored and always True if bFullSet=True or nAp-
proach=2
BOOL bSetInfoIf True extra output vectors are created which contain the ID of the 
set and possibly the location wh ere the envelope value came from.
INT4 setSETThe ID of a set that contains a list of Output Set IDs to use in the 
envelope. Alternatively, if you spec ify a negative value, this is sim-
ply the ID of the single Output Set to use.
INT4 vectorSETThe ID of a set that contains a list of Output Vector IDs to use in the 
envelope. Alternatively, if you spec ify a negative value, this is sim-
ply the ID of the single Output Vector to use.
INT4 to_setIDThe ID of the Set to contain the resulting combination. If 0, a new 
Output Set will be created. Ignored and always 0 if bFullSet=True or 
nApproach=2
Output:NoneReturn Code:
 API-582  feOutputProcessEnvelopeFromSetsV2
FE_FAIL Could not process th e requested information.
Remarks/Usage:Provides a streamlined method of en tering multiple output sets and/or  output vectors by using two Set 
objects. Especially useful when  using the feSelectOutputV2/feSel ectOutput2V2 (Section 3.15.4.2, 
"feSelectOutputV2"/Section 3.15.4.3, "feSelectO utput2V2") or feOutputSelectSets/feOutputSe-
lectSets2 (Section 3.15.4.4, "feSelectOutputSets"/Sec tion 3.15.4.5, "feSelectOutputSets2") entity selec-
tion methods for selecting the Outp ut Set(s) and Output Vector(s).
Example:NonefeOutputProcessEnvelopeFromSetsV2
( bFullSet, nType, nApproach, bEnvelopeInSets, bEnvelopeAcrossSets, bSetInfo, 
setSET, vectorSET, to_setID )
feOutputProcessErrorEstimateV2   API-583
3.8.3.9  feOutputProcessErrorEstimateV2
feOutputProcessE rrorEstimateV2
( nMethod, from_setID, from_vectorID, groupID )
Description:Allows you to compute an Error Estimate of a sing le output vector. This me thod replaces feOutputPro-
cessErrorEstimate. For more informat ion, see Section 2.4, "Working with Output in FEMAP 2020.1 and 
above".
Input:
INT4 nMethod0=Max Diff, 1=Diff to Avg, 2=%Max Diff, 3=%Diff to Avg, 
4=Norm% Max Diff, 5=Norm% Diff to Avg
INT4 from_setID The ID of the output set to process.INT4 from _vectorID The ID of th e output vector to process
INT4 groupIDThe ID of the group used to restrict output processing. If 0, all avail-
able output, on the fu ll model is processed.
Output:NoneReturn Code:FE_FAIL Could not process th e requested information.
Remarks/Usage:NoneExample:None
 API-584  feOutputFromLoad
3.8.3.10  feOutputFromLoad
feOutputFromLoad
( setID, loadType )
Description:Creates output from exis ting load information.
Input:
INT4 setIDThe ID of a set that contains a list  of node or elements IDs that will 
be checked for loads to create the output. Alternatively, if you spec-
ify 0, all nodes/elements will be checked.
INT4 loadTypeThe type of load to check to create output: Force=16, Displace-
ment=32, Velocity=2048, Acceleration=64, Nodal Tempera-ture=4096, Nodal HeatGen=2, Nodal Heat Flux=4, Elem Distributed 
Load=128, Pressure=256, Elem Temperature=8192, Elem Heat Gen 
512, Elem Heat Flux=1024, Elem Convection=16384, Elem Radia-tion=32768, Fluid Pressure=131072, Fluid Tracking=262144, Fluid Fan Curve=2097152.
Output:NoneReturn Code:FE_FAIL Could not compute output.Remarks/Usage:NoneExample:None
feOutputTransform   API-585
3.8.3.11  feOutputTransform
feOutputTransform
( REMOVED - CAN NO LONGER BE USED )
Description:*This method is obsolete and has been removed. It will not work in version 11.1 and above. 
Use feOutputTransform2 instead.
 API-586  feOutputTransform2V2
3.8.3.12  feOutputTransform2V2
feOutputTransform2V2
( setSET, vecSET, nodeSET, elemSET, nodalMode, nodalCSysID, nodalGlobalComp, 
plateMode, plateCSysID, plateDOF, plateVec, plateAngle, solidMode, solidCSysID, engr-
ShearStrain)
Description:Transforms existing output to another orientation. This function replaces feOu tputTransform, which is 
obsolete and should no longer be used. This method replaces feOutput Transform. For more information, 
see Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:
INT4 setSETID of set containing the IDs of output sets containing output vectors 
to transform. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single output set.
INT4 vecSETID of set containing the IDs of output vectors to transform. Alterna-
tively, if you specify a negative value,  this is simply the ID of the sin-
gle output vector.
INT4 nodeSETID of set containing the IDs of nodes to transform output. Alterna-
tively, if you specify a negative value,  this is simply the ID of the sin-
gle node.
INT4 elemSETID of set containing the IDs of elements to transform output. Alterna-
tively, if you specify a negative value,  this is simply the ID of the sin-
gle element.
enum nodalModeSets to transformation method for Nodal Output Vectors. This can 
only be set to FOD_NONE (no transformation of Nodal Output Vec-tors), FOD_VECTOR_TO_CSYS (Into CSys transformation 
method), or FOD_VECTOR_TO_NODE_OUTPUT_CSYS (Into 
Node Output CSys transformation method)
INT4 nodalCSysIDID of coordinate system used to transform nodal output vectors when 
nodalMode is set to FOD_VECTOR_TO_CSYS.
BOOL nodalGlobalCompWhen True, additional output vector s will be created representing the 
components used to generate the transformed output vector(s).
enum plateModeSets to transformation method for Plate Forces, Stresses and Strains. 
This can only be set to FOD_N ONE (no transformation of Plate 
Forces, Stresses and Strains), FOD_PLATE_TO_CSYS (Into CSys 
transformation method), FOD_PLATE_TO_MATL (Into Matl Direc-
tion transformation method), or FOD_PLATE_TO_VECTOR (Along Vector transformation method).
INT4 plateCSysIDID of coordinate system used to tr ansform plate force, stress, and/or 
strain vectors when plateMode is set to FOD_PLATE_TO_CSYS.
feOutputTransform2V2   API-587
INT4 plateDOFIndicates which axis of the co ordinate system specified in 
plateCSysID will be used for tr ansformation. 1=X axis, 2=Y axis, 
and 3=Z axis
REAL8 plateVec[0..2]The XYZ components of the vector to use for transformation when 
plateMode is set to FOD_PLATE_TO_VECTOR
REAL8 plateAngle Specifies value for Tolerance Angle
enum solidModeSets to transformation method for Solid Stresses and Strains. This 
can only be set to FOD_NONE (no transformation of Solid Stresses 
and Strains), FOD_SOLID_TO_CSYS (Into CSys transformation method), or FOD_SOLID_TO_MATL (Into Matl Direction transfor-
mation method).
INT4 solidCSysIDID of coordinate system used to tr ansform solid stress and/or strain 
vectors when solidMode is set to FOD_SOLID_TO_CSYS.
BOOL engrShearStrain When True, transformation assumes Engineering Shear Strain.Output:NoneReturn Code:FE_BAD_TYPE Variant does not contain real numbersFE_NOT_A V AILABLE Problem retrieving data from the variantFE_TOO_SMALL Not enough entries in arrayFE_INV ALID Invalid value for nodalMode, plateMode, plateDOF, or solidModeFE_NOT_EXIST Coordinate System does not exist
FE_FAIL Could not transform output.Remarks/Usage:The Output Orientation can be se t using the various Pref_Orient op tions. See Section 3.3.1.9, "File, 
Preferences - Geometry/Model tab" for a complete  list of available output orientation options.
For example, Pref_OrientQuad4ForceOutput sets the output orientation for Force Output on 4-noded 
quadrilateral elements. 
Example:NonefeOutputTransform2V2
( setSET, vecSET, nodeSET, elemSET, nodalMode, nodalCSysID, nodalGlobalComp, 
plateMode, plateCSysID, plateDOF, plateVec, plateAngle, solidMode, solidCSysID, engr-ShearStrain)
 API-588  feOutputCalculate
3.8.3.13  feOutputCalculate
feOutputCalculate
( outSET, ndelem, elemSET, title, IDvar, CASEvar, formula )
Description:Computes output values based on an equation that you provide.Input:
INT4 outSETThe ID of the set that contains th e output set IDs where the calcula-
tions will be performed.
INT4 ndelemSpecifies whether the calculation wi ll create nodal or elemental data. 
(7=Nodal, 8=Elemental)
INT4 elemSETThe ID of the set that contains the nodes or elements where the out-
put will be computed.
STRING title The title of the output vectors to be created
STRING IDvarThe name of the variable used as the Node/Element ID in the for-
mula that you specify.
STRING CASEvarThe name of the variable used as the Output Set ID in the formula 
that you specify.
STRING formulaThe equation used to calculate the r esults. This must be specified in 
standard FEMAP form, using the tw o variables defined in IDvar and 
CASEvar.
Output:NoneReturn Code:FE_FAIL Could not compute output.Remarks/Usage:NoneExample:None
feOutputConvertV92VectorIDV2   API-589
3.8.3.14  feOutputConvertV92VectorIDV2
feOutputConvertV92VectorIDV2
( oldVecID )
Description:Some Output Vector IDs changed between FEMAP v9.2 and v9.3. This method takes a v9.2 (and 
before) vector ID and returns the equivalent v9.3 vector ID. This method replaces feOutputCon-
vertV92VectorIDV2. For more inform ation see, Section 2.4, "Working with Output in FEMAP 2020.1 
and above".
Input:INT4 oldVecID The v9.2 (and before) vector ID that you want to convert.Output:NoneReturn Code:newVecID The v9.3 (and later) vector IDRemarks/Usage:NoneExample:None
 API-590  feOutputConvertV2019VectorIDToV2020V2
3.8.3.15  feOutputConvertV2019VectorIDToV2020V2
feOutputConvertV201 9VectorIDToV2020V2
( v2019VecID )
Description:Some Output Vector IDs changed between FEMAP version 2019.1 and 2020.1. This method takes a 
vector ID from versions prior to 2020.1and returns the equivalent vector ID in version 2020.1. For more 
information see, Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:INT4 v2019VecID The vector ID from versions prior to 2020.1 to be converted.Output:NoneReturn Code:
newVecID The version 2020.1 (and later) vector ID
Remarks/Usage:NoneExample:None
feOutputConvertV2020VectorIDToV2019V2   API-591
3.8.3.16  feOutputConvertV2020VectorIDToV2019V2
feOutputConvertV202 0VectorIDToV2019V2
( v2020VecID )
Description:Some Output Vector IDs changed between FEMAP version 2019.1 and 2020.1. This method takes a 
vector ID from versions 2020.1 an d later and returns the equivalent vector ID in version 2019.1 and 
prior. For more information see, Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:INT4 v2020VecID The vector ID from versions 2020.1 and later to be converted.Output:NoneReturn Code:
newVecID The version 2019.1 (and prior) vector ID
Remarks/Usage:NoneExample:None
 API-592  feOutputForceBalance
3.8.3.17  feOutputForceBalance
feOutputForceBalance
( outSETS, boundarynodeSET, boundaryelemSET, csysID, aroundXYZ, numSETS, resul-
tant  )
Description:This method is ob solete. For new applications, use freebod y objects and the CalculateSummation2 
method.
Returns the resulting force/moment information on a model interface define d by selected nodes/ele-
ments across selected output sets.
Input:
INT4 outSETSThe ID of a Set object that contai ns the output sets to process. Alter-
natively, if you specify a negative value, this is simply the ID of the 
single output set to use.
INT4 boundarynodeSETThe ID of a Set object that contai ns the nodes on the model interface 
where the force balance will be computed. Alternatively, if you spec-ify a negative value, this is si mply the ID of a single node. 
INT4 boundaryelemSETThe ID of a Set object that contai ns the elements on the model inter-
face where the force balance will be  computed. Alternatively, if you 
specify a negative value, this is si mply the ID of a single element. 
INT4 csysIDThe ID of the coordinate system  to use. The coordinates in 
“aroundXYZ” must be specified in this coordinate system, and all 
results are returned in this coordinate system
REAL8 aroundXYZ[0..2]The coordinates of the location where the resulting force/moment are 
computed
Output:INT4 numSETS The numbef of output set results contained in “resultant”
REAL8 resultant[0..6*num-
SETS-1]The resulting force/moment resultant  computed from the loads on the 
selected interface. For each output set selected in “outSETS”, there 
will be 6 consecutive entries in this  array [Fx1, Fy1, Fz1, Mx1, My1, 
Mz1, Fx2, Fy2, ...]. All values ar e relative to the coordinate system 
selected by csysID. 
Return Code:FE_NO_MEMORY Insufficient memory to compute and return all Resultants.
Remarks/Usage:***This method will NOT work w ith “attached” output. Please use feOutputForceBalance2 instead. 
Also, this method requires that a ll selected output sets contain Nast ran Grid Point Force Balance results.
Example:
feOutputForceBalance   API-593
NonefeOutputForceBalance
( outSETS, boundarynodeSET, boundaryelemSET, csysID, aroundXYZ, numSETS, resul-
tant  )
 API-594  feOutputForceBalance2
3.8.3.18  feOutputForceBalance2
feOutputForceBalance2
( freebodyID, outSetID, toDataTable, printSummation, printDetails )
Description:Outputs freebody data to the messag e window or the data table. To retrieve the calcu lated total summa-
tion load programmatically, see the CalculateSummation2() method of feFreebody.
Input:INT4 freebodyID Freebody IDINT4 outSetID Output Set ID 
BOOL toDataTableIf TRUE, output is sent to the data table; otherwise it is sent to the 
message window 
BOOL printSummationWhen TRUE, data related to the fre ebody summation is printed, oth-
erwise raw grid point force balance data for all nodes in the freebody 
will be output
BOOL printDetailsIf printSummation is TRUE, details regarding the force balance cal-
culations will be output; ignored  when printSummation is FALSE.
Output:NoneReturn Code:
FE_FAILFreebody summation has been calcul ated with potential errors (ie 
missing contributions of load, mi ssing elements, etc.) The values 
need to be verified
FE_NOT_EXIST Specified freebody or output set does not exist
FE_INV ALIDFreebody is not set to interface mo de (this error may occur if print-
Summation is TRUE)
FE_SECURITYData is to be output to  the data table, however it is locked or not visi-
ble
Remarks/Usage:
Example:
None
feOutputCompareV2   API-595
3.8.3.19  feOutputCompareV2
feOutputCompareV2
( bList, bFullCase, fromSET, toSETS, ifromVEC, itoVEC, dMaxDiff )
Description:This method is used to compare output from individual vectors or  entire output sets. This method 
replaces feOutputCompare. For more information, see  Section 2.4, "Working with Output in FEMAP 
2020.1 and above".
Input:BOOL bList Flag to list the output at individual nodes or elements which differ.BOOL bFullCase Flag to compare all vectors in the output case.INT4 fromSET The ID of a Output  Set you with to compare. 
INT4 toSETSThe ID of Femap Set object containing the output sets you with to 
compare to. Alternatively,  if you specify a negative value, this is sim-
ply the ID of a single output case. 
INT4 ifromVECIf not comparing the full output case then set ifromVEC to compare a 
specific output vector id in the fromSET.
INT4 itoVECIf not comparing the full output case then set itoVEC to compare a 
specific output vector id in the toSETS.
REAL8 dMaxDiffValue specifying the maximum value used to consider the output dif-
ferent.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-596  feCompute3DInvariants
3.8.3.20  feCompute3DInvariants
feCompute3DInvariants
( bStress, dTensor, dInvariant )
Description:This method is used to compute Stress or Strain In variant values for a 3D element using 6 Tensor Stress 
or Strain Values (Solid X Normal, Solid Y Normal , Solid Z Normal, Solid XY Shear, Solid YZ Shear, 
and Solid ZX Shear)
Input:
BOOL bStressFlag to indicate which invariant va lues to compute. True = Stress, 
False = Strain
REAL8 dTensor[0..5]Array of Stress or Strain Tensor values:
0 = Solid X Normal
1 = Solid Y Normal
2 = Solid Z Normal3 = Solid XY Shear4 = Solid YZ Shear
5 = Solid ZX Shear
Output:
V ARIANT dInvariantReturns Stress of Strain invariant values in a variant: 
0 = Solid Maximum Principal1 = Solid Intermediate Principal
2 = Solid Minimum Principal
3 = Solid Mean4 = Solid Max Shear
5 = Solid V on Mises
Return Code:FE_INV ALID Values in dTensor must be REAL8, not INT4.Remarks/Usage:NoneExample:None
feCompute2DInvariants   API-597
3.8.3.21  feCompute2DInvariants
feCompute2DInvariants
( bStress, dTensor, dInvariant )
Description:This method is used to compute Stress or Strain Invariant values for a 2D element using 3 Stress or 
Strain Tensor Values (Plate Top/Bottom X Normal , Plate Top/Bottom Y Normal, Plate Top/Bottom XY 
Shear).
Input:
BOOL bStressFlag to indicate which invariant va lues to compute. True = Stress, 
False = Strain
REAL8 dTensor[0..2]Array of Stress or Strain Tensor values:
0 = Plate Top/Bottom X Normal
1 = Plate Top/Bottom Y Normal
2 = Plate Top/Bottom XY Shear
Output:
V ARIANT dInvariantReturns Stress of Strain invariant values in a variant: 
0 = Plate Top/Bottom Major Principal1 = Plate Top/Bottom Minor Principal
2 = Plate Top/Bottom Mean Stress
3 = Plate Top/Bottom Max Shear4 = Plate Top/Bottom V on Mises
Return Code:FE_INV ALID Values in dTensor must be REAL8, not INT4.Remarks/Usage:NoneExample:
Sub Main
    Dim App As femap.model    Set App = feFemap()
    Dim Tensors(2) As Double
   Tensors(0) = 1447.109   Tensors(1) = 61.86481
   Tensors(2) = -123.9129
    Dim inVars As Variant    rc = App.feCompute2DInvariants (True, Tensors, inVars)
End Sub
 API-598  feResultsToDataTableV2
3.8.3.22  feResultsToDataTableV2
feResultsToDataTableV2
( bOverrideLock, nCSysID, bSetInColumns, bVecInColumns, bEntInColumns, bAlt-
ColumnOrder, nResultsSetSetID, nResultsVectorSetID, nEntitySetID )
Description:This function is used to list outp ut on selected nodes or elements, for selected Output Vectors, in 
selected Output Sets to the Data Ta ble. This method is obsolete and should no longer be used. It has 
been replaced with feResultsToDa taTable2. This method replaces feResultsToDataTable. For more 
information, see Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:
BOOL bOverrideLockFlag to unlock Data Table, if cu rrently locked. True will unlock, 
False will keep the Data Table lo cked and no data will be sent. 
Ignored if Data Table is currently unlocked.
INT4 nCSysIDID of coordinate system used to list Nodal Output. If set to -1, will 
use each node’s Nodal Output Coordinate System.
BOOL bSetInColumnsWhen True, Output Set information will be listed in Columns. When 
False, Output Set informa tion will be listed in Rows.
BOOL bVecInColumnsWhen True, Output Vector informa tion will be listed in Columns. 
When False, Output Vector info rmation will be listed in Rows.
BOOL bEntInColumnsWhen True, Node/Element informa tion will be listed in Columns. 
When False, Node/Element info rmation will be listed in Rows.
BOOL bAltColumnOrderWhen True, will list columns in a lternating order. When False, will 
list columns in standard order
INT4 nResultsSetSetIDSet ID of set containing IDs of Ou tput Sets to list to Data Table. 
Alternatively, if you specify a negative  value, this is simply the ID of 
a single Output Set to list to Data Table. 
INT4 nResultsVectorSetIDSet ID of set containing IDs of Outp ut Vectors to list to Data Table. 
Alternatively, if you specify a negative  value, this is simply the ID of 
a single output vector to list to Data Table. 
INT4 nEntitySetIDSet ID of set containing Node or Element IDs to list to Data Table 
Alternatively, if you specify a negative  value, this is simply the ID of 
a single node or elemen t to list to Data Table.
Output:NoneReturn Code:
FE_NOT_A V AILABLEData table is not open, or is lo cked and you did not specify bOver-
rideLock=TRUE
feResultsToDataTableV2   API-599
FE_NOT_EXISTThe coordinate system specified for nCSysID does not exist or the 
set object specified for nResultsSetSetID, nResultsVectorSetID, or 
nEntitySetID is empty.
FE_INV ALIDThe values for bSetInColumns, bVecInColumns, and bEntInCol-
umns are all the same. Only two of  these Booleans may be set to 
True or set to False at one time.
FE_BAD_DATAOnly Nodal or Elemental Output Vectors may be sent to the Data 
Table when using this function, not both.
Remarks/Usage:This function matches the functionality of the List, Output, Results to Data Table  command. It may be 
helpful to use the AddComponentOutputVectors  (Section 4.6.2.36, "AddComponentOutputVec-
torsV2"), AddSimilarOutputVector s (Section 4.6.2.37, "AddSimilarOutputVectorsV2"), and/or 
AddComplexOutputVectors Section 4.6.2.38, "Add ComplexOutputVectorsV2")  methods on the Set 
Object to select all desired output vectors.
Example:NonefeResultsToDataTableV2
( bOverrideLock, nCSysID, bSetInColumns, bVecInColumns, bEntInColumns, bAlt-
ColumnOrder, nResultsSetSetID, nResultsVectorSetID, nEntitySetID )
 API-600  feResultsToDataTable2V2
3.8.3.23  feResultsToDataTable2V2
feResultsToDataTable2V2
( bOverrideLock, nViewForTransform, bSetInColumns, bVecInColumns, bEntInCol-
umns, bAltColumnOrder, bSummaryTable nResultsSetSetID, nResultsVectorSetID, 
nEntitySetID, )
Description:This function is used to list output  on selected nodes or elements, from a selected view, for selected Out-
put Vectors, in selected Output Sets to the Data Table. This method repl aces feResultsToDataTable2. 
For more information, see Sec tion 2.4, "Working with Output in FEMAP 2020.1 and above"
Input:
BOOL bOverrideLockFlag to unlock Data Table, if cu rrently locked. True will unlock, 
False will keep the Data Table lo cked and no data will be sent. 
Ignored if Data Table is currently unlocked.
INT4 nViewForTransform ID of the view to list transformed data from.
BOOL bSetInColumnsWhen True, Output Set information will be listed in Columns. When 
False, Output Set informa tion will be listed in Rows.
BOOL bVecInColumnsWhen True, Output Vector informa tion will be listed in Columns. 
When False, Output Vector info rmation will be listed in Rows.
BOOL bEntInColumnsWhen True, Node/Element informa tion will be listed in Columns. 
When False, Node/Element info rmation will be listed in Rows.
BOOL bAltColumnOrderWhen True, will list columns in a lternating order. When False, will 
list columns in standard order
BOOL bSummaryTable When True, will list the summary table of  the data selected.
INT4 nResultsSetSetIDSet ID of set containing IDs of Ou tput Sets to list to Data Table. 
Alternatively, if you specify a negative  value, this is simply the ID of 
a single Output Set to list to Data Table. 
INT4 nResultsVectorSetIDSet ID of set containing IDs of Outp ut Vectors to list to Data Table. 
Alternatively, if you specify a negative  value, this is simply the ID of 
a single output vector to list to Data Table. 
INT4 nEntitySetIDSet ID of set containing Node or Element IDs to list to Data Table 
Alternatively, if you specify a negative  value, this is simply the ID of 
a single node or elemen t to list to Data Table.
Output:NoneReturn Code:
FE_NOT_A V AILABLEData table is not open, or is lo cked and you did not specify bOver-
rideLock=TRUE
feResultsToDataTable2V2   API-601
FE_NOT_EXISTThe view specified for nViewForTransform does not exist or the set 
object specified for nResultsSetS etID, nResultsVectorSetID, or nEn-
titySetID is empty.
FE_INV ALIDThe values for bSetInColumns, bVecInColumns, and bEntInCol-
umns are all the same. Only two of  these Booleans may be set to 
True or set to False at one time.
FE_BAD_DATAOnly Nodal or Elemental Output Vectors may be sent to the Data 
Table when using this function, not both.
Remarks/Usage:This function matches the functionality of the List, Output, Results to Data Table  command. It may be 
helpful to use the AddComponentOutputVectors  (Section 4.6.2.36, "AddComponentOutputVec-
torsV2"), AddSimilarOutputVector s (Section 4.6.2.37, "AddSimilarOutputVectorsV2"), and/or 
AddComplexOutputVectors Section 4.6.2.38, "Add ComplexOutputVectorsV2")  methods on the Set 
Object to select all desired output vectors.
Example:NonefeResultsToDataTable2V2
( bOverrideLock, nViewForTransform, bSetInColumns, bVecInColumns, bEntInCol-
umns, bAltColumnOrder, bSummaryTable nResultsSetSetID, nResultsVectorSetID, nEntitySetID, )
 API-602  feResultsRankingToDataTableV2
3.8.3.24  feResultsRankingToDataTableV2
feResultsRankingToDataTableV2
( bOverrideLock, nRankByEntity, nMethod, nApproach, nType, nNumberToRank, nEnti-
tySetID, nResultsSetSetID, nResultsVectorSetID )
Description:This function is used to send a list  of entities (nodes, elemen ts, elements referencing selected materials, 
or elements referencing selected properties) to the Data Table, ranked using selected output values in 
selected output sets. This method replaces feResults RankingToDataTable. For more information, see 
Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:
BOOL bOverrideLockFlag to unlock Data Table, if cu rrently locked. True will unlock, 
False will keep the Data Table lo cked and no data will be sent. 
Ignored if Data Table is currently unlocked.
INT4 nRankByEntityThe type of entity to Rank By . For entity information, see Section 
3.3.6, "Entity Types". Can be FT_NODE, FT_ELEM, FT_MATL, or FT_PROP.
INT4 nMethodRanking Method. 0=Sets for E ach Entity (FRKM_SETS), 1=Entities 
for Each Set (FRKM_ENTITY)
INT4 nApproachRanking Approach. 0=All Vectors Together (FRKA_ALL), 1=Each 
Vector Independently (FRKA_EACH)
INT4 nTypeRanking Type. 0=Max Value (FRKT_MAX), 1=Min Value (FRK-
T_MIN), 2=Max Absolute Value (FRKT_MAXABS)
INT4 nNumberToRank Number to Rank. Must be between 1 and 99,999,999
INT4 nEntitySetIDSet ID of set containing node IDs when nRankByEntity is set to 
FT_NODE or Set ID of set containing element IDs when nRank-
ByEntity is set to FT_ELEM, FT_PROP, or FT_MATL. Alterna-tively, if you specify a negative valu e, this is simply the ID of a 
single node or single element to rank. 
INT4 nResultsSetSetIDSet ID of set containing IDs of Outp ut Sets to consider. Alternatively, 
if you specify a negative value, this is simply the ID of a single Out-
put Set to consider. 
INT4 nResultsVectorSetIDSet ID of set containing IDs of Output Vectors used for ranking. 
Alternatively, if you specify a negative  value, this is simply the ID of 
a single output vector used for ranking.
Output:NoneReturn Code:
feResultsRankingToDataTableV2   API-603
FE_FAIL Unable to Rank
FE_NOT_A V AILABLEData table is not open, or is lo cked and you did not specify bOver-
rideLock=TRUE
FE_NOT_EXISTOne or more of nEntitySetID, nR esultsSetSetID, or nResultsVec-
torSetID are empty
FE_BAD_DATA nMethod, nApproach or nType have an invalid value
FE_BAD_TYPEnRankByEntity is not FT_ NODE, FT_ELEM, FT_MATL, nor 
FT_PROP
Remarks/Usage:This function matches th e functionality of the List, Output, Results Ranking to Data Table  command. It 
may be helpful to use the AddComponentOutputVe ctors (Section 4.6.2.36, "AddComponentOutputVec-
torsV2"), AddSimilarOutputVector s (Section 4.6.2.37, "AddSimilarOutputVectorsV2"), and/or 
AddComplexOutputVectors Section 4.6.2.38, "Add ComplexOutputVectorsV2")  methods on the Set 
Object to select all desired output vectors.
Example:NonefeResultsRankingToDataTableV2
( bOverrideLock, nRankByEntity, nMethod, nApproach, nType, nNumberToRank, nEnti-
tySetID, nResultsSetSetID, nResultsVectorSetID )
 API-604  feOutputGlobalPlyV2
3.8.3.25  feOutputGlobalPlyV2
feOutputGlobalPlyV2
( nSetSET, nVectorSET, nGlobalPlySET, bTop, bBottom, bGlobalPly )
Description:This method is used to create Top, Bottom, and/or Glob al Ply results in the select ed output vectors in the 
specified output set. This method replaces feOutput GlobalPly. For more inform ation, see Section 2.4, 
"Working with Output in FEMAP 2020.1 and above".
Input:
INT4 nSetSETThe ID of a Set object that contains  the Output Sets to process. Alter-
natively, if you specify a negative nu mber it is the ID of a single Out-
put Set to process. You can also sp ecify this value as zero to process 
all available Output Sets.
INT4 nVectorSETThe ID of a Set object that contai ns the Output Vectors to process. 
Alternatively, if you specify a negativ e number it is the ID of a single 
Output Vector to process. You can al so specify this value as zero to 
process all available Output Vector s. The IDs specified here should 
be the IDs of existing Laminate r esults. You should only specify the 
ID from one ply for each output type.
INT4 nGlobalPlySETThe ID of a Set object that cont ains the Global Plies to process. 
Alternatively, if you specify a negativ e number it is the ID of a single 
Global Ply to process. You can also specify this value as zero to pro-
cess all available Global Plies.
BOOL bTopIf True, results for the Top ply acro ss all laminates are computed and 
stored.
BOOL bBottomIf True, results for the Bottom ply across all laminates are computed 
and stored.
BOOL bGlobalPlyIf True, results for the selected Glob al Plys across all laminates are 
computed and stored.
Output:NoneReturn Code:FE_FAIL Unable to compute Global Ply results.Remarks/Usage:Performs the same operation as running th e Model, Output, Global Ply command
Example:None
feOutputGlobalPlyV2   API-605
 API-606  feElemCountOnProp
3.8.4  Model Information Methods
3.8.4.1  feElemCountOnProp
feElemCountOnProp
( nPropSetID, vPropID, vElemCount )
Description:Returns the element count for each  property in the specified set
Input:INT4 fromSET The ID of set containing any number of property IDs.Output:V ARIANT vPropID This Variant contains an array with the property IDs. 
V ARIANT vElemCountThis Variant contains an array with the element count for each prop-
erty ID.
Return Code:FE_FAIL No properties exist in the modelRemarks/Usage:NoneExample:None
   API-607
3.9  Meshing Methods
Meshing Methods include:
•Section 3.9.1, "Mesh Control"
•Section 3.9.2, "Meshing Geometry"
•Section 3.9.3, "Other Meshing"
•Section 3.9.4, "Meshing Utilities"
•Section 3.9.5, "Mesh Copy/Radial Co py/Scale/Rotate/Reflect commands"
 API-608  feMeshSizePoint
3.9.1  Mesh Control
3.9.1.1  feMeshSizePoint
feMeshSizePoint
( pointSET, meshSIZE )
Description:Sets mesh sizes on a selected set of points.Input:
INT4 pointSETThe ID of a set that contains a list  of point IDs that will have mesh 
sizes defined. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single point to use.
REAL8 meshSIZESet this to the mesh size that you want to define at the points. The 
size should be in model units. Sp ecify 0.0 to remove mesh sizes from 
the points.
Output:NoneReturn Code:FE_FAIL Could not define mesh sizes.Remarks/Usage:NoneExample:None
feMeshSizeCurve   API-609
3.9.1.2  feMeshSizeCurve
feMeshSizeCurve
( curveSET, numElem, meshSize, minLine, minClosed, minOther, spacing, biasMethod, 
bias, biasLoc, customSize )
Description:Sets mesh sizes on a selected set of curves.Input:
INT4 curveSETThe ID of a set that contains a list of curve IDs that will have mesh 
sizes defined. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single curve to use.
INT4 numElemThe number of elements to mesh al ong the selected curves. If 0, then 
meshSize, minLine, minClosed and minOther determine the number 
of elements. If -1, then the mesh  sizes are removed from the selected 
curves. 
REAL8 meshSIZEThe default mesh spacing used to compute the number of elements 
that will be meshed along the curve. Only used if numElem=0.
INT4 minLineThe minimum number of elements to  mesh along any curve that is a 
straight line. If you do not want to use this feature, simply set the 
value to 0 (or 1). Only  used if numElem=0.
INT4 minClosedThe minimum number of elements to  mesh along any curve that is 
closed - like a circle. If you do not wa nt to use this feature, simply set 
the value to 0 (or 1). Only used if numElem=0.
INT4 minOtherThe minimum number of elements to  mesh along any curve that is 
not a straight line, and is not clo sed - like arcs and splines. If you do 
not want to use this feature, simp ly set the value to 0 (or 1). Only 
used if numElem=0.
INT4 spacingIf 0, then parametric sp acing is used; otherwise ,constant length spac-
ing is used.
INT4 biasMethod 0=Equal length spacing, 1=Linear Bias, 2=Geometric Bias.
REAL8 biasThe bias value - greater than or equa l to 1.0. A value of 1.0 is not 
biased. A value of 2.0 means that the largest element is approxi-mately 2.0 times the le ngth of the smallest.
INT4 biasLoc0=Small elements at start of curve, 1=Small elements at end of 
curve, 2=Small elements at center of curve, 3=Small elements at 
both ends of curve.
BOOL customSizeFor constant length spacing, mesh  sizes will be saved as a custom 
mesh size if this is True. No t used for parametric spacing.
 API-610  feMeshSizeCurve
Output:
NoneReturn Code:FE_FAIL Could not define mesh sizes.Remarks/Usage:NoneExample:NonefeMeshSizeCurve
( curveSET, numElem, meshSize, minLine, minClosed, minOther, spacing, biasMethod, 
bias, biasLoc, customSize )
feMeshSizeCurve2   API-611
3.9.1.3  feMeshSizeCurve2
feMeshSizeCurve2
( curveSET, numElem, meshSize, minLine, minClosed, minOther, spacing, biasMethod, 
bias, biasLoc, customSize,  bPropogateMeshSize)
Description:Sets mesh sizes on a selected set of curves.Input:
INT4 curveSETThe ID of a set that contains a list of curve IDs that will have mesh 
sizes defined. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single curve to use.
INT4 numElemThe number of elements to mesh al ong the selected curves. If 0, then 
meshSize, minLine, minClosed and minOther determine the number 
of elements. If -1, then the mesh  sizes are removed from the selected 
curves. 
REAL8 meshSIZEThe default mesh spacing used to compute the number of elements 
that will be meshed along the curve. Only used if numElem=0.
INT4 minLineThe minimum number of elements to  mesh along any curve that is a 
straight line. If you do not want to use this feature, simply set the 
value to 0 (or 1). Only  used if numElem=0.
INT4 minClosedThe minimum number of elements to  mesh along any curve that is 
closed - like a circle. If you do not wa nt to use this feature, simply set 
the value to 0 (or 1). Only used if numElem=0.
INT4 minOtherThe minimum number of elements to  mesh along any curve that is 
not a straight line, and is not clo sed - like arcs and splines. If you do 
not want to use this feature, simp ly set the value to 0 (or 1). Only 
used if numElem=0.
INT4 spacingIf 0, then parametric sp acing is used; otherwise ,constant length spac-
ing is used.
INT4 biasMethod 0=Equal length spacing, 1=Linear Bias, 2=Geometric Bias.
REAL8 biasThe bias value - greater than or equa l to 1.0. A value of 1.0 is not 
biased. A value of 2.0 means that the largest element is approxi-mately 2.0 times the le ngth of the smallest.
INT4 biasLoc0=Small elements at start of curve, 1=Small elements at end of 
curve, 2=Small elements at center of curve, 3=Small elements at 
both ends of curve.
BOOL customSizeFor constant length spacing, mesh  sizes will be saved as a custom 
mesh size if this is True. No t used for parametric spacing.
 API-612  feMeshSizeCurve2
BOOL bPropagateMeshSize If True, mesh si zing will be automatically propagated.
Output:NoneReturn Code:FE_FAIL Could not define mesh sizes.Remarks/Usage:NoneExample:NonefeMeshSizeCurve2
( curveSET, numElem, meshSize, minLine, minClosed, minOther, spacing, biasMethod, 
bias, biasLoc, customSize,  bPropogateMeshSize)
feMeshSizeCurveMatchNodes   API-613
3.9.1.4  feMeshSizeCurveMatchNodes
feMeshSizeCurveMatchNodes
( curveSetID, nodeSetID, dTolerance )
Description:Sets custom mesh size locations on a selected set of cu rves using the locations of a selected set of nodes.
Input:
INT4 curveSetIDThe ID of a set that contains a list of curve IDs that will have mesh 
sizes defined. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single curve to use.
INT4 nodeSetIDThe ID of a set that contains a list of node IDs. The location of each 
node in the set will be projected b ased on the Tolerance then used to 
specify custom mesh size  locations on the sele cted curve(s). Alterna-
tively, if you specify a negative value,  this is simply the ID of a sin-
gle node to use.
REAL8 dToleranceAllows specification of a maximum distance to project the locations 
of the selected nodes onto the select ed curves. If set to 0.0, which is 
the default, then the no dal locations of all selected nodes will be pro-
jected onto all of the selected curves.
Output:NoneReturn Code:FE_FAIL Could not define mesh sizes.Remarks/Usage:NoneExample:None
 API-614  feMeshSizeCurveMatchXYZ
3.9.1.5  feMeshSizeCurveMatchXYZ
feMeshSizeCurveMatchXYZ
( curveSetID, nNumXYZ, vXYZ)
Description:Sets custom mesh size locations on a selected  set of curves using specified XYZ locations.
Input:
INT4 curveSetIDThe ID of a set that contains a lis t of curve IDs that will have mesh 
sizes defined. Alternatively, if you specify a negative value, this is 
simply the ID of the single curve to use.
INT4 nNumXYZThe number of sets of XYZ coor dinates to be used for custom 
mesh sizing locations (i.e. the nu mber of entries in the arrays)
REAL8 xyz[0..(3*nNumXYZ)-1]The coordinates of each specifie d location, which are projected a 
maximum distance based on the To lerance, to use for custom 
mesh sizing locations on the selected curves. There are 3 entries, 
X, Y , Z for each location.
REAL8 dToleranceAllows specification of a maximum distance to project the speci-
fied locations onto the selected cu rves. If set to 0.0, which is the 
default, then all of the specified locations will be projected onto all 
of the selected curves.
Output:NoneReturn Code:FE_FAIL Could not define mesh sizes.Remarks/Usage:NoneExample:None
feMeshSizePropogate   API-615
3.9.1.6  feMeshSizePropogate
feMeshSizePropogate
( CurvesWithSizesToPropagateSET )
Description:
Input:
INT4 CurvesWithSizesTo-
PropagateSETThe ID of a set that contains a list of curve IDs with mesh sizes on 
them to then propagate to the rest of the mesh, such as connected 
mapped meshes.
Output:NoneReturn Code:
FE_FAIL Could not propagate mesh size.
Remarks/Usage:NoneExample:None
 API-616  feMeshSizeSurface
3.9.1.7  feMeshSizeSurface
feMeshSizeSurface
( surfaceSET, replaceAll, meshSize, minEdge, maxAngle, maxOnSmall, smallSize, ver-
texAspect, mappedRefinement, growthFactor, refineRatio, refineSurf )
Description:Sets mesh sizes on a selected set of surfaces.Input:
INT4 surfaceSETThe ID of a set that contains a list of surface IDs that will have mesh 
sizes defined. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single surface to use.
BOOL replaceAllIf True, then mesh sizes will be replaced on all curves of all selected 
surfaces. If False, then only curv es with no sizes defined will be 
sized.
REAL8 meshSIZEThe default mesh spacing used to compute the number of elements 
that will be meshed along each curve. If you set the meshSIZE=0.0, then all of the other option settings  except replaceAll are ignored. 
FEMAP automatically determines th e default values, including the 
default mesh size. If yo u set meshSIZE to a negative value, then 
FEMAP uses the absolute value of that number as a scale factor on 
the default mesh size it calculates. For example meshSIZE=-0.5 
means elements that are half the size of the default, meshSIZE=-2.0 
means elements that are twice as big as the default.
INT4 minEdgeThe minimum number of elements to mesh along any edge. Set to 0 
if you do not want to specify a minimum.
REAL8 maxAngleThe maximum angle tolerance betwee n the geometry tangent vector 
and the vector connecting consec utive mesh loca tions along the 
curves. Additional mesh  locations are added along the curves to 
make sure this criterion is satisfied . Set to 0.0 if you do not want to 
use this type of mesh spacing adjustment.
INT4 maxOnSmallThe maximum number of elements on  any feature that is identified 
as small (depends on smallSize). Set to  0 if you do not want to adjust 
mesh sizes on small features.
REAL8 smallSizeThe maximum size of a “small” feature. Set to 0.0 if you do not want 
to adjust mesh sizes on small features.
REAL8 vertexAspectUsed to adjust the mesh sizes at ve rtices that connect both short and 
long edges. Set to 0.0 if you do not want to do vertex aspect ratio adjustments. If used, mesh sizes at vertices are adjusted so that the 
ratio of the length of the longest el ement to the shortest element at a 
vertex is within the specified limit.
feMeshSizeSurface   API-617
BOOL mappedRefinementIf True, additional modifications are done to the mesh sizes on a sur-
face that favor mapped meshing. This does not guarantee that 
mapped meshing sizes will be crea ted. If you must have a mapped 
mesh, you need to set that appro ach on the surface before you size.
REAL8 growthFactorThe factor that is multiplied by the average curve element size to 
adjust the mesh size on the interior of a surface. Set to 0.0 to skip set-
ting interior growth factors.
REAL8 refineRatioThe curvature-based mesh refineme nt ratio. Adjusts the mesh sizes 
along curves in areas of high curvat ure. Set to 0.0 to skip curvature-
based sizing.
BOOL refineSurfSet to True to also consider curvature requirements when sizing the 
interior of the mesh. You must spec ify a nonzero refineRatio, or this 
option will be ignored.
Output:NoneReturn Code:FE_FAIL Could not define mesh sizes.Remarks/Usage:NoneExample:NonefeMeshSizeSurface
( surfaceSET, replaceAll, meshSize, minEdge, maxAngle, maxOnSmall, smallSize, ver-
texAspect, mappedRefinement, growthFactor, refineRatio, refineSurf )
 API-618  feMeshSizeSolid
3.9.1.8  feMeshSizeSolid
feMeshSizeSolid
( solidSET, replaceAll, meshSize, minEdge, maxAngle, maxOnSmall, smallSize, vertex-
Aspect, mappedRefinement, growthFactor, refineRatio, refineSurf, matchAdjacent, hex-
Mesh, adjustColor, removeSlaving )
Description:Sets mesh sizes on a selected set of solids.Input:
INT4 solidSETThe ID of a set that contains a list  of solid IDs that will have mesh 
sizes defined. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single solid to use.
BOOL replaceAllIf True, then mesh sizes will be replaced on all curves of all selected 
solids. If False, then only curves w ith no sizes defined will be sized.
REAL8 meshSIZEThe default mesh spacing used to compute the number of elements 
that will be meshed along each curve. If you set the meshSIZE=0.0 (or negative), then all of the othe r option settings except replaceAll, 
matchAdjacent, hexMesh, adjustColor and removeSlaving are 
ignored. FEMAP automatically determines the default values, 
including the default mesh size. If you set meshSIZE to a negative 
value, then FEMAP uses the absolute value of that number as a scale 
factor on the default mesh size it calculates. For example mesh-
SIZE=-0.5 means elements that are half the size of the default, mesh-SIZE=-2.0 means elements that are twice as big as the default.
INT4 minEdgeThe minimum number of elements to mesh along any edge. Set to 0 
if you do not want to specify a minimum.
REAL8 maxAngleThe maximum angle tolerance betwee n the geometry tangent vector 
and the vector connecting consec utive mesh loca tions along the 
curves. Additional mesh  locations are added along the curves to 
make sure this criterion is satisfied . Set to 0.0 if you do not want to 
use this type of mesh spacing adjustment.
INT4 maxOnSmallThe maximum number of elements on  any feature that is identified 
as small (depends on smallSize). Set to  0 if you do not want to adjust 
mesh sizes on small features.
REAL8 smallSizeThe maximum size of a “small” feature. Set to 0.0 if you do not want 
to adjust mesh sizes on small features.
REAL8 vertexAspectUsed to adjust the mesh sizes at ve rtices that connect both short and 
long edges. Set to 0.0 if you do not want to do vertex aspect ratio 
adjustments. If used, mesh sizes at vertices are adjusted so that the 
ratio of the length of the longest el ement to the shortest element at a 
vertex is within the specified limit.
feMeshSizeSolid   API-619
BOOL mappedRefinementIf True, additional modifications are done to the mesh sizes on a sur-
face that favor mapped meshing. This does not guarantee that 
mapped meshing sizes will be crea ted. If you must have a mapped 
mesh, you need to set that appro ach on the surface before you size.
REAL8 growthFactorThe factor that is multiplied by the average curve element size to 
adjust the mesh size on the interior of a surface. Set to 0.0 to skip set-
ting interior growth factors.
REAL8 refineRatioThe curvature-based mesh refineme nt ratio. Adjusts the mesh sizes 
along curves in areas of high curvat ure. Set to 0.0 to skip curvature-
based sizing.
BOOL refineSurfSet to True to also consider curvature requirements when sizing the 
interior of the mesh. You must spec ify a nonzero refineRatio or this 
option will be ignored.
BOOL matchAdjacentSet to True to automatically fi nd adjacent surfaces between multiple 
solids that you are sizing. The ma tched surfaces will automatically 
have a “Linked” approach defined.
BOOL hexMeshSet to True if you want to size fo r hex meshing. Set to False to size 
for tetrahedral meshing.
BOOL adjustColorSet to True if you want to change the surface colors to indicate the 
status and success of the mesh sizi ng. This is espe cially important 
when sizing for hex meshing.
BOOL removeSlavingSet to True to remove any previous “Linked” approaches on the sur-
faces of the solids that you are sizing.
Output:NoneReturn Code:FE_FAIL Could not define mesh sizes.Remarks/Usage:NoneExample:NonefeMeshSizeSolid
( solidSET, replaceAll, meshSize, minEdge, maxAngle, maxOnSmall, smallSize, vertex-
Aspect, mappedRefinement, growthFactor, refineRatio, refineSurf, matchAdjacent, hex-Mesh, adjustColor, removeSlaving )
 API-620  feMeshAttrPoint
3.9.1.9  feMeshAttrPoint
feMeshAttrPoint
( pointSET, propID )
Description:Sets mesh attributes on a selected set of points.Input:
INT4 pointSETThe ID of a set that contains a list  of point IDs that will have mesh 
attributes defined. Alternatively, if you specify a negative value, this 
is simply the ID of the single point to use.
INT4 propIDSpecifies the ID of the property to  use as a meshing attribute at the 
selected points. Set propID=0 to re move meshing attributes from the 
points. If nonzero, this must be th e ID of a property of an element 
type that is compatib le with point meshing - a mass element, for 
example.
Output:NoneReturn Code:FE_FAIL Could not define mesh attribute.Remarks/Usage:NoneExample:None
feMeshAttrCurve   API-621
3.9.1.10  feMeshAttrCurve
feMeshAttrCurve
(curveSET, propID, Orient, Offset1, Offset2, OrientType, OffsetType, Release1, 
Release2)
Description:Sets mesh attributes on a selected set of curves.Input:
INT4 curveSETThe ID of a set contains a list of curve IDs that will have mesh attri-
butes defined. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single curve to use.
INT4 propIDSpecifies the ID of the property to  use as a meshing attribute at the 
selected curves. Set propID=0 to re move meshing attributes from the 
curves. If nonzero, this must be th e ID of a property of an element 
type that is compatib le with curve meshing - a beam element, for 
example.
REAL8 Orient[0..2]The orientation vector meshing attrib ute. Either a location or vector 
(based on offset type), specified in global rectangular coordinates.
REAL8 Offset1[0..2]
REAL8 Offset2[0..2]The meshing attribute defining the of fset to be applied to elements. 
Offset1[0..2] is at the beginning of the curve, Offset2[0..2] is at the 
end. Specified in global rectangular coordinates. If doing radial off-sets, Offset1[0..2] contains the radi al origin; Offset2[0] contains the 
radial offset distance.
INT4 OrientTypeType of orientation for property attribute: 0=Orient By Vector, 
1=Orient By Location, 2=Orient  By Vector, Reversed Element 
Direction, 3=Orient By Location, Reversed Element Direction.
INT4 OffsetTypeType of offset for property attribute: 0=Offset by Vector, 1=Offset 
Radial, 2=Offset by Location.
INT4 Release1[0..5]
INT4 Release2[0..5]The release flags for the start and end of the curve. Nonzero if the 
associated degree of freedom is released. Release1[0..5] is at the beginning of the curve; Release2[0..5] is at the end.
Output:NoneReturn Code:FE_FAIL Could not define mesh attribute.Remarks/Usage:
 API-622  feMeshAttrCurve
Only element/property types with the appropriate orient/offset/release options available can have those 
options defined using this method. For example, you cannot add offsets to rod elements, because they 
are not available.
Example:NonefeMeshAttrCurve
(curveSET, propID, Orient, Offset1, Offset2, OrientType, OffsetType, Release1, 
Release2)
feMeshAttrSurface   API-623
3.9.1.11  feMeshAttrSurface
feMeshAttrSurface
( surfaceSET, propID, offset )
Description:Sets mesh attributes on a selected set of surfaces.Input:
INT4 surfaceSETThe ID of a set that contains a list of surface IDs that will have mesh 
attributes defined. Alternatively, if you specify a negative value, this 
is simply the ID of the single surface to use.
INT4 propIDSpecifies the ID of the property to  use as a meshing attribute at the 
selected surfaces. Set propID=0 to remove meshing attributes from the surfaces. If nonzero, this must be the ID of a property of an ele-
ment type that is compatible with  surface meshing - a planar element, 
for example.
REAL8 offsetThe offset to be applied to elem ents meshed on this surface. Nor-
mally this is specified as 0 - the el ements are meshed directly on the 
surface. Offsets can only be applied to certain planar elements such 
as plates.
Output:NoneReturn Code:FE_FAIL Could not define mesh attribute.Remarks/Usage:NoneExample:None
 API-624  feMeshAttrSolid
3.9.1.12  feMeshAttrSolid
feMeshAttrSolid
( solidSET, propID )
Description:Sets mesh attributes on a selected set of solids or volumes.Input:
INT4 solidSETThe ID of a set that contains a list  of solid (or volume) IDs that will 
have mesh attributes defined. Alte rnatively, if you specify a negative 
value, this is simply the ID  of the single solid to use.
INT4 propIDSpecifies the ID of the property to  use as a meshing attribute in the 
selected solids or volumes. Set pr opID=0 to remove meshing attri-
butes from the solids. If nonzero, this must be the ID of a property of 
an element type that is compatible  with solid meshing - a solid ele-
ment, for example.
Output:NoneReturn Code:FE_FAIL Could not define mesh attribute.Remarks/Usage:NoneExample:None
feMeshApproachSurface   API-625
3.9.1.13  feMeshApproachSurface
feMeshApproachSurface
( surfaceSET, approach, approachData )
Description:Sets the meshing approach on a selected set of surfaces.Input:
INT4 surfaceSETThe ID of a set that contains a list of surface IDs that will have mesh 
approaches defined. Alternatively,  if you specify a negative value, 
this is simply the ID of the single surface to use.
INT4 approachThe meshing approach for the su rface: 0=Not Specified, 1=Free-
Parametric, 2=Free-Planar, 3= Mapped-Four Corner, 4=Mapped-
Three Corner, 5=Mapped-Three Corner Fan,  6=Link to Surface,  
7=Fast Tri-Parametric, 8=Fast Tri-Planar.
INT4 approachData[0..3]The data for various approaches. For the mapped approaches, these 
are the point IDs defining the “co rners” of the mapped mesh. For the 
Link to Surface approach, approach Data[0] is the ID of the surface 
that this surface is linked to.
Output:NoneReturn Code:FE_FAIL Could not define mesh approach.Remarks/Usage:NoneExample:None
 API-626  feMeshPoint
3.9.2  Meshing Geometry
3.9.2.1  feMeshPoint
feMeshPoint
( pointSET, meshElem, propID )
Description:Meshes a selected set of points. This method is obso lete an should no longer be used. It has been 
replaced with feMeshPoint2.
Input:
INT4 pointSETThe ID of a set that contains a list  of point IDs that will be meshed. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single point to mesh.
BOOL meshElemIf True, then nodes and elements will be generated on the selected 
points. If False, only nodes will be generated.
INT4 propIDSpecifies the ID of the property to  use for elements as they are cre-
ated. If you want to use meshing attributes, set propID=0. In this 
case, all selected points must have meshing attributes defined or they 
will not be meshed. The propID prop erty must be compatible with 
point meshing.
Output:NoneReturn Code:FE_FAIL Could not mesh points.Remarks/Usage:NoneExample:
feMeshPoint   API-627
The following example meshes each point in a model with a mass element. The total mass added to all 
points is 25 pounds.
Sub Main 
Dim App As femap.model 
Set App = feFemap()

Dim rc As Long
 Dim pr as femap.Prop Set pr = App.feProp

Dim pt As femap.Set 
Set pt = App.feSet() 

pt.AddAll (3)   'Pick all points 
pr.Type = 27     ' Mass Type 
pr.Title = "25 Lb. Mass" 
pr.pval(7) = 25 / pt.Count()   'Total=25 pound/Number of Points 
pr.Put (pr.NextEmptyID)         ' Create new property 
rc = App.feMeshPoint(pt.ID, True, pr.ID)  'Mesh the points 

App.feViewRegenerate(0)
End Sub feMeshPoint
( pointSET, meshElem, propID )
 API-628  feMeshPoint2
3.9.2.2  feMeshPoint2
feMeshPoint2
( pointSET, meshElem, propID, merge_nodes )
Description:Meshes a selected set of points.Input:
INT4 pointSETThe ID of a set that contains a list  of point IDs that will be meshed. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single point to mesh.
BOOL meshElemIf True, then nodes and elements will be generated on the selected 
points. If False, only nodes will be generated.
INT4 propIDSpecifies the ID of the property to  use for elements as they are cre-
ated. If you want to use meshing attributes, set propID=0. In this 
case, all selected points must have meshing attributes defined or they 
will not be meshed. The propID prop erty must be compatible with 
point meshing.
BOOL merge_nodes If True, coincident  nodes on point will be merged.
Output:NoneReturn Code:FE_FAIL Could not mesh points.Remarks/Usage:NoneExample:
feMeshPoint2   API-629
The following example meshes each point in a model with a mass element. The total mass added to all 
points is 25 pounds.
Sub Main 
Dim App As femap.model 
Set App = feFemap()

Dim rc As Long
 Dim pr as femap.Prop Set pr = App.feProp

Dim pt As femap.Set 
Set pt = App.feSet() 

pt.AddAll (3)   'Pick all points 
pr.Type = 27     ' Mass Type 
pr.Title = "25 Lb. Mass" 
pr.pval(7) = 25 / pt.Count()   'Total=25 pound/Number of Points 
pr.Put (pr.NextEmptyID)         ' Create new property 
rc = App.feMeshPoint(pt.ID, True, pr.ID, TRUE)  'Mesh the points 

App.feViewRegenerate(0)
End Sub feMeshPoint2
( pointSET, meshElem, propID, merge_nodes )
 API-630  feMeshCurve
3.9.2.3  feMeshCurve
feMeshCurve
( curveSET, meshElem, propID, orient )
Description:Meshes a selected set of curves. This method is ob solete and should no longer  be used. It has been 
replaced by feMeshCurve2.
Input:
INT4 curveSETThe ID of a set that contains a list of curve IDs that will be meshed. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single curve to mesh.
BOOL meshElemIf True, then nodes and elements will be generated on the selected 
curves. If False, only no des will be generated.
INT4 propIDSpecifies the ID of the property to  use for elements as they are cre-
ated. If you want to use meshing attributes, set propID=0. In this 
case, all selected curves must have meshing attributes defined or they 
will not be meshed. The propID prop erty must be compatible with 
curve meshing. Set propID=-1 to au tomatically mesh with plot-only 
elements, which do not requir e other property information.
REAL8 orient[0..2]The components of the element orientation vector, in global rectan-
gular coordinates. This is only used for those element types that 
require orientation - like bars and beams.
Output:NoneReturn Code:FE_FAIL Could not mesh curves.Remarks/Usage:NoneExample:
feMeshCurve   API-631
The following example meshes each curve in a model with bar elements. It establishes a mesh size of 
0.1 along each curve, creates a property, and meshes the curves.
Sub Main 
Dim App As femap.model 
Set App = feFemap()

Dim rc As Long

Dim pr As femap.Prop 
Set pr = App.feProp()

Dim pt As femap.Set 
Set pt = App.feSet()

Dim orient(2) As Double 
Dim vOrient As Variant 

orient(0) = 1 
orient(1) = 1 
orient(2) = 0.5 
vOrient = orient 
 
pt.AddAll (4) 
pr.Type = 2 
pr.Title = "Bar" 
pr.pval(0) = 0.125 
pr.pval(1) = 10.3 
pr.pval(2) = 0.5 
pr.Put (pr.NextEmptyID) 

rc = App.feMeshSizeCurve(pt.ID,0,0.1,0,0,0,0,0,1#,0,False) 
rc = App.feMeshCurve(pt.ID, True, pr.ID, vOrient) 

App.feViewRegenerate(0)
End Sub 
    feMeshCurve
( curveSET, meshElem, propID, orient )
 API-632  feMeshCurve2
3.9.2.4  feMeshCurve2
feMeshCurve2
( curveSET, meshElem, propID, merge_nodes, offsetToRefPt, orient )
Description:Meshes a selected set of curves.Input:
INT4 curveSETThe ID of a set that contains a list of curve IDs that will be meshed. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single curve to mesh.
BOOL meshElemIf True, then nodes and elements will be generated on the selected 
curves. If False, only no des will be generated.
INT4 propIDSpecifies the ID of the property to  use for elements as they are cre-
ated. If you want to use meshing attributes, set propID=0. In this 
case, all selected curves must have meshing attributes defined or they 
will not be meshed. The propID prop erty must be compatible with 
curve meshing. Set propID=-1 to au tomatically mesh with plot-only 
elements, which do not requir e other property information.
BOOL merge_nodes If True, coincident nodes on curve will be merged.BOOL offsetToRefPt If True, elements are of fset to beam property reference point.
REAL8 orient[0..2]The components of the element orientation vector, in global rectan-
gular coordinates. This is only used for those element types that 
require orientation - like bars and beams.
Output:NoneReturn Code:FE_FAIL Could not mesh curves.Remarks/Usage:NoneExample:
feMeshCurve2   API-633
The following example meshes each curve in a model with bar elements. It establishes a mesh size of 
0.1 along each curve, creates a property, and meshes the curves.
Sub Main 
Dim App As femap.model 
Set App = feFemap()

Dim rc As Long

Dim pr As femap.Prop 
Set pr = App.feProp()

Dim pt As femap.Set 
Set pt = App.feSet()

Dim orient(2) As Double 
Dim vOrient As Variant 

orient(0) = 1 
orient(1) = 1 
orient(2) = 0.5 
vOrient = orient 
 
pt.AddAll (4) 
pr.Type = 2 
pr.Title = "Bar" 
pr.pval(0) = 0.125 
pr.pval(1) = 10.3 
pr.pval(2) = 0.5 
pr.Put (pr.NextEmptyID) 

rc = App.feMeshSizeCurve(pt.ID,0,0.1,0,0,0,0,0,1#,0,False) 
rc = App.feMeshCurve(pt.ID, True, pr.ID, TRUE, TRUE, vOrient) 

App.feViewRegenerate(0)
End Sub 
    feMeshCurve2
( curveSET, meshElem, propID, merge_nodes, offsetToRefPt, orient )
 API-634  feMeshSurface2
3.9.2.5  feMeshSurface2
feMeshSurface2
( surfaceSET, propID, elemShape, bAllowMapped, beDefaults )
Description:Meshes a selected set of surfaces.  This function replaces feMeshSurface( )
Input:
INT4 surfaceSETThe ID of a set that contains a list of surface IDs that will be meshed. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single surface to mesh.
INT4 propIDSpecifies the ID of the property to  use for elements as they are cre-
ated. If you want to use predefined  meshing attributes, set propID=0. 
In this case, all selected surfaces must have meshing attributes 
defined or they will no t be meshed. The propID property must be 
compatible with surface meshing. 
INT4 elemShapeThe shape of the elements to mesh. Must be 2=Tria3, 3=Tria6, 
4=Quad4, 5=Quad8  or set to 0 to u se the shape that is predefined on 
the meshing attributes.
BOOL bAllowMappedIf True, mapped meshing of the surfaces is allowed, otherwise it is 
not. This argument is ignored if elemShape=0
BOOL bResetDefaultsIf True, all meshing attributes are re set to their defaults prior to 
applying the propID, elemShap e and bAllowMapped settings. Nor-
mally this argument should be Fa lse to use the existing attributes.
Output:NoneReturn Code:FE_FAIL Could not mesh surfaces.FE_INV ALID The value specified for elemShape is invalidFE_NOT_EXIST The property specified does not exist.Remarks/Usage:NoneExample:
feMeshSurface2   API-635
The following example meshes each surface on Solid 1 in a model. It requires the mesh size to be 
already established, but it creates a plate property  with a 0.1 thickness and meshes the surfaces with 
quads. 
Sub Main 
Const FGD_Surface_onSolid = 78 

Dim App As femap.model 
Set App = feFemap()

Dim rc As Long 
Dim pr As femap.Prop 
Set pr = App.feProp()

Dim pt As femap.Set 
Set pt = App.feSet() 

rc = pt.AddRule(1, FGD_Surface_onSolid) 
pr.Type = 17 
pr.Title = "0.1 Plate" 
pr.pval(0) = 0.1 
pr.Put (pr.NextEmptyID) 

rc=App.feMeshSurface2(pt.ID,pr.ID,FTO_QUAD4,True,False) 
App.feViewRegenerate(0)
End Sub feMeshSurface2
( surfaceSET, propID, elemShape, bAllowMapped, beDefaults )
 API-636  feMeshSurface
3.9.2.6  feMeshSurface - obsolete
feMeshSurface
( surfaceSET, propID, minBetween, maxAspect, maxQuickNodes, meshApproach,   
quadAngle, midsideGeom, midsideAngle, smoothLaplacian, smoothIter, smoothTol )
Description:Meshes a selected set of surfaces.Input:
INT4 surfaceSETThe ID of a set that contains a list of surface IDs that will be meshed. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single surface to mesh.
INT4 propIDSpecifies the ID of the property to  use for elements as they are cre-
ated. If you want to use meshing attributes, set propID=0. In this 
case, all selected surfaces must have meshing attributes defined or 
they will not be meshed. The propID  property must be compatible 
with surface meshing. Set propID =-1 to automatically mesh with 
plot-only elements, which do not require other property information.
INT4 minBetweenThe minimum number of elements between boundaries during mesh 
generation. Not used for fast-tri mesher.
REAL8 maxAspectThe maximum allowable element aspe ct ratio. Not used for fast-tri 
mesher.
INT4 maxQuickNodesBoundaries/surfaces with more th an this number of nodes on the 
boundary are “quick-cut”. No t used for fast-tri mesher.
INT4 meshApproachThe mesher to use when meshing the surfaces. (0=Triangle, 1=Quad, 
2=Fast-Triangle).
REAL8 quadAngleThe maximum angular deviation from 90 degrees allowed in a quad 
before it is split into triangles.  Only applies to quad mesher.
BOOL midsideGeomIf True and you are meshing with parabolic elements, midside nodes 
will be projected toward the geometry.
REAL8 midsideAngleThe maximum angle formed by the edge of the element as the 
midside nodes are projected onto the geometry. If midsideAngle=0.0 
and midsideGeom=True, then midside nodes will be projected com-pletely onto the geometry regardless of the distortion introduced in 
the elements.
BOOL smoothLaplacianIf True, Laplacian smoothing is performed. If False, centroidal 
smoothing is used.
INT4 smoothIterThe number of smoothing iterations to perform. Set to 0 to skip 
smoothing.
feMeshSurface   API-637
INT4 smoothTolThe smoothing toleranc e. Smoothing will stop if node movement 
during a smoothing pass fa lls below this tolerance.
Output:NoneReturn Code:FE_FAIL Could not mesh surfaces.Remarks/Usage:
This function has been replaced by feMeshSurface2( )
Nodes along common edges between su rfaces meshed in a single call to  this method will be merged. If 
you call this method multiple times, no des along common edges of the su rfaces meshed in different calls 
will not be merged - you must do that manually by calling fe CheckCoincidentNode.
Example:The following example meshes each surface on Solid 1 in a model. It requires the mesh size to be 
already established, but it creates a plate property  with a 0.1 thickness and meshes the surfaces with 
quads. The software performs 20 Laplacian smoothing pa sses, or continues un til the smoothing con-
verges to a 0.01 tolerance.
Sub Main 
Const FGD_Surface_onSolid = 78 

Dim App As femap.model 
Set App = feFemap() 
Dim rc As Long 
Dim pr As femap.Prop 
Set pr = App.feProp() 
Dim pt As femap.Set 
Set pt = App.feSet() 

rc = pt.AddRule(1, FGD_Surface_onSolid) 
pr.Type = 17 
pr.Title = "0.1 Plate" 
pr.pval(0) = 0.1 
pr.Put (pr.NextEmptyID) 

rc=App.feMeshSurface(pt.ID,pr.ID,1,2,30,1,45,0,0,True,20,.01) 
App.feViewRegenerate(0)
End Sub feMeshSurface
( surfaceSET, propID, minBetween, maxAspect, maxQuickNodes, meshApproach,   
quadAngle, midsideGeom, midsideAngle, smoothLaplacian, smoothIter, smoothTol )
 API-638  feMeshSurfaceByAttributes
3.9.2.7  feMeshSurfaceByAttributes
feMeshSurfaceByAttributes
( surfaceSET )
Description:Meshes a selected set of surfaces using its stored attributes.Input:
INT4 surfaceSETThe ID of a set that contains a list of surface IDs that will be meshed 
using their saved attributes. Altern atively, if you specify a negative 
value, this is simply the ID of the single surface to mesh.
Output:NoneReturn Code:
FE_FAIL Could not mesh surfaces.
Remarks/Usage:NoneExample:
feMeshTetSolid3   API-639
3.9.2.8  feMeshTetSolid3
feMeshTetSolid3
( entityTYPE, entitySET, propID, meshi ngApproach, makeMidside , tetGrowth, check-
SurfElem, deleteSurfElem, midsideGeom, midsideAngle, multiThruThickness, sliverRe-
moval, tetOptimization, pyramidSurfaceSET, pyramidMatchAdjacentParabolic )
Description:Meshes a selected set of solids (or surfaces or planar elements) with tetrahedral and, optionally, pyramid 
elements. This method supersedes fe MeshTetSolid2 and feMeshTetSolid.
Input:
INT4 entityTYPEThe type of entities being meshed  that are contained in “entity-
SET”. For entity information, see Section 3.3.6, "Entity Types". 
Can be FT_SOLID, FT_SURFACE or FT_ELEM. 
INT4 entitySETThe ID of a set that contains a lis t of solid/surface/element IDs that 
will be meshed. Alternatively, if yo u specify a negative value, this 
is simply the ID of the single enti ty to mesh - probably only for sol-
ids. In any case, the list of entities  must form one or more closed 
solid volumes.
INT4 propIDSpecifies the ID of the property to  use for tetrahedral elements as 
they are created. If you want to use meshing attributes, set propID=0. In this case, all select ed solids must have meshing attri-
butes defined or they will not be meshed. This only works if entity-
TYPE=FT_SOLID. The propID proper ty must be compatible with 
solid meshing.
INT4 meshingApproachSet to one of three values: 
0=Surface Mesh Only, 
1=Mesh V olume with Tets Only, 2=Mesh V olume with Tets and Pyramids. 
When using option 2, a layer of pyramids will be created anywhere 
the volume is bounded by quadrila teral surface elements and/or on 
surface IDs found in the pyramidSurfaceSET
BOOL makeMidsideIf True, the solids will have midsid e nodes created. Otherwise, lin-
ear elements are created.
REAL8 tetGrowth The tetrahedral growth factor. Numb ers larger than 1.0 mean that 
the elements on the inside of the solid will be larger than those on 
the outside. It is usually best to use a factor slightly larger than 1.0. 
Default value is 1.1 - if you specify tetGrowth=0.0.
BOOL checkSurfElemChecks the surface elements for va lidity prior to tet meshing if 
True. Not usually required if meshing solids, but should be done for surface or element meshing.
 API-640  feMeshTetSolid3
BOOL deleteSurfElemSet to True if you want to delete  the surface elements that are being 
generated or meshed.
BOOL midsideGeomIf True, and you are meshing with  parabolic elements, midside 
nodes will be projected toward the geometry.
REAL8 midsideAngleThe maximum angle formed by the edge of the element as the 
midside nodes are projected on to the geometry. If midsideAn-
gle=0.0 and midsideGeom=True, th en midside nodes will be pro-
jected completely onto the geomet ry regardless of the distortion 
introduced in the elements.
BOOL multiThruThicknessIf True, mesher will place multiple tet elements through the thick-
ness of the solid. Default should be set to False.
BOOL sliverRemovalIf True, processing will be done to  remove sliver elements. Should 
always be set to True unle ss the mesher encounter issues.
INT4 tetOptimizationSets the Tet Optimization level. Available values are 0-5, which 
0=off, 1=less optimization, 5=mo re optimization, 3=default. 
INT4 pyramidSurfaceSETOnly used if meshingAppro ach=2 and entityType is not 
FT_ELEM. The ID of a Set object that contains the IDs of surfaces 
to mesh with quadrilateral elemen ts used to then create pyramid 
elements. Any surfaces that were already meshed prior to this call do not need to be included. Also, if all desired surfaces are adjacent 
to or linked to quad-meshed surfac es, or have quad meshing attri-
butes, then specify pyramidS urfaceSET=0. If you specify any 
other ID, the Set object must contain all unmeshed surfaces where 
you want pyramids.
BOOL 
pyramidMatchAdjacentParabolicIf True, the bases of the Pyramids  will reference midside nodes. If 
False, bases of the Pyramids will not have midside nodes.
Output:NoneReturn Code:FE_FAIL Could not mesh solid.Remarks/Usage:NoneExample:NonefeMeshTetSolid3
( entityTYPE, entitySET, propID, meshi ngApproach, makeMidside , tetGrowth, check-
SurfElem, deleteSurfElem, midsideGeom, midsideAngle, multiThruThickness, sliverRe-moval, tetOptimization, pyramidSurfaceSET, pyramidMatchAdjacentParabolic )
feMeshTetSolid2   API-641
3.9.2.9  feMeshTetSolid2
feMeshTetSolid2
( entityTYPE, entitySET, propID, surfaceMeshOnly, makeMidside, tetGrowth, check-
SurfElem, deleteSurfElem, midsideGeom, midsideAngle, multiThruThickness, sliverRe-
moval, tetOptimization )
Description:Meshes a selected set of solids (or surfaces or planar elements) with tetrahedral elements. This method 
supersedes feMeshTetSolid, but has also been superseded by feMeshTetSolid3.
Input:
INT4 entityTYPEThe type of entities being meshed that are contained in “entitySET”. 
For entity information, see Sectio n 3.3.6, "Entity Types". Can be 
FT_SOLID, FT_SURFACE or FT_ELEM. 
INT4 entitySETThe ID of a set that contains a li st of solid/surface/element IDs that 
will be meshed. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single entity to  mesh - probably only for solids. 
In any case, the list of entities mu st form one or more closed solid 
volumes.
INT4 propIDSpecifies the ID of the property to  use for tetrahedral elements as 
they are created. If you want to us e meshing attributes, set propID=0. 
In this case, all selected solids mu st have meshing attributes defined 
or they will not be meshed. This only works if entity-
TYPE=FT_SOLID. The propID proper ty must be compatible with 
solid meshing.
BOOL surfaceMeshOnlyIf True, only surface elements are generated, and the meshing pro-
cess stops before generating tetrahedra.
BOOL makeMidsideIf True, the solids will have midside nodes created. Otherwise, linear 
elements are created.
REAL8 tetGrowth The tetrahedral growth factor. Number s larger than 1.0 mean that the 
elements on the inside of the solid  will be larger than those on the 
outside. It is usually best to use a factor slightly larger than 1.0. 
Default value is 1.5 - if you specify tetGrowth=0.0.
BOOL checkSurfElemChecks the surface elements for valid ity prior to tet meshing if True. 
Not usually required if meshing solid s, but should be done for sur-
face or element meshing.
BOOL deleteSurfElemSet to True if you want to delete the surface elements that are being 
generated or meshed.
BOOL midsideGeomIf True, and you are meshing with parabolic elements, midside nodes 
will be projected toward the geometry.
 API-642  feMeshTetSolid2
REAL8 midsideAngleThe maximum angle formed by the edge of the element as the 
midside nodes are projected onto the geometry. If midsideAngle=0.0 
and midsideGeom=True, then midside nodes will be projected com-pletely onto the geometry regardless of the distortion introduced in 
the elements.
BOOL multiThruThicknessIf True, mesher will place multiple tet elements through the thickness 
of the solid. Default should be set to False.
BOOL sliverRemovalIf True, processing will be done to  remove sliver elements. Should 
always be set to True unle ss the mesher encounter issues.
INT4 tetOptimizationSets the Tet Optimization level. Available values are 0-5, which 
0=off, 1=less optimization, 5=mo re optimization, 3=default. 
Output:
None
Return Code:FE_FAIL Could not mesh solid.Remarks/Usage:NoneExample:NonefeMeshTetSolid2
( entityTYPE, entitySET, propID, surfaceMeshOnly, makeMidside, tetGrowth, check-
SurfElem, deleteSurfElem, midsideGeom, midsideAngle, multiThruThickness, sliverRe-moval, tetOptimization )
feMeshTetSolid   API-643
3.9.2.10  feMeshTetSolid
feMeshTetSolid
( entityTYPE, entitySET, propID, surfaceMeshOnly, makeMidside, tetGrowth, check-
SurfElem, deleteSurfElem, midsideGeom, midsideAngle, allocateElem )
Description:Meshes a selected set of solids (or surfaces or planar elements) with tetrahedral elements. This method 
has been superseded by feMesh TetSolid2 and feMeshTetSolid3.
Input:
INT4 entityTYPEThe type of entities being meshed that are contained in “entitySET”. 
For entity information, see Sectio n 3.3.6, "Entity Types". Can be 
FT_SOLID, FT_SURFACE or FT_ELEM. 
INT4 entitySETThe ID of a set that contains a li st of solid/surface/element IDs that 
will be meshed. Alternatively, if yo u specify a negative value, this is 
simply the ID of the single entity to  mesh - probably only for solids. 
In any case, the list of entities mu st form one or more closed solid 
volumes.
INT4 propIDSpecifies the ID of the property to  use for tetrahedral elements as 
they are created. If you want to us e meshing attributes, set propID=0. 
In this case, all selected solids mu st have meshing attributes defined 
or they will not be meshed. This only works if entity-
TYPE=FT_SOLID. The propID proper ty must be compatible with 
solid meshing.
BOOL surfaceMeshOnlyIf True, only surface elements are generated, and the meshing pro-
cess stops before generating tetrahedra.
BOOL makeMidsideIf True, the solids will have midside nodes created. Otherwise, linear 
elements are created.
REAL8 tetGrowth The tetrahedral growth factor. Number s larger than 1.0 mean that the 
elements on the inside of the solid  will be larger than those on the 
outside. It is usually best to use a factor slightly larger than 1.0. 
Default value is 1.5 - if you specify tetGrowth=0.0.
BOOL checkSurfElemChecks the surface elements for valid ity prior to tet meshing if True. 
Not usually required if meshing solid s, but should be done for sur-
face or element meshing.
BOOL deleteSurfElemSet to True if you want to delete the surface elements that are being 
generated or meshed.
BOOL midsideGeomIf True, and you are meshing with parabolic elements, midside nodes 
will be projected toward the geometry.
 API-644  feMeshTetSolid
REAL8 midsideAngleThe maximum angle formed by the edge of the element as the 
midside nodes are projected onto the geometry. If midsideAngle=0.0 
and midsideGeom=True, then midside nodes will be projected com-
pletely onto the geometry regardless of the distortion introduced in the elements.
INT4 allocateElemEstimated maximum number of tetrah edral elements to be generated. 
This option simply controls memory  allocation for the mesher - more 
elements may be generated. You shou ld usually set this value to 0. 
This will cause the mesher to au tomatically estimate the memory 
requirements from the surface mesh.
Output:NoneReturn Code:
FE_FAIL Could not mesh solid.
Remarks/Usage:NoneExample:NonefeMeshTetSolid
( entityTYPE, entitySET, propID, surfaceMeshOnly, makeMidside, tetGrowth, check-
SurfElem, deleteSurfElem, midsideGeom, midsideAngle, allocateElem )
feMeshHexSolid   API-645
3.9.2.11  feMeshHexSolid
feMeshHexSolid
( solidSET, propID, surfaceMeshOnly, makeMidside, checkSurfElem, deleteSurfElem, 
midsideGeom, midsideAngle )
Description:Meshes a selected set of solid s with hexahedral elements.
Input:
INT4 solidSETThe ID of a set that contains a list  of solid IDs that will be meshed. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to mesh.
INT4 propIDSpecifies the ID of the property to use for hexahedral elements as 
they are created. If you want to us e meshing attributes, set propID=0. 
In this case, all selected solids mu st have meshing attributes defined 
or they will not be meshed. The pr opID property must be compatible 
with solid meshing.
BOOL surfaceMeshOnlyIf True, only surface elements are generated, and the meshing pro-
cess stops before generating hex elements.
BOOL makeMidsideIf True, the solids will have midside nodes created. Otherwise, linear 
elements are created.
BOOL checkSurfElemChecks the surface elements for valid ity prior to tet meshing if True. 
Not usually required if meshing solid s, but should be done for sur-
face or element meshing.
BOOL deleteSurfElemSet to True if you want to delete the surface elements that are being 
generated or meshed.
BOOL midsideGeomIf True and you are meshing with parabolic elements, midside nodes 
will be projected toward the geometry.
REAL8 midsideAngleThe maximum angle formed by the edge of the element as the 
midside nodes are projected onto the geometry. If midsideAngle=0.0 
and midsideGeom=True, then midside nodes will be projected com-
pletely onto the geometry regardless of the distortion introduced in the elements.
Output:NoneReturn Code:FE_FAIL Could not mesh solid.Remarks/Usage:For this function to work, the so lids must be compatible with, an d properly sized for hex meshing.
 API-646  feMeshHexSolid
Example:
This example hex meshes all of the solids in a mo del with parabolic hex elements and projects the 
midside nodes onto the surfaces.
Sub Main
Dim App As femap.model 
Set App = feFemap()

Dim so As femap.Set 
Set so = App.feSet() 

so.AddAll (39) 
Dim pr as femap.Prop 
Set pr = App.feProp()

pr.Type = 25 
pr.Title = "Bricks" 
pr.Put (pr.NextEmptyID) 
rc=femap.feMeshHexSolid(so.ID,pr.ID, _ 
                        False,True,False,True,True,0#) 
App.feViewRegenerate(0)
End SubfeMeshHexSolid
( solidSET, propID, surfaceMeshOnly, makeMidside, checkSurfElem, deleteSurfElem, 
midsideGeom, midsideAngle )
feMeshHexSolidFromElement   API-647
3.9.2.12  feMeshH exSolidFromElement
feMeshHexSolidFromElement
( baseSET, topSET, propID, numLayers, match1, match2, makeMidside, checkSurfElem, 
deleteSurfElem )
Description:Meshes selected sets of surface elem ents with hexahedral elements.
Input:
INT4 baseSETThe ID of a set that contains a list of surface element IDs that will be 
used as the “base” of the hex mesh. The “base” of the hex mesh is the 
set of elements that form the patte rn that will be extruded into the 
hex elements.
INT4 topSETThe ID of a set that contains a second list of surface element IDs that 
will be used as the “top” of the hex mesh. The “t op” set can be 
selected in two forms. It can either  contain a set of elements that 
match the base but is loca ted at the opposite end of the extrusion, or 
it can contain all of the elements (o ther than those in the base) that 
enclose a complete, closed volume.  If you use the true “top” option 
(not all the enclosing elements), then the base may not contain any 
holes.
INT4 propIDSpecifies the ID of the property to use for hexahedral elements as 
they are created. If you want to us e meshing attributes, set propID=0. 
In this case, all selected solids mu st have meshing attributes defined 
or they will not be meshed. The pr opID property must be compatible 
with solid meshing.
INT4 numLayersOnly used if topSET only includes the elements that  match baseSET 
at the other end of the extrusion. This is the number of layers of 
hexahedral elements that will be generated.
INT4 match1
INT4 match2Only used if topSET only includes the elements that  match baseSET 
at the other end of the extrusion. Th ese should be both set to 0 if you 
want to automatically match the el ement patterns in the base and top 
meshes. If you have a symmetric or rotated mesh, it may be neces-
sary to set these values to node IDs that will match the base mesh to 
the top. If not 0, match1 must be  a node ID from the baseSET that 
matches the match2 no deID from the topSET.
BOOL makeMidsideIf True, the solids will have midside nodes created. Otherwise, linear 
elements are created.
BOOL checkSurfElemChecks the surface elements for valid ity prior to tet meshing if True. 
Not usually required if meshing solid s, but should be done for sur-
face or element meshing.
 API-648  feMeshHexSolidFromElement
BOOL deleteSurfElemSet to True if you want to delete the surface elements that are being 
generated or meshed.
Output:NoneReturn Code:FE_FAIL Could not mesh solid.Remarks/Usage:NoneExample:This example hex meshes between th e surface mesh that is on Surface 1 and the mesh on Surface 5. It 
creates 17 layers of hex elements between the surfaces.
Sub Main 
Const FGD_Elem_atSurface = 44 

Dim App As femap.model 
Set App = feFemap()

Dim b As femap.Set 
Dim t As femap.Set 
Set b = App.feSet() 
Set t = App.feSet() 

iSurf1 = 1 
iSurf2 = 5 
nLayers = 17 
rc = b.AddRule(iSurf1, FGD_ELEM_ATSURFACE) 
rc = t.AddRule(iSurf2, FGD_ELEM_ATSURFACE) 
 Dim pr as femap.Prop 
Set pr = App.feProp()

pr.type = 25 
pr.title = "Bricks" 
pr.Put (pr.NextEmptyID) 
rc=App.feMeshHexSolidFromElement(b.ID,t.ID,pr.ID, _ 
        nLayers,0,0,True,False,True)App.feViewRegenerate(0)
End SubfeMeshHexSolidFromElement
( baseSET, topSET, propID, numLayers, match1, match2, makeMidside, checkSurfElem, 
deleteSurfElem )
feMeshBetween   API-649
3.9.3  Other Meshing
3.9.3.1  feMeshBetween
feMeshBetween
( propID, genMode, shape, rightSplit, alternate, allQuad, logSpacing, numCorners, num-
Nodes, bias, nodeInc, cornerXYZ )
Description:Meshes between selected coordinate lo cations. No geometry is required.
Input:
INT4 propIDSpecifies the ID of the property to  use for elements as they are cre-
ated. The propID property must be compatible with the type of ele-
ments that you will be crea ting, and the “shape” value.
INT4 genModeThe mesh generation mode: 0=Node s Only, 1=Elements only on 
existing Nodes, 2=Both Nodes and Elements.
INT4 shapeThe shape of the elements to ge nerate: 0=Line, 2=Tria, 4=Quad, 
6=Tetra, 7=Wedge, 8=Brick. Not used if only generating nodes.
BOOL rightSplitOnly used for Tria,Tetra and Wedge shapes. If True, indicates that 
the first elements should be sp lit along a right-hand diagonal.
BOOL alternateOnly used for Tria,Tetra and Wedge shapes. If True, indicates that 
the element split direction should alternate with each group of ele-
ments, eliminating any biasi ng in the mesh patterns.
BOOL allQuadIndicates that you want to use th e alternate all-quad meshing scheme 
on a mesh that would otherwise generate triangular or wedge ele-
ments. This also requires compa tible numbers of nodes along all 
edges.
BOOL logSpacingOnly used if you are generating nod es (or nodes and elements), and 
using a bias factor other than 1.0. If True, indicates that you want the 
mesh spacing graded in a logarithmic manner.
INT4 numCornersThe number of corners in the meshing region. Available values are: 2 
(for line elements), 3 or 4 (for planar elements), 4,5,6, or 8 for (solid 
elements). 
INT4 numNodes[0..2]The number of nodes in each of the meshing directions. Only the 
entries required for the number of corners are used. For example, if 
you specify 2 corners, only numNodes[0] is used. If you specify 3 corners, numNodes[0] and numNodes[1] will be used.
REAL8 bias[0..2]The biasing factor in each of the m eshing directions. Set to 1.0 for no 
biasing.
 API-650  feMeshBetween
INT4 nodeINC[0..2]Only used if genMode=1 (generate elements only). In this case, 
nodeINC[0] must be the ID of the first node in the pattern to be 
meshed with elements. nodeINC[1] and nodeINC[2] are the addi-
tional node increments in second and third (if required) meshing 
directions. These will be 0, if th e nodes are numbered consecutively.
REAL8 cornerXYZ[0..23]The coordinates of the co rner locations, in global rectangular coordi-
nates. Each corner is specified in consecutive locations in this array. 
For example, the first corner is in  cornerXYZ[0..2], the second is in 
cornerXYZ[3..5], the third in cornerXYZ[6..8] and so on. 
Output:NoneReturn Code:FE_FAIL Could not mesh between corners.Remarks/Usage:NoneExample:NonefeMeshBetween
( propID, genMode, shape, rightSplit, alternate, allQuad, logSpacing, numCorners, num-
Nodes, bias, nodeInc, cornerXYZ )
feMeshClosestLink   API-651
3.9.3.2  feMeshClosestLink
feMeshClosestLink
( fromSET, toSET, connectWith, orient, dof, reverse )
Description:Meshes connections based on the sh ortest distance between two sets of nodes. This method provides 
programmatic access to the functionality of the Mesh, Connect, Closest Link  command.
Input:
INT4 fromSETA set containing the node IDs of the nodes to mesh from. Each node 
in this set will have one element connecting from it to the closest 
node in the toSET. Alternatively, if you specify a negative value, this 
is simply the ID of the single node to mesh.
INT4 toSETA set containing the node IDs to mesh “to”. The closest node from 
this set will be matched with the node from the fromSET. Alterna-
tively, if you specify a negative value,  this is simply the ID of the sin-
gle node to mesh.
INT4 connectWithThe type of element to use for th e connection: 1=Constraint Equa-
tion, 2=Rigid, 3=Line Element. If you choose constraint equations, 
you must have an active constraint  set for this method to work.
REAL8 orient[0..2]The orientation vector used for elem ents created with this method (if 
required by connectWith).
INT4 dof[0..5]The degrees of freedom (DOF) to conn ect. Set values to 1 for DOF to 
connect; 0 for DOF to skip.
BOOL reverseReverses the connection order: co nnections are still made from the 
fromSET to the toSET, but the el ement nodal order is reversed. 
Output:NoneReturn Code:FE_FAIL Could not mesh.Remarks/Usage:When connectWith is set to 3 (Lin e Elements) the Line Orientation option is always set to Vector.
If you want to simulate the same ca pability found in the Mu ltiple Link command, simply call this func-
tion multiple times, using negative node IDs in place of the fromSET and toSET.
Example:None
 API-652  feMeshCoincidentLink
3.9.3.3  feMesh CoincidentLink
feMeshCoincidentLink
( fromSET, toSET, connectWith, orient, dof, tolerance )
Description:Meshes connections between coincident nodes. This method provides programmatic access to the func-
tionality of the Mesh, Connect, Coincident Link  command.
Input:
INT4 fromSETA set containing the node IDs of the nodes to mesh. Only nodes in 
this set that are coincident (with in the specified tolerance) with 
another node in the set are meshed.
INT4 connectWithThe type of element to use for th e connection: 1=Constraint Equa-
tion, 2=Rigid, 3=Line Element, 4=Gap Element. If you choose con-
straint equations, you must have an  active constraint set for this 
method to work.
REAL8 orient[0..2]The orientation vector used for elem ents created with this method (if 
required by connectWith).
INT4 dof[0..5]The degrees of freedom (DOF) to conn ect. Set values to 1 for DOF to 
connect; 0 for DOF to skip.
REAL8 toleranceThe coincident node tole rance. Only nodes with in this tolerance of 
each other are meshed.
Output:NoneReturn Code:FE_FAIL Could not mesh.Remarks/Usage:When connectWith is set to 3 (L ine Elements) or 4 (Gap Elements ) the Line Orientation option is 
always set to Vector.
Example:None
feMeshUnzip   API-653
3.9.3.4  feMeshUnzip
feMeshUnzip
( fromSET, toSET, connectWith, orient, dof )
Description:Unzips an existing mesh and places connecting elements at the new, un zipped coincident nodes. This 
call is obsolete, use feMeshUnzip2 instead.
Input:
INT4 fromSETA set containing the element IDs on the primary side of the interface. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single element to use.
INT4 toSETA set containing the node IDs to unzip. Each of these nodes will be 
duplicated and nodes on the elemen ts that were not selected as the 
“primary side” will be replaced w ith the copies. Co nnecting elements 
will be created between th e original and new nodes.
INT4 connectWithThe type of element to use for th e connection: 0=None, 1=Constraint 
Equation, 2=Rigid, 3=DOF Spring, 4=Gap Element, 5=Spring/Damper. If you choose constraint equations, you must have an active 
constraint set for this method to work. If you choose None, the mesh 
will be unzipped, but no connection elements will be created.
REAL8 orient[0..2]The orientation vector used for elem ents created with this method (if 
required by connectWith).
INT4 dof[0..5]The degrees of freedom (DOF) to conn ect. Set values to 1 for DOF to 
connect; 0 for DOF to skip.
Output:NoneReturn Code:FE_FAIL Could not mesh.Remarks/Usage:NoneExample:None
 API-654  feMeshUnzip2
3.9.3.5  feMeshUnzip2
feMeshUnzip2
( fromSET, toSET, connectWith, orientMode, orientID, orientVec, dof, rigidReverse )
Description:Unzips an existing mesh and places connecting elements at the new, un zipped coincident nodes. This 
call supersedes feMeshUnzip and provides progra mmatic access to the functionality of the Mesh, Con-
nect, Unzip  command.
Input:
INT4 fromSETA set containing the element IDs on the primary side of the interface. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single element to use.
INT4 toSETA set containing the node IDs to unzip. Each of these nodes will be 
duplicated and nodes on the elemen ts that were not selected as the 
“primary side” will be replaced w ith the copies. Co nnecting elements 
will be created between th e original and new nodes.
INT4 connectWithThe type of element to use for th e connection: 0=None, 1=Constraint 
Equation, 2=Rigid, 3=DOF Spring, 4=Gap Element, 5=Spring/
Damper. If you choose constraint equations, you must have an active 
constraint set for this method to work. If you choose None, the mesh 
will be unzipped, but no connection elements will be created.
INT4 orientModeThe type of orientation to be used with Line Elements. 0=Node, 
1=Vector, 2=CSys. If you specify either Node or Csys you must also 
specify the corresponding ID in orientID. If you specify Vector it 
must be specified in orientVec
INT4 orientIDID of the Node when orientMode = 0 or ID of CSys when orient-
Mode = 2, used to orient Line El ements (if required by connectWith)
REAL8 orientVec[0..2]The orientation vector used for Li ne Elements created when orient-
Mode = 1 (if required by connectWith)
INT4 dof[0..5]The degrees of freedom (DOF) to conn ect. Set values to 1 for DOF to 
connect; 0 for DOF to skip
BOOL rigidReverseWhen True, reverses the direction of rigid connections so they are 
created from the copied nodes back  to the “primary side” nodes
Output:NoneReturn Code:FE_FAIL Could not mesh.Remarks/Usage:
feMeshUnzip2   API-655
None
Example:NonefeMeshUnzip2
( fromSET, toSET, connectWith, orientMode, orientID, orientVec, dof, rigidReverse )
 API-656  feMeshConnectRigid
3.9.3.6  feMeshConnectRigid
feMeshConnectRigid
( NSourceNodeSetID, NTargetNodeSetID, bIsRbe3, bbSourceDoF, bbTargetDoF, 
bMaxDistance, dMaxDistance, bMultiMap,  nMinTargetNum, nMaxTargetNum, 
nBadSourceSet, nBadTargetSet, pnCreated )
Description:This method can be used to automatically create RB E2 or RBE3 elements using a set of “Source Nodes” 
as the Independent (RBE2) or Dependent (RBE3) no de for each element, which then connect to any 
number of “Target Nodes” in the mo del, based on the specified parameters. This method provides pro-
grammatic access to the functionality of the Mesh, Connect, Rigid  command.
Input:INT4 nSourceNodeSetID ID of Set object containing the “Source Nodes”
INT4 nTargetNodeSetIDID of Set object containing the “Target Nodes” to consider. If provid-
ing a Set ID, then using “Maximum Target Distance” (dMaxDis-tance) and/or “Maximum Number of Target Nodes” (nMaxTargetNum) is optional. Alte rnatively, a value of 0 can be 
used, along with dMaxDistance and nMaxTargetNum, to automati-
cally determine the target nodes ba sed on those required parameters.
BOOL bIsRbe3When True, attempts to create RBE3 elements. When False, attempts 
to create RBE2 elements.
BOOL bbSourceDoF [0..5]Array of 6 indices which correspond to the degrees of freedom for 
“Source Nodes”. True = DOF enable d, False = disabled. True = DOF 
enabled, False = disabled. Only u sed when bIsRbe3 is set to True. 
[0] = FX, [1] = FY , [2] = FZ, [3] = MX, [4] = MY , [5] = MZ.
BOOL bbTargetDoF [0..5]Array of 6 indices which correspond to the degrees of freedom “Tar-
get Nodes”. True = DOF enabled, False = disabled. [0] = FX/TX, [1] 
= FY/TY , [2] = FZ/TZ, [3] = MX/R X, [4] = MY/RY , [5] = MZ/RZ
BOOL bMaxDistanceWhen True, will use the value spec ified for “Maximum Target Dis-
tance” (dMaxDistance) to determin e which nodes to consider. When 
False, any node in the Target Se t can be considered. When using a 
value of 0 for nTargetNodeSetID, must be set to True.
REAL8 dMaxDistanceValue for “Maximum Target Distan ce”, which is used to determine 
which nodes to consider in the Targ et Set. Only used when bMaxDis-
tance is set to True.
BOOL bMultiMapWhen True, any Target Node ca n be mapped to multiple Source 
Nodes. When False, each Target Node can only be mapped to the 
closest Source Node.
INT4 nMinTargetNumMinimum number of Target Node(s) per Source Node. Enter a value 
of 0 to not specify a minimum number of Target Nodes.
feMeshConnectRigid   API-657
INT4 nMaxTargetNumMaximum number of Target Node(s) per Source Node. Enter a value 
of 0 to not specify a maximum number of Target Nodes. When using 
a value of 0 for nTargetNodeSetID, must be set to a value > 0.
INT4 nBadSourceSetID of Set object to be filled any Source Node(s) which were not 
paired with any Target Nodes. Altern atively, if this information is not 
desired, enter a value of 0.
INT4 nBadTargetSetID of Set object to be filled an y Target Node(s) which were not 
paired with any Source Nodes. Altern atively, if this information is 
not desired, enter a value of 0.
Output:INT4 pnCreated Number of RBE2 or RBE3 elements created by this method.
Return Code:FE_FAIL Could not create any elements  based on the specified parameters.
FE_INV ALID At least one argument is not specified properly.Remarks/Usage:NoneExample:
Sub Main
    Dim App as femap.model
    Set App = feFemap()
    Dim ndset As femap.Set    Set ndset = App.feSet
    Dim source(5) As Boolean
    Dim target(5) As Boolean    Dim rigidcreate As Long
    For i= 0 To 5
    source(i) = True    target(i) = True
    Next
ndset.Select (FT_NODE, True, “Select Source Nodes”)    rc = App.feMeshConnectRigid (ndset.ID, 0, True, source,_ 
target, True, 2.0, False, 0, 5, 0, 0, rigidcreate)
End SubfeMeshConnectRigid
( NSourceNodeSetID, NTargetNodeSetID, bIsRbe3, bbSourceDoF, bbTargetDoF, 
bMaxDistance, dMaxDistance, bMultiMap,  nMinTargetNum, nMaxTargetNum, 
nBadSourceSet, nBadTargetSet, pnCreated )
 API-658  feMeshConnectRigid
feMeshEdgeSplit   API-659
3.9.3.7  feMeshEdgeSplit
feMeshEdgeSplit
( nNode1, nNode2, nNodeSetorZero )
Description:Splits a mesh by choosing an element edgeInput:INT4 nNode1The IDs of two nodes that lie on an element edge that is to be split. 
Only line, planar and solid (hex and wedge) elements can be split. INT4 nNode2
INT4 nNodeSetorZeroThe ID of a set containing node ID s that limit the split to a specified 
region of the model. If you want th e split to go thru  the entire model 
simply specify 0.
Output:
None
Return Code:FE_FAIL Split failed.Remarks/Usage:NoneExample:None
 API-660  feMeshEdgeSplit2
3.9.3.8  feMeshEdgeSplit2
feMeshEdgeSplit2
( nNode1, nNode2, nNumSplits, nBiasType, nBiasLocation, dBias, nNodeSetorZero )
Description:Splits a mesh by choosing an elem ent edge and allows you to enter a number of splits, bias type, bias 
location, and bias value.
Input:INT4 nNode1The IDs of two nodes that lie on an element edge that is to be split. 
Only line, planar and solid (hex and wedge) elements can be split. INT4 nNode2
INT4 nNumSplitsSpecifies the number of splits between  the two nodes (i.e., a value of 
2 will split each elemen t into three elements).
INT4 nBiasTypeSets the option for Bias Type, 0=Equal (i.e., no biasing), 1=Biased, 
2=Geometric Bias
INT4 nBiasLocationSets the option for Bias Location. Only used when nBiasType is set 
to 1 or 2, 0=At Start (smaller elements closer to nNode1), 1=At Cen-ter, 2=At Ends
REAL8 dBiasSpecifies the Bias Factor. Only used when nBiasType is set to 1 or 2, 
value must be between 1.0 and 65535.0
INT4 nNodeSetorZeroThe ID of a set containing node ID s that limit the split to a specified 
region of the model. If you want th e split to go thru  the entire model 
simply specify 0.
Output:NoneReturn Code:FE_FAIL Split failed.Remarks/Usage:NoneExample:None
feMeshTransition   API-661
3.9.3.9  feMeshTransition
feMeshTransition
( useNodes, entCount, entID, edgeNum, edgeBia s, edgeSize, propID, minBetween, max-
Aspect, maxQuickNodes, meshApproach, quadAngle, smoothLaplacian, smoothIter, 
smoothTol )
Description:Meshes between nodes or line elemen ts that form a closed boundary.
Input:
BOOL useNodesIf True, then entID contains a list of nodes used to define the bound-
ary; otherwise, entID contains a list of line elements.
INT4 entCountThe number of items contained in entID, edgeNum, edgeBias, and 
edgeSize.
INT4 entID[0..entCount-1]The IDs of the node or elements u sed to define the boundary being 
meshed.
INT4 edgeNum[0..entCount-1]The number of elements to create  between the associated nodes. 
edgeNum[0] applies to the space between entID[0] and entID[1]. 
edgeNum[entCount-1] applies to th e space between entID[entCount-
1] and entID[0]; that is, the last segment closing the boundary. Spec-
ify edgeNum[i] = 0 to use edgeSize[ i] to determine the number of 
elements. This option is no t used if useNodes=False.
INT4 edgeBias[0..entCount-1]The bias value to use with the elements being generated between 
successive nodes. Only used if edge Num[i] is not zero, and useNodes 
is True. Use of indexes is the same as for edgeNum.
REAL8 edgeSize[0..entCount-
1]Similar to edgeNum and edgeBias; this  is the element size to use for 
each segment. The distance between nodes is simply divided by this 
value to find the number of elemen ts in the segment. Usage is the 
same as edgeNum. Only us ed if edgeNum[i] = 0.
INT4 propIDSpecifies the ID of the property to  use for elements as they are cre-
ated. The propID property must be compatible with surface meshing. 
Set propID=0 to mesh with whatev er property and element type are 
currently active. Set propID=-1 to automatically mesh with plot-only 
elements, which do not requir e other property information.
INT4 minBetweenThe minimum number of elements between boundaries during mesh 
generation. Not used for fast-tri mesher.
REAL8 maxAspectThe maximum allowable element aspe ct ratio. Not used for fast-tri 
mesher.
INT4 maxQuickNodesBoundaries/surfaces with more th an this number of nodes on the 
boundary are “quick-cut”. No t used for fast-tri mesher.
 API-662  feMeshTransition
INT4 meshApproachThe mesher to use when meshing the surfaces: 0=Triangle, 1=Quad, 
2=Fast-Triangle.
REAL8 quadAngleThe maximum angular deviation from 90 degrees allowed in a quad 
before it is split into triangles.  Only applies to quad mesher.
BOOL smoothLaplacianIf True, Laplacian smoothing is performed. If False, centroidal 
smoothing is used.
INT4 smoothIterThe number of smoothing iterations to perform. Set to 0 to skip 
smoothing.
INT4 smoothTolThe smoothing toleranc e. Smoothing will stop if node movement 
during a smoothing pass fa lls below this tolerance.
Output:NoneReturn Code:
FE_FAILCould not mesh. Boundary may not be valid - it may be self inter-
secting.
Remarks/Usage:NoneExample:feMeshTransition
( useNodes, entCount, entID, edgeNum, edgeBia s, edgeSize, propID, minBetween, max-
Aspect, maxQuickNodes, meshApproach, quadAngle, smoothLaplacian, smoothIter, smoothTol )
feMeshTransition   API-663
The following example meshes the region bounded by nodes 1 through 7. Between each node, five new 
elements are created. The fast triangle mesher is being used. The software performs 17 Laplacian 
smoothing passes, or continues until the sm oothing converges to  a 0.001 tolerance.
Sub Main 
Dim App As femap.model 
Set App = feFemap() 

Dim nodeCOUNT As Long 
Dim nodes(20) As Long 
Dim edgeNUM(20) As Long 
Dim edgeBIAS(20) As Double 
Dim edgeSIZE(20) As Double 
Dim vnodes As Variant 
Dim vedgeNUM As Variant 
Dim vedgeSIZE As Variant 
Dim vedgeBiAS As Variant 
Dim i As Long 
Dim rc As Long 

For i = 0 To 6 
  nodes(i) = i + 1 
  edgeNUM(i) = 5 
  edgeBIAS(i) = 1# 
  edgeSIZE(i) = 0# 
Next i
  
  vnodes = nodes 
  vedgeNUM = edgeNUM 
  vedgeSIZE = edgeSIZE 
  vedgeBiAS = edgeBIAS 

rc = App.feMeshTransition(True, 7, vnodes, vedgeNUM, _ 
             vedgeBiAS, vedgeSIZE, -1, 2, 2#, 30, 2, 60, True, _ 
             10, 0.001) 
App.feViewRegenerate(0)
End Sub feMeshTransition
( useNodes, entCount, entID, edgeNum, edgeBia s, edgeSize, propID, minBetween, max-
Aspect, maxQuickNodes, meshApproach, quadAngle, smoothLaplacian, smoothIter, smoothTol )
 API-664  feMeshRemesh
3.9.3.10  feMeshRemesh
feMeshRemesh
( elemSET, nodeSET, remeshMode, refineRatio, breakAngle, deleteOrig, propID, minBe-
tween, maxAspect, maxQuickNodes, meshApproach, quadAngle, smoothLaplacian, 
smoothIter, smoothTol )
Description:Remeshes a portion of an existing mesh.Input:
INT4 elemSETThe ID of a set that contains the ID s of the elements to be remeshed. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single element to remesh. The el ements contained in this set can 
be either surface (planar) elements or line elements. If you select line 
elements, then the only other opti on that is used is refineRatio.
INT4 nodeSETThe ID of a set that contains the node IDs where the refinement will 
be applied. Not used if you set remeshMode=1.
INT4 remeshMode The reme shing mode: 0=Refine, 1=Remesh, 2=Unrefine.
INT4 refineRatioThe ratio between the number of el ements along each edge currently 
and the number after remeshing. Th is only applies to edges selected 
by the nodes in nodeSET. For example, if remeshMode=0, refine, 
and refineRatio=3, then three elem ents will be generated along each 
refined edge. If remeshMode=2, un refine, and refi neRatio=2, then 
half the elements along the “r efined” edge will be removed.
REAL8 breakAngleThe break angle along the refinement edges. If two adjacent edges 
intersect at an angle greater than this value, then they will not be 
removed, no matter what  the refineRatio value is. This helps to pre-
serve “corners” in the mesh. Only  used when remeshMode=2, unre-
fine.
BOOL deleteOrigIf True, the original nodes and el ements that are being remeshed 
(those elements selected in elemSET and their nodes) will be deleted.
INT4 propIDSpecifies the ID of the property to  use for elements as they are cre-
ated.  Set propID=0 to mesh with  whatever property and element 
type are currently active. Set prop ID=-1 to automatically mesh with 
plot-only elements, which do not require other property information.
INT4 minBetweenThe minimum number of elements between boundaries during mesh 
generation. Not used for fast-tri mesher.
REAL8 maxAspectThe maximum allowable element aspe ct ratio. Not used for fast-tri 
mesher.
INT4 maxQuickNodesBoundaries/surfaces with more th an this number of nodes on the 
boundary are “quick-cut”. No t used for fast-tri mesher.
feMeshRemesh   API-665
INT4 meshApproachThe mesher to use when meshing the surfaces: 0=Triangle, 1=Quad, 
2=Fast-Triangle.
REAL8 quadAngleThe maximum angular deviation from 90 degrees allowed in a quad 
before it is split into triangles.  Only applies to quad mesher.
BOOL smoothLaplacianIf True, Laplacian smoothing is performed. If False, centroidal 
smoothing is used.
INT4 smoothIterThe number of smoothing iterations to perform. Set to 0 to skip 
smoothing.
INT4 smoothTolThe smoothing toleranc e. Smoothing will stop if node movement 
during a smoothing pass fa lls below this tolerance.
Output:NoneReturn Code:
FE_FAILCould not mesh. Boundary may not be valid - it may be self inter-
secting.
Remarks/Usage:NoneExample:NonefeMeshRemesh
( elemSET, nodeSET, remeshMode, refineRatio, breakAngle, deleteOrig, propID, minBe-
tween, maxAspect, maxQuickNodes, meshApproach, quadAngle, smoothLaplacian, smoothIter, smoothTol )
 API-666  feMeshConvertFacets
3.9.3.11  feMeshConvertFacets
feMeshConvertFacets
( solidID )
Description:Converts the current graphical facets of a solid into nodes and plot-only elements.
Input:INT4 solidID The ID of the solid to use to create the nodes and elements.
Output:NoneReturn Code:NoneRemarks/Usage:The current facetting of the solid is used to genera te the elements. You can update the facetting toler-
ance prior to using this method if you want more (o r fewer) elements.
Example:None
feMeshCleanupSlivers   API-667
3.9.3.12  feMeshCleanupSlivers
feMeshCleanupSlivers
( elemSET, minAngle, minLength )
Description:Automatically removes “slivers” fro m a selected set of elements.
Input:
INT4 elemSETThe ID of a set that contains the IDs of the elements to be checked. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single element to check. The el ements contained in this set must 
be surface (planar) elements.
REAL8 minAngleIdentifies slivers to be removed ba sed on a minimum angle. Set to 
0.0 to skip angle checking
REAL8 minLengthIdentifies slivers to be removed based on a minimum edge length. 
Set to 0.0 to skip  length checking.
Output:
NoneReturn Code:FE_FAIL Unable to remove slivers.Remarks/Usage:You must not include missing elements in the elemSET.Example:None
 API-668  feMeshEdgeRemoval
3.9.3.13  feMeshEdgeRemoval
feMeshEdgeRemoval
( elemSET, nd1, nd2 )
Description:Removes an edge from a surface mesh by collapsing the connected elements.
Input:
INT4 elemSETThe ID of a set that contains the IDs of the elements to be checked. 
The elements contained in this set must be surface (planar) elements.
INT4 nd1 The ID of the first node along the element edge.INT4 nd2 The ID of the second node along the element edge.Output:NoneReturn Code:FE_FAIL Unable to remove edge.Remarks/Usage:The elements selected must form a single, manifold hu ll - there can only be two elements that share each 
edge.
Example:None
feMeshBuildRemeshRegions   API-669
3.9.3.14  feMeshBuildRemeshRegions
feMeshBuildRemeshRegions
( elemSET, breakAngle )
Description:Builds remeshing regions from a set of planar elements.Input:
INT4 elemSETThe ID of a set that contains the IDs of the elements to be checked. 
The elements contained in this set must be surface (planar) elements.
REAL8 breakAngleThe maximum angle between adjacent elements for those elements 
to be considered in the same region.
Output:None
Return Code:
FE_FAIL Unable to build regions.Remarks/Usage:The elements selected must form a single, manifold hu ll - there can only be two elements that share each 
edge. Any quadrilateral elements sel ected will be converted to triangles.
Example:None
 API-670  feMeshEditRemeshRegions
3.9.3.15  feMeshEd itRemeshRegions
feMeshEditRemeshRegions
( el1, el2 )
Description:Moves an element from on e remeshing region to an adjacent region.
Input:INT4 el1 The ID of the element to be moved to the other region.
INT4 el2The ID of the element used to iden tify the region where the first ele-
ment will be placed.
Output:NoneReturn Code:FE_FAIL Unable to update regions.Remarks/Usage:The element to be moved, el1, must be adjacent, on at least one edge to the region containing element 
el2.
Example:None
feMeshRemeshRegions   API-671
3.9.3.16  feMeshRemeshRegions
feMeshRemeshRegions
( meshSize, propID, minBetween, maxAspect, maxQuickNodes, meshApproach, 
quadAngle, smoothLaplacian, smoothIter, smoothTol )
Description:Moves an element from on e remeshing region to an adjacent region.
Input:
REAL8 meshSizeThe default mesh size, used to de termine the size of elements that 
will be generated.
INT4 propIDSpecifies the ID of the property to  use for elements as they are cre-
ated. Set propID=0 to mesh with wh atever property and element type 
are currently active. Set propID=-1 to automatically mesh with plot-
only elements, which do not requ ire other property information.
INT4 minBetweenThe minimum number of elements between boundaries during mesh 
generation. Not used for fast-tri mesher.
REAL8 maxAspectThe maximum allowable element aspe ct ratio. Not used for fast-tri 
mesher.
INT4 maxQuickNodesBoundaries/surfaces with more th an this number of nodes on the 
boundary are “quick-cut”. No t used for fast-tri mesher.
INT4 meshApproachThe mesher to use when meshing the surfaces (0=Triangle, 1=Quad, 
2=Fast-Triangle).
REAL8 quadAngleThe maximum angular deviation from 90 degrees allowed in a quad 
before it is split into triangles.  Only applies to quad mesher.
BOOL smoothLaplacianIf True, Laplacian smoothing is performed. If False, centroidal 
smoothing is used.
INT4 smoothIterThe number of smoothing iterations to perform. Set to 0 to skip 
smoothing.
INT4 smoothTolThe smoothing toleranc e. Smoothing will stop if node movement 
during a smoothing pass fa lls below this tolerance.
Output:NoneReturn Code:FE_FAIL Unable to remeshRemarks/Usage:None
 API-672  feMeshRemeshRegions
Example:
NonefeMeshRemeshRegions
( meshSize, propID, minBetween, maxAspect, maxQuickNodes, meshApproach, 
quadAngle, smoothLaplacian, smoothIter, smoothTol )
feMeshEdgeMembers   API-673
3.9.3.17  feMeshEdgeMembers
feMeshEdgeMembers
( elemSET, nodeSET, propID, orient )
Description:Generates elements along the free edges or free faces of  selected elements. This method is obsolete and 
should no longer be used. It has been replaced by feMeshEdgeMembers2
Input:
INT4 elemSETThe ID of a set that contains the IDs of the elements to be checked. 
The elements contained in this set must be surface (planar) elements 
or solid elements.
INT4 nodeSETThe ID of a set that contains the IDs of the nodes which define the 
portions of the free edge/free face where you want to define edge 
members. An edge member is create d for every edge/face that has at 
least one node in this set.
INT4 propIDThe ID of an existing property used  to define the edge member ele-
ments. If planar elements are select ed in the elemSET, then this must 
be the ID of a line element property. If solid elements are selected in 
elemSET, then this must be a planar element property.
REAL8 orient[0..2]The element orientation vector for edge members. This is only used 
if elemSET contains planar elemen ts, and propID specifies a line ele-
ment type that requires orientation.
Output:NoneReturn Code:
FE_FAILUnable to create edge members. Either you selected elements that 
did not exist, or they are of the wrong type.
Remarks/Usage:Only planar or solid elements can be selec ted in elemSET, not both at the same time.
Example:None
 API-674  feMeshEdgeMembers2
3.9.3.18  feMeshEdgeMembers2
feMeshEdgeMembers2
( bOnFreeEdges, elemSET, nodeSET, propID, orient )
Description:Generates elements along the free edge s or free faces of selected elements.
Input:
BOOL bOnFreeEdgesIf true, elements will be generated on only free edges of the selected 
elements. 
INT4 elemSETThe ID of a set that contains the IDs of the elements to be checked. 
The elements contained in this set must be surface (planar) elements 
or solid elements.
INT4 nodeSETThe ID of a set that contains the IDs of the nodes which define the 
portions of the free edge/free face where you want to define edge 
members. An edge member is create d for every edge/face that has at 
least one node in this set.
INT4 propIDThe ID of an existing property used  to define the edge member ele-
ments. If planar elements are select ed in the elemSET, then this must 
be the ID of a line element property. If solid elements are selected in 
elemSET, then this must be a planar element property.
REAL8 orient[0..2]The element orientation vector for edge members. This is only used 
if elemSET contains planar elemen ts, and propID specifies a line ele-
ment type that requires orientation.
Output:NoneReturn Code:
FE_FAILUnable to create edge members. Either you selected elements that 
did not exist, or they are of the wrong type.
Remarks/Usage:Only planar or solid elements can be selec ted in elemSET, not both at the same time.
Example:None
feMeshSmooth   API-675
3.9.3.19  feMeshSmooth
feMeshSmooth
( elemSET, laplaceSmooth, iter, tolerance )
Description:Smooths a selected set of elements.Input:
INT4 elemSETThe ID of a set that contains the ID s of the elements to be smoothed. 
The elements contained in this set must be surface (planar) elements 
or solid elements.
BOOL laplaceSmoothIf True, Laplacian smoothing is pe rformed; otherwise, centroidal 
smoothing is used.
INT4 iterThe maximum number of smoothing passes that will be performed. 
Smoothing will termin ate sooner if the tolerance is reached.
REAL8 toleranceThe nodal movement tolerance. If no nodes move farther than this 
distance during a smoothing pass,  smoothing will be terminated.
Output:NoneReturn Code:
FE_FAILUnable to smooth. Your elemSET may contain multiple element 
types, or element types that are no t compatible with this operation.
Remarks/Usage:Only planar or solid elements can be selec ted in elemSET, not both at the same time.
Example:None
 API-676  feMeshSmooth2
3.9.3.20  feMeshSmooth2
feMeshSmooth2
( elemSET, fixednodeSET, laplaceSmooth, iter, tolerance )
Description:Smooths a selected set of elements while allowing an y number of specified nodes to remain in a fixed 
location.
Input:
INT4 elemSETThe ID of a set that contains the ID s of the elements to be smoothed. 
The elements contained in this set must be surface (planar) elements 
or solid elements.
INT4 fixednodeSETThe ID of a set that contains the IDs of the nodes to remain in a fixed 
location during the smoothing operatio n. Specifying a value of 0 will 
create the same results as using feMeshSmooth.
BOOL laplaceSmoothIf True, Laplacian smoothing is pe rformed; otherwise, centroidal 
smoothing is used.
INT4 iterThe maximum number of smoothing passes that will be performed. 
Smoothing will termin ate sooner if the tolerance is reached.
REAL8 toleranceThe nodal movement tolerance. If no nodes move farther than this 
distance during a smoothing pass,  smoothing will be terminated.
Output:NoneReturn Code:
FE_FAILUnable to smooth. Your elemSET may contain multiple element 
types, or element types that are no t compatible with this operation.
Remarks/Usage:Only planar or solid elements can be selec ted in elemSET, not both at the same time.
Example:None
feMeshExtrudeElem   API-677
3.9.3.21  feMeshExtrudeElem
feMeshExtrudeElem
( elemSET, axisLen, axisVec, propID, numElem, method, matchCurrent, deleteOrig )
Description:Extrudes existing elemen ts into new elements.
Input:
INT4 elemSETThe ID of a set that contains the IDs of the elements to be extruded. 
The elements contained in this set mu st be either line or surface (pla-
nar) elements, but not both. Line el ements are extruded into planar 
elements; planar elements are extruded into solid elements.
REAL8 axisLen The extrusion length (See “Remarks”).REAL8 axisVec[0..2] The extrusion direction vector (See “Remarks”).
INT4 propIDThe ID of the property that will be  used for the ne w elements. This 
property must be of the correct type (planar or solid), depending on the type of elements selected in elemSET.
INT4 numElemThe number of elements generated by each original element along 
the extrusion direction.
INT4 methodThe method of determining the ex trusion direction. 0=Along axis-
Vec, 1=along the element normal, 2=along the element normal with 
thickness corrections.
BOOL matchCurrentIf True, the attributes of the elemen ts that are created will match the 
active settings. If False, they w ill match the generating elements.
BOOL deleteOrigIf True, the elements in elemSET wi ll be deleted, leaving only the 
new elements. If False, the elements  in elemSet will remain in the 
model.
Output:NoneReturn Code:
FE_FAILUnable to extrude. Check the extr usion direction, and the element 
and property types.
Remarks/Usage:The extrusion length (with method=0 ) is really the length of the ax isVec multiplied by  axisLen. Nor-
mally you will either want to specify axisLen=1.0, an d set the axisVec to the true extrusion vector, or 
specify axisVec as a unit vector with the proper co mponents, and set axisLen to the true extrusion 
length.
 API-678  feMeshExtrudeElem
Example:
NonefeMeshExtrudeElem
( elemSET, axisLen, axisVec, propID, numElem, method, matchCurrent, deleteOrig )
feMeshExtrudeElem2   API-679
3.9.3.22  feMeshExtrudeElem2
feMeshExtrudeElem2
( elemSET, axisLen, axisOrig, axisVec, propID, numElem, method, radialspherical, onto-
SurfSetID, matchCurrent, deleteOrig )
Description:Extrudes existing elements into new elements allowing use of all 5 me thods in the “Mesh, Extrude, Ele-
ments” command (Vector, Normals, Normals with Th ickness Correction, Radial, and Along Vector to 
Surfaces)
Input:
INT4 elemSETThe ID of a set that contains the IDs of the elements to be extruded. 
The elements contained in this set mu st be either line or surface (pla-
nar) elements, but not both. Line el ements are extruded into planar 
elements; planar elements are extruded into solid elements.
REAL8 axisLen The extrusion length (See “Remarks”).REAL8 axisOrig[0..2] The extrusion direction origin (See “Remarks”).
REAL8 axisVec[0..2] The extrusion direction vector (See “Remarks”).
INT4 propIDThe ID of the property that will be  used for the ne w elements. This 
property must be of the correct type (planar or solid), depending on the type of elements selected in elemSET.
INT4 numElemThe number of elements generated by each original element along 
the extrusion direction.
INT4 methodThe method of determining the ex trusion direction. 0=Along axis-
Vec, 1=along the element normal, 2=along the element normal with 
thickness corrections, 3=radial, 4=along vector to surfaces
BOOL radialsphericalOnly used when method is set to 3 (radial). If True, the mesh will be 
extruded radially around a specified  coordinate location in axisOrig 
(spherical extrusion) to a length sp ecified with axisLen. If False, the 
mesh will be extruded radially about  a vector specified with axisOrig 
and axisVec (cylindrical extrusion) to a length specified with axis-
Len
INT4 ontoSurfSETIDOnly used when method is set to 4 (along vector to surface). The ID 
of a set that contains the IDs of th e surfaces to be extruded to along a 
vector specified with axisOrig and axisVec.
BOOL matchCurrentIf True, the attributes of the elemen ts that are created will match the 
active settings. If False, they w ill match the generating elements.
BOOL deleteOrigIf True, the elements in elemSET wi ll be deleted, leaving only the 
new elements. If False, the elements  in elemSet will remain in the 
model.
 API-680  feMeshExtrudeElem2
Output:
NoneReturn Code:
FE_FAILUnable to extrude. Check the extr usion direction, and the element 
and property types.
Remarks/Usage:The extrusion length (with method=0 ) is really the length of the ax isVec multiplied by  axisLen. Nor-
mally you will either want to specify axisLen=1.0, an d set the axisVec to the true extrusion vector, or 
specify axisVec as a unit vector with the proper co mponents, and set axisLen to the true extrusion 
length.
Example:NonefeMeshExtrudeElem2
( elemSET, axisLen, axisOrig, axisVec, propID, numElem, method, radialspherical, onto-
SurfSetID, matchCurrent, deleteOrig )
feMeshExtrudeCurve   API-681
3.9.3.23  feMeshExtrudeCurve
feMeshExtrudeCurve
( curveSET, axisLen, axisVec, propID, numElem )
Description:Extrudes existing curv es into new elements.
Input:
INT4 curveSETThe ID of a set that contains the ID s of the curves to be extruded. The 
curves are extruded into planar el ements. The number and spacing of 
elements is dependent on the m esh size established on the curves.
REAL8 axisLen The extrusion length (See “Remarks”).REAL8 axisVec[0..2] The extrusion direction vector (See “Remarks”).
INT4 propIDThe ID of the property that will be  used for the ne w elements. This 
property must be a planar type.
INT4 numElem The number of elements ge nerated along the ex trusion direction.
Output:NoneReturn Code:
FE_FAILUnable to extrude. Check the extr usion direction, and the element 
and property types.
Remarks/Usage:The extrusion length is really the length of the axisVec multiplied by axisLen. Normally you will either 
want to specify axisLen=1.0, and set the axisVec to the true extrus ion vector, or specify axisVec as a 
unit vector with the proper components, and set axisLen to  the true extrusion length.
Example:None
 API-682  feMeshRevolveElem
3.9.3.24  feMeshRevolveElem
feMeshRevolveElem
( elemSET, rotAngle, rotThrust, axisOrig, axisVec, propID, numElem, matchCurrent, 
deleteOrig )
Description:Revolves existing elements into new elements.Input:
INT4 elemSETThe ID of a set that contains the IDs of the elements to be revolved. 
The elements contained in this set mu st be either line or surface (pla-
nar) elements, but not both. Line el ements are revolved into planar 
elements; planar elements are revolved into solid elements.
REAL8 rotAngle The angle of rotation, in degrees.REAL8 rotThrust The total thrust  distance (along the axis of rotation), typically zero.
REAL8 axisOrig[0..2] The origin  of the axis of revolution.
REAL8 axisVec[0..2] The direction of the axis of revolution.
INT4 propIDThe ID of the property that will be  used for the ne w elements. This 
property must be of the correct type (planar or solid), depending on 
the type of elements selected in elemSET.
INT4 numElemThe number of elements generated by each original element along 
the revolution direction.
BOOL matchCurrentIf True, the attributes of the elemen ts that are created will match the 
active settings. If False, they w ill match the generating elements.
BOOL deleteOrigIf True, the elements in elemSET wi ll be deleted, leaving only the 
new elements.
Output:NoneReturn Code:
FE_FAILUnable to revolve. Chec k the axis of revolution, and the element and 
property types.
Remarks/Usage:NoneExample:None
feMeshRevolveCurve   API-683
3.9.3.25  feMeshRevolveCurve
feMeshRevolveCurve
( curveSET, rotAngle, rotThrust, axisOrig, axisVec, propID, numElem )
Description:Revolves existing curves into new elements.Input:
INT4 curveSETThe ID of a set that contains the ID s of the curves to be revolved. The 
curves are revolved into planar elements. The number and spacing of 
elements is dependent on the m esh size established on the curves.
REAL8 rotAngle The angle of rotation, in degrees.REAL8 rotThrust The total thrust  distance (along the axis of rotation), typically zero.
REAL8 axisOrig[0..2] The origin  of the axis of revolution.
REAL8 axisVec[0..2] The direction of the axis of revolution.
INT4 propIDThe ID of the property that will be  used for the ne w elements. This 
property must be of the correct type (planar or solid), depending on 
the type of elements selected in elemSET.
INT4 numElemThe number of elements generated by each original element along 
the revolution direction.
Output:NoneReturn Code:
FE_FAILUnable to revolve. Chec k the axis of revolution, and the element and 
property types.
Remarks/Usage:NoneExample:None
 API-684  feMeshSweepElem
3.9.3.26  feMeshSweepElem
feMeshSweepElem
(  elemSET, numPath, curvePath, numAlign, curveAlign, alignLoc, propID )
Description:Sweeps existing elements along one or  more curves into new elements.
Input:
INT4 elemSETThe ID of a set that contains the IDs of the elements to be swept. The 
curves are swept into planar elements. The number and spacing of 
elements is dependent on the m esh size established on the curves.
INT4 numPath The number of cu rves in the curvePath array.
INT4 curvePath[0..numPath-1]The IDs of the curves along the sweep path. These IDs should be 
specified in order, starting at th e beginning of the path to sweep 
along.
INT4 numAlignThe number of curves in the curveA lign array (usually 0, unless you 
are using an alignment path to orie nt the elements along sweep path).
INT4 curveAlig n[0..numAlign-
1]The IDs of curves along the alignment path.
REAL8 alignLoc[0..2]The alignment position. Only used if the sweep path is nonplanar, 
and numPath=0 (not using an alignment path).
INT4 propIDThe ID of the property that will be  used for the ne w elements. This 
property must be a planar type.
Output:NoneReturn Code:
FE_FAILUnable to sweep. Check  the order of the curves for the path and 
alignment, and the elem ent and property types.
Remarks/Usage:NoneExample:None
feMeshSweepCurve   API-685
3.9.3.27  feMeshSweepCurve
feMeshSweepCurve
(  curveSET, numPath, curvePath, numAlign, curveAlign, alignLoc, propID )
Description:Sweeps curves along one or more curves into new elements.Input:
INT4 elemSETThe ID of a set that contains the IDs of the curves to be swept. The 
elements contained in this set must be either line or surface (planar) 
elements, but not both. Line elements  are swept into planar elements; 
planar elements are swept into solid elements.
INT4 numPath The number of cu rves in the curvePath array.
INT4 curvePath[0..numPath-1]The IDs of the curves along the sweep path. These IDs should be 
specified in order, starting at th e beginning of the path to sweep 
along.
INT4 numAlignThe number of curves in the curveA lign array (usually 0, unless you 
are using an alignment path to orie nt the elements along sweep path).
INT4 curveAlig n[0..numAlign-
1]The IDs of curves along the alignment path.
REAL8 alignLoc[0..2]The alignment position. Only used if the sweep path is nonplanar, 
and numPath=0 (not using an alignment path).
INT4 propIDThe ID of the property that will be  used for the ne w elements. This 
property must be of the correct t ype (planar or solid) depending on 
the type of elements selected in elemSET.
BOOL matchCurrentIf True, the attributes of the elemen ts that are created will match the 
active settings. If False, they w ill match the generating elements.
BOOL deleteOrigIf True, the elements in elemSET wi ll be deleted, leaving only the 
new elements.
Output:NoneReturn Code:
FE_FAILUnable to sweep. Check  the order of the curves for the path and 
alignment, and the elem ent and property types.
Remarks/Usage:None
 API-686  feMeshSweepCurve
Example:
NonefeMeshSweepCurve
(  curveSET, numPath, curvePath, numAlign, curveAlign, alignLoc, propID )
feNodesBetweenNodes   API-687
3.9.4  Meshing Utilities
These utilities can be useful when trying to query an existing mesh to determine a “path” of nodes 
across a mesh or a “row” of solid elements.
3.9.4.1  feNodesBetweenNodes
feNodesBetweenNodes
( ndID1, ndID2, elSetID, nNodes, nNodeList )
Description:Returns a list of nodes, in order,  between two specified nodes (i.e., a “node path”). Also, the path from 
Node 1 to Node 2 can be limited to only consider th e edges of a subset of elements specified by the user.
Input:INT4 ndID1 ID of node at start of the node pathINT4 ndID2 ID of node at end of the node path
INT4 elSetIDID of Set Object containing element IDs to potentially limit the node 
path
Output:
INT4 nNodesThe number of nodes in the node path, including the nodes specified 
for ndID1 and ndID2 (First and last values in nNodeList)
V ARIANT vNodeList 
(0..nNodes-1)This variant contains an array with the node IDs in the node path, in 
order, from ndID1 to ndID2
Return Code:
FE_FAILA continuous node path, using only  the edges of the elements speci-
fied in elSetID, cannot be determined.
Remarks/Usage:Currently, only 2D and 3D elements are consider ed when attempting to determine a node path.
Example:
 API-688  feNodesBetweenNodes
Sub Main
    Dim App As femap.model
    Set App = feFemap()    Dim elset As femap.Set
    Set elset = App.feSet
    Dim ncount As Long    Dim nds As Variant
    elset.AddAll (FT_ELEM)
    rc = App.feNodesBetweenNodes (1, 91, elset.ID, ncount, nds)    For i = 0 To (ncount-1)
        App.feAppMessage (FCM_NORMAL, "Node "+Str$(nds(i)))
    NextEnd SubfeNodesBetweenNodes
( ndID1, ndID2, elSetID, nNodes, nNodeList )
feSolidElementsInARow   API-689
3.9.4.2  feSolidElementsInARow
feSolidElementsInARow
( numElems, nElemIDs, nFaceIDs, nMaxFind, bVisibleOnly, nCount, nElemList )
Description:Returns a list of solid hex and wedge elements found in a “row”, starting with a specified element face 
and continuing through a mesh until no additional hex or we dge elements can be fo und for a particular 
“row”. If a “row” of hex elements comes to a quadrila teral face of a wedge element, the “row” ends at 
the wedge. In addition, there is an  option to consider all hex and we dge elements or only hex and wedge 
elements visible in the active view.
Input:
INT4 numElemsThe number of hex and wedge elements and corresponding element 
faces to be used to search for “rows” of elements
INT4 nElemIDs
(0..numElems-1)This array contains a list of hex and wedge element IDs to consider, 
along with their corresponding el ement faces found in nFaceIDs, 
when searching for “rows”
INT4 nFaceIDs 
(0..numElems-1)This array contains a list of solid element face IDs, corresponding to 
the hex and wedge elements in nEle mIDs, to consider when search-
ing for “rows” (Only triangular faces of wedge elements are valid)
INT4 nMaxFindMaximum number of hex or wedge elements which can be found in 
each “row” of solid elements
BOOL bVisibleOnlyWhen True, only hex and wedge elements which are visible in the 
active view will be considered, otherwise all hex and wedge ele-
ments are considered
Output:INT4 nCount Total number of hex and we dge elements for all “found rows”
V ARIANT vElemList 
(0..nNodes-1)This variant contains an array of element IDs, stored “found row-by-
found row”, using the order of ea ch “seed” element and correspond-
ing face in nElemIDs and nFaceIDs, respectively.
Return Code:
FE_FAILA “row” of hex or wedge elements could not be found for at least one 
of the Element ID/Face ID pairs
Remarks/Usage:To determine when one “found row”  ends and another “found row” be gins, it will often be helpful to 
compare the element IDs in vElemLis t to the ones found in nElemIDs. Al so, it maybe helpful to use this 
call with feGetElementFaces (see Section 3.15.4.6, "feGetElementFace s"), feGetElementFacesFromSet 
(see Section 3.15.4.8, "feGetElementFacesFromSet ") or feGetElementAdjacentFaces (see Section 
3.15.4.9, "feGetElementAdjacentFaces").
 API-690  feSolidElementsInARow
Example:
Sub Main
    Dim App as femap.model
    Set App = feFemap()
    Dim origElem(0) As Long
    Dim origFace(0) As Long    Dim fcount As Long
    Dim vElIDs As Variant
    Dim vElFaces As Variant    Dim rowcount As Long
    Dim vElRows As Variant
    If App.feGetElementFaces ("Select Element Faces", 0,
    origElem, origFace, fcount, vElIDs, vElFaces) = 2 Then       Exit Sub
    End If
rc = App.feSolidElementsInARow (fcount, vElIDs, vElFaces, 
    1000, False, rowcount, vElRows)
For i = 0 To rowcount-1
App.feAppMessage (FCM_NORMAL, "Element"+Str$(vElRows(i)))
Next    
End SubfeSolidElementsInARow
( numElems, nElemIDs, nFaceIDs, nMaxFind, bVisibleOnly, nCount, nElemList )
feSolidElementsInARow   API-691
3.9.5  Mesh Copy/Radial Copy /Scale/Rotate/Reflect commands
In FEMAP v12 and above, a CopyTool Object w as created to grant users access the enhanced 
Copy, Rotate, and Reflect commands on both th e Geometry and Mesh me nus. For more informa-
tion, see Section 4.15 , "CopyTool Objects".
The commands on the Mesh, Copy...; Mesh, Rotate. ..; and Mesh, Reflect... menus which existed in 
FEMAP prior to version 12, along with the comm ands on the current Mesh, Radial Copy... and 
Mesh, Scale... menus may be acc essed via the API using the feGene rate... methods found in Sec-
tion 3.6.11, "Geometry and Mesh Generation Methods".
 API-692  
3.10  Modification Methods
Modification Methods include:
•Section 3.10.1, "Projection"
•Section 3.10.2, "Move, Rotate and Scale"
•Section 3.10.3, "Edit"
•Section 3.10.4, "Color and Layer"
•Section 3.10.5, "Renumbering"
•Section 3.10.6, "Associativity"
•Section 3.10.7, "Other Updates"
•Section 3.10.8, "Element Updates"
feProjectOnto   API-693
3.10.1  Projection
3.10.1.1  feProjectOnto
feProjectOnto
( entityTYPE, entitySET, projOnto, projAlong, ontoSET, OntoLocation, OntoVector, 
AlongVector, ExtendCurves, VectorBothDirections)
Description:Projects nodes or points onto a curve, surface, vector , or plane using either a closest/normal direction or 
along a specified vector. Additional options to Exte nd Curves and Project Both  Directions are also 
available when using certain combin ations of the available options.
Input:
INT4 entityTYPEThe type of entities to be projecte d. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT or FT_NODE.
INT4 entitySETThe ID of a set that contains a list  of point or node IDs that will be 
projected. Alternatively, if you sp ecify a negative value, this is sim-
ply the ID of the single entity to project. 
INT4 projOntoUsed to set the Project Onto op tion. 0=onto Curve (FPO_CURVE), 
1=onto Surface (FPO_SURFACE), 2=onto Vector (FPO_VECTOR), 
or 3=onto Plane (FPO_PLANE)
INT4 projAlongUsed to set the Project Along op tion. 0=use Closest/Normal (FPA_-
CLOSEST) or 1=along Vector (FPA_VECTOR)
INT4 ontoSETThe ID of a set that contains a list of curve or surface IDs to project 
onto.
REAL8 ontoLocation[0..2]The XYZ location of the base of th e vector to project onto. Must be 
specified in Global Rectangular coordinates.
REAL8 ontoVector[0..2]The XYZ components of the vector to project onto. Must be speci-
fied in Global Rectangular coordinates.
REAL8 alongVector [0..2]The XYZ components of the vector to project along. Must be speci-
fied in Global Rectangular coordinates.
BOOL ExtendCurvesOnly used when projOnto = 0 (FPO_CURVE) and projAlong = 0 
(FPA_CLOSEST). When True, the curve to project onto will be extended and the point or node w ill be projected onto the location 
closest to the “Extended Curve” (i .e., not actually on the curve 
itself). When False, the point or node will be projected onto the 
curve, many projecting onto one of the curve’s end points.
 API-694  feProjectOnto
BOOL VectorBothDirectionsOnly used when projOnto = 1 (FPO_SURFACE) and projAlong = 1 
(FPA_VECTOR). When True, the point(s) or node(s) will be pro-
jected in both directions along the specified vector. This allows 
points on both sides of a surface to be projected using a single speci-fied vector. When False, the point(s) and node(s) will only be pro-
jected in the direction of the specified vector.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify either points or nodes.FE_FAIL Could not project.Remarks/Usage:
This call is similar to using the Modify, Project, Point  or Modify, Project, Node  command.
Example:NonefeProjectOnto
( entityTYPE, entitySET, projOnto, projAlong, ontoSET, OntoLocation, OntoVector, 
AlongVector, ExtendCurves, VectorBothDirections)
feProjectOntoCurve   API-695
3.10.1.2  feProjectOntoCurve
feProjectOntoCurve
( entityTYPE, entitySET, curveID )
Description:Projects nodes or points onto a curve.Input:
INT4 entityTYPEThe type of entities to be projecte d. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT or FT_NODE.
INT4 entitySETThe ID of a set that contains a list  of point or node IDs that will be 
projected. Alternatively, if you sp ecify a negative value, this is sim-
ply the ID of the single entity to project. 
INT4 curveID The ID of th e curve to project onto.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify either points or nodes.FE_FAIL Could not project.Remarks/Usage:Points/nodes are projected to the closest locatio n on the curve, not alon g any specified vector.
Example:None
 API-696  feProjectOntoSurface
3.10.1.3  feProjectOntoSurface
feProjectOntoSurface
( entityTYPE, entitySET, surfaceID )
Description:Projects nodes or points onto a surface.Input:
INT4 entityTYPEThe type of entities to be projecte d. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT or FT_NODE.
INT4 entitySETThe ID of a set that contains a list  of point or node IDs that will be 
projected. Alternatively, if you sp ecify a negative value, this is sim-
ply the ID of the single entity to project. 
INT4 surfaceID The ID of th e surface to project onto.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify either points or nodes.FE_FAIL Could not project.Remarks/Usage:Points/nodes are projected to the closest locatio n on the surface, not along any specified vector.
Example:None
feProjectOntoVector   API-697
3.10.1.4  feProjectOntoVector
feProjectOntoVector
( entityTYPE, entitySET, vecLoc, vecDir )
Description:Projects points or nodes onto a vectorInput:
INT4 entityTYPEThe type of entities to be projecte d. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT or FT_NODE.
INT4 entitySETThe ID of a set that contains a list  of point or node IDs that will be 
projected. Alternatively, if you sp ecify a negative value, this is sim-
ply the ID of the single entity to project. 
REAL8 vecLoc[0..2]The XYZ location of the base of th e vector to project onto. Must be 
specified in Global Rectangular coordinates.
REAL8 vecDir[0..2]The XYZ components of the vector to project onto. Must be speci-
fied in Global Rectangular coordinates.
Output:NoneReturn Code:FE_FAIL Could not project.FE_INV ALID entityTYPE must be either FT_POINT or FT_NODERemarks/Usage:NoneExample:None
 API-698  feProjectAlongVector
3.10.1.5  feProjectAlongVector
feProjectAlongVector
( entityTYPE, entitySET, surfaceSET, vecAlong )
Description:Projects points or nodes alon g a vector onto selected surfaces
Input:
INT4 entityTYPEThe type of entities to be projecte d. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT or FT_NODE.
INT4 entitySETThe ID of a set that contains a list  of point or node IDs that will be 
projected. Alternatively, if you sp ecify a negative value, this is sim-
ply the ID of the single entity to project. 
INT4 surfaceSETThe ID of a set that contains a lis t of surface IDs that the entities will 
be projected onto. Alternatively, if  you specify a negative value, this 
is the ID of the single surface to project onto.
REAL8 vecAlong[0..2]The XYZ components of the vector to project along. Must be speci-
fied in Global Rectangular coordinates.
Output:NoneReturn Code:FE_FAIL Could not project.FE_INV ALID entityTYPE must be either FT_POINT or FT_NODERemarks/Usage:NoneExample:None
feProjectOntoPlane   API-699
3.10.1.6  feProjectOntoPlane
feProjectOntoPlane
( entityTYPE, entitySET, planeLoc, planeNormal )
Description:Projects points or nodes onto a planeInput:
INT4 entityTYPEThe type of entities to be projecte d. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT or FT_NODE.
INT4 entitySETThe ID of a set that contains a list  of point or node IDs that will be 
projected. Alternatively, if you sp ecify a negative value, this is sim-
ply the ID of the single entity to project. 
REAL8 planeLoc[0..2]The XYZ location of the base of th e plane to project onto. Must be 
specified in Global Rectangular coordinates.
REAL8 planeNormal[0..2]The XYZ components of the plane no rmal to project onto. Must be 
specified in Global Rectangular coordinates.
Output:NoneReturn Code:FE_FAIL Could not project.FE_INV ALID entityTYPE must be either FT_POINT or FT_NODERemarks/Usage:NoneExample:None
 API-700  feProjectOntoSolid
3.10.1.7  feProjectOntoSolid
feProjectOntoSolid
( nodeSET, elemSET, solidID, surfCount, surfID )
Description:Projects a mesh onto a solid.Input:
INT4 nodeSETThe ID of a set that contains a list of node IDs that will be projected. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to project. 
INT4 elemSETThe ID of a set that contains a list of element IDs that reference the 
nodes to be projected. Alternatively,  if you specify a negative value, 
this is simply the ID of the single  entity to project. These elements 
are used during the smoothing process as the nodes are projected.
INT4 solidIDThe ID of the solid to project onto . Must be 0 if you are going to 
specify surfaces.
INT4 surfCountThe number of surfaces specified in “surfID” - only used if soli-
dID=0.
INT4 surfID[0..surfCount-1]The IDs of the surfaces to project onto - only used if solidID=0 and 
surfCount is not 0.
Output:NoneReturn Code:FE_FAIL Could not project.Remarks/Usage:A mesh can either be projected to a solid by spec ifying solidID, or to surfaces by specifying surfCount 
and surfID.
Example:None
feMoveTo   API-701
3.10.2  Move, Ro tate and Scale
3.10.2.1  feMoveTo
feMoveTo
( entityTYPE, entitySET, x, y, z, doX, doY, doZ, inCsys, moveRef )
Description:Moves nodes, points, or coordi nate systems to a new location.
Input:
INT4 entityTYPEThe type of entities to be moved. For entity information, see Section 
3.3.6, "Entity Types". Can be  FT_CSYS, FT_POINT or FT_NODE.
INT4 entitySETThe ID of a set that contains a list of coordinate system, point, or 
node IDs that will be moved. Altern atively, if you specify a negative 
value, this is simply the ID of the single entity to move. 
REAL8 x
The coordinates that you want to move to. Specified in the inCsys 
coordinate system.REAL8 y
REAL8 zBOOL doXIf True, the corresponding coordinate direction (in inCsys) will be 
updated to the specified value. Only  directions specified as True will 
be moved.BOOL doY
BOOL doZINT4 inCsys The ID of the coordinate sy stem where the update will take place.
BOOL moveRefOnly used if entityTYPE=FT_CSYS. If True, then all entities that 
reference the coordinate systems being moved will also be updated 
as a rigid body.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify co ordinate systems, points, or nodes.
FE_FAIL Could not move.Remarks/Usage:You cannot move the global coordinate systems.
You can move “solid points” on a Parasolid surface or solid, general body, or sh eet solid. When a solid 
point is moved, any surface which refere nces that point will also be modified.
Example:None
 API-702  feMoveBy
3.10.2.2  feMoveBy
feMoveBy
( entityTYPE, entitySET, radial, length, vecLoc )
Description:Moves coordinate systems, points, curves, surfaces, solids, volumes, nodes, or elements along the spec-
ified vector, by the specified leng th. In addition, nodes and elements can optiona lly be moved radially.
Input:
INT4 entityTYPEThe type of entities to be moved. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_CSYS, 
FT_SURFACE, FT_VOLUME, FT_SOLID, FT_NODE, or FT_ELEM. 
INT4 entitySETThe ID of a set that contains a list  of entity IDs that will be moved. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to move. 
BOOL radialIf True, entities will be moved radi ally from a central location. If 
False, they will be moved along a vector. Only nodes and elements 
can be moved radially.
REAL8 lengthThe distance to move. If radial = Fals e, this is the length the entities 
are moved along the specified vector.
REAL8 vecLoc[0..2]If radial=False, contains the components of the vector to move along, 
specified in global rectangular coor dinates. If radial=True, specifies 
the coordinates of the center that you are moving around, also speci-
fied in global rectangular coordinates.
Output:NoneReturn Code:
FE_INV ALIDInvalid entity type. Must specify one of the types listed in entity-
TYPE. Can only specify nodes or elements if radial=True.
FE_FAIL Could not move.Remarks/Usage:You cannot move the global coordinate systems. 
You can move “solid points or curves” on a Paraso lid surface or solid, general body, or sheet solid. 
When a solid point or curve is move d, any surface which references th at point/curve will also be modi-
fied.
Example:None
feMoveOffset   API-703
3.10.2.3  feMoveOffset
feMoveOffset
( elemSET, method, length, alongVec )
Description:Moves elements by offsetting them from their current  location (normally used with planar elements).
Input:
INT4 elemSETThe ID of a set that contains a list  of element IDs that will be offset. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to offset. 
INT4 methodThe method of determining the offset direction: 0=Along alongVec, 
1=along the element normal, 2=along the element normal with thick-ness corrections.
REAL8 lengthThe distance to offset. If method=0, this length is multiplied by the 
length of the vector to get the total distance.
REAL8 alongVec[0..2]Only used if method=0. Contains the components of the vector to 
move along, specified in glob al rectangular coordinates. 
Output:NoneReturn Code:FE_FAIL Could not offset.Remarks/Usage:NoneExample:None
 API-704  feRotateTo
3.10.2.4  feRotateTo
feRotateTo
( entityTYPE, entitySET, axisLoc, axisVec, fromLoc, toLoc )
Description:Rotates entities around an axis  from one location to another.
Input:
INT4 entityTYPEThe type of entities to be moved. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_CSYS, 
FT_SURFACE, FT_VOLUME,  FT_SOLID, FT_NODE, or 
FT_ELEM. 
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be rotated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to rotate. 
REAL8 axisLoc[0..2]The coordinates of the origin of the axis of rotation, in global rectan-
gular coordinates.
REAL8 axisVec[0..2]The components of the axis of rotation, in global rectangular coordi-
nates.
REAL8 fromLoc[0..2]The coordinates of a poin t that you will rotate from, in global rectan-
gular coordinates.
REAL8 toLoc[0..2]The coordinates of a poin t that you will rotate to, in global rectangu-
lar coordinates. 
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.
FE_FAILCould not rotate. Check to make su re that the locations and vectors 
that you defined are not colinear or otherwise invalid.
Remarks/Usage:The axis of rotation is combined w ith the fromLoc and toLo c to compute an angle of rotation, which is 
then applied around the ax is of rotation to every entity that you select. 
Example:None
feRotateBy   API-705
3.10.2.5  feRotateBy
feRotateBy
( entityTYPE, entitySET, axisLoc, axisVec, rotAngle, rotThrust )
Description:Rotates entities around an ax is through a specified angle.
Input:
INT4 entityTYPEThe type of entities to be moved. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_CSYS, 
FT_SURFACE, FT_VOLUME,  FT_SOLID, FT_NODE, or 
FT_ELEM. 
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be rotated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to rotate. 
REAL8 axisLoc[0..2]The coordinates of the origin of the axis of rotation, in global rectan-
gular coordinates.
REAL8 axisVec[0..2]The components of the axis of rotation, in global rectangular coordi-
nates.
REAL8 rotAngle The angle of rotation, in degrees.REAL8 rotThrust The total thrust  distance (along the axis of rotation), typically zero.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.
FE_FAILCould not rotate. Check to make su re that the locations and vectors 
that you defined are not colinear or otherwise invalid.
Remarks/Usage:NoneExample:None
 API-706  feAlignTo
3.10.2.6  feAlignTo
feAlignTo
( entityTYPE, entitySET, fromLoc, fromVec, toLoc, toVec )
Description:Aligns entities from one vector to another.Input:
INT4 entityTYPEThe type of entities to be aligned. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_CSYS, 
FT_SURFACE, FT_VOLUME,  FT_SOLID, FT_NODE or 
FT_ELEM. 
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be aligned. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to align. 
REAL8 fromLoc[0..2]The coordinates of the origin of the original vector, in global rectan-
gular coordinates.
REAL8 fromVec[0..2]The components of the original vector, in global rectangular coordi-
nates.
REAL8 toLoc[0..2]The coordinates of the origin of the destination vector, in global rect-
angular coordinates.
REAL8 toVec[0..2]The components of the destination vector, in global rectangular coor-
dinates.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.
FE_FAILCould not align. Check to make su re that the locations and vectors 
that you defined are not colinear or otherwise invalid.
Remarks/Usage:NoneExample:None
feAlignBetweenCSys   API-707
3.10.2.7  feAlignBetweenCsys
feAlignBetweenCSys
( entityTYPE, entitySET, nFromCSysID, nToCSysID )
Description:Aligns entities from one coor dinate system to another.
Input:
INT4 entityTYPEThe type of entities to be aligned. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_CSYS, 
FT_SURFACE, FT_VOLUME, FT_SOLID, FT_NODE or 
FT_ELEM. 
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be aligned. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to align. 
INT4 nFromCSysIDThe ID of the Coordinate System to use as the “From” Coordinate 
System
INT4 nToCSysIDThe ID of the Coordinate System to use as the “To” Coordinate Sys-
tem
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.
FE_FAILCould not align. Check to make su re that the locations and coordi-
nate systems that you selected ar e not colinear or otherwise invalid.
Remarks/Usage:Using this API call is essentially the same as using the Modify, Align...  commands in the user interface 
when the “Between Coordinate Systems” method is selected.
Example:None
 API-708  feScale
3.10.2.8  feScale
feScale
( entityTYPE, entitySET, fromLoc, csysID, xScale, yScale, zScale )
Description:Scales entities around an origin.Input:
INT4 entityTYPEThe type of entities to be scaled. Fo r entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE,  FT_SUR-
FACE, FT_VOLUME, FT_SOLID, FT_NODE, or FT_ELEM. 
INT4 entitySETThe ID of a set that contains a list  of entity IDs that will be scaled. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to scale. 
REAL8 fromLoc[0..2]The coordinates of the origin around which the entities will be 
scaled, in global rectangular coordinates.
INT4 csysID The ID of the coordinate sy stem in which scaling will take place. 
REAL8 xScale
The scale factors in the axis directions of coordinate system 
“csysID”. REAL8 yScale
REAL8 zScaleOutput:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not scale. Remarks/Usage:NoneExample:None
feModifyEdit   API-709
3.10.3  Edit
3.10.3.1  feModifyEdit
feModifyEdit
( entityTYPE, nEntityID )
Description:Modifies an entity using the dialog box for the entity  type available when ed iting via the User Interface.
Input:
INT4 entityTYPEThe type of entities to be  modified via entity specific dialog box. For 
entity information, see Section 3.3.6, "Entity Types". Can be FT_POINT, FT_BOUNDARY , FT_CONNECTION_PROP, 
FT_CONTACT, FT_CONNECTION, FT_CSYS, FT_NODE, 
FT_ELEM, FT_MATL, FT_PROP, FT_LAYUP, FT_FUNCTION, FT_TEXT, FT_AERO_PANEL, FT_AERO_PROP, 
FT_AERO_SPLINE, or FT_AERO_SURF.
INT4 nEntityIDThe ID of the entity to edit via the dialog box for that entity type 
available in User Interface
Output:NoneReturn Code:FE_OK User pressed OK in the dialog boxFE_CANCEL User pressed Cancel in the dialog boxFE_FAIL Could not modify specified entity
FE_INV ALIDnEntityID is a point on a Parasoli d body, which can not be edited 
with this command
FE_NOT_EXIST nEntityID does not exist in the modelFE_BAD_DATA EntityTYPE does not specify a valid typeRemarks/Usage:NoneExample:None
 API-710  feModifyColor
3.10.4  Color and Layer
3.10.4.1  feModifyColor
feModifyColor
( entityTYPE, entitySET, color, randomize )
Description:Modifies the color of selected entities.Input:
INT4 entityTYPEThe type of entities to be modifi ed. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE,FT_SURFACE, FT_SOLID, FT_CONNECTION_PROP,
FT_CONTACT, FT_CONNECTION, FT_CSYS, FT_NODE, 
FT_ELEM, FT_MATL, FT_PROP, FT_TEXT, FT_AERO_PANEL, FT_AERO_PROP, FT_AERO_SPLINE, FT_AERO_SURF, or 
FT_VOLUME.
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be modified. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to modify. 
INT4 color The new color that you wa nt to assign to the selected entities.
BOOL randomizeOnly valid for FT_PROP, FT_MATL, and FT_SURFACE. If True, 
then colors are random ized for the selected entities. The specified 
color is simply used as initializa tion for the randomization process.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not modify. Remarks/Usage:NoneExample:None
feModifyColorMultiple   API-711
3.10.4.2  feModifyColorMultiple
feModifyColorMultiple
( entityTYPE, entitySET, color, method, matchRange, limitToGroupSet )
Description:Modifies the color of selected entities.Input:
INT4 entityTYPEThe type of entities to be modifi ed. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_-
SURFACE, FT_SOLID,  FT_NODE, FT_ELEM, FT_MATL, or 
FT_PROP.
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be modified. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to modify. 
INT4 colorThe first color used when assignin g colors. Other colors are assigned 
“randomly” based on this color.
INT4 method0= Single Color for all entities, 1=Assign color based on entity ID, 
2=Assign color based on entity Type , 3=Assign color based on inclu-
sion in Groups
INT4 matchRangeOnly used when method=1. IDs in bands of this range receive the 
same color. For example if matchR ange=1000, then IDs 1000-1999 
would all be the same color, as would 2000-2999, 3000-3999, ... . Set to 1 for fully random colors.
INT4 limitToGroupSetOnly used when method=3. The ID of  a Set that contains the IDs of 
the Groups to consider when looking for entity inclusion. Set to 0 to 
consider all Groups.
Output:NoneReturn Code:FE_FAIL EntityTYPE does not specify a valid type.Remarks/Usage:NoneExample:None
 API-712  feModifyTransparency
3.10.4.3  feModifyTransparency
feModifyTransparency
( entityTYPE, entitySET, transparency )
Description:Modifies the transparen cy of selected entities.
Input:
INT4 entityTYPEThe type of entities to be modifi ed. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_SURFACE, FT_ELEM, 
FT_PROP, or FT_MATL
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be modified. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to modify. 
REAL8 transparencyThe transparency value to assign. Must be between 0 (opaque) and 
100 (fully transparent).
Output:
NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not modify. Remarks/Usage:NoneExample:None
feModifyLayer   API-713
3.10.4.4  feModifyLayer
feModifyLayer
( entityTYPE, entitySET, layer )
Description:Modifies the layer of selected entities.Input:
INT4 entityTYPEThe type of entities to be modifi ed. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE,
FT_SURFACE, FT_SOLID, FT_CONNECTION_PROP, 
FT_CONTACT, FT_CONNECTION, FT_CSYS, FT_NODE, FT_ELEM, FT_MATL, FT_PROP, FT_TEXT, FT_AERO_PANEL, 
FT_AERO_PROP, FT_AERO_SPLINE, FT_AERO_SURF, or 
FT_VOLUME.
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be modified. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to modify. 
INT4 layer The new layer that you want  to assign to the selected entities.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not modify. Remarks/Usage:NoneExample:None
 API-714  feRenumber
3.10.5  Renumbering
3.10.5.1  feRenumber
feRenumber
( entityTYPE, entitySET, startID )
Description:Renumbers the IDs of selected entities.Input:
INT4 entityTYPEThe type of entities to be modifi ed. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_-SURFACE, FT_VOLUME, FT_SOLID, FT_CSYS, FT_NODE, 
FT_ELEM, FT_MATL, FT_PROP, FT_LAYUP, FT_OUT_CASE, 
FT_GROUP, FT_LOAD_DIR, FT_BC_DIR, FT_AMGR_DIR, 
FT_LAYER, FT_CONNECTION_PROP, FT_CONTACT, FT_-
CONNECTION, and FT_FUNCTION_DIR.
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be modified. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to modify. 
INT4 startIDThe new ID of the first entity to  be renumbered. All other entities 
will be renumbered to available IDs that are higher than this number.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not renumber. Remarks/Usage:For more renumbering options, use feRenumberOpt( )Example:None
feRenumberOpt   API-715
3.10.5.2  feRenumberOpt
feRenumberOpt
( entityTYPE, entitySET, startID, renumMethod, renumCSysID, renumAbs, renumDe-
scend, renumConstOff )
Description:Renumbers the IDs of selected en tities. This method has been su perseded by feRenumberOpt2. 
Input:
INT4 entityTYPEThe type of entities to be modifi ed. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_-
SURFACE, FT_VOLUME, FT_SOLID, FT_CSYS, FT_NODE, FT_ELEM, FT_MATL, FT_PROP, FT_LAYUP, FT_OUT_CASE, 
FT_GROUP, FT_LOAD_DIR, FT_BC_DIR, FT_AMGR_DIR, 
FT_LAYER, FT_CONNECTION_PROP, FT_CONTACT, FT_-CONNECTION, and FT_FUNCTION_DIR.
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be modified. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to modify. 
INT4 startIDThe new ID of the first entity to  be renumbered. All other entities 
will be renumbered to available IDs that are higher than this number.
INT4 renumMethodThe method used for sorting the entities to be renumbered. 0=ID, 
1=Not Available, 2=Color, 3=Layer, 4=X Coord, 5=Y Coord, 6=Z 
Coord, 7=Reference Entity ID (Mat erial ID if renumbering proper-
ties, Property ID if renumbering Elements), 8=Entity Type, 9=Mini-
mum Node ID
INT4 renumCSysIDThe coordinate system ID in whic h coordinate renumbering is done. 
This is only used for the entity TYPEs where X,Y ,Z sorting is avail-
able, and when renumMethod is  set to one of those options
BOOL renumAbsIf True, the absolute value of coor dinate values are used when sort-
ing by coordinates
BOOL renumDescendIf True, the sort is done in Descen ding order, otherwise in Ascending 
order
BOOL renumConstOff If True, all entities are renumbered with a constant ID offset
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not renumber. 
 API-716  feRenumberOpt
Remarks/Usage:
This works just like feRe number, but allows you to specify ad ditional renumbering options. Use feRe-
number for a simpler interface if you are simply renumbering by ID.
Not all combinations of renumMet hod and entityTYPE are available - only those combinations avail-
able in the interactive renumberi ng commands will work properly.
Example:NonefeRenumberOpt
( entityTYPE, entitySET, startID, renumMethod, renumCSysID, renumAbs, renumDe-
scend, renumConstOff )
feRenumberOpt2   API-717
3.10.5.3  feRenumberOpt2
feRenumberOpt2
( entityTYPE, entitySET, startID, renumMethod, renumCSysID, renumAbs, renumDe-
scend, renumConstOff, xyzSortOrder )
Description:Renumbers the IDs of selected en tities. Supersedes feRenumberOpt
Input:
INT4 entityTYPEThe type of entities to be modifi ed. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_-
SURFACE, FT_VOLUME, FT_SOLID, FT_CONNECTION_PROP, FT_CONTACT, FT_CONNECTION, 
FT_CSYS, FT_NODE, FT_ELEM, FT_MATL, FT_PROP, 
FT_LAYUP, FT_LOAD_DIR, FT_LOAD_DEFINITION, 
FT_BC_DIR, FT_BC_DEFINITION, FT_AMGR_DIR, 
FT_FUNCTION_DIR, FT_OUT_CA SE, FT_GROUP, FT_LAYER, 
FT_AERO_PANEL, FT_AERO_PRO P, FT_AERO_SPLINE, and 
FT_AERO_SURF
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be modified. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to modify. 
INT4 startIDThe new ID of the first entity to  be renumbered. All other entities 
will be renumbered to available IDs that are higher than this number.
INT4 renumMethodThe method used for sorting the entities to be renumbered. 0=ID, 
1=Not Available, 2=Color, 3=Layer, 4=X Coord, 5=Y Coord, 6=Z 
Coord, 7=Reference Entity ID (Mat erial ID if renumbering proper-
ties, Property ID if renumbering Elements), 8=Entity Type, 9=Mini-
mum Node ID, 10=Use XYZ So rt Order (zyzSortOrder)
INT4 renumCSysIDThe coordinate system ID in whic h coordinate renumbering is done. 
This is only used for the entity TYPEs where X,Y ,Z sorting is avail-
able, and when renumMethod is  set to one of those options
BOOL renumAbsIf True, the absolute value of coor dinate values are used when sort-
ing by coordinates
BOOL renumDescendIf True, the sort is done in Descen ding order, otherwise in Ascending 
order
BOOL renumConstOff If True, all entities are renumbered with a constant ID offset
INT4 xyzSortOrder[0..2]Specifies the XYZ sort order using 3 unique values. 0=None, 1=+X, 
2=-X, 3=+Y , 4=-Y , 5=+Z, 6=-Z
Output:None
 API-718  feRenumberOpt2
Return Code:
FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not renumber. Remarks/Usage:This works just like feRe number, but allows you to specify ad ditional renumbering options. Use feRe-
number for a simpler interface if you are simply renumbering by ID.
Not all combinations of renumMet hod and entityTYPE are available - only those combinations avail-
able in the interactive renumberi ng commands will work properly.
Example:
Sub Main
    Dim App As femap.model
    Set App = feFemap()
    Dim elset As femap.Set
    Set elset = App.feSet
    elset.AddAll (FT_ELEM)
   Dim xyzOrder(2) As Long
   ‘Use +X, +Y, and +Z as the Sort Order
   xyzOrder(0) = 1
   xyzOrder(1) = 3   xyzOrder(2) = 5
rc = App.feRenumberOpt2 (FT_ELEM, elset.ID, 10000, 10, 0, False, 
False, False, xyzOrder)
End SubfeRenumberOpt2
( entityTYPE, entitySET, startID, renumMethod, renumCSysID, renumAbs, renumDe-
scend, renumConstOff, xyzSortOrder )
feAutoMeshAssociativity   API-719
3.10.6  Associativity
3.10.6.1  feAutoMeshAssociativity
feAutoMeshAssociativity
(  elemSetID, solidSetID, dTolerance, bClearPrevious, bCheckContainment, bAttach-
Midside, bGroupExtra, bMessages, nUnattachedGroup )
Description:Automatically associates both nodes and elements with geometry that  is coincident in your model
Input:
INT4 elemSetIDThe ID of a set that contains a list of element IDs that will be 
attached. Alternatively, if you specify  a negative value, this is simply 
the ID of the single entity to att ach. Nodes are automatically deter-
mined for attachment based on the selected elements.
INT4 solidSetIDThe ID of a set that contains a list of solid IDs to which the mesh will 
be attached.
REAL8 dToleranceThe tolerance value. Node s must be within this tolerance distance of 
the geometry that they will be associated too.
BOOL bClearPreviousIf True, removes and previous attt achments from the nodes/elements 
prior to completing this command.
BOOL bCheckContainmentIf True and you are associating to mul tiple solids this will first find 
the solid that you an element is in  by checking the containment of the 
location of its centroid.
BOOL bAttachMidsideIf True, midside nodes will be associ ated as well as corner nodes., 
Otherwise only corners will be associated.
BOOL bMessagesIf True, status and warning messag es will be written during the pro-
cessing
Output:
INT4 nUnattachedGroupThe ID of a group that will receiv e any geometry th at could not be 
attached fully
Return Code:NoneRemarks/Usage:NoneExample:None
 API-720  feMeshAttach
3.10.6.2  feMeshAttach
feMeshAttach
(  entityTYPE, entitySET, attachTYPE, attachID, doNodes )
Description:Associates nodes or elements  with specified geometry.
Input:
INT4 entityTYPEThe type of entities to be attach ed. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be  FT_NODE or FT_ELEM.
INT4 entitySETThe ID of a set that contains a list  of entity IDs that will be attached. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to attach. 
INT4 attachTYPEThe type of geometry to attach  the node/element to. Can be 
FT_POINT, FT_CURVE, FT_SURFACE, or FT_SOLID.
INT4 attachID The ID of th e geometry to attach to.
BOOL doNodesOnly used if entityTYPE=FT_ELEM. In this case, if True, then the 
nodes on the element will also be associated with the same geometry 
as the element.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not attach. Remarks/Usage:NoneExample:None
feMeshAttachNodes   API-721
3.10.6.3  feMeshAttachNodes
feMeshAttachNodes
(  nNodes, nodeID, attachTYPE, attachID )
Description:Associates nodes with specified geometry.Input:INT4 nNodes The number of nodes specified in the other arraysINT4 nodeID[0..nNodes-1] T he IDs of the nodes bein g attached to geometry. 
INT4 attachTYPE[0..nNodes-1]The types of geometry to attach th e node/element to. Entries can be 
FT_POINT, FT_CURVE, FT_SURFACE, or FT_SOLID.
INT4 attachID[0..nNo des-1] The IDs of the geometry  to attach each node to.
Output:NoneReturn Code:FE_INV ALID One or more attachTYPE s do not specify a valid type.
FE_FAIL Could not attach one or more nodes Remarks/Usage:For each node you want to attach to geometry, ther e must be corresponding entries in the three arrays.
Example:None
 API-722  feMeshDetach
3.10.6.4  feMeshDetach
feMeshDetach
(  entityTYPE, entitySET, attachTYPE, attachID, interior )
Description:Removes association between nodes or  elements and specified geometry.
Input:
INT4 entityTYPEThe type of entities to be detach ed. For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be  FT_NODE or FT_ELEM.
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be detached. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to detach. 
INT4 attachTYPEThe type of geometry to attach  the node/element to. Can be 
FT_POINT, FT_CURVE, FT_SURFAC E, or FT_SOLID. You can 
also specify attachTYPE=0, in which case attachID is not used, and 
the node/element is detached from all geometry.
INT4 attachID The ID of the geometry to detach. Not used if attachTYPE=0.
BOOL interiorOnly used if entityTYPE=FT_NODE, and attach-
TYPE=FT_CURVE, FT_SURFACE or FT_SOLID. If True, the node is detached only if  it is an interior node.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not detach. Remarks/Usage:NoneExample:None
feModifyDefCSys   API-723
3.10.7  Other Updates
3.10.7.1  feModifyDefCSys
feModifyDefCSys
(  entityTYPE, entitySET, csysID )
Description:Updates the definition coordina te system of selected entities.
Input:
INT4 entityTYPEThe type of entities to be updated. For entity information, see Section 
3.3.6, "Entity Types". Can be  FT_CSYS, FT_POINT, or FT_NODE.
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be updated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to update. 
INT4 csysIDThe ID of the coordinate system to use as the definition coordinate 
system.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not update. Check to see  that coordinate system exists. 
Remarks/Usage:NoneExample:None
 API-724  feModifyOutCSys
3.10.7.2  feModifyOutCSys
feModifyOutCSys
(  entityTYPE, entitySET, csysID )
Description:Updates the output coordinate  system of selected entities.
Input:
INT4 entityTYPEThe type of entities to be updated. For entity information, see Section 
3.3.6, "Entity Types". Must be FT_NODE.
INT4 entitySETThe ID of a set that contains a list of entity IDs that will be updated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to update. 
INT4 csysIDThe ID of the coordinate system to use as the output coordinate sys-
tem.
Output:NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not update. Check to see  that coordinate system exists. 
Remarks/Usage:NoneExample:None
feModifyPermBC   API-725
3.10.7.3  feModifyPermBC
feModifyPermBC
(  entitySET, t1, t2, t3, r1, r2, r3 )
Description:Updates the permanent constraints on nodes.Input:
INT4 entitySETThe ID of a set that contains a list  of node IDs that  will be updated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single node to update. 
BOOL t1
Corresponds to the six degrees of freedom of each node. If True, the 
associated degree of freedom is constrained.BOOL t2
BOOL t3
BOOL r1
BOOL r2BOOL r3Output:NoneReturn Code:FE_FAIL Could not update. Remarks/Usage:NoneExample:None
 API-726  feModifySplineOrder
3.10.7.4  feModifySplineOrder
feModifySplineOrder
(  entitySET, order )
Description:Updates the order of b-spline curves.Input:
INT4 entitySETThe ID of a set that contains a list  of curve IDs that will be updated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single curve to update. 
INT4 orderThe new order of the b-spline curv e. Must be a value between 3 and 
10.
Output:NoneReturn Code:FE_FAIL Could not update. Remarks/Usage:Only used with standard geometry engine b-splines - not solid engine curves.
Example:None
feModifySplineKnots   API-727
3.10.7.5  feModifySplineKnots
feModifySplineKnots
(  entitySET, knotLoc )
Description:Insert knots into b-spline curves.Input:
INT4 entitySETThe ID of a set that contains a list  of curve IDs that will be updated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single curve to update. 
REAL8 knotLoc[0..2] The location, in global r ectangular coordinates, of the knot to insert.
Output:None
Return Code:
FE_FAIL Could not update. Remarks/Usage:Only used with standard geometry engine b-splines - not solid engine curves.
Example:None
 API-728  feModifyReverseCurve
3.10.7.6  feModifyReverseCurve
feModifyReverseCurve
(  entitySET )
Description:Reverses the direction of selected curves.Input:
INT4 entitySETThe ID of a set that contains a list  of curve IDs that will be updated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single curve to update. 
Output:NoneReturn Code:
FE_FAIL Could not update. 
Remarks/Usage:Only used with standard geometry engine curves - not solid engine curves.
Example:None
feModifyNoMergeCurve   API-729
3.10.7.7  feModifyNoMergeCurve
feModifyNoMergeCurve
(  entitySET, bNoMerge )
Description:Marks selected curves as mergeable or nonmergeable.Input:
INT4 entitySETThe ID of a set that contains a list  of curve IDs that will be updated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single curve to update. 
BOOL bNoMerge If True, curves are made nonm ergeable. If False, they are mergeable.
Output:None
Return Code:
FE_FAIL Could not update. Remarks/Usage:Only used with solid engine curves - not standard geometry engine curves.
Example:None
 API-730  feModifySurfaceDivisions
3.10.7.8  feModifySurfaceDivisions
feModifySurfaceDivisions
(  entitySET, sDiv, tDiv, tolerance )
Description:Updates the graphical divisions and facetting used to display surfaces.
Input:
INT4 entitySETThe ID of a set that contains a list of surface IDs that will be updated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single surface to update. 
INT4 sDivThe number of divisions displayed along the first parametric direc-
tion of the surface.
INT4 tDivThe number of divisions displayed along the second parametric 
direction of the surface.
REAL8 toleranceThe accuracy with which the grap hical facetting of solid geometry 
engine surfaces is created. Decreasi ng this number results in more 
facets and slower draw times, bu t a closer approximation to the 
actual geometry. Increasing the number speeds up draw times, but can lead to coarse approximat ions of the true geometry.
Output:NoneReturn Code:FE_FAIL Could not update. Remarks/Usage:NoneExample:None
feModifySurfaceNormal   API-731
3.10.7.9  feModifySurfaceNormal
feModifySurfaceNormal
(  entityTYPE, entitySET )
Description:Reverses the normal direction of surfaces of Paraso lid Sheet Solids. Only surfaces which are part of a 
Parasolid Sheet Solid  have their normal direction reve rsed. Also, if only a subset of surfaces comprising 
a sheet solid are selected, ALL of the surfaces will be reversed, not just the selected surfaces.
Input:
INT4 entityTYPEThe type of entities to be updated. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_SURFACE or FT_SOLID.
INT4 entitySETThe ID of a set that contains a list of surface or solid (sheet solids 
only) IDs that will be updated. Alte rnatively, if you specify a nega-
tive value, this is simply the ID of  the single surface or sheet solid to 
update. 
Output:NoneReturn Code:FE_FAIL Could not update. Remarks/Usage:It is important that no surfaces whic h are on a Parasolid Solid are incl uded in the set of surfaces, other-
wise the normal direction will not be reversed on any surfaces, not just th e surfaces on the Solid(s).
Example:None
 API-732  feModifySolidFacetting
3.10.7.10  feModifySolidFacetting
feModifySolidFacetting
(  entitySET, sDiv, tDiv, dAngleTol, dChordTol, dCurveFactor  )
Description:Updates the graphical divisions and facetting used to display solids.
Input:
INT4 entitySETThe ID of a set that contains a list  of solid IDs that will be updated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single solid to update. 
INT4 sDivThe number of divisions displayed along the first parametric direc-
tion of the surfaces of the solid.
INT4 tDivThe number of divisions displayed along the second parametric 
direction of the surfaces of the solid.
REAL8 dAngleTol The percent of angle error allowed between the solid and facetsREAL8 dChordTol The percent of chord error allowed between the solid and facets
REAL8 dCurveFactorThe refinement factor for curve face ts compared to the default solid 
facetting.
Output:NoneReturn Code:FE_FAIL Could not update. Remarks/Usage:NoneExample:None
feModifySuperelementID   API-733
3.10.7.11  feModifySuperelementID
feModifySuperelementID
(  entitySET, nSEID )
Description:Updates the superelementID of a set of nodes.Input:
INT4 entitySETThe ID of a set that contains a list  of node IDs that  will be updated. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single node to update. 
INT4 nSEID The superelementID to assign to the nodes.Output:None
Return Code:
FE_FAIL Could not update. Remarks/Usage:NoneExample:None
 API-734  feModifyLoadPhase
3.10.7.12  feModifyLoadPhase
feModifyLoadPhase
( entityTYPE, entitySET, phase )
Description:Updates the phase of selected loads.Input:
INT4 entityTYPEThe type of entities where the loads to be modified are applied. For 
entity information, see Section 3.3.6, "Entity Types". Can be 
FT_NODE, FT_ELEM, FT_POINT, FT_CURVE, or FT_SUR-
FACE. This is the type of entity  that is selected in entitySET.
INT4 entitySETThe ID of a set that contains a list of entity IDs where the loads are 
applied. Alternatively, if you specify a negative value, this is simply 
the ID of the single entity  with a load applied. 
REAL8 phase The new phase value.
Output:
NoneReturn Code:FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not update. Remarks/Usage:Only loads in the active load set w ill be updated. The selection/specific ation of entities refers to the enti-
ties where the loads are applie d - not the loads themselves.
Example:None
feModifyElemPropID   API-735
3.10.8  Element Updates
3.10.8.1  feModifyElemPropID
feModifyElemPropID
(  entitySET, propID )
Description:Updates the property ID of selected elements.Input:
INT4 entitySETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
INT4 propIDThe ID of the new property to assi gn to the elements. This property 
must be compatible with the element types chosen.
Output:
None
Return Code:FE_INV ALID EntityTYPE does not specify a valid type.
FE_FAILCould not update. Check to see that property exists and is of the cor-
rect type. 
Remarks/Usage:NoneExample:None
 API-736  feModifyPropMatlID
3.10.8.2  feModifyPropMatlID
feModifyPropMatlID
(  entitySET, matlID )
Description:Updates the material ID of selected properties.Input:
INT4 entitySETThe ID of a set that contains a list of property IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single property to update. 
INT4 matlID The ID of the new mate rial to assign to the properties.
Output:None
Return Code:
FE_INV ALID EntityTYPE does not specify a valid type.FE_FAIL Could not update. Check to see that material exists.Remarks/Usage:This method only updates the prim ary material identifier. Laminate properties cannot be updated using 
this method.
Example:None
feModifyMaterialAngle   API-737
3.10.8.3  feModifyMaterialAngle
feModifyMaterialAngle
( entitySET, method, vecDir, coordDir, coordCSys, angle )
Description:Updates the material angle of selected entities.Input:
INT4 entitySETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
INT4 methodThe method for specifying material angles: 0=None/Off, 1=Vector, 
2=CoordSys, 3=Angle.
REAL8 vecDir[0..2] The vector to be used for definition of material angles if method=1.
INT4 coordDirSets the direction (0=X,1=Y ,2=Z) in  the specified coordinate system 
to be used for material angl es. Only used if method=2.
INT4 coordCSys Sets the coordinate system ID to be used if method=2.
REAL8 angleSets the angle to be used for the definition of material angles when 
method=3.
Output:NoneReturn Code:FE_FAIL Could not define material angle.Remarks/Usage:To turn material angles off for the sel ected elements, simply  specify method=0. 
Example:None
 API-738  feModifyElemReverse2
3.10.8.4  feModifyElemReverse2
feModifyElemReverse2
( entitySET, method, vecDir, csysID, csysDir, bPreserveMatlDir)
Description:Reverses the normal of planar elements, or optionally spins them to orient the first edge along a vector.
Input:
INT4 entitySETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
INT4 methodThe method for updating the elem ents: 0=Reverse, 1=Normals Out-
ward, 2=Normals Inward, 3=Align to Vector, 4=Align to CSys 
Direction.
REAL8 vecDir[0..2]The vector to be used for aligning the first edge of the elements if 
method=3.
INT4 csysID ID of Coordinate System to use if method=4
INT4 csysDirCoordinate system axis to use to align first edge if method=4. This 
must have values 1=X (or R), 2=Y (or theta), 3=Z (or phi). You can 
also specify -1,-2, or -3 to ch oose the negative coordinate system 
direction.
BOOL bPreserveMatlDirSet to True to preserve the material  direction of the elements being 
reversed or reoriented. Set to False to update the material direction of 
elements being reversed or reoriented.
Output:NoneReturn Code:FE_FAIL Could not update.Remarks/Usage:This method should only be used with planar elements.
Example:None
feModifyElemReverse   API-739
3.10.8.5  feModifyElemReverse
feModifyElemReverse
( entitySET, method, vecDir )
Description:Reverses the normal of planar elements, or optionally spins them to orient the first edge along a vector.  
This method is obso lete - feModifyElemReverse2( ) provides additional functionality.
Input:
INT4 entitySETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
INT4 methodThe method for updating the elem ents: 0=Reverse, 1=Normals Out-
ward, 2=Normals Inward, 3=Align to Vector.
REAL8 vecDir[0..2]The vector to be used for aligning the first edge of the elements if 
method=3.
Output:
NoneReturn Code:FE_FAIL Could not update.Remarks/Usage:This method should only be used with planar elements.
Example:None
 API-740  feModifyElemRelease
3.10.8.6  feModifyElemRelease
feModifyElemRelease
( entitySET, rel1, rel2 )
Description:Updates the releases at the ends at the ends of beam (and other) elements.Input:
INT4 entitySETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
BOOL rel1[0..5]The release flags for End 1 of the element. Specify True to release a 
corresponding elemental degree of freedom.
BOOL rel2[0..5]The release flags for End 2 of the element. Specify True to release a 
corresponding elemental degree of freedom.
Output:NoneReturn Code:FE_FAIL Could not update.Remarks/Usage:This method should only be used with beam or bar elements.Example:None
feModifyElemOrder   API-741
3.10.8.7  feModifyElemOrder
feModifyElemOrder
( entitySET, makeParabolic, ontoGeometry, maxAngle )
Description:Updates the order of elements between linear and parabolic.Input:
INT4 entitySETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
BOOL makeParabolicSet to True to convert elements to parabolic. Se t to False to convert 
to linear elements. Mids ide nodes will be create d when converting to 
parabolic.
BOOL ontoGeometryIf you are converting to parabolic, set  to True to project the midside 
nodes onto any referenced geometry . Set to False to leave the nodes 
at the midside.
REAL8 maxAngleIf you are projecting midside nodes onto geometry, this is the maxi-
mum angle that any edge can be distorted by the movement.
Output:NoneReturn Code:FE_FAIL Could not update.Remarks/Usage:This method should only be used with elemen ts that have both linear and parabolic types.
Example:None
 API-742  feModifyMidside
3.10.8.8  feModifyMidside
feModifyMidside
( elemSET, nodeSET )
Description:Updates the midside nodes of se lected elements to be at th e middle of the element edge.
Input:
INT4 elemSETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
INT4 nodeSETThe ID of a set that contains a li st of node IDs that will not be 
updated. All midside nodes on the elements in elemSET are normally 
updated. If you want to skip some nodes, include th em in this set. 
Specify nodeSET=0 if you want to update all midside nodes.
Output:
None
Return Code:FE_FAIL Could not update.Remarks/Usage:NoneExample:None
feModifyFormulation   API-743
3.10.8.9  feModifyFormulation
feModifyFormulation
( elemSET, form1, form2 )
Description:Updates the element formula tion for selected elements.
Input:
INT4 elemSETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
INT4 form1
The formulation values.
INT4 form2
Output:
None
Return Code:FE_FAIL Could not update.Remarks/Usage:NoneExample:None
 API-744  feModifySplitQuads
3.10.8.10  feModifySplitQuads
feModifySplitQuads
( elemSET, form1, form2 )
Description:Splits quadrilateral elements into triangular elements.
Input:
INT4 elemSETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
Output:NoneReturn Code:
FE_FAIL Could not update.
Remarks/Usage:The split direction is automatic ally chosen to get the best shaped tr iangles; no further input is required.
Example:None
feModifyOffsets   API-745
3.10.8.11  feModifyOffsets
feModifyOffsets
( elemSET, endA, endB, radial, offA, offB )
Description:Modifies the offsets of beam and bar elements.Input:
INT4 elemSETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
BOOL endA If True, the offset at the fi rst end of the element will be updated.
BOOL endB If True, the offset at the se cond end of the elem ent will be updated.
BOOL radialIf True, the offsets are radial, around a location, instead of being vec-
tor based.
REAL8 offA[0..2]If radial=True, these are the coordinates of the center location. If 
radial=False, then these are components of the vector offset at the 
first end of the element.  In either case, the values are specified in 
global rectangular coordinates.
REAL8 offB[0..2]If radial=True, then offB[0] is the radial offset length, and the other 
offB values are not used. If radial=F alse, then offB contains the com-
ponents of the vector offset at  the second end of the element.
Output:NoneReturn Code:FE_FAIL Could not update.Remarks/Usage:This method can only be u sed with elements that have offsets: beams and bars.
Example:None
 API-746  feModifyOffsetsToRefPt
3.10.8.12  feModifyOffsetsToRefPt
feModifyOffsetsToRefPt
( elemSET )
Description:Modifies the offsets of beam and bar elements so  that the shape reference point is at the nodes.
Input:
INT4 elemSETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
Output:NoneReturn Code:
FE_FAIL Could not update.
Remarks/Usage:This method can only be used with  elements that have offsets: beam s and bars. Likewise, it can only be 
used if the reference point on the property associated with the elements has been properly defined. Off-
sets for each element are redefine d so that the reference point is moved to the nodal location.
Example:None
feModifyOrient   API-747
3.10.8.13  feModifyOrient
feModifyOrient
( elemSET, method, nNodeOrCSysID, orientVec )
Description:Modifies the orienta tion of line elements.
Input:
INT4 elemSETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
INT4 methodDefines the method used for updating  the orientation: 0=Orient with 
third node, 1=Orient with Vector defined in Global Rectangular Coordinates, -1= Orient with Vector defined in Coordinate System 
specified for nNodeOrCSysID, 2= Convert existing orientation to 
equivalent vectors, 3=Make existin g orientation perpendicular to ele-
ments, 4=Orient Radially with rega rd to Coordinate System specified 
for nNodeOrCSysID, 5=Orient by applying Orientation Coordinate 
System specified for nNodeOrCSysID
INT4 nNodeOrCSysIDIf method=0, ID of the node to use as a third node for orientation. 
If method=-1, this contains the ID of the coordinate system in which 
the orientVec is specified. If method=5 , this contains the ID of Coor-
dinate System to use as an Orientation Coordinate System.
REAL8 orientVEC[0..2]The components, in global rectangula r coordinates, of the orientation 
vector to use if method=1. The comp onents of the orientation vector, 
in coordinate system specified for nNodeOrCSysID to use if 
method=-1. If method=4, values are ignored.
Output:NoneReturn Code:FE_FAIL Could not update.Remarks/Usage:This method can only be used with elements that have orientations. Method=4 can be used to orient ele-
ments in a radial direction by specifying any type of coordinate system. Method=5 should only be used to specify an Orientation Coordi nate System for Spring/Damper el ements referencing a CBUSH Prop-
erty or Spring/Damper to Ground elements.
Example:None
 API-748  feModifyElemType
3.10.8.14  feModifyElemType
feModifyElemType
( elemSET, propID, method, nodeID, orientVec )
Description:Modifies the element type of elements.Input:
INT4 elemSETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
INT4 propIDThe ID of the new property to a ssign to the elements. The element 
type is changed to match the type of the property.
INT4 methodDefines the method used for updating  the orientation: 0=Orient with 
third node, 1=Orient with Vector. This parameter is only used if you 
are modifying line elements with no orientation to a type that 
requires orientation.
INT4 nodeIDThe ID of the node to use as a third node for orientation - only used if 
method=0. This parameter is only used if you are modifying line ele-
ments with no orientation to a type that requires orientation.
REAL8 orientVEC[0..2]The components, in global rectangula r coordinates, of the orientation 
vector to use if method =1. This parameter is only used if you are 
modifying line elements with no orie ntation to a type that requires 
orientation.
Output:NoneReturn Code:FE_FAIL Could not update.Remarks/Usage:This method will only work to cha nge elements from one type to anot her if the element shapes are com-
patible.
Example:None
feModifyBeamWarping   API-749
3.10.8.15  feModifyBeamWarping
feModifyBeamWarping
( elemSET, method, nodeType,nodeID_endA, nodeID_endB )
Description:Modifies/Creates warping NODES or SPOINTS for Beam Warping.
Input:
INT4 elemSETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
INT4 methodDefines the method for upda ting the warping node. 0 = 
None(Remove), 1 = Continuous, 2 = All Continuous, 3 = Discontin-uous.
INT4 nodeType The type of node to create 0 = Node, 1 = SPOINT.
INT4 nodeID_endA, 
nodeID_endBIf the elemSET contains a single el ement then the warping node for 
endA and endB will be set to nodeID_endA, no deID_endB respec-
tively. 
Output:NoneReturn Code:FE_FAIL Could not update.Remarks/Usage:This method can only be used with Beam elements.
Example:None
 API-750  feModifyLineElementDirection
3.10.8.16  feModifyLineElementDirection
feModifyLineEl ementDirection
( elemSET, reverseMode, nAlignToElemID, AlignToVector)
Description:Modifies line element directions.Input:
INT4 elemSETThe ID of a set that contains a list of element IDs that will be 
updated. Alternatively, if  you specify a negative value, this is simply 
the ID of the single element to update. 
ENUM reverseModeSpecifies whether to reverse directio n, align to element, or align to 
vector.
INT4 nAlignToElemID The ID of th e element to align direction to.
REAL8 AlignToVector[0..2]A variant with the vector directio n from original to set the element 
directions to. 
Output:NoneReturn Code:FE_FAIL Could not update.Remarks/Usage:This method can only be used with line elements.
Example:None
feConnectLinearParabolic   API-751
3.10.8.17  feConnectLinearParabolic
feConnectLinearParabolic
( enType, nSetID, bAddMidside, bMerge , bGroupBadMidnodes, bGroupUpdatedEle-
ments )
Description:The method connects linea r to parabolic elements.
Input:
INT4 enTypeThe entity type for connecting se lection. 5 = FT_SURFACE, 7 = 
FT_NODE, 8 = FT_ELEM, 39 = FT_SOLID. 
INT4 nSetID The ID of the set of entities to use for connecting.
BOOL bAddMidsideIf True, the midside nodes are added to the linear elements. If False, 
the midside nodes are removed from the parabolic elements.
BOOL bMerge If True, nodes will be merged before updating. BOOL bGroupBadMidnodes If True, disconnec ted nodes will be added to a group. 
BOOL bGroupUpdateElements If True, the updated elements will be added to a group. Output:NoneReturn Code:FE_BAD_TYPE Wrong entity type was used.Remarks/Usage:None.Example:None
 API-752  feModifyPlateThickOffsetBetweenNodes
3.10.8.18  feModifyPlateThickOffsetBetweenNodes
feModifyPlateThickOffsetBetweenNodes
(nSetID, nUpdating, nFromNode, dFromValue, nToNode, dToValue,
bAverageForElement, dTolerance, dMinValue, dMaxValue)
Description:Modifies the Element Thickness, Pr operty Thickness, or Element Offset of the specified elements by 
varying the thickness or offset fro m the value specified at one node (From Node) to the value specified 
at another node (To Node). Th is method provides programmatic access to functionality of the Modify, 
Update Elements, Adjust Plate Thickness/Offset  command when Method  is set to Vary Between Nodes .
Input:
INT4 nSetIDThe ID of a set that contains a list  of element IDs that will have the 
thickness or offset modified 
ENUM nUpdatingSpecifies what is being modified.
FPTO_ELEM_THICKNESS = Element Thickness (0)FPTO_PROP_THICKNESS = Property Thickness (1)FPTO_ELEM_OFFSET = Element Offset (2)
INT4 nFromNode The ID of the node to start modificationREAL8 dFromValue Staring value for modification at nFromNodeINT4 nToNode The ID of the node to end modificationREAL8 dToValue Ending value for modification at nToNode
BOOL bAverageForElementOnly used when nUpdating is set to FPTO_ELEM_THICKNESS or 
FPTO_PROP_THICKNESS. When True , applies a single thickness 
value to an element, based on the average of the thickness values at 
the element’s corners. When Fal se, the corner values are used 
directly, creating an element with a variable thickness. See Remarks.
REAL8 dTolerance Tolerance used to aggregate or round computed values
REAL8 dMinValueSpecifies the minimum value. Anyt hing lower will be assigned this 
value. Set to 0.0 for no limit.
REAL8 dMaxValueSpecifies the maximum value. Anythi ng higher will be assigned this 
value. Set to 0.0 for no limit.
Output:NoneReturn Code:FE_FAIL Could not update.Remarks/Usage:
feModifyPlateThickOffsetBetweenNodes   API-753
When nUpdating is set to FPTO_PR OP_THICKNESS, additional properties will be created, as that is 
the only way new thickness values can be ass igned to the elements by property. Also, 
FPTO_ELEM_THICKNESS should only be used when cr eating a model for Nast ran or another solver 
which supports thickness overrides of property va lues at element corners.
Example:
Sub Main
    Dim App as femap.model
    Set App = feFemap()
    Dim elset As femap.Set
    Set elset = App.feSet
elset.Select (FT_ELEM, True, "Select Elements")
    rc = App.feModifyPlateThickOffsetBetweenNodes (elset.ID, 
FPTO_ELEM_THICKNESS, 121, 0.1, 111, 0.2, False, 1.E-8, 0, 0)
App.feWindowRegenerate (0)
End SubfeModifyPlateThickOffsetBetweenNodes
(nSetID, nUpdating, nFromNode, dFromValue, nToNode, dToValue,
bAverageForElement, dTolerance, dMinValue, dMaxValue)
 API-754  feModifyPlateThickOffsetValue
3.10.8.19  feModifyPlateThickOffsetValue
feModifyPlateThickOffsetValue
(nSetID, nUpdating, nMethod, dValue, bAverageForElement, dTolerance, dMinValue, 
dMaxValue)
Description:Modifies the Element Thickness, Pr operty Thickness, or Element Offset of the specified elements by 
varying the thickness or offset using a specified method. This method prov ides programmatic access to 
functionality of the Modify, Update Elements, Adjust Plate Thickness/Offset  command when Method  is 
set to Equation or Constant , but is specifically designed to work  with “constants”. To use the “Equa-
tion” capabilities, see Sec tion 3.10.8.20, "feModifyP lateThickOffsetEquation"
Input:
INT4 nSetIDThe ID of a set that contains a list  of element IDs that will have the 
thickness or offset modified 
ENUM nUpdatingSpecifies what is being modified.
FPTO_ELEM_THICKNESS = Element Thickness (0)FPTO_PROP_THICKNESS = Property Thickness (1)
FPTO_ELEM_OFFSET = Element Offset (2)
ENUM nMethodSpecifies the modification method.
Available for all nUpdating options:FPTM_SETTOV ALUE = Value (0). Simply specifies a single value 
for all elements
FPTM_INCREMENT = Increment (1). Value can be positive or neg-
ative and will simply be added to  or subtracted from the existing 
thickness/offsets
FPTM_ADJUSTPCT = Percent (2). Valu e can be positive or nega-
tive, must be entered as a percentage , and is used to modify the thick-
ness/offsets by multiplying the origin al thickness/offsets by 1/100 of 
entered value, then adding the valu e to or subtracting the value from 
the original thickness/offsets.
Only available when nUpdatin g is set to FPTO_ELEM_OFFSET:
FPTM_TOPTONODE = Top At Nodes (3). Creates the appropriate offsets in order to have nodes of each element coincide with the 
“top” of each element, based on thickness
FPTM_BOTTOMTONODE = Bottom At  Nodes (4). Creates the 
appropriate offsets in order to ha ve nodes of each element coincide 
with the “bottom” of each element, based on thicknes
REAL8 dValueValue used when nMethod is set to FPTM_SETTOV ALUE, FPT-
M_INCREMENT, or FPTM_ADJUSTPCT
feModifyPlateThickOffsetValue   API-755
BOOL bAverageForElementOnly used when nUpdating is set to FPTO_ELEM_THICKNESS or 
FPTO_PROP_THICKNESS. When True , applies a single thickness 
value to an element, based on the average of the thickness values at 
the element’s corners. When Fal se, the corner values are used 
directly, creating an element with a variable thickness. See Remarks.
REAL8 dTolerance Tolerance used to aggregate or round computed values
REAL8 dMinValueSpecifies the minimum value. Anyt hing lower will be assigned this 
value. Set to 0.0 for no limit.
REAL8 dMaxValueSpecifies the maximum value. Anythi ng higher will be assigned this 
value. Set to 0.0 for no limit.
Output:NoneReturn Code:FE_FAIL Could not update.Remarks/Usage:When nUpdating is set to FPTO_PR OP_THICKNESS, additional properties will be created, as that is 
the only way new thickness values can be ass igned to the elements by property. Also, 
FPTO_ELEM_THICKNESS should only be used when cr eating a model for Nast ran or another solver 
which supports thickness overrides of property va lues at element corners.
Example:feModifyPlateThickOffsetValue
(nSetID, nUpdating, nMethod, dValue, bAverageForElement, dTolerance, dMinValue, 
dMaxValue)
 API-756  feModifyPlateThickOffsetEquation
3.10.8.20   feModifyPl ateThickOffsetEquation
feModifyPlateThickOffsetEquation
(nSetID, nUpdating, nMethod, sNodeElemVariable, sEquation, bAverageForElement, 
dTolerance, dMinValue, dMaxValue)
Description:Modifies the Element Thickness, Pr operty Thickness, or Element Offset of the specified elements by 
varying the thickness or offset using a specified method. This method prov ides programmatic access to 
functionality of the Modify, Update Elements, Adjust Plate Thickness/Offset  command when Method  is 
set to Equation or Constant , but is specifically designed to work  with “equations”. To use the “Equa-
tion” capabilities, see Sec tion 3.10.8.19, "feModifyPlateThickOffsetValue".
Input:
INT4 nSetIDThe ID of a set that contains a list  of element IDs that will have the 
thickness or offset modified 
ENUM nUpdatingSpecifies what is being modified.
FPTO_ELEM_THICKNESS = Element Thickness (0)FPTO_PROP_THICKNESS = Property Thickness (1)
FPTO_ELEM_OFFSET = Element Offset (2)
ENUM nMethodSpecifies the modification meth od which evaluates the equation.
Available for all nUpdating options:FPTM_SETTOV ALUE = Value (0). Si mply specifies uses the single 
value for all elements
FPTM_INCREMENT = Increment (1). Value can be positive or neg-
ative and will simply be added to  or subtracted from the existing 
thickness/offsets
FPTM_ADJUSTPCT = Percent (2). Valu e can be positive or nega-
tive, must be entered as a percentage , and is used to modify the thick-
ness/offsets by multiplying the origin al thickness/offsets by 1/100 of 
entered value, then adding the valu e to or subtracting the value from 
the original thickness/offsets.
Does NOT evaluate the entered equa tion. Only used when nUpdating 
is set to FPTO_ELEM_OFFSET:FPTM_TOPTONODE = Top At Nodes (3). Creates the appropriate 
offsets in order to have nodes of each element coincide with the 
“top” of each element, based on thicknessFPTM_BOTTOMTONODE = Bottom At  Nodes (4). Creates the 
appropriate offsets in order to ha ve nodes of each element coincide 
with the “bottom” of each element, based on thickness
STRING sNodeElemVariable String that contains the name of th e variable used for Nodes if updat-
ing thickness or Elements if updatin g offsets. Typically set to “i”, as 
it is in the dialog box of th e command in the user interface
feModifyPlateThickO ffsetEquation   API-757
STRING sEquation String that contains the equation, which typically would contain ref-
erences to node or element locations and use the value specified for 
sNodeElemVariable. See Remarks.
BOOL bAverageForElementOnly used when nUpdating is set to FPTO_ELEM_THICKNESS or 
FPTO_PROP_THICKNESS. When True , applies a single thickness 
value to an element, based on the average of the thickness values at 
the element’s corners. When Fal se, the corner values are used 
directly, creating an element with a variable thickness. See Remarks.
REAL8 dTolerance Tolerance used to aggregate or round computed values
REAL8 dMinValueSpecifies the minimum value. Anyt hing lower will be assigned this 
value. Set to 0.0 for no limit.
REAL8 dMaxValueSpecifies the maximum value. Anythi ng higher will be assigned this 
value. Set to 0.0 for no limit.
Output:
NoneReturn Code:FE_FAIL Could not update.Remarks/Usage:Typically, the FEMAP “Functions” used  for equations this command are:
Node = XND(!i), YND(!i), ZND(!i)
Element Centroid = XEL(!i), YEL(!i), ZEL(!i)Element Face = XEF(!i;faceID), YEF(!i;faceID), ZEF(!i ;faceID), where face ID is a value from 1 to 6 
specified by the user
For a full list of available FEMAP “Functions”,  see Section C, "Function Reference" of the FEMAP 
User Guide
When nUpdating is set to FPTO_PR OP_THICKNESS, additional properties will be created, as that is 
the only way new thickness values can be ass igned to the elements by property. Also, 
FPTO_ELEM_THICKNESS should only be used when cr eating a model for Nast ran or another solver 
which supports thickness overrides of property va lues at element corners.
Example:feModifyPlateThickOffsetEquation
(nSetID, nUpdating, nMethod, sNodeElemVariable, sEquation, bAverageForElement, 
dTolerance, dMinValue, dMaxValue)
 API-758  feModifyPlateThickOffsetReset
3.10.8.21  feModifyPlateThickOffsetReset
feModifyPlateThickOffsetReset
(nSetID, bResetElementThickness, bResetElementOffset )
Description:Resets the Element Thickness and/or Element Offset of the specified elements . This method provides 
programmatic access to functionality of the Reset Element Thickness  and Reset Element Offset  buttons 
of the Modify, Update Elements, Ad just Plate Thickness/Offset  command
Input:
INT4 nSetIDThe ID of a set that contains a list of element IDs that will have the 
element thickness and/or offset reset.
BOOL bResetElementThicknessWhen True, resets the element thic kness property overrides for the 
specified elements. When  False, does nothing.
BOOL bResetElementOffsetWhen True, resets the element of fsets for the specified elements. 
When False, does nothing.
Output:
NoneReturn Code:NoneRemarks/Usage:This command cannot remove any thickness values for pl ate elements specified on  Properties. It is only 
removing the thickness values speci fied for elements which override the property thickness values.
Example:None
   API-759
3.11  Delete Methods
Delete Methods include:
•Section 3.11.1, "feDeleteAll"
•Section 3.11.2, "feDelete"
•Section 3.11.3, "feDeleteMesh"
•Section 3.11.4, "feDeleteLoads"
•Section 3.11.5, "feDeleteConstraints"
•Section 3.11.6, "feDeleteOutputV2"
•Section 3.11.7, "feDeleteOutput2V2"
•Section 3.11.8, "feDeleteOutputEntryV2"
 API-760  feDeleteAll
3.11.1  feDeleteAll
feDeleteAll
( geometry, mesh, output, confirm )
Description:This method deletes entir e portions of your model - either ge ometry or the finite element mesh.
Input:
BOOL geometryIf True, all geometry in the model will be deleted - points, curves, 
surfaces, solids, volumes, etc.
BOOL meshIf True, the entire finite element mesh, including all loads, con-
straints, properties, all results, etc. will be deleted.
BOOL outputIf True, all results will be deleted. If you set mesh=True, then this is 
ignored and results w ill always be deleted.
BOOL confirmIf False, the user will be asked to confirm the delete operation. If 
True, the selected portions of the model will be deleted without 
warning.
Output:NoneReturn Code:NoneRemarks/Usage:Coordinate systems will only be deleted if  both geometry and the mesh are deleted.
Example:None
feDelete   API-761
3.11.2  feDelete
feDelete
( entityTYPE, entitySET )
Description:This method deletes selec ted entities from your model.
Input:
INT4 entityTYPEThe entity type to delete:
3=Point, 4=Curve, 5=Surface, 6=V olume, 7=Node, 8=Element, 
9=Coordinate System, 10=Material, 11=Property, 12=Load Set, 
17=Constraint Set, 21=Text, 22=View, 24=Group, 28=Output Set, 31=Report, 33=Layer, 35=Function, 39=Solid, 58=Connection 
Region (Contact Segment), 60=Ana lysis Set (in Analysis Set Man-
ager), 71=Connector, 72=Connection Property, 81=Layup, 95=Aero Panel/Body, 96=Aero Property, 98=Aero Spline, 99=Aero Control 
Surface, 102=Freebody, 106=Chart, 107=Data Series.
INT4 entitySET The ID of th e set containing the IDs of the entities to delete.
Output:NoneReturn Code:
FE_INV ALIDYou specified an invalid entityTY PE - the entityTYPE must be one 
of the values  listed above.
Remarks/Usage:Entities will only be deleted if they are not referenced  by other entities. You should always delete enti-
ties in the order of their references to each other in the model. For example, dele te elements first, prop-
erties next, and materials last.
Example:None
 API-762  feDeleteMesh
3.11.3  feDeleteMesh
feDeleteMesh
( entityTYPE, entitySET, bDeleteUnused)
Description:This method deletes entir e meshes from your model.
Input:INT4 entityTYPE Must be eith er 7=Node or 8=Element
INT4 entitySETThe ID of the set containing the IDs of the nodes/elements which 
define the mesh to be deleted. If entitySET<0, it is the ID of the sin-
gle entity where the mesh will be deleted.
BOOL bDeleteUnusedIf True, then any unused Properties and Materials will also be 
deleted.
Output:NoneReturn Code:FE_BAD_TYPE entityTYPE must be  either Node or Element.
Remarks/Usage:If you specify elements, those will be deleted. If y ou specify nodes, any elemen t referencing any of the 
specified nodes will be deleted.
Example:None
feDeleteLoads   API-763
3.11.4  feDeleteLoads
feDeleteLoads
( loadSetID, entityTYPE, entitySET, loadTYPE )
Description:This method deletes selec ted loads from your model.
Input:INT4 loadSetID The ID of the Load Se t containing the loads to be deleted.
INT4 entityTYPEThe entity type of the entities spec ified in entitySET. Loads of “load-
TYPE” will be deleted from these  entities. Valid values are : 
3=Point, 4=Curve, 5=Surface, 7=Node, 8=Element
INT4 entitySETThe ID of the set containing the ID s of the entities where loads will 
be deleted. If entitySET<0, it is the ID of the single entity where 
loads will be deleted.
INT4 loadTYPEThe type of loads to delete. Any= -1, Nodal Heat Gen=2, Nodal Heat 
Flux=4, Force=16, Displacement=32, Acceleration=64, Line-
Load=128, Pressure=256, Elem Heat Gen=512, Elem Heat 
Flux=1024, Velocity=2048, Nodal Temp=4096, Elem Temp=8192, Convection=16384, Radiation=32768, Transient=65536, Fluid Pres-
sure=131072, Fluid Tracking = 262144, Fluid Unknown=524288, 
Fluid Slip=1048576, Fluid Fan=2097152, Fluid Periodic=4194304
Output:NoneReturn Code:
FE_INV ALIDYou specified an invalid entityTY PE or loadTYPE - they must be 
one of the values listed above.
Remarks/Usage:NoneExample:None
 API-764  feDeleteConstraints
3.11.5  feDeleteConstraints
feDeleteConstraints
( bcSetID, entityTYPE, entitySET, deleteBC, deleteBE )
Description:This method deletes selected constraints from your model.
Input:INT4 bcSetID The ID of the Constraint Set containing the constraints to be deleted.
INT4 entityTYPEThe entity type of the entities speci fied in entitySET. Constraints will 
be deleted from these entities. Valid values are : 3=Point, 4=Curve, 
5=Surface, 7=Node
INT4 entitySETThe ID of the set containing the IDs of the entities where constraints 
will be deleted. If entitySET<0, it is  the ID of the single entity where 
constraints will be deleted.
BOOL deleteBC If True, normal constraints will be deletedBOOL deleteBE If True, constraint equations will be deletedOutput:NoneReturn Code:
FE_INV ALIDYou specified an invalid entityTYPE - it must be one of the values 
listed above.
Remarks/Usage:NoneExample:None
feDeleteOutputV2   API-765
3.11.6  feDeleteOutputV2
feDeleteOutputV2
( outputSetID, vectorSET )
Description:This method deletes selected output vectors from a single output set. To delete output vectors from any 
number of selected output sets, use feDeleteOutput 2. This method replaces feDeleteOutput. For more 
information, see Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:INT4 outputSetID The ID of the Output Set from which to delete the vectors
INT4 vectorSETThe ID of the set containing the IDs of the output vectors to delete. 
Alternatively, if you specify a negative  value, this is simply the ID of 
a single output vector to delete. 
Output:NoneReturn Code:NoneRemarks/Usage:It may be helpful to use the AddComponentOutputVectors (Section 4.6.2.36, "AddComponentOutput-
VectorsV2"), AddSimilarOutputVectors (Section 4.6.2.37, "AddSimilarOutputVectorsV2"), and/or 
AddComplexOutputVectors (Section 4.6.2.38, "AddComplexOutputVectorsV2") methods on the Set 
Object to select all desired output vectors.
Example:None
 API-766  feDeleteOutput2V2
3.11.7  feDeleteOutput2V2
feDeleteOutput2V2
( outputSetSET, vectorSET )
Description:This method deletes selected output  vectors from selected output sets. This method replaces feDelete-
Output2. For more information, see Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:
INT4 outputSetSETThe ID of the set containing the IDs of the output sets to delete out-
put vectors from. Alternatively, if you specify a negative value, this 
is simply the ID of a single output  set to delete output vectors from. 
INT4 vectorSETThe ID of the set containing the IDs of the output vectors to delete. 
Alternatively, if you specify a negative  value, this is simply the ID of 
a single output vector to delete. 
Output:
None
Return Code:NoneRemarks/Usage:This function offers th e same capabilities as the Delete, Output, Vector  command in the User Interface. 
It may be helpful to use the AddComponentOutputVectors (Section 4.6.2.36, "AddComponentOutput-
VectorsV2"), AddSimilarOutputVectors (Section 4.6.2.37, "AddSimilarOutputVectorsV2"), and/or 
AddComplexOutputVectors (Section 4.6.2.38, "AddComplexOutputVectorsV2") methods on the Set 
Object to select all desired output vectors.
Example:None
feDeleteOutputEntryV2   API-767
3.11.8  feDeleteOutputEntryV2
feDeleteOutputEntryV2
( setSET, vectorSET, nodeSET, elemSET )
Description:This method deletes selected output on individual nodes and/or elements from selected output vectors in 
selected output sets. This method replaces feDeleteOu tputEntry. For more information, see Section 2.4, 
"Working with Output in FEMAP 2020.1 and above".
Input:
INT4 setSetThe ID of the set containing the IDs of the output sets. Alternatively, 
if you specify a negative value, this is simply the ID of a single out-
put set.
INT4 vectorSETThe ID of the set containing the IDs of the output vectors. Alterna-
tively, if you specify a negative value,  this is simply the ID of a sin-
gle output vector. 
INT4 nodeSetThe ID of the set containing the IDs of the nodes to delete output 
from. Alternatively, if you specify a negative value, this is simply the 
ID of a single node to delete output from.
INT4 elemSETThe ID of the set containing the IDs of the elements to delete output 
from. Alternatively, if you specify a negative value, this is simply the 
ID of a single element to delete output from.
Output:NoneReturn Code:NoneRemarks/Usage:This function offers the same capabilities as the Delete, Output, Entry  command in the User Interface. It 
may be helpful to use the AddComponentOutputVe ctors (Section 4.6.2.36, "AddComponentOutputVec-
torsV2"), AddSimilarOutputVector s (Section 4.6.2.37, "AddSimilarOutputVectorsV2"), and/or 
AddComplexOutputVectors (Section 4.6.2.38, "AddComplexOutputVectorsV2") methods on the Set Object to select all desired output vectors.
Example:None
 API-768  
3.12  View, Window and Visibility Methods
View and Window Methods include:
•Section 3.12.1, "feViewVisible (or feWindowVisible)"
•Section 3.12.2, "feViewRed raw (or feWindowRedraw)"
•Section 3.12.3, "feViewRegener ate (or feWindowRegenerate)"
•Section 3.12.4, "f eViewAutoscaleAll"
•Section 3.12.5, "feV iewAutoscaleVisible"
•Section 3.12.6, "feViewAllViews"
•Section 3.12.7, "feViewShow (or feWindowShow)"
•Section 3.12.8, "feViewShow2 (or feWindowShow2)"
•Section 3.12.9, "feViewTile (or feWindowTile)"
•Section 3.12.10, "feWindowTileHorz"
•Section 3.12.11, "feViewCas cade (or feWindowCascade)"
•Section 3.12.12, "feWindowMinimize"
•Section 3.12.13, "feWindowMaximize"
•Section 3.12.14, "feWindowRestore"
•Section 3.12.15, "feWindowSetRect"
•Section 3.12.16, "feWindowSetSize"
•Section 3.12.17, "feWindowTitle"
•Section 3.12.18, "feEntitySetVisibility"
•Section 3.12.19, "feEntitySetVisibility2"
•Section 3.12.20, "feEntityGetVisibility"
•Section 3.12.21, "feAppUpdateModelBox"
•Section 3.12.22, "feViewShowMultiple"
feViewVisible   API-769
3.12.1  feViewVisible (or feWindowVisible)
feViewVisible
( viewID, visible )
Description:This method makes views visible or removes them from the screen.
Input:INT4 viewID The ID of the view to manipulate.BOOL visible Set to True to activate a view; False to remove it from the screen.Output:NoneReturn Code:
FE_FAILThe operation failed. Either you aske d to make a view visible that 
was already visible, or to remo ve a view that was not visible.
Remarks/Usage:This is similar to the Window, New Window  command. feViewVisible and feWindowVisible perform 
identical functions.
Example:None
 API-770  feViewRedraw
3.12.2  feViewRedraw (or feWindowRedraw)
feViewRedraw
( viewID )
Description:This method redraws the selected view.Input:
INT4 viewIDThe ID of the view to redraw. Use viewID=0 to redraw the active 
view.
Remarks/Usage:The selected view must be visible. Same as the Window, Redraw  command. feViewRedraw and feWin-
dowRedraw are identical.
Example:
None
feViewRegenerate   API-771
3.12.3  feViewRegenerate  (or feWindowRegenerate)
feViewRegenerate
( viewID )
Description:This method regenerate s the selected view.
Input:
INT4 viewIDThe ID of the view to regenerate . Use viewID=0 to regenerate the 
active view.
Remarks/Usage:The selected view must be visible. Same as the Window, Regenerate  command.feViewRegenerate and 
feWindowRegenerate are identical
Example:
None
 API-772  feViewAutoscaleAll
3.12.4  feViewAutoscaleAll
feViewAutoscaleAll
( viewID, redoBox)
Description:This method performs an autoscale on  the selected view using all of th e entities in the model, visible or 
hidden
Input:
INT4 viewIDThe ID of the view to Autoscale. Use viewID=0 to autoscale the 
active view.
BOOL redoBoxWhen set to True, forces a recalcu lation of the “box” containing all 
of the entities in the model.
Remarks/Usage:The selected view does not have to be visible. This  command must be used in combination with feWin-
dowRegenerate or feWindowRedraw in order to see the view update.
Example:None
feViewAutoscaleVisible   API-773
3.12.5  feViewAutoscaleVisible
feViewAutoscaleVisible
( viewID, redoBox)
Description:This method performs an autoscale on the selected view while on ly considering entiti es currently visible 
in the selected view.
Input:
INT4 viewIDThe ID of the view to Autoscale. Use viewID=0 to autoscale the 
active view.
BOOL redoBoxWhen set to True, forces a recalcu lation of the “box” containing all 
of the visible entities in the selected view.
Remarks/Usage:The selected view does not have to be visible. This  command must be used in combination with feWin-
dowRegenerate or feWindowRedraw in order to see the view update.
Example:None
 API-774  feViewAllViews
3.12.6  feViewAllViews
feViewAllViews
( on_off )
Description:This function turns on and off the All Views functionality.
Input:BOOL on_off Set to True to enable All Views; False to only update a single view.
Output:NoneReturn Code:NoneRemarks/Usage:Same as the View, All Views command.
Example:None
feViewShow   API-775
3.12.7  feViewShow (or feWindowShow)
feViewShow
( entityTYPE, showSET )
Description:This function shows a selected group of entities.Input:
INT4 entityTYPEThe entity type to show: 3=Poin t, 4=Curve, 5=Surface, 7=Node, 
8=Element, 9=Coordinate System, 10=Material (shows Elements 
referencing Material), 11=Propert y (shows Elements referencing 
Property), 53=Solid/V olume, 58=Connection Region/Region, 71=Connector, 81=Layup (shows Elements referencing Layup), 
83=Global Ply (shows Elements referencing Layups which use 
Global Ply), 95=Areo Panel, 98=Aero Spline, and 99=Aero Control Surface.
INT4 showSETThe ID of a selection set that contai ns the IDs of the entities to show. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to show.
Output:NoneRemarks/Usage:Like the Window, Show Entities command. feViewShow and feWindowShow are identical.
Example:None
 API-776  feViewShow2
3.12.8  feViewShow2 (or feWindowShow2)
feViewShow2
( entityTYPE, showSET, qAutoscale )
Description:This function shows a selected group of entities an d has the option to “Autoscale” around the entities 
being shown.
Input:
INT4 entityTYPEThe entity type to show: 3=Poin t, 4=Curve, 5=Surface, 7=Node, 
8=Element, 9=Coordinate System, 10=Material (shows Elements 
referencing Material), 11=Propert y (shows Elements referencing 
Property), 53=Solid/V olume, 58=Connection Region/Region, 
71=Connector, 81=Layup (shows Elements referencing Layup), 
83=Global Ply (shows Elements referencing Layups which use Global Ply), 95=Areo Panel, 98=Aero Spline, and 99=Aero Control 
Surface.
INT4 showSETThe ID of a selection set that contai ns the IDs of the entities to show. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to show.
BOOL qAutoscaleIf True, the view will autoscale ar ound the entities being shown. If 
False, only the entities will be show n and the scaling of the view will 
remain the same.
Output:NoneRemarks/Usage:Like the Window, Show Entities command. feViewShow2 and fe WindowShow2 are identical.
Example:None
feViewTile   API-777
3.12.9  feViewTile (or feWindowTile)
feViewTile
( void )
Description:This function tiles all of the active views vertically.Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:Like the Window, Tile Vertical command. feViewTile and feWindowTile are identical.
Example:None
 API-778  feWindowTileHorz
3.12.10  feWindowTileHorz
feWindowTileHorz
( void )
Description:This function tiles all of the active views horizontally.Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:Like the Window, Tile Horizontal command. 
Example:None
feViewCascade   API-779
3.12.11  feViewCascad e (or feWindowCascade)
feViewCascade
( void )
Description:This function cascades all of the active views.Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:Like the Window, Cascade command.feViewCascade and feWindowCascade are identical.
Example:None
 API-780  feWindowMinimize
3.12.12  feWindowMinimize
feWindowMinimize
( vuID )
Description:This function minimizes the window  that contains the specified view
Input:
INT4 vuIDThe ID of the view in the window to be modified. Specify vuID=0 to 
modify the active view.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
feWindowMaximize   API-781
3.12.13  feWindowMaximize
feWindowMaximize
( vuID )
Description:This function maximizes the window  that contains the specified view
Input:
INT4 vuIDThe ID of the view in the window to be modified. Specify vuID=0 to 
modify the active view.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-782  feWindowRestore
3.12.14  feWindowRestore
feWindowRestore
( vuID )
Description:This function restores the window (from either a maxi mized or minimized state) that contains the speci-
fied view
Input:
INT4 vuIDThe ID of the view in the window to be modified. Specify vuID=0 to 
modify the active view.
Output:NoneReturn Code:
None
Remarks/Usage:NoneExample:None
feWindowSetRect   API-783
3.12.15  feWindowSetRect
feWindowSetRect
( vuID, pctLeft, pctTop, pctRight, pctBottom )
Description:This function sizes the window us ing percentages of graphics area fro m the Left, Top, Right, and/or 
Bottom of the graphics area.
Input:
INT4 vuIDThe ID of the view in the window to be modified. Specify vuID=0 to 
modify the active view.
REAL8 pctLeft
Location of view window in percent of graphics area. Numbers must 
be between 0.0 and 100.0REAL8 pctTop
REAL8 pctRight
REAL8 pctBottom
Output:NoneReturn Code:FE_FAIL The operation failed. View  is invalid or does not exist.
FE_BAD_DATAValues for pctLeft, pctTop, pctRight , or pctBottom are out of 0.0 to 
100.0 range.
Remarks/Usage:NoneExample:None
 API-784  feWindowSetSize
3.12.16  feWindowSetSize
feWindowSetSize
( vuID, left, top, horz, vert )
Description:This function sizes the window by sp ecifying the location of the “top le ft” corner of the view in number 
of pixels from the “top left” corner  of the graphics area. The overall size of the view is then specified 
using number of pixels from the “top left” corn er in the horizontal and vertical directions.
Input:
INT4 vuIDThe ID of the view in the window to be modified. Specify vuID=0 to 
modify the active view
INT4 leftNumber of pixels from left edge of gr aphics area to left edge of view 
window
INT4 topNumber of pixels from top edge of graphics area to top edge of view 
window
INT4 horz Number of pixels from left of view window to right of view window
INT4 vertNumber of pixels from top of view window to bottom of view win-
dow
Output:NoneReturn Code:FE_FAIL The operation failed. View  is invalid or does not exist.
Remarks/Usage:NoneExample:None
feWindowTitle   API-785
3.12.17  feWindowTitle
feWindowTitle
( vuID, sTitle )
Description:This function sets the View Title and th e Tab Title at once for an existing view.
Input:
INT4 vuIDThe ID of the view in the window to be modified. Specify vuID=0 to 
modify the active view.
STRING sTitle View and Tab Title (maximum 79 characters).Output:NoneReturn Code:FE_FAIL The operation failed. View  is invalid or does not exist.
Remarks/Usage:NoneExample:None
 API-786  feEntitySetVisibility
3.12.18  feEntitySetVisibility
feEntitySetVisibility
( visType, visID, bIsVisible, bRedraw )
Description:This function sets entities to be visible or blanked.  It is not view dependent but always applies to all 
views. This call is identical to feEntityVi siblity, which should no longer be used.
Input:
INT4 visTypeThe type of entity to blank - can be FVIS_POINT, FVIS_CURVE, 
FVIS_SURFACE, FVIS_SOLID, FVIS_CSYS, FVIS_CONNEC-
TION_REGION, FVIS_CONNECTION, FVIS_PROP, FVIS_MATL, FVIS_ELEM, FVIS_ELEM_TYPE, 
FVIS_ELEM_SHAPE, FVIS_FREEBODY , FVIS_AERO_PANE, 
FVIS_AERO_SPLINE, FVIS_AERO_SURFACE
INT4 visIDThe ID of a set which contains the IDs/types/shapes of the entity to 
show or blank. For the element vi sTypes the set must contain ele-
ment types or shapes, not element IDs. Alternatively, specify a nega-
tive value to select a single ID/type/shape.
BOOL bIsVisible Set to True to make entity visible, False to hide it.BOOL bRedraw If True, the model is redr awn after the visibility change is made
Output:NoneReturn Code:FE_INV ALID Invalid visTypeRemarks/Usage:The visibility of any points, curves,  or surfaces associated with a solid  will have their visibility con-
trolled by the visibility setting of the solid
Example:None
feEntitySetVisibility2   API-787
3.12.19  feEntitySetVisibility2
feEntitySetVisibility2
( visType, nCount, visEnt, entVisible, bRedraw )
Description:This function sets entities to be visible or blanke d using arrays. It is not view dependent but always 
applies to all views.
Input:
INT4 visTypeThe type of entity to blank - can be FVIS_POINT, FVIS_CURVE, 
FVIS_SURFACE, FVIS_SOLID, FVIS_CSYS, FVIS_CONNEC-
TION_REGION, FVIS_CONNECTION, FVIS_PROP, FVIS_MATL, FVIS_ELEM, FVIS_ELEM_TYPE, 
FVIS_ELEM_SHAPE, FVIS_FREEBODY , FVIS_AERO_PANE, 
FVIS_AERO_SPLINE, FVIS_AERO_SURFACE
INT4 nCountNumber of different visibility items  to set using visEnt and entVisi-
ble arrays.
INT4 visEnt[0..nCount-1]Array containing different types of  entities of the specified visType. 
For instance, when visType is set to FVIS_ELEM_SHAPE, the vis-
Ent can be filled with different el ement topologies, while when it is 
set to FVIS_PROP, it would contain different property types.
BOOL entVisible[0..nCount-1]Array of visibility flags corresponding  to each type specified in the 
visEnt array. Set to True to make an entity visible, False to hide.
BOOL bRedraw If True, the model is redr awn after the visibility change is made
Output:NoneReturn Code:FE_INV ALID Invalid visTypeRemarks/Usage:The visibility of any points, curves,  or surfaces associated with a solid  will have their visibility con-
trolled by the visibility setting of the solid
Example:None
 API-788  feEntityGetVisibility
3.12.20  feEntityGetVisibility
feEntityGetVisibility
( visType, visID, bIsVisible )
Description:This function populates a set object with the IDs of entities which are vi sible or blanked. It is not view 
dependent but always applies to all views.
Input:
INT4 visTypeThe type of entity - can be FVIS_POINT, FVIS_CURVE, FVIS_-
SURFACE, FVIS_SOLID, FVIS_CSYS, FVIS_CONNEC-
TION_REGION, FVIS_CONNECTION, FVIS_PROP, FVIS_MATL, FVIS_ELEM, FVIS_ELEM_TYPE, 
FVIS_ELEM_SHAPE, FVIS_FREEBODY , FVIS_AERO_PANE, 
FVIS_AERO_SPLINE, FVIS_AERO_SURFACE
INT4 visSetID The ID of set object to populate with visible or blanked entities.
BOOL bIsVisible Set to True to get visi ble entities, False to get hidden entities.
Output:NoneReturn Code:FE_INV ALID Invalid visTypeRemarks/Usage:When using FVIS_ELEM_TYPE, the set  object will be filled with the IDs of the Element Types which 
are currently visible or blanked (1 -42). For instance, if only linear pl ate elements are blanked, and bIs-
Visible is set to False, then only the Type ID for linear plate elements (17) would be in the set object. If 
bIsVisible is set to True, then all IDs from 1-42 except 17 would be in the set object.
When using FVIS_ELEM_SHAPE, the set object will be filled with the IDs of the Element Shapes 
which are visible or blanked (1-20, 17 is a “Contact Element”, which is no long er used, but may appear 
in the list).
See Section 5.25.1, "Element Object Properties"for mo re information on the element properties for Type 
(type) and Shape (topology).
Example:
feEntityGetVis ibility   API-789
Note: For FVIS_ELEM_SHAPE the FTO_LINE2 topolo gy needs special handling. The Femap Set 
object cannot iterate and return th e FTO_LINE2 topology since it is defined as zero. In this case you 
will need to check for existenc e of the zero item directly with the IsAdded(0) method.
Sub Main
    Dim App As femap.model    Set App = feFemap()
    Dim fs As femap.Set
    Set fs = App.feSet
    App.feEntityGetVisibility( FVIS_ELEM_SHAPE, fs.ID, True )    fs.Next()
    While fs.Next() <> FE_FAIL
        App.feAppMessage( FCM_NORMAL, "Element Topology" + Str( 
fs.CurrentID ) + " is visible " )
    Wend
    If fs.IsAdded( FTO_LINE2 ) Then
        App.feAppMessage( FCM_NORMAL, "So is Element Topology" + 
Str( FTO_LINE2 ) )
    End If
    End SubfeEntityGetVisibility
( visType, visID, bIsVisible )
 API-790  feAppUpdateModelBox
3.12.21  feAppUpdateModelBox
feAppUpdateModelBox
( bForceUpdate )
Description:This function recomputes the size of the box around th e model so scaling for graphics are correct.  It is 
not normally necessary to call this function.
Input:BOOL bForceUpdate If True, the box is always recomputed. If False, only if necessary.Output:NoneReturn Code:FE_FAIL No model is activeRemarks/Usage:NoneExample:None
feViewShowMultiple   API-791
3.12.22  feViewShowMultiple
feViewShowMultiple
( nSets, piTypes, piSetIDs, qAutoscale )
Description:This function shows multiple sets of entities.Input:INT4 nSets Number of different sets of entities to show
INT4 piTypes [0..nSets-1]Array containing the entity type of  each set to show. Allowable entity 
types are: 3=Point, 4=Curve, 5=Surface, 7=Node, 8=Element, 
9=Coordinate System, 10=Materia l (shows Elements referencing 
Material), 11=Property (shows El ements referencing Property), 
53=Solid/V olume, 58=Connection Region/Region, 71=Connector, 
81=Layup (shows Elements refe rencing Layup), 83=Global Ply 
(shows Elements referencing Layups which use Global Ply), 
95=Areo Panel, 98=Aero Spline, and 99=Aero Control Surface.
INT4 piSetIDs [0..nSets-1]Array of Set Object IDs which cont ain the entity IDs of the type 
specified in the corresponding index in piTypes.
BOOL qAutoscaleIf True, the view will autoscale ar ound the entities being shown. If 
False, only the entities will be show n and the scaling of the view will 
remain the same.
Output:NoneRemarks/Usage:The sets can be of different types of entities. If th ey are of the same type, duplicates are not removed
Example:None
 API-792  
3.13  Group Methods
Group Methods include:
•Section 3.13.1, "feGroupEvaluate"
•Section 3.13.2, "feGroupBoolean"
•Section 3.13.3, "feGroupBoolean2"
•Section 3.13.4, "feGroupCombine"
•Section 3.13.5, "feGroupGenerate"
•Section 3.13.6, "feGroupGenerate2"
•Section 3.13.7, "feGroupGenSolid"
•Section 3.13.8, "feGroupGenProp"
•Section 3.13.9, "feGroupGenMatl"
•Section 3.13.10, "feGroupGenElemType"
•Section 3.13.11, "feGroupGenElemShape"
•Section 3.13.12, "feGroupPeel"
•Section 3.13.13, "feGroupMoveToLayer"
•Section 3.13.14, "feGroupsContaining"
•Section 3.13.15, "feGroupGenVisible"
•Section 3.13.16, "feGroupFromCriteria"
•Section 3.13.17, "feGroupCondense"
feGroupEvaluate   API-793
3.13.1  feGroupEvaluate
feGroupEvaluate
( grSet, forceEval )
Description:This method evalua tes all of the selection rules, clipping an d other operations defined in one or more 
groups.
Input:
INT4 grSETThe ID of a set that contains a list of Group IDs that you want to 
Evaluate. Alternatively, if you specif y a negative value, this is simply 
the ID of the single group to evaluate.
BOOLEAN forceEvalIf True, the group will always be evaluated. If False, the group will 
only be evaluated if it is marked as needing evaluation.
Output:NoneReturn Code:FE_FAIL One or more of the groups you chose was unable to be evaluatedRemarks/Usage:This method accomplishes the same tasks as the Group, Operations, Evaluate  command.
Example:None
 API-794  feGroupBoolean
3.13.2  feGroupBoolean
feGroupBoolean
( operation, grID1, grID2, grCreate, grTitle )
Description:
This method is obsolete - use feGroupBoolean2() instead.
This method takes on e or two existing groups and creates a new group based on a specified operation.
Input:INT4 operation The operation to be done: 0=And, 1=Or, 2=Exclusive Or, 3=Invert.INT4 grID1 The first group to use in the operation.
INT4 grID2The second group to use in the operation. (This should be 0 for the 
Invert operation, because only the first group is used.)
INT4 grCreate The ID of the group to create.STRING grTitle The title of the group that is created.Output:NoneReturn Code:
FE_INV ALIDThe ID of the group that you specified  to create is invalid. Either it is 
not a valid ID, or that group already exists.
FE_FAILUnable to manipulate the groups th at you specified. Check to see if 
they exist.
Remarks/Usage:This method accomplishes the same tasks as the Group, Operations, And , Group, Operations, Or, 
Group, Operations, Exclusive Or,  and Group, Operation, Not  commands.
And means an entity must be in both  groups to be in the new group, Or means all the entities in either 
group, and Exclusive Or means all the entities in one, but not both of the initial groups. Invert  simply 
means all the entities no t in the first group.
Example:None
feGroupBoolean2   API-795
3.13.3  feGroupBoolean2
feGroupBoolean2
( GroupsToProcessSetID, GroupToSubtract FromID,  GroupOp, GroupToCreateID, 
GroupTitle )
Description:This method takes a set of Groups and creat es a new group based on a specified operation.
Input:INT4 GroupsToProcessSetID The ID of a Set that contains the IDs of the Groups to Process
INT4 GroupToSubtractFromIDThe ID of a Group to Subtract the other Groups From. This value is 
ignored, but must be specified, unless GroupOp=1
INT4 GroupOpThe Operation to perform 0=Add,  1=Subtract, 2=InAll, 3=Only-
InOne, 4=NotInAny, 5=NotInAll
INT4 GroupToCreateIDThe ID of the group to create. If this is specified as 0, or the ID of an 
existing group, a new group will be  created with an arbitrary ID
STRING GroupTitleThe title of the group that is create d. If you specify this title a blank a 
default title will be created
Output:NoneReturn Code:FE_INV ALID Invalid group to subtract from
FE_FAILUnable to manipulate the groups th at you specified. Check to see if 
they exist.
Remarks/Usage:This method accomplishes the same tasks as the Group, Operations, Booleans  command.
Example:None
 API-796  feGroupCombine
3.13.4  feGroupCombine
feGroupCombine
( groupSET, groupID )
Description:This method takes one or more existing groups  and combines them to create a new group 
Input:
INT4 groupSETThe ID of a Set Object that contains the IDs of the groups to com-
bine.
Output:INT4 groupID The ID of the group that is createdReturn Code:FE_INV ALID Unable to  combine groups.
Remarks/Usage:NoneExample:None
feGroupGenerate   API-797
3.13.5  feGroupGenerate
feGroupGenerate
( elemSET, planar, brkPropMatl, brkLayer, brkColor, brkAngle, addLayers )
Description:This method automatically makes on e or more groups by subdividing the elements you select based on 
one or more criteria.
Input:INT4 elemSET The ID of the set of elements  to be used in defining the groups.
BOOL planarIf true, only planar elements will be used. If False, only solid ele-
ments will be used.
INT4 brkPropMatlSet to 0 to ignore property or materi al discontinuities. Set to 1 to start 
a new group when property IDs change. Set to 2 to start a new group 
when material IDs change.
INT4 brkLayer Set to nonzero to star t a new group when layers change.
INT4 brkColor Set to nonzero to start a new group when element colors change.
REAL8 brkAngleSet to the maximum angle between pl anar elements for them to still 
be in the same group. Ignored for solid elements. Specified in 
degrees.
BOOL addLayersSet to True if you not only want to create groups, but move the ele-
ments in each group to a separate layer.
Output:NoneReturn Code:NoneRemarks/Usage:Same as the Group, Operations, Generate command for FEMAP versions pr ior to version 11.1. For full 
access to all the options now available, use feGroupGenerate2.
Example:None
 API-798  feGroupGenerate2
3.13.6  feGroupGenerate2
feGroupGenerate2
( elemSET, planar, brkPropMatl, brkLayer, brkColor, brkAngle, brkMatchNormal, 
brkNonManifold, addLayers, nExpandGroup)
Description:This method automatically makes on e or more groups by subdividing the elements you select based on 
one or more criteria.
Input:INT4 elemSET The ID of the set of elements  to be used in defining the groups.
BOOL planarIf true, only planar elements will be used. If False, only solid ele-
ments will be used.
INT4 brkPropMatlSet to 0 to ignore property or materi al discontinuities. Set to 1 to start 
a new group when property IDs change. Set to 2 to start a new group when material IDs change.
INT4 brkLayer Set to nonzero to star t a new group when layers change.
INT4 brkColor Set to nonzero to start a new group when element colors change.
REAL8 brkAngleSet to the maximum angle between pl anar elements for them to still 
be in the same group. Ignored for solid elements. Specified in 
degrees. Setting this value to 0.0 tu rns off all geometry breaks unless 
brkMatchNormal is set to True.
BOOL brkMatchNormalIf True, the normal direction of pl anar elements will be considered 
when determining how many groups  to make. If False, the normal 
direction of planar elemen ts will not be considered.
BOOL brkNonManifoldIf True, any non-manifold  edges found between planar elements will 
be used to create add itional groups and is in dependent of the brkAn-
gle value. If False, non-manifold edges between planar elements will 
not be considered.
BOOL addLayersSet to True if you not only want to create groups, but move the ele-
ments in each group to a separate layer.
INT4 nExpandGroupSpecifies the Group Expansion option. 0=Elements Only, 1=Ele-
ments and Nodes, 2=All (Elements, Nodes, Materials, Properties, 
Loads on Nodes, Loads on Elements , Constraints refe rencing Nodes, 
and Constraint Equations referencing Nodes).
Output:NoneReturn Code:None
feGroupGenerate2   API-799
Remarks/Usage:
Same as the Group, Operations, Generate command in FEMAP 11.1 and above.
Example:NonefeGroupGenerate2
( elemSET, planar, brkPropMatl, brkLayer, brkColor, brkAngle, brkMatchNormal, 
brkNonManifold, addLayers, nExpandGroup)
 API-800  feGroupGenSolid
3.13.7  feGroupGenSolid
feGroupGenSolid
( solidSET )
Description:This method automatically makes on e or more groups by subdividing geometry based on the solids that 
it defines.
Input:INT4 solidSET The ID of the set of solids to be used in defining the groups.Output:NoneReturn Code:NoneRemarks/Usage:Same as the Group, Operations, Generate Solid  command. A group is created for each solid that con-
tains the solid, its surfaces, curves and points.
Example:None
feGroupGenProp   API-801
3.13.8  feGroupGenProp
feGroupGenProp
( propSET )
Description:This method automatically makes one or more groups by subdividing a mesh based on property IDs.Input:INT4 propSET The ID of the set of properties to be used in defining the groups.Output:NoneReturn Code:NoneRemarks/Usage:
Same as the Group, Operations, Generate Property  command. A group of elements is created that use 
each selected property.
Example:None
 API-802  feGroupGenMatl
3.13.9  feGroupGenMatl
feGroupGenMatl
( matlSET )
Description:This method automatically makes on e or more groups by subdividing a mesh based on material IDs.
Input:INT4 matlSET The ID of the set of material s to be used in defining the groups.
Output:NoneReturn Code:NoneRemarks/Usage:
Same as the Group, Operations, Generate Material  command. A group of elements is created that use 
each selected material.
Example:None
feGroupGenElemType   API-803
3.13.10  feGroupGenElemType
feGroupGenElemType
( elemSET )
Description:This method automatically makes on e or more groups by subdividin g a mesh based on element type.
Input:INT4 elemSET The ID of the set of elements  to be used in defining the groups.
Output:NoneReturn Code:NoneRemarks/Usage:
Same as the Group, Operations, Generate Elem Type  command. A group is created for each element 
type used by the selected elements.
Example:None
 API-804  feGroupGenElemShape
3.13.11  feGroupGenElemShape
feGroupGenElemShape
( elemSET )
Description:This method automatically makes on e or more groups by subdividin g a mesh based on element shape.
Input:INT4 elemSET The ID of the set of elements  to be used in defining the groups.
Output:NoneReturn Code:NoneRemarks/Usage:
Same as the Group, Operations, Generate Elem Shape command. A group is created for each element 
shape used by the selected elements.
Example:None
feGroupPeel   API-805
3.13.12  feGroupPeel
feGroupPeel
( elemSET, peelLayers, keepPeel, keepCore )
Description:This method automatically makes on e or more groups by “peeling” la yers of solid elements from the 
outside of a mesh.
Input:INT4 elemSET The ID of the set of elements  to be used in defining the groups.
INT4 peelLayers The number of layers of  elements to remove from the mesh.
BOOL keepPeel If True, each layer that is removed will be placed into a group.
BOOL keepCoreIf True, the remaining elements, after the number of layers have been 
removed, will be placed into a group.
Output:NoneReturn Code:NoneRemarks/Usage:Same as the Group, Operations, Peel command. 
Example:None
 API-806  feGroupMoveToLayer
3.13.13  feGroupMoveToLayer
feGroupMoveToLayer
( nGroupID, nLayerID )
Description:Assigns all entities in the selecte d group to the specified layer.
Input:INT4 nGroupID The ID of the Group to  use to place entities onto a layer
INT4 nLayerID The ID of the Layer to a ssign entities to from the specified group
Output:NoneReturn Code:None
Remarks/Usage:
NoneExample:None
feGroupsContaining   API-807
3.13.14  feGroupsContaining
feGroupsContaining
( enDataType, nEntityID, GroupSetID )
Description:This method does not mimic a comm and in the group menu, but instead populates an existing set object 
with the IDs of every group in which the speci fied entities (or single entity) currently reside
Input:
INT4 enDataTypeThe type of entity to be checked fo r group inclusion. For entity infor-
mation, see Section 3.3.6, "Entity Types".
INT4 nEntityIDThe ID of a set that contains a list of entity IDs to determine in which 
groups the entities reside. Alterna tively, if you specify a negative 
value, this is simply the ID of th e single entity to determine in which 
groups that entity resides. 
Output:
INT4 nGroupSetIDThe ID of set to be populated with group IDs. The set will always be 
cleared and then repopulated.
Return Code:NoneRemarks/Usage:NoneExample:None
 API-808  feGroupGenVisible
3.13.15  feGroupGenVisible
feGroupGenVisible
( nGroupID, bIncludePropAndMatl, title )
Description:This method automatically  makes a group containing only the en tities currently visible in the active 
view.
Input:
INT4 nGroupIDID of group to create with visible entities. Setting this value to -1 will 
use the next available group ID, wh ile setting this value to 0 will dis-
play the dialog boxes associated with the Group, Operations, Gener-
ate Visible  command.
BOOL bIncludePropAndMatlWhen True, Properties and Materials associated with any visible ele-
ments will be added to the new gr oup. When False, the Properties 
and Materials associated to visibl e elements will not be placed into 
the new group.
STRING title Title of created groupOutput:NoneReturn Code:FE_NOT_A V AILABLE Selected group ID already existsFE_INV ALID Invalid group ID specifiedRemarks/Usage:Same as the Group, Operations, Generate Visible command.
Example:None
feGroupFromCriteria   API-809
3.13.16  feGroupFromCriteria
feGroupFromCriteria
( vuID, bVisibleOnly, nGroupID )
Description:This method automatically  makes a group containing only the elements which pass the current criteria 
when displaying a Criteria plot
Input:
INT4 vuIDID of view, which must be currently displaying a Criteria plot, to use 
to automatically create group of  elements which pass the criteria 
specified for that view. Enter a va lue of 0 to select the active view.
BOOL bVisibleOnlyWhen True, only elements which are visible in the view specified for 
vuID and pass the criteria specified fo r the view will be included in 
the automatically create d group. When False, all elements in the 
model which pass the criteria specifi ed for the view specified for 
vuID will be included in th e automatically created group.
Output:INT4 nGroupID ID of the automatically created group.Return Code:FE_INV ALID Can not access the specified ViewFE_BAD_TYPE Selected View does not have a Criteria plot displayed
FE_NOT_A V AILABLECriteria results are not available fo r the selected view. This will occur 
if you select a view that is not currently on-screen.
FE_NOT_EXIST No elements were fo und passing the specified criteria
Remarks/Usage:Same as the Group, Operations, Generate From Criteria command.
Example:None
 API-810  feGroupCondense
3.13.17  feGroupCondense
feGroupCondense
( groupSET )
Description:This function takes a group and condenses all clipping  and related rules into ID rules in a new group
Input:INT4 groupSET ID of set of groups to condense.Output:NoneReturn Code:NoneRemarks/Usage:
Example:
None
   API-811
3.14  Free Edge and Free Face Methods
Free Edge and Free Face Methods include:
•Section3.14.1, "feElementFreeEdge"
•Section3.14.2, "feElementFreeFace"
•Section3.14.3, "feEdgesOfFreeFaces"
 API-812  feElementFreeEdge
3.14.1  feElementFreeEdge
feElementFreeEdge
( elemSetID, bParabolicEdges, bLineElem, nFreeCount, nFreeData )
Description:Allows you to find the Free Edges in a set of elementsInput:
INT4 elemSetIDThe ID of a Set Object that contai ns the IDs of the elements to be 
used to compute the Free Edges. If 0, all elements in the model are 
used.
BOOL bParabolicEdgesIf True, the computation of Free  Edges includes checking the 
midside nodes (if any). If False, on ly corner nodes are considered.
BOOL bLineElemIf True, then any line elements that lie along an edge are considered 
when deciding if th e edge is “free”.
Output:INT4 nFreeCount The number of Free Edges returned
INT4 nFreeData[0..3*nFree-
Count-1]Data that defines the Free Edges. Th is is an array, stored as follows...
[element1, node1A, node1B, elem ent2, node2A, node2B...]. Each 
free edge is defined by 3 entries in the array - the ID of the element 
containing the free edge, followed by the two corner nodes on the 
element of the free edge.
Return Code:FE_NO_MEMORY Could not allocate memory to return the Free Edge DataFE_FAIL Could not compute the Free Edges for your selected elements.
Remarks/Usage:NoneExample:
feElementFreeFace   API-813
3.14.2  feElementFreeFace
feElementFreeFace
( elemSetID, bParabolicEdges, bPlaneElem, nFreeCount, nFreeData )
Description:Allows you to find the Free Faces in a set of elementsInput:
INT4 elemSetIDThe ID of a Set Object that contai ns the IDs of the elements to be 
used to compute the Free Faces. If 0, all elements in the model are 
used.
BOOL bParabolicEdgesIf True, the computation of Free Face s includes checking the midside 
nodes (if any). If False, only corner nodes are considered.
BOOL bPlaneElemIf True, then any selected plane elem ents are considered when decid-
ing if the face is “free”.
Output:INT4 nFreeCount The number of Free Faces returned
INT4 nFreeData[0..2*nFree-
Count-1]Data that defines the Free Faces. This is an array, stored as follows...
[element1, face1, element2, face2, element3...]. Each free face is  
defined by 2 entries in the array - the ID of the element containing 
the free face, followed by the face ID
Return Code:FE_NO_MEMORY Could not allocate memo ry to return the Free Face Data
FE_FAIL Could not compute the Free Faces for your selected elements.
Remarks/Usage:NoneExample:
 API-814  feEdgesOfFreeFaces
3.14.3  feEdgesOfFreeFaces
feEdgesOfFreeFaces
( elemSetID, bParabolicEdges, bPlaneElem, nFreeCount, nFreeData )
Description:Allows you to find the Edges of Free Faces in a set of elements
Input:
INT4 elemSetIDThe ID of a Set Object that contai ns the IDs of the elements to be 
used to compute the Free Faces. If 0, all elements in the model are 
used.
BOOL bParabolicEdgesIf True, the computation of Free Face s includes checking the midside 
nodes (if any). If False, only corner nodes are considered.
BOOL bPlaneElemIf True, then any selected plane elem ents are considered when decid-
ing if the face is “free”.
Output:INT4 nFreeCount The number of Edges of Free Faces returned
INT4 nFreeData[0..2*nFree-
Count-1]Data that defines the Edges of Free Faces. This is an array, stored as 
follows...[nodeA_of_edge1, node B_of_edge1, nodeA_of_edge2, 
nodeB_of_edge2, nodeA_of_edge3, nodeB_of_edge3,...]. Each edge 
of a free face is defined by 2 entr ies in the array - two corner nodes 
on the edge of each free face.
Return Code:FE_NO_MEMORY Could not allocate memo ry to return the Free Face Data
FE_FAIL Could not compute the Free Faces for your selected elements.
FE_NOT_A V AILABLE No Free Faces foundRemarks/Usage:NoneExample:
   API-815
3.15  Standard Dialog Boxes
These methods include:
•Section 3.15.1, "Coordinate Methods"
•Section 3.15.2, "Vector Methods"
•Section 3.15.3, "Plane Methods"
•Section 3.15.4, "Entity  Selection Methods"
•Section 3.15.5, "Other Methods" including entering a real number or integer, bringing up a 
Message Box, using the Color Palette, creating a function, and various other dialog box selec-
tion methods.
 API-816  feCoordPick
3.15.1  Coordinate Methods
3.15.1.1  feCoordPick
feCoordPick
( dlgTITLE, xyz )
Description:This function displays a dialog box to allow a user to pick or enter coordinates.Input:STRING dlgTITLE A string that specifies a title to be added to the dialog box title.
Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:FE_CANCEL The user cancelled the dialog box. Coordinates are not valid.Remarks/Usage:The default coordinate values that are displayed when the dialog is di splayed can be set using the global 
parameters Info_DefaultX, Info _DefaultY , and Info_DefaultZ before calling this function.
Example:None
feCoordPickByMethod   API-817
3.15.1.2  feCoordPickByMethod
feCoordPickByMethod
( method, dlgTITLE, xyz )
Description:This function displays a dialog box to allow a user to pick or enter coordinates. Same as feCoordPick, 
but lets you specify the initial dialog box method
Input:
INT4 methodThe initial dialog box method. Refe r to “Coordinate Dialog Meth-
ods” for possible values.
STRING dlgTITLE A string that specifies a title to be added to the dialog box title.
Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:FE_CANCEL The user cancelled the dialog box. Coordinates are not valid.Remarks/Usage:The default coordinate values that are displayed when the dialog is di splayed can be set using the global 
parameters Info_DefaultX, Info _DefaultY , and Info_DefaultZ before calling this function.
Example:None
 API-818  feCoordFromWorkplane
3.15.1.3  feCoordFromWorkplane
feCoordFromWorkplane
( wpXYZ, xyz )
Description:This function converts coordinates from workplane coordinates to global rectangular coordinates.Input:
REAL8 wpXYZ[0..2]The original workplane coordinates. Although three coordinates can 
be specified, normally wpXYZ[2] is  0.0 if the location is actually on 
the workplane.
Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:NoneRemarks/Usage:NoneExample:None
feCoordToWorkplane   API-819
3.15.1.4  feCoordToWorkplane
feCoordToWorkplane
( xyz, wpXYZ )
Description:This function converts coordinates from Global Rectangular coordinates to Workplane Coordinates.Input:
REAL8 xyz[0..2]The original coordinates. Must be  specified in global rectangular 
coordinates.
Output:
REAL8 wpXYZ[0..2]The workplane coordinates. Th ree coordinates are returned. 
wpXYZ[2] is the elevation off of th e workplane. Ignore this value to 
get the coordinates in the workplane.
Return Code:NoneRemarks/Usage:NoneExample:None
 API-820  feCoordIntersectCurves
3.15.1.5  feCoordIntersectCurves
feCoordIntersectCurves
( cuID1, cuID2, nearXYZ, xyz )
Description:This function finds the coordinate s at the intersection of two curves.
Input:INT4 cuID1 The ID of the first curve to intersect.
INT4 cuID2 The ID of the second curve to intersect.
REAL8 nearXYZ[0..2]A location near the desired intersecti on. This is not used unless there 
are multiple intersections detected.
Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:FE_INV ALID The curve IDs may not specify the same curve.Remarks/Usage:NoneExample:None
feCoordIntersectLines   API-821
3.15.1.6  feCoordIntersectLines
feCoordIntersectLines
( infLine, pA1, pA2, pB1, pB2, pIntersect )
Description:This function finds the coordinates at the intersection of two lines which are speci fied by their endpoint 
coordinates.
Input:
BOOL infLineSet to True if you want the inte rsection calculation to consider the 
lines as infinite. Set to False if yo u want to only consider the line seg-
ments between the endpoints that you provided.
REAL8 pA1[0..2] The coordinates of the first point on the first line.
REAL8 pA2[0..2] The coordinates of the second point on the first line.REAL8 pA1[0..2] The coordinates of the first point on the second line.REAL8 pA1[0..2] The coordinates of the second point on the second line.Output:REAL8 pIntersect[0..2] The coordina tes of the intersection point.
Return Code:
FE_FAILNo intersection was found. This co uld be because the lines were par-
allel, or you were working with li ne segments and the intersection 
was outside of the segments you specified.
Remarks/Usage:NoneExample:None
 API-822  feCoordOntoCurve
3.15.1.7  feCoordOntoCurve
feCoordOntoCurve
( cuID, fromXYZ, xyz )
Description:This function projects coordinates onto a curve.Input:INT4 cuID The ID of the curve to project onto.
REAL8 fromXYZ[0..2] The original location th at is to be projected onto the curve.
Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:FE_NOT_EXIST The selected curve does not exist.Remarks/Usage:NoneExample:None
feCoordAlongCurve   API-823
3.15.1.8  feCoordAlongCurve
feCoordAlongCurve
( cuID, fromSTART, cuLENGTH, xyz )
Description:This function finds the coordinates that are located at specified distance along a curve.
Input:INT4 cuID The ID of the curve to measure along.
BOOL fromSTARTIf True, then the length is measured  from the start of the curve; other-
wise, it is measured from the end of the curve.
REAL8 cuLENGTHThe length, along the curve, from the selected endpoint to the coordi-
nates.
Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:FE_NOT_EXIST The selected curve does not exist.Remarks/Usage:NoneExample:None
 API-824  feCoordCurveMidpoint
3.15.1.9  feCoordCurveMidpoint
feCoordCurveMidpoint
( cuID, xyz )
Description:This function finds the coordinates that are located at the midpoint of a curve.
Input:
INT4 cuIDThe ID of the curve to measure along. The midpoint is halfway 
(along the curve) between th e start and end of the curve.
Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:
FE_NOT_EXIST The selected curve does not exist.
Remarks/Usage:NoneExample:None
feCoordCurveCenter   API-825
3.15.1.10  feCoordCurveCenter
feCoordCurveCenter
( cuID, xyz )
Description:This function finds the coordinates that are located at the center of an  arc, circle, or solid curve that 
forms an arc or circle.
Input:INT4 cuID The ID of the cu rve to find the center.
Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:
FE_NOT_EXIST The selected curve does not exist.
Remarks/Usage:This function will return FE_FAIL if  you give it any other curve type except an arc, circle or solid. If 
you choose a solid curve, this functio n assumes it is an arc/circle and returns the appropriate radius. No 
checking is done to ensure that it is an arc or circle.
Example:None
 API-826  feCoordOntoSurface
3.15.1.11  feCoordOntoSurface
feCoordOntoSurface
( suID, fromXYZ, xyz )
Description:This function projects coordinates onto a selected surface.Input:INT4 suID The ID of the surface to project onto.REAL8 fromXYZ[0..2] The original co ordinate which will be projected.
Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:FE_NOT_EXIST The selected surface does not exist.Remarks/Usage:NoneExample:None
feCoordInSurface   API-827
3.15.1.12  feCoordInSurface
feCoordInSurface
( suID, suXY, xyz )
Description:This function returns coordi nates located at the parametric coordinates of a surface.
Input:INT4 suID The ID of the surface to use.REAL8 suXY[0..1] The parametric coordinates on the surface.Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:FE_NOT_EXIST The selected surface does not exist.Remarks/Usage:NoneExample:None
 API-828  feCoordSurfaceIntersect
3.15.1.13  feCoordSurfaceIntersect
feCoordSurfaceIntersect
( cuID, suID, nearXYZ, xyz )
Description:This function returns coordinates located at the intersection of a curve and surface.
Input:INT4 cuID The ID of the curve to use.INT4 suID The ID of the surface to use.
REAL8 nearXY[0..2]Coordinates near the intersection loca tion. This is only used if multi-
ple intersections are found. In this case, the closest one to this loca-
tion is returned. Specify in gl obal rectangular coordinates.
Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:FE_NOT_EXIST The selected curve or surface does not exist.Remarks/Usage:NoneExample:None
feCoordOnPoint   API-829
3.15.1.14  feCoordOnPoint
feCoordOnPoint
( ptID, xyz )
Description:This function returns the coordinates of a point.Input:INT4 ptID The ID of the point to locate.
Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:FE_NOT_EXIST The selected  point does not exist.
Remarks/Usage:NoneExample:None
 API-830  feCoordOnNode
3.15.1.15  feCoordOnNode
feCoordOnNode
( ndID, xyz )
Description:This function returns th e coordinates of a node.
Input:INT4 ndID The ID of the node to locate.Output:
REAL8 xyz[0..2]The coordinates selected. Always re turned in the global rectangular 
coordinate system.
Return Code:FE_NOT_EXIST The selected node does not exist.Remarks/Usage:NoneExample:None
feCoordTransform   API-831
3.15.1.16  feCoordTransform
feCoordTransform
( fromCSYS, fromXYZ, toCSYS, xyz )
Description:This function transforms coordinates from one coordinate system to another.
Input:
INT4 fromCSYSThe ID of the coordinate system in which the fromXYZ coordinates 
are currently specified. Specify 0 for global rectangular.
REAL8 fromXYZ[0..2] The coordinates to transform, specified in fromCSYS.INT4 toCSYS The ID of the coordi nate system to transform into.
Output:
REAL8 xyz[0..2]The transformed coordinates, return ed in the toCSYS coordinate sys-
tem. The two sets of coordinates MAY NOT be specified as the same 
variable.
Return Code:FE_NOT_EXIST One of the coordinate systems does not exist.Remarks/Usage:NoneExample:None
 API-832  feCoordArra yTransform
3.15.1.17  feCoordArrayTransform
feCoordArrayTransform
( count, fromCSYS, toCSYS, xyz )
Description:This function transforms an array of coordi nates from one coordinate system to another.
Input:
INT4 countThe number of sets of coordinates in xyz. There must be 3*count 
entries in xyz.
INT4 fromCSYSThe ID of the coordinate system in which the coordinates are cur-
rently specified. Specify 0 for global rectangular.
INT4 toCSYS The ID of the coordi nate system to transform into.
Output:
REAL8 xyz[0..3*count-1]On input, this array contains the or iginal coordinates. On output, it 
contains the transformed coordinates,  returned in the toCSYS coordi-
nate system. Coordinates in this  array must be in the order 
X0,Y0,Z0,X1,Y1,Z1,...,Xcount,Ycount,Zcount.
Return Code:FE_INV ALID The count must  be a positive number.
FE_NOT_EXIST One of the coordinate systems does not exist.Remarks/Usage:NOTE: This method will not work with .NET be cause the “xyz” argument  can not be used for 
both input and output. Use the feCoor dArrayTransform2( ) method instead.
Example:None
feCoordArrayTransform2   API-833
3.15.1.18  feCoordArrayTransform2
feCoordArrayTransform2
( count, fromCSYS, toCSYS, inXYZ, xyz )
Description:This function transforms an array of coordi nates from one coordinate system to another.
Input:
INT4 countThe number of sets of coordinates in xyz. There must be 3*count 
entries in xyz.
INT4 fromCSYSThe ID of the coordinate system in which the coordinates are cur-
rently specified. Specify 0 for global rectangular.
INT4 toCSYS The ID of the coordi nate system to transform into.
REAL8 inXYZ[0..3*count-1]This array contains the original coor dinates that will be transformed. 
Coordinates in this arra y must be in the order 
X0,Y0,Z0,X1,Y1,Z1,...,Xcount,Ycount,Zcount.
Output:
REAL8 xyz[0..3*count-1]Contains the transformed coordinat es, returned in the toCSYS coor-
dinate system. Coordinates in this array are in the same order as in  
inXYZ.
Return Code:FE_INV ALID The count must  be a positive number.
FE_NOT_EXIST One of the coordinate systems does not exist.Remarks/Usage:This method replaces the feCo ordArrayTransform( ) method wh ich will not work with .NET
Example:None
 API-834  feCoordColinear
3.15.1.19  feCoordColinear
feCoordColinear
( xyz1, xyz2, xyz3, isColinear )
Description:This function checks three sets of coor dinates and determines if they are colinear.
Input:
REAL8 xyz1[0..2]The coordinates of the first point. This, and the other coordinates, 
must be stored in rectangular coordinates.
REAL8 xyz2[0..2] The coordinates of the second point.REAL8 xyz3[0..2] The coordi nates of the third point.
Output:
BOOL isColinearTrue if the points are colinear (w ithin the toleranc e specified inter-
nally); False otherwise.
Return Code:NoneRemarks/Usage:NoneExample:None
feCoordToDirCos   API-835
3.15.1.20  feCoordToDirCos
feCoordToDirCos
( origin, xAxis, xyPlane, dircos )
Description:This function converts three coordinates into a 3x3 direction cosine matrix.Input:REAL8 origin[0..2] The lo cation at the origin.
REAL8 xAxis[0..2] A location along the positive X axis.
REAL8 xyPlane[0..2] A location in th e positive quadrant of the XY plane.
Output:
REAL8 dircos[0..8]The 3x3 direction cosine  matrix. Data is stored in row-order. 
[0,0]=[0], [0,1]=[1], [0,2]= [2], [1,0]=3 ... [2,2]=[8]
Return Code:NoneRemarks/Usage:All coordinates must be specified in  rectangular coordinates. The direc tion cosine matrix is relative to 
whatever coordinate system the or iginal points were specified in.
Example:None
 API-836  feCoordRotate
3.15.1.21  feCoordRotate
feCoordRotate
( xyz, angle, origin, axis, xyzROT )
Description:This function takes a coordinate  location and rotates it through a prescribed angle about a vector.
Input:
REAL8 xyz[0..2]The original unrotated coordinates - must be specified in rectangular 
coordinates.
REAL8 angle The angle of rotation.REAL8 origin[0..2] The coordinates at the origin/base of the rotation axis vector.
REAL8 axis[0..2] The components of the rotation axis vector.
Output:REAL8 xyzROT[0..2] The rotated coordinates.Return Code:NoneRemarks/Usage:All coordinates and vector components must be spec ified in the same rectangular coordinate system - 
normally global rectangular.
Example:None
feCoordOntoPlane   API-837
3.15.1.22  feCoordOntoPlane
feCoordOntoPlane
( xyz, projDir, planePt, planeNorm, xyzPlane )
Description:This function takes a coordina te location and projects it along a vector onto a plane.
Input:
REAL8 xyz[0..2]The original unprojected coordinates - must be specified in rectangu-
lar coordinates.
REAL8 projDir[0..2] The components of the vector to project along.REAL8 planePt[0..2] The coordinates of any point on the plane.REAL8 planeNorm[0..2] The components of the normal vector of the plane.Output:REAL8 xyzPlane[0..2] The projected coordinates.Return Code:
FE_FAILThe projection failed. Probably the projDir vector is parallel to the 
plane (perpendicular to planeNorm).
Remarks/Usage:All coordinates and vector components must be spec ified in the same rectangular coordinate system - 
normally global rectangular.
Example:None
 API-838  feCoordOntoLine
3.15.1.23  feCoordOntoLine
feCoordOntoLine
( xyz, p1, p2, xyzLine )
Description:This function takes a coordinate lo cation and projects it onto a line specified by two endpoint locations.
Input:
REAL8 xyz[0..2]The original unprojected coordinates - must be specified in rectangu-
lar coordinates.
REAL8 p1[0..2] The first set of coordinates along the line.REAL8 p2[0..2] The second set of coordinates along the line.Output:REAL8 xyzLine[0..2] The projected coordinates.Return Code:NoneRemarks/Usage:All coordinates and vector components must be spec ified in the same rectangular coordinate system - 
normally global rectangular. The line which the coor dinates are projected onto is considered to be 
infinite.
Example:None
feCoordPlaneIntersect   API-839
3.15.1.24  feCoordPlaneIntersect
feCoordPlaneIntersect
( baseA, normA, baseB, normB, baseC, normC, ptV )
Description:This function finds the coordinate locati on at the intersection of three planes.
Input:REAL8 baseA[0..2] The coordinates of a point on the first plane.REAL8 normA[0..2] The components of the normal of the first plane.REAL8 baseB[0..2] The coordinates of a point on the second plane.REAL8 normB[0..2] The components of the normal of the second plane.REAL8 baseC[0..2] The coordinates of a point on the third plane.
REAL8 normC[0..2] The components of  the normal of the third plane.
Output:REAL8 ptV[0..2] The coordinate s at the intersection location.
Return Code:FE_FAIL No intersection could be found.Remarks/Usage:All coordinates and vector components must be spec ified in the same rectangular coordinate system - 
normally global rectangular.
Example:None
 API-840  feCoordVectorPlaneIntersect
3.15.1.25  feCoordVectorPlaneIntersect
feCoordVectorPlaneIntersect
( ptVEC, normVEC, ptPLANE, normPLANE, ptV )
Description:This function finds the coordinate location at the intersection of a vector and a plane.
Input:REAL8 ptVEC[0..2] The coordinates of a point on the vectorREAL8 normVEC[0..2] The components of direction along the vectorREAL8 ptPLANE[0..2] The coordinates of a point on the plane.REAL8 normPLANE[0..2] The components of the normal of the plane.Output:REAL8 ptV[0..2] The coordinate s at the intersection location.
Return Code:FE_FAIL No intersection could be found.Remarks/Usage:All coordinates and vector components must be spec ified in the same rectangular coordinate system - 
normally global rectangular.
Example:None
feRotationTransform   API-841
3.15.1.26  feRotationTransform
feRotationTransform
( fromCSYS, fromROT, toCSYS, rot )
Description:This function transforms a triple rotatio n from one coordinate system to another.
Input:
INT4 fromCSYSThe ID of the coordinate system in which the fromROT rotations are 
currently specified. Specify 0 for global rectangular.
REAL8 fromROT[0..2]The rotations to transform, specif ied in fromCSYS. The rotations are 
triple rotations, about X, the ro tated Y and the doubly-rotated Z.
INT4 toCSYS The ID of the coordi nate system to transform into.
Output:
REAL8 rot[0..2]The transformed rotations, returned  in the toCSYS coordinate sys-
tem. The two sets of rotations MA Y NOT be specified as the same 
variable.
Return Code:FE_NOT_EXIST One of the coordinate systems does not exist.Remarks/Usage:NoneExample:None
 API-842  feRotationToDirCos
3.15.1.27  feRotationToDirCos
feRotationToDirCos
( rot, dircos )
Description:This function converts a triple-rota tion, about X, then Y , then Z, into a 3x3 di rection cosine matrix.
Input:
REAL8 rot[0..2]The rotations, first about X, then the rotated Y , then the doubly-
rotated Z.
Output:
REAL8 dircos[0..8]The 3x3 direction cosine  matrix. Data is stored in row-order. 
[0,0]=[0], [0,1]=[1], [0,2]= [2], [1,0]=3 ... [2,2]=[8]
Return Code:
None
Remarks/Usage:Throughout this description, M is the dircos matr ix. The direction cosine ma trix is of the following 
form: X'  = { M } X
The rows of the matrix represent a ve ctor in the primed direction rela tive to the unprimed coordinates. 
For example, {M[1][0],M[1][1],M[1][2]} is a ve ctor in the Y' direction relative to X,Y ,Z.
Similarly, since this is a direction cosine matrix the columns of the matrix represent vectors in the 
unprimed direction relative to prim ed coordinates. For example: {M[0 ][1],M[1][1],M[2][1]} is a vector 
in the Y direction relative to X',Y',Z'.
Example:None
feRotationFromDirCos   API-843
3.15.1.28  feRotationFromDirCos
feRotationFromDirCos
( dircos, rot )
Description:This function converts a 3x3 directio n cosine matrix into an equivalent  triple-rotation, about X, then Y , 
then Z.
Input:
REAL8 dircos[0..8]The 3x3 direction cosine  matrix. Data is stored in row-order. 
[0,0]=[0], [0,1]=[1], [0,2]= [2], [1,0]=3 ... [2,2]=[8].
Output:
REAL8 rot[0..2]The rotations, first about X, then the rotated Y , then the doubly-
rotated Z.
Return Code:NoneRemarks/Usage:There can be multiple possible solutio ns to the same direction cosine ma trix. This routine simply returns 
one of the possible solutions.
Example:None
 API-844  feVectorTransform
3.15.2  Vector Methods
3.15.2.1  feVectorTransform
feVectorTransform
( fromCSYS, baseXYZ, fromXYZ, toCSYS, xyz )
Description:This function transforms vectors fro m one coordinate system to another.
Input:
INT4 fromCSYSThe ID of the coordinate system in which the fromXYZ coordinates 
are currently specified. Specify 0 for global rectangular.
REAL8 baseXYZ[0..2]The coordinates at the base of the ve ctor to be transformed. Must be 
specified in the fromCSYS coordinate system.
REAL8 fromXYZ[0..2]The components of the vector to be transformed. Must be specified 
in the fromCSYS coordinate system.
INT4 toCSYS The ID of the coordi nate system to transform into.
Output:
REAL8 xyz[0..2]The transformed vector components, returned in the toCSYS coordi-
nate system.
Return Code:FE_NOT_EXIST One of the coordinate systems does not exist.Remarks/Usage:NoneExample:None
feVectorArrayTransform   API-845
3.15.2.2  feVectorArrayTransform
feVectorArrayTransform
( count, fromCSYS, toCSSYS, baseXYZ, fromXYZ, xyz )
Description:This function transforms an array of vect ors from one coordinate system to another.
Input:
INT4 countThe number of vectors to be transf ormed, not the total size of the 
baseXYZ and fromXYZ arrays.
INT4 fromCSYSThe ID of the coordinate system  in which the fromXYZ coordi-
nates are currently specified. Specify 0 for global rectangular.
INT4 toCSYS The ID of the coordi nate system to transform into.
REAL8 baseXYZ[0..3*count-1]The coordinates at the base of the vector to be transformed. Must 
be specified in the fromCSYS coordinate system.
REAL8 fromXYZ[0..3*count-1]The components of the vector to be transformed. Must be speci-
fied in the fromCSYS coordinate system.
Output:
REAL8 xyz[0..3*count-1]The transformed vector components for each original vector, 
returned in the toCSYS coordinate system.
Return Code:FE_NOT_EXIST One of the coordinate systems does not exist.FE_INV ALID The value fo r count is invalid.
FE_TOO_SMALLThe baseXYZ array or fromXYZ array does not have enough 
entries.
Remarks/Usage:NoneExample:
 API-846  feVectorArrayTransform
Sub Main
    Dim App As femap.model
    Set App = feFemap()    Dim vecbase(5) As Double
    Dim vecfrom(5) As Double
    Dim vecto As Variant    vecbase(0) = 0.0
    vecbase(1) = 0.0
    vecbase(2) = 0.0    vecbase(3) = 0.0
    vecbase(4) = 0.0
    vecbase(5) = 0.0    vecfrom(0) = 1.0
    vecfrom(1) = 0.0
    vecfrom(2) = 0.0
    vecfrom(3) = 0.0
    vecfrom(4) = -1.0    vecfrom(5) = 0.0
    rc = App.feVectorArrayTransform _
    (1, 0, 3, vecbase, vecfrom, vecto)End SubfeVectorArrayTransform
( count, fromCSYS, toCSSYS, baseXYZ, fromXYZ, xyz )
feVectorFromBeam   API-847
3.15.2.3  feVectorFromBeam
feVectorFromBeam
( elemID, bmXYZ, xyz )
Description:This function transforms a vector from beam/bar  elemental coordinates to global rectangular.
Input:
INT4 elemIDThe ID of the element that defines the coordinate system where the 
bmXYZ components are defined.
REAL8 bmXYZ[0..2]The components of the vector to be transformed. Must be specified 
in the elemental coordinate system of element elemID.
Output:
REAL8 xyz[0..2]The transformed vector components, returned in the global rectangu-
lar coordinate system.
Return Code:NoneRemarks/Usage:The element specified must exist, and must be an appropriate line elem ent (beam, bar...) type.
Example:None
 API-848  feVectorToBeam
3.15.2.4  feVectorToBeam
feVectorToBeam
( elemID, xyz, bmXYZ )
Description:This function transforms a vector from global rect angular coordinates into b eam/bar elemental coordi-
nates.
Input:
INT4 elemIDThe ID of the element that defines the coordinate system where the 
bmXYZ components are defined.
REAL8 xyz[0..2]The components of the vector to be transformed. Must be specified 
in global rectangular coordinates.
Output:
REAL8 bmXYZ[0..2]The transformed vector components, returned in the elemental coor-
dinates of elemID.
Return Code:NoneRemarks/Usage:The element specified must exist, and must be an appropriate line elem ent (beam, bar...) type.
Example:None
feVectorLength   API-849
3.15.2.5  feVectorLength
feVectorLength
( xyz, vecLength )
Description:This function computes the length of a vector.Input:
REAL8 xyz[0..2]The components of the vector to be  measure. Must be specified in 
rectangular coordinates.
Output:REAL8 vecLength The length of the vector.Return Code:NoneRemarks/Usage:NoneExample:None
 API-850  feVectorCrossProduct
3.15.2.6  feVectorCrossPoduct
feVectorCrossProduct
( vecA, vecB, vecAxB )
Description:This function computes the cross product of two vectors.Input:REAL8 vecA[0..2] The components of the first vector.REAL8 vecB[0..2] The components of the second vector.Output:REAL8 vecAxB[0..2] The components of the cross product of the two vectors.Return Code:NoneRemarks/Usage:NoneExample:None
feVectorDotProduct   API-851
3.15.2.7  feVectorDotProduct
feVectorDotProduct
( vecA, vecB, dot )
Description:This function computes the dot (scalar) product of two vectors.Input:REAL8 vecA[0..2] The components of the first vector.REAL8 vecB[0..2] The components of the second vector.Output:REAL8 dot The scalar product of the two vectors.Return Code:NoneRemarks/Usage:In versions prior to v10. 3, this method normalized  the supplied vectors prior to computing the dot prod-
uct. It now computes a true dot product and a new method feVectorNormalizedDotProduct( ) was added to provide the previous functionality.
Example:None
 API-852  feVectorNormalizedDotProduct
3.15.2.8  feVectorNormalizedDotProduct
feVectorNormalizedDotProduct
( vecA, vecB, dot )
Description:This function normalizes th e supplied vectors and computes their dot (scalar) product.
Input:REAL8 vecA[0..2] The components of the first vector.REAL8 vecB[0..2] The components of the second vector.Output:REAL8 dot The scalar product of the two vectors.Return Code:NoneRemarks/Usage:The result of this method is the cosi ne of the angle between the vectors.
Example:None
feVectorPerpendicular   API-853
3.15.2.9  feVectorPerpendicular
feVectorPerpendicular
( vecIN, vecOUT )
Description:This function computes an arbitrary vector th at is perpendicular to  the specified vector.
Input:REAL8 vecIN[0..2] The components of the first vector.Output:REAL8 vecOUT[0..2] The perpendicular vector.Return Code:NoneRemarks/Usage:If the vector specified is aligned with a global axis, you will always get a different global axis returned. 
If not, a cross product with either the global X (or global Z if the original vector is too close to the global 
X axis) is used to dete rmine the perpendicular.
Example:None
 API-854  feVectorAngle
3.15.2.10  feVectorAngle
feVectorAngle
( vecA, vecB, angle )
Description:This function computes the angle between two vectors. Input:REAL8 vecA[0..2] The components of the first vector.REAL8 vecB[0..2] The components of the second vector.Output:REAL8 angle The included an gle between the two vectors.
Return Code:NoneRemarks/Usage:The angle is always between 0 and 180 degrees. There is no indication or consideration of the direction 
of the included angle between the vectors.
Example:None
feVectorAngleAxis   API-855
3.15.2.11  feVectorAngleAxis
feVectorAngleAxis
( vecA, vecB, axis, angle )
Description:This function computes the angle between two vectors rotating around an axis. 
Input:REAL8 vecA[0..2] The components of the first vector.REAL8 vecB[0..2] The components of the second vector.REAL8 axis[0..2] The components  of the axis of rotation.
Output:REAL8 angle The included an gle between the two vectors.
Return Code:NoneRemarks/Usage:The angle is always between -180 and 180 degrees. If the angle subtended when going from vecA to 
vecB is in a positive direction (right-hand rule sense)  around the axis of rotation,  then the returned angle 
is positive; otherwise a ne gative angle is returned.
Example:None
 API-856  feVectorPlaneIntersect
3.15.2.12  feVectorPlaneIntersect
feVectorPlaneIntersect
( baseA, normA, baseB, normB, ptV, dirV )
Description:This function computes the vector at the intersection of two planes.
Input:REAL8 baseA[0..2] The coordinates of a location on the first plane.
REAL8 normA[0..2] The components of the normal vector of the first plane.REAL8 baseB[0..2] The coordinates of a location on the second plane.
REAL8 normB[0..2] The components of the normal vector of the second plane.Output:REAL8 ptV[0..2] The coordinates of a location on the intersection vector.
REAL8 dirV[0..2] The components of the vector along the line of intersection.
Return Code:NoneRemarks/Usage:All coordinates and componen ts must be specified in the same rect angular coordinate system - normally 
global rectangular.
Example:None
feVectorUnit   API-857
3.15.2.13  feVectorUnit
feVectorUnit
( vecIN, vecNORM )
Description:This function normalizes a vector to make it into an equivalent unit vector.
Input:REAL8 vecIN[0..2] The componets of the vector to be normalizedOutput:REAL8 vecNORM[0..2] The normalized vectorReturn Code:NoneRemarks/Usage:In addition to simply dividing by the length of th e vector, this function also  completely eliminates com-
ponents of the vector that are very  small ( less than 1E-8 times the le ngth) compared to the other compo-
nents. This helps to eliminate numer ical errors which can creep in during transformations or other vector 
operations.
Example:None
 API-858  feVectorPick
3.15.2.14  feVectorPick
feVectorPick
( dlgTitle, unitVector, vecLength, vecBase, vecDir )
Description:This function displays a dialog box to allow a user to pick or enter vectors.
Input:STRING dlgTitle A string that specifies a title to be added to the dialog box title.BOOL unitVector Set to False if you want the us er to be able to enter a vector length.
Output:REAL8 vecLength The length of the vector. This will be 1.0 if unitVector=True.
REAL8 vecBase[0..2] The coordinate s at the base of the vector.
REAL8 vecDir[0..2] The components of the vector.Return Code:FE_CANCEL The dialog box was cancelled.Remarks/Usage:The components in vecDir will always  be those of a unit vector. The vect or length is always returned in 
vecLength.
Example:None
feVectorPickByMethod   API-859
3.15.2.15  feVectorPickByMethod
feVectorPickByMethod
( method, dlgTitle, unitVector, vecLength, vecBase, vecDir )
Description:This function displays a dialog box to  allow a user to pick or enter v ectors. Same as feVectorPick except 
that you can specify the initial dialog box method.
Input:
INT4 methodThe initial dialog box method. Refe r to “Vector Dialog Methods” for 
possible values.
STRING dlgTitle A string that specifies a title to be added to the dialog box title.BOOL unitVector Set to False if you want the us er to be able to enter a vector length.
Output:
REAL8 vecLength The length of the vector. This will be 1.0 if unitVector=True.
REAL8 vecBase[0..2] The coordinate s at the base of the vector.
REAL8 vecDir[0..2] The components of the vector.Return Code:FE_CANCEL The dialog box was cancelled.Remarks/Usage:The components in vecDir will always  be those of a unit vector. The vect or length is always returned in 
vecLength.
Example:None
 API-860  feVectorAxis
3.15.2.16  feVectorAxis
feVectorAxis
( csysID, axis, positive, vecDir )
Description:This function creates a unit vector in the direc tion of one of the axes of a coordinate system.
Input:INT4 csysID The ID of the coordinate sy stem to use for the vector definition.
INT4 axis Set to 0=X axis, 1=Y axis, 2=Z axis.BOOL positive True if you want the positi ve axis; False for the negative axis.
Output:REAL8 vecDir[0..2] The components of the vector.Return Code:FE_NOT_EXIST The coordinate system that you requested does not exist.Remarks/Usage:The components in vecDir will al ways be those of a unit vector.
Example:None
feVectorTangentToCurve   API-861
3.15.2.17  feVectorTangentToCurve
feVectorTangentToCurve
( cuID, baseXYZ, vecDir )
Description:This function returns a unit vector that is the tangent to a curve at a specified location.
Input:INT4 cuID The ID of the curve used to compute the tangent.REAL8 baseXYZ[0..2] The coordinates of th e location used to compute the tangent.
Output:REAL8 vecDir[0..2] The components of  the tangent vector at baseXYZ.
Return Code:FE_NOT_EXIST The specified curve does not exist.Remarks/Usage:The components in vecDir will always  be those of a unit vector. If th e location specifie d in baseXYZ is 
not on the curve, it will be projected onto the curv e and the tangent will be at the projected location.
Example:None
 API-862  feVectorNormalToSurface
3.15.2.18  feVectorNormalToSurface
feVectorNormalToSurface
( suID, baseXYZ, vecDir )
Description:This function returns a unit vector that is th e normal to a surface at a specified location.
Input:INT4 suID The ID of the surface  used to compute the normal.
REAL8 baseXYZ[0..2] The coordinates of th e location used to compute the normal.
Output:REAL8 vecDir[0..2] The components of  the normal vector at baseXYZ.
Return Code:FE_NOT_EXIST The specified surface does not exist.Remarks/Usage:The components in vecDir will always  be those of a unit vector. If th e location specifie d in baseXYZ is 
not on the surface, it will be projec ted onto the surface an d the normal will be at  the projected location.
Example:None
feVectorNormalToView   API-863
3.15.2.19  feVectorNormalToView
feVectorNormalToView
( suID, vecDir )
Description:This function returns a unit vector  that is the normal to a view.
Input:
INT4 vuIDThe ID of the view used to comput e the normal. Set to -1 to compute 
the normal of the active view.
Output:REAL8 vecDir[0..2] The components of the normal vector.Return Code:FE_NOT_EXIST The specified view does not exist.Remarks/Usage:The components in vecDir will always  be those of a unit vector. The norm al vector always points out of 
the screen.
Example:None
 API-864  feVectorAxisOfSurface
3.15.2.20  feVectorAxisOfSurface
feVectorAxisOfSurface
( suID, baseXYZ, vecDir )
Description:This function return s the axis of revolution for a surface.
Input:INT4 suID The ID of the surface  to find revolution axis.
Output:REAL8 baseXYZ[0..2] The coordinates at the base of the revolution vector.REAL8 vecDir[0..2] The componen ts of the revolution vector.
Return Code:FE_NOT_EXIST Surface does not exist.FE_CANCEL Unable to find surface axis or surface is not a revolute type.
Remarks/Usage:NoneExample:None
feVectorRotate   API-865
3.15.2.21  feVectorRotate
feVectorRotate
( baseXYZ, vecXYZ, angle, origin, axis, baseROT, vecROT )
Description:This function returns a vector computed from rotating the original vector around a given axis using the 
specified angle, in degrees
Input:REAL8 baseXYZ[0..2] The coordinates at the base of the original vector.REAL8 vecXYZ[0..2] The components of the original vector.REAL8 angle Rotation angle in degreesREAL8 origin[0..2] The coordinates at th e base of the vector to rotate about.
REAL8 axis[0..2] The components of  the vector to rotate about.
Output:REAL8 baseROT[0..2] The coordinates at the base of the rotated vector.
REAL8 vecROT[0..2] The components of the rotated vector.Return Code:
Remarks/Usage:
NoneExample:None
 API-866  fePlanePick
3.15.3  Plane Methods
3.15.3.1  fePlanePick
fePlanePick
( dlgTITLE, plBase, plNormal, plAxis )
Description:This function displays a dialog box to allow a user to define a plane.Input:STRING dlgTitle A string that specifies a title to be added to the dialog box title.Output:
REAL8 plBase[0..2]The coordinates of a location on the plane, in global rectangular 
coordinates.
REAL8 plNormal[0..2] The components of the vector that is normal to the plane.REAL8 plAxis[0..2] The components of a vector along the plane X axis.Return Code:FE_CANCEL The dialog box was cancelled.Remarks/Usage:The plane Y axis can be computed from a cr oss product of the normal and the X axis.
Example:None
fePlanePickByMethod   API-867
3.15.3.2  fePlanePickByMethod
fePlanePickByMethod
( method, dlgTITLE, plBase, plNormal, plAxis )
Description:This function displays a dialog box to allow a user  to define a plane. Same as fePlanePick except you 
can specify the initial dialog box method.
Input:
INT4 methodThe initial dialog box method. Refe r to “Plane Dialog Methods” for 
possible values.
STRING dlgTitle A string that specifies a title to be added to the dialog box title.Output:
REAL8 plBase[0..2]The coordinates of a location on the plane, in global rectangular 
coordinates.
REAL8 plNormal[0..2] The components of the vector that is normal to the plane.REAL8 plAxis[0..2] The components of a vector along the plane X axis.Return Code:FE_CANCEL The dialog box was cancelled.Remarks/Usage:The plane Y axis can be computed from a cr oss product of the normal and the X axis.
Example:None
 API-868  fePlaneLocation
3.15.3.3  fePlaneLocation
fePlaneLocation
( p1, p2, p3, planeBase, planeNormal, planeX )
Description:Defines a plane by specifying the coor dinates of three points on the plane.
Input:REAL8 p1[0..2]
The coordinates of the points on th e plane. The first point is the ori-
gin. The vector from the first to the second point is the X axis.REAL8 p2[0..2]
REAL8 p3[0..2]Output:
REAL8 plBase[0..2]The coordinates of a location on the plane, in global rectangular 
coordinates.
REAL8 plNormal[0..2] The components of the vector that is normal to the plane.REAL8 plAxis[0..2] The components of a vector along the plane X axis.Return Code:FE_FAIL The three locations were colinear.Remarks/Usage:The plane Y axis can be computed from a cr oss product of the Normal and the X axis.
Example:None
fePlaneNodes   API-869
3.15.3.4  fePlaneNodes
fePlaneNodes
( n1, n2, n3, planeBase, planeNormal, planeX )
Description:Defines a plane by specifying the IDs of three nodes on the plane.
Input:INT4 n1
The IDs of the three nodes on the pl ane. The first point is the origin. 
The vector from the first to th e second point is the X axis.INT4 n2
INT4 n3Output:
REAL8 plBase[0..2]The coordinates of a location on the plane, in global rectangular 
coordinates.
REAL8 plNormal[0..2] The components of the vector that is normal to the plane.REAL8 plAxis[0..2] The components of a vector along the plane X axis.Return Code:FE_FAIL The three locations were colinear.Remarks/Usage:The plane Y axis can be computed from a cr oss product of the normal and the X axis.
Example:None
 API-870  fePlanePoints
3.15.3.5  fePlanePoints
fePlanePoints
( p1, p2, p3, planeBase, planeNormal, planeX )
Description:Defines a plane by specifying the IDs of three points on the plane.
Input:INT4 p1
The IDs of the three points on the pl ane. The first point is the origin. 
The vector from the first to th e second point is the X axis.INT4 p2
INT4 p3Output:
REAL8 plBase[0..2]The coordinates of a location on the plane, in global rectangular 
coordinates.
REAL8 plNormal[0..2] The components of the vector that is normal to the plane.REAL8 plAxis[0..2] The components of a vector along the plane X axis.Return Code:FE_FAIL The three locations were colinear.Remarks/Usage:The plane Y axis can be computed from a cr oss product of the normal and the X axis.
Example:None
fePlaneBisect   API-871
3.15.3.6  fePlaneBisect
fePlaneBisect
( p1, p2, p3, planeBase, planeNormal, planeX )
Description:Defines a plane that bisects the angle formed between three points.
Input:REAL8 p1[0..2] The location at the origin  of the two vectors to be bisected.
REAL8 p2[0..2]The end of the first vector (from p1 ) that will be used for the bisec-
tion.
REAL8 p3[0..2]The end of the second vector (fro m p1) that will be used for the 
bisection.
Output:
REAL8 plBase[0..2]The coordinates of a location on the plane, in global rectangular 
coordinates.
REAL8 plNormal[0..2] The components of the vector that is normal to the plane.REAL8 plAxis[0..2] The components of a vector along the plane X axis.Return Code:FE_FAIL The three locations were colinear.Remarks/Usage:The plane Y axis can be computed from a cr oss product of the normal and the X axis.
Example:None
 API-872  fePlaneCSys
3.15.3.7  fePlaneCSys
fePlaneCSys
( p1, csysID, planeID, planeBase, planeNormal, planeX )
Description:Defines a plane that is one of the prin cipal planes of a coordinate system.
Input:
REAL8 p1[0..2]A location that will be the origin of the plane - specified in global 
coordinates.
INT4 csysIDThe ID of the coordinate system to use to define the plane. Specify as 
0 for global coordinates.
INT4 planeIDA number that selects the plane of the coordinate system to use:  
0=Positive XY , 1=Positive, YZ, 2=Positive ZX, 3=Negative XY , 
4=Negative, YZ, 5=Negative ZX.
Output:
REAL8 plBase[0..2]The coordinates of a location on the plane, in global rectangular 
coordinates.
REAL8 plNormal[0..2] The components of the vector that is normal to the plane.REAL8 plAxis[0..2] The components of a vector along the plane X axis.Return Code:FE_FAIL The coordinate system was invalid or does not existRemarks/Usage:The plane Y axis can be computed from a cr oss product of the normal and the X axis.
Example:None
fePlaneSurfaceNormal   API-873
3.15.3.8  fePlaneSurfaceNormal
fePlaneSurfaceNormal
( surfID, ptID1, ptID2, reversed, align, offset, planeBase, planeNormal, planeX )
Description:Defines a plane that is normal to a surface.Input:INT4 surfID The ID of the surface  used to define the normal.
INT4 ptID1 The ID of a point that w ill define the origin of the plane
INT4 ptID2 The ID of a point that will be  used to define the X axis of the plane
BOOL reversedSet to True if you want the norma l that is revers ed from the surface 
normal.
BOOL align If True, the axis of the plan e will be aligned to the surface axes.
REAL8 offsetThe distance that the plane will be offset, along its normal vector, 
from the first point (origin).
Output:
REAL8 plBase[0..2]The coordinates of a location on the plane, in global rectangular 
coordinates.
REAL8 plNormal[0..2] The components of the vector that is normal to the plane.REAL8 plAxis[0..2] The components of a vector along the plane X axis.Return Code:FE_FAIL The surface was in valid or does not exist.
Remarks/Usage:The plane Y axis can be computed from a cr oss product of the normal and the X axis.
Example:None
 API-874  fePlaneCurveNormal
3.15.3.9  fePlaneCurveNormal
fePlaneCurveNormal
( cuID, planeBase, planeNormal, planeX )
Description:Defines a plane that is normal to a curve.Input:
INT4 cuIDThe ID of the curve used to determ ine the normal. The curve must be 
planar, and cannot be a line. This is  usually used with arcs and circles 
to determine their plane.
Output:
REAL8 plBase[0..2]The coordinates of a location on the plane, in global rectangular 
coordinates.
REAL8 plNormal[0..2] The components of the vector that is normal to the plane.REAL8 plAxis[0..2] The components of a vector along the plane X axis.Return Code:FE_FAIL The curve was inva lid or does not exist.
Remarks/Usage:The plane Y axis can be computed from a cr oss product of the normal and the X axis.
Example:None
fePlaneViewAlign   API-875
3.15.3.10  fePlaneViewAlign
fePlaneViewAlign
( viewID, intoView, planeNormal, planeX )
Description:Defines a plane that is normal to a view.Input:INT4 viewID The ID of a view.BOOL intoView Determines whether the normal  will be into or out of the screen.
Output:REAL8 plNormal[0..2] The components of the vector that is normal to the plane.REAL8 plAxis[0..2] The components of a vector along the plane X axis.Return Code:FE_FAIL The view was invalid or does not exist.Remarks/Usage:The plane Y axis can be computed from a cr oss product of the normal and the X axis.
Example:None
 API-876  fePlaneRotate
3.15.3.11  fePlaneRotate
fePlaneRotate
( baseXYZ, vecXXYZ, vecZXYZ, angle, origin, axis, baseROT, vecXROT, vecYROT, 
vecZROT )
Description:This function returns three vector s computed from rotating the original  plane around a given axis using 
the specified angle, in degrees
Input:
REAL8 baseXYZ[0..2]The coordinates of a location on the plane, in global rectangular 
coordinates.
REAL8 vecXXYZ[0..2] The components of a vector along the plane X axis.REAL8 vecZXYZ[0..2] The components of th e vector that is normal to the plane.
REAL8 angle Rotation angle in degreesREAL8 origin[0..2] The coordinates at th e base of the vector to rotate about.
REAL8 axis[0..2] The components of  the vector to rotate about.
Output:REAL8 baseROT[0..2] The coordinates at the base of the rotated vector.
REAL8 vecXROT[0..2] The components  of the rotated vecXXYZ vector.
REAL8 vecYROT[0..2] The rotated plane YREAL8 vecZROT[0..2] The components of the rotated  vecZXYZ vector.Return Code:
Remarks/Usage:
NoneExample:None
fePlaneRotate   API-877
3.15.4  Entity Selection Methods
3.15.4.1  Selection Dialog Boxes
Entity selection dialog boxes av ailable in the FEMAP interface are available through the API 
using certain Set Object Methods. These Meth ods require you to create a FEMAP Set Object 
before they can be used. More  information on these Set Object Methods can be found in:
Section 4.6.2.46, "Select" - standard  FEMAP entity selection dialog box 
Section 4.6.2.47, "SelectID" - standard Si ngle entity selection dialog box in FEMAP.
Section 4.6.2.50, "SelectMultiIDV2" - standard Multiple entity selection dialog box in FEMAP.
Section 4.6.2.51, "SelectOutputVectorIDV2" - select a single Output Vector ID from a list of Out-
put Vectors in a FEMAP dialog box.
In addition to these methods that select entire entities using Sets, y ou can select output or element 
faces using the following methods:
 API-878  feSelectOutputV2
3.15.4.2  feSelectOutputV2
feSelectOutputV2
( dlgTITLE, nBaseOutputSetID, limitOutputType, limitComplex, limitToEntity, inclu-
deCorner, pOutputSets, pOutputVecs )
Description:This function displays a dialog box to allow a user to select Output Sets and Vectors. This method is 
obsolete and should no longer be used. It has been replaced by feSe lectOutput2. This method replaces 
feSelectOutput. For more informatio n, see Section 2.4, "Working with Output in FEMAP 2020.1 and 
above".
Input:STRING dlgTITLE A string that specifies a title to be used as the dialog box title.
INT4 nBaseOutputSetIDThe ID of an output set to use to fill the Output Vector selection con-
trol. If 0, then the active Output Set is used, or if none is active, the 
first available one is used. If specif ied as a negative number, then the 
absolute value of that number is used, but the Out put Set selection 
control only contains that Output  Set, not all the sets available.
INT4 limitOutputTypeReduces list of output vectors show n to the specified type (0=All, 
1=Disp, 2=Accel, 3=Force, 4=Stress, 5=Strain, 6=Temp)
INT4 limitComplexReduces list of output vectors shown based on type of real or com-
plex data they contain (0=Magnitude, 1=Phase, 2=Real, 3=Imagi-nary, 4=Any)
INT4 limitToEntityReduces list of output vectors to th ose containing data on the speci-
fied entity type
BOOL includeCorner If True, output vectors at element corners will also be included
Output:OBJECT pOutputSets A Set object that cont ains the Output Sets that were selected.
OBJECT pOutputVectors A Set object that contai ns the Output Vectors that were selected.
Return Code:FE_FAIL The user cancelled the dialog box. FE_NOT_EXIST No output sets/vectors exist.Remarks/Usage:
feSelectOutputV2   API-879
The following dialog box is used  for the set/vec tor selection...
To have this dialog box be displayed showing Outp ut Sets organized under already existing Analysis 
Studies, set SelectOutputSetsFromStudies to True (see Section 3.3.4, "Global Boolean Properties") 
before using this call.
Pressing “Add Similar Layer/Ply Results” will add Output  Vectors that are of the same type but at a dif-
ferent location in the element. For example if “Top  V on Mises Stress” is selected, pressing this will 
automatically select “Bottom V on Mises Stress”. For la minates it will select output on all plys. Pressing 
“Add Component/Corner Resu lts” will select output on element co rners or nodal vect or component out-
put of the same type as those vectors already selected.
For any method where API obje cts are returned as parameters, such as this one, it is your responsibility 
to free that object when you are finished using the object. Some pr ogramming languages like Basic will 
do this automatically, but others lik e C++, require you to do this manu ally. The objects are only created 
or returned when the Return Code is FE_OK.
Example:feSelectOutputV2
( dlgTITLE, nBaseOutputSetID, limitOutputType, limitComplex, limitToEntity, inclu-
deCorner, pOutputSets, pOutputVecs )

 API-880  feSelectOutputV2
The following routine allows you to  select output vectors and list the max/min values for selected ele-
ments...
Sub Main
Dim App As femap.modelSet App = feFemapDim s As femap.SetDim v As femap.SetDim e As femap.SetSet e = App.feSetDim RBO As femap.ResultsSet RBO = App.feResultsDim LCol As LongDim vCol As VariantDim minID As LongDim maxID As LongDim minVAL As DoubleDim maxVAL As DoubleDim rc As LongIf App.feSelectOutput2V2( "Select Output Vectors", 0, 0, 0, FOT_ANY, 
FOC_ANY, FT_ELEM, False, s, v ) <> FE_OK Then End
  If e.Select( FT_ELEM, True, "Select Elements" ) <> FE_OK Then End    App.feAppMessage( FCM_NORMAL, "Results ID, Vector ID, Minimum ID, 
Minimum Value, Maximum ID, Maximum Value" )
    While s.Next()      v.Reset()
      While v.Next()
        rc = RBO.Clear        rc = RBO.AddColumnV2( s.CurrentID, v.CurrentID, False, LCol, 
vCol )
        rc = RBO.GetColumnMinMax( 0, e.ID, minID, maxID, minVAL, maxVAL 
)
         App.feAppMessage( FCM_NORMAL, Str$(s.CurrentID)+"          
"+Str$(v.CurrentID)+" "+Str$(minID)+"="+Str$(minVAL)+"         "+Str$(maxID)+"="+Str$(maxVAL) )
      Wend    WendEnd SubfeSelectOutputV2
( dlgTITLE, nBaseOutputSetID, limitOutputType, limitComplex, limitToEntity, inclu-
deCorner, pOutputSets, pOutputVecs )
feSelectOutput2V2   API-881
3.15.4.3  feSelectOutput2V2
feSelectOutput2V2
( title, nBaseOutputSetID, nPreCheckedSetSetID, nPreCheckedVectorSetID, limitOut-
putType, limitComplex, limitToEntity, includeCorner, pOutputSets, pOutputVecs )
Description:This function displays a dialog box to allow a user to select Output Sets and Vectors along with already 
selected Output Sets and/or Vectors. This method re places feSelectOutput2. Fo r more information, see 
Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:STRING dlgTITLE A string that specifies a title to be used as the dialog box title.
INT4 nBaseOutputSetIDThe ID of an output set to use to fill the Output Vector selection con-
trol. If 0, then the active Output Set is used, or if none is active, the 
first available one is used. If specif ied as a negative number, then the 
absolute value of that number is used, but the Out put Set selection 
control only contains that Output  Set, not all the sets available.
INT4 nPreCheckedSetSetID The ID of the set objec t containing Output Set IDs to be prechecked.
INT4 nPreCheckedVectorSetIDThe ID of the set object containing Output Vector IDs to be pre-
checked. 
INT4 limitOutputTypeReduces list of output vectors show n to the specified type (0=All, 
1=Disp, 2=Accel, 3=Force, 4=Stress, 5=Strain, 6=Temp)
INT4 limitComplexReduces list of output vectors shown based on type of real or com-
plex data they contain (0=Magnitude, 1=Phase, 2=Real, 3=Imagi-nary, 4=Any)
INT4 limitToEntityReduces list of output vectors to th ose containing data on the speci-
fied entity type
BOOL includeCorner If True, output vectors at element corners will also be included
Output:OBJECT pOutputSets A Set object that cont ains the Output Sets that were selected.
OBJECT pOutputVectors A Set object that contai ns the Output Vectors that were selected.
Return Code:FE_FAIL The user cancelled the dialog box. FE_NOT_EXIST No output sets/vectors exist.Remarks/Usage:
 API-882  feSelectOutput2V2
The following dialog box is used  for the set/vec tor selection...
To have this dialog box be displayed showing Outp ut Sets organized under already existing Analysis 
Studies, set SelectOutputSetsFromStudies to True (see Section 3.3.4, "Global Boolean Properties") 
before using this call.
Pressing “Add Similar Layer/Ply Results” will add Output  Vectors that are of the same type but at a dif-
ferent location in the element. For example if “Top  V on Mises Stress” is selected, pressing this will 
automatically select “Bottom V on Mises Stress”. For la minates it will select output on all plys. Pressing 
“Add Component/Corner Resu lts” will select output on element co rners or nodal vect or component out-
put of the same type as those vectors already selected.
For any method where API obje cts are returned as parameters, such as this one, it is your responsibility 
to free that object when you are finished using the object. Some pr ogramming languages like Basic will 
do this automatically, but others lik e C++, require you to do this manu ally. The objects are only created 
or returned when the Return Code is FE_OK.
Example:
NonefeSelectOutput2V2
( title, nBaseOutputSetID, nPreCheckedSetSetID, nPreCheckedVectorSetID, limitOut-
putType, limitComplex, limitToEntity, includeCorner, pOutputSets, pOutputVecs )

feSelectOutputSets   API-883
3.15.4.4  feSelectOutputSets
feSelectOutputSets
( dlgTITLE, pOutputSets )
Description:This function displays a dialog box to allow a user to select Output Sets. This method is obsolete and 
should no longer be used. It has be en replaced by feSelectOutputSets2.
Input:STRING dlgTITLE A string that specifies a title to be used as the dialog box title.
Output:OBJECT pOutputSets A Set object that cont ains the Output Sets that were selected.
Return Code:FE_FAIL The user cancelled the dialog box. FE_NOT_EXIST No output sets exist.Remarks/Usage:
 API-884  feSelectOutputSets
The following dialog box is  used for the set selection:
To have this dialog box be displayed showing Outp ut Sets organized under already existing Analysis 
Studies, set SelectOutputSetsFromStudies to True (see Section 3.3.4, "Global Boolean Properties") 
before using this call.
For any method where API obje cts are returned as parameters, such as this one, it is your responsibility 
to free that object when you are finished using the object. Some pr ogramming languages like Basic will 
do this automatically, but others lik e C++, require you to do this manu ally. The objects are only created 
or returned when the Return Code is FE_OK.
Example:
NonefeSelectOutputSets
( dlgTITLE, pOutputSets )

feSelectOutputSets2   API-885
3.15.4.5  feSelectOutputSets2
feSelectOutputSets2
( title, nPreCheckedSetSetID, pOutputSets )
Description:This function displays a dialog box to allow a user to select Output Sets with prechecked Output Sets. 
Input:STRING title A string that specifies a titl e to be used as the dialog box title.
INT4 nPreCheckedSetSetID The ID of the set objec t containing Output Set IDs to be prechecked.
Output:OBJECT pOutputSets A Set object that cont ains the Output Sets that were selected.
Return Code:FE_FAIL The user cancelled the dialog box. FE_NOT_EXIST No output sets exist.Remarks/Usage:
 API-886  feSelectOutputSets2
The following dialog box is  used for the set selection:
To have this dialog box be displayed showing Outp ut Sets organized under already existing Analysis 
Studies, set SelectOutputSetsFromStudies to True (see Section 3.3.4, "Global Boolean Properties") 
before using this call.
For any method where API obje cts are returned as parameters, such as this one, it is your responsibility 
to free that object when you are finished using the object. Some pr ogramming languages like Basic will 
do this automatically, but others lik e C++, require you to do this manu ally. The objects are only created 
or returned when the Return Code is FE_OK.
Example:
NonefeSelectOutputSets2
( title, nPreCheckedSetSetID, pOutputSets )

feGetElementFaces   API-887
3.15.4.6  feGetElementFaces
feGetElementFaces
( dlgTITLE, orig_nCount, orig_elemID, orig_faceID, nCount, elemID, faceID )
Description:This function displays a dialog box to  allow a user to select element faces.
Input:STRING dlgTITLE A string that specifies a title to be used as the dialog box title.
INT4 orig_nCountThe number of elements/faces that are contained in orig_elemID and 
orig_faceID. These element faces are displayed in the dialog box 
when it is opened. Specify 0 to  display an empty dialog box.
INT4 orig_elemID[0..orig_n-
Count-1]The element IDs to be loaded when the dialog is opened
INT4 orig_faceID[0..orig_n-
Count-1]The face IDs to be loaded when the dialog is opened
Output:
INT4 nCountThe number of elements/faces that have been selected. Unless some 
or all of the “orig” fa ces were deleted, they w ill also be contained in 
this list.
INT4 elemID[0..nCount-1] The element IDs that were selectedINT4 faceID[0..nCount-1] The face IDs that were selected
Return Code:FE_CANCEL The user cancelled the dialog box. Value is not valid.Remarks/Usage:Element faces are paired in the elemID/faceID arrays. Th e face ID corresponds to the element ID at the 
same index in the array.
Example:None
 API-888  feGetElementEdges
3.15.4.7  feGetElementEdges
feGetElementEdges
( dlgTITLE, orig_nCount, orig_elemID, orig_edgeID, nCount, elemID, edgeID )
Description:This function displays a dialog box to  allow a user to select element edges.
Input:STRING dlgTITLE A string that specifies a title to be used as the dialog box title.
INT4 orig_nCountThe number of elements/edges that are contained in orig_elemID and 
orig_faceID. These element faces are displayed in the dialog box 
when it is opened. Specify 0 to  display an empty dialog box.
INT4 orig_elemID[0..orig_n-
Count-1]The element IDs to be loaded when the dialog is opened
INT4 orig_edgeID[0..orig_n-
Count-1]The edgeIDs to be loaded when the dialog is opened
Output:
INT4 nCountThe number of elements/edges that have been selected. Unless some 
or all of the “orig” edges were dele ted, they will also be contained in 
this list.
INT4 elemID[0..nCount-1] The element IDs that were selectedINT4 edgeID[0..nCount-1] The edge IDs that were selected
Return Code:FE_CANCEL The user cancelled the dialog box. Value is not valid.Remarks/Usage:Element edges are paired in the elemID/edgeID arrays . The edge ID corresponds to the element ID at 
the same index in the array.  The edgeID is the same as the faceID on the edge of planar elements. This 
method simply limits selec tion to those edge faces.
Example:None
feGetElementFacesFromSet   API-889
3.15.4.8  feGetElementFacesFromSet
feGetElementFacesFromSet
( title, nElemSetID, nCount, elemID, faceID )
Description:This function displays a dialog box to allow a user to select element faces with  the added option to limit 
the face selection using a set ob ject loaded with element IDs
Input:
STRING titleA string that specifies a title to be  used as the Face Selection dialog 
box title.
INT4 nElemSetIDThe ID of a Set object containing element IDs which will be used to 
limit face selection. Alternatively,  specify 0 to display a standard 
entity selection dialog bo x for Element selection.
Output:INT4 nCount The number of elements /faces that have been selected.
INT4 elemID[0..nCount-1] The element IDs that were selectedINT4 faceID[0..nCount-1] The face IDs that were selected
Return Code:FE_CANCEL The user cancelled the dialog box. Value is not valid.Remarks/Usage:Element faces are paired in the elemID/faceID arrays. Th e face ID corresponds to the element ID at the 
same index in the array.
Example:None
 API-890  feGetElementAdjacentFaces
3.15.4.9  feGetElementAdjacentFaces
feGetElementAdjacentFaces
( nElemID, nFaceID, nFromElemSetID, dTolerance, bMatchNormals, nNumFaces, 
nElems, nFaces)
Description:This function will get all adjacent  faces within a specified tolerance from a given element and face ID.
Input:INT4 nElemID The ID of the element. INT4 nFaceID The ID of the face from the element. INT4 nFromElemSetID Select ion from specific elements. 
REAL8 dTolerance The angle tolerance of which to select adjacent faces.BOOL bMatchNormals If True, only faces with matching normals will be selected.
Output:INT4 nNumFaces The number of faces selected. INT4 nElems[0..nNumFaces-1] An array of the IDs of the elements selected. INT4 nFaces[0..nNumFaces-1] An array of the ID s of the faces from the elements selected. 
Return Code:FE_FAILRemarks/Usage:This mimics the Adjacent option in the Face Selection dialog.Example:None
feGetReal   API-891
3.15.5  Other Methods
3.15.5.1  feGetReal
feGetReal
( dlgTITLE, lowerlimit, upperlimit, value )
Description:This function displays a dialog box to  allow a user to enter a real number.
Input:STRING dlgTITLE A string that specifies a title to be used as the dialog box title.
REAL8 lowerlimit The minimum acce ptable value for the number
REAL8 upperlimit The maximum ac ceptable value for the number
Output:
REAL8 valueThe number entered by the user. On input, value is displayed as the 
default.
Return Code:FE_CANCEL The user cancelled the dialog box. Value is not valid.Remarks/Usage:NoneExample:None
 API-892  feGetRealLength
3.15.5.2  feGetRealLength
feGetRealLength
( title, value )
Description:This function displays a dialog box to allow a user to enter a real number or use an icon button to mea-
sure a distance using the Tools,  Measure Distance functionality.
Input:STRING title A string that specifies a titl e to be used as the dialog box title.
Output:
REAL8 valueThe value entered by the user or distance returned when using the 
icon button. On inpu t, value is displayed as the default.
Return Code:
FE_CANCEL The user cancelled the dialog box. Value is not valid.
Remarks/Usage:NoneExample:None
feGetInt   API-893
3.15.5.3  feGetInt
feGetInt
( dlgTITLE, lowerlimit, upperlimit, value )
Description:This function displays a dialog box to allow a user to ente r an integer number.
Input:STRING dlgTITLE A string that specifies a title to be used as the dialog box title.
INT4 lowerlimit The minimum acce ptable value for the number
INT4 upperlimit The maximum ac ceptable value for the number
Output:
INT4 valueThe number entered by the user. On input, value is displayed as the 
default.
Return Code:FE_CANCEL The user cancelled the dialog box. Value is not valid.Remarks/Usage:NoneExample:None
 API-894  feAppMessageBox
3.15.5.4  feAppMessageBox
feAppMessageBox
( msgmode, message )
Description:Displays a message box, asking the u ser to press a button to continue.
Input:
INT4 msgmodeDetermines the buttons that will be  available in the box. 0=OK, 
1=OK and Cancel, 2 = Yes and No, 3 = Yes, No and Cancel
STRING message The text of the message to wr ite. Must be less than 160 characters.
Output:NoneReturn Code:FE_OK User pressed either the OK or Yes buttonFE_FAIL User pressed No buttonFE_CANCEL User pressed Cancel buttonRemarks/Usage:This method is useful if your ap plication is windowless since it insures the Message Box will be dis-
played on top of all FEMAP windows.
Example:None
feAppColorPalette   API-895
3.15.5.5  feAppColorPalette
feAppColorPalette
( nDefault, nColor )
Description:Displays the color palette dialog bo x allowing a user to pick a color.
Input:
INT4 nDefaultThe default color, used to initialize the dialog box. This is a combina-
tion of the desired color,  pattern and linestyle.
Output:
INT4 nColorThe color/pattern/lin estyle that the user sel ected. If the user presses 
Cancel, this will be the same as nDefault
Return Code:
FE_OK Dialog box was displayed, then OK is pressed
FE_CANCEL Dialog box was displayed, then Cancel is pressedRemarks/Usage:NoneExample:None
 API-896  feCreateFunction
3.15.5.6  feCreateFunction
feCreateFunction
( nNumberAvailableTypes, AvailableTypes, nID )
Description:Displays the standard Create Function dialog box and has an option to restrict which function typesInput:
INT4 nNumberAvailableTypesThe number of different function ty pes that will be shown in the 
“Type” drop-down list. Use a value of 0
INT4 AvailableTypes
[0..nNumberAvaliableTypes-1]Array of IDs representing different function types
Output:
INT4 nID ID of newly created function.
Return Code:
FE_OK Dialog box was displayed, then OK is pressedFE_CANCEL Dialog box was displayed, then Cancel is pressedRemarks/Usage:NoneExample:None
feAppColorCreate   API-897
3.15.5.7  feAppColorCreate
feAppColorCreate
( enColor, enPattern, enLinestyle )
Description:Returns a FEMAP color containing a ba se color, pattern and linestyle mask
Input:enum zColor enColor Base color - use enum zColor.FCL_*enum zColor enPattern Pattern mask - use enum zColor.FPF_*. FPF_ SOLID or 0 for none..
enum zColor enLinestyleLinestyle mask - use enum zColor.FPL_*. FPL_SOLID or 0 for 
none.
Output:NoneReturn Code:
INT4 colorFEMAP color ID containing specified base color and pattern / line-
style masks
Remarks/Usage:Use the enumerations provided in zColor. Numbers outside of this range may have unintended results
Example:None
 API-898  feAppColorGetBaseColor
3.15.5.8  feAppColorGetBaseColor
feAppColorGetBaseColor
( nColor, penColor )
Description:Extracts the base color from a FEMAP color ID.Input:INT4 nColor FEMAP color IDOutput:enum zColor penColor Base color. Will be a value zColor.FCL_*Return Code:NoneRemarks/Usage:Color IDs are a combination of colors and pattern / linestyle masks from the zC olor enum. They can be 
created manually or obtained from feAppColorPalette / feAppColorCreate.
Example:None
feAppColorGetPattern   API-899
3.15.5.9  feAppColorGetPattern
feAppColorGetPattern
( nColor, penPattern )
Description:Extracts the pattern mask from a FEMAP color ID.Input:INT4 nColor FEMAP color IDOutput:enum zColor penPattern Pattern Ma sk. Will be a value zColor.FPF_*
Return Code:NoneRemarks/Usage:Color IDs are a combination of colors and pattern / linestyle masks from the zC olor enum. They can be 
created manually or obtained from feAppColorPalette / feAppColorCreate.
Example:None
 API-900  feAppColorGetLinestyle
3.15.5.10  feAppColorGetLinestyle
feAppColorGetLinestyle
( nColor, penLinestyle )
Description:Extracts the pattern mask from a FEMAP color ID.Input:INT4 nColor FEMAP color IDOutput:enum zColor penLinestyle Linestyle mask. Will be a value zColor.FPL_*
Return Code:NoneRemarks/Usage:Color IDs are a combination of colors and pattern / linestyle masks from the zC olor enum. They can be 
created manually or obtained from feAppColorPalette / feAppColorCreate.
Example:None
feAppColorGetRGB   API-901
3.15.5.11  feAppColorGetRGB
feAppColorGetRGB
( nColor, pnRed, pnGreen, pnBlue )
Description:Returns the red, green and blue components from a FEMAP color ID
Input:INT4 nColor FEMAP color IDOutput:INT4 pnRed Red componen t. Integer value 0-255
INT4 pnGreen Green componen t. Integer value 0-255
INT4 pnBlue Blue component. Integer value 0-255Return Code:NoneRemarks/Usage:Color IDs are a combination of colors and pattern / linestyle masks from the zC olor enum. They can be 
created manually or obtained from feAppColorPalette / feAppColorCreate.
Pattern and linestyle masks have no effect on the returned RGB values. 
Example:None
 API-902  feAppLoadColorPalette
3.15.5.12  feAppLoadColorPalette
feAppLoadColorPalette
( sPaletteFileName )
Description:Loads a color palette.Input:STRING sPaletteFileName Full path to a FEMAP color palette file.
Output:NoneReturn Code:FE_NOT_EXIST Can not find or open the Palette FileFE_BAD_TYPE File is not a valid Palette FileFE_FAIL No color definitions found in the Palette File
Remarks/Usage:
Example:
None
feAppLoadContourPalette   API-903
3.15.5.13  feAppLoadContourPalette
feAppLoadContourPalette
( bUpdateViewPalette, sPaletteFileName )
Description:Loads a contour color palette.Input:BOOL bUpdateViewPalette If True, then the Cont our Palette will be loaded for any new View.
STRING sPaletteFileName Full path to  a FEMAP Contour Palette file.
Output:NoneReturn Code:FE_NOT_EXIST Can not find or open the Contour Palette FileFE_BAD_TYPE File is not a valid Contour Palette FileFE_FAIL No color definitions foun d in the Contour Palette File
Remarks/Usage:The selected palette will be loaded and will be used for any new View that is created. It will not how-
ever update any existing Views. If bUpdateViewPalette  is True, the User Contour Palette in the Active 
View will also be updated and if "All Views" is enabled, all active views will be updated.
Example:None
 API-904  feScreenPctPick
3.15.5.14  feScreenPctPick
feScreenPctPick
( x, y )
Description:Displays a dialog box that allo ws picking a location in a view
Input:NoneOutput:REAL8 x The x (horizontal) and y (vertical ) locations in the view. These values 
are returned as a percentage of the overall view size - i.e. 0.8 means 
80% of the way from the top/left to the bottom/right of the view. REAL8 y
Return Code:
FE_CANCEL Dialog box was cancelled.
Remarks/Usage:NoneExample:None
feOutputColorGetRGB   API-905
3.15.5.15  feOutputValueGetRGB
feOutputColorGetRGB
( nViewID, dValue, pdRed, pdGreen, pdBlue )
Description:Returns the red, green and blue co mponents from a FEMAP color ID of  specific output value on a con-
tour legend. 
Input:INT4 nViewID The ID of view. If set to 0 the active view will be used.
REAL8 dValue The value of the output desired to get color level.Output:INT4 pdRed Red componen t. Integer value 0-255
INT4 pdGreen Green componen t. Integer value 0-255
INT4 pdBlue Blue component. Integer value 0-255Return Code:NoneRemarks/Usage:NoneExample:None
 API-906  
3.16  User Interface Methods
User Interface Methods in clude the following topics:
•Section 3.16.1, "Model Ac tivation and Management"
•Section 3.16.2, "Window Management"
•Section 3.16.3, "View Management"
•Section 3.16.4, "Toolbar and Menu Customization"
•Section 3.16.5, "Embed ding Applications"
•Section 3.16.6, "Locking FEMAP"
•Section 3.16.7, "Status Bar"
•Section 3.16.8, "Message Window"
•Section 3.16.9, "Model Info Tree"
•Section 3.16.10, "Real Number Text Formatting"
•Section 3.16.12, "Other Utilities"
feAppGetModel   API-907
3.16.1  Model Activa tion and Management
When working with multiple models in FEMAP, it is important to carefu lly manage which model 
is active. All other API and prog ram functionality works on the conc ept of a single active model. 
By switching the active model, you can work with  multiple models simultaneously, however each 
time you call an API function that deals with mo del data, it will apply to the active model only. 
Using the methods in this section, y ou can find and choose this model.
3.16.1.1  feAppGetModel
feAppGetModel
( model )
Description:Retrieves the internal ID of the active model
Input:NoneOutput:INT8 model The ID of the active modelReturn Code:FE_FAIL There is no active modelRemarks/Usage:You can call this function after creating a New model, or Opening a model to retrieve its internal ID, so 
if you activate other models, you can reac tivate the original by calling feAppSetModel
Example:None
 API-908  feAppGetModel32
3.16.1.2  feAppGetModel32
feAppGetModel32
( nHiModelID, nLoModelID )
Description:Retrieves the internal ID of the active model, which is a 64-bit inte ger, as a pair of 32-bit integers
Input:NoneOutput:INT4 nHiModelID The first 4-bytes of the 64-b it integer which is the ID of the active 
model
INT4 nLoModelID The second 4-bytes of the 64 -bit integer which is the ID of the active 
model
Return Code:
FE_FAIL There is no active modelRemarks/Usage:You can call this function after creating a New model, or  Opening a model to retrie ve its internal ID as a 
pair of 32-bit integers, so if you activate other models, you can reactivate the original by calling 
feAppSetModel32 and using th at pair of 32-bit integers
Example:None
feAppGetModelName   API-909
3.16.1.3  feAppGetModelName
feAppGetModelName
( model, ModelName )
Description:Retrieves the name of the selected modelInput:INT8 model The ID of the mo del to retrieve the name.
Output:STRING ModelName The name of the specified modelReturn Code:FE_FAIL The specified mode l is not currently open.
Remarks/Usage:If the model has not yet been saved, it will not ha ve a name, and the ModelName will be returned as 
“Untitled”. You can use this method  in conjunction with feAppGetAllMod els( ) to retrieve the names of 
all open models.
Example:None
 API-910  feAppGetModelByName
3.16.1.4  feAppGetModelByName
feAppGetModelByName
( fName, nModelID )
Description:Retrieves the ID of an open model using the model name or a portion of the model name with enough 
characters to identify only a single open model.
Input:STRING fName The name of th e model to retrieve the ID
Output:INT8 model The ID of the open model retrieved by the model name.Return Code:FE_FAIL A single model ID to retrie ve cannot be identified by the given 
model name or portion of model name
Remarks/Usage:While it is possible to us e only a portion of the model name to retrieve the model ID , enough of the title 
must be used to identify one and only mo del, otherwise the call will return FE_FAIL.
Example:None
feAppSetModel   API-911
3.16.1.5  feAppSetModel
feAppSetModel
( model )
Description:Activates a model chosen by its internal IDInput:INT8 model The ID of the model that you want to activateOutput:NoneReturn Code:FE_FAIL The model ID that you specified is not a valid, open modelRemarks/Usage:You can find the ID of the active mo del using feAppGetModel, and that ID can then be passed to this 
method at a later time to reactivate the model.
Example:None
 API-912  feAppSetModel32
3.16.1.6  feAppSetModel32
feAppSetModel32
( nHiModelID, nLoModelID )
Description:Activates a model chosen by a pair of 32-bit integers  representing its internal ID, which is a 64-bit inte-
ger
Input:INT4 nHiModelID The first 4-bytes of the 64-b it integer which is the ID of the model 
that you want to activate
INT4 nLoModelID The second 4-bytes of the 64-b it integer which is the ID of the model 
that you want to activate
Output:NoneReturn Code:FE_FAIL The model ID pair that you sp ecified does not represent a valid, open 
model
Remarks/Usage:You will need to find the nHiModelID and nLoMod elID of the active model using feAppGetModel32, 
and those IDs can then be pass ed to this method at a late r time to reactivate the model.
Example:None
feAppSetModelByName   API-913
3.16.1.7  feAppSetModelByName
feAppSetModelByName
( fName )
Description:Activates a model chosen by specifying its filenameInput:STRING fName The complete filename of the model that you want to activate
Output:NoneReturn Code:FE_FAIL The model name that you sp ecified is not a valid, open model
Remarks/Usage:To use this method successfully, you must specify a complete filename, including the directory/path, 
and the “.MOD” extension. You can retrieve the fu ll name of the active model from the “ModelName” 
parameter. 
This method can normally only be used for models that have been saved or opened from a saved model. 
When a new, unsaved model is created, the model name is not defined. You can activate an unsaved 
model by setting fName to an empty/blank (““) stri ng, however if you have multiple unsaved models, 
you will always activate the first one opened, and the others can no t be accessed with this method.
Example:To activate a saved model
rc = femap.feFileSetActiv eName("c:\models\xyz.mod")
To activate a new, unsaved model
rc = femap.feFileSetActiveName( ““ )
 API-914  feAppCountModels
3.16.1.8  feAppCountModels
feAppCountModels
( numModels )
Description:Finds the number of models that are currently openedInput:NoneOutput:INT4 numModels The number of currently ope ned models. Could be 0 if no models are 
open.
Return Code:FE_FAIL Unable to retrieve the number of active modelsRemarks/Usage:NoneExample:None
feAppGetAllModels   API-915
3.16.1.9  feAppGetAllModels
feAppGetAllModels
( numModels, model )
Description:Finds the number of models that are currently openedInput:NoneOutput:INT4 numModels The number of currently opened models.INT8 model[0..numModels-1] The IDs of  all of the currently opened models.
Return Code:FE_FAIL There are either no models opened, or unable to retrieve the model 
IDs
Remarks/Usage:This function will return the IDs of all currently opened mo dels, which can then be used with feAppSet-
Model to activate any of those desired models.
Example:None
 API-916  feAppModelContents
3.16.1.10  feAppModelContents
feAppModelContents
( bList, nEmptyBlocks, nEntityBlocks )
Description:Finds, and alternatively lists, the nu mber of blocks of each entity type  that are currently in the model
Input:BOOL bList If True, a report of the cont ents is written to the Message Window
Output:INT4 nEmptyBlocks The number of blocks whic h are allocated but unused because data 
has been deleted. These blocks will be  reused as new data is added to 
the database.
INT4 nEntityBlocks[0..max] An arra y of the number of blocks be ing used for each entity type. 
The index in this array is the En tity Type being re ported. Common 
Entity types are define in S ection 3.3.6, "Entity Types".
Return Code:FE_FAIL There are either no models opened, or unable to retrieve the model 
information
Remarks/Usage:The number of bytes in a Database block can change from version to version, however currently one 
block is 4096 bytes.
Example:None
feAppModelDefragment   API-917
3.16.1.11  feAppModelDefragment
feAppModelDefragment
( void )
Description:Rearranges data in the model so that it is or ganized with similar data grouped together. 
Input:NoneOutput:NoneReturn Code:FE_FAIL Unable to defragmentRemarks/Usage:This method will rearrange data in your model. Defragmenting shou ld improve performance. Another 
way to accomplish this is to write a Neutral File an d read it into a new model.
Example:None
 API-918  feAppManageToolbars
3.16.2  Window Management
When you are running FEMAP via the API, especially if you are embedding it in your own appli-
cations, you may want to control which portions of the user interface are available. The methods in 
this section allow you to  selectively turn various windows on and off.
3.16.2.1  feAppManageToolbars
feAppManageToolbars
( barName, visible )
Description:Makes one or more toolbars visible (or hidden)Input:STRING barName The name of the toolbar to manageBOOL visible If True, the toolbar is made visible, otherwise it is hiddenOutput:
None
Return Code:FE_FAIL Unable to find the selected toolbar.Remarks/Usage:The names of the toolbars can be found by running FEMAP manually and looking on the Tools->Tool-
bars menu. In addition to the toolba rs listed there, you can also cont rol the visibility of the Menu using 
this method - simply use the barName of “Menu Bar”. If you want to set all possible toolbars in a single 
call, set barName to an empty string (““).
This method is identical to the feSetToolbarVisible method.
Example:None
feAppManagePanes   API-919
3.16.2.2  feAppManagePanes
feAppManagePanes
( paneName, action )
Description:Changes the state of one or more of the docking panesInput:STRING paneName The name of the pane to manageINT4 action 0=Hide, 1=Sh ow/Visible, 2=Dock as a Tab, 3=Toggle Docking
Output:NoneReturn Code:FE_FAIL Unable to find the selected pane.FE_INV ALID Invalid action specified.Remarks/Usage:The names of the panes can be foun d in the title bars of the panes. Currently they are “Entity Editor”, 
“Messages”, “Data Table”, “Model Info”, “Entity In fo”, “Data Surface Editor”, “Meshing Toolbox”, 
“PostProcessing Toolbox”, “Charting”, “API Programming”, and “Program File”. 
If you have added your own application into FEMAP  using feAppRegisterAddIn Pane, the title of your 
window will also be available. If you want to set a ll possible panes in a single call, set paneName to an 
empty string (““).
If you dock a pane as a tab, you can undock/float it by calling this method w ith “Toggle Docking”. If 
you then call this method ag ain with “Toggle Docking”, the pane will  be docked in its open state (not as 
a tab).
Example:None
 API-920  feAppUpdatePanes
3.16.2.3  feAppUpdatePanes
feAppUpdatePanes
( fullRefresh )
Description:Updates the contents of the docking panesInput:
BOOL fullRefreshIf True, the “Model Info” pane is fully rebuilt, otherwise incremental 
changes are added to all panes.
Output:NoneReturn Code:NoneRemarks/Usage:If called with fullRefresh=False, then  it must be called after each command, before redraws occur, oth-
erwise some changes may be lost.
Example:None
feAppManageStatusBar   API-921
3.16.2.4  feAppManageStatusBar
feAppManageStatusBar
( visible )
Description:Sets the visibility of the status barInput:BOOL visible If True, show the status bar, otherwise hide itOutput:NoneReturn Code:FE_FAIL Unable to find the status barRemarks/Usage:NoneExample:None
 API-922  feAppManageGraphicsTabs
3.16.2.5  feAppManageGraphicsTabs
feAppManageGraphicsTabs
( visible )
Description:Sets the visibility of the tabs on  the top of the graphics windows
Input:BOOL visible If True, show the tabs, otherwise hide themOutput:NoneReturn Code:FE_FAIL Unable to find the tabsRemarks/Usage:The tabs controlled by this method are shown here:
Example:
None

feAppGetActiveView   API-923
3.16.3  View Management
Sometimes you will need to know and control whic h views are available on the screen. The meth-
ods in this section allow you to manage this information.
3.16.3.1  feAppGetActiveView
feAppGetActiveView
( viewID )
Description:Retrieves the ID of the activ e view in the active model.
Input:NoneOutput:INT4 viewID The ID of the active view.Return Code:FE_FAIL There is no active view.Remarks/Usage:This method allows you to retrieve the active view from the active model.
Example:None
 API-924  feAppSetActiveView
3.16.3.2  feAppSetActiveView
feAppSetActiveView
( viewID )
Description:Activates a view in the activ e model chosen by its ID.
Input:INT4 viewID The ID of the view  that you want to activate.
Output:NoneReturn Code:NoneRemarks/Usage:This method allows you to activate any existing vi ew in the active model.  Use feAppGetActiveView 
and feAppGetAllViews to retrieve the ID’s of views that can be activated. 
Example:None
feAppGetAllViews   API-925
3.16.3.3  feAppGetAllViews
feAppGetAllViews
( numViews, viewID )
Description:Retrieves the ID’s of all the visible views in the activ e model as well as the number of views that are vis-
ible.
Input:NoneOutput:INT4 numViews The number of views visible in the active model.INT4 viewID[0..numViews-1] The IDs of all of the views visible in the active model.
Return Code:FE_FAIL No views exist.Remarks/Usage:This method allows yo u to return the ID’s of all the views that  are currently visible, which can then be 
activated with feAppSetActiveView.
Example:None
 API-926  feGetUserCommands
3.16.4  Toolbar and Menu Customization
The methods in this section allo w you to update the FEMAP menu s and toolbars to include new 
commands that you define, to change  the visiblity of commands that are already there, or to change 
title and icons associated with commands.
3.16.4.1  feGetUserCommands
feGetUserCommands
( numCmd, sTitle, sCmd, sArg, sStartDir )
Description:Retrieves all user commands  that have been defined
Input:NoneOutput:
INT4 numCmdThe number of user commands that  are current defined, and the num-
ber of entries in the other arrays
STRING sTitle[0..numCmd-1] The title  assigned to  each command
STRING sCmd[0..numCmd-1] The command line used to execute the command
STRING sArg[0..numCmd-1] Any command lin e arguments assigned to the command
STRING sStart-
Dir[0..numCmd-1]The starting directory, if any, for the command.
Return Code:
FE_FAIL Unable to retrieve the user commandsFE_NOT_EXIST No user commands are defined.Remarks/Usage:NoneExample:None
feAddUserCommand   API-927
3.16.4.2  feAddUserCommand
feAddUserCommand
( sTitle, sCmd, sArg, sStartDir )
Description:Defines a user command that can then  be used in the menu or toolbar
Input:
STRING sTitleThe title assigned to th e command. This title is  used later to assign 
the command to the menu  or toolbar. It must be unique when com-
pared to all other user commands.
STRING sCmd The command line used to execute the commandSTRING sArg Any command line argum ents assigned to the command
STRING sStartDir The starting directory, if any, for the command.
Output:
NoneReturn Code:FE_FAIL Unable to add the user commands
FE_INV ALIDA user command with the same title  has already been defined. You 
must specify a unique title.
Remarks/Usage:User commands defined with this  method can be assigned to a toolbar using the feAddToolbarUser-
Command method.
Example:None
 API-928  feDeleteUserCommand
3.16.4.3  feDeleteUserCommand
feDeleteUserCommand
( sTitle )
Description:Deletes a user commandInput:STRING sTitle The title of the command to be deleted.Output:NoneReturn Code:FE_FAIL Unable to delete the user commandsRemarks/Usage:NoneExample:None
feGetToolbars   API-929
3.16.4.4  feGetToolbars
feGetToolbars
( numBars, barID, barVisible, barTitle )
Description:Retrieves all toolbars that have been definedInput:NoneOutput:
INT4 numBarsThe number of toolbars that are current defined, and the number of 
entries in the other arrays.
INT4 barID[0..numBars-1] The ID of each toolbar
BOOLEAN barVisible[0..num-
Bars-1]A flag indicating whether the toolba r is currently visible. True=Visi-
ble.
STRING barTitle[0..numBars-
1]The title of the toolbar.
Return Code:
FE_FAIL Unable to retrieve  the toolbar information
Remarks/Usage:Toolbars do not need to be visible on the screen to be accessed by this method.
Example:None
 API-930  feAddToolbar
3.16.4.5  feAddToolbar
feAddToolbar
( barName, barLocation )
Description:Creates a new toolbarInput:
STRING barNameThe title assigned to the toolbar. This title must be unique, and will 
be used in other methods to access the toolbar.
INT4 barLocationThe location where the bar will be docked. 0=Top, 1=Left, 2=Right, 
3=Top, 4=Bottom
Output:None
Return Code:
FE_FAIL Unable to add the toolbar
FE_INV ALIDA toolbar with the same title has already been defined. You must 
specify a unique title.
Remarks/Usage:After creating a toolbar with this method, you can add commands to it using either feAddToolbarCom-
mand or feAddToolbarUserCommand
Example:None
feAddToolbarSubmenu   API-931
3.16.4.6  feAddToolbarSubmenu
feAddToolbarSubmenu
( barName, cmdIndex, menuName, menuID )
Description:Creates a new submenu in a toolbarInput:
STRING barNameThe title assigned to the toolbar. This title must be unique, and will 
be used in other methods to access the toolbar.
INT4 cmdIndexLocation in “barName” to place the new menu. 0=Before first item,  
-1=After last item, N=After Nth item.
STRING menuName Title to be used for the menu drop-down.Output:
INT4 menuIDID of the menu that was inserte d - needed for feAddToolbarSub-
menuSubmenu, feAddToolbarSubmenuCommand or feAddToolbar-
SubmenuUserCommand to add comman ds or submenus to this menu
Return Code:FE_FAIL Unable to add the menuFE_NOT_EXIST The toolbar “barName” does not exist.
Remarks/Usage:After creating a toolbar with this method, you can add commands to it using either feAddToolbarSub-
menuCommand or feAddToolbarSubmenuUserCommand , or submenus using feAddToolbarSubmenu-
Submenu
Example:None
 API-932  feAddToolbarSubmenuSubmenu
3.16.4.7  feAddToolbarSubmenuSubmenu
feAddToolbarSubmenuSubmenu
( menuID, cmdIndex, menuName, submenuID )
Description:Adds a new submenu to a submenu on a toolbar.Input:
INT4 menuIDThe ID of the menu where you want  to place the command. This is 
returned by feAddToolbarSubmenu
INT4 cmdIndexThe location in the menu for the submenu. 0=At the front of the 
menu before any other buttons. -1=A t the end of the menu, after all 
other buttons. Any other positive value means after that button.
STRING menuName Title to be used for the menu drop-down.Output:
INT4 submenuIDID of the menu that was inserte d - needed for feAddToolbarSub-
menuCommand or feAddToolbarSubmenuUserCommand to add commands to this menu
Return Code:FE_FAIL Unable to add the submenu.FE_NOT_EXIST The menu does not exist.Remarks/Usage:NoneExample:None
feDeleteToolbar   API-933
3.16.4.8  feDeleteToolbar
feDeleteToolbar
( barName )
Description:Deletes a toolbarInput:STRING barName The title of th e toolbar to be deleted.
Output:NoneReturn Code:FE_FAIL Unable to delete the toolbarRemarks/Usage:NoneExample:None
 API-934  feResetToolbar
3.16.4.9  feResetToolbar
feResetToolbar
( barName )
Description:Resets a toolbar back to its original stateInput:
STRING barNameThe title of the toolbar to be reset. If this is an empty string (““) then 
all toolbars will be reset.
Output:NoneReturn Code:FE_FAIL Unable to reset the toolbarRemarks/Usage:You can call this method to reset any changes you have made in the predefined FEMAP toolbars and 
menu back to their default configuration. 
This method will always display a dialog box as king the user to confirm resetting the toolbar.
Example:None
feSetToolbarVisible   API-935
3.16.4.10  feSetToolbarVisible
feSetToolbarVisible
( barName, bVisible )
Description:Makes one or more toolbars visible (or hidden)Input:
STRING barNameThe title of the toolbar to be updated. If this is an empty string (““) 
then all toolbars will be reset.
BOOLEAN bVisible If True, the toolbar will be made visible. If False, it will be hidden.
Output:NoneReturn Code:FE_FAIL Unable to reset the toolbarRemarks/Usage:The names of the toolbars can be found by running FEMAP manually and looking on the Tools->Tool-
bars menu. In addition to the toolba rs listed there, you can also cont rol the visibility of the Menu using 
this method - simply use the barName of “Menu Bar”. 
This method is identical to the feAppManageToolbars method.
Example:None
 API-936  feGetMenuCommands
3.16.4.11  feGetMenuCommands
feGetMenuCommands
( menuName1, menuName2, numCmds, cmdID, cmdTitle )
Description:Retrieves information about all commands on a selected menuInput:
STRING menuName1The menu name you see at the top level (for example, “File”). Spec-
ify an empty string (““) here to retrieve informa tion about the com-
mands at the top level (File, Tools, ...)
STRING menuName2The menu name you see inside the top level menu (for example, 
“Import” if menuName1=”File”). Sp ecify an empty string here to 
retrieve the commands on the drop down from the top level.
Output:
INT4 numCmdsThe number of commands on this me nu, and the number of entries in 
the other arrays.
INT4 cmdID[0..numCmds-1]The IDs of the commands associated with each menu item. The 
cmdID of any item on the menu that is a drop-down (rather than a 
command) will be -1.
STRING cmdTitle[0..numC-
mds-1]The titles of the commands asso ciated with each menu item.
Return Code:
FE_FAILUnable to retrieve information abou t the specified menu - make sure 
you are specifying the name of a drop-down menu, and not an indi-
vidual command
Remarks/Usage:When specifying the menu names, you should always  leave off the “...” characters and shortcut key 
specifications. Also do not include any special characte rs to represent the underlined letters - just spec-
ify the title as if no thing was underlined.
Example:Retrieve the commands on th e View->Advanced Post menu
rc = femap.feGetMenuCommands("Vie w", "Advanced Post", n, i, t)
Retrieve the commands  on the Tools menu
rc = femap.feGetMenuCommands("Tools", "", n, i, t)
feGetMenuCommand   API-937
3.16.4.12  feGetMenuCommand
feGetMenuCommand
( menuName1, menuName2, menuName3, cmdID )
Description:Retrieves the ID of a specified commandInput:STRING menuName1 The menu name you see at the top level (for example, “File”). 
STRING menuName2The menu name you see inside the top level menu (for example, 
“Save As” if menuName1=”File”). Sp ecify an empty string here to 
retrieve a command on the top level of the menu.
STRING menuName3The menu name you see inside th e first level drop-down menu (for 
example, “Analysis Results” if  menuName1=”File”, and menuN-
ame2=”Import”). Specify an empty string here to retrieve a com-
mand on the first level drop-down menu.
Output:
INT4 cmdIDThe ID of the command associated  with the menu item. The cmdID 
of any item on the menu that is a drop-down (rather than a command) 
will be -1.
Return Code:FE_FAIL Unable to retrieve inform ation about the specified menu.
Remarks/Usage:When specifying the menu names, you should always  leave off the “...” characters and shortcut key 
specifications. Also do not include any special characte rs to represent the underlined letters - just spec-
ify the title as if no thing was underlined.
Example:None
 API-938  feGetToolbarCommands
3.16.4.13  feGetToolbarCommands
feGetToolbarCommands
( barName, numCmds, cmdID, cmdVisible, cmdSubmenu, cmdTitle )
Description:Retrieves information about all commands on a selected toolbar
Input:STRING barName The title of the toolbar cont aining the commands to be retrieved.
Output:
INT4 numCmdsThe number of commands on this toolbar, and the number of entries 
in the other arrays.
INT4 cmdID[0..numCmds-1] The IDs of the co mmands associated with each toolbar item. 
BOOLEAN cmdVisi-
ble[0..numCmds-1]A flag indicating whether or not th e item is currently visible on the 
toolbar. True=Visible.
BOOLEAN cmdSub-
menu[0..numCmds-1]A flag indicating whether the item is a command button, or a button 
that drops down another menu. True=Drop-Down a Submenu
STRING cmdTitle[0..numC-
mds-1]The titles of the commands associ ated with each toolbar item.
Return Code:
FE_FAIL Unable to retrieve  information about the sp ecified toolbar commands
FE_NOT_A V AILABLE No commands are available on the selected toolbarFE_INV ALID Unable to find  the specified toolbar
Remarks/Usage:The value of numCmds will always be the number of all commands added to a toolbar, visible or hid-
den, + 1. The “extra” command is the “Toolbar Options” command which is available on every toolbar 
and will always be the final command in the returned arrays or variants . It always has a cmdID value of 
9148 and a cmdTitle valu e of “Toolbar Options”.
Example:None
feGetToolbarSubCommands   API-939
3.16.4.14  feGetToolbarSubCommands
feGetToolbarSubCommands
( cmdID, numCmds, cmdID, cmdVisible, cmdTitle )
Description:Retrieves information about all commands on a menu that drops-down from a toolbar button.Input:INT4 cmdID The ID of the toolbar button that drops down the menuOutput:
INT4 numCmdsThe number of commands on this me nu, and the number of entries in 
the other arrays.
INT4 cmdID[0..numCmds-1] The IDs of the commands associated with each menu item. 
BOOLEAN cmdVisi-
ble[0..numCmds-1]A flag indicating whether or not th e item is currently visible on the 
menu. True=Visible.
STRING cmdTitle[0..numC-
mds-1]The titles of the commands asso ciated with each menu item.
Return Code:
FE_FAIL Unable to retrieve informatio n about the specified menu commands
FE_NOT_A V AILABLE No commands are available on the selected menuFE_INV ALID Unable to find  the specified toolbar
Remarks/Usage:NoneExample:None
 API-940  feGetToolbarCommand
3.16.4.15  feGetToolbarCommand
feGetToolbarCommand
( barName, cmdIndex, cmdID )
Description:Finds the ID of the command as sociated with a toolbar button
Input:STRING barName The title of th e toolbar to be searched.
INT4 cmdIndexThe index of the button to retrieve. The first button on the toolbar is 
button 0, the second is 1, and so on.
Output:INT4 cmdID The command ID associated with the buttonReturn Code:FE_FAIL Unable to find the toolbarFE_NOT_EXIST The specified button does not exist on the toolbar
Remarks/Usage:Setting the value of cmdIndex to th e number of commands on the toolba r, visible or hidden, will always 
return “Toolbar Options” command which is availabl e on every toolbar. It will always have a cmdID 
value of 9148. Therefore, if there are a total of 3 commands on the toolbar, setting cmdIndex to 3 will 
return the command ID of  9148 (“Toolbar Options).
Example:None
feAddToolbarCommand   API-941
3.16.4.16  feAddToolbarCommand
feAddToolbarCommand
( barName, cmdIndex, cmdID )
Description:Adds a new button to a toolbar and ass ociates it with a standard command.
Input:STRING barName The title of the toolbar where the command button will be placed.
INT4 cmdIndexThe location on the toolbar for the bu tton. 0=At the front of the tool-
bar before any other buttons. -1=At the end of the toolbar, after all 
other buttons. Any other positive value means after that button.
INT4 cmdID The command ID associated with the buttonOutput:
None
Return Code:FE_FAIL Unable to add the command.FE_NOT_EXIST The toolbar does not exist.Remarks/Usage:NoneExample:None
 API-942  feAddToolbarSubmenuCommand
3.16.4.17  feAddToolbarSubmenuCommand
feAddToolbarSubmenuCommand
( menuID, cmdIndex, cmdID )
Description:Adds a new button to a submenu on a toolba r and associates it with a standard command.
Input:
INT4 menuIDThe ID of the menu where you want  to place the command. This is 
returned by feAddToolbarSubmenu
INT4 cmdIndexThe location in the menu for the but ton. 0=At the front of the menu 
before any other buttons. -1=At the end of the menu, after all other 
buttons. Any other positive va lue means after that button.
INT4 cmdID The command ID associated with the buttonOutput:NoneReturn Code:FE_FAIL Unable to add the command.FE_NOT_EXIST The menu does not exist.Remarks/Usage:NoneExample:None
feAddToolbarUserCommand   API-943
3.16.4.18  feAddToolbarUserCommand
feAddToolbarUserCommand
( barName, cmdIndex, cmdTitle, cmdBitmap, cmdID )
Description:Adds a new button to a toolbar and associates it with a user command.
Input:STRING barName The title of the toolbar where the command button will be placed.
INT4 cmdIndexThe location on the toolbar for the bu tton. 0=At the front of the tool-
bar before any other buttons. -1=At the end of the toolbar, after all 
other buttons. Any other positive value means after that button.
STRING cmdTitleThe title of the user comm and to associate with the button. This is the  
title given to the comman d in feAddUserCommand.
STRING cmdBitmapThe full pathname of a Windows B itmap file that will be the icon 
associated with the button. Specify an  empty string (““) if you do not 
want the button to display as an ic on - it will then display as text. 
Refer to feSetToolbarCommandBitm ap for more information about 
defining the bitmap to be used for the icon.
Output:INT4 cmdID The command ID assigned to the buttonReturn Code:FE_FAIL Unable to add the command.FE_NOT_EXIST The toolbar does not exist.FE_NOT_A V AILABLE The specified user  command has not been defined.
Remarks/Usage:NoneExample:None
 API-944  feAddToolbarSubmenuUserCommand
3.16.4.19  feAddToolba rSubmenuUserCommand
feAddToolbarSubmenuUserCommand
( menuID, cmdIndex, cmdTitle, cmdBitmap, cmdID )
Description:Adds a new button to a submenu and associates it with a user command.Input:INT4 menuID The ID of the menu where the command button will be placed.
INT4 cmdIndexThe location on the menu for the butto n. 0=At the front of the menu 
before any other buttons. -1=At the end of the menu, after all other 
buttons. Any other positive va lue means after that button.
STRING cmdTitleThe title of the user comm and to associate with the button. This is the  
title given to the comman d in feAddUserCommand.
STRING cmdBitmapThe full pathname of a Windows B itmap file that will be the icon 
associated with the button. Specify an  empty string (““) if you do not 
want the button to display as an ic on - it will then display as text. 
Refer to feSetToolbarCommandBitm ap for more information about 
defining the bitmap to be used for the icon.
Output:INT4 cmdID The command ID assigned to the buttonReturn Code:FE_FAIL Unable to add the command.FE_NOT_EXIST The menu does not exist.FE_NOT_A V AILABLE The specified user  command has not been defined.
Remarks/Usage:NoneExample:None
feSetToolbarCommandVisible   API-945
3.16.4.20  feSetToolbarCommandVisible
feSetToolbarCommandVisible
( barName, cmdID, bVisible )
Description:Shows (or hides) a specified command on a toolbar or menuInput:
STRING barNameThe title of the toolbar where the command button is found. Specify 
an empty string (““) to show or hi de the command on all toolbars and 
the menu.
INT4 cmdID The ID of the command to show or hide.BOOLEAN bVisible True=Show the command, False=HideOutput:
None
Return Code:FE_FAIL Unable to find the specified command.
Remarks/Usage:NoneExample:None
 API-946  feSetToolbarSeparator
3.16.4.21  feSetToolbarSeparator
feSetToolbarSeparator
( barName, cmdID, bAddSep )
Description:Adds or removes a separator from befo re a command or menu on a toolbar.
Input:
STRING barNameThe title of the toolbar where the command button is found. Specify 
an empty string (““) to show or hi de the command on all toolbars and 
the menu.
INT4 cmdID The ID of the command or menu to modify the separator
BOOLEAN bAddSepTrue=Add a separator before th e command/menu, False=Remove 
separator
Output:NoneReturn Code:FE_FAIL Unable to find the specified command.
Remarks/Usage:NoneExample:None
feSetToolbarCommandTitle   API-947
3.16.4.22  feSetToolbarCommandTitle
feSetToolbarCommandTitle
( barName, cmdID, cmdTitle, cmdToolTip, cmdDescription )
Description:Sets the title, tooltip and description of  a command on the menu or toolbars
Input:
STRING barNameThe title of the toolbar where the command button is found. Specify 
an empty string (““) to set the title s for the command on all toolbars 
and the menu.
INT4 cmdID The ID of the command to update
STRING cmdTitleSets the title of the command. The title  is the text shown on the tool-
bar or menu. Specify an empty string (““) if you do not want to update the command title. 
STRING cmdToolTipSets the tooltip for the command. The tooltip is the text shown in the 
popup when you leave your mouse pointing at the command. Specify 
an empty string (““) if you do not want to update the command tool-
tip.
STRING cmdDescriptionSets the description for the comman d. The description is the one-line 
help text shown in the status bar when you point your mouse at the 
command. Specify an empty string (““) if you do not want to update 
the command description.
Output:NoneReturn Code:FE_FAIL Unable to find the specified command.
Remarks/Usage:NoneExample:None
 API-948  feSetToolbarCommandBitmap
3.16.4.23  feSetToolbarCommandBitmap
feSetToolbarCommandBitmap
( cmdID, cmdBitmap )
Description:Sets the icon for a command on the menu or toolbarInput:INT4 cmdID The ID of the command to update
STRING cmdBitmapThe full pathname to a Windows Bitm ap file that is used for the com-
mand icon.
Output:NoneReturn Code:FE_FAIL Unable to find the specified command.
FE_NOT_A V AILABLE Unable to acc ess the bitmap file specified.
Remarks/Usage:The Bitmap file that you specify must be created follo wing very specific guidel ines, or this method will 
not work properly - possibly resultin g in FEMAP crashing. The bitmap f ile must contain a single 16x16 
pixel image. Other sizes are not supported. If you want  part of the bitmap to be transparent, set those 
pixels to RGB=(192,192,192) - light gray. This means that you can not use this color in your image - it 
will be replaced by the ap propriate background color.
Example:None
feSaveToolbarLayout   API-949
3.16.4.24  feSaveToolbarLayout
feSaveToolbarLayout
( fName )
Description:Saves the current toolbar an d menu definition and layout  to a file for later use.
Input:
STRING fNameThe full pathname of the file to cr eate (normally with a “.tbr” exten-
sion)
Output:NoneReturn Code:FE_FAIL Unable to save the layoutRemarks/Usage:NoneExample:None
 API-950  feLoadToolbarLayout
3.16.4.25  feLoadToolbarLayout
feLoadToolbarLayout
( fName )
Description:Loads a toolbar and menu definition and layout from a fileInput:
STRING fNameThe full pathname of the file to lo ad, that was either created with 
feSaveToolbarLayout or through File->Preferences
Output:NoneReturn Code:FE_FAIL Unable to load the layoutRemarks/Usage:NoneExample:None
feAppRegisterAddIn   API-951
3.16.5  Embedding Applications
The methods in this section allo w you to embed your application in the FEMAP user interface as 
an Add-In, or to embed FEMAP into th e user interface of your application.
3.16.5.1  feAppRegisterAddIn
feAppRegisterAddIn
( register, windowID, messageID, tile, location )
Description:Registers an add-in application with FEMAP.Input:
BOOL registerSet to True to register a new applic ation, or False to unregister an 
add-in that is about to close.
INT4 windowID The handle to the a dd-in application main window/form.
INT4 messageIDThe handle to the add-in applicati on window that is to receive event 
messages. This must be a wind ow that has a message loop.
BOOL tile Not usedINT4 location Not used Output:NoneReturn Code:NoneRemarks/Usage:Usually you will want to specify the same handle for windowID and messageID - unless you want some 
other window than your main window  to receive FEMAP event messages.
This method is obsolete, and is included only fo r compatibility with existing applications. Any new 
applications should use feAppR egisterAddInPane, and ol d applications should be converted as 
soon as possible.
Example:
None
 API-952  feAppRegisterAddInPane
3.16.5.2  feAppRegisterAddInPane
feAppRegisterAddInPane
( register, windowID, messageID, bPreventClose, bPreventHide, location, neighborID )
Description:Registers an add-in application with FEMAP.Input:
BOOL registerSet to True to register a new applic ation, or False to unregister an 
add-in that is about to close.
INT4 windowID The handle to the a dd-in application main window/form.
INT4 messageIDThe handle to the add-in applicati on window that is to receive event 
messages. This must be a wind ow that has a message loop.
BOOL bPreventCloseIf True, the pane will not include the “X” in the title bar to allow 
users to close the addin. If you se t this option, you must provide 
some other method to allow u sers to close your application.
BOOL bPreventHideIf True, the pane will not include the “pin” in the title bar to allow the 
window to be collapsed to a tab.
INT4 location0 - floating window, 1 - dock left, 2 - dock right, 3 - dock top, 4 - 
dock bottom
INT4 neighborID0-femap main window, 1-Message Pane, 2-Model Info Tree Pane, 3-
Entity Editor Pane, 4-Data Table Pa ne, otherwise the handle to an 
existing add-in window. 
Output:NoneReturn Code:NoneRemarks/Usage:Usually you will want to specify the same handle for windowID and messageID - unless you want some 
other window than your main window  to receive FEMAP event messages.
The window identified by neighborID is used in co njunction with the location you specify to determine 
where the window is docked and how it is sized. For example if you speci fy location=3 and neigh-
borID=1, then your window will be pl aced at the top of the message pane.
If your add-in contains a menu, you may need to use feAppRegisterAddInPaneWithFrame to get the 
menu to appear.
Example:None
feAppRegisterAddInPaneWithFrame   API-953
3.16.5.3  feAppRegisterAddInPaneWithFrame
feAppRegisterAddInPaneWithFrame
( register, windowID, messageID, bPreventClose, bPreventHide, location, neighborID )
Description:Registers an add-in application with FEMAP. Input:
BOOL registerSet to True to register a new applic ation, or False to unregister an 
add-in that is about to close.
INT4 windowID The handle to the a dd-in application main window/form.
INT4 messageIDThe handle to the add-in applicati on window that is to receive event 
messages. This must be a wind ow that has a message loop.
BOOL bPreventCloseIf True, the pane will not include the “X” in the title bar to allow 
users to close the addin. If you se t this option, you must provide 
some other method to allow u sers to close your application.
BOOL bPreventHideIf True, the pane will not include the “pin” in the title bar to allow the 
window to be collapsed to a tab.
INT4 location0 - floating window, 1 - dock left, 2 - dock right, 3 - dock top, 4 - 
dock bottom
INT4 neighborID0-femap main window, 1-Message Pane, 2-Model Info Tree Pane, 3-
Entity Editor Pane, 4-Data Table Pa ne, otherwise the handle to an 
existing add-in window. 
Output:NoneReturn Code:NoneRemarks/Usage:This method is essentially the same as feAppRegiste rAddInPane, however it does not modify the win-
dow style of the window being added. This has both positive and negative effect s. On the positive side, 
it allows some programs to be added that contain menus that disappear if you used feAppRegisterAd-dInPane. However, it also leaves window borders and forces you to do more in  your add-in application 
to make sure sizes do not change and that your wi ndows do not accidentally move or close. If you allow 
this and do not fully manage it, you can  end up with a pane that contains only part of your application, or 
nothing. So, unless you absolutely need to keep menus or frames, use feAppRegisterAddInPane instead.
Example:None
 API-954  feAppEmbed
3.16.5.4  feAppEmbed
feAppEmbed
( windowID, x, y, cx, cy )
Description:Embeds the FEMAP window(s) into another application
Input:
INT4 windowIDThe handle to your application main window/form, or any other win-
dow where you want the FEMAP window displayed.
INT4 x The coordinates of the upper left corner of the embedded window(s). 
These are specified in the client coordinates of the parent window 
specified by windowID INT4 y
INT4 cx
The horizontal and vertical size  of the embedded window(s)
INT4 cy
Output:NoneReturn Code:NoneRemarks/Usage:This method is normally used with  FEMAP in a non-visible state. In that case, FEMAP becomes visible, 
and is embedded (parented)  into the window you specify - norma lly the main window of your applica-
tion. You may call this method multip le times to update the window where the windows are embedded, 
or to change the embedded region. Refer to “Embedding FEMAP in your application” on page 110 for 
more information.
Example:None
feAppBringToTop   API-955
3.16.5.5  feAppBringToTop
feAppBringToTop
( toTop, underWindow )
Description:Allows you to position the FEMAP window on top of, or under other windows.Input:
BOOL toTopIf True, the window is moved forwar d in the window list. If False, it 
is moved to the back of the wind ow list, under all other windows.
INT4 underWindowOnly used if “toTop=True”. If you want to move the window on top 
of all other windows, set this to 0. If you want to move it forward, but 
leave it behind another window, spec ify that window handle in this 
field.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-956  feAppPosition
3.16.5.6  feAppPosition
feAppPosition
( move, size, x, y, cx, cy )
Description:Allows you to move and size the FEMAP window.Input:
BOOL moveIf True, the upper left corner of the window is moved to the new 
location specified by x,y.
BOOL size If True, the window is resized to the size specified by cx,cy.
REAL8 xThe horizontal location of the upper left corner of the window. Spec-
ified as a percent of the total screen size.
REAL8 yThe vertical location of the upper left corner of the window. Speci-
fied as a percent of the total screen size.
REAL8 cxThe horizontal size of the window. Specified as a percent of the total 
screen size.
REAL8 cyThe vertical size of the window. Specified as a percent of the total 
screen size.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
feAppShowWindow   API-957
3.16.5.7  feAppShowWindow
feAppShowWindow
( maximize )
Description:Allows you to minimize and maximize the FEMAP window.Input:
BOOL maximizeIf True, the window will be maximi zed. If False, it will be minimized 
to an icon.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-958  feAppVisible
3.16.5.8  feAppVisible
feAppVisible
( visible )
Description:Makes a FEMAP session that was started with CreateObject visible (or invisible)Input:BOOL visible If True, the session becomes visible, if False, invisibleOutput:NoneReturn Code:NoneRemarks/Usage:This method is required to make FEMAP visible if you started a new session with CreateObject. You 
can also make an existing session invisible with th e appropriate call. You should not call this method 
with a session where you have embedded graphi cs or messages windows into your application.
Example:None
feAppRegisterMessageHandler   API-959
3.16.5.9  feAppRegisterMessageHandler
feAppRegisterMessageHandler
( register, windowID )
Description:Registers your application to receive all of the text that is sent to the FEMAP Messages window.
Input:
BOOL registerIf True, your application will star t receiving messages as they are 
written to the window. If False, messages will no longer be sent.
INT4 windowIDThe handle your application’s main window/form, or any other win-
dow that you want to receive the message text.
Output:None
Return Code:
NoneRemarks/Usage:This method allows you to capture the FEMAP me ssages and process them in any way you would like. 
You can display or modify them in any manner you would like. Re fer to “Capturing the FEMAP Mes-
sages” on page 112 for more information.
Example:None
 API-960  feAppEventCallback
3.16.5.10  feAppEventCallback
feAppEventCallback
( eventID, callback )
Description:Registers a program to be called when a particular event occursInput:
INT4 eventIDThe ID of the event to watch. Re fer to Section 6.4, "The FEMAP 
Events" for possible event values.
STRING callbackA full path to a FEMAP Program f ile, Basic program, or any execut-
able that can be run from the oper ating system command line. Spec-
ify callback as a blank (zero length ) string to “unregister” your 
callback.
Output:NoneReturn Code:
FE_NOT_EXISTYou tried to unregister the callbac k for an event which was not regis-
tered
FE_NO_MEMORY Unable to  register callback.
Remarks/Usage:This method allows you to execute a particular task  when an event occurs w ithout having to implement 
complicated event handling code. From  the time you register the callback, until you unregister it by call-
ing with a blank string, your code will be called ever y time the event occurs.  On ly one callback can be 
registered per event. You can simply call this method  with a different file fo r the same event to switch 
callbacks.
If the event that your callback processes uses the lParam value (like FEVENT_COMMAND), you can 
access it from your callback routine by using EventLPa ram described in Section 3.3.2, "Global Integer 
Properties"
Example:None
feAppRunningApplicationInfo   API-961
3.16.5.11  feAppRunningApplicationInfo
feAppRunningA pplicationInfo
( appName, processIDs, activeWindows, nint )
Description:Returns information about running app lications to use for API attachment.
Input:STRING appName Set this equal to “FEMAP”.Output:
INT4 processIDs[0..n-1]The Process IDs of each running application specified by appName. 
Where n is the total number of active windows. 
There may be duplicates in the array if an application has more than 
1 active window. See the description for activeWindows.
INT64 activeWindows[0..n-1]Returns an array of the open Model IDs. 
(i.e. 2077739520, 30213888, etc.). For example, If there are 2 runn ing FEMAPs, each with 3 open 
models, n will equal 6.
INT4 nInt[0..n-1] Returns an array of the version number of the running windows.Return Code:FE_FAIL No application found from the string in appName.Remarks/Usage:This method is intended retu rn information of the running application to be used by 
“feAppGetRunningApplication”. These methods ov ercome a pitfall of the Microsoft function 
“GetObject” that limits an external API program to only attach to the 1st running instance of an applica-
tion. Reference Microsoft documentation about th e Running Object Table for more information.
Example:
 API-962  feAppRunningApplicationInfo
Sub Main
    Dim App as femap.model    Set App = feFemap()
    App.feAppMessage(FCM_NORMAL, "First Femap")    Dim vProcessIDs As Variant
    Dim vModelIDs As Variant    Dim vVersion As Variant
    App.feAppRunningApplicationInfo("Fem ap", vProcessIDs, vModelIDs, vVersion )
    App.feAppGetRunningApplication("Femap", vProcessIDs( 1 ), vModelIDs( 1 ), appObj )
    Dim App2 As femap.model
Set App2 = appObj
App2.feAppMessage(FCM_NOR MAL,"Second Femap" )
End SubfeAppRunningA pplicationInfo
( appName, processIDs, activeWindows, nint )
feAppGetRunningApplication   API-963
3.16.5.12  feAppGetRunningApplication
feAppGetRunni ngApplication
( appName, processID, activeWindow, appObj )
Description:Returns the top-level COM Application Object.Input:STRING appName Set this equal to “FEMAP”.INT4 processID The Process ID of the running Application.V ARIANT activeWindow The open Model ID. Can also be an empty Variant.Output:
V ARIANT appObjectThe top-level Application Object . Also known as the IDispatch 
pointer.
Return Code:FE_FAIL No application found from the string in appName.Remarks/Usage:This method pairs with fe AppRunningApplicationInfo.
Example:See the example code for feAppRunningApplicationInfo.
 API-964  feAppLock
3.16.6  Locking FEMAP
The methods in this section allo w you to prevent certain actions  in FEMAP when they are not 
appropriate due to the state of your application.
3.16.6.1  feAppLock
feAppLock
( void )
Description:Locks the FEMAP user interface.Input:NoneOutput:NoneReturn Code:
INT4 lock_countThe lock count after this call. W ill be nonzero if the interface was 
locked.
Remarks/Usage:This method locks the user inte rface so that the user cannot pi ck any commands from the FEMAP 
menus or toolbars. Some aspects of the FEMAP user  interface (such as docking panes) will still remain 
active - there is no way to deactivat e those, however they can be hidden . Add-in applications are active. 
When FEMAP is locked, the cursor is changed to be an hourglass with a lock. You must call feAppUn-
lock before FEMAP will again be active.
Example:None
feAppUnlock   API-965
3.16.6.2  feAppUnlock
feAppUnlock
( void )
Description:Unlocks the FEMAP user interface.Input:NoneOutput:NoneReturn Code:
INT4 lock_countThe number of locks remain ing after this call. Will be 0 if the user 
interface was actually unlocked.
Remarks/Usage:This method unlocks the user interface, after a call to feAppLock, so that the user can again use the 
FEMAP commands. It changes the cu rsor back to the standard FEMA P cursors. Actually, feAppLock 
increases a lock count, so if it has been called multiple times, then feAp pUnlock must be called an equal 
number of times before th e user interface will be un locked. There is no harm  in calling feAppUnlock 
extra times, or even if feAppLock was never called.
Example:None
 API-966  feAppLockExit
3.16.6.3  feAppLockExit
feAppLockExit
( void )
Description:Locks the FEMAP session so that a user can not exit.
Input:NoneOutput:NoneReturn Code:INT4 lock_count The lock coun t after this call. Will be nonzero if the exit was locked.
Remarks/Usage:This method locks the session so that the user can not exit using the File->Exit command, or any of the 
normal system application close methods. This do es not prevent the FEMAP process from being acci-
dentally or intentionally terminated using Task Manager or other approaches.
Example:None
feAppUnlockExit   API-967
3.16.6.4  feAppUnlockExit
feAppUnlockExit
( void )
Description:Unlocks the FEMAP session so  that the user can exit.
Input:NoneOutput:NoneReturn Code:
INT4 lock_countThe number of lock s remaining after this call.  Will be 0 if the session 
was actually unlocked.
Remarks/Usage:This method unlocks the session, after a call to feAppL ockExit, so that the user  can again exit FEMAP.  
Actually, feAppLockExit increases a lock count, so if it has been called multiple times, then feAppUn-
lockExit must be called an equal nu mber of times before exit will be un locked. There is no harm in call-
ing feAppUnlockExit extra times, or ev en if feAppLockExit was never called.
Example:None
 API-968  feAppLockModel
3.16.6.5  feAppLockModel
feAppLockModel
( void )
Description:Locks the FEMAP session so that a user can not start or open a different model.
Input:NoneOutput:NoneReturn Code:INT4 lock_count The lock coun t after this call. Will be nonzero if the exit was locked.
Remarks/Usage:This method locks the session so that the user cannot  change to a new model us ing either the File->New 
or File->Open commands.
Example:None
feAppUnlockModel   API-969
3.16.6.6  feAppUnlockModel
feAppUnlockModel
( void )
Description:Unlocks the FEMAP session so that the user can start or open a new model.
Input:NoneOutput:NoneReturn Code:
INT4 lock_countThe number of lock s remaining after this call.  Will be 0 if the session 
was actually unlocked.
Remarks/Usage:This method unlocks the session, af ter a call to feAppLockModel, so th at the user can again start or 
open a different model.  Actually, feAppLockModel increases a lock count, so if it has been called mul-
tiple times, then feAppUnlockModel must be called an equal number of times before the model will be 
unlocked. There is no ha rm in calling feAppUnlockM odel extra times, or even if feAppLockModel was 
never called.
Example:None
 API-970  feAppLockDraw
3.16.6.7  feAppLockDraw
feAppLockDraw
( void )
Description:Locks the FEMAP session so that redraw s of the graphics windows do not occur.
Input:NoneOutput:NoneReturn Code:INT4 lock_count The lock coun t after this call. Will be nonzero if the exit was locked.
Remarks/Usage:This method locks the session so that redraws will not occur - even if you explicitly call API functions 
that cause redraws. Calling this function can improv e the performance of other API functions since the 
on-screen graphics do not need to be updated, however when you are done with your processing, you 
must call feAppUnlockDraw, and then ca ll feViewRedraw or feViewRegenerate.
Example:None
feAppUnlockDraw   API-971
3.16.6.8  feAppUnlockDraw
feAppUnlockDraw
( void )
Description:Unlocks the FEMAP session so that redr aws can occur in the graphics window.
Input:NoneOutput:NoneReturn Code:
INT4 lock_countThe number of lock s remaining after this call.  Will be 0 if the session 
was actually unlocked.
Remarks/Usage:This method unlocks drawing, after a call to feAppLoc kDraw, so that redraws can again be done.  Actu-
ally, feAppLockDraw increases a lock  count, so if it has been called multiple times, then feAppUnlock-
Draw must be called an equal number of times before  drawing will be unlocked. There is no harm in 
calling feAppUnlockDraw extra times, or ev en if feAppLockDraw was never called.
Example:None
 API-972  feAppStatusRedraw
3.16.7  Status Bar
The methods described here allow yo u to control the functionality of the Status Bar. In addition to 
these functions, you can set the vi sibility of the status bar using Section 3.16.2.4,  "feAppManageS-
tatusBar".
It's important to use the Status Bar sparingly. While frequent updates may provide the user more 
feedback with regards to the status of your pr ocess, too frequent updates may have an adverse 
impact on the performance of your API program.
3.16.7.1  feAppStatusRedraw
feAppStatusRedraw
( void )
Description:Redraws the Status bar.Input:
None
Output:NoneReturn Code:NoneRemarks/Usage:Simply redraws the Status bar to reflect any chang es that have taken place - for example creation or 
deletion of nodes or elements.
Example:None
feAppStatusShow   API-973
3.16.7.2  feAppStatusShow
feAppStatusShow
( enable, max_status )
Description:Enables or disables the status tracker inside the Status bar.Input:
BOOL enableSet to True to enable/show the stat us tracker. Set to False to remove 
it.
INT4 max_statusThe value that you w ill use as 100% comp lete when sending 
feAppStatusUpdate commands. 
Output:None
Return Code:
NoneRemarks/Usage:You must call feAppStatusShow( False, ...) after you are done with the status tracker to remove it from 
the display.
Example:None
 API-974  feAppStatusUpdate
3.16.7.3  feAppStatusUpdate
feAppStatusUpdate
( current_status )
Description:Updates the status tracker to th e specified level of completeness.
Input:
INT4 current_statusThe current completion value. This  should be a number that is 
between 0, and the value you specified as “max_status” in the 
feAppStatusShow  method. When you specify current_status=max-
_status, the status tracker w ill be drawn as fully complete.
Output:NoneReturn Code:NoneRemarks/Usage:Although it is normal to send increasing values of curre nt_status, starting at 0, and proceeding toward 
max_status, there is no requirement to do so. current_status values can be sent in any order.
Example:None
feAppMessage   API-975
3.16.8  Message Window
The methods described he re allow you to access functionality of the Mess age Window. In addition 
to these methods, you can control the visibility of the Message window using Section 3.16.2.2, 
"feAppManagePanes".
3.16.8.1  feAppMessage
feAppMessage
( color, message )
Description:Writes a message to the Messages and Lists window.Input:
INT4 colorThe color/status of the message to write: 0=Normal, 1=Highlight, 
2=Warning, 3=Error.
STRING message The text of the message to wr ite. Must be less than 160 characters.
Output:NoneReturn Code:NoneRemarks/Usage:This message is only written to the Message Window , regardless of the locatio n (or locations) that is 
currently specified in the listing destination.
Example:None
 API-976  feAppMessageStartListing
3.16.8.2  feAppMessageStartListing
feAppMessageStartListing
( )
Description:Begins a listing to the active listing destinationsInput:NoneOutput:NoneReturn Code:FE_FAIL Unable to begin listing - no need to call feAppMessageEndListing()Remarks/Usage:Calling this function initializes “Listin g Mode” in the Message window. This  means that text will appear 
in the Listing font - typically fixed pitch. It also means that the text will be written to whatever destina-
tions are selected - Message Window, File and/or Prin ter. Finally it means that text written to the Mes-
sage Window will not appear until you call feAppM essageEndListing(). Be tween these two calls 
redrawing of the Message Window is disabled to improve the speed of writing large blocks of text.
NOTE: You MUST call feAppMessageEndListing() after your last call to feAppMessage(), so that 
the Message Window display is turn ed back on. If you are using the Printer as a destination, all 
text that is written between your call to fe AppMessageStartListing() and feAppMessageEndList-
ing() is sent to the printer as a single  job when you call feAppMessageEndListing().
Example:This example writes all nodal coordinates in a listing.
Sub Main 
   Dim App As femap.model 
   Set App = feFemap() 
   Dim n As femap.Node 
   Set n = App.feNode 
   App.feAppMessageStartListing() 
   App.feAppMessage( FCM_NORMAL, "Nodal Coordinates" ) 
   While n.Next() 
      App.feAppMessage( FCM_NORMAL, Str$(n.ID) + "  xyz=" + _ 
          Str$(n.x) + "  " + Str$(n.y) + "  " + Str$(n.z) ) 
    Wend 

    App.feAppMessageEndListing() 
End Sub
feAppMessageEndListing   API-977
3.16.8.3  feAppMessageEndListing
feAppMessageEndListing
( )
Description:Ends a listing that was started by feAppMessageStartListingInput:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NOTE: You MUST call feAppMessageEndListing() after your last call to feAppMessage(), so that 
the Message Window display is turn ed back on. If you are using the Printer as a destination, all 
text that is written between your call to fe AppMessageStartListing() and feAppMessageEndList-
ing() is sent to the printer as a single  job when you call feAppMessageEndListing().
Example:
 API-978  feAppMessageClear
3.16.8.4  feAppMessageClear
feAppMessageClear
( void )
Description:Removes all items currently in the Messages and Lists window.Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:
Example:
None
feAppModelInfoShow   API-979
3.16.9  Model Info Tree
The methods described here allow you to access functionality of th e Model Info Tree. In addition 
to these methods, you can control the visibility of the Model Info Tree using Section 3.16.2.2, 
"feAppManagePanes"
3.16.9.1  feAppModelInfoShow
feAppModelInfoShow
( void )
Description:Returns the current state of the Show When Selected menu in th e Model Info Tree dockable pane
Input:NoneOutput:None
Return Code:
FE_OKShow When Selected is currently set to Highlight , Transparent High-
light, or Show Selected Only  option.
FE_FAIL Show When Selected is currently set to Off.
Remarks/Usage:
Example:
None
 API-980  feAppSetModelInfoShow
3.16.9.2  feAppSetModelInfoShow
feAppSetModelInfoShow
( bEnable )
Description:Sets the “Show Mode” of the Show When Selected menu in the Model Info Tree dockable paneInput:
BOOL bEnableIIf True, sets Show When  Selected menu to Highlight, Transparent 
Highlight, or Show Selected Only, based on the setting in the current 
model for Window, Show Entities.  If False, sets Show When 
Selected menu to Off. 
Output:NoneReturn Code:NoneRemarks/Usage:To insure a particular “Show Mode” will be used, be sure to set some combination of the available 
Info_ViewShow... options befo re calling this method.
Example:None
feFormatReal   API-981
3.16.10  Real Number Text Formatting
The methods described here allow you to access func tionality used in FEMAP to format real num-
bers as text.
3.16.10.1  feFormatReal
feFormatReal
( dValue, nWidth, nSigFig, nFormat, strValue )
Description:Formats a real number into a text string using the options used internally by FEMAP
Input:REAL8 dValue The real value to formatINT4 nWidth The overall width of the text string to produce
INT4 nSigFigThe number of significant figures to attempt to format. Must be able 
to fit within the specified width
INT4 nFormatThe formatting method to use 0= Normal, 1=Force Exponential, 
2=Nastran
Output:CHAR strValue The text string containing the formatted real numberReturn Code:NoneRemarks/Usage:NoneExample:None
 API-982  feTruncateReal
3.16.10.2  feTruncateReal
feTruncateReal
( dValue, nWidth, nSigFig, nFormat, truncValue )
Description:Truncates a real number to the prec ision of a formatted text string.
Input:REAL8 dValue The real value to formatINT4 nWidth The overall width of the text string to produce
INT4 nSigFigThe number of significant figures to attempt to format. Must be able 
to fit within the specified width
INT4 nFormatThe formatting method to use 0= Normal, 1=Force Exponential, 
2=Nastran
Output:
REAL8  truncValue The precision truncate d version of the fo rmatted real number
Return Code:NoneRemarks/Usage:This is the same as calling feFormatReal() and then pars ing the resulting text string into a new real vari-
able.
Example:None
feGetCurrentLibraryName   API-983
3.16.11  Library Management
The methods described here allow you manage libra ries, which are available for some entity types.
3.16.11.1  feGetCurrentLibraryName
feGetCurrentLibraryName
( entityTYPE, libraryTYPE, libraryNAME)
Description:Retrieves the name of the current library file (*.esp file) being us ed for a particular entity type.
Input:
INT4 or enum entityTYPEThe type of entity to retrieve libra ry name. Currently, there are librar-
ies for FT_VIEW, FT_MATL, FT_PROP, FT_LAYUP,
FT_CONNECTION_PROP, FT_FUNCTION_DIR, 
FT_AMGR_DIR, FT_REPORT, and FT_CHART. For entity information, see S ection 3.3.6, "Entity Types"
INT4 or enum libraryTYPELibrary to consider (i.e., tab on Library Management dialog box).
0=Display dialog box (FLIB_DIALOG) - not valid for this command
1=Personal tab (FLIB_PERSONAL)
2=Shared tab (FLIB_SHARED)3=Femap Standard Libraries (FLIB_SYSTEM)
Output:STRING libraryNAME Name of current library being used by specified entity type.
Return Code:FE_BAD_TYPE Entity type specifie d is not a valid library type. 
FE_INV ALIDlibrary type specified was not on e of the three possible choices 
FLIB_PERSONAL, FLIB_SHARED or FLIB_SYSTEM
Remarks/Usage: The full directory path to the libra ry file is includ ed in libraryNAME
Example:None
 API-984  feSetCurrentLibraryName
3.16.11.2  feSetCurrentLibraryName
feSetCurrentLibraryName
( entityTYPE, libraryTYPE, libraryNAME)
Description:Sets or changes the current library file (*.esp  file) being used for a particular entity type.
Input:
INT4 or enum entityTYPEThe type of entity to set or change the current library. Currently, there 
are libraries for FT_VIEW, FT_MATL, FT_PROP, FT_LAYUP,
FT_CONNECTION_PROP, FT_FUNCTION_DIR, 
FT_AMGR_DIR, FT_REPORT, and FT_CHART. For entity information, see S ection 3.3.6, "Entity Types"
INT4 or enum libraryTYPELibrary to specify (i.e., tab on Library Management dialog box).
0=Display dialog box (FLIB_DIALOG) - not valid for this command
1=Personal tab (FLIB_PERSONAL)2=Shared tab (FLIB_SHARED)3=Femap Standard Libraries (FLIB_SYSTEM)
STRING libraryNAME Name of current library to use for the spec ified entity type.
Output:NoneReturn Code:FE_BAD_TYPE Entity type specifie d is not a valid library type
FE_INV ALIDLibrary type specified was not on e of the three possible choices 
FLIB_PERSONAL, FLIB_SHARED or FLIB_SYSTEM
FE_NOT_EXIST The specified filename  in libraryNAME does not exist
Remarks/Usage: The full directory path to the library file should be incl uded in libraryNAME
Example:None
feLicenseExpiration   API-985
3.16.12  Other Utilities
The methods described here allow you to access other functionality.
3.16.12.1  feLicenseExpiration
feLicenseExpiration
( nDays )
Description:Returns the number of days un til your current license expires
Input:NoneOutput:INT4 nDays The number of da ys until the license expires
Return Code:NoneRemarks/Usage:nDays is returned as “-1” for perpetual licenses.Example:None
 API-986  feLicenseMethod
3.16.12.2  feLicenseMethod
feLicenseMethod
( nLicenseType )
Description:Returns the method of licen sing currently being used
Input:NoneOutput:
INT4 nLicenseTypeThe type of licensing currently being used
0 = None, this means that licensing has somehow failed
1 = Dongle
2 = Node/Curve limited Demo4 = FLEXlm-based Network Licensing
5 = API-only Licensing
Return Code:
FE_FAIL Licensing information is not valid
FE_SECURITYLicensing method is valid, but cu rrently exceeding some limitation 
on the license (like a node limit)
Remarks/Usage:NoneExample:None
feLicenseIsAvailable   API-987
3.16.12.3  feLicenseIsAvailable
feLicenseIsAvailable
( nFeature )
Description:Indicates whether a specific feature is licensed with this copy of FEMAPInput:
INT4 nFeatureThe feature to check licensing status. 
0 = NX Nastran Basic
1 = NX Nastran Nonlinear
2 = NX Nastran Dynamics3 = NX Nastran DMAP
4 = NX Nastran Superelements
5 = NX Nastran Aero Basic7 = NX Nastran Optimization
8 = NX Nastran Advanced Nonlinear
10 = NX Nastran RotorDynamics11 = NX Nastran Advanced Nonlinear Explicit15 = FEMAP Thermal
16 = FEMAP Advanced Thermal
17 = FEMAP Flow18 = FEMAP Structural Analysis Toolkit
Output:NoneReturn Code:FE_FAIL Feature is not licensedRemarks/Usage:NoneExample:None
 API-988  feLicenseGetInfo
3.16.12.4  feLicenseGetInfo
feLicenseGetInfo
( nFeature, bUser, pnLic, pFeatures, pLicAvail, pLicInUse, pUsers )
Description:Indicates whether a specific feature is licensed with this copy of FEMAPInput:
INT4 nFeatureThe feature to check licensing status. 
-1 = Will return everything. 
0 = NX Nastran Basic
1 = NX Nastran Nonlinear2 = NX Nastran Dynamics
3 = NX Nastran DMAP
4 = NX Nastran Superelements5 = NX Nastran Aero Basic
7 = NX Nastran Optimization
8 = NX Nastran Advanced Nonlinear10 = NX Nastran RotorDynamics11 = NX Nastran Advanced Nonlinear Explicit
15 = FEMAP Thermal
16 = FEMAP Advanced Thermal17 = FEMAP Flow
18 = FEMAP Structural Analysis Toolkit
BOOL bUserIf True, the user will be returned. If False, just the license types will 
be returned. 
Output:INT4 pnLic The number of license returned. INT4 pFeatures[0..N] An array of the features. INT4 pLicAvail[0..N] Total number of  licenses for each feature returned.
INT4 pLicInUse[0..N] Number of used license for each feature returned. 
STRING pUsers[0..Sum(LicI-
nUse)]An array of users correspondi ng to the licenses in use. 
Return Code:
NoneRemarks/Usage:NoneExample:None
feLicensePrintInfo   API-989
3.16.12.5  feLicensePrintInfo
feLicensePrintInfo
( nFeature )
Description:Print the features and licenses in use to the messages window.
Input:
INT4 nFeatureThe feature to check licensing status.
-1 = Will return everything. 
0 = NX Nastran Basic
1 = NX Nastran Nonlinear2 = NX Nastran Dynamics
3 = NX Nastran DMAP
4 = NX Nastran Superelements5 = NX Nastran Aero Basic
7 = NX Nastran Optimization
8 = NX Nastran Advanced Nonlinear10 = NX Nastran RotorDynamics11 = NX Nastran Advanced Nonlinear Explicit
15 = FEMAP Thermal
16 = FEMAP Advanced Thermal17 = FEMAP Flow
18 = FEMAP Structural Analysis Toolkit
BOOL bUserIf True, the user will be returned. If False, just the license types will 
be returned. 
Output:NoneReturn Code:FE_FAIL Feature is not licensedRemarks/Usage:NoneExample:None
 API-990  feRunCommand
3.16.12.6  feRunCommand
feRunCommand
( nCmdID, bWaitForCompletion )
Description:Runs a FEMAP commandInput:INT4 nCmdID The ID of the command to run
BOOL bWaitForCompletionIf True, this method only returns when the command is finished. If 
False, it returns immediately.
Output:NoneReturn Code:NoneRemarks/Usage:Command IDs can be found by calling various functions  defined earlier in this section, like feGetMenu-
Command( ). This method provides no means for au tomatically answering dialog boxes that are dis-
played by the selected command - the command is run interactively.
Example:None
feAppVersion   API-991
3.16.12.7  feAppVersion
feAppVersion
( void )
Description:Returns the version of FEMAPInput:NoneOutput:NoneReturn Code:
INT4 versionThe version of FEMAP specified as an  integer. This is 100 times the 
version number. For Example, v9.3 .1 will return 931, v10.0 will 
return 1000.
Remarks/Usage:NoneExample:None
 API-992  feAppUndoCheckpoint
3.16.12.8  feAppUndoCheckpoint
feAppUndoCheckpoint
( undoTitle )
Description:Establishes a point that the Undo command can roll back to
Input:
STRING undoTitleOnce an “Undo checkpoint” is set, the specified String will appear 
between “Undoing” and “Command” in the Messages window when 
the “Tools, Undo” command is used.
Output:NoneReturn Code:
FE_FAIL No model is open
Remarks/Usage:NoneExample:None
feAppUndoClear   API-993
3.16.12.9  feAppUndoClear
feAppUndoClear
( void )
Description:Clears the Undo StackInput:NoneOutput:NoneReturn Code:FE_FAIL No model is openRemarks/Usage:NoneExample:None
 API-994  feCrossSectionReport
3.16.12.10  feCrossSectionReport
feCrossSectionReport
( nPropID, bDoEndA, bCopyToClipboard, fName, nFileFormat )
Description:Copies a picture of the cross-section and the section property information from the Cross Section Defini-
tion dialog box to the clipboard for a specified bar, beam, or curved beam property. Alternatively, the 
picture and section information can be saved to a file.
Input:INT4 nPropID ID of bar, beam, or curved beam property
BOOL bDoEndAWhen True, copies or saves the picture and section properties for 
End A of the selected property. When False, copies or saves the pic-ture and section properties of End B
BOOL bCopyToClipboardWhen True, copies picture and info rmation to the clipboard. When 
False, saves picture and informat ion to a file using the format 
selected in nFileFormat.
STRING fNameThe complete filename of the pictur e file to save the picture and sec-
tion information.
INT4 nFileFormatFormat of save picture file: 0=Bitmap (FPM2_BMP), 1=JPEG 
(FPM2_JPEG), 2=GIF (FPM2_GI F), 3=TIFF (FPM2_TIF), 4=PNG 
(FPM2_PNG).
Output:NoneReturn Code:FE_INV ALID Invalid file formatFE_NOT_EXIST Selected property does not existFE_NOT_A V AILABLE selected property is  not a type with a cross section
Remarks/Usage:NoneExample:None
feAppResetLocale   API-995
3.16.12.11  feAppResetLocale
feAppResetLocale
( void )
Description:Resets LocaleInput:NoneOutput:NoneReturn Code:FE_FAIL No model is openRemarks/Usage:NoneExample:None
 API-996  
3.17  User Graphics Methods
User Graphics Methods include the following topics:
•Section 3.17.1, "Managing User Graphics Data"
•Section 3.17.2, "Displaying User Graphics Data"
   API-997
3.17.1  Managing Us er Graphics Data
User Graphics data allows you to  create additional points, lines, arrows, and polygons (triangles 
and quads) that can be displayed with your model. User Graphics data has no interaction with your other model data, it is si mply used for display. 
Just like many other types of data in FEMAP (loads , constraints...), User Graphics data is stored in 
sets. You can create as many different sets of data  in you model as you want (with the normal ID 
limits). Simply creating the data however does not make it visible in your graphics windows. 
Graphics Data only becomes visibl e when its set is selected, and on ly one set can be selected at a 
time. This gives you the flexibility of creating ma ny different graphical “objects”, each in its own 
set, and then quickly switching between them by selecting the appropriate set.
User Graphics data can be managed either thro ugh these methods, or using the various User 
Graphics Entity objects. These me thods provide a bit simpler inte rface, the entity objects provide 
more overall capability.
The following methods allow you to define and mana ge your graphics data. Selecting the data for 
display is described in the next section.
 API-998  feGFXLoad
3.17.1.1  feGFXLoad
feGFXLoad
( nSetID, nxyz, xyz, npoly, poly, color, edgecolor, symbol )
Description:Creates User Graphics Data containing points, lines, triangles and/or quadsInput:INT4 nSetID The User Graphics Set to createINT4 nxyz The number of locations specified in the coordinate table (xyz)REAL8 xyz[0..(3*nxyz)-1] The coordinates used to define the endpoints/corners of the graphics 
data. This data is referenced by th e entries in “poly”. All values must 
be in global rectangular coordinates. 
INT4 npoly The number of entries in the “poly” array
INT4 poly[0..(4*npoly)-1] This array contains 4 en tries for each graphics “entity” to be created. 
The values must be the index in the “xyz” array of the coordinates 
for that endpoint/corner. For points, only the first of the four entries 
is used. For lines, the first two are used. For triangles,  the first three 
are used. ALL UNUSED ENTRIES MUST BE SET TO -1 (that is 
what indicates which shape you are describing). The array must con-
tain data in the following orde r (Entity1Corner1, Entity1Corner2, 
Entity1Corner3, Entity1Corner4 , Entity2Corner1, Entity2Cor-
ner2...). Note that the first coordinate  in the xyz array is index 0, not 
1.
INT4 color The color of the entities create d. For triangles and quads this is the 
fillcolor
INT4 edgecolor Only used for triangles and quads. The color of the edges.
INT4 symbol Only used for points. The symbol to be displayed for points.
Output:NoneReturn Code:FE_FAIL Unable to allocate memory or access the data provided.FE_BAD_DATA One of the indices in “poly” is out of the range provided in “xyz”Remarks/Usage:NoneExample:
feGFXLoad   API-999
Sub Main 
Dim App As femap.model 
Set App = feFemap() 
Dim xyz(2,10000) As Double 
Dim poly(3,10000) As Long 

Dim n As femap.Node 
Set n = App.feNode 
Dim e As femap.Elem 
Set e = App.feElem 
' Grab the nodal coordinates, but offset by 1 in the Z direction 
While (n.Next()) 
  xyz(0,n.ID) = n.x 
  xyz(1,n.ID) = n.y 
  xyz(2,n.ID) = n.z + 1.0 
Wend
' Build a line/tri/quad for each element we find 
nPoly = 0 
While (e.Next()) 
   Select Case e.topology 
      Case FTO_LINE2 
         poly(0,nPoly) = e.Node(0) 
         poly(1,nPoly) = e.Node(1) 
         poly(2,nPoly) = -1 
         poly(3,nPoly) = -1 
      Case FTO_TRIA3 
         poly(0,nPoly) = e.Node(0) 
         poly(1,nPoly) = e.Node(1) 
         poly(2,nPoly) = e.Node(2) 
         poly(3,nPoly) = -1 
      Case FTO_QUAD4 
         poly(0,nPoly) = e.Node(0) 
         poly(1,nPoly) = e.Node(1) 
         poly(2,nPoly) = e.Node(2) 
         poly(3,nPoly) = e.Node(3) 
   End Select 
   nPoly = nPoly + 1 
Wend
' Load the graphics data 
rc = App.feGFXLoad( 1, 10000, xyz, nPoly, poly, FCL_RED, FCL_OR-ANGE, GPS_DIAMOND ) 
' Select and draw the graphics data 
rc = App.feGFXSelect( 1, True, True ) 
End SubfeGFXLoad
( nSetID, nxyz, xyz, npoly, poly, color, edgecolor, symbol )
 API-1000  feGFXDelete
3.17.1.2  feGFXDelete
feGFXDelete
( bAllSets, nSetID )
Description:Deletes all User Graphics entities (points, lines, a rrows, triangles and quads)  in one or more sets
Input:
BOOL bAllSetsIf True, all entities, in all sets are de leted. If False, then all entities in 
Set nSetID are deleted
INT4 nSetID The setID to delete if bAllSets=FalseOutput:NoneReturn Code:FE_FAIL Unable to delete entitiesRemarks/Usage:Calling this method deletes the User  Graphics data from your model,  however if User Graphics were 
selected for display, they will continue to be disp layed even after calling this  method (even though the 
underlying data has been deleted). You must call "feGFXReset" (Section 3.17.2.3) to remove the graph-
ics from the display.
Example:None
feGFXSelect   API-1001
3.17.2  Displaying User Graphics Data
Once User Graphics data has been created, either  using "feGFXLoad" (Section 3.17.1.1) or using 
the User Graphics Entity objects,  it can be selected for display. 
3.17.2.1  feGFXSelect
feGFXSelect
( nSetID, bEnableAll, bRedraw )
Description:Selects a predefined set of User Graphics entities for display.Input:INT4 nSetID The setID to be selected for display
BOOL bEnableAllIf True, then display of User Grap hics will be enabled for all active 
views. If False, you must subs equently call "feGFXEnableView" 
(Section 3.17.2.2) to enable display for the views you want.
BOOL bRedrawOnce selected User Graphics will only be displayed after a Redraw. 
If True, this forces an immediate redraw. Otherwise you will have to redraw later to see your graphics.
Output:NoneReturn Code:FE_FAIL Unable to load selected set.Remarks/Usage:NoneExample:None
 API-1002  feGFXEnableView
3.17.2.2  feGFXEnableView
feGFXEnableView
( bEnableAll, nVuID )
Description:Enables display of User Graphics in one or more selected views.Input:
BOOL bEnableAllIf True, then display of User Grap hics will be enabled for all active 
views. If False, only the view sp ecified by nVuID will be enabled.
INT4 nVuID The ID of the View to en able. Only used if bEnableAll=False
Output:NoneReturn Code:FE_FAIL Unable to load selected set.Remarks/Usage:This method is only needed if you only want to enab le display of User Graphics in certain views. To dis-
play in every view, simply specify bEnableAll=True when you call "feGFXSelect" (Section 3.17.2.1) to 
select the data to display.
Example:None
feGFXReset   API-1003
3.17.2.3  feGFXReset
feGFXReset
( void )
Description:Disables display of User Graphics in all views.Input:NoneOutput:NoneReturn Code:FE_FAIL User Graphics not reset.Remarks/Usage:This method resets the display of Us er Graphics. It does not delete th e data from your model. You must 
call "feGFXDelete" (Section 3.17.1.2) or one of the User Graphics Entity delete methods to delete the 
data. After calling this me thod, you can redisplay the data by calling "feGFXSelect" (Section 3.17.2.1).
Example:None
 API-1004  
3.18  File Utility Methods
File Utility Methods include:
•Section 3.18.1, "feFileGetName"
•Section 3.18.2, "feFileExecute"
•Section 3.18.3, "feFileProgramRun"
•Section 3.18.4, "feFileProgramRunning"
•Section 3.18.5, "feFileCurrentDirectory"
feFileGetName   API-1005
3.18.1  feFileGetName
feFileGetName
( title, filterName, filterStr, openForRead, fName )
Description:Allows you to display a dialog box to retrieve a filename.Input:STRING title A text string to be displayed as the title of the dialog box.STRING filterName A text string describing the type of files that you will be looking for.
STRING filterStrA text string used to limit the types of files displayed. This should be 
of the form “*.XXX” to display all files with an XXX file extension. 
Use “*.*” to display all files.
BOOL openForRead If True, the name of an existing file must be selected. 
Output:
STRING fName The name of the file chosen by the user.
Return Code:NoneRemarks/Usage:NoneExample:
Sub Main 
Dim App As femap.model 
Set App = feFemap() 

Dim rc As Long 
Dim fName As String 

rc = App.feFileGetName("Open Neutral File", "Neutral Files", _ 
  "*.NEU", True, fName) 

MsgBox(fName) ' Show filename in dialog box
End Sub 
 API-1006  feFileExecute
3.18.2  feFileExecute
feFileExecute
( cmdLine, waitForCompletion )
Description:Allows you to run a program or other object as a separate process.Input:STRING cmdLine The full command line  used to launch the program.
BOOL waitForCompletionIf True, this method will wait until the other process completes 
before returning. If False, it will re turn as soon as the process starts.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
feFileProgramRun   API-1007
3.18.3  feFileProgramRun
feFileProgramRun
( useDlg, init, isFile, buff )
Description:This function selects and runs a program file.Input:BOOL useDlg If True, this function runs interactively and displays a dialog box to 
ask the user to define the filena me of the program file to run.
BOOL init If True, any previously running program file is terminated and other 
variables are reinitiali zed. In most cases, this should be True.
BOOL isFile If True, the buff variable mu st contain the full name of the program 
file to run. If False, buff contains the actual text of the program file. 
Ignored if useDlg=True.
STRING buff Either the name or the contents  of the program file to run (depends 
on the isFile parameter).
Output:NoneReturn Code:FE_FAIL The program file could not be run.Remarks/Usage:Refer to the Section later in this  document on Program Files for more information on the syntax 
required. When you call this functio n, the program file is started, however the function returns immedi-
ately, it can not wait for the program file to comple te. Refer to the feFileProg ramRunning( ) method, and 
the chapter on events for possible methods fo r determining when a pr ogram file finishes. 
Example:None
 API-1008  feFileProgramRunning
3.18.4  feFileProgramRunning
feFileProgramRunning
( void )
Description:This function can be called to see if a program file is still running.
Input:NoneOutput:NoneReturn Code:FE_OK Program file is still runningFE_FAIL No program file is runningRemarks/Usage:Refer to the Section later in this  document on Program Files for more information on the syntax 
required. You can call this method, see  if the program file is running, and if it is, wait for some period 
and then check again, until the program file finishes.
Example:None
feFileCurrentDirectory   API-1009
3.18.5  feFileCurrentDirectory
feFileCurrentDirectory
( sCurrentDir )
Description:This function sets the cu rrent directory for a model
Input:STRING sCurrentDir The directory to set as currentOutput:NoneReturn Code:FE_FAIL The directory specified is not validRemarks/Usage:NoneExample:None
 API-1010  
3.19  Set Utility Methods
Set Utility Methods include:
•Section 3.19.1, "feSetFree"
•Section 3.19.2, "feSetFreeNotInSet"
feSetFree   API-1011
3.19.1  feSetFree
feSetFree
( setID )
Description:Deletes a saved Femap Set. Input:INT4 setID ID of saved Set you wish to delete.Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-1012  feSetFreeNotInSet
3.19.2  feSetFreeNotInSet
feSetFreeNotInSet
( setID )
Description:Deletes all saved sets not in the input set.Input:
INT4 setIDID of Set that contains IDS to not delete. Set to 0 to delete all saved 
Sets.
Output:NoneReturn Code:FE_OK Sets were deleted.Remarks/Usage:NoneExample:
Sub Main
    Dim App As femap.model
    Set App = feFemap()
    Dim cs As femap.Set
    Set cs = App.feSet
    ' Delete all saved sets except 1
    cs.Add( 1 )
    rc = App.feSetFreeNotInSet( cs.ID )
End Sub
   API-1013
4. FEMAP Tool Objects
In addition to the various method s and properties that are availabl e directly from the main FEMAP 
application object, and the entity objects described later, FEMAP also provides other objects that 
provide access to other functionality and tools. Some of these obj ects allow access to the various 
windows available in the user in terface, others provide entity selec tion, and general data and file 
functionality that might not be available fro m the environment where you are programming.
Creating an Object
To link your application to FEMAP, you had to declare an object and then connect it to FEMAP. In 
Basic, this is done via the GetObject or CreateObject func tions. Accessing these additional 
FEMAP objects is similar. First you must declare an object. Then, however, instead of using the 
standard system level functions, you use one of the following FEMAP functions to actually create 
the object. Once the object has been created, all of the pr operties and methods for that type of 
object are available for use.
All of the following methods are available from the FEMAP application object, and return the 
object that they create.
DataTable Objects
feDataTable (Section 4.1, "DataTable 
Objects")Creates a DataTable Object
Element Quality Objects
feElementQuality (Section 4.2, "Element 
Quality Objects")Creates an Element Quality 
Ob
ject
Geometry Preparation and Meshing Objects
feMesher (Section 4.3, "Geometry Prepara -
tion and Meshing Objects")Creates a Geometry Prepa -
ration and Meshing Object
ReadFile Objects
feRead (Section 4.4, "ReadFile Objects") Creates a ReadFile ObjectMethod Description Other Methods
Method Description Other Methods
Method Description Other Methods
Method Description Other Methods
 API-1014  
Selector Objects
Set ObjectsSort ObjectsUserData Objects
Results Browsing Objects
MapData Objects
Entity Tracking ObjectsMethod Description Other Methods
feSelector (Section 4.5, "Selector Objects") Creates a Selector Object
Method Description Other Methods
feSet (Section 4.6, "Set Objects") Creates a Set Object Group.List
Method Description Other Methods
feSort (Section 4.7, "Sort Objects") Creates a Sort Object
Method Description Other Methods
feUserData (Section 4.8, "UserData Objects") Creates a UserData Object
Method Description Other Methods
feResults (Section 4.9, "Results Browsing 
Objects")Creates a Results Browsing 
Object
Method Description Other Methods
feMapData (Section 4.10, "MapData 
Objects")Creates a MapData Object
Method Description Other Methods
feTrackData (Section 4.11, "Entity Tracking 
Objects")Creates a Entity Tracking 
Object
   API-1015
Beam Calculator Objects
Draw/Erase ObjectsUser Defined Graphics ObjectsCopyTool Objects
MoveTool Objects
MergeTool ObjectsResults Vector ID ObjectsMethod Description Other Methods
feBeamCalculator (Section 4.12, "Beam Cal-
culator Objects")Creates a Beam Calculator 
Object
Method Description Other Methods
feDrawErase (Section 4.13, "Draw/Erase 
Objects")Creates a Draw/Erase 
Object
Method Description Other Methods
feUserDefinedGraphics (Section 4.14, "User 
Defined Graphics Objects")Creates a User Defined 
Graphics Object
Method Description Other Methods
feCopyTool (Section 4.15, "CopyTool 
Objects")Creates a CopyTool Object
Method Description Other Methods
feMoveTool (Section 4.16, "MoveTool 
Objects")Creates a MoveTool Object
Method Description Other Methods
feMergeTool (Section 4.17, "MergeTool 
Objects")Creates a MergeTool Object
Method Description Other Methods
feResultsIDQuery (Section 4.18, "Results 
Vector ID Query Objects")Creates a Results Vector ID 
Query Object
 API-1016  
Stress Linearization (S tressLinear) Objects
PublishTool ObjectsPublishTable ObjectsBodyMesher ObjectsMethod Description Other Methods
feStressLinear (Section 4.19, "Stress Linear-
ization (StressLinear) Objects")Creates a Stress 
Linearization Object
Method Description Other Methods
fePublishTool (Section 4.20, "PublishTool 
Objects")Creates a PublishTool 
Object
Method Description Other Methods
fePublishTable (Section 4.21, "PublishTable 
Objects")Creates a PublishTable 
Object
Method Description Other Methods
feBodyMesher (Section 4.22, "BodyMesher 
Objects")Creates a BodyMesher 
Object
   API-1017
4.1  DataTable Objects
The DataTable object provides access to the functionality of the Data Table in your model. It is not 
a model entity. 
Use the feDataTable method of the FEMAP App lication object to access the DataTable object.
4.1.1  DataTable Object Properties
4.1.2  Specifying Row and Column Indexes
Most methods in the DataTable object require you to specify row and column  indexes to locate the 
data that you want to manipulate. To make access to  that DataTable as flexible as possible for dif-
ferent applications, there are two separate ways to specify those indexes. The choice of these meth-
ods are controlled by the VisibleRowsOnly and VisibleColsOnly properties. 
The default for both of these prop erties is False - which means th at both row and column indexes 
refer to the order in which the rows and columns were added to the table.  For most applications, 
this is the way in which you will want to wo rk, since these numbers do not normally change Property Description
INT4 NumberOfRows The number of data rows in the Data Table (Read Only)
INT4 NumberOfColumns The number of co lumns in the Data Table (Read Only)
INT4 TypeThe type of entities being show n in the Data Table. For 
more information on Entity Ty pes refer to the table in Sec-
tion 3.3.6, "Entity Types". 
BOOL VisibleRowsOnlyIf True, then row indexes refe rence the rows as currently 
displayed in the table. If False, they reference the rows as they were added to the table,  regardless of which rows are 
displayer or their order.
BOOL VisibleColsOnlyIf True, then column indexes reference the columns as cur-
rently displayed in the table. If False, they reference the col-
umns as they were added to the table, regardless of which 
columns are displayer or their order.
BOOL VisibleData table visibility (Read Only). If True, then the Data 
Table is currently visible in the FEMAP GUI. If False, then the Data Table is not currently visible. Use feAppManage-
Panes application method to ch ange visibility of the Data 
Table pane
BOOL LockedData table lock status (Read Only). If True, then the Data 
Table is currently locked in the FEMAP GUI. If False, then 
the Data Table is not curren tly locked. Always returns 
TRUE if the Data Table is not visible. Use the Data Table Lock method to lock and unlock the Data Table. 
 API-1018  
(unless you delete rows) - they are not affected by  changing sort order, hiding rows or columns, 
grouping or any other manipulation of how the table is displayed.
In VisibleRowsOnly/VisibleColsOnly mode (set the property to True), the indexes refer to the vis-
ible row or column in the table. If you hide ro ws or columns, those columns are no longer accessi-
ble in this mode. If you ch ange column order, or change the so rt order of the rows, they are still 
available, but the indexes ch ange, since the positions in  the display have changed.
In either mode, row and column indexes both start at 0, which is either the first row/column cre-
ated, or the top row/left column in the table.
FindRow   API-1019
4.1.3  DataTable Object Row Methods
There following methods are available to access and manipulate Data Table rows.
4.1.3.1  FindRow
FindRow
( ModelID, SetID, ID )
Description:This method returns the index of the row that matches your search criteria.
Input:
INT8 ModelIDThe ID of the Model to match. ( 0 = Any Model ). This is only neces-
sary if you want to load data from multiple models in the same table.
INT4 SetIDThe SetID of the entity to  match ( 0 = Any SetID ). This is not neces-
sary for most model entities (like nodes, elements, properties...) 
which all have SetID = 1
INT4 ID The ID of the entity  to match ( 0 = Any ID )
Output:NoneReturn Code:
rowIndexThe index of the row in the Data Ta ble that matches your criteria. If 
no row matches rowIndex will be negative.
Remarks/Usage:This function can be used if you do not want to keep track of row indices. Because it returns the row 
index as the Return Co de, this method can be used directly in ot her calls as shown in the example. It will 
always return the appropriate matching index,  regardless of the setting of VisibleRowsOnly.
Example:This example hides the row that c ontains the entity with ID = 3
Sub Main 
Dim App As femap.model 
Set App = feFemap 

Dim r As femap.DataTable 
Set r = App.feDataTable 

r.SetRowVisible( r.FindRow(0,0,3), False ) 
End Sub
 API-1020  GetRowInfo
4.1.3.2  GetRowInfo
GetRowInfo
( numRows, ModelID, SetID, ID )
Description:Returns information about al l the rows in the table.
Input:NoneOutput:INT4 numRows The number of entries in the ModelID, SetID and ID arraysINT8 ModelID[0..numRows-1] The ID of the Mo del associated with the entity in each row.
INT4 SetID[0..numRows-1] The Se tID of the entity in the row
INT4 ID[0..numRows-1] The ID  of the entity in the row.
Return Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The Data Table does not contain any data.FE_NO_MEMORY Can not allocate memory to  retrieve info from the Data Table
Remarks/Usage:This method can be used to retrieve  arrays that indicate all of the entities in the Data Table. If Visible-
RowsOnly is True, only informatio n about visible rows is returned.
Example:
GetRowVisible   API-1021
4.1.3.3  GetRowVisible
GetRowVisible
( nRow, bVisible )
Description:Returns the visibility of a row in the table.Input:INT4 nRow The index of the row to queryOutput:BOOL bVisible True if the row is visible, False if hiddenReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The specified row does not existRemarks/Usage:NoneExample:None
 API-1022  SetRowVisible
4.1.3.4  SetRowVisible
SetRowVisible
( nRowOrAll, bVisible )
Description:Sets one or all rows visible or hiddenInput:INT4 nRowOrAll The index of the row to update (-1=All Rows)BOOL bVisible True to make the row(s)  visible, or False to hide them.
Output:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The specified row does not existRemarks/Usage:NoneExample:None
FindColumn   API-1023
4.1.4  DataTable Object Column Methods
There following methods are available to access and manipulate Data Table columns.
4.1.4.1  FindColumn
FindColumn
( colTitle )
Description:This method returns the index of the co lumn that matches your search criteria.
Input:STRING colTitle The title of the column to locateOutput:NoneReturn Code:
colIndexThe index of the column in the Data  Table that matches your criteria. 
If no column matches co lIndex will be negative.
Remarks/Usage:This function can be used if you do not want to keep  track of column indices. Because it returns the col-
umn index as the Return Code, this method can be used  directly in other calls as shown in the example. 
It will always return the appropr iate matching index, regardless of the setting of VisibleColsOnly.
Example:This example hides the colu mn that contains the title "Topology"
Sub Main 
Dim App As femap.model 
Set App = feFemap 

Dim r As femap.DataTable 
Set r = App.feDataTable 

r.SetColumnVisible( r.FindColumn("Topology", False ) 
End Sub
 API-1024  GetColumnInfo
4.1.4.2  GetColumnInfo
GetColumnInfo
( numColumns, colType, colTitle )
Description:This method is obsole te and should no longer be used. Use GetColumnInfo2 instead.
Returns information about al l the columns in the table.
Input:NoneOutput:INT4 numColumns Th e number of entries in the colType and colTitle arrays
INT4 colType[0..numColumns-
1]A value indicating the type of data in the column.
STRING colTitle[0..numCol-
umns-1]The titles of the columns
Return Code:
FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The Data Table does not contain any data.FE_NO_MEMORY Can not allocate memory to  retrieve info from the Data Table
Remarks/Usage:This method can be used to retrieve  arrays that indicate all of the en tities in the Data Table. If VisibleC-
olsOnly is True, only information about visible columns is returned.
Example:
GetColumnInfo2   API-1025
4.1.4.3  GetColumnInfo2
GetColumnInfo2
( numColumns, colType, colTitle )
Description:Returns information about all the co lumns in the table. Returns column  types that match those needed 
for AddColumn() and UpdateColumn().
Input:NoneOutput:INT4 numColumns Th e number of entries in the colType and colTitle arrays
INT4 colType[0..numColumns-
1]A value indicating the type of data in the column.
STRING colTitle[0..numCol-
umns-1]The titles of the columns
Return Code:
FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The Data Table does not contain any data.FE_NO_MEMORY Can not allocate memory to  retrieve info from the Data Table
Remarks/Usage:This method can be used to retrieve  arrays that indicate all of the en tities in the Data Table. If VisibleC-
olsOnly is True, only information about visible columns is returned.
Example:
 API-1026  GetColumnInfo2
' === First, use FEMAP to load Data Table with Nodal Output Vec-
tors ===
' =====Example: List, Output, Results to Data Table, pick Trans-
lation Vectors… ===
   Sub Main
    Dim App As femap.model    Set App = feFemap()
    Dim d As femap.DataTable
    Set d = App.feDataTable
    Dim numRows As Long, ModelID As Variant, setID As Variant, ID 
As Variant
    d.GetRowInfo( numRows, ModelID, setID, ID )
    If numRows < 1 Then End    Dim values() As Variant
    ReDim values( numRows-1 )
    ' === Filler values ===
    For i = 0 To numRows-1        values(i) = i+1 + 1000
    Next
    '=== GetColumnInfo should provide immediate transition to 
"AddColumn" method === 
    Dim numCols&, colType As Variant, colTitle As Variant
    rc = d.GetColumnInfo2( numCols, colType, colTitle )
Dim newID As Long
    ' === using colTitle AND colType here  that we populated from 
"GetColumnInfo2" ====
    rc = d.AddColumn( False, False, FT_NODE, 0, "API - " &      
colTitle(numCols-1), colType(numCols-1), numRows, ID, values, 
newID )
End SubGetColumnInfo2
( numColumns, colType, colTitle )
GetColumnVisible   API-1027
4.1.4.4  GetColumnVisible
GetColumnVisible
( nColumn, bVisible )
Description:Returns the visibility of a column in the table.Input:INT4 nColumn The index of the column to query.Output:BOOL bVisible True if the column is visible, False if hiddenReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The specified column does not exist
Remarks/Usage:NoneExample:None
 API-1028  SetColumnVisible
4.1.4.5  SetColumnVisible
SetColumnVisible
( nColumnOrAll, bVisible )
Description:Sets one or all columns visible or hiddenInput:INT4 nColumnOrAll The index of the column to update (-1=All Columns)
BOOL bVisible True to make  the column(s) visible, or False to hide them.
Output:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The specified column does not exist
Remarks/Usage:NoneExample:None
GetColumnWidth   API-1029
4.1.4.6  GetColumnWidth
GetColumnWidth
( nColumn, nWidth )
Description:Returns the width of a column in the table.Input:INT4 nColumn The index of the column to query.Output:INT4 nWidth The width of the column in pixelsReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The specified column does not exist
Remarks/Usage:NoneExample:None
 API-1030  SetColumnWidth
4.1.4.7  SetColumnWidth
SetColumnWidth
( nColumnOrAll, nWidth )
Description:Sets the width of one or all columnsInput:INT4 nColumnOrAll The index of the column to update (-1=All Columns)
INT4 nWidth The width of the columns in pixelsOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The specified column does not exist
Remarks/Usage:NoneExample:None
GetColumnTitle   API-1031
4.1.4.8  GetColumnTitle
GetColumnTitle
( nColumn, colTitle )
Description:Returns the title of a column in the table.Input:INT4 nColumn The index of the column to query.Output:STRING colTitle The title of the columnReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The specified column does not exist
Remarks/Usage:NoneExample:None
 API-1032  SetColumnTitle
4.1.4.9  SetColumnTitle
SetColumnTitle
( nColumn, colTitle )
Description:Sets the title for a columnInput:INT4 nColumn The index of the column to update STRING colTitle The title of the columnOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The specified column does not exist
Remarks/Usage:NoneExample:None
SetColumnPosition   API-1033
4.1.4.10  SetColumnPosition
SetColumnPosition
( nColumn, nNewIndex, bAfter )
Description:Moves the display location of a column in the Data Table
Input:INT4 nColumn The index of the column to update 
INT4 nNewIndexThe index of the new location in th e table. The column is moved to 
the left of this location.
BOOL bAfterIf True, the “nColumn” is placed after the “nNewIndex” column, 
otherwise it is placed before that column
Output:
None
Return Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The specified column does not exist
FE_FAIL Not able to move colu mn to the requested location
Remarks/Usage:This method will automatically make  the specified column that you are moving visible - even if it is not 
currently.
Example:None
 API-1034  SetColumnAlignment
4.1.4.11  SetColumnAlignment
SetColumnAlignment
( nColumn, nAlign )
Description:Updates the alignment of data  in the selected column(s)
Input:INT4 nColumnOrAll The index of the colu mn to update ( -1 = All Columns )
INT4 nAlign The data alignmen t (0=Left, 1=Center, 2=Right)
Output:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The specified column does not exist
Remarks/Usage:NoneExample:None
GetColumnValue   API-1035
4.1.5  DataTable Object Data Methods
There following methods are available to access and manipulate Data Table data.
4.1.5.1  GetColumnValue
GetColumnValue
( nColumn, numRowsOrAll, Rows, numData, ColumnData )
Description:This method returns data from selected rows in a columnInput:INT4 nColumn The index of a column to query
INT4 numRowsOrAllThe number of entries in the Rows a rray, or -1 to retrieve data from 
all rows
INT4 Rows[0..numRowsOrAll-
1]The indices of the rows to query
Output:
INT4 numData The number of ite ms returned in ColumnData
V ARIANT ColumnDataThe data recovered from Column nColumn and the selected rows. 
Depending on the type of data cont ained in the column, this could be 
an array of booleans, integers, doubles or strings.
Return Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The Data Table does not contain any data.FE_NO_MEMORY Can not allocate memory to  retrieve info from the Data Table
FE_BAD_TYPEThe selected column contains a type of data that is not supported by 
this method.
Remarks/Usage:Typically numData will be the same as numRowsOrAll (if numRowsOrAll is  not -1), unless some of the 
rows you request are invalid. The GetColumnText method  is similar, but always returns the data as text 
strings.
Example:
 API-1036  GetColumnValue
This example retrieves the Property ID fro m Rows 4, 1, and 0 of the Data table
Sub Main 
Dim App As femap.model 
Set App = feFemap 

Dim r As femap.DataTable 
Set r = App.feDataTable 

Dim ro(3) As Long 
ro(0) = 4 
ro(1) = 1 
ro(2) = 0 
Dim n As Long 
Dim c As Variant 
r.GetColumnValue( r.FindColumn("Prop ID"), 3, ro, n, c ) 
End SubGetColumnValue
( nColumn, numRowsOrAll, Rows, numData, ColumnData )
GetColumnText   API-1037
4.1.5.2  GetColumnText
GetColumnText
( nColumn, numRowsOrAll, Rows, numData, ColumnText )
Description:This method returns data from selected rows in a columnInput:INT4 nColumn The index of a column to query
INT4 numRowsOrAllThe number of entries in the Rows a rray, or -1 to retrieve data from 
all rows
INT4 Rows[0..numRowsOrAll-
1]The indices of the rows to query
Output:
INT4 numData The number of ite ms returned in ColumnData
STRING ColumnText[0..num-
Data-1]The data recovered from Column nColumn and the selected rows. 
This method always retrieves the text  that is displayed, rather than 
numeric values. For co lumns displaying chec k boxes, the string 
returned is “1” if the box is on, and “0” if it is off.
Return Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The Data Table does not contain any data.FE_NO_MEMORY Can not allocate memory to  retrieve info from the Data Table
FE_BAD_TYPEThe selected column contains a type of data that is not supported by 
this method.
Remarks/Usage:This method is identica l to GetColumnValue, except that it alwa ys returns the data as a text string.
Example:None
 API-1038  GetRowValues
4.1.5.3  GetRowValues
GetRowValues
(  numRowsOrAll, Rows, numData, RowData )
Description:This method returns data fro m all columns for selected rows
Input:
INT4 numRowsOrAllThe number of entries in the Rows a rray, or -1 to retrieve data from 
all rows
INT4 Rows[0..numRowsOrAll-
1]The indices of the rows to query
Output:
INT4 numData The number of Columns returned in RowData
V ARIANT RowDataThe data recovered from the selected  rows for all columns. The data 
is returned as an array of Variants, where each variant contains an 
array of data for the corresponding column. Depending on the type of data contained in the column, this  could be an array of booleans, 
integers, doubles or strings.
Return Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The Data Table does not contain any data.FE_NO_MEMORY Can not allocate memory to  retrieve info from the Data Table
FE_BAD_TYPEThe selected column contains a type of data that is not supported by 
this method.
Remarks/Usage:The RowData variant that is return ed can be accessed as a two-dimensional array, where the first index 
represents the column, and the se cond the row ... RowData(column)(row)
Example:
GetRowValues   API-1039
This example retrieves all the data in th e table and echoes it to the Message Window
Sub Main 
Dim App As femap.model 
Set App = feFemap 

Dim r As femap.DataTable 
Set r = App.feDataTable 

Dim nd As Long 
Dim rd As Variant 

r.GetRowValues( -1, rr, nd, rd ) 
For i=0 To r.NumberOfRows-1 
   For c = 0 To nd-1 
   App.feAppMessage( FCM_NORMAL, "Row "+Str$(i)+" Column         "+Str$(c)+" = "+Str$(rd(c)(i)) ) 
   Next c 
Next i
End SubGetRowValues
(  numRowsOrAll, Rows, numData, RowData )
 API-1040  AddColumn
4.1.5.4  AddColumn
AddColumn
( bClear, bHidden, entityType, entitySetID, colTitle, colType, nRows, ID, Value, nNew-
ColumnID )
Description:This method creates a ne w column in the Data Table and adds data to it.
Input:BOOL bClear If True, all previously existin g data in the Data Table is deleted.
BOOL bHidden If True, the column is created hidden, if False, the column is visible.
INT4 entityTypeThe type of entities being shown in the Data Table. This needs to be 
the same for all columns. For more information on Entity Types refer 
to the table in Section 3.3.6, "Entity Types". 
INT4 entitySetIDThe Set ID associated with these values being added. Can be 0 to 
match any Set ID or use the default for new rows.
STRING colTitle The title for the column - must  be unique among all existing columns
INT4 colTypeThe type of column to create (0=Bool/Check Box, 1=Integer, 
2=Real, 3=String). Boolean arrays will create a column that is dis-
played as Check Boxes (checked on if True).
INT4 nRows The number of entries in the ID and Value arrays.
INT4 ID[0..nRows-1]The entity IDs associated with th e data in the corresponding location 
in “Value”. If a row with the same  ID already exists in the Data 
Table, the associated “Value” is ass igned to that row. If no row with 
that ID exists, a new row is creat ed with the current Model ID, the 
specified entitySetID, and this ID , and the new row is assigned the 
value.
V ARIANT ValueThis Variant contains an array with  the values to be assigned to the 
rows selected by the correspondin g entity IDs from “ID”. Depending 
on the option you specify in “colType”, the variant must contain either a Boolean, Integer, Double or String array. 
Output:
INT4 nNewColumnIDThe index of the column that was cr eated. This index is always based 
on the order the column was created,  not the visible location, no mat-
ter how VisibleColsOnly is set. If VisibleColsOnly=False, this num-ber can be used to access the column.
Return Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_SECURITY The Data Table is locked and can not be updated.
AddColumn   API-1041
FE_INV ALIDThe colTitle is invalid. It is either  zero length or matches an existing 
column.
FE_FAIL Unable to add column.FE_BAD_TYPE The Value A rray has an invalid type
Remarks/Usage:This method will automatically  create “Model ID”, “Set ID” and “ID”  columns in the Data Table if they 
do not exist - you should never atte mpt to create these columns yourself.
Example:AddColumn
( bClear, bHidden, entityType, entitySetID, colTitle, colType, nRows, ID, Value, nNew-
ColumnID )
 API-1042  AddColumn
Sub Main 
Dim App As femap.model 
Set App = feFemap 
Dim r As femap.DataTable 
Set r = App.feDataTable 
id = Array( 1, 7, 3, 17 ) 
i = Array( 45, 833, -23, 124 ) 
x = Array( 1.2, 4.56, 3.987E-6, -0.0023 ) 
c  = Array( True, False, False, True ) 
t = Array( "Abc", "Title 1", "++ XX ++", "" ) 
Dim newi As Long 
Dim newc As Long 
Dim newx As Long 
Dim newt As Long 

r.AddColumn( True, False, FT_ELEM, 0, "IntCol", FCT_INT, 4, id, 
i, newi ) 
r.AddColumn( False,  False, FT_ELEM, 0,"Check", FCT_BOOL, 4, id, 
c, newc ) 
r.AddColumn( False,  False, FT_ELEM, 0,"Column Title ", FCT_DOU-BLE, 4, id, x, newx ) 
r.AddColumn( False,  False, FT_ELEM, 0, "Names", FCT_STRING, 4, 
id, t, newt ) 
End SubAddColumn
( bClear, bHidden, entityType, entitySetID, colTitle, colType, nRows, ID, Value, nNew-ColumnID )

AddDataColumn   API-1043
4.1.5.5  AddDataColumn
AddDataColumn
( bHidden, colTitle, ColType, nRows, Rows, value, nNewColumnID )
Description:This method creates a new column and updates values in it by row index
Input:BOOL bHidden If True, the column is create d hidden. If False, the column is visible.
STRING colTitle The title for the column - must be unique for every column.
INT4 ColTypeThe type of column to create (0=BOOL/Check Box, 1=Integer, 
2=Real, 3=String). Boolean arrays will create a column that is dis-
played as Check Boxes (checked on if True).
INT4 nRows The number of entries in the ID and Value arrays.
INT4 Rows[0..nRows-1] The row indices of the rows to update.
V ARIANT ValueThis Variant contains an array with  the values to be assigned to the 
rows selected by the correspond ing indices from Rows. Depending 
on the option you specify in “ColType”, the variant must contain either a Boolean, Integer, Double or String array.
Output:
INT4 nNewColumnIDThe index of the column that was cr eated. This index is always based 
on the order the column was created,  not the visible location, no mat-
ter how the property VisibleColsOnly is set. If VisibleCol-sOnly=False, this number can be used to access the column.
Return Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_SECURITY The Data Table is locked and can not be updated.
FE_INV ALIDThe colTitle is invalid. It is either  zero length or matches an existing 
column.
FE_FAIL Unable to add column.FE_BAD_TYPE The Value Arra y has an invalid type.
FE_NOT_EXIST Data Table is currently empty.Remarks/Usage:NoneExample:
 API-1044  AddDataColumn
' === First, use FEMAP to load Data Table with Nodal Output Vec-
tors ===
Sub Main
    Dim App As femap.model
    Set App = feFemap()    Dim d As femap.DataTable
    Set d = App.feDataTable
    Dim numRows As Long, ModelID As Variant, setID As Variant, ID 
As Variant
    d.GetRowInfo( numRows, ModelID, setID, ID )    If numRows < 1 Then End
    Dim Rows() As Long
        ReDim Rows( numRows-1 )
    Dim values() As Variant
        ReDim values( numRows-1 )    Dim nCol As Long
    For i = 0 To numRows-1
        values(i) = i+1 + 1000        Rows(i) = i
    Next
    ' === Data Table must be populated beforehand ===    ' === Need unique title ===
    rc= d.AddDataColumn( False, "API Column",FCT_INT,          
numRows,Rows, values, nCol )
End SubAddDataColumn
( bHidden, colTitle, ColType, nRows, Rows, value, nNewColumnID )
UpdateColumnByID   API-1045
4.1.5.6  UpdateColumnByID
UpdateColumnByID
( nColumn, entitySetID, colType, nRows, ID, Value )
Description:This method updates a column  in the Data Table and adds data to it if selected IDs do not exist. Rows to 
update are selected by IDs
Input:INT4 nColumn Index of the column to update
INT4 entitySetIDThe Set ID associated with these values being updated. Can be 0 to 
match any Set ID or use the default for new rows.
INT4 colTypeThe type of data being updated (0=Bool/Check Box, 1=Integer, 
2=Real, 3=String). 
INT4 nRows The number of entries in the ID and Value arrays.
INT4 ID[0..nRows-1]The entity IDs associated with th e data in the corresponding location 
in “Value”. If a row with the same  ID already exists in the Data 
Table, the associated “Value” is ass igned to that row. If no row with 
that ID exists, a new row is creat ed with the current Model ID, the 
specified entitySetID, and this ID , and the new row is assigned the 
value.
V ARIANT ValueThis Variant contains an array with  the values to be assigned to the 
rows selected by the correspondin g entity IDs from “ID”. Depending 
on the option you specify in “colType”, the variant must contain either a Boolean, Integer, Double or String array. 
Output:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_SECURITY The Data Table is locked and can not be updated.FE_FAIL Unable to update column.FE_BAD_TYPE The Value A rray has an invalid type
Remarks/Usage:NoneExample:None
 API-1046  UpdateColumn
4.1.5.7  UpdateColumn
UpdateColumn
( nColumn, colType, nRows, Rows, Value )
Description:This method updates a column in the Data Table. Rows  are specified by row indices.
Input:INT4 nColumn Index of the column to update
INT4 colTypeThe type of data being updated (0=Bool/Check Box, 1=Integer, 
2=Real, 3=String). 
INT4 nRows The number of entries in the ID and Value arrays.INT4 Rows[0..nRows-1] The row indices of the rows to update.
V ARIANT ValueThis Variant contains an array with  the values to be assigned to the 
rows selected by the correspond ing indices from Rows. Depending 
on the option you specify in “colType”, the variant must contain 
either a Boolean, Integer, Double or String array. 
Output:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_SECURITY The Data Table is locked and can not be updated.FE_FAIL Unable to update column.FE_BAD_TYPE The Value A rray has an invalid type
Remarks/Usage:This method is similar to Update ColumnByID except that it cannot add additional rows to the table.
Example:None
AddEntityData   API-1047
4.1.5.8  AddEntityData
AddEntityData
( bClear, entityType, entitySetID, entityIDSet )
Description:This method adds entity data to the Data Table
Input:BOOL bClear If True, all previously existin g data in the Data Table is deleted.
INT4 entityTypeThe type of entities being added to  the Data Table. For more infor-
mation on Entity Types refer to the table in Section 3.3.6, "Entity 
Types". 
INT4 entitySetIDThe Set ID associated with these valu es being added. Can be 0 to  use 
the default Set ID.
INT4 entityIDSetThe ID of a Set object that contains  the IDs of the entities to add. If 
entityIDSet is negative, then just a single entity is added whose id is 
the absolute value of entityIDSet
Output:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_SECURITY The Data Table is locked and can not be updated.FE_FAIL Unable to add entitiesRemarks/Usage:NoneExample:The following routine adds all Plat e elements to the Data Table...
Sub Main 
Dim App As femap.model 
Set App = feFemap 
Dim r As femap.DataTable 
Set r = App.feDataTable 
Dim s As femap.Set 
Set s = App.feSet 
s.AddRule( FET_L_PLATE, FGD_ELEM_BYTYPE ) 
r.AddEntityData( True, FT_ELEM, 0, s.ID ) 
End Sub
 API-1048  AddOutputV2
4.1.5.9  AddOutputV2
AddOutputV2
( nOutputSet, nOutputVector, nNewColumnID )
Description:This method adds data from an Output Vector to a column in the Data Tabl e. This method replaces 
AddOutput. For more information see, Section 2.4, "Working with Output in FEMAP 2020.1 and 
above".
Input:INT4 nOutputSet The Output Set th at contains the data to add.
INT4 nOutputVector The ID of the Output Vector that contains the data to add.Output:INT4 nNewColumnID The column ID of the column that is created.
Return Code:
FE_NOT_A V AILABLEThe Data Table is not currently disp layed, or does not contain rows 
with Nodes/Elements.
FE_SECURITY The Data Table is locked and can not be updated.FE_NOT_EXIST The selected Output Set/Output Vector does not exist.FE_FAIL Unable to add entitiesRemarks/Usage:This method provides a simple way to add analysis results to the data  table, however the table must be 
preloaded with the nodes/e lements where you want to  retrieve the results. 
Only the specified Output Vector is  loaded. There are no options to also include results for other compo-
nents, plys, corners, etc...
The Data Table may contain results from different/ multiple models, however it will be loaded with 
results from the same Output Set/Output Vector in each respective model - ther e is no way using this 
method to choose different Output Sets for the different models.
Example:
AddMassProperties   API-1049
4.1.5.10  AddMassProperties
AddMassProperties
( void )
Description:Adds mass properties to the ex isting entities in the table
Input:NoneOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_SECURITY The Data Table is locked and can not be updated.FE_BAD_TYPE Invalid entity type or  no data in the Data Table
Remarks/Usage:This method simply calls  the “Add Mass Properties” command from the Data Table toolbar. The Data 
Table must contain one or more Curves, Surface s, Solids, Elements, Properties or Materials.
Example:None
 API-1050  AddElementChecks
4.1.5.11  AddElementChecks
AddElementChecks
( void )
Description:Adds Femap element checks to the existing entities in the tableInput:NoneOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_SECURITY The Data Table is locked and can not be updated.FE_BAD_TYPE Invalid entity type or  no data in the Data Table
Remarks/Usage:This method simply calls the “A dd Femap Element Checks” command from the Data Table toolbar. The 
Data Table must contain one or more Elements.
Example:None
AddNastranElementChecks   API-1051
4.1.5.12  AddNastranElementChecks
AddNastranElementChecks
( void )
Description:Adds NX Nastran elemen t checks to the existing entities in the table
Input:NoneOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_SECURITY The Data Table is locked and can not be updated.FE_BAD_TYPE Invalid entity type or  no data in the Data Table
Remarks/Usage:This method simply calls the “A dd Nastran Element Checks” command from the Data Table toolbar. 
The Data Table must contai n one or more Elements.
Example:None
 API-1052  AddMeshAssociativity
4.1.5.13  AddMeshAssociativity
AddMeshAssociativity
( void )
Description:Adds mesh associativity data to  the existing entities in the table
Input:NoneOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_SECURITY The Data Table is locked and can not be updated.FE_BAD_TYPE Invalid entity type or  no data in the Data Table
Remarks/Usage:This method simply calls the “A dd Mesh Associativity” command fro m the Data Table toolbar. The 
Data Table must contain one or more Points, Curves, Surfaces or Solids.
Example:None
SetTextColor   API-1053
4.1.5.14  SetTextColor
SetTextColor
( nColumn, numRows, Rows, nRed, nGreen, nBlue )
Description:Changes the color of the text displayed in  one or more rows in a selected column
Input:INT4 nColumn The index of the column to updateINT4 numRows The number of entries in th Rows arrayINT4 Rows[0..numRows-1] The in dices of the rows to update
INT4 nRed The Red level (0-255)INT4 nGreen The Green level (0-255)INT4 nBlue The Blue level (0-255)Output:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_FAIL Unable to update Data TableRemarks/Usage:NoneExample:None
 API-1054  SetBackgroundColor
4.1.5.15  SetBackgroundColor
SetBackgroundColor
( nColumn, numRows, Rows, nRed, nGreen, nBlue )
Description:Changes the color of the background displayed in one or more rows in a selected column
Input:INT4 nColumn The index of the column to updateINT4 numRows The number of entries in th Rows arrayINT4 Rows[0..numRows-1] The in dices of the rows to update
INT4 nRed The Red level (0-255)INT4 nGreen The Green level (0-255)INT4 nBlue The Blue level (0-255)Output:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_FAIL Unable to update Data TableRemarks/Usage:NoneExample:None
AddGroup   API-1055
4.1.6  DataTable Object Grouping Methods
There following methods are available to access and manipulate Data Table grouping.
4.1.6.1  AddGroup
AddGroup
( nColumn, bShowInGroupOnly, bSortAscending )
Description:This method updates the Data Ta ble to group by a selected column
Input:INT4 nColumn The index of a column to add to Grouping
BOOL bShowInGroupOnlyIf True, the column is removed from be ing visible in the table, and is 
only visible in grouping and the group headers. If False, the column 
is still used for grouping, but is also visible in the table.
BOOL bSortAscending True=Sort in Ascending order, False=Descending order
Output:
NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The selected column does not existRemarks/Usage:This method can be used  multiple times to add additional column s to the grouping order. If a column 
was already in the grouping order it is moved to the lowest level. Call ing this method will automatically 
show the GroupBy header. You can call “ShowGroup” to hide it, if necessary.
Example:None
 API-1056  ClearGroup
4.1.6.2  ClearGroup
ClearGroup
( void )
Description:This method removes any grouping orderInput:NoneOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.Remarks/Usage:NoneExample:None
GetGroup   API-1057
4.1.6.3  GetGroup
GetGroup
( numColumns, Columns )
Description:This method retrieves the indices of all columns used for grouping
Input:NoneOutput:INT4 numColumns The number of columns in the grouping orderINT4 Columns[0..numCol-
umns-1]The indices of the grouping columns
Return Code:
FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST No grouping columns exist
FE_BAD_TYPEVisibleColsOnly is True. This method is only available when Visi-
bleColsOnly is False because grouped/sorted columns do not need to 
be visible.
Remarks/Usage:NoneExample:None
 API-1058  ShowGroup
4.1.6.4  ShowGroup
ShowGroup
( bVisible )
Description:This method shows and hides the “Group By” headerInput:BOOL bVisible True = Show Header, False = Hide HeaderOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.Remarks/Usage:NoneExample:None
AddSort   API-1059
4.1.7  DataTable Object Sorting Methods
There following methods are available to access and manipulate Data Table sorting.
4.1.7.1  AddSort
AddSort
( nColumn,  bSortAscending )
Description:This method updates the Data Table to sort by a selected columnInput:INT4 nColumn The index of a column to sort byBOOL bSortAscending True=Sort in Ascending order, False=Descending orderOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST The selected column does not existRemarks/Usage:This method can be used multiple times to add additio nal columns to the sorting order. If a column was 
already in the sorting order it is  moved to the lowest level. 
Example:None
 API-1060  ClearSort
4.1.7.2  ClearSort
ClearSort
( void )
Description:This method remove s any sorting order
Input:NoneOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.Remarks/Usage:NoneExample:None
GetSort   API-1061
4.1.7.3  GetSort
GetSort
( numColumns, Columns )
Description:This method retrieves the indices of all columns used for sorting
Input:NoneOutput:INT4 numColumns The number of columns in the sorting orderINT4 Columns[0..numCol-
umns-1]The indices of the sorting columns
Return Code:
FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST No sorting columns exist
FE_BAD_TYPEVisibleColsOnly is True. This method is only available when Visi-
bleColsOnly is False because grouped/sorted columns do not need to 
be visible.
Remarks/Usage:NoneExample:None
 API-1062  AddSelection
4.1.8  DataTable Object Selection Methods
There following methods are available to access and manipulate Data Table selection.
4.1.8.1  AddSelection
AddSelection
( numRows, Rows, bSelect )
Description:This method updates the Data Table to select/deselect one or more rows
Input:INT4 numRows The number of entries in the Rows arrayINT4 Rows[0..numRows-1] The indic es of the rows to select/deselect
BOOL bSelect True = Select, False = Deselect RowsOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.Remarks/Usage:This method can be used multiple times to add additio nal rows to the selection.
Example:None
ClearSelection   API-1063
4.1.8.2  ClearSelection
ClearSelection
( void )
Description:This method removes selection from all rows
Input:NoneOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.Remarks/Usage:NoneExample:None
 API-1064  GetSelection
4.1.8.3  GetSelection
GetSelection
( numRows, Rows )
Description:This method retrieves the indices of all rows that are selectedInput:NoneOutput:INT4 numRows The number of  rows in the selection
INT4 Rows[0..numRows-1] The indices of the selected rows
Return Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.Remarks/Usage:NoneExample:None
Lock   API-1065
4.1.9  DataTable Object Other Methods
There following methods are availa ble to provide access to other functionality in the Data Table.
4.1.9.1  Lock
Lock
( bLock )
Description:This method Locks or Unlocks the Da ta Table to allow it to be updated
Input:BOOL bLock True = Lock, False = Unlock the Data TableOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.Remarks/Usage:NoneExample:None
 API-1066  Copy
4.1.9.2  Copy
Copy
( bCopyAll )
Description:This method copies the contents of the Data Table to the clipboard
Input:
BOOL bCopyAllTrue = Copy entire Data Table, False = Copy only selected rows (and 
header)
Output:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.Remarks/Usage:NoneExample:None
Save   API-1067
4.1.9.3  Save
Save
( bCopyAll, fName, nFormat )
Description:This method copies th e contents of the Data Table to a file.
Input:
BOOL bCopyAllTrue = Copy entire Data Table, False = Copy only selected rows (and 
header)
STRING fName The name of the file that you want to create
INT4 nFormatThe format that you want to u se when creating the file (0=Tab 
Delimitted Text, 1=Comma-Separated Text, 2=Rich Text Format - 
RTF)
Output:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.Remarks/Usage:NoneExample:None
 API-1068  Clear
4.1.9.4  Clear
Clear
( void )
Description:This method clears the co ntents of the Data Table
Input:NoneOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_SECURITY The Data Table is locked and can not be updated.Remarks/Usage:NoneExample:None
DeleteRows   API-1069
4.1.9.5  DeleteRows
DeleteRows
( numRows, Rows )
Description:This method deletes specifie d rows from the Data Table
Input:INT4 numRows The number of entries in the Rows arrayINT4 Rows[0..numRows-1] The in dices of the rows to delete
Output:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_SECURITY The Data Table is locked and can not be updated.Remarks/Usage:NoneExample:None
 API-1070  Show
4.1.9.6  Show
Show
( bShowAll )
Description:This method shows (dra ws) the specified conten ts of the Data Table 
Input:BOOL bShowAll True = Show all visible Rows, False = Show only selected rowsOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.Remarks/Usage:NoneExample:None
Print   API-1071
4.1.9.7  Print
Print
( void )
Description:This method prints the visible contents of the Data Table Input:NoneOutput:NoneReturn Code:FE_NOT_A V AILABLE The Data Table is not currently displayed.FE_NOT_EXIST There are no rows in the Data TableRemarks/Usage:NoneExample:None
 API-1072  
4.2  Element Quality Objects
The Element Quality object provides access to the Element Quality checks available in Femap. It 
is not a model entity. 
Use the feElementQuality method of the FEMAP Application object  to access the Element Quality 
object.
4.2.1  Element Quality Object Properties
Property Description
Femap Element ChecksBOOL AspectRatioOn If True, the aspect ratio check is performed.REAL8 AspectRatioLimit Limit for aspect ratio check.
BOOL TaperOn If True, element taper is checked.REAL8 TaperLimit Limit for taper check.BOOL AlternateTaperOn If True, the alternate element taper check is performed.REAL8 AlternateTaperLimit Lim it for alternate taper check.
BOOL InternalAngleOn If True, the elemen t internal angle check is performed.
REAL8 InternalAngleLimit Lim it for internal angle check.
BOOL SkewOn If True, the element skew check is performed.REAL8 SkewLimit Limit for skew check.BOOL WarpingOn If True, the elem ent warping check is performed.
REAL8 WarpingLimit Lim it for warping check.
BOOL NastranWarpingOn If True, the Nastran warping check is performed.REAL8 NastranWarpingLimit Limit for nastran warping check.BOOL TetCollapseOn If True, tetrahedra l elements are checked for collapse.
REAL8 TetCollapseLimit Limit for tet collapse check.BOOL JacobianOn If True, checks element Jacobian
REAL8 JacobianLimit Lim it for Jacobian check.
BOOL CombinedOn If True, checks for combined element distortion factor
REAL8 CombinedLimit Limit for combined check.BOOL ExplicitTimeStepOn If True, check s for Explicit Time Step factors
REAL8 ExplicitTimeStepLimit Limit for explicit timestep check.NX Nastran Element Checks
   API-1073
BOOL NastranQuadSkewOn If Tr ue, checks element QUAD SKEW
REAL8 NastranQuadSkewLimit Limit for QUAD SKEW check.BOOL NastranQuadTaperOn If Tr ue, checks element QUAD TAPER
REAL8 NastranQuadTaperLimit Limit for QUAD TAPER check.BOOL NastranQuadWarpOn If True, checks element QUAD WARPREAL8 NastranQuadWarpLimit Limit for QUAD WARP check.BOOL NastranQuadIAMinOn If Tr ue, checks element QUAD IAMIN
REAL8 NastranQuadIAMinLimit Limit for QUAD IAMIN check.BOOL NastranQuadAROn If True, check s element QUAD AR (Aspect Ratio)
REAL8 NastranQuadARLimit Limit for QUAD AR (Aspect Ration) check.BOOL NastranQuadIAMaxOn If Tr ue, checks element QUAD IAMAX
REAL8 NastranQuadIAMaxLimit Limit for QUAD IAMAX check.BOOL NastranTriaSkewOn If True, checks element TRIA SKEWREAL8 NastranTriaSkewLimit Limit for TRIA SKEW check.BOOL NastranTriaIAMaxOn If True , checks element TRIA IAMAX
REAL8 NastranTriaIAMaxLimit L imit for TRIA IAMAX check.
BOOL NastranTriaAROn If True, checks element TRIA AR (Aspect Ratio)REAL8 NastranTriaARLimit Limit fo r TRIA AR (Aspect Ratio) check.
BOOL NastranTriaEPLROn If True, checks element TRIA EPLRREAL8 NastranTriaEPLRLimit Limit for TRIA EPLR check.BOOL NastranTetraAROn If True, checks element TETRA ARREAL8 NastranTetraARLimit Limit for TETRA AR check.BOOL NastranTetraEPLROn If True, checks element TETRA EPLRREAL8 NastranTetraEPLRLimit Limit for TETRA EPLR check.BOOL NastranTetraDetJOn If Tr ue, checks element TETRA DETJ
REAL8 NastranTetraDetJLimit Limit for TETRA DETJ check.BOOL NastranTetraEPIAOn If True, checks element TETRA EPIAREAL8 NastranTetraEPIALimit Limit for TETRA EPIA check.BOOL NastranHexAROn If Tr ue, checks element HEX ARProperty Description
 API-1074  
REAL8 NastranHexARLimit Limit for HEX AR check.
BOOL NastranHexEPLROn If Tr ue, checks element HEX EPLR
REAL8 NastranHexEPLRLimit Limit for HEX EPLR check.BOOL NastranHexDetJOn If Tr ue, checks element HEX DETJ
REAL8 NastranHexDetJLimit Limit for HEX DETJ check.BOOL NastranHexEPIAOn If Tr ue, checks element HEX EPIA
REAL8 NastranHexEPIALimit Limit for HEX EPIA check.BOOL NastranHexWarpOn If Tr ue, checks element HEX WARP
REAL8 NastranHexWarpLimit Limit for HEX WARP check.BOOL NastranPenAROn If True, checks element PENTA ARREAL8 NastranPenARLimit Limit for PENTA AR check.BOOL NastranPenEPLROn If True, checks element PENTA EPLRREAL8 NastranPenEPLRLimit Limit for PENTA EPLR check.BOOL NastranPenDetJOn If True, checks element PENTA DETJREAL8 NastranPenDetJLimit Limit for PENTA DETJ check.BOOL NastranPenEPIAOn If True, checks element PENTA EPIAREAL8 NastranPenEPIALimit Limit for PENTA EPIA check.BOOL NastranPenWarpOn If True, checks element PENTA WARPREAL8 NastranPenWarpLimit Limit for PENTA WARP check.BOOL NastranPyrAROn If True, checks element PYR ARREAL8 NastranPyrARLimit Limit for PYR AR check.BOOL NastranPyrEPLROn If True, checks element PYR EPLRREAL8 NastranPyrEPLRLimit Limit for PYR EPLR check.BOOL NastranPyrDetJOn If True, checks element PYR DETJREAL8 NastranPyrDetJLimit Limit for PYR DETJ check.BOOL NastranPyrEPIAOn If True, checks element PYR EPIAREAL8 NastranPyrEPIALimit Limit for PYR EPIA check.BOOL NastranPyrWarpOn If True, checks element PYR WARPREAL8 NastranPyrWarpLimit Limit for PYR WARP check.Property Description
Clear   API-1075
4.2.2  Element Quality Methods
There following methods are available.
4.2.2.1  Clear
Clear
( void )
Description:This method resets all check flags and clears all quality limit values.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:
 API-1076  SetModelDefaults
4.2.2.2  SetModelDefaults
SetModelDefaults
( void )
Description:This method update the qu ality flags and limit values of the Model with the values stored in the current 
Quality Object properties
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:
Example:
GetModelDefaults   API-1077
4.2.2.3  GetModelDefaults
GetModelDefaults
( void )
Description:This method loads the quality fl ags and limit values from the Femap model into the current Quality 
Object.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:
Example:
 API-1078  CheckQuality
4.2.2.4  CheckQuality
CheckQuality
( nElemSet, bList, bGroup )
Description:This function checks a set of elements to see if a ny of them are distorted ba sed on the quality flags and 
limit values defined in the Qua lity Object properties for the Fe map Element Checks. A Femap Set 
object is returned filled with the element IDs that failed the selected quality checks.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
BOOL bListIf True, distorted elements are listed in the Messages and Lists win-
dow.
BOOL bGroup If True, a group is made of the distorted elements.Output:NoneReturn Code:The Set object is returned in 
place of the return code. 
Remarks/Usage:This function is just like the Tools, Check, Di stortion command when using the Femap tab. The checks 
performed and the limit values ar e identical to that command.
Example:
CheckNastranQuality   API-1079
4.2.2.5  CheckNastranQuality
CheckNastranQuality
( nElemSet, bList, bGroup )
Description:This function checks a set of elements to see if a ny of them are distorted ba sed on the quality flags and 
limit values defined in the Quality Object properties for the NX Nastran Element Checks. A Femap Set 
object is returned filled with the element IDs that failed the selected quality checks.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
BOOL bListIf True, distorted elements are listed in the Messages and Lists win-
dow.
BOOL bGroup If True, a group is made of the distorted elements.Output:NoneReturn Code:The Set object is returned in 
place of the return code. 
Remarks/Usage:This function is just like the Tools, Check, Di stortion command when usin g the NX Nastran tab. The 
checks performed and the limit values  are identical to that command.
Example:
 API-1080  GetAspectRatio
4.2.2.6  GetAspectRatio
GetAspectRatio
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value. Return Code:NoneRemarks/Usage:
Example:
AspectRatio   API-1081
4.2.2.7  AspectRatio
AspectRatio
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:Once you use this method you can use the returned Sort object to sort the elements by quality and find 
the worst ones.
Example:
 API-1082  GetTaper
4.2.2.8  GetTaper
GetTaper
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
Taper   API-1083
4.2.2.9  Taper
Taper
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1084  GetAlternateTaper
4.2.2.10  GetAlternateTaper
GetAlternateTaper
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
AlternateTaper   API-1085
4.2.2.11  AlternateTaper
AlternateTaper
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1086  GetInternalAngle
4.2.2.12  GetInternalAngle
GetInternalAngle
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
InternalAngle   API-1087
4.2.2.13  InternalAngle
InternalAngle
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1088  GetSkew
4.2.2.14  GetSkew
GetSkew
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
Skew   API-1089
4.2.2.15  Skew
Skew
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1090  GetWarping
4.2.2.16  GetWarping
GetWarping
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
Warping   API-1091
4.2.2.17  Warping
Warping
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1092  GetNastranWarping
4.2.2.18  GetNastranWarping
GetNastranWarping
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranWarping   API-1093
4.2.2.19  NastranWarping
NastranWarping
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1094  GetTetCollapse
4.2.2.20  GetTetCollapse
GetTetCollapse
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
TetCollapse   API-1095
4.2.2.21  TetCollapse
TetCollapse
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1096  GetJacobian
4.2.2.22  GetJacobian
GetJacobian
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
Jacobian   API-1097
4.2.2.23  Jacobian
Jacobian
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1098  GetCombined
4.2.2.24  GetCombined
GetCombined
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
Combined   API-1099
4.2.2.25  Combined
Combined
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1100  GetExplicitTimeStep
4.2.2.26  GetExplicitTimeStep
GetExplicitTimeStep
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
ExplicitTimeStep   API-1101
4.2.2.27  ExplicitTimeStep
ExplicitTimeStep
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1102  GetNastranQuadSkew
4.2.2.28  GetNastranQuadSkew
GetNastranQuadSkew
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranQuadSkew   API-1103
4.2.2.29  NastranQuadSkew
NastranQuadSkew
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1104  GetNastranQuadTaper
4.2.2.30  GetNastranQuadTaper
GetNastranQuadTaper
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranQuadTaper   API-1105
4.2.2.31  NastranQuadTaper
NastranQuadTaper
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1106  GetNastranQuadWarp
4.2.2.32  GetNastranQuadWarp
GetNastranQuadWarp
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranQuadWarp   API-1107
4.2.2.33  NastranQuadWarp
NastranQuadWarp
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1108  GetNastranQuadIAMin
4.2.2.34  GetNastranQuadIAMin
GetNastranQuadIAMin
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranQuadIAMin   API-1109
4.2.2.35  NastranQuadIAMin
NastranQuadIAMin
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1110  GetNastranQuadAR
4.2.2.36  GetNastranQuadAR
GetNastranQuadAR
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranQuadAR   API-1111
4.2.2.37  NastranQuadAR
NastranQuadAR
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1112  GetNastranQuadIAMax
4.2.2.38  GetNastranQuadIAMax
GetNastranQuadIAMax
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranQuadIAMax   API-1113
4.2.2.39  NastranQuadIAMax
NastranQuadIAMax
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1114  GetNastranTriaSkew
4.2.2.40  GetNastranTriaSkew
GetNastranTriaSkew
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranTriaSkew   API-1115
4.2.2.41  NastranTriaSkew
NastranTriaSkew
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1116  GetNastranTriaIAMax
4.2.2.42  GetNastranTriaIAMax
GetNastranTriaIAMax
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranTriaIAMax   API-1117
4.2.2.43  NastranTriaIAMax
NastranTriaIAMax
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1118  GetNastranTriaAR
4.2.2.44  GetNastranTriaAR
GetNastranTriaAR
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranTriaAR   API-1119
4.2.2.45  NastranTriaAR
NastranTriaAR
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1120  GetNastranTriaEPLR
4.2.2.46  GetNastranTriaEPLR
GetNastranTriaEPLR
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranTriaEPLR   API-1121
4.2.2.47  NastranTriaEPLR
NastranTriaEPLR
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1122  GetNastranTetraAR
4.2.2.48  GetNastranTetraAR
GetNastranTetraAR
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranTetraAR   API-1123
4.2.2.49  NastranTetraAR
NastranTetraAR
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1124  GetNastranTetraEPLR
4.2.2.50  GetNastranTetraEPLR
GetNastranTetraEPLR
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranTetraEPLR   API-1125
4.2.2.51  NastranTetraEPLR
NastranTetraEPLR
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1126  GetNastranTetraDetJ
4.2.2.52  GetNastranTetraDetJ
GetNastranTetraDetJ
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranTetraDetJ   API-1127
4.2.2.53  NastranTetraDetJ
NastranTetraDetJ
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1128  GetNastranTetraEPIA
4.2.2.54  GetNastranTetraEPIA
GetNastranTetraEPIA
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranTetraEPIA   API-1129
4.2.2.55  NastranTetraEPIA
NastranTetraEPIA
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1130  GetNastranHexAR
4.2.2.56  GetNastranHexAR
GetNastranHexAR
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranHexAR   API-1131
4.2.2.57  NastranHexAR
NastranHexAR
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1132  GetNastranHexEPLR
4.2.2.58  GetNastranHexEPLR
GetNastranHexEPLR
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranHexEPLR   API-1133
4.2.2.59  NastranHexEPLR
NastranHexEPLR
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1134  GetNastranHexDetJ
4.2.2.60  GetNastranHexDetJ
GetNastranHexDetJ
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranHexDetJ   API-1135
4.2.2.61  NastranHexDetJ
NastranHexDetJ
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1136  GetNastranHexEPIA
4.2.2.62  GetNastranHexEPIA
GetNastranHexEPIA
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranHexEPIA   API-1137
4.2.2.63  NastranHexEPIA
NastranHexEPIA
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1138  GetNastranHexWarp
4.2.2.64  GetNastranHexWarp
GetNastranHexWarp
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranHexWarp   API-1139
4.2.2.65  NastranHexWarp
NastranHexWarp
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1140  GetNastranPenAR
4.2.2.66  GetNastranPenAR
GetNastranPenAR
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranPenAR   API-1141
4.2.2.67  NastranPenAR
NastranPenAR
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1142  GetNastranPenEPLR
4.2.2.68  GetNastranPenEPLR
GetNastranPenEPLR
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranPenEPLR   API-1143
4.2.2.69  NastranPenEPLR
NastranPenEPLR
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1144  GetNastranPenDetJ
4.2.2.70  GetNastranPenDetJ
GetNastranPenDetJ
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranPenDetJ   API-1145
4.2.2.71  NastranPenDetJ
NastranPenDetJ
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1146  GetNastranPenEPIA
4.2.2.72  GetNastranPenEPIA
GetNastranPenEPIA
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranPenEPIA   API-1147
4.2.2.73  NastranPenEPIA
NastranPenEPIA
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1148  GetNastranPenWarp
4.2.2.74  GetNastranPenWarp
GetNastranPenWarp
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranPenWarp   API-1149
4.2.2.75  NastranPenWarp
NastranPenWarp
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1150  GetNastranPyrAR
4.2.2.76  GetNastranPyrAR
GetNastranPyrAR
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranPyrAR   API-1151
4.2.2.77  NastranPyrAR
NastranPyrAR
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1152  GetNastranPyrEPLR
4.2.2.78  GetNastranPyrEPLR
GetNastranPyrEPLR
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranPyrEPLR   API-1153
4.2.2.79  NastranPyrEPLR
NastranPyrEPLR
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1154  GetNastranPyrDetJ
4.2.2.80  GetNastranPyrDetJ
GetNastranPyrDetJ
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranPyrDetJ   API-1155
4.2.2.81  NastranPyrDetJ
NastranPyrDetJ
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1156  GetNastranPyrEPIA
4.2.2.82  GetNastranPyrEPIA
GetNastranPyrEPIA
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranPyrEPIA   API-1157
4.2.2.83  NastranPyrEPIA
NastranPyrEPIA
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1158  GetNastranPyrWarp
4.2.2.84  GetNastranPyrWarp
GetNastranPyrWarp
( nElemID, pdValue )
Description:This method calculates and returns the quality value for the desired element.
Input:INT4 nElemID ID of element to check.Output:REAL8 pdValue Quality value.Return Code:NoneRemarks/Usage:
Example:
NastranPyrWarp   API-1159
4.2.2.85  NastranPyrWarp
NastranPyrWarp
( nElemSet, dLimitVal )
Description:This method takes a element or set of elements and checks thei r quality against a limit value. A Femap 
Sort object is returned that contains the elem ents that have failed the check and their quality.
Input:
INT4 nElemSetThe ID of a set that contains the ID s of elements to check. Specify a 
negative number to check a single element.
REAL8 dLimitVal Limit value for check.Output:None
Return Code:
NoneRemarks/Usage:
Example:
 API-1160  
4.3  Geometry Preparat ion and Meshing Objects
The Geometry Preparation and Meshing object pr ovides the functionality of  the Geometry Prepa-
ration command. Currently this is limited to preparing geometry and mesh sizing. 
Use the feMesher method of the FEMAP Applica tion object to access the Geometry Preparation 
and Meshing object.
NOTE: All properties that are shown in gray  are not yet implemented. These properties 
should not be used. They may have unpredictable results and may be changed prior to 
their final implementation.
4.3.1  Geometry Preparation and Meshing Object Properties
Property Description
BOOL PrepareGeometryTurn Geometry Preparation On/Off for the Apply() and 
UI() methods.
BOOL MeshSizingTurn Mesh Sizing On/Off fo r the Apply() and UI() meth-
ods.
BOOL Meshing Turn Meshing On/Off for the Apply() and UI() methods.
BOOL RemovePreviousOnlyIf True, the Apply() method wi ll simply remove previous 
Geometry Preparation regardless of other settings.
BOOL SilentIf Geometry Preparation is attempted on an already 
meshed solid, if this property  is True the existing mesh 
will be deleted automatically, otherwise the user will be 
asked to confirm de letion of the mesh. 
BOOL SyncSizesOnly used for the UI() meth od. If True, the geometry 
preparation size and the mesh size will always be the 
same.
Geometry Preparation OptionsREAL8 PrepareSize The size us ed to prepare the geometry.
REAL8 NarrowSizePctThe percentage of the PrepareSize which is used to detect 
narrow regions of surfaces. (Default=10%)
REAL8 CurveSuppressPctThe percentage of the PrepareSize below which curves 
are considered to be very short and are suppressed. 
(Default=5%)
REAL8 NarrowAngleThe angle in degrees below which the corner of a surface 
is considered to be narrow and a candidate for removal.
   API-1161
REAL8 FeatureEdgeAngleThe angle in degrees between the normals of two adja-
cent surfaces at a given curve.  Angles above the specified 
value are considered to be important “features” and 
attempts are made to preserve these edges. In some cases however surfaces may still be co mbined across edges that 
exceed this angle.
REAL8 CombinedCurveAngleThe angle in degrees between the ending tangents of two 
curves that meet at a comm on point. If the curves meet 
smoothly (tangent to each other), they would have a 0.0 
value. All angles below the specified value are candidates 
for creating combined curves  during Geometry Prepara-
tion.
BOOL GeometryCleanupIf True, initial processing is  done during Geometry 
Preparation to remove self-i ntersections, discontinuities 
and other numerical problems in the geometry.
BOOL SuppressV oidsIf True, any internal void regi ons in solids being prepared 
are suppressed - regardless of size.
BOOL DetectClosePointsIf True, extra processing is done to detect and improve 
locations in surfaces which may only be narrow at one 
point rather than between edges.
BOOL CutSliversIf True, as narrow regions (slivers) are being combined, 
they may be further cut into multiple pieces to better join 
with adjacent surfaces.
BOOL ProcessBlendsIf True, surfaces that are part of blend chains and which 
are short along the length of the chain are combined with 
neighboring surfaces in the chain to make better meshing areas.
BOOL CombineSmallSurfacesIf True, very small surfaces ar e combined with neighbor-
ing surfaces just like any larger sliver/narrow surface. If 
False, very small surfaces ar e simply suppressed along 
with all of their curves.
BOOL RemovePreviousPrepIf True and the solid has previously been through Geome-
try Preparation, that previous preparation is removed 
prior to processing it again.
BOOL DeletePreviousMeshIf True, any previous mesh on the part is deleted prior to 
Geometry Preparation.
INT4 FixedGroupIDThe ID of a Group that cont ains Points, Curves and Sur-
faces to ignore during Geometry  Preparation. This is used 
to prevent Geometry Prepar ation from modifying critical 
areas of the model.Property Description
 API-1162  
Primary Mesh Sizing Options
REAL8 MeshSize The size used for Mesh Sizing
REAL8 InteriorGrowthFactorA multiplier of the Mesh Size used to specify growth of 
the mesh interior to the surface edges
INT4 LengthBasedSizingThe type of mesh sizing to apply. (0=Parametric, 1=Equal 
Length, 2=Parametric/Equal Length)
Additional Mesh Sizing OptionsBOOL MinElemOnEdgeOn If True, MinElemOnEdge is used.BOOL MaxAngleToleranceOn If True , MaxAngleTolerance is used.
BOOL MaxElemSmallFeatureOn If True, MaxElemSmallFeature is used.BOOL MaxPctSmallFeatureOn If True, MaxPctSmallFeature is used.BOOL VertexAspectRatioOn If True, VertexAspectRatio is used.
BOOL MappedMeshingRefinementIf True, additional modifications are done to the mesh 
sizes on a surface that favor mapped meshing. This does 
not guarantee that mapped meshing sizes will be created. If you must have a mapped mesh, you need to set that 
approach on the surface before you size.
BOOL SuppressShortEdgesPctOn If True , SuppressShortEdgesPct is used.
BOOL AutoBoundarySmallSurfPctOn If True , AutoBoundarySmallSurfPct is used.
INT4 MinElemOnEdgeThe minimum number of elements to mesh along any 
edge. Only used if Mi nElemOnEdgeOn is True.
REAL8 MaxAngleToleranceThe maximum angle tolerance between the geometry tan-
gent vector and the vector connecting consecutive mesh 
locations along the curves. Ad ditional mesh locations are 
added along the curves to make sure this criterion is satis-
fied.
INT4 MaxElemSmallFeatureThe maximum number of elements on any feature that is 
identified as small (depends on MaxPctSmallFeature).
REAL8 MaxPctSmallFeatureThe Percentage of the MeshSi ze that determines whether 
a feature is small.
REAL8 VertexAspectRatioUsed to adjust the mesh sizes at vertices that connect both 
short and long edges. If used, mesh sizes at vertices are 
adjusted so that the ratio of the length of the longest ele-
ment to the shortest element at  a vertex is within the spec-
ified limit.Property Description
   API-1163
REAL8 SuppressShortEdgesPctEdges that are shorter than th is percentage of MeshSize 
are suppressed during Mesh Sizing.
REAL8 AutoBoundarySmallSurfPctSurfaces that are smaller than  this percenta ge of Mesh-
Size are combined with ne ighboring surfaces during 
Mesh Sizing.
BOOL RefinementRatioOn If True, RefinementRatio is used.
REAL8 RefinementRatioThe curvature-based mesh re finement ratio. Adjusts the 
mesh sizes along curves in areas of high curvature. 
BOOL RefineSurfaceMeshSet to True to also consider curvature requirements when 
sizing the interior of the mesh. You must specify a non-
zero refineRatio, or this option will be ignored.
BOOL AdjacentSurfaceMatchingSet to True to automatical ly find adjacent surfaces 
between multiple solids that you are sizing. The matched 
surfaces will automatically have a “Linked” approach 
defined.
BOOL RemovePreviousSlavingSet to True to remove any previous “Linked” approaches 
on the surfaces of the solids that you are sizing.
BOOL AdjustColorsSet to True if you want to change the surface colors to 
indicate the status and success of the mesh sizing. This is 
especially important when sizing for hex meshing.
BOOL SkipSizingOnSlavedIf True any surfaces with slaved approaches are not re-
sized.
Meshing OptionsINT4 MeshType Type of mesh to create (0=Tri, 1=Quad, 2=Tet)BOOL MidsideNodes If True, midside nodes will be added to the mesh
BOOL AutoSelectTriMesherIf True, the type of Tri mesh er to use will be automati-
cally selected based on th e individual surfaces being 
meshed. If False, the mesher selected by TriMesher is 
used.
INT4 TriMesherIf AutoSelectTriMesher is False,  then this selects the tri 
mesher to use (1=Subdivision, 2=Fast Tri, 3=3D Tri)
BOOL MappedMeshingAllowed If True , mapped meshing is allowed
INT4 NodeMergeOptionIf tet meshing, 0=No node merging, 1=Merge new nodes, 
2=Merge Nodes into Mode l, 3=Merge All nodesProperty Description
 API-1164  
REAL8 TetGrowthRatioThe tetrahedral growth factor. Numbers larger than 1.0 
mean that the elements on th e inside of the solid will be 
larger than those on the outside.  It is usually best to use a 
factor slightly larger than 1.0. Default=1.1
REAL8 InitialSizeRatioAnother growth factor for tet meshing. Not normally 
used. Default=0.5001
BOOL AskAlreadyMeshedIf True, the user is asked to confirm the action when 
meshing surfaces that are already meshed.
Surface Meshing OptionsBOOL PreV10Meshing If True, chooses the PreV10 meshers. Normally False.
BOOL MidsideMoveToGeometryIf True, midside nodes are moved toward the geometry 
(surfaces/curves) being meshed. If False, they are placed at the middle of the element edge.
BOOL MidsideMaxDistortionAngleOnIf True, movement of midside nodes toward the geometry 
is limited by the MidsideMaxDistortionAngle. If False, 
midside nodes are moved to the geometry regardless of 
distortion to the element edges.
REAL8 MidsideMaxDistortionAngleThe maximum angle formed by  the edge of the element 
as the midside nodes are proj ected onto the geometry.  
Only used if MidsideMoveToGeometry and Midside-
MaxDistortionAngleOn are both True.
BOOL ConnectEdgeNodesOnIf True, ConnectEdgeNodes is used to connect a surface 
mesh to any existing nodes that have already been created 
on the surface edges
REAL8 ConnectEdgeNodesThe tolerance used to find and connect to nodes that have 
already been meshed on surface edges.
BOOL SmoothingLaplacianIf True, Laplacian smoothing is used. If False, Centroidal 
smoothing is used.
INT4 SmoothingIterationsThe number of smoothing iterations to perform. Set to 0 
to skip smoothing.
REAL8 SmoothingToleranceThe smoothing tolerance. Sm oothing will stop if node 
movement during a smoothing pass falls below this toler-
ance.
INT4 OffsetMeshModeAllows creation of offsets on planar elements  to move the 
centerline of the element away from the nodes. The spec-
ified location is offset by OffsetMeshDistance 0=Center-
line, 1=Top Face, 2=Bottom Face 
REAL8 OffsetMeshDistanceThe distance to offset elemen ts from the nodes. Specify 
0.0 to keep the centerline of  the element at the nodes.Property Description
   API-1165
REAL8 MapMaxAngleDeviationMaximum angle in degrees that the corner of a mapped 
mesh can deviate and still produce a mapped mesh.
REAL8 MapMinCornerAngleThe minimum corner angle ab ove which a surface can be 
map meshed.
BOOL MapEqualSidesOnlyIf True, a mapped mesh will be produced only if the 
opposite sides of the surface have an equal number of ele-ments along their edges. If Fal se, the number of elements 
along one edge direction must match, but the other can 
vary somewhat and still produce a mapped mesh.
BOOL MapSubdivisionsIf True, and if the Subdivisio n mesher is used, then por-
tions of a surface can be ma p meshed during the subdivi-
sion process.
BOOL MapSplitQuadMapIf True and if Tri meshing, th en a Quad mesh is produced 
and split into triangles.
BOOL MapAlternateBiasIf True and if Tri meshing, then the mesher will attempt 
to alternate the direction of triangles that are side-by-side to eliminate biasing of the mesh.
BOOL MapRightBiasWhen Tri meshing, setting to True or False reverses the 
diagonals of the first two triangles.
BOOL PostMeshingCleanupIf True, additional processing is performed on the com-
pleted surface mesh to improve element quality.
INT4 QuadEdgeLayersWhen Quad meshing, this prov ides the ability to “pave” a 
number of element layers around the surface edges. Must 
be set to 0=Off, 1, 2 or 3
REAL8 CutQuadDeviationAngleIf Quad meshing, quads with corner angles that deviate 
from 90 deg by more than th is amount are split into trian-
gles.
INT4 MinElemBetweenBoundaryFor the Subdivision mesher, this  attempts to insure a min-
imum number of elements between opposite surface 
edges.
REAL8 MaxElemAspectRatioFor the Subdivision mesher, co ntrols the interior of the 
mesh by adding more or le ss elements to attempt to 
improve aspect ratio.
BOOL QuickCutBoundaryOnFor the Subdivision mesher, setting this to True will 
reduce the number of possibl e subdivision combinations 
that are considered, poten tially reducing meshing time.Property Description
 API-1166  
INT4 QuickCutMaxNodesIf QuickCutBoundaryOn=True and using the Subdivision 
mesher, this is the maximum number of nodes on the 
boundary of a surface subdiv ision where the quicker sub-
division methods will be used.
BOOL AttributePropOnlyIf True, and the surface has m eshing attributes, then only 
the attribute property will be  used and all other options 
will use their current settings . If False, all options will 
come from the surface meshing attributes.
Tet Meshing Options
BOOL TetStatusMessagesIf True, additional status messages are written to the 
Message Window during the Tet Meshing process
BOOL TetQualityToDataTableIf True, and the Data Table is open, the Tet elements and 
their element quality are placed  in the Data Table during 
meshing.
BOOL TetCheckSurfaceElemIf True, the surface elements are checked to see that all 
element normals are consiste nt, there are no free edges 
and their are no interior walls (non-manifold).
BOOL TetDeleteSurfaceElemIf True, the surface mesh is de leted when the Tet mesh is 
created.
BOOL TetSmoothSolidElemOn If True, the Tet Elements will be smoothed
REAL8 TetSmoothSolidElemIf TetSmoothSolidElemOn=True,  then this specifies the 
tolerance at which smoothing will stop.
BOOL TetMidsideMoveToGeometrySame as MidsideMoveToGeome try, except for midsides 
of Solid elements
BOOL TetMidsideMaxDistortionAngleOnSame as MidsideMaxDistortionAngleOn, except for 
midsides of Solid elements
REAL8 TetMidsideMaxDistortionAngleSame as MidsideMaxDistortionAngle, except for 
midsides of Solid elements
BOOL TetAdjustNodalPrecisionIf True, the nodal precision of  the surface mesh nodes is 
reduced to 6 significant digits when they are supplied to 
the tet mesher. 
BOOL TetMeshV oidsIf True, internal voids will be meshed along with the 
solid portions of the model. V oids will only be meshed 
however if they are not supp ressed using SuppressV oids.Property Description
AddSolid   API-1167
4.3.2  Geometry Preparati on and Meshing Object Methods
There following methods are available to Prepare, Size and Mesh Geometry.
NOTE: All methods that are shown in gray  are not yet implemented. These methods 
should not be used. They may have unpredictable results and may be changed prior to 
their final implementation.
4.3.2.1  AddSolid
AddSolid
( SetID, SetSizes )
Description:This method selects one or more  solids to be processed by th e other methods in this object
Input:
INT4 SetIDThe ID of a set that contains a list of Solid IDs that will be processed. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single Solid to process.
BOOL SetSizesIf True, the solid(s) are evaluated and default geometry preparation 
and mesh sizes are determined based on these solids. If False, default 
sizes are based on the overall mode l sizes, or any changes you have 
made to the defaults prior to calling this method
Output:NoneReturn Code:FE_NOT_EXIST The Solid(s) specified do not exist.
Remarks/Usage:Typically this is the first meth od called when using this object.
Example:
 API-1168  AddSurface
4.3.2.2  AddSurface
AddSurface
( SetID, SetSizes )
Description:This method selects one or more surfaces to be  processed by the other methods in this object
Input:
INT4 SetIDThe ID of a set that contains a list of Surface IDs that will be pro-
cessed. Alternatively, if you specify a negative value, this is simply 
the ID of the single Surface to process.
BOOL SetSizesIf True, the Surface(s) are evaluated and default geometry prepara-
tion and mesh sizes are determined based on these Surfaces. If False, 
default sizes are based on the overall model sizes, or any changes 
you have made to the defaults  prior to calling this method
Output:
None
Return Code:FE_NOT_EXIST The Surface(s) specified do not exist.Remarks/Usage:In most cases, AddSolid() is used instead of AddSurface()
Example:
Clear   API-1169
4.3.2.3  Clear
Clear
( )
Description:This method clears a ll properties and resets them to default values.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:
 API-1170  SetSizes
4.3.2.4  SetSizes
SetSizes
( PrepareSize, MeshSize, InteriorGrowthFactor )
Description:This method provides a way to easily set the mesh sizes in a single call
Input:REAL8 PrepareSize Sets the PrepareSize propertyREAL8 MeshSize Sets the MeshSize propertyREAL8 InteriorGrowthFactor Sets the InteriorGrowthFactorOutput:NoneReturn Code:NoneRemarks/Usage:Calling this method is identical to setting the three properties directly.
Example:
HasPrevious   API-1171
4.3.2.5  HasPrevious
HasPrevious
( )
Description:This method indicates whether the selected  solid has previous geometry preparation.
Input:NoneOutput:NoneReturn Code:FE_OK Solid has previous geometry preparationFE_FAIL Solid does not have previous geometry preparationRemarks/Usage:NoneExample:
 API-1172  RemovePrevious
4.3.2.6  RemovePrevious
RemovePrevious
( )
Description:This method removes previous geometry preparation.Input:NoneOutput:NoneReturn Code:FE_FAIL Unable to remove previous preparationRemarks/Usage:NoneExample:
Prepare   API-1173
4.3.2.7  Prepare
Prepare
( )
Description:This method performs Geometry Preparation on the selected geometry using the current options/proper-
ties.
Input:NoneOutput:NoneReturn Code:FE_NOT_EXIST There are no solids selectedRemarks/Usage:This method will prepare the select ed geometry regardless  of the setting of the PrepareGeometry prop-
erty
Example:
 API-1174  Size
4.3.2.8  Size
Size
( )
Description:This method performs Mesh Sizing on the select ed geometry using the current options/properties.
Input:NoneOutput:NoneReturn Code:FE_NOT_EXIST There are no surfaces or solids selectedFE_FAIL Mesh sizing was not successful.Remarks/Usage:This method will apply Mesh Sizes regardless of the settin g of the MeshSizing property
Example:
Mesh   API-1175
4.3.2.9  Mesh
Mesh
( )
Description:This method Meshes the selected geometry using the current options/properties.Input:NoneOutput:NoneReturn Code:FE_NOT_EXIST There are no surfaces or solids selectedFE_FAIL Meshing was not successful.Remarks/Usage:This method will mesh regardless of  the setting of the Meshing property
Example:
 API-1176  Apply
4.3.2.10  Apply
Apply
( )
Description:This method can remove previous preparatio n, prepare geometry, apply mesh sizing and mesh  selected 
geometry using the curre nt options/properties.
Input:NoneOutput:NoneReturn Code:FE_NOT_EXIST There are no surfaces or solids selectedFE_FAIL Process was not successful.Remarks/Usage:Four properties control the options that are executed by this method . If RemovePreviousOnly is True, 
then any previous geometry preparation is removed and no other steps are performed. If it is False (the 
default) then PrepareGeometry, MeshSizing and Me shing control whether each of those steps is per-
formed.
Note: Meshing is currently not implemented in this object.
Example:
UI   API-1177
4.3.2.11  UI
UI
( MeshingOptions )
Description:This method displays the dialog box user inte rface, just like the Geomet ry Preparation command.
Input:
BOOL MeshingOptionsIf False, the dialog box showing Geometry Preparation and Mesh 
Sizing options will be used. If True, the dialog box will also contain 
Meshing Options.
Since meshing is not currently im plemented in this object, True 
should never be used.
Output:None
Return Code:
FE_CANCEL User cancelled the dialogRemarks/Usage:This method uses the current obje ct properties to initialize the dialog s and updates the properties to the 
user’s selections.
Example:
 API-1178  
4.4  ReadFile Objects
The ReadFile object is used to read lines of text from a file and parse their contents. While these 
functions can be accomplished th rough other standard Basic or C++ functions, the capabilities of 
this object are often easier to u se. The reading capability in this ob ject also contains its own file 
buffering, which can be significantly f aster than the native read functions.
ReadFile can handle different file formats. It reads lines from files using either the UNIX or Win-
dows carriage control conventions. This means that UNIX files that are read on Windows can be 
transferred either via ASCII or Bi nary FTP and will work equally well.
Use the feRead method of the FEMAP Appli cation object to create ReadFile Objects.
4.4.1  ReadFile Object Properties
Property Description
STRING line[0..max_length]The current line of text that w as read from the file. The maxi-
mum length is established when you open the file.
BOOL truncatedTrue if any line that has been read  to that point was longer than 
the maximum length that you specified and was truncated.
BOOL sharedSet to True prior to calling “Open”  if you want the file to be 
shared for both read and write, otherwise it is only shared for 
reading.
BOOL shareddeleteSet to True prior to calling “Open”  if you want the file to be 
shared for read, write and delete, otherwise it is only shared for 
reading.
BOOL ExclusiveSet to True prior to calling “Open”  if you want the file to be 
opened for exclusive access.
Open   API-1179
4.4.2  ReadFile Object Methods
4.4.2.1  Open
Open
( filename, maxLineLength )
Description:This function opens a file and prepares for reading.Input:STRING filename The complete path to the file that you want to read.
INT4 maxLineLengthThe maximum length of any line of text  in this file. Actually, this is 
simply the maximum length that yo u are interested in reading. Lon-
ger lines may exist in the file, but they will simply be truncated at 
this length.
Output:
None
Return Code:FE_FAIL Unable to open the file.FE_NO_MEMORY Unable to allocate  memory for file buffering.
Remarks/Usage:You must call this function prior to reading from a f ile. You should always call Close when you are fin-
ished.
Example:None
 API-1180  Read
4.4.2.2  Read
Read
( void )
Description:This function reads a line from an open file.
Input:NoneOutput:NoneReturn Code:FE_FAIL Unable to read from the fileRemarks/Usage:This function reads the next line from the open file. The text from that line (without any carriage con-
trol) is loaded into the “line” property and can be  accessed from there. If you use the various parsing/
field methods; you do not need to access the “line”  property. You should always call AtEOF to check 
whether you have reached  the end of the file.
Example:None
AtEOF   API-1181
4.4.2.3  AtEOF
AtEOF
( void )
Description:This function indicates whether you have reached the end of the file.
Input:NoneOutput:NoneReturn Code:FE_OK At the end of the file . You should stop reading.
FE_FAIL Not at the end of the file; there is more data to be read.
Remarks/Usage:You should always use this check to determine when you reach the en d of the file. Depending on how 
the file was created, Read can continue to read an d return unwanted characters after reaching the true 
end of the file. This method will howe ver indicate the end when you reach it.
Example:None
 API-1182  Close
4.4.2.4  Close
Close
( void )
Description:This function closes the current file and frees the memory used for file buffering.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:You should always call this method when you are done  reading a file. You should  not call this method if 
you have not successfully opened a file.
Example:None
Position   API-1183
4.4.2.5  Position
Position
( void )
Description:This function retu rns the current location in th e file where you are reading.
Input:NoneOutput:NoneReturn Code:INT4 position The cu rrent file location.
Remarks/Usage:This function can be used with Jump to repo sition to a specific file location for “rereading”.
Example:None
 API-1184  Jump
4.4.2.6  Jump
Jump
( jumpto )
Description:This function repositions th e location in the file where the next read will occur.
Input:
INT4 jumptoThe position to start reading. This position is the offset from the first 
byte in the file. Setting jumpto=0 positions to the beginning of the 
file
Output:NoneReturn Code:
None
Remarks/Usage:You should only specify jumpto as  a value that you previously retr ieved from a call to Position. Com-
puting numbers yourself is prone to error because of handling of carriage control.
Example:None
JumpToEnd   API-1185
4.4.2.7  JumpToEnd
JumpToEnd
( jumpto )
Description:This function repositions th e location in the file where the next read will occur.
Input:
INT4 jumptoThe position to start reading. This po sition is the offset from the last 
byte in the file. Setting jumpto=0  positions to the end of the file
Output:NoneReturn Code:NoneRemarks/Usage:You should only specify jumpto as  a value that you previously retr ieved from a call to Position. Com-
puting numbers yourself is prone to error because of handling of carriage control.
Example:None
 API-1186  Size
4.4.2.8  Size
Size
( nSize )
Description:This function retu rns the size of the file in bytes.
Input:INT8 nSize The size of the file.Output:NoneReturn Code:FE_FAIL Unable to retrieve file size.Remarks/Usage:Note that the file size is an 8-byte integer - this allows support for files over 4 GByte.
Example:None
TimeCreated   API-1187
4.4.2.9  TimeCreated
TimeCreated
( nTime )
Description:Returns the time that the file was created.Input:INT8 nTime The time the file was created.Output:NoneReturn Code:FE_FAIL Unable to retrie ve file information.
Remarks/Usage:Note that the file size is an 8-byte integer.Example:None
 API-1188  TimeWritten
4.4.2.10  TimeWritten
TimeWritten
( nTime )
Description:Returns the time that the file was written.Input:INT8 nTime The time the file was written.Output:NoneReturn Code:FE_FAIL Unable to retrie ve file information.
Remarks/Usage:Note that the file size is an 8-byte integer.Example:None
TimeAccessed   API-1189
4.4.2.11  TimeAccessed
TimeAccessed
( nTime )
Description:Returns the time that the file was accessed.Input:INT8 nTime The time the file was accessed.Output:NoneReturn Code:FE_FAIL Unable to retrie ve file information.
Remarks/Usage:Note that the file size is an 8-byte integer.Example:None
 API-1190  Skipped
4.4.2.12  Skipped
Skipped
( void )
Description:Indicates whether the last read actua lly skipped over one or more lines.
Input:NoneOutput:NoneReturn Code:FE_OK One or more lines were skipped.FE_FAIL No lines were skipped.Remarks/Usage:This method will only indi cate lines were skipped if  one or more of the methods are being used that 
causes short, blank or sear ched lines to be skipped.
Example:None
ShowStatus   API-1191
4.4.2.13  ShowStatus
ShowStatus
( on )
Description:Turn on or off the status bar in FEMAP during the read.Input:
BOOL onIf True, the Status bar will be di splayed showing th e reading prog-
ress. If False, no Status bar will be displayed.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-1192  SetNoBlankLines
4.4.2.14  SetNoBlankLines
SetNoBlankLines
( on )
Description:Indicate whether or not to read blank lines.Input:BOOL on If True, blank lines will be skipped.Output:NoneReturn Code:NoneRemarks/Usage:Blank lines are lines containing no text, or lines that  because of other processing are reduced to being a 
blank line.
Example:None
SetNoShortLines   API-1193
4.4.2.15  SetNoShortLines
SetNoShortLines
( on, minLineLength )
Description:Indicate whether or not to read lines that are shorter than a specified length.Input:BOOL on If True, short lines will be skipped.INT4 minLineLength If on=True, lines shor ter than this leng th will be skipped.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-1194  SetTrimSpace
4.4.2.16  SetTrimSpace
SetTrimSpace
( on )
Description:Indicate whether or not to trim all white space ch aracters off of the front and back of each line.
Input:BOOL on If True, white space will be trimmed.Output:NoneReturn Code:NoneRemarks/Usage:Turning this on will delete all leading and trailing sp aces. You normally only want  to do this if the line 
is to be parsed using a free format . White space on the “interior” (after the first non-white space charac-
ter and before the last non-white space character) is not deleted.
Example:None
SetTrimEndSpace   API-1195
4.4.2.17  SetTrimEndSpace
SetTrimEndSpace
( on )
Description:Indicate whether or not to trim all white space characters off the end of each line.
Input:BOOL on If True, trailing white space will be trimmed.Output:NoneReturn Code:NoneRemarks/Usage:Turning this on will delete all trailin g spaces. This is just like SetTri mSpace, but only trims trailing, not 
leading white space.
Example:None
 API-1196  SetTrimFront
4.4.2.18  SetTrimFront
SetTrimFront
( on, numChar )
Description:Indicate whether or not to trim a certain numbe r of characters off of the front of each line.
Input:BOOL on If True, leading characters will be trimmed.INT4 numChar The number of characters to trim, regardless of content.Output:NoneReturn Code:NoneRemarks/Usage:Turning this on trims numChar from the front of every line.Example:None
SetUppercase   API-1197
4.4.2.19  SetUppercase
SetUppercase
( on )
Description:Returns all text in uppercase.Input:BOOL on If True, all text will be returned in uppercase.Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-1198  SetSkip
4.4.2.20  SetSkip
SetSkip
( on )
Description:Indicates that lines containing the search strings are to be skipped.
Input:BOOL on If True, all lines that contain the search strings are skipped.Output:NoneReturn Code:NoneRemarks/Usage:This function must be used in co mbination with the SetSearchString me thod. This cannot be used with 
the SetSearch method
Example:None
SetSearch   API-1199
4.4.2.21  SetSearch
SetSearch
( on )
Description:Indicates that lines containing the search string s are to be kept and others are to be skipped.
Input:BOOL on If True, all lines that do not contain the search strings are skipped.Output:NoneReturn Code:NoneRemarks/Usage:This function must be used in co mbination with the SetSearchString me thod. This cannot be used with 
the SetSkip method.
Example:None
 API-1200  SetSearchString
4.4.2.22  SetSearchString
SetSearchString
( mainStr, orStr )
Description:Searches for lines containi ng the specified strings.
Input:STRING mainStr The primary search string.
STRING orStrA second alternate string which could be on the line instead of main-
Str. This should normally be specified  as a blank string to just use the 
primary search string.
Output:None
Return Code:
FE_FAIL More than five search string pairs have been specified.Remarks/Usage:This method can be called up to five times before reading to searc h for multiple strings.
Example:None
ClearSearch   API-1201
4.4.2.23  ClearSearch
ClearSearch
( void )
Description:Removes any “search string(s)” curre ntly set via SetSearchString so th ey will no longer be considered 
when reading the file
Input:NoneOutput:NoneReturn Code:FE_OKFE_FAILRemarks/Usage:After using this method, you can al ways use SetSearchString again to look for the same string(s) or dif-
ferent string(s), then simply use this method again to stop looking for those “search strings”
Example:None
 API-1202  SetSkipAfterSearch
4.4.2.24  SetSkipAfterSearch
SetSkipAfterSearch
( lines )
Description:Specifies the number of lines to sk ip after finding a line that contains one of the search strings.
Input:INT4 lines The number of lines to skip.
Output:NoneReturn Code:NoneRemarks/Usage:In some cases you may want to skip certain head ers in a file. You can search for a keyword in the 
header, then use this to skip the remaining header lines. If not specified, no lines are skipped.
Example:None
SetFormFeed   API-1203
4.4.2.25  SetFormFeed
SetFormFeed
( on )
Description:Indicates that Form Feed (FF) characters shoul d be treated as end-of-line carriage control.
Input:BOOL on If True, FF characters will also end a line.Output:NoneReturn Code:NoneRemarks/Usage:Normally this method can be ignore d - most text files do not contain form feed characters. If you are 
reading the formatted output of some other progra m, however, this may be important if the program 
relies on writing a form f eed to end certain lines.
Example:None
 API-1204  SetTabSize
4.4.2.26  SetTabSize
SetTabSize
( tabsize )
Description:Specifies the number of spaces to convert tab characters into.Input:INT4 tabsize The number of spaces to convert into.Output:NoneReturn Code:NoneRemarks/Usage:The size that you specify will be overridden by any ch oice that the user has made in the Global property 
Pref_ReadTabSize
Example:None
LineInit   API-1205
4.4.2.27  LineInit
LineInit
( maxLineLength )
Description:Used to initialize the necessary properties required for line parsin g if you are not reading a file.
Input:INT4 maxLineLength The maximum length  of line that you will be parsing.
Output:NoneReturn Code:NoneRemarks/Usage:Normally you will not call this method. If you are read ing a file and want to use the parsing/field capa-
bilities, all of that will be handled automatically. If, however, you just want to  use the parsing/field capa-
bilities to parse text that you have  from some other source, you can call this method to initialize the 
necessary properties. Then you simply set the “line” pr operty to the text you want to parse and call the 
various “field” methods.
Example:None
 API-1206  Reparse
4.4.2.28  Reparse
Reparse
( void )
Description:Used to indicate that you wa nt to reparse the current line.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:Use this method if you want to use multiple format s to parse the line. Call th e field methods with the 
first format, change the format, call Re parse, and call the field routines again.
Example:None
FixedFormat   API-1207
4.4.2.29  FixedFormat
FixedFormat
( numField, width )
Description:Used to specify the number of fields an d field widths for a fixed format read.
Input:
INT4 numFieldThe number of fields to parse from the line. Must be between 1 and 
50.
INT4 width[0..numField-1] The widths, in characters, of the fields to parse.Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-1208  SetFixedFormat
4.4.2.30  SetFixedFormat
SetFixedFormat
( void )
Description:Indicates that you want to parse a line using fixed field widths.Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:You must call FixedFormat to specify the field widths.Example:None
SetFreeFormat   API-1209
4.4.2.31  SetFreeFormat
SetFreeFormat
( void )
Description:Indicates that you want to parse a line using free format.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:Free format indicates fields with either spaces or commas. Multiple commas create multiple fields. Mul-
tiple spaces do not.
Example:None
 API-1210  SetAutoFormat
4.4.2.32  SetAutoFormat
SetAutoFormat
( void )
Description:Indicates that you want to parse a lin e using either fixed or free format.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This option checks the line for a co mma. If any commas exist, free format  is used; otherwise, fixed for-
mat is used.
Example:None
Field   API-1211
4.4.2.33  Field
Field
( fieldID )
Description:Parses the current line and returns th e indicated field as a text string.
Input:INT4 fieldID The ID of the field on the line (1..49).Output:NoneReturn ValueSTRING field The text in the selected field.Remarks/Usage:There is a limit of 49 fields wh ich can be read by this method
Example:None
 API-1212  IntField
4.4.2.34  IntField
IntField
( fieldID, defaultValue )
Description:Parses the current line and returns the indicated field as an integer.
Input:INT4 fieldID The ID of the field on the line (1..49).INT4 defaultValue If the selected field is bl ank, the return value will be this value.
Output:NoneReturn Code:INT4 field An integer representation of the text in the fieldRemarks/Usage:If the field is not blank, but does no t contain an integer - either a real number or some other text - the 
return value will be 0, not the default value. There is a limit of 49 fields which can be read by this 
method
Example:None
RealField   API-1213
4.4.2.35  RealField
RealField
( fieldID, defaultValue )
Description:Parses the current line and returns th e indicated field as a real number.
Input:INT4 fieldID The ID of the field on the line (1..49).REAL8 defaultValue If the selected field is bl ank, the return value will be this value.
Output:NoneReturn Code:REAL8 field An real number represent ation of the text in the field.
Remarks/Usage:If the field is not blank, but does no t contain a real number - some other text - the return value will be 
0.0, not the default value. There is a limit of 49 fields which can be read by this method.
Example:None
 API-1214  BoolField
4.4.2.36  BoolField
BoolField
( fieldID, defaultValue )
Description:Parses the current line and returns th e indicated field as a boolean value.
Input:INT4 fieldID The ID of the field on the line (1..49).BOOL defaultValue If the selected field is bl ank, the return value will be this value.
Output:NoneReturn Code:BOOL field An Boolean representation of the text in the field.Remarks/Usage:This function will interpret either “1 ”, “y”, or “yes” as True, and “0”,  “n” or “no” as False. There is a 
limit of 49 fields which can be read by this method
Example:None
   API-1215
4.5  Selector Objects
The Selector object provides access to the functiona lity of the selector in your model. It is not a 
model entity. 
Use the feSelector method of the FEMAP Applic ation object to access the Selector object.
4.5.1  Selector Object Properties
Property Description
BOOL MultipleModeIf True, the selector will be in “Select Multiple” mode, other-
wise it will be in “Sel ect Single Item” mode
BOOL AddModeIf True, the selector will be in “Add to Selection” mode, oth-
erwise it will be in “Rem ove From Selection” mode
INT4 DrillMode0=Drill Off (normal selection mode), 1=Drill Query, 2=Drill 
Front
BOOL RelatedModeIf True, then when an entity is  selected, all related entities 
will also be selected (for exam ple, selecting an element will 
also select its nodes, properties, materials...)
INT4 SelectEntity The entity t ype that is being selected.
BOOL Active If True, the selector is  active, otherwise it is inactive.
BOOL ShowInModelInfoIf True, and MultipleMode = False, entity will be highlighted 
in the Model Info Tree. Only  applicable for Solid, CSys, 
Property, Material, or Layup. Set before picking.
 API-1216  ClearAll
4.5.2  Selector Object Methods
There following methods are available.
4.5.2.1  ClearAll
ClearAll
( void )
Description:This method clears all entities of any type from the SelectorInput:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:
Clear   API-1217
4.5.2.2  Clear
Clear
( entityType )
Description:This method clears all entities of the specified type from the Selector
Input:INT4 entityType The entity type to remove from the selector.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:
 API-1218  Count
4.5.2.3  Count
Count
( entityType, nSelected )
Description:This method returns the numb er of entities of a given type that are currently selected
Input:INT4 entityType The entity type to queryOutput:INT4 nSelected The number of “entityType” entities that are currently selected.
Return Code:NoneRemarks/Usage:NoneExample:
SelectBox   API-1219
4.5.2.4  SelectBox
SelectBox
( void )
Description:This method displays the box selection dialog.Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method automatically  enables “Multiple Mode”
Example:
 API-1220  SelectCircle
4.5.2.5  SelectCircle
SelectCircle
( void )
Description:This method displays the circle selection dialog.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method automatically  enables “Multiple Mode”
Example:
SelectPolygon   API-1221
4.5.2.6  SelectPolygon
SelectPolygon
( void )
Description:This method displays th e polygon selection dialog.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method automatically  enables “Multiple Mode”
Example:
 API-1222  SelectFreehand
4.5.2.7  SelectFreehand
SelectFreehand
( void )
Description:This method displays the freehand selection dialog.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method automatically  enables “Multiple Mode”
Example:
Grow   API-1223
4.5.2.8  Grow
Grow
( void )
Description:This method “grows” the current sel ection by adding adjacent entities
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method automatically  enables “Multiple Mode”. It is th e same as calling the Grow command on 
the selector toolbar.
Example:
 API-1224  Shrink
4.5.2.9  Shrink
Shrink
( void )
Description:This method “shrinks” the current selection by removing outer entities
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method automatically  enables “Multiple Mode”.  It is the same as calling the Shrink command on 
the selector toolbar.
Example:
Show   API-1225
4.5.2.10  Show
Show
( bShowAll )
Description:This method shows the current selection
Input:
BOOL bShowAllIf True, all selected entities are sh own. If False, only those of the 
active type (specified by the SelectEntity property) are shown.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:
 API-1226  SaveGroup
4.5.2.11  SaveGroup
SaveGroup
( groupID )
Description:This method saves the current selection as a groupInput:INT4 groupID The ID of the group to createOutput:NoneReturn Code:FE_FAIL Unable to create group from selectionRemarks/Usage:NoneExample:
LoadGroup   API-1227
4.5.2.12  LoadGroup
LoadGroup
( groupID )
Description:This method adds the spec ified group to the selection
Input:INT4 groupID The ID of the group to loadOutput:NoneReturn Code:FE_FAIL Unable to load the groupRemarks/Usage:This Method automatically enables “Multiple Mode”. It does not clear the current selection before add-
ing the group.
Example:
 API-1228  UpdateDataTable
4.5.2.13  UpdateDataTable
UpdateDataTable
( void )
Description:This method adds the current selection to the Data Table
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:
Add   API-1229
4.5.2.14  Add
Add
( entityType, ID )
Description:This method adds an entity to the selector.
Input:INT4 entityType The type of entity to add.INT4 ID The ID of the entity  of “entityType” to add
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:
 API-1230  AddSet
4.5.2.15  AddSet
AddSet
( entityType, nSetID, bUpdateDataTable )
Description:This method adds multipl e entities to the selector.
Input:INT4 entityType The type of entity to add.
INT4 nSetIDThe ID of a Set object that contai ns the list of IDs of the entities to 
add.
BOOL bUpdateDataTableIf True, the selected entities are au tomatically added to the Data 
Table.
Output:
None
Return Code:NoneRemarks/Usage:NoneExample:
GetSelected   API-1231
4.5.2.16  GetSelected
GetSelected
( entityType )
Description:This method creates and returns a Se t object that contains the IDs of all entities of a specified type that 
are currently selected.
Input:INT4 entityType The type of entity that will be queried.
Output:NoneReturn Code:NoneRemarks/Usage:The Set object is returned in  place of the return code.
Example:
Sub Main
    Dim App As femap.model
    Set App = feFemap()
    Dim sel As femap.Selector    Set sel = App.feSelector
    sel.MultipleMode = True
    sel.SelectEntity = FS_ELEM    sel.RelatedMode = True
    sel.SelectBox()
    Dim e As femap.Set    Set e = sel.GetSelected( FS_ELEM )
    e.Debug()
    Dim n As femap.Set    Set n = sel.GetSelected( FS_NODE )
    n.Debug()
    sel.ClearAll()    sel.SelectEntity = FS_NONE
End Sub
 API-1232  GetSelectedID
4.5.2.17  GetSelectedID
GetSelectedID
( entityType, nNumSelected, nSelectedID )
Description:This method returns the number of entities of a specified type and fills  an array which contains the IDs 
of all entities of a specified ty pe that are currently selected.
Input:INT4 entityTYPE The type of entity that will be queried.
Output:INT4 nNumSelected The number of en tries in the nSelectedID array.
INT4 nSelectedID[0..N]The IDs of the entities of the specifie d type currently in the Selector 
object.
Return Code:
NoneRemarks/Usage:NoneExample:
Copy   API-1233
4.5.2.18  Copy
Copy
( void )
Description:This method copies all selec ted entities to the Clipboard. 
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:The entities are copied in FEMAP Neutral format and can then be pasted  into another model.
Example:
 API-1234  Paste
4.5.2.19  Paste
Paste
( void )
Description:This method pastes entities from the Clipboard into the current model.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:Data on the clipboard must be in FEMAP Neutral format, as placed there by the Selector Copy com-
mand/method.
Example:
Tooltips   API-1235
4.5.2.20  Tooltips
Tooltips
( bOn, bIncludeLayersAndGroups)
Description:This method will turn on or turn  off the Show Tooltips and Layers/G roups in Tooltips options in the 
Select Toolbar
Input:
BOOL bOnIf True, the Show Tooltips option w ill be turned on. If False, the 
Show Tooltips options will be turned off.
BOOL 
bIncludeLayersAndGroupsIf True, the Layers/Groups in Tooltips option will be turned on. If 
False, the Layers/Groups in To oltips option will be turned off.
Output:NoneReturn Code:NoneRemarks/Usage:The bOn option must be set to True for a Tooltip to  be shown (i.e., having  only bIncludeLayersAnd-
Groups set to True will not show a Tooltip contai ning only the Layer and Group information for an 
entity).
Example:
 API-1236  
4.6  Set Objects
The Set object is used to contain lists of IDs. Se ts, once created, can be passed to many other func-
tions to operate on groups of multiple entities. Yo u can also use Set objects for your own purposes, 
to make it easier to traverse a list of IDs.
Sets can be persistent objects. They can be save d with a model and can be  retrieved at any later 
time, in a different script or program, or even in a different modeling session.
It's recommended that you never hard code set IDs in your program as it may have unintended 
consequences. When a Set object is created, FEMAP will auto-assi gn the next available ID auto-
matically. To reference that set later, simply us e the ID property rather than a hard-coded ID
Use the feSet method of the FEMAP Appl ication object to create Set objects.
In addition to standard Set Objects, developers of applications who are registered with Siemens 
PLM Software can apply to receive a “Developer ID ”, which once entered, allows conversion of 
any Set Object into a “SavedSet” , then stores the “SavedSet” to  the FEMAP database. A “Saved-
Set” differs from a normal Set Object by “saving” both the IDs in the Set Object and the Entity 
Type of the IDs in the Set Object. The “SavedSet”  functionality is reserve d for developers regis-
tered with Siemens PLM Software. 
Being a registered developer is not common or in  any way required to use the Set Object function-
ality described in Section 4.6.1, "Set Object Prop erties" or Section 4.6.2, "Set Object Methods". If 
interested in becoming a registered developer, please contact the Siemens Global Technical Access 
Center (GTAC) for more information.
The methods used to access the “Sav edSet” functionality are describe d in detail in section Section 
4.6.3, "Set Object SavedSet Methods". 
4.6.1  Set Object Properties
Property Description
INT4 IDThe internal ID of the set. This ID is needed if you want to 
reload a set created in a previous  session. It is also needed for 
many of the other methods that operate on sets.
BOOL SaveDefault=False. Set to True if yo u want the selection set to per-
sist after the object is destroye d. If you set this option, you can 
reload the selection set as long as you remember the ID.
INT4 CurrentIDThe current ID from the Set. This  property is updated when you 
call the Next and Prev method s and provides a simple way to 
loop through a Set. For exampl e, retrieving a set of nodes...
While s.Next() 
node.Get( s.CurrentID ) 
...
Wend
Add   API-1237
4.6.2  Set Object Methods
4.6.2.1  Add
Add
( id )
Description:This function adds an ID into a selection set.Input:INT4 id ID to add to the selection set.Output:NoneReturn Code:
FE_FAIL ID specifies an invalid value.
Remarks/Usage:The ID that you are adding to the se lection set is just that, an ID. Alth ough it usually represents the ID of 
some other existing entity in your mode l, there is no requirement for this.
Example:None
 API-1238  AddRange
4.6.2.2  AddRange
AddRange
( startID, stopID, increment )
Description:This function adds a range of IDs into a selection set.Input:INT4 startID The first ID to add to the selection set.INT4 stopID The last ID to add to the selection set.
INT4 incrementThe ID increment between startID and stopID. Must be a positive 
number. 
Output:NoneReturn Code:FE_FAIL ID specifies an invalid value.Remarks/Usage:This is just like the Add Method, but it can be used to add multiple IDs in one call. 
Example:None
AddEntitiesOnLayer   API-1239
4.6.2.3  AddEntitiesOnLayer
AddEntitiesOnLayer
( laySET, entityTYPE )
Description:This function adds all entities of a selected type that are on a set of layers into the set.
Input:
INT4 laySETThe setID that contains the layers  to include. Specify a negative 
number to include entities on a single layer.
INT4 entityTYPEThe type of entities being included  into the set. Only those entities 
that reference a layer in “laySET” will be included. For entity infor-
mation, see Section 3.3.6, "Entity Types"
Output:NoneReturn Code:FE_FAIL Unable to include entitiesRemarks/Usage:NoneExample:None
 API-1240  AddSet
4.6.2.4  AddSet
AddSet
( addID )
Description:This function adds all of the selected IDs from another set into the current set.
Input:
INT4 addIDID of the selection set containing IDs to add. Accessed from the ID 
property of the set.
Output:NoneReturn Code:FE_FAIL Unable to add into the specified set.Remarks/Usage:This function simply adds all IDs in the addID se t into the current set. Du plication does not cause an 
error; the ID will simply remain selected. The addI D set remains unchanged duri ng this command - only 
the current set is updated.
Example:None
AddSetRule   API-1241
4.6.2.5  AddSetRule
AddSetRule
( addID, ruleID )
Description:This function adds to a selection set by using one of the standard group selection rules. It uses the IDs 
from another selection set to create the new one.
Input:
INT4 addIDThe selection set where the IDs will be found. The interpretation of 
these IDs depends on the type of rule that you select.
INT4 ruleIDID of a selection rule. For more information, see Section 4.6.2.7, 
"Group Selec tion Rules". 
Output:NoneReturn Code:FE_FAIL Not able to create the requested selection set.
FE_NOT_EXISTEither the addID selection set wa s empty, or there was a problem 
processing it.
Remarks/Usage:This function is just like calling AddRule( ) once for each of the ID s in the addID set. This function adds 
to the current set; it does no t clear previous additions.
Example:None
 API-1242  AddRule
4.6.2.6  AddRule
AddRule
( id, ruleID )
Description:This function adds to a selection set by using one of the standard group selection rules.Input:
INT4 idThe ID that you are specifying. The interpretation of this value 
depends on the type of rule that you select.
INT4 ruleIDID of a selection rule. For more information, see Section 4.6.2.7, 
"Group Selec tion Rules".
Output:None
Return Code:
FE_FAIL Not able to create the requested selection set.Remarks/Usage:This is a very powerful tool to cr eate selections which reference attr ibutes of another entity. There are 
many group selection rules - review them carefully to choose the appropriate one for your task. This 
function adds to the set; it do es not clear previous additions.
Example:None
Group Selection Rules   API-1243
4.6.2.7  Group Selection Rules
Group Selection Rules
Rule Type Selects Which...
FGD_CSys_byDefCSys Coordinate Systemshave selected definition coordi-
nate system
FGD_CSys_byType Coordinate Systemshave the type: 0=Rect, 1=Cyl, 
2=Sph
FGD_Point_ID Points you choo se - just matches the ID
FGD_Point_byDefCSys Pointshave selected definition coordi-
nate system
FGD_Point_onCurve Points are referenced on the curve ID
FGD_Curve_ID Curves you choose - just matches the ID
FGD_Curve_byPoint Curves are attached to the point ID
FGD_Curve_onSurface Curves are re ferenced on the surface ID
FGD_Surface_ID Surfaces you choose - just matches the IDFGD_Surface_byCurve Surfaces are attached to the curve ID
FGD_Surface_onV olume Surfaces are referenced on the volume ID
FGD_V olume_ID V olumes you ch oose - just matches the ID
FGD_V olume_bySurface V olumes are  attached to the surface ID
FGD_Text_ID Texts you choose - just matches the IDFGD_Boundary_ID Boundaries you choose - just matches the IDFGD_Boundary_byCurve Boundaries ar e attached to the surface ID
FGD_Node_ID Nodes you choose - just matches the ID
FGD_Node_byDefCSys Nodeshave selected definition coordi-
nate system
FGD_Node_byOutCSys Nodeshave selected output coordinate 
system
FGD_Node_onElem Nodes are referenced on the element IDFGD_Elem_ID Elements you choose - just matches the IDFGD_Elem_byMatl Elements use the material IDFGD_Elem_byProp Elements use the property IDFGD_Elem_byType Elements have the element type 
 API-1244  Group Selection Rules
FGD_Elem_byNode Elements reference the node ID
FGD_Matl_ID Materials you choose - just matches the IDFGD_Matl_onProp Materials are used by the property IDFGD_Matl_onElem Materials are used by the element IDFGD_Matl_byType Materials have the material typeFGD_Prop_ID Properties you choose - just matches the IDFGD_Prop_onElem Properties are used by the elementIDFGD_Prop_byMatl Properties reference the material IDFGD_Prop_byType Properties h ave the property type
FGD_Load_byNode Loads are applied on the node IDFGD_Load_byElem Loads are applied on the element ID
FGD_BCo_ID Constraints are applied on the node IDFGD_BEq_byNode Constraint Equations reference the node IDFGD_Node_atPoint Nodes are attached to the point ID
FGD_Node_atCurve Nodes are attached to the curve IDFGD_Node_atSurface Nodes are attached to the surface ID
FGD_Node_atSolid Nodesare attached to the solid/volume 
ID
FGD_Elem_atPoint Elements are attached to the point IDFGD_Elem_atCurve Elements are attached to the curve IDFGD_Elem_atSurface Elements are attached to the surface ID
FGD_Elem_atSolid Elementsare attached to the solid/volume 
ID
FGD_Load_byPoint Loads are applied at the point IDFGD_Load_byCurve Loads are applied to the curve IDFGD_Load_bySurface Loads are applied to the surface IDFGD_BCo_byPoint Constraints ar e applied at the point ID
FGD_BCo_byCurve Constraints ar e applied to the curve ID
FGD_BCo_bySurface Constraints are  applied to the surface IDGroup Selection Rules
Rule Type Selects Which...
Group Selection Rules   API-1245
FGD_Text_byColor Text entitiesare the same color as the Text 
ID(s) you select
FGD_Point_byColor Pointsare the same color as the Point 
ID(s) you select
FGD_Curve_byColor Curvesare the same color as the Curve 
ID(s) you select
FGD_Surface_byColor Surfacesare the same color as the Surface 
ID(s) you select
FGD_V olume_byColor V olumesare the same color as the V olume 
ID(s) you select
FGD_Solid_byColor Solidsare the same color as the Solid 
ID(s) you select
FGD_CSys_byColor Coordinate Systemsare the same color as the Coordi-
nate System ID(s) you select
FGD_Node_byColor Nodesare the same color as the Node 
ID(s) you select
FGD_Elem_byColor Elementsare the same color as the Ele-
ment ID(s) you select
FGD_Prop_byColor Propertiesare the same color as the Prop-
erty ID(s) you select
FGD_Matl_byColor Materialsare the same color as the Mate-
rial ID(s) you select
FGD_Text_byLayer Text entitiesare on the same layer as the 
entity you select
FGD_Point_byLayer Pointsare on the same layer as the 
entity you select
FGD_Curve_byLayer Curvesare on the same layer as the 
entity you select
FGD_Surface_byLayer Surfacesare on the same layer as the 
entity you select
FGD_V olume_byLayer V olumesare on the same layer as the 
entity you select
FGD_Solid_byLayer Solidsare on the same layer as the 
entity you selectGroup Selection Rules
Rule Type Selects Which...
 API-1246  Group Selection Rules
FGD_CSys_byLayer Coordinate Systemsare on the same layer as the 
entity you select
FGD_Node_byLayer Nodesare on the same layer as the 
entity you select
FGD_Elem_byLayer Elementsare on the same layer as the 
entity you select
FGD_Prop_byLayer Propertiesare on the same layer as the 
entity you select
FGD_Matl_byLayer Materialsare on the same layer as the 
entity you select
FGD_Solid_ID Solids you choose - just matches the IDFGD_Solid_byCurve Solids contain the curve IDFGD_Solid_bySurface Solids contain the surface ID
FGD_Curve_onSolid Curvesare contained on the solid/vol-
ume ID
FGD_Surface_onSolid Surfacesare contained on the solid/vol-
ume ID
FGD_Point_byProp Pointshave the property ID as a mesh-
ing attribute
FGD_Curve_byProp Curveshave the property ID as a mesh-
ing attribute
FGD_Surface_byProp Surfaceshave the property ID as a mesh-
ing attribute
FGD_V olume_byProp V olumeshave the property ID as a mesh-
ing attribute
FGD_Solid_byProp Solidshave the property ID as a mesh-
ing attribute
FGD_Contact_ID Connection Regions y ou choose - just matches the ID
FGD_Contact_byColor Connection Regionsare the same color as the Con-
nection Region ID(s) you select
FGD_Contact_byLayer Connection Regionsare on the same layer as the 
entity you select
FGD_CSys_onNode Coordinate Systems are referenced on the nodeIDFGD_CSys_onPoint Coordinate Systems are referenced on the point IDGroup Selection Rules
Rule Type Selects Which...
Group Selection Rules   API-1247
FGD_Elem_byShape Elements have the selected shape
FGD_NODE_ONELEMASORIENT Nodes are used for element orientation
FGD_CONNECTIONPROP_ID Connection Proper ties you choose - just matches the ID
FGD_CONNECTIONPROP_BYCOLOR Connection Propertiesare the same color as the Con-
nection Property ID(s) you select
FGD_CONNECTIONPROP_BYLAYER Connection Propertiesare on the same layer as the 
entity you select
FGD_CONNECTION_ID Connectors you choose - just matches the ID
FGD_CONNECTION_BYCOLOR Connectorsare the same color as the Con-
nector ID(s) you select
FGD_CONNECTION_BYLAYER Connectorsare on the same layer as the 
entity you selec
FGD_CONNECTION_BYPROP Connectorsreference the selected connection 
property
FGD_CONTACT_ONCONNECTION Connection Regionsare used by the selected connec-
tor
FGD_CONNECTION_BYCONTACT Connectorsreference the selected connection 
region
FGD_LAYUP_ID Layups you choo se - just matches the ID
FGD_LAYUP_BYMATL Layups reference the selected material
FGD_ELEM_BYLAYUP Elementsreference a property which refer-
ences the selected layup
FGD_PROP_BYLAYUP Properties reference the selected layup
FGD_LAYUP_ONPROP Layupsare referenced by the selected 
property
FGD_NODE_BYSUPERELEMENT Nodes hav e the same Superelement ID
FGD_LOAD_BYREGION Loadsare applied to selected Bolt 
Region
FGD_CONTACT_BYELEM Connection Regi ons contain the selected element
FGD_CONTACT_BYNODE Connection Regions contain the selected nodeFGD_CONTACT_BYCURVE Connection Re gions contain the selected curve
FGD_CONTACT_BYSURFACE Connection Regions contain the selected surfaceGroup Selection Rules
Rule Type Selects Which...
 API-1248  Group Selection Rules
FGD_CONTACT_BYPROP Connection Regi ons contain the selected property
FGD_ELEM_BYALLNODES Elementshave all of their nodes also be 
selected nodes
FGD_ELEM_BYGLOBALPLY Elementsreference a layup which has the 
selected global ply
FGD_LAYUP_BYGLOBALPLY Layups refer ence the selected global ply
FGD_AEROPROP_ID Aero Properties you choose - just matches the ID
FGD_AEROPROP_BYCOLOR Aero Propertiesare the same color as the Aero 
Property ID(s) you select
FGD_AEROPROP_BYLAYER Aero Propertiesare on the same layer as the 
entity you select
FGD_AEROPANEL_ID Aero Panel/Bodies y ou choose - just matches the ID
FGD_AEROPANEL_BYCOLOR Aero Panel/Bodiesare the same color as the Aero 
Panel ID(s) you select
FGD_AEROPANEL_BYLAYER Aero Panel/Bodiesare on the same layer as the 
entity you select
FGD_AEROPANEL_BYPROP Aero Panel/Bodiesreference the selected connection 
property
FGD_AEROSPLINE_ID Aero Splines you choose - just matches the ID
FGD_AEROSPLINE_BYCOLOR Aero Splinesare the same color as the Aero 
Spline ID(s) you select
FGD_AEROSPLINE_BYLAYER Aero Splinesare on the same layer as the 
entity you select
FGD_AEROSPLINE_BYPANEL Aero Splinesreference the selected aero panel/
body
FGD_AEROCTRLSURF_ID Aero Control Surfa ces you choose - just matches the ID
FGD_AEROCTRLSURF_BYCOLOR Aero Control Surfacesare the same color as the Aero 
Control Surface ID(s) you select
FGD_AEROCTRLSURF_BYLAYER Aero Control Surfacesare on the same layer as the 
entity you select
FGD_CSYS_ONPROP Coordinate Systemsare referenced by the selected 
propertyGroup Selection Rules
Rule Type Selects Which...
Group Selection Rules   API-1249
FGD_CSYS_ONCSYS Coordinate Systemsuse the selected coordinate sys-
tem as the definition coordinate 
system
FGD_SURFACE_ONREGION Surfacesare referenced by the selected 
region
FGD_CURVE_ONREGION Curvesare referenced by the selected 
region
FGD_ELEM_ONREGION Elementsare referenced by the selected 
region
FGD_NODE_ONREGION Nodesare referenced by the selected 
region
FGD_PROP_ONREGION Propertiesare referenced by the selected 
region
FGD_PROP_ONPOINT Propertiesis used as the property meshing 
attribute of the selected point
FGD_PROP_ONCURVE Propertiesis used as the property meshing 
attribute of the selected curve
FGD_PROP_ONSURFACE Propertiesis used as the property meshing 
attribute of the selected surface
FGD_PROP_ONSOLID Propertiesis used as the property meshing 
attribute of the selected solid
FGD_SOLID_BYTYPE Solidsare of the same type as the 
selected type of solid
FGD_NODE_BYTYPE Nodesare of the same type as the 
selected type of node
FGD_POINT_ONSURFACE Pointsare used by the curves of the 
selected surface
FGD_POINT_ONSOLID Pointsare used by the curves of the 
selected solid
FGD_CSYS_ONELEM Coordinate Systemsare referenced by the select ele-
ment
FGD_CONTACT_ONSOLID Regionsuse a surface on, a curve on, or 
the mesh associated the selected 
solidGroup Selection Rules
Rule Type Selects Which...
 API-1250  AddAll
4.6.2.8  AddAll
AddAll
( entityTYPE )
Description:This function adds the IDs of a ll existing entities of a selected ty pe into the current selection set.
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
Output:NoneReturn Code:FE_FAIL Unable to add to current set.Remarks/Usage:All entity IDs are added to the current set. The set is not em ptied before this operation.
Example:None
AddAllExcept   API-1251
4.6.2.9  AddAllExcept
AddAllExcept
( entityTYPE, exceptSET )
Description:This function adds the IDs of all existing entities of a selected type into the curre nt selection set, except 
those already selected in “exceptSET”.
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
INT4 exceptSETThe ID of a set that contains the IDs of entities to not add into this 
set. Specify a negative number to  skip adding a single entity.
Output:NoneReturn Code:FE_FAIL Unable to add to current set.Remarks/Usage:The set is not emptied before this operation.Example:None
 API-1252  AddAllInRange
4.6.2.10  AddAllInRange
AddAllInRange
( entityTYPE, startID, stopID )
Description:This function adds all IDs in a given range specified by a start ID (first ID  in range) and stop ID (last ID 
in range).
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
INT4 startID The first ID in the range of IDs to addINT4 stopID The last ID in the range of IDs to addOutput:
None
Return Code:FE_FAIL Unable to add to current set.Remarks/Usage:Cannot be properly used with set-based Entity Types (i.e., output vectors, individual loads, individual 
boundary conditions, etc), as it w ill always return entities in the given range from Set ID 1.
Example:None
AddAllInRangeInSetV2   API-1253
4.6.2.11  AddAllInRangeInSetV2
AddAllInRangeInSetV2
( entTYPE, nSetID, startID, stopID )
Description:This method replaces AddAllInRangeIn Set. For more information see, Section 2.4, "Working with Out-
put in FEMAP 2020.1 and above". Th is method adds a range of entiti es by ID from an already popu-
lated entity set.
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
INT4 nSetID The ID of th e set object to add from. 
INT4 startID The ID of the entity to start from. INT4 stopID The ID of the entity to stop at. Output:NoneReturn Code:
Remarks/Usage:Example:
None
 API-1254  AddCommon
4.6.2.12  AddCommon
AddCommon
( set1, set2 )
Description:This function adds all IDs th at are in both set1 and set2 to the current selection set.
Input:INT4 set1 ID of the first selection set to check.INT4 set2 ID of the second selection set to check.Output:NoneReturn Code:FE_FAIL Unable to add IDs to the current set.Remarks/Usage:IDs must exist in both set1 and set2  to be added. Only the current set  is updated by this command - the 
other sets remain unchanged.
Example:None
AddNewRemoveCommonSet   API-1255
4.6.2.13  AddNewRemoveCommonSet
AddNewRemoveCommonSet
( addID )
Description:This function adds all IDs in “add ID” that are not in the current set , and removes any IDs that are com-
mon to both sets
Input:INT4 addID ID of the set to combine with the current setOutput:NoneReturn Code:FE_FAIL Unable to add IDs to the current set.Remarks/Usage:This method implements a boolean XOR of the addID set and the current set.
Example:None
 API-1256  AddGroup
4.6.2.14  AddGroup
AddGroup
( entityTYPE, groupID )
Description:This function adds the all of the IDs of a selec ted type from a group into the current selection set.
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types".
INT4 groupID ID of the group to copy IDs from.Output:NoneReturn Code:
FE_NOT_EXISTEither the group did not exist, or no  entities of the selected type were 
in the group.
FE_FAIL Unable to add to current set.Remarks/Usage:All entity IDs from the group are added to the current set. The set is not emptied before this operation.
Example:None
AddArray   API-1257
4.6.2.15  AddArray
AddArray
( numID, arrayID )
Description:This function adds an array of IDs into a selection set.
Input:INT4 numID The number of entr ies in the “arrayID” array
INT4 arrayID[0..numID-1] An array of IDs to be added to the selection set.Output:NoneReturn Code:FE_FAIL arrayID not properly definedFE_NO_MEMORY unable to allocate working me mory to add contents of arrayID to set
Remarks/Usage:This is just like the Add Method, but it can be used to add multiple IDs in one call. 
Example:None
 API-1258  AddCoordinate
4.6.2.16  AddCoordinate
AddCoordinate
( entityTYPE, nCSysID, vbXYZ, vnMode, vdMin, vdMax )
Description:This function adds entity IDs of enti ties which are currently “visible” into  a set as selected by their coor-
dinate locations
Input:
INT4 entityTYPEThe type of entities being included  into the set. For entity informa-
tion, see Section 3.3.6, "Entity Ty pes". Only Point,  Curve, Surface, 
Boundary, Solid, V olume, Node, Elem ent, Property, Material, Coor-
dinate System, Layup, Text, Connection_Region, Connection and 
Connection _Prop entity types are valid.
INT4 nCSysIDThe ID of the coordinate system to select in. For Rectangular sys-
tems, coordinate directions are XY Z. For Cylindrical systems, the 
coordinate directions are R,Theta, Z, and for Spherical, R,Theta,Phi
BOOL vbXYZ[3]Flags to consider selecting based on the associated coordinate direc-
tion. If True, then the other argume nts are used to define the selec-
tion. If False, no selections will be done based on that coordinate.
INT4 vnMode[3]0=Select Above Maximum, 1=Sele ct Below Minimum, 2=Select 
Outside (Below Min,Above Max), 3=Select Between (Above Min 
and Below Max), 4=Select At within Tolerance
REAL8 vdMin[3]The minimum coordinate for most modes. Not used for “Above 
Maximum”. For “Select At” the coordi nate location to select around.
REAL8 vdMax[3]The maximum coordinate for most  modes. Not used for “Below 
Minimum”. For “Select At” the tole rance around the specified loca-
tion that the coordinate must fall within to be selected.
Output:NoneReturn Code:FE_FAIL arrays not properly specifiedFE_BAD_TYPE not a valid entityTYPE for this methodRemarks/Usage:This works just like the coordinate selection  available from the entity selection dialog.
Example:None
AddCoordinate2   API-1259
4.6.2.17  AddCoordinate2
AddCoordinate2
( entityTYPE, nCSysID, vbXYZ, vnMode, vdMin, vdMax )
Description:This function adds entity IDs into a set  as selected by their coordinate locations
Input:
INT4 entityTYPEThe type of entities being included  into the set. For entity informa-
tion, see Section 3.3.6, "Entity Ty pes". Only Point,  Curve, Surface, 
Solid, Node, Element, Property, Material, Coordinate System, 
Layup, Text, Connection_Region, and Connection types are valid.
INT4 nCSysIDThe ID of the coordinate system to select in. For Rectangular sys-
tems, coordinate directions are XY Z. For Cylindrical systems, the 
coordinate directions are R,Theta, Z, and for Spherical, R,Theta,Phi
BOOL vbXYZ[3]Flags to consider selecting based on the associated coordinate direc-
tion. If True, then the other argume nts are used to define the selec-
tion. If False, no selections will be done based on that coordinate.
INT4 vnMode[3]0=Select Above Maximum, 1=Sele ct Below Minimum, 2=Select 
Outside (Below Min,Above Max), 3=Select Between (Above Min 
and Below Max), 4=Select At within Tolerance
REAL8 vdMin[3]The minimum coordinate for most modes. Not used for “Above 
Maximum”. For “Select At” the coordi nate location to select around.
REAL8 vdMax[3]The maximum coordinate for most  modes. Not used for “Below 
Minimum”. For “Select At” the tole rance around the specified loca-
tion that the coordinate must fall within to be selected.
Output:NoneReturn Code:FE_FAIL arrays not properly specifiedFE_BAD_TYPE not a valid entityTYPE for this methodRemarks/Usage:This works just like the coordinate  selection available from the entity selection dialog except it selects 
both visible and non-visible entities.
Example:None
 API-1260  AddAroundPoint
4.6.2.18  AddAroundPoint
AddAroundPoint
( entityTYPE, vBase, nMode, dMin, dMax )
Description:This function adds entity ID s of entities which are currently “visible” into a set as selected by their prox-
imity to a specified location
Input:
INT4 entityTYPEThe type of entities being included  into the set. For entity informa-
tion, see Section 3.3.6, "Entity Ty pes". Only Point,  Curve, Surface, 
Boundary, Solid, V olume, Node, Elem ent, Property, Material, Coor-
dinate System, Layup, Text, Connection_Region, Connection and 
Connection _Prop entity types are valid.
REAL8 vBase[3]The coordinates, in Global Rectangu lar coordinates, of the point to 
search around for selections.
INT4 nMode0=Select Above Maximum (Farther  Than), 1=Select Below Mini-
mum (Closer Than), 2=Select Outside (Below Min,Above Max), 3=Select Between (Above Min and Below Max), 4=Select At within 
Tolerance
REAL8 dMinThe minimum coordinate for most modes. Not used for “Above 
Maximum”. For “Select At” the coordi nate location to select around.
REAL8 dMaxThe maximum coordinate for most  modes. Not used for “Below 
Minimum”. For “Select At” the tole rance around the specified loca-
tion that the coordinate must fall within to be selected.
Output:NoneReturn Code:FE_FAIL arrays not properly specifiedFE_BAD_TYPE not a valid entityTYPE for this methodRemarks/Usage:This works just like the Around Point coordinate selection availa ble from the entity selection dialog.
Example:None
AddAroundPoint2   API-1261
4.6.2.19  AddAroundPoint2
AddAroundPoint2
( entityTYPE, vBase, nMode, dMin, dMax )
Description:This function adds entity IDs into a set as sel ected by their proximity to a specified location
Input:
INT4 entityTYPEThe type of entities being included  into the set. For entity informa-
tion, see Section 3.3.6, "Entity Ty pes". Only Point,  Curve, Surface, 
Solid, Node, Element, Property, Material, Coordinate System, 
Layup, Text, Connection_Region, and Connection types are valid.
REAL8 vBase[3]The coordinates, in Global Rectangu lar coordinates, of the point to 
search around for selections.
INT4 nMode0=Select Above Maximum (Farther  Than), 1=Select Below Mini-
mum (Closer Than), 2=Select Outside (Below Min,Above Max), 
3=Select Between (Above Min and Below Max), 4=Select At within 
Tolerance
REAL8 dMinThe minimum coordinate for most modes. Not used for “Above 
Maximum”. For “Select At” the coordi nate location to select around.
REAL8 dMaxThe maximum coordinate for most  modes. Not used for “Below 
Minimum”. For “Select At” the tole rance around the specified loca-
tion that the coordinate must fall within to be selected.
Output:NoneReturn Code:FE_FAIL arrays not properly specifiedFE_BAD_TYPE not a valid entityTYPE for this methodRemarks/Usage:This works just like the Around Point coordinate selection availa ble from the entity selection dialog 
except it selects both visible and non-visible entities.
Example:None
 API-1262  AddAroundVector
4.6.2.20  AddAroundVector
AddAroundVector
( entityTYPE, vBase, vVec, nMode, dMin, dMax )
Description:This function adds entity ID s of entities which are currently “visible” into a set as selected by their prox-
imity to a specified vector
Input:
INT4 entityTYPEThe type of entities being included  into the set. For entity informa-
tion, see Section 3.3.6, "Entity Ty pes". Only Point,  Curve, Surface, 
Boundary, Solid, V olume, Node, Elem ent, Property, Material, Coor-
dinate System, Layup, Text, Connection_Region, Connection and 
Connection _Prop entity types are valid.
REAL8 vBase[3]The coordinates, in Global Rectangular coordinates, of the base of 
the vector around which to search for selections.
REAL8 vVec[3]The components, in Global Rectangular coordinates, of the vector 
around which to search for selections.
INT4 nMode0=Select Above Maximum (Farther  Than), 1=Select Below Mini-
mum (Closer Than), 2=Select Outside (Below Min,Above Max), 
3=Select Between (Above Min and Below Max), 4=Select At within 
Tolerance
REAL8 dMinThe minimum coordinate for most modes. Not used for “Above 
Maximum”. For “Select At” the coordi nate location to select around.
REAL8 dMaxThe maximum coordinate for most  modes. Not used for “Below 
Minimum”. For “Select At” the tole rance around the specified loca-
tion that the coordinate must fall within to be selected.
Output:NoneReturn Code:FE_FAIL arrays not properly specifiedFE_BAD_TYPE not a valid entityTYPE for this methodRemarks/Usage:This works just like the Around Ve ctor coordinate selection availabl e from the entity selection dialog.
Example:None
AddAroundVector2   API-1263
4.6.2.21  AddAroundVector2
AddAroundVector2
( entityTYPE, vBase, vVec, nMode, dMin, dMax )
Description:This function adds entity IDs into a set as se lected by their proximity to a specified vector
Input:
INT4 entityTYPEThe type of entities being included  into the set. For entity informa-
tion, see Section 3.3.6, "Entity Ty pes". Only Point,  Curve, Surface, 
Solid, Node, Element, Property, Material, Coordinate System, 
Layup, Text, Connection_Region, and Connection types are valid.
REAL8 vBase[3]The coordinates, in Global Rectangular coordinates, of the base of 
the vector around which to search for selections.
REAL8 vVec[3]The components, in Global Rectangular coordinates, of the vector 
around which to search for selections.
INT4 nMode0=Select Above Maximum (Farther  Than), 1=Select Below Mini-
mum (Closer Than), 2=Select Outside (Below Min,Above Max), 
3=Select Between (Above Min and Below Max), 4=Select At within 
Tolerance
REAL8 dMinThe minimum coordinate for most modes. Not used for “Above 
Maximum”. For “Select At” the coordi nate location to select around.
REAL8 dMaxThe maximum coordinate for most  modes. Not used for “Below 
Minimum”. For “Select At” the tole rance around the specified loca-
tion that the coordinate must fall within to be selected.
Output:NoneReturn Code:FE_FAIL arrays not properly specifiedFE_BAD_TYPE not a valid entityTYPE for this methodRemarks/Usage:This works just like the Around Ve ctor coordinate selection availabl e from the entity selection dialog 
except it selects both visible and non-visible entities.
Example:None
 API-1264  AddAroundPlane
4.6.2.22  AddAroundPlane
AddAroundPlane
( entityTYPE, vBase, vVec, nMode, dMin, dMax )
Description:This function adds entity ID s of entities which are currently “visible” into a set as selected by their prox-
imity to a specified plane
Input:
INT4 entityTYPEThe type of entities being included  into the set. For entity informa-
tion, see Section 3.3.6, "Entity Ty pes". Only Point,  Curve, Surface, 
Boundary, Solid, V olume, Node, Elem ent, Property, Material, Coor-
dinate System, Layup, Text, Connection_Region, Connection and 
Connection _Prop entity types are valid.
REAL8 vBase[3]The coordinates, in Global Rectangular coordinates, of a point on the  
plane around which to search for selections.
REAL8 vVec[3]The components, in Global Rectangular  coordinates, of the normal to 
the plane around which to search for selections.
INT4 nMode0=Select Above Maximum (Positive Side), 1=Select Below Mini-
mum (Negative Side), 2=Select Outside (Below Min,Above Max), 
3=Select Between (Above Min and Below Max), 4=Select At within 
Tolerance
REAL8 dMinThe minimum coordinate for most modes. Not used for “Above 
Maximum”. For “Select At” the coordi nate location to select around.
REAL8 dMaxThe maximum coordinate for most  modes. Not used for “Below 
Minimum”. For “Select At” the tole rance around the specified loca-
tion that the coordinate must fall within to be selected.
Output:NoneReturn Code:FE_FAIL arrays not properly specifiedFE_BAD_TYPE not a valid entityTYPE for this methodRemarks/Usage:This works just like the Around Plane coordinate selection available from the entity selection dialog.
Example:None
AddAroundPlane2   API-1265
4.6.2.23  AddAroundPlane2
AddAroundPlane2
( entityTYPE, vBase, vVec, nMode, dMin, dMax )
Description:This function adds entity IDs into a set as se lected by their proximity to a specified plane
Input:
INT4 entityTYPEThe type of entities being included  into the set. For entity informa-
tion, see Section 3.3.6, "Entity Ty pes". Only Point,  Curve, Surface, 
Solid, Node, Element, Property, Material, Coordinate System, 
Layup, Text, Connection_Region, and Connection types are valid.
REAL8 vBase[3]The coordinates, in Global Rectangular coordinates, of a point on the  
plane around which to search for selections.
REAL8 vVec[3]The components, in Global Rectangular  coordinates, of the normal to 
the plane around which to search for selections.
INT4 nMode0=Select Above Maximum (Positive Side), 1=Select Below Mini-
mum (Negative Side), 2=Select Outside (Below Min,Above Max), 
3=Select Between (Above Min and Below Max), 4=Select At within 
Tolerance
REAL8 dMinThe minimum coordinate for most modes. Not used for “Above 
Maximum”. For “Select At” the coordi nate location to select around.
REAL8 dMaxThe maximum coordinate for most  modes. Not used for “Below 
Minimum”. For “Select At” the tole rance around the specified loca-
tion that the coordinate must fall within to be selected.
Output:NoneReturn Code:FE_FAIL arrays not properly specifiedFE_BAD_TYPE not a valid entityTYPE for this methodRemarks/Usage:This works just like the Around Plane coordinate selection available from the entity selection dialog 
except it selects both visible and non-visible entities.
Example:None
 API-1266  AddNodesOnGeometry
4.6.2.24  AddNodesOnGeometry
AddNodesOnGeometry
( entityTYPE, entityID, bCl ear, bFullTree, bBoundaryOnly )
Description:This function adds nodes to  the set which are attached to the specified geometry.
Input:INT4 entityTYPE The type of en tity to find attached nodes.
INT4 entityID ID of entity to find attached nodes.
BOOL bClear Flag to clear the set before adding nodes.
BOOL bFullTreeIf True, the nodes attached to the sub entities are also included ( 
Solid = Surf,Curve,Point: Surf= Curve,Point: Curve=Point )
BOOL bBoundaryOnly Flag to only include nodes at the boundary of the entity.
Output:NoneReturn Code:FE_FAIL Unable to return nodes, possibly none exist.FE_NOT_EXIST No nodes were attached to the entity in the manner you selected.
FE_NO_MEMORY Insufficient memory to  allocate list of attached nodes.
Remarks/Usage:If bClear is false this method can be called  multiple times to build up an accumulated list.
Example:None
AddAllTitleV2   API-1267
4.6.2.25   AddAllTitleV2
AddAllTitleV2
( entityTYPE, nSetID, sFind )
Description:This method replaces AddAllTitleV2. For more information see, Section 2.4, "Working with Output in 
FEMAP 2020.1 and above".  This function adds the selected entities which have matching titles.
Input:
INT4 entityTYPEThe type of entity to ad d. The entity type must have a title to be valid 
for this method.
INT4 nSetIDNormally this should be 1. For sp ecific set-based types such as Load 
and Constraint Definitions, it must be  the ID of the set to search for 
matching titles.
STRING sFindA text string that will be compared to the entity title. If this string is 
found anywhere in the title, that en tity ID will be added to the set. 
Comparisons are not case sensitive.
Output:NoneReturn Code:FE_INV ALID You specified a blank string to matchFE_NOT_EXIST No entities were found th at matched the st ring you supplied.
Remarks/Usage:NoneExample:None
 API-1268  AddAllColor
4.6.2.26  AddAllColor
AddAllColor
( entityTYPE, nSetID, nColor, nColorMatch )
Description:This function adds the selected en tities which match a specified color.
Input:
INT4 entityTYPEThe type of entity to add. The entity  type must have a color to be 
valid for this method.
INT4 nSetIDNormally this should be 1. For sp ecific set-based types such as the 
various load and constraint types, it must be the ID of the set to 
search for matching colors.
INT4 nColorThe color to search for. This number  is a combination of the color, 
linestyle and pattern/transparency
INT4 nColorMatchAny combination of  1=Match Color only, 2=Match Pattern only, 
4=Match Linestyle only.  So 3=Ma tch Color & Pattern, 6=Pattern & 
Linestyle, 5=Color & Linestyle, 7=Match All
Output:NoneReturn Code:FE_NOT_EXIST No entities were found th at matched the co lor you supplied.
Remarks/Usage:NoneExample:None
AddMidsideNodes   API-1269
4.6.2.27  AddMidsideNodes
AddMidsideNodes
( setID )
Description:This function adds the midside nodes that are on selected elementsInput:
INT4 setIDThe ID of a Set object that contai ns the elements that reference the 
midside nodes to add. Alternatively,  if you specify a negative value, 
this is simply the ID of the single element.
Output:NoneReturn Code:
FE_NOT_EXIST No midside nodes were foun d on the elements that you specified.
Remarks/Usage:NoneExample:None
 API-1270  AddVisible
4.6.2.28  AddVisible
AddVisible
( nVuID, entityTYPE, bUseViewDrawEntityOption  )
Description:This function adds entities of the specified type which are visible in the specified view to the current set. 
Input:INT4 nVuID ID of View
INT4 entityTypeType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
BOOL 
bUseViewDrawEntityOptionConsider the visibility flags when determining visible entities
Output:
None
Return Code:FE_NOT_A V AILABLE No active model or view does not existRemarks/Usage:With respect to this function, visible entities are any entities currently visible in the view, even if the 
entities are “off screen” because of the current orient ation or you are zoomed in and only looking at a 
portion of the model.
Example:None
AddConnectedElements   API-1271
4.6.2.29  AddConnectedElements
AddConnectedElements
( void )
Description:This function adds elements that are connected to the elements in the set to the current set
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:Connected elements are th ose elements that share at least on e node with the specified elements
Example:None
 API-1272  AddAllConnectedElements
4.6.2.30  AddAllConnectedElements
AddAllConnectedElements
( void )
Description:This function adds all elements that are connec ted to the elements in the set to the current set
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:Connected elements are those that are connected to th e same body as the specified elements, not just the 
elements that share nodes with the specified elements
Example:None
AddSolidElementsAlongVector   API-1273
4.6.2.31  AddSolidElementsAlongVector
AddSolidElementsAlongVector
( v1, v2, elemSET, bRequireIntersect, bInfiniteVector, bDirectionalVector )
Description:This function adds solid elemen ts along the specified vector.
Input:
REAL8 p1[0..2]The coordinates, in Global Rectangular coordinates, of the base of 
the vector (point 1 of a straight line)
REAL8 p2[0..2]The components, in Global  Rectangular coordinates, of the tip of the 
vector (point 2 of a straight line)
INT4 elemSETID of set of elements which can be added. Alternatively, if you spec-
ify a negative value, this is simply the ID of a single element. Enter a 
value of 0 to allow all solid el ements to potentially be added.
BOOL bRequireIntersectWhen True, vector must hit the el ement. When False, vector must 
only hit the element box (faster but  returns more elements, including 
ones that don't really touch the vector)
BOOL bInfiniteVectorWhen False, vector is really the line segment between the two points, 
intersections beyond the ends are not returned. When True, vector extends to infinity
BOOL bDirectionalVectorOnly used if bInfiniteVector is True. If True, Vector only extends 
beyond point 2, not behind point 1.  If False, extends in both direc-
tions.
Output:NoneReturn Code:FE_NOT_EXIST No elements added to setRemarks/Usage:Midside nodes of parabolic elements are ignored when using the intersection check, therefore, all ele-
ment faces of parabolic elements are te sted the same as those of linear elements.
Example:None
 API-1274  AddConnectedFillets
4.6.2.32  AddConnectedFillets
AddConnectedFillets
( void )
Description:This function adds all connected fillets to the on es specified in the set and adds them to the set
Input:NoneOutput:NoneReturn Code:FE_FAIL No surfaces exist in the current setFE_NOT_EXIST No connected fillets have been foundRemarks/Usage:
Example:
None
AddTangentSurface   API-1275
4.6.2.33  AddTangentSurfaces
AddTangentSurface
( dTol )
Description:This method finds all surfaces tangen t to those within the current set, w ithin the specified tolerance, and 
adds them to the set
Input:REAL8 dTol Tangency tolerance angle, in degreesOutput:NoneReturn Code:FE_FAIL No surfaces exist in the current setFE_INV ALID Tolerance is not between 0.0 and 360.0FE_NOT_EXIST No tangent surfaces have been foundRemarks/Usage:
Example:
None
 API-1276  AddConstrained
4.6.2.34  AddConstrained
AddConstrained
( bInAnySet, nSetID, bExpandBC, enOnType, enMatch, bDOF1, bDOF2, bDOF3, bDOF4, 
bDOF5, bDOF6 )
Description:This function adds constrained nodes, poin ts, curves or surfaces to the current set
Input:
BOOL bInAnySetWhen True, adds entities constraine d in any constraint set. When 
False, only considers entities constr ained in the constraint set speci-
fied for nSetID
INT4 nSetID ID of Constraint set. Ignored if bInAnySet = TRUEBOOL bExpandBC Expand geometric constrai nts when searching for constrained nodes
INT4 enOnTypeConstrained entity type. For more information, see Section 3.3.6, 
"Entity Types". Supported types are Nodes (FT_NODE), Points 
(FT_POINT), Curves (FT_CURVE) , and Surfaces (FT_SURFACE)
INT4 enMatchMatch method for degrees of freed om (See Remarks/Usage section). 
0=Match Any (FMTCH_ANY)
1=Match All (FMTCH_ALL)2=Match Any True (FMTCH_ANY_TRUE)
3=Match All True (FMTCH_ALL_TRUE)
4=Match Any Constrained (FMTCH_ANY_CONSTRAINED)5=Match All Constrained (FMTCH_ALL_CONSTRAINED)
BOOL bDOF1 DOF1 (TX)BOOL bDOF2 DOF2 (TY)BOOL bDOF3 DOF3 (TZ)BOOL bDOF4 DOF4 (RX)BOOL bDOF5 DOF5 (RY)BOOL bDOF6 DOF6 (RZ)Output:NoneReturn Code:FE_BAD_TYPE Unsupported constr ained entity type specified
Remarks/Usage:
AddConstrained   API-1277
How the six degree-of-freedom flags are used for matching constraint s depends on the specified match 
type for enMatch
FMTCH_ALL - Matches when all 6 input DOF exactly match the DOF on an entity (checks for match 
of all constrained and unconstrained DOF)
FMTCH_ALL_TRUE - Matches when a ll of the input DOF specified as TRUE are also constrained on 
an entity (only checks for match of all TRUE DOF)
FMTCH_ALL_CONSTRAINED - Matches entities that have all six DOF constrained (bDOF1-6 are 
ignored)
FMTCH_ANY - Matches when any of the 6 input DOF match any of the DOF on  an entity (checks for 
any match of constrained or unconstrained DOF)
FMTCH_ANY_TRUE - Matches when any of the 6 in put DOF specified as TRUE are also constrained 
on an entity (checks for any match of TRUE DOF)
FMTCH_ANY_CONSTRAINED - Matches entities that  have any DOF constrained (bDOF1-6 are 
ignored)
Example:NoneAddConstrained
( bInAnySet, nSetID, bExpandBC, enOnType, enMatch, bDOF1, bDOF2, bDOF3, bDOF4, 
bDOF5, bDOF6 )
 API-1278  AddLoaded
4.6.2.35  AddLoaded
AddLoaded
( bInAnySet, nSetID, bExpandLoad, enLoadType, enRangeOpt, dMin, dMax )
Description:This function adds loaded  entities to the current set. The type of entity added depends on the load type 
specified and if geometric loads are expanded. 
Input:
BOOL bInAnySetWhen True, adds entities loaded in any load set. When False, only 
considers entities loaded in the load set specified for nSetID
INT4 nSetID ID of load set.  Ignored if bInAnySet = TRUE
BOOL bExpandLoadExpand geometric loads when sea rching for loaded nodes or ele-
ments, as appropriate
INT4 enLoadTypeLoaded entity type. For more information, see Section 3.3.6, "Entity 
Types". Supported types are Nodes (FT_NODE), Elements (FT_ELEM), Points (FT_POINT) , Curves (FT_CURVE), and Sur-
faces (FT_SURFACE)
INT4 enRangeOptSearch Range
0=Any Load (FRNG_ANY) - matches any load value1=Above (FRNG_ABOVE) - matches any load value above dMin
2=Below (FRNG_BELOW) - match es any load value below dMax
3=Between (FRNG_BETWEEN) - ma tches load values between 
dMin and dMax
4=Outside (FRNG_OUTSIDE) - matc hes load values below dMin 
and above dMax
REAL8 dMin Minimum Load ValueREAL8 dMax Maximum Load ValueOutput:NoneReturn Code:FE_INV ALID dMin > dMax for FRNG_BETWEEN and FRNG_OUTSIDEFE_BAD_DATA Invalid option specified for enRangeOptFE_NOT_A V AILABLE Invalid load set specified  or no load sets exist in the model
Remarks/Usage:For loads that consist of multiple components, such as nodal forces, the search is performed on the 
resultant value, not each  individual component
AddLoaded   API-1279
Example:
NoneAddLoaded
( bInAnySet, nSetID, bExpandLoad, enLoadType, enRangeOpt, dMin, dMax )
 API-1280  AddComponentOutputVectorsV2
4.6.2.36  AddComponentOutputVectorsV2
AddComponentOutputVectorsV2
( nFromOutputSetID )
Description:This method replaces AddComponentO utputVectors. For more informa tion see, Section 2.4, "Working 
with Output in FEMAP 2020.1 and above". This method adds any Component and/or Corner Output 
Vectors found in the spec ified Output Set ID, which are compon ent/corner output vectors for Output 
Vector IDs currently in the Set Object.
Input:INT4 nFromOutputSetID Output Set IDOutput:NoneReturn Code:
FE_FAILNo Output Vector IDs are in the Set Object or the Output Vectors 
currently in the Set Ob ject do not have any Component or Corner 
Output Vectors.
Remarks/Usage:This method is si milar to using the Add Component/Corner Results  button in dialog boxes which allow 
you to select any combination of Output Sets and Output Vectors.
Example:None
AddSimilarOutputVectorsV2   API-1281
4.6.2.37  AddSimilarOutputVectorsV2
AddSimilarOutputVectorsV2
( nFromOutputSetID )
Description:This method replaces AddSimilarOutpu tVectors. For more information see, Section 2.4, "Working with 
Output in FEMAP 2020.1 and above". This method adds any “Similar” Output Vectors found in the 
specified Output Set ID, which are “similar” output vectors for Output Vector IDs currently in the Set 
Object. Similar Output Vectors include output vectors at different locations and corners/ends (i.e., Top/
Bottom for shell elements at Centroid and Corners, All Four Stress Recovery Points on End A and End 
B for Bar/Beam elements, All Plie s for laminate elements, etc).
Input:INT4 nFromOutputSetID Output Set IDOutput:None
Return Code:
FE_FAILNo Output Vector IDs are in the Set Object or the Output Vectors 
currently in the Set Ob ject do not have any Similar Output Vectors.
Remarks/Usage:This method is somewhat  similar to using the Add Similar Layer/Ply Results  button and Add Compo-
nent/Corner Results  button in dialog boxes which allow you to  select any combination of Output Sets 
and Output Vectors, but may result in more “similar”  output vectors then expected to be selected.
Example:None
 API-1282  AddComplexOutputVectorsV2
4.6.2.38  AddComplexOutputVectorsV2
AddComplexOutputVectorsV2
( nFromOutputSetID )
Description:This method replaces AddComplexOutputVectors. For more information see, Section 2.4, "Working 
with Output in FEMAP 20 20.1 and above". This method adds complex Output Vectors found in the 
specified Output Set, which corr espond to the Output Vector IDs currently in the Set Object. For 
instance, if Magnitude Output Vectors are currently  in the Set Object, then  the corresponding Phase 
Output Vectors will be added or vice versa. Also, if Real Output Vectors are currently in the Set Object, 
then the corresponding Im aginary Output Vectors will be added and vice versa.
Input:INT4 nFromOutputSetID Output Set IDOutput:None
Return Code:
FE_FAILNo Output Vector IDs are in the Set Object or the Output Vectors 
currently in the Set Ob ject do not have any corresponding complex 
Output Vectors.
Remarks/Usage:
Example:
None
AddBySize   API-1283
4.6.2.39  AddBySize
AddBySize
( entTYPE, nLimitSetID, nMethod, dMinVal, dMaxVal )
Description:This method adds entities from an existing set by a meth od type given a mini mum and maximum value.
Input:
INT4 entityTYPEType of entity to select. Can only  be set to 3 = FT_CURVE, 4 = FT_-
SURFACE, or 39 = FT_SOLID. 
INT4 nLimitSetID The ID of the set object to add from. 
INT4 nMethodType of method to add by. 0 = FPC_ABOVE_MAX, 1 = FPC_BE-
LOW_MIN, 2 = FPC_OUTSIDE, 3 = FPC_BETWEEN, 4 = 
FPC_AT
REAL8 dMinVal  The minimum value used  in the method type for adding.
REAL8 dMaxVal  The maximum value used  in the method type for adding. 
Output:NoneReturn Code:
Remarks/Usage:
Minimum and Maximum values apply to the corresponding entity type, length for Curve, area for Sur-
face, V olume for Solid.
Example:None
 API-1284  AddNodesOnFreeEdges
4.6.2.40  AddNodesOnFreeEdges
AddNodesOnFreeEdges
( elemSetID, bParabolicEdges, bLineElem )
Description:This method adds the nodes found on the free edges in a set of elements to a set.
Input:
INT4 elemSetIDThe ID of a Set object that contai ns the elements that reference the 
nodes on free edges to add. If 0, a ll elements in the model are used. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single element.
BOOL bParabolicEdgesIf True, the computation of Free  Edges includes checking the 
midside nodes (if any). If False, on ly corner nodes are considered.
BOOL bLineElemIf True, then any line elements that lie along an edge are considered 
when deciding if th e edge is “free”.
Output:
NoneReturn Code:FE_FAIL Unable to determine free edgesRemarks/Usage:NoneExample:
Sub Main
    Dim App as femap.model    Set App = feFemap()
    Dim nset As femap.Set
    Set nset = App.feSet    Dim eset As femap.Set
    Set eset = App.feSet
    eset.AddAll (FT_ELEM)
    rc = nset.AddNodesOnFreeEdges (eset.ID, False, True)
    nset.Show (FT_NODE)    
End Sub
AddNodesOnFreeFaces   API-1285
4.6.2.41  AddNodesOnFreeFaces
AddNodesOnFreeFaces
( elemSetID, bParabolicEdges, bPlaneElem )
Description:This method adds the nodes found on the free faces in a set of elements to a set.
Input:
INT4 elemSetIDThe ID of a Set object that contai ns the elements that reference the 
nodes on free faces to add. If 0, a ll elements in the model are used. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single element.
BOOL bParabolicEdgesIf True, the computation of Free Face s includes checking the midside 
nodes (if any). If False, only corner nodes are considered.
BOOL bPlaneElemIf True, then any selected plane elem ents are considered when decid-
ing if the face is “free”.
Output:
NoneReturn Code:FE_FAIL Unable to determine free facesRemarks/Usage:NoneExample:
Sub Main
    Dim App as femap.model    Set App = feFemap()
    Dim nset As femap.Set
    Set nset = App.feSet    Dim eset As femap.Set
    Set eset = App.feSet
    eset.AddAll (FT_ELEM)
    rc = nset.AddNodesOnFreeFaces (eset.ID, False, True)
    nset.Show (FT_NODE)
End Sub
 API-1286  IsAdded
4.6.2.42  IsAdded
IsAdded
( id )
Description:This function checks to see if an ID is currently added into a selection set.Input:INT4 id ID to check.Output:NoneReturn Code:FE_OK ID is added into the selection set.FE_FAIL ID is not added into the selection set.Remarks/Usage:The selection set need not exist to use this function. However, if it do es not, the return code will simply 
be FE_FAIL - the ID is not selected.
Example:None
IsArrayAdded   API-1287
4.6.2.43  IsArrayAdded
IsArrayAdded
( numID, arrayID )
Description:This function checks to see if all IDs from an array are currently added into a selection set.
Input:INT4 numID The number of IDs in the arrayINT4 arrayID[0..numID-1] The array containing IDs to chec k to see if they are in the current Set
Output:NoneReturn Code:FE_OK All IDs in the array are in the current SetFE_FAIL At least one ID from the a rray is not in the current Set
Remarks/Usage:NoneExample:None
 API-1288  IsSetAdded
4.6.2.44  IsSetAdded
IsSetAdded
( nSetID )
Description:This function checks to see if all IDs from a Set are currently added into a selection set.
Input:INT4 nSetID The ID of the Set to chec k to see if all IDs are in this Set
Output:NoneReturn Code:FE_OK All IDs in nSetID are in the current SetFE_FAIL At least one ID from nSetID is not in the current SetRemarks/Usage:NoneExample:None
IsIdenticalSet   API-1289
4.6.2.45  IsIdenticalSet
IsIdenticalSet
( set1 )
Description:This function checks to see if a set has identical entity IDs as another set.
Input:INT4 set1 The ID of the Set to check to see if it contains identical entity IDs
Output:NoneReturn Code:FE_OK Set1 is identicalFE_FAIL Set1 is not identicalRemarks/Usage:NoneExample:None
 API-1290  Select
4.6.2.46  Select
Select
( entityTYPE, clear, title )
Description:This function displays a standard selection dialog box to allow a user to choose entities of a specific type 
and create a selection set.
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
BOOL clearIf True, the set is cleared prior to selection, and only the selected 
entities will be in the set. If False, previously selected entities will be 
displayed in the dialog box for ed iting, or for combining with new 
selections.
STRING titleA text string that will be added to  the title bar of the dialog box to 
give the user more informatio n about what is being selected.
Output:NoneReturn Code:FE_CANCEL The user cancelled the selection.
FE_NOT_EXISTNo entities of the selected type exist.  None were selected and the dia-
log box was not displayed. If clear =True, the selection set will be 
empty.
Remarks/Usage:After the dialog box is closed, the set contains the list of all IDs that were selected. If clear=False, then 
some of the entities could have been selected prior to  the dialog being displaye d. If the user hits “Can-
cel” to close the dialog, then the set contains whatev er it contained before, unless clear=True, in which 
case it contains nothing.
Example:None
SelectID   API-1291
4.6.2.47  SelectID
SelectID
( entityTYPE, title, ID )
Description:This function displays a selection dial og box to allow a user to choose a single entity of a specific type. 
The ID of the entity is returned and is  stored in the current selection set.
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
STRING titleA text string that will be added to  the title bar of the dialog box to 
give the user more informatio n about what is being selected.
Output:INT4 ID The ID of the entity that was selected.Return Code:FE_CANCEL The user cancelled the selection.
FE_NOT_EXISTNo entities of the selected type exist.  None were selected and the dia-
log box was not displayed.
Remarks/Usage:This function displays one of two different dialog boxes, depending on  the entity type that you choose. 
For entities that have titles, like properties or materials,  the dialog box will cont ain a list of the available 
entities along with their titles. For other entities, like  nodes or elements, a simple  dialog box is displayed 
so that the ID can be typed or picked.
Example:None
 API-1292  SelectIDWithNew
4.6.2.48  SelectIDWithNew
SelectIDWithNew
( entityTYPE, title, ID )
Description:This function displays a selection dialog box (inclu ding the ability for the user  to create a new entity 
from within the dialog, when applicab le) to allow a user to choose a si ngle entity of a specific type. The 
ID of the entity is returned and stored in the current selection set
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
STRING titleA text string that will be added to  the title bar of the dialog box to 
give the user more informatio n about what is being selected.
Output:INT4 ID The ID of the entity that was selected.Return Code:FE_CANCEL The user cancelled the selection.FE_BAD_TYPE An invalid en tity type was specified
Remarks/Usage:For supported entities, this  method is identical to the SelectID method with the exceptions of a new 
entity icon being displayed in the di alog and the dialog will be displaye d even if no entities of the speci-
fied type exis t the database. 
Supported entities include:
Layer
PropertyMaterial
Coordinate System
Global PlyLoad Set
Constraint Set
Connection PropertyConnection Region
Example:None
SelectIDInSetV2   API-1293
4.6.2.49  SelectIDInSetV2
SelectIDInSetV2
( entityTYPE, title, nInSetID, ID )
Description:This method replaces Select IDInSet. For more informat ion see, Section 2.4, "Working with Output in 
FEMAP 2020.1 and above". This function displays a selection dialog box to allow a user to choose a 
single entity of a specific type. The ID of the entity is returned and is stored in the current selection set.
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
STRING titleA text string that will be added to  the title bar of the dialog box to 
give the user more informatio n about what is being selected.
INT4 nInSetIDSelect the entity from the specified  SetID - for example an Output 
Vector from a specific Output Set, or  a Load or Constraint Definition 
from a specific Load or Constraint Set
Output:INT4 ID The ID of the entity that was selected.Return Code:FE_CANCEL The user cancelled the selection.
FE_NOT_EXISTNo entities of the selected type exist.  None were selected and the dia-
log box was not displayed. If clear =True, the selection set will be 
empty.
Remarks/Usage:This function is designed to be us ed to select a single item (i.e., a Load Definition, Constraint Defini-
tion, Output Vector) which exists in a specific “Set” in  the database (i.e., Load Set, Constraint Set, Out-
put Set). For entities which are not “Set-based”, nInSet ID must be set to “1”, therefore, there is no 
benefit to use the method inst ead of the SelectID method.
Depending on the type of entity y ou choose, one of two different dial og boxes will be displayed. For 
entities that have titles, like properties or materials,  the dialog box will contain a list of the available 
entities along with their titles. For other entities, like  nodes or elements, a simple  dialog box is displayed 
so that the ID can be typed or picked.
Example:None
 API-1294  SelectMultiIDV2
4.6.2.50  SelectMultiIDV2
SelectMultiIDV2
( entityTYPE, entitySET, title )
Description:This method replaces Sele ctMultiID. For more information see, Sec tion 2.4, "Working with Output in 
FEMAP 2020.1 and above". This function displays a multi-selection dialog box to allow a user to 
choose one or more entities of a specific type. The ID s of the selected entities are stored in the current 
selection set.
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
INT4 entitySETThe setID associated with the entities you want to select. For most 
entities this is 1, however for some  like Loads and Constraints, they 
may be stored in other sets.
STRING titleA text string that will be added to  the title bar of the dialog box to 
give the user more informatio n about what is being selected.
Output:NoneReturn Code:FE_CANCEL The user cancelled the selection.Remarks/Usage:This function will work for most entity types, however in most cases you should only use it for entities 
with titles. If you use it for entities like Nodes or Elements, you will just see a potentially large list of 
numbers which are not very  useful for selection.
Example:None
SelectOutputVectorIDV2   API-1295
4.6.2.51  SelectOutputVectorIDV2
SelectOutputVectorIDV2
( title, outsetID, limitOutputType, limitComplex, limitToEntity, allowCorner, selID )
Description:This method replaces SelectOutput VectorID. For more information s ee, Section 2.4, "Working with 
Output in FEMAP 2020.1 and above". This function di splays a selection dialog box to allow a user to 
choose an output vector. The ID of the entity is re turned and is stored in the current selection set.
Input:
STRING titleA text string that will be added to  the title bar of the dialog box to 
give the user more informatio n about what is being selected.
INT4 outsetIDThe ID of the Output Set containing the list of possible vectors to 
select.
INT4 limitOutputTypeReduces list of output vectors show n to the specified type (0=All, 
1=Disp, 2=Accel, 3=Force, 4=Stress, 5=Strain, 6=Temp)
INT4 limitComplexReduces list of output vectors shown based on type of real or com-
plex data they contain (0=Magnitude, 1=Phase, 2=Real, 3=Imagi-
nary, 4=Any)
INT4 limitToEntityReduces list of output vectors to th ose containing data on the speci-
fied entity type
BOOL allowCorner If True, output vectors at element corners will also be included
Output:INT4 selID The ID of the selected output vector.Return Code:FE_CANCEL The user cancelled the selection.FE_NOT_EXIST No output vectors existed in the specified output set.Remarks/Usage:NoneExample:None
 API-1296  SelectList
4.6.2.52  SelectList
SelectList
( nNumEntity, entityTYPE )
Description:This function displays a selection dialog box to allo w a user to choose a specified number of entities of 
a specific type. The IDs of the selected entiti es are stored in the current selection set.
Input:INT4 nNumEntity Number of entities to be selected.
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
Output:None
Return Code:
FE_CANCEL The user cancelled the selection.Remarks/Usage:The dialog box that is displayed by  this method automatically closes  when “nNumEntity” entities have 
been selected.
Example:None
Clear   API-1297
4.6.2.53  Clear
Clear
( void )
Description:This function simply removes all selectio ns and exclusions from the current set.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-1298  Remove
4.6.2.54  Remove
Remove
( id )
Description:This function removes an ID from a selection set.Input:INT4 id ID to remove from the selection set.
Output:NoneReturn Code:FE_FAIL ID specifies an invalid value.Remarks/Usage:Any ID can be removed from a selection set. Although it  has no effect, it is not an  error to remove an ID 
that was not currently added to a selection set, or even removing from a selec tion set that does not exist.
Example:None
RemoveRange   API-1299
4.6.2.55  RemoveRange
RemoveRange
( startID, stopID, increment )
Description:This function removes a rang e of IDs from a selection set.
Input:INT4 startID The first ID to  remove from the selection set.
INT4 stopID The last ID to remove from the selection set.
INT4 incrementThe ID increment between startID and stopID. Must be a positive 
number. 
Output:NoneReturn Code:FE_FAIL ID specifies an invalid value.Remarks/Usage:This is just like the Remove Method, but it ca n be used to remove mu ltiple IDs in one call. 
Example:None
 API-1300  RemoveArray
4.6.2.56  RemoveArray
RemoveArray
( nNumID, arrayID )
Description:This function removes a list of IDs speci fied in an array from a selection set.
Input:INT4 nNumID The number of IDs in the array to be removed
INT4 arrayID[0..nNumID-1] The array of IDs to be removed
Output:NoneReturn Code:FE_FAIL Unable to retrieve specified number of IDs from array.FE_NO_MEMORY Unable to  process the array.
Remarks/Usage:This is just like the Remove Method, but it ca n be used to remove mu ltiple IDs in one call. 
Example:None
RemoveSet   API-1301
4.6.2.57  RemoveSet
RemoveSet
( removeID )
Description:This function removes all of the selected  IDs in another set from the current set.
Input:INT4 removeID ID of the selection se t containing the IDs to remove.
Output:NoneReturn Code:FE_FAIL Unable to remove IDs from the specified set.Remarks/Usage:This function removes all IDs in th e removeID set that are currently selected. If removeID contains IDs 
that are not currently selected, they are skipped. This is not an error. The removeID set remains 
unchanged during this command - only the current set is updated.
Example:None
 API-1302  RemoveRule
4.6.2.58  RemoveRule
RemoveRule
( id, ruleID )
Description:This function removes from a selection set by using one of the standard group selection rules
Input:
INT4 idThe ID that you are specifying. The interpretation of this value 
depends on the type of rule that you select.
INT4 ruleIDID of a selection rule. For more information, see Section 4.6.2.7, 
"Group Sele ction Rules"
Output:None
Return Code:
FE_FAIL Rule does not exist or cannot be evaluatedRemarks/Usage:This function is similar to AddRul e, however instead of adding IDs to the set, it removes them from the 
set
Example:None
RemoveSetRule   API-1303
4.6.2.59  RemoveSetRule
RemoveSetRule
( removeID, ruleID )
Description:This function removes from a selection set by using one of the standard group selection rules. It uses the 
IDs from another selection set to  operate on the current one
Input:
INT4 idThe selection set where the IDs will be found. The interpretation of 
these IDs depends on the type of rule that you select.
INT4 ruleIDID of a selection rule. For more information, see Section 4.6.2.7, 
"Group Sele ction Rules"
Output:NoneReturn Code:FE_FAIL Rule does not exist or cannot be evaluatedRemarks/Usage:This function is similar to AddSetRule, however in stead of adding IDs to the set, it removes them from 
the set
Example:None
 API-1304  RemoveNotCommon
4.6.2.60  RemoveNotCommon
RemoveNotCommon
( nSetID )
Description:This function removes any IDs that are not in both the curre nt Set and the specified Set
Input:INT4 nSetID ID of a Set that is checked fo r IDs that are common to the current Set
Output:NoneReturn Code:FE_FAIL Unable to remove IDs from the specified set.Remarks/Usage:This function removes all IDs from th e current Set that are not in the se lected Set. The result is that the 
current Set will only contain IDs that are common to both Sets. The Set nSetID re mains un changed 
during this command - only the current set is updated.
Example:None
RemoveNotCommonToGroup   API-1305
4.6.2.61  RemoveNotCommonToGroup
RemoveNotCommonToGroup
( entityType, groupID )
Description:This function removes any IDs that are not in both the curre nt Set and the specified Group
Input:
INT4 entityTYPEThe type of entities in the Group be ing tested. For entity information, 
see Section 3.3.6, "Entity Types"
INT4 groupID The ID of the group to testOutput:NoneReturn Code:FE_FAIL Unable to remove IDs from the specified set.FE_NOT_EXIST There are no entities of  the selected type in the Group
Remarks/Usage:This function removes all IDs from the current Set that are not in th e selected Group of the specified 
entityTYPE. The result is that the current Set will on ly contain IDs that are common to the Set and the 
Group. The Group remains unchanged during this  command - only the current set is updated.
Example:None
 API-1306  RemoveGroup
4.6.2.62  RemoveGroup
RemoveGroup
( entityType, groupID )
Description:This function removes any IDs that are in a Group
Input:
INT4 entityTYPEThe type of entities in the Group be ing tested. For entity information, 
see Section 3.3.6, "Entity Types"
INT4 groupID The ID of the group to testOutput:NoneReturn Code:FE_FAIL Unable to remove IDs from the specified set.FE_NOT_EXIST There are no entities of  the selected type in the Group
Remarks/Usage:This function removes all IDs fro m the current Set that are in th e selected Group and entityType. The 
Group is unchanged.
Example:None
RemoveInternalCurves   API-1307
4.6.2.63  RemoveInternalCurves
RemoveInternalCurves
(  )
Description:This function removes the IDs of any curves th at are internal to a boundary/compound surface
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:NoneExample:None
 API-1308  RemoveNotVisible
4.6.2.64  RemoveNotVisible
RemoveNotVisible
(  )
Description:
This function removes entities of the specified type which are not visible in the specified view 
from the current set.
Input:
INT4 nVuID ID of View
INT4 entityTypeType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types".
BOOL 
bUseViewDrawEntityOptionConsider the visibility flags when determining visible entities.
Output:
None
Return Code:FE_NOT_A V AILABLE No active model or view does not existRemarks/Usage:
With respect to this function, visi ble entities are any entities curr ently visible in the view, even 
if the entities are “off screen” because of the current orientatio n or you are zoomed in and only 
looking at a portion of the model.
Example:
None
HasCommon   API-1309
4.6.2.65  HasCommon
HasCommon
( nSetID )
Description:This function checks to see if there are any common IDs between two SetsInput:INT4 nSetID The ID of the Set to chec k for common IDs with the current Set
Output:NoneReturn Code:FE_OK Common IDs exist between the two SetsFE_FAIL There are no common IDs in the Sets.Remarks/Usage:Neither Set is changed by this method, it simply looks for the same ID in both Sets.
Example:None
 API-1310  HasNotCommon
4.6.2.66  HasNotCommon
HasNotCommon
( nSetID )
Description:This function checks to see if there are any IDs in  the current Set that are not in the specified Set
Input:INT4 nSetID The ID of the Set to check with the current Set
Output:NoneReturn Code:FE_OK At least one ID in the current Set is not in the specified SetFE_FAIL All IDs in the current Set are also in the specified SetRemarks/Usage:Neither Set is changed by this method, it simply looks for common IDs in both Sets.
Example:None
Reload   API-1311
4.6.2.67  Reload
Reload
( oldSet )
Description:This function reloads a saved selec tion set. This method is obsole te and should be replaced with 
Reload2(). 
Input:
INT4 oldSetThe ID of the selection set to relo ad. This ID can be determined by 
querying the ID property of a set.
Output:NoneReturn Code:
FE_FAIL The oldSet selection set does not exist or is empty.
Remarks/Usage:Selection sets can be made to persist across program s or modeling sessions using the Save property. If a 
set is “saved”, it can be reloaded with this method.
If you reload a Set with this method , you must manually also set “Save” to True if you want the set to 
persist after the object you reload into is destroyed.
Do not use this method in a loop where the Set object  is reused to load multipl e saved sets. This process 
is unsupported and will cause random overwrites and lo ss of saved set data. If this is required you 
should use Reload2() or code so Reload() is only called once per Set object, setting the “save” property 
then destroying the object. See Example. 
Example:
 API-1312  Reload
Dim App As femap.model
Sub MainSet App = feFemap()
    
For  i = 1 To 20    getSet( i )
    Next i
End Sub
Sub getSet( i )
Dim fs As femap.Set
Set fs = App.feSet
Dim s As String
rc = fs.Reload( i )
fs.Save = Trues = "ID = " + Str( fs.ID ) + ", Count = " + Str( fs.Count )App.feAppMessage ( FCM_COMMAND,  s )
End SubReload
( oldSet )
Reload2   API-1313
4.6.2.68  Reload2
Reload2
( oldSet )
Description:This function reloads a saved selectio n set. This function replaces Reload()
Input:
INT4 oldSetThe ID of the selection set to relo ad. This ID can be determined by 
querying the ID property of a set.
Output:NoneReturn Code:FE_FAIL The oldSet selection set does not exist or is empty.Remarks/Usage:Selection sets can be made to persist across program s or modeling sessions using the Save property. If a 
set is “saved”, it can be reloaded with this method.
If you reload a Set with this method , you must manually also set “Save” to True if you want the set to 
persist after the object you reload into is destroyed.
This Method replaces Reload and is sa fe to use in a loop where a single  Set object is used to load multi-
ple saved sets.
Example:Sub Main
    Dim App As femap.model
    Set App = feFemap()    Dim fs As femap.Set
    Set fs = App.feSet
    Dim s As String    Dim rc As Long
    For  i = 1 To 10000
       rc = fs.Reload2( i )
       If rc = FE_OK Then
          If fs.Count() > 0 Then             s = "ID = " + Str( fs.ID ) + ", Count = " + Str( fs.Count )
             App.feAppMessage ( FCM_COMMAND,  s )
          End If       End If
    Next i
End Sub
 API-1314  Reset
4.6.2.69  Reset
Reset
( void )
Description:This function resets the next pointer so that the next call to next will return the first entry in a selection 
set.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:To find the first ID in a set, you must use the Rese t method before calling Next . If you have just created 
a set and have not used Next, it is already reset.
Example:None
Next   API-1315
4.6.2.70  Next
Next
( void )
Description:This function return s the next selected ID in a selection set
Input:NoneOutput:NoneReturn Code:Any Positive Number The next selected ID.FE_FAIL No additional IDs were selected.Remarks/Usage:To find the first ID in a set, you must use the Rese t method before calling Next . If you have just created 
a set and have not used Next, it is already reset.This function updates in ternal pointers in the Set so that if y ou call it repeatedly it will walk through all 
IDs.
Example:None
 API-1316  NextAfter
4.6.2.71  NextAfter
NextAfter
( nStartID )
Description:This function returns th e next higher ID after the specified starting ID
Input:INT4 nStartID The starting IDOutput:NoneReturn Code:Any Positive Number The next ID hi gher/larger than the starting ID.
FE_FAIL No additional IDs were selected.Remarks/Usage:Unlike Next( ), this method does not rely on the internal pointers, nor R eset( ) - it simply uses the start-
ing ID that you supply.
Example:None
NextEmptyAfter   API-1317
4.6.2.72  NextEmptyAfter
NextEmptyAfter
( nStartID )
Description:This function returns th e first empty ID after the specified starting ID
Input:INT4 nStartID The starting IDOutput:NoneReturn Code:Any Positive Number The next empty ID higher/larger than the starting ID.
FE_FAIL No additional IDs were selected.Remarks/Usage:Unlike Next( ), this method does not rely on the internal pointers, nor R eset( ) - it simply uses the start-
ing ID that you supply.
Example:None
 API-1318  NextID
4.6.2.73  NextID
NextID
( void )
Description:This function returns the next selected ID in a selection set.
Input:NoneOutput:NoneReturn Code:Any Positive Number The next selected ID.FE_FAIL No additional IDs were selected.Remarks/Usage:This function is just like Next() except that it just re turns the next ID. It does not increment the internal 
pointers, so if you repeatedly call NextID ( ), you will get th e same ID every time.
Example:None
Prev   API-1319
4.6.2.74  Prev
Prev
( void )
Description:This function returns the previous selected ID in a selection set
Input:NoneOutput:NoneReturn Code:Any Positive Number The previous selected ID.FE_FAIL No additional IDs were selected.Remarks/Usage:To find the last ID in a set, you must use the Reset method before calling Prev. If you have just created a 
set and have not used Prev, it is already reset.This function updates in ternal pointers in the Set so that if y ou call it repeatedly it will walk through all 
IDs.
Example:None
 API-1320  PrevBefore
4.6.2.75  PrevBefore
PrevBefore
( nStartID )
Description:This function returns th e next lower ID after the specified starting ID
Input:INT4 nStartID The starting IDOutput:NoneReturn Code:Any Positive Number The next ID lo wer/smaller than the starting ID.
FE_FAIL No additional IDs were selected.Remarks/Usage:Unlike Prev( ), this method does no t rely on the internal pointers, no r Reset( ) - it simply uses the start-
ing ID that you supply.
Example:None
PrevID   API-1321
4.6.2.76  PrevID
PrevID
( void )
Description:This function returns the previous selected ID in a selection set.
Input:NoneOutput:NoneReturn Code:Any Positive Number The previous selected ID.FE_FAIL No additional IDs were selected.Remarks/Usage:This function is just like Prev() except that it just returns the previous ID. It does not increment the inter-
nal pointers, so if you repeatedly call Pr evID( ), you will get the same ID every time.
Example:None
 API-1322  First
4.6.2.77  First
First
( void )
Description:This function returns the first selected ID in a selection set.Input:NoneOutput:NoneReturn Code:Any Positive Number The first selected ID.
FE_FAIL No IDs were selected.Remarks/Usage:The first ID is the lowest number, not the first entity added to the set. Calling this method is the same as 
calling Reset( ) followed by Next( ).
Example:None
Last   API-1323
4.6.2.78  Last
Last
( void )
Description:This function returns the last selected ID in a selection set.Input:NoneOutput:NoneReturn Code:Any Positive Number Th e last selected ID.
FE_FAIL No IDs were selected.Remarks/Usage:The last ID is the highest number, no t the last entity added to the set.
Example:None
 API-1324  Match
4.6.2.79  Match
Match
( setID )
Description:This function tests to see if the cont ents of set setID match the current set.
Input:INT4 setID ID of the set to compare to this set.Output:NoneReturn Code:FE_FAIL Sets do not match.Remarks/Usage:To match, the two sets must include all of the same IDs.Example:None
Copy   API-1325
4.6.2.80  Copy
Copy
( origID )
Description:This function makes a duplic ate copy of a selection set.
Input:INT4 origID ID of the selection set to duplicate.Output:NoneReturn Code:FE_FAIL Unable to create the specified set.Remarks/Usage:If the current set already existed and contained selected IDs, those will be deleted prior to copying. The 
resulting copy will always match the original.
Example:None
 API-1326  CopyToClipboard
4.6.2.81  CopyToClipboard
CopyToClipboard
( bAsList )
Description:This function copies the IDs of the se lected entities to the Clipboard as text.
Input:
BOOL bAsListIf True, the IDs are placed on the clip board in a format that is one ID 
per line. If False, ranges of consecutive IDs are placed on the clip-
board in the format “startID, st opID, increment” on each line. 
“stopID” is zero if a single ID is selected in this format.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
Count   API-1327
4.6.2.82  Count
Count
( void )
Description:This function counts the number of IDs that are currently selected in the set.
Input:NoneOutput:NoneReturn Code:count The number of IDs in the set.Remarks/Usage:This function simply looks at each of the selected IDs and counts the number that it finds.
Example:None
 API-1328  CountCommon
4.6.2.83  CountCommon
CountCommon
( setID )
Description:This function counts the number of IDs that are in  the current set that are also in the specified set.
Input:INT4 setID The ID of another set to compare this set to.Output:NoneReturn Code:count The number of common IDsRemarks/Usage:NoneExample:None
CountNotCommon   API-1329
4.6.2.84  CountNotCommon
CountNotCommon
( setID )
Description:This function counts the number of IDs that are in  the current set that are not in the specified set.
Input:INT4 setID The ID of another set to compare this set to.Output:NoneReturn Code:count The number of IDs that are not in both setsRemarks/Usage:NoneExample:None
 API-1330  DeleteAll
4.6.2.85  DeleteAll
DeleteAll
( void )
Description:This function simply deletes Se ts which are saved in the model.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:Great caution must be used when using this method.  It deletes ALL sets in the model without any 
further notification. Any set objects in your program file will also be cleared. 
Example:None
GetArray   API-1331
4.6.2.86  GetArray
GetArray
( numID, arrayID )
Description:This function populates an a rray of IDs from a selection set.
Input:NoneOutput:INT4 numID The number of entries in the setINT4 arrayID[0..numID-1] The array of all IDs in the set.
Return Code:FE_NOT_EXIST No IDs are in the setFE_NO_MEMORY Unable to allocate workin g memory to retrieve contents of set
Remarks/Usage:NoneExample:None
 API-1332  ConvertToAllCurves
4.6.2.87  ConvertToAllCurves
ConvertToAllCurves
( void )
Description:This function expands the current Se t to contain all curves referenced by what is currently in the Set
Input:NoneOutput:NoneReturn Code:FE_OK Expanded SetRemarks/Usage:If any Combined Curves are in the Set,  then all curves used to define them are also added. If any Curves 
used to define Combined Curves are in the Set, then those Co mbined Curves are also added.
Example:None
ConvertToCombinedCurves   API-1333
4.6.2.88  ConvertToCombinedCurves
ConvertToCombinedCurves
( void )
Description:This function replaces curves that are used to define Combined Curves with the Combined Curve.
Input:NoneOutput:NoneReturn Code:FE_OK Expanded SetRemarks/Usage:If any Curves used to define Combined Curves are in  the Set, then those curves are removed, and the 
Combined Curves are added. Other Cu rves, either Combined Curves them selves, or curves not used to 
define Combined Curves are not changed in the Set.
Example:None
 API-1334  ConvertToCombinedCurvesOnly
4.6.2.89  ConvertToCombinedCurvesOnly
ConvertToCombinedCurvesOnly
( void )
Description:This function replaces curves that are used to de fine Combined Curves with  the Combined Curve and 
removes all others.
Input:NoneOutput:NoneReturn Code:FE_OK Expanded SetRemarks/Usage:If any Curves used to define Combined Curves are in  the Set, then those curves are removed, and the 
Combined Curves are added. Other Cu rves, either Combined Curves them selves, or curves not used to 
define Combined Curves ar e all removed from the Set.
Example:None
ConvertToInternalCurves   API-1335
4.6.2.90  ConvertToInternalCurves
ConvertToInternalCurves
( void )
Description:This function replaces any Combin ed Curves in the Set with the curves used to define them.
Input:NoneOutput:NoneReturn Code:FE_OK Expanded SetRemarks/Usage:If any Combined Curves are in the Se t, then those curves are removed,  and the curves used to define 
them are added. Other curves are not changed in the Set.
Example:None
 API-1336  ConvertToAllSurfaces
4.6.2.91  ConvertToAllSurfaces
ConvertToAllSurfaces
( void )
Description:This function expands the current Se t to contain all surfaces (Parasolid or boundary surfaces) referenced 
by the surfaces currently in the set.
Input:NoneOutput:NoneReturn Code:FE_OK Expanded SetRemarks/Usage:If any Combined Surfaces are in the Se t, then all surfaces used to define them are also added. If any Sur-
faces used to define Combined Surfaces are in the Set, then those Combined Surfaces are also added.
Example:None
ConvertToBoundarySurfaces   API-1337
4.6.2.92  ConvertToBoundarySurfaces
ConvertToBoundarySurfaces
( void )
Description:This function replaces surfaces that are used to de fine Combined Surfaces with the Combined Surface.
Input:NoneOutput:NoneReturn Code:FE_OK Expanded SetRemarks/Usage:If any Surfaces used to define Combined Surfaces are in the Set, then those surfaces are removed, and 
the Combined Surfaces are added. Other Surfaces, either Combined Surfaces themselves, or surfaces 
not used to define Combined Surfaces are not changed in the Set.
Example:None
 API-1338  ConvertToBoundarySurfacesOnly
4.6.2.93  ConvertT oBoundarySurfacesOnly
ConvertToBoundarySurfacesOnly
( void )
Description:This function replaces surfaces that are used to de fine Combined Surfaces with the Combined Surface 
and removes all others.
Input:NoneOutput:NoneReturn Code:FE_OK Expanded SetRemarks/Usage:If any Surfaces used to define Combined Surfaces are in the Set, then those surfaces are removed, and 
the Combined Surfaces are added. Other Surfaces, either Combined Surfaces themselves, or surfaces 
not used to define Combined Su rfaces are all removed from the Set.
Example:None
ConvertToInternalSurfaces   API-1339
4.6.2.94  ConvertToInternalSurfaces
ConvertToInternalSurfaces
( void )
Description:This function replaces any Combined Surfaces in the Set with the surfaces used to define them.
Input:NoneOutput:NoneReturn Code:FE_OK Expanded SetRemarks/Usage:If any Combined Surfaces are in the Set, then tho se surfaces are removed, and the surfaces used to 
define them are added. Other surfaces are not changed in the Set.
Example:None
 API-1340  EmptyBlock
4.6.2.95  EmptyBlock
EmptyBlock
( nStartID, nCount, nFirstEmptyID )
Description:This function returns the first empty ID of an empty block of IDs of a specified size, after the specified 
starting ID
Input:INT4 nStartID ID used to begin searchingINT4 nCount Size of empty block needed to be foundOutput:
INT4 nFirstEmptyIDFirst available ID in the set where an empty block of the size speci-
fied in nCount exists
Return Code:
FE_FAIL A block of the given size could not be found in the search range.Remarks/Usage:As an example, a set object contains IDs 1-10 and 12 -20. If nCount is set to 1, then the nFirstEmptyID 
will be returned as 11, as that is the first ID where an empty block of 1 is avai lable. If, however, nCount 
is set to 2, then the nFirstEmptyID will be returned as 21, as there are no empty blocks of 2 IDs available 
within the IDs already entered into the set. Finally, if nStartID is set to 12 and nCount is set to 1, then 
nFirstEmptyID will be returned as 21, as the availa ble block at 11 is not included in the search.
Example:None
Debug   API-1341
4.6.2.96  Debug
Debug
( void )
Description:This function simply writes all of the ID s contained in a Set to the Message Window
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:This method is really only  intended for Debugging. There is no pa rticular formatting of the list of IDs 
(which can be quite long), it is simply dumped in a co mma-separated fashion to the Message Window
Example:None
 API-1342  AddAllSavedSetIDs
4.6.2.97  AddAllSavedSetIDs
AddAllSavedSetIDs
( void )
Description:This method will add the IDs of the Sets currently saved to this set.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
Show   API-1343
4.6.2.98  Show
Show
( entityType )
Description:Uses the current settings of the “Window, Show Entiti es” command to highlight all of the entities of the 
selected entity type currently in th e group, in the graphics window
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
Output:NoneReturn Code:
Remarks/Usage:
Example:
None
 API-1344  ShowAutoscale
4.6.2.99  ShowAutoscale
ShowAutoscale
( entityType )
Description:Uses the current settings of the “W indow, Show Entities” command, ot her than the “Aut oscale” option, 
to highlight all of the entities of the selected entity ty pe currently in the group, in the graphics window. 
This method is essentially identical to the Show method, with th e only different being this method 
always autoscales to show on ly the entities in the group.
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
Output:NoneReturn Code:
Remarks/Usage:Example:
None
IsEmpty   API-1345
4.6.2.100  IsEmpty
IsEmpty
( void )
Description:This method checks if a set has no entities added to it, thus is empty.
Input:NoneOutput:NoneReturn Code:FE_OK Set is empty.FE_FAIL Set is not empty (i.e., has entities).Remarks/Usage:
Example:
None
 API-1346  IsNotEmpty
4.6.2.101  IsNotEmpty
IsNotEmpty
( void )
Description:This method checks if a set has one or mo re entities added to it, thus is NOT empty.
Input:NoneOutput:NoneReturn Code:FE_OK Set is NOT empty.FE_FAIL Set is empty (i.e., it does NOT have entities).Remarks/Usage:API developers should employ this method instead of testing whether Count() > 0.Example:None
HasOne   API-1347
4.6.2.102  HasOne
HasOne
( void )
Description:This method checks if a set h as only one entity added to it.
Input:NoneOutput:NoneReturn Code:FE_OK Set has one entity added to it.FE_FAIL Set does NOT have one entity added to it.Remarks/Usage:API developers should employ  this method instead of testing whether Count() == 1.
Example:None
 API-1348  HasMultiple
4.6.2.103  HasMultiple
HasMultiple
( void )
Description:This method checks if a set has multiple entities added to it.
Input:NoneOutput:NoneReturn Code:FE_OK Set has multiple entities added to it.FE_FAIL Set does NOT have multiple entities added to it.Remarks/Usage:API developers should employ this method instead of testing whether Count() > 1.Example:None
AddAllAnalysisCases   API-1349
4.6.2.104  AddAllAnalysisCases
AddAllAnalysisCases
( nAnalysisSetID )
Description:This method adds the ID s of all Analysis Cases in the specifi ed Analysis Set to the Set object.
Input:INT4 nAnalysisSetID ID of Analysis Set containing Analysis Cases to be addedOutput:NoneReturn Code:FE_NOT_EXIST No analysis cases currently exist in the Analysis SetRemarks/Usage:NoneExample:None
 API-1350  AddSetFromModel
4.6.2.105  AddSetFromModel
AddSetFromModel
( addID, nModelID, bClear )
Description:This method adds th e IDs of an set which exists in anothe r model into a set in  the current model.
Input:INT4 addID ID of a Set that exists in the model specified in nModelIDINT8 nModelID Model identifier
BOOL bClearIf True, clears the set in the current  model before adding IDs from set 
in the other model
Output:NoneReturn Code:
FE_OKSet specified by addID has been added from other model. FE_OK 
also returned if the set is empty or set does not exist.
FE_FAIL Anything other the nModelID caused the call to not work properlyFE_NOT_A V AILABLE nModelID is not and open document/modelRemarks/Usage:NoneExample:None
SetDeveloperID   API-1351
4.6.3  Set Object  SavedSet Methods
4.6.3.1  SetDeveloperID
SetDeveloperID
( DeveloperID )
Description:This method is used to sp ecify a DeveloperID and unlock s the "SavedSet" functionality
Input:INT4 DeveloperID The developer ID assigned by Siemens to  the registered developer.
Output:NoneReturn Code:
FE_INV ALID_DEVELOPER The specifie d DeveloperID is not valid in this version of FEMAP 
Remarks/Usage:This method only needs to be called once per object, but must be called prior to any of the other “Saved-
Set” type methods otherwise they will all fail. Using this, and the ot her “SavedSet”  methods does not 
prevent the use of any other Set object functionality.
Example:None
 API-1352  GetSavedSet
4.6.3.2  GetSavedSet
GetSavedSet
( nSavedID, bClear )
Description:This method loads the IDs stored in  a Saved Set into the current object
Input:INT4 nSavedID The ID of the SavedSet
BOOL bClearIf True, any previous contents of the object are removed. If False, the 
Saved Set is merged with the current contents
Output:NoneReturn Code:
FE_INV ALID_DEVELOPERYou either did not specify a DeveloperID, specified an invalid 
DeveloperID, or the selected Saved Set was stored by a different reg-
istered developer.
FE_NOT_EXIST The specified Saved Set does not exist
Remarks/Usage:You can only access Saved Sets that were stor ed with your DeveloperID using this method
Example:None
GetAllSavedSets   API-1353
4.6.3.3  GetAllSavedSets
GetAllSavedSets
( void )
Description:This method loads the IDs of all SavedSets into the current object
Input:NoneOutput:NoneReturn Code:
FE_INV ALID_DEVELOPERYou either did not specify a Deve loperID or specified an invalid 
DeveloperID.
Remarks/Usage:Any previous contents of the Set object are automati cally cleared prior to loading the IDs of the Saved 
Sets.
Example:None
 API-1354  PutSavedSet
4.6.3.4  PutSavedSet
PutSavedSet
( nPutID, entityTYPE, nSavedID )
Description:This method saves the co ntents of the Set object to a selected SavedSet
Input:
INT4 nPutIDThe ID of the Saved Set to create or overwrite. To create a new 
Saved Set, specify nPutID=0 (or any negative number). If you are 
overwriting a previously Saved Set, set nPutID to the value that was 
returned in nSavedID when  you created the SavedSet.
INT4 entityTYPEType of entity whose IDs are in th e Set. For more information, see 
Section 3.3.6, "Entity Types". Cu rrently, the following types will 
automatically support renumberin g and locking entities from delete: 
FT_POINT, FT_CURVE, FT_SURFACE, FT_SOLID, FT_NODE, FT_ELEM, FT_MATL, FT_PROP, FT_CSYS and FT_FUNC-TION_DIR. 
Output:
INT4 nSavedIDThe ID of the Saved Set that was created or overwritten. If nPutID 
was 0 (or negative) this is the ID of the new Saved Set that you must 
remember to retrieve the set late r. If nPutID was a positive number 
nSaveID will simply equal nPutID.
Return Code:
FE_INV ALID_DEVELOPERYou either did not specify a DeveloperID, specified an invalid 
DeveloperID, or the selected SavedS et was already stored by a dif-
ferent registered developer.
FE_BAD_TYPEThe selected SavedSet already exis ts and contains a different entity-
TYPE than what you specified
FE_FAIL Storing the SavedSet failedRemarks/Usage:If you save a Set using this method, its current conten ts are copied to the Saved Set. Future changes to 
the Set object are not reflected in the Saved Set unless you also call PutSavedSet again after those 
changes.
You can specify nPutID as a positive number to creat e a new Saved Set with a fixed ID but this is not 
recommended. There is no guarantee that some other developer/appl ication has not already used that ID. 
If you do use a positive number and the Saved Set matches your Develope r ID it will be overwritten, but 
if the Developer ID does not match the “Put” will simply fail. Th at is why it is always best to allow 
FEMAP to find an available ID for new Saved Sets.
Example:
DeleteSavedSet   API-1355
4.6.3.5  DeleteSavedSet
DeleteSavedSet
( nSavedID )
Description:This method deletes a SavedS et which was previously saved
Input:
nSavedIDThe ID of the SavedSet to delete. You can only delete SavedSets that 
were stored using your developerID
Output:NoneReturn Code:
FE_INV ALID_DEVELOPERYou either did not specify a DeveloperID, specified an invalid 
DeveloperID, or the selected SavedS et was already stored by a dif-
ferent registered developer.
FE_NOT_EXIST The selected SavedSet does not existRemarks/Usage:NoneExample:None
 API-1356  DeleteAllSavedSets
4.6.3.6  DeleteAllSavedSets
DeleteAllSavedSets
( void )
Description:This method deletes a ll previously SavedSets
Input:NoneOutput:NoneReturn Code:
FE_INV ALID_DEVELOPERYou either did not specify a Deve loperID or specified an invalid 
DeveloperID.
Remarks/Usage:Only Saved Sets stored with your DeveloperID are deleted by this methodExample:None
DeleteOtherSavedSets   API-1357
4.6.3.7  DeleteOtherSavedSets
DeleteOtherSavedSets
( void )
Description:This method deletes any pr eviously SavedSet that has an ID that  is not specified in the current object
Input:NoneOutput:NoneReturn Code:
FE_INV ALID_DEVELOPERYou either did not specify a Deve loperID or specified an invalid 
DeveloperID.
FE_BAD_DATAThe current object is empty. If you want to delete all SavedSets use 
DeleteAllSavedSets( ) instead
Remarks/Usage:Only SavedSets stored with your DeveloperID are delete d by this method. This me thod is intended to be 
used to cleanup any “leaked” SavedSets. Load this Set object with all the SavedSet IDs that you want to 
keep, then call this method… it will delete all others. You should follo w this procedure periodically to 
insure the database does not contain unnecessary orph aned data. When a user calls the “File, Rebuild” 
command is a good time to do this, although it can be done more often.
Example:None
 API-1358  AddToSavedSet
4.6.3.8  AddToSavedSet
AddToSavedSet
( nPutID, entityTYPE, nEntID )
Description:This method adds a single  entity ID to a SavedSet
Input:
INT4 nPutIDThe ID of the SavedSet to create or overwrite. To create a new 
SavedSet you should always use EmptySavedSet method to find the 
ID of an available set. 
INT4 entityTYPEType of entity whose IDs are in th e Set. For more information, see 
Section 3.3.6, "Entity Types". Cu rrently, the following types will 
automatically support renumberin g and locking entities from delete: 
FT_POINT, FT_CURVE, FT_SURFACE, FT_SOLID, FT_NODE, 
FT_ELEM, FT_MATL, FT_PROP, FT_CSYS and FT_FUNC-TION_DIR. 
INT4 nEntID The ID of the en tity to add to the SavedSet
Output:NoneReturn Code:
FE_INV ALID_DEVELOPERYou either did not specify a DeveloperID, specified an invalid 
DeveloperID, or the selected SavedS et was already stored by a dif-
ferent developer
FE_BAD_TYPEThe selected SavedSet already exis ts and contains a different entity-
TYPE than what you specified
FE_FAIL Storing the Set failedFE_INV ALID nPutID is not a valid ID for a SavedSetRemarks/Usage:This method can be called to add the same entity in to a SavedSet multiple times  however it will only be 
added once. In addition, a single RemoveFromSave dSet will eliminate the entity from the SavedSet.
Example:None
AddSetToSavedSet   API-1359
4.6.3.9  AddSetToSavedSet
AddSetToSavedSet
( nPutID, entityTYPE )
Description:This method adds the contents of the current Set into a SavedSet
Input:
INT4 nPutIDThe ID of the SavedSet to create or overwrite. To create a new 
SavedSet you should always use EmptySavedSet method to find the 
ID of an available set. 
INT4 entityTYPEType of entity whose IDs are in th e Set. For more information, see 
Section 3.3.6, "Entity Types". Cu rrently, the following types will 
automatically support renumberin g and locking entities from delete: 
FT_POINT, FT_CURVE, FT_SURFACE, FT_SOLID, FT_NODE, 
FT_ELEM, FT_MATL, FT_PROP, FT_CSYS and FT_FUNC-TION_DIR. 
Output:NoneReturn Code:
FE_INV ALID_DEVELOPERYou either did not specify a DeveloperID, specified an invalid 
DeveloperID, or the selected SavedS et was already stored by a dif-
ferent developer
FE_BAD_TYPEThe selected SavedSet already exis ts and contains a different entity-
TYPE than what you specified
FE_FAIL Storing the Set failedFE_INV ALID nPutID is not a valid ID for a SavedSetRemarks/Usage:This method can be called to add the same Set into a SavedSet multiple  times however the entities in the 
Set will only be added once . In addition, a single RemoveSetFromS avedSet will eliminate the entities in 
the Set from the SavedSet.
Example:None
 API-1360  RemoveFromSavedSet
4.6.3.10  RemoveFromSavedSet
RemoveFromSavedSet
( nPutID, entityTYPE, nEntID )
Description:This method removes a single  entity ID from a SavedSet
Input:nPutID The ID of the SavedSet to be modified.
entityTYPEType of entity whose IDs are in th e Set. For more information, see 
Section 3.3.6, "Entity Types". Cu rrently, the following types will 
automatically support renumberin g and locking entities from delete: 
FT_POINT, FT_CURVE, FT_SURFACE, FT_SOLID, FT_NODE, FT_ELEM, FT_MATL, FT_PROP, FT_CSYS and FT_FUNC-
TION_DIR. 
nEntID The ID of the entity to remove fro m the SavedSet
Output:
NoneReturn Code:
FE_INV ALID_DEVELOPERYou either did not specify a DeveloperID, specified an invalid 
DeveloperID, or the selected SavedS et was already stored by a dif-
ferent developer
FE_BAD_TYPEThe selected SavedSet already exis ts and contains a different entity-
TYPE than what you specified
FE_FAIL Storing the Set failedFE_INV ALID nPutID is not a valid ID for a SavedSetRemarks/Usage:This method can be called to remove an entity that is not actua lly contained in the selected SavedSet 
without causing any harm.
Example:None
RemoveSetFromSavedSet   API-1361
4.6.3.11  RemoveSetFromSavedSet
RemoveSetFromSavedSet
( nPutID, entityTYPE )
Description:This method removes the contents of the current Set from a SavedSet
Input:nPutID The ID of the Saved Set to be modified.
entityTYPEType of entity whose IDs are in th e Set. For more information, see 
Section 3.3.6, "Entity Types". Cu rrently, the following types will 
automatically support renumberin g and locking entities from delete: 
FT_POINT, FT_CURVE, FT_SURFACE, FT_SOLID, FT_NODE, FT_ELEM, FT_MATL, FT_PROP, FT_CSYS and FT_FUNC-
TION_DIR. 
Output:
None
Return Code:
FE_INV ALID_DEVELOPERYou either did not specify a DeveloperID, specified an invalid 
DeveloperID, or the selected SavedS et was already stored by a dif-
ferent developer
FE_BAD_TYPEThe selected SavedSet already exis ts and contains a different entity-
TYPE than what you specified
FE_FAIL Storing the Set failedFE_INV ALID nPutID is not a valid ID for a SavedSetRemarks/Usage:This method can be called to remo ve entities that are not actually co ntained in the se lected SavedSet 
without causing any harm. Only entities that ar e actually in the Save dSet will be removed.
Example:None
 API-1362  ResetSavedSet
4.6.3.12  ResetSavedSet
ResetSavedSet
( void )
Description:This method resets the SavedSet next  pointer so that the next call to NextSavedSet will return the first 
available SavedSet
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:Only SavedSets stored with yo ur Developer ID will be acces sible by NextSavedSet method
Example:None
NextSavedSet   API-1363
4.6.3.13  NextSavedSet
NextSavedSet
( void )
Description:This method returns the ID of the next Saved SetInput:NoneOutput:NoneReturn Code:Any Positive Integer The Next available Saved Set.
FE_INV ALID_DEVELOPERYou either did not specify a Deve loperID or specified an invalid 
DeveloperID.
FE_FAIL No additional SavedSets were foundRemarks/Usage:Only SavedSets stored with your DeveloperID are acc essible by this method. To find the first SavedSet, 
you must first use the ResetSavedSet method before  calling NextSavedSet This function updates inter-
nal pointers in the Set so that if you call it repe atedly it will walk throug h all available SavedSets.
Example:None
 API-1364  EmptySavedSet
4.6.3.14  EmptySavedSet
EmptySavedSet
( void )
Description:This method returns the ID of an  available/nonexisting Saved Set
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method always re turns the lowest ID available. You do no t need to set a DeveloperID to use this 
method.
Example:None
CountSavedSets   API-1365
4.6.3.15  CountSavedSets
CountSavedSets
( AllSets )
Description:This method returns the number of SavedSets in the Database… both the number matching your Devel-
operID and the total number
Input:NoneOutput:INT4 AllSets The total number of Save dSets in the database from all developers
Return Code:
Any Positive Integer or ZeroThe number of SavedSets in the da tabase matching your specified 
DeveloperID
Remarks/Usage:You do not need to set a DeveloperID to use this me thod to retrieve “AllSets”, but if you do not, the 
return code will always be 0.
Example:None
 API-1366  GetSavedSetType
4.6.3.16  GetSavedSetType
GetSavedSetType
( SavedSetID, enDataType )
Description:This method returns the type of en tities currently stored in a Saved Set.
Input:INT4 SavedSetID The ID of the Saved Set to check entity type.
Output:
INT4 enDataTypeType of entities found in the Saved Set. For more information, see 
Section 3.3.6, "Entity Types".
Return Code:
FE_INV ALID_DEVELOPERYou either did not specify a DeveloperID, specified an invalid 
DeveloperID, or the selected SavedS et was already stored by a dif-
ferent developer
FE_NOT_EXIST The specified Save dSet does not currently exist.
Remarks/Usage:This method does not actually get th e Saved Set, only the type of entiti es that are currently stored in the 
Saved Set.
Example:None
   API-1367
4.7  Sort Objects
The Sort object is similar to the Set object, in that it is used to  contain lists of IDs. This object how-
ever holds the IDs in a prescribed order - normally  the order they were ad ded to the object. The 
order however can be changed by sorting based on various criteria - hence the name of the object. 
This object is not used directly as input to other objects or methods, rather it can be used in your 
code to traverse entities in a particular sorted order.
Use the feSort method of the FEMAP App lication object to create Sort objects.
4.7.1  Sort Object Properties
Property Description
INT4 ID The internal ID of the object.REAL8 dReal1
Real Values associated w ith an entry in the object REAL8 dReal2
REAL8 dReal3
INT4 nInt1
Integer Values associated w ith an entry in the object INT4 nInt2
INT4 nInt3
INT4 eDataTypeEntity Type that is associated w ith an entry in the object. For 
possible values, refer to S ection 3.3.6, "Entity Types"
 API-1368  Add
4.7.2  Sort Object Methods
4.7.2.1  Add
Add
( id )
Description:This function adds an ID into a sort object.Input:INT4 id ID to add to the sort object.Output:NoneReturn Code:
FE_FAILID specifies an invalid value or memory can not be allocated for 
additional IDs.
FE_NOT_A V AILABLE ID has already been added into object. IDs can only be added once.Remarks/Usage:The ID that you are adding to the so rt object is just that, an ID. Alth ough it usually represents the ID of 
some other existing entity in your mode l, there is no requirement for this. 
This method adds the ID and associates the current  values of the dRealX, nIntX and eDataType proper-
ties with this ID. Therefore, if you want to later so rt this object, you can first set the property values, 
then call this method to add an entry. Alternatively, you can use one of the other Add type functions to 
load both the ID and properties in one call.
Example:None
AddReal   API-1369
4.7.2.2  AddReal
AddReal
( id, dReal1, dReal2, dReal3 )
Description:This function adds an ID and associat ed real properties into a sort object.
Input:INT4 id ID to add to the sort object.REAL8 dReal1
Real properties to associate with ID REAL8 dReal2
REAL8 dReal3Output:NoneReturn Code:
FE_FAILID specifies an invalid value or memory can not be allocated for 
additional IDs.
FE_NOT_A V AILABLE ID has already been added into object. IDs can only be added once.Remarks/Usage:The ID that you are adding to the so rt object is just that, an ID. Alth ough it usually represents the ID of 
some other existing entity in your mode l, there is no requirement for this. 
This method adds the ID and sets the values of the dRealX proper ties. The current values of nIntX and 
eDataType properties are also associated with this ID. 
Example:None
 API-1370  AddInt
4.7.2.3  AddInt
AddInt
( id, nInt1, nInt2, nInt3 )
Description:This function adds an ID and associat ed integer properties into a sort object.
Input:INT4 id ID to add to the sort object.INT4 nInt1
Integer properties to associate with ID INT4 nInt2
INT4 nInt3Output:NoneReturn Code:
FE_FAILID specifies an invalid value or memory can not be allocated for 
additional IDs.
FE_NOT_A V AILABLE ID has already been added into object. IDs can only be added once.Remarks/Usage:The ID that you are adding to the so rt object is just that, an ID. Alth ough it usually represents the ID of 
some other existing entity in your mode l, there is no requirement for this. 
This method adds the ID and sets the values of the nIntX properties. The current values of dRealX and 
eDataType properties are also associated with this ID. 
Example:None
AddAll   API-1371
4.7.2.4  AddAll
AddAll
( id, dReal1, dReal2, dReal3, nInt1, nInt2, nInt3, eDataType )
Description:This function adds an ID and associat ed integer properties into a sort object.
Input:INT4 id ID to add to the sort object.REAL8 dReal1
Real properties to associate with ID REAL8 dReal2
REAL8 dReal3INT4 nInt1
Integer properties to associate with ID INT4 nInt2
INT4 nInt3
INT4 eDataTypeEntity Type that is associated with  an entry in the object. For possi-
ble values, refer to Section 3.3.6, "Entity Types"
Output:NoneReturn Code:
FE_FAILID specifies an invalid value or memory can not be allocated for 
additional IDs.
FE_NOT_A V AILABLE ID has already been added into object. IDs can only be added once.Remarks/Usage:The ID that you are adding to the so rt object is just that, an ID. Alth ough it usually represents the ID of 
some other existing entity in your mode l, there is no requirement for this. 
This method adds the ID and sets the values of all of the properties.
Example:None
 API-1372  SetData
4.7.2.5  SetData
SetData
( id, dReal1, dReal2, dReal3, nInt1, nInt2, nInt3, eDataType )
Description:This function updates the properties as sociated with an already added ID.
Input:
INT4 idID to update in the sort object. Th is ID must have been already added 
to the object.
REAL8 dReal1
Real properties to associate with ID REAL8 dReal2
REAL8 dReal3INT4 nInt1
Integer properties to associate with ID INT4 nInt2
INT4 nInt3
INT4 eDataTypeEntity Type that is associated with  an entry in the object. For possi-
ble values, refer to Section 3.3.6, "Entity Types"
Output:NoneReturn Code:FE_FAIL The specified ID could not be found in the object.Remarks/Usage:As an alternative to setting the properties prior to, or  at the same time as you add IDs into the object, you 
can simply add IDs and update the a ssociated values with this method.
Example:None
SetReal   API-1373
4.7.2.6  SetReal
SetReal
( id, dReal1, dReal2, dReal3 )
Description:This function updates the real propertie s associated with an already added ID.
Input:
INT4 idID to update in the sort object. Th is ID must have been already added 
to the object.
REAL8 dReal1
Real properties to associate with ID REAL8 dReal2
REAL8 dReal3Output:NoneReturn Code:FE_FAIL The specified ID could not be found in the object.Remarks/Usage:As an alternative to setting the properties prior to, or  at the same time as you add IDs into the object, you 
can simply add IDs and update the associated  real property values  with this method.
Example:None
 API-1374  SetInt
4.7.2.7  SetInt
SetInt
( id, nInt1, nInt2, nInt3 )
Description:This function updates the in teger properties associated with an already added ID.
Input:
INT4 idID to update in the sort object. Th is ID must have been already added 
to the object.
INT4 nInt1
Integer properties to associate with ID INT4 nInt2
INT4 nInt3Output:NoneReturn Code:FE_FAIL The specified ID could not be found in the object.Remarks/Usage:As an alternative to setting the properties prior to, or  at the same time as you add IDs into the object, you 
can simply add IDs and update the associated  integer property values with this method.
Example:None
SetDataType   API-1375
4.7.2.8  SetDataType
SetDataType
( id, eDataType )
Description:This function updates the entity type associated wi th an already added ID.
Input:
INT4 idID to update in the sort object. Th is ID must have been already added 
to the object.
INT4 eDataTypeEntity Type that is associated with  an entry in the object. For possi-
ble values, refer to Section 3.3.6, "Entity Types"
Output:None
Return Code:
FE_FAIL The specified ID could not be found in the object.Remarks/Usage:As an alternative to setting the properties prior to, or  at the same time as you add IDs into the object, you 
can simply add IDs and update the asso ciated entity type with this method.
Example:None
 API-1376  GetData
4.7.2.9  GetData
GetData
( id, dReal1, dReal2, dReal3, nInt1, nInt2, nInt3, eDataType )
Description:This function retrieves the properties associated with an already added ID.
Input:
INT4 idID to update in the sort object. Th is ID must have been already added 
to the object.
Output:REAL8 dReal1
Real properties associated with ID REAL8 dReal2
REAL8 dReal3INT4 nInt1
Integer properties associated with ID INT4 nInt2
INT4 nInt3
INT4 eDataTypeEntity Type that is associated with  an entry in the object. For possi-
ble values, refer to Section 3.3.6, "Entity Types"
Return Code:FE_FAIL The specified ID could not be found in the object.Remarks/Usage:NoneExample:None
GetReal   API-1377
4.7.2.10  GetReal
GetReal
( id, dReal1, dReal2, dReal3 )
Description:This function retrieves the real properties associated with an already added ID.Input:
INT4 idID to update in the sort object. Th is ID must have been already added 
to the object.
Output:REAL8 dReal1
Real properties associated with ID REAL8 dReal2
REAL8 dReal3Return Code:FE_FAIL The specified ID could not be found in the object.Remarks/Usage:NoneExample:None
 API-1378  GetInt
4.7.2.11  GetInt
GetInt
( id, nInt1, nInt2, nInt3 )
Description:This function retrieves the integer properties associated with an already added ID.Input:
INT4 idID to update in the sort object. Th is ID must have been already added 
to the object.
Output:INT4 nInt1
Integer properties associated with ID INT4 nInt2
INT4 nInt3Return Code:FE_FAIL The specified ID could not be found in the object.Remarks/Usage:NoneExample:None
GetDataType   API-1379
4.7.2.12  GetDataType
GetDataType
( id, eDataType )
Description:This function retrieves the entity type associated with an  already added ID.
Input:
INT4 idID to update in the sort object. Th is ID must have been already added 
to the object.
Output:
INT4 eDataTypeEntity Type that is associated with  an entry in the object. For possi-
ble values, refer to Section 3.3.6, "Entity Types"
Return Code:
FE_FAIL The specified ID could not be found in the object.
Remarks/Usage:NoneExample:None
 API-1380  GetSet
4.7.2.13  GetSet
GetSet
( nSetID, bClear )
Description:This function populates a set object with the IDs curre ntly in the sort object, with the option to add the 
IDs to the IDs already in the set object or clear the se t object first, so the set object will only contain the 
entities from the sort object.
Input:INT4 nSetID ID of the set object
BOOL bClearFlag to indicate if the set object sh ould be cleared of all existing IDs 
before IDs from sort object are sent to set object. True=clear, then add, False=add to existing IDs
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
Find   API-1381
4.7.2.14  Find
Find
( id )
Description:This function locates an  ID within the object.
Input:INT4 id ID to locateOutput:NoneReturn Code:FE_FAIL The specified ID could not be found in the object.FE_NOT_A V AILABLE ID specifies an invalid value.Remarks/Usage:If the ID is found, the dRealX, nIntX and eDataType properties are all update d to match those associ-
ated with the ID.
Example:None
 API-1382  Remove
4.7.2.15  Remove
Remove
( id )
Description:This function removes an  ID from a sort object.
Input:INT4 id ID to remove from the sort object.
Output:NoneReturn Code:FE_NOT_A V AILABLE ID specifies an invalid value.Remarks/Usage:NoneExample:None
RemoveSet   API-1383
4.7.2.16  RemoveSet
RemoveSet
( id )
Description:This function removes all of the selected IDs in another sort object from the current sort object. 
Input:INT4 id ID of the sort set containing the IDs to remove. Output:NoneReturn Code:FE_NOT_A V AILABLE Unable to remove IDs from the specified sort set. 
Remarks/Usage:NoneExample:None
 API-1384  IsAdded
4.7.2.17  IsAdded
IsAdded
( id )
Description:This function checks to see if an ID is currently added into a sort object.
Input:INT4 id ID to check.Output:NoneReturn Code:FE_OK ID is added into the sort object.FE_FAIL ID is not added into the sort object.Remarks/Usage:NoneExample:None
Clear   API-1385
4.7.2.18  Clear
Clear
( void )
Description:This function simply removes all IDs from the current object.Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-1386  Reset
4.7.2.19  Reset
Reset
( void )
Description:This function resets the next pointer so that the next call to next will return the first entry in a sort object.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:To find the first ID in a set, you must use the Rese t method before calling Next . If you have just created 
a set and have not used Next, it is already reset.
Example:None
Next   API-1387
4.7.2.20  Next
Next
( void )
Description:This function return s the next selected ID in a sort object.
Input:NoneOutput:NoneReturn Code:Any Positive Number The next ID.FE_FAIL No additional IDs were available.Remarks/Usage:To find the first ID in a set, you must use the Rese t method before calling Next . If you have just created 
a set and have not used Next, it is already reset.
When you retrieve the ID, the prop erties dRealX, nIntX and eDataType are all udpated to match the val-
ues associated with that ID.
Example:None
 API-1388  Prev
4.7.2.21  Prev
Prev
( void )
Description:This function returns the previous selected ID in a sort object.
Input:NoneOutput:NoneReturn Code:Any Positive Number The previous ID.FE_FAIL No additional IDs were available.Remarks/Usage:To find the last ID in a set, you must use the Reset method before calling Prev. If you have just created a 
set and have not used Prev (or Next), it is already reset.
When you retrieve the ID, the prop erties dRealX, nIntX and eDataType are all udpated to match the val-
ues associated with that ID.
Example:None
Current   API-1389
4.7.2.22  Current
Current
( void )
Description:This function returns the currently selected ID in a sort object.
Input:NoneOutput:NoneReturn Code:Any Positive Number The current ID.FE_FAIL No ID was available.Remarks/Usage:This method works just like Next() and Prev(), except  that it does not move to a different ID. By calling 
this method, you retrieve the ID  and the properties dRealX, nIntX and eDataType are all udpated to 
match the values associated with that ID.
Example:None
 API-1390  First
4.7.2.23  First
First
( void )
Description:This function retu rns the first ID in a sort object.
Input:NoneOutput:NoneReturn Code:Any Positive Number The first ID.FE_FAIL No IDs were available.Remarks/Usage:The first ID is the first ID in the object, either the first added, or the first after a sort. Calling this method 
is the same as calling Reset( ) followed by Next( ).
When you retrieve the ID, the prop erties dRealX, nIntX and eDataType are all udpated to match the val-
ues associated with that ID.
Example:None
Last   API-1391
4.7.2.24  Last
Last
( void )
Description:This function returns the last selected ID in a sort object.
Input:NoneOutput:NoneReturn Code:Any Positive Number The last ID.FE_FAIL No IDs were available.Remarks/Usage:The last ID is the last ID in the object, either the fi rst added, or the first after a sort. Calling this method 
is the same as calling Rese t( ) followed by Prev( ).
When you retrieve the ID, the prop erties dRealX, nIntX and eDataType are all udpated to match the val-
ues associated with that ID.
Example:None
 API-1392  Count
4.7.2.25  Count
Count
( void )
Description:This function counts the number of IDs th at are currently selected in the object.
Input:NoneOutput:NoneReturn Code:count The number of IDs in the object.Remarks/Usage:This function simply looks at each of the selected IDs and counts the number that it finds.
Example:None
Select   API-1393
4.7.2.26  Select
Select
( entityTYPE, reload, title )
Description:This function displays a standard selection dialog box to allow a user to choose entities of a specific type 
and create a sort object.
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
BOOL reloadIf True, previously selected IDs w ill be displayed in the dialog box 
for editing, or for combining with new selections.
STRING titleA text string that will be added to  the title bar of the dialog box to 
give the user more informatio n about what is being selected.
Output:NoneReturn Code:FE_CANCEL The user cancelled the selection.
FE_NOT_EXISTNo entities of the selected type exist.  None were selected and the dia-
log box was not displayed. If clear =True, the sort object will be 
empty.
Remarks/Usage:The final selection list contains all of the IDs that  were selected when the user pressed OK. If 
clear=True, these are all entities that were just sel ected. If clear=False, it is a combination of old and 
new entities.
Example:None
 API-1394  SelectID
4.7.2.27  SelectID
SelectID
( entityTYPE, title, ID )
Description:This function displays a selection dial og box to allow a user to choose a single entity of a specific type. 
The ID of the entity is returned and is  stored in the current sort object.
Input:
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
STRING titleA text string that will be added to  the title bar of the dialog box to 
give the user more informatio n about what is being selected.
Output:INT4 ID The ID of the entity that was selected.Return Code:FE_CANCEL The user cancelled the selection.
FE_NOT_EXISTNo entities of the selected type exist.  None were selected and the dia-
log box was not displayed. If clear =True, the sort object will be 
empty.
Remarks/Usage:This function displays one of two different dialog boxes, depending on  the entity type that you choose. 
For entities that have titles, like properties or materials,  the dialog box will cont ain a list of the available 
entities along with their titles. For other entities, like  nodes or elements, a simple  dialog box is displayed 
so that the ID can be typed or picked.
Example:None
SelectList   API-1395
4.7.2.28  SelectList
SelectList
( nNumEntity, entityTYPE )
Description:This function displays a selection dialog box to allo w a user to choose a specified number of entities of 
a specific type. The IDs of the selected en tities are stored in the current sort set.
Input:INT4 nNumEntity Number of entities to be selected.
INT4 entityTYPEType of entity to select. For more  information, see Section 3.3.6, 
"Entity Types". 
Output:None
Return Code:
FE_CANCEL The user cancelled the selection.Remarks/Usage:The dialog box automatically  closes when “nNumEntity” entities have been selected.
Example:None
 API-1396  Sort
4.7.2.29  Sort
Sort
( bSortReal )
Description:This function sorts the ID s in the object based on values associated with each ID
Input:
BOOL bSortRealIf True, the IDs are sorted based on  the dRealX values, if False, the 
sort is based on the nIntX values.
Output:NoneReturn Code:FE_FAIL No IDs are available for sortingRemarks/Usage:Sorting is always done in increasin g order, and always using all three values. If bSortReal is True, then 
the primary sort value is dReal1, the second is dR eal2 and third is dReal3. The same approach follows 
for nInt1, nInt2, and nInt3. Even though sorting is always done in one direction, you can traverse the list 
in either direction using either Next( ) or Prev( ),  so you can still retrieve IDs in decreasing order.
Example:None
SortRemoveDuplicates   API-1397
4.7.2.30  SortRemoveDuplicates
SortRemoveDuplicates
( bSortReal )
Description:This function is the same as Sort( ) except it also removes duplicate en tries from the sorted object, leav-
ing just one of each unique entry.
Input:
BOOL bSortRealIf True, the IDs are sorted based on  the dRealX values, if False, the 
sort is based on the nIntX values.
Output:NoneReturn Code:
FE_FAIL No IDs are available for sorting
Remarks/Usage:Sorting is always done in increasin g order, and always using all three values. If bSortReal is True, then 
the primary sort value is dReal1, the second is dR eal2 and third is dReal3. The same approach follows 
for nInt1, nInt2, and nInt3. Even though sorting is always done in one direction, you can traverse the list in either direction using either Next( ) or Prev( ),  so you can still retrieve IDs in decreasing order.
Example:None
 API-1398  ConvertToBoundarySurfaces
4.7.2.31  ConvertToBoundarySurfaces
ConvertToBoundarySurfaces
( void )
Description:This function replaces surfaces that are used to de fine Combined Surfaces with the Combined Surface.
Input:NoneOutput:NoneReturn Code:FE_OK Expanded SetRemarks/Usage:If any Surfaces used to define Combined Surfaces are in the Sort Set, then those surfaces are removed, 
and the Combined Surfaces are adde d. Other Surfaces, either Combin ed Surfaces themselves, or sur-
faces not used to define Combined Su rfaces are not changed in the Sort Set.
Example:None
AddAroundPoint   API-1399
4.7.2.32  AddAroundPoint
AddAroundPoint
( entityTYPE, nSetID, vBase )
Description:This function adds selected entities with their sort value equal to the distance from the specified loca-
tion.
Input:
INT4 entityTYPEThe type of entities being included  into the set. For entity informa-
tion, see Section 3.3.6, "Entity Ty pes". Only Point and Node types 
are valid.
INT4 nSetID The ID of a Set object that contains the entities to add.
REAL8 vBase[3]The coordinates, in Global Rectangu lar coordinates, of the point used 
to compute the sort value
Output:NoneReturn Code:FE_FAIL specified entities do not existFE_BAD_TYPE not a valid entityTYPE for this methodRemarks/Usage:NoneExample:None
 API-1400  AddAroundVector
4.7.2.33  AddAroundVector
AddAroundVector
( entityTYPE, nSetID, vBase, vVec )
Description:This function adds selected entities with their sort value equal to the distance  from the specified vector
Input:
INT4 entityTYPEThe type of entities being included  into the set. For entity informa-
tion, see Section 3.3.6, "Entity Ty pes". Only Point and Node types 
are valid.
INT4 nSetID The ID of a Set object that contains the entities to add.
REAL8 vBase[3]The coordinates, in Global Rectangular coordinates, of the base of 
the vector used to compute the sort value
REAL8 vVec[3]The components, in Global Rectangular coordinates, of the vector 
used to compute the sort value
Output:NoneReturn Code:FE_FAIL specified entities do not existFE_BAD_TYPE not a valid entityTYPE for this methodRemarks/Usage:NoneExample:None
AddAroundPlane   API-1401
4.7.2.34  AddAroundPlane
AddAroundPlane
( entityTYPE, nSetID, vBase, vVec, bAbs )
Description:This function adds selected entities with their sort value equal to the distance from the specified plane
Input:
INT4 entityTYPEThe type of entities being included  into the set. For entity informa-
tion, see Section 3.3.6, "Entity Ty pes". Only Point and Node types 
are valid.
INT4 nSetID The ID of a Set object that contains the entities to add.
REAL8 vBase[3]The coordinates, in Global Rectangular coordinates, of the base of 
the vector used to compute the sort value
REAL8 vVec[3]The components, in Global Rectangular coordinates, of the vector 
used to compute the sort value
BOOL bAbsIf False, the sort value is computed as positive if th e entity is on the 
side of the plane pointed to by vVec and negative if in the other 
direction. If True, the sort value is  simply the distance to the plane.
Output:NoneReturn Code:FE_FAIL specified entities do not existFE_BAD_TYPE not a valid entityTYPE for this methodRemarks/Usage:NoneExample:None
 API-1402  
4.8  UserData Objects
The UserData object is used to store your own data in the FEMAP database. You can think of each 
UserData object as a binary file, where you can read  and write any data that you need to keep with 
a model. 
Even though you can always store data in your ow n external files, UserData objects provide some 
very beneficial features. Your data is stored in  the same file as the othe r model data. This elimi-
nates many file/data management i ssues, and possibilities for errors. Data stor ed in the same model 
is always available to that model, and cannot be mixed with other models. Possibly more impor-
tantly, however, data stored in UserData objec ts is supported through the FEMAP Undo/Redo sys-
tem. If your data is linked to the current model st ate, then rolling the model back through undo will 
also roll back your data. This only  applies to model that is in the database, not data that is already 
loaded into a UserData Object. Following an Undo/Redo, you must  destroy any objects that you 
are holding, and reload them from the database.
Use the feUserData method of the FEMAP App lication object to create UserData Objects.
4.8.1  UserData Object Properties
Property Description
STRING title[0..159]The title assigned to this object. You can update this title before 
storing an object and then later re trieve it by specifying just the 
title.
INT4 size The current size, in bytes, of  the data stored in this object.
INT4 IDThe internal ID of the Data obje ct. This ID is assigned when 
you Put and Get the object.
INT4 setID Another name for ID
Get   API-1403
4.8.2  UserData Object Methods
4.8.2.1  Get
Get
( entID )
Description:Loads a data object that was prev iously stored with this entID.
Input:INT4 entID The entity ID of the da ta object that will be loaded.
Output:NoneReturn Code:
FE_NOT_EXISTUnable to load the data object. Either  it does not exist, or there is no 
data in it.
FE_NO_MEMORY Unable to allocate  memory for data buffering.
Remarks/Usage:You must call this function, or GetTitle( ), to relo ad objects that have be en stored in the model.
Example:None
 API-1404  GetTitle
4.8.2.2  GetTitle
GetTitle
( title )
Description:Loads a data object that was pr eviously stored with this title.
Input:STRING title[0..159] The title of the object to load.Output:NoneReturn Code:
FE_NOT_EXISTUnable to load the data object. Either  it does not exist, or there is no 
data in it.
FE_NO_MEMORY Unable to allocate  memory for data buffering.
Remarks/Usage:To use this method to retrieve an object, it must have had its title property defined prior to being Put to 
the database. The title speci fied here must be an exact match, in cluding case, to the title specified when 
the object was stored. Using titles to store and retrieve  data objects can eliminat e conflicts between data 
stored from various programs. 
Example:None
Put   API-1405
4.8.2.3  Put
Put
( entID )
Description:Stores data from the current data object. Input:INT4 entID The ID of the object to store.Output:NoneReturn Code:FE_FAIL Unable to store the data object.Remarks/Usage:You must set the title property prior to using th is method if you want to use GetTitle to retrieve the 
object. You do not have to set the ti tle if you plan on using Get to retr ieve the object. Using this method 
will always overwrite any data that was previously st ored with the same entID - even if it was not from 
your program - for that reason we  recommend using PutTitle - with unique titles - whenever possible.
Data must be Put to the model datab ase before it will be kept with th e model, and before it will be sup-
ported by Undo/Redo.
Example:None
 API-1406  PutTitle
4.8.2.4  PutTitle
PutTitle
( title )
Description:Stores data from the current data object. Input:STRING title[0..159] The title of the object to store.Output:NoneReturn Code:FE_FAIL Unable to store the data object.Remarks/Usage:There is no need to set the title property prior to using this method - that is done automatically. This 
method will automatically find and overwrite any previo us data with the same title - you should always 
specify a unique title to avoid this po ssibility - or use GetTitle to test if there is other data using the same 
title. If no data object exists in the database with a ma tching title, this method si mply finds an unused ID 
and stores the object.
Data must be Put to the model datab ase before it will be kept with th e model, and before it will be sup-
ported by Undo/Redo.
Example:None
Clear   API-1407
4.8.2.5  Clear
Clear
( void )
Description:This function simply removes all da ta from the current UserData object.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-1408  Reset
4.8.2.6  Reset
Reset
( void )
Description:This method resets the Next pointer so that the next call to Next will return the first (lowest ID) User-
Data.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:After calling Reset, Next will return the first entity an d Prev will return the last  (highest ID) UserData.
Example:None
Next   API-1409
4.8.2.7  Next
Next
( void )
Description:This method retrieves the next ava ilable UserData with a larger ID.
Input:NoneOutput:NoneReturn Code:FE_FAIL No additional entities were found.Remarks/Usage:Calling this method simply finds the ne xt available UserData with an ID that is greater than the current 
ID, and calls the Get method with that ID.
Example:None
 API-1410  Prev
4.8.2.8  Prev
Prev
( void )
Description:This method retrieves the next ava ilable UserData with a smaller ID. 
Input:NoneOutput:NoneReturn Code:FE_FAIL No additional entities were found.Remarks/Usage:Calling this method simply finds the ne xt available UserData with an ID that is smaller than the current 
ID, and calls the Get method with that ID.
Example:None
First   API-1411
4.8.2.9  First
First
( void )
Description:This method loads the first (with the lowest ID) available UserData.
Input:NoneOutput:NoneReturn Code:FE_FAIL No entities exist, or unable to load.Remarks/Usage:Calling this method is like callin g Reset, followed by Next.
Example:None
 API-1412  Last
4.8.2.10  Last
Last
( void )
Description:This method loads the last (with the highest ID) available UserData.
Input:NoneOutput:NoneReturn Code:FE_FAIL No entities exist, or unable to load.Remarks/Usage:Calling this method is like callin g Reset, followed by Prev.
Example:None
NextSet   API-1413
4.8.2.11  NextSet
NextSet
( void )
Description:This method updates the setID to be the next ex isting UserData object.
Input:NoneOutput:NoneReturn Code:FE_FAIL No more sets available.Remarks/Usage:If no more sets are found, setID remains unchanged. This method finds the next set with a higher ID.
Example:None
 API-1414  PrevSet
4.8.2.12  PrevSet
PrevSet
( void )
Description:This method updates the se tID to be the previous existing UserData object.
Input:NoneOutput:NoneReturn Code:FE_FAIL No more sets available.Remarks/Usage:If no more sets are found, setID remains unchanged. This method finds the next  UserData with a lower 
ID.
Example:None
NextEmptySet   API-1415
4.8.2.13  NextEmptySet
NextEmptySet
( void )
Description:This method updates the setID to be the next empty UserData object.
Input:NoneOutput:NoneReturn Code:FE_FAIL No more sets available.Remarks/Usage:If no more empty sets are found, setID remains unchan ged. This method finds the next setID that does 
not contain any UserData.
Example:None
 API-1416  PrevEmptySet
4.8.2.14  PrevEmptySet
PrevEmptySet
( void )
Description:This method updates the setID to be the previous  empty UserData object.
Input:NoneOutput:NoneReturn Code:FE_FAIL No more sets available.Remarks/Usage:If no more empty sets are found, setID remains unchan ged. This method finds the previous setID that 
does not contain any UserData.
Example:None
Exist   API-1417
4.8.2.15  Exist
Exist
( id )
Description:This method checks to see if a specific UserData existsInput:INT4 id The ID of the UserData to check. Output:NoneReturn Code:FE_FAIL The selected entity does not exist.Remarks/Usage:This method does not load  any data. It simply returns FE_OK if the UserData exists, and FE_FAIL if it 
does not.
Example:None
 API-1418  Deletable
4.8.2.16  Deletable
Deletable
( id )
Description:This method checks to see if a specific UserData is deletableInput:INT4 id The ID of the UserData to check. Output:NoneReturn Code:NoneRemarks/Usage:This method is currently not us ed. It will always return FE_OK.
Example:None
Delete   API-1419
4.8.2.17  Delete
Delete
( entID )
Description:Deletes the data object from the database with the specified ID.
Input:INT4 entID The ID of the object to delete.Output:NoneReturn Code:FE_FAIL Unable to delete the data object.Remarks/Usage:Deleting a data object is perman ent. The data is remo ved from the database; however, the data can 
return if you undo past the point of the deletion.
Example:None
 API-1420  DeleteTitle
4.8.2.18  DeleteTitle
DeleteTitle
( title )
Description:Deletes the data object from the database with the specified title. 
Input:STRING title[0..159] The title of the object to delete.Output:NoneReturn Code:FE_FAIL Unable to delete the data object.Remarks/Usage:Deleting a data object is perman ent. The data is remo ved from the database; however, the data can 
return if you undo past the point of the deletion.
Example:None
Position   API-1421
4.8.2.19  Position
Position
( void )
Description:Returns the current location in the data object where you are reading or writing.
Input:NoneOutput:NoneReturn Code:INT4 position The current  data object location.
Remarks/Usage:This function can be used with Jump to reposition to a specific ob ject location for “rereading” or 
“rewriting”.
Example:None
 API-1422  Jump
4.8.2.20  Jump
Jump
( jumpto )
Description:Repositions the location in th e data object where the next  read or write will occur.
Input:
INT4 jumptoThe position to move to. Specify jump to=-1 to move to the end of the 
object, or jumpto=0 to move to  the beginning of the object.
Output:NoneReturn Code:
FE_FAILUnable to move to the specified location. Pos ition must be less than 
the total size of data in the object.
Remarks/Usage:You should only specify “jumpto” as a value that you previously retr ieved from a call to Position. Com-
puting numbers yourself is prone to error because of extra data need to store arrays and certain data 
types.
Example:None
AtEOF   API-1423
4.8.2.21  AtEOF
AtEOF
( void )
Description:Indicates whether the current position for reading/wr iting is at the end of the data in the object.
Input:NoneOutput:NoneReturn Code:
FE_OKAt the end of the object. If you are reading from the object, you 
should stop at this point. Wr ites will append to the object.
FE_FAILNot at the end of the object. You can continue reading. Writes will 
overwrite previous data.
Remarks/Usage:You can use this check to determine when yo u reach the end of the data in an object.
Example:None
 API-1424  Truncate
4.8.2.22  Truncate
Truncate
( position )
Description:Deletes all data in an object  after the specified position.
Input:
INT4 positionThe position to truncate the data in the object. Essentially the size of 
the data in the remaining object.
Output:NoneReturn Code:
FE_FAILUnable to truncate, “position” probab ly not between 0 and the size of 
data in the object.
Remarks/Usage:Truncating data in an object  only changes the current object. Chang es must be Put to the database to be 
made permanent. The current read ing/writing position is move d to the end of the object (position) fol-
lowing this method.
Example:None
WriteDouble   API-1425
4.8.2.23  WriteDouble
WriteDouble
( val )
Description:Writes a single “double” value to the current object.Input:REAL8 val The value to add to the current object.Output:NoneReturn Code:FE_NO_MEMORY Unable to allocate enough  memory to add the specified value.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified value will be added to the object at the current position. You can ch ange this position with 
the Position method prior to calling th is method. Data that is added to the object, with any of the write 
methods, is not be saved to the model database until you call Put or PutTitle.
Example:None
 API-1426  WriteFloat
4.8.2.24  WriteFloat
WriteFloat
( val )
Description:Writes a single “float” value to the current object.Input:REAL4 val The value to add to the current object.Output:NoneReturn Code:FE_NO_MEMORY Unable to allocate enough  memory to add the specified value.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified value will be added to the object at the current position. You can ch ange this position with 
the Position method prior to calling th is method. Data that is added to the object, with any of the write 
methods, is not be saved to the model database until you call Put or PutTitle.
Example:None
WriteLong   API-1427
4.8.2.25  WriteLong
WriteLong
( val )
Description:Writes a single “long” value to the current object.Input:INT4 val The value to add to the current object.Output:NoneReturn Code:FE_NO_MEMORY Unable to allocate enough  memory to add the specified value.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified value will be added to the object at the current position. You can ch ange this position with 
the Position method prior to calling th is method. Data that is added to the object, with any of the write 
methods, is not be saved to the model database until you call Put or PutTitle.
Example:None
 API-1428  WriteShort
4.8.2.26  WriteShort
WriteShort
( val )
Description:Writes a single “short” value to the current object.Input:INT2 val The value to add to the current object.Output:NoneReturn Code:FE_NO_MEMORY Unable to allocate enough  memory to add the specified value.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified value will be added to the object at the current position. You can ch ange this position with 
the Position method prior to calling th is method. Data that is added to the object, with any of the write 
methods, is not be saved to the model database until you call Put or PutTitle.
Example:None
WriteBool   API-1429
4.8.2.27  WriteBool
WriteBool
( val )
Description:Writes a single “bool” value to the current object.Input:BOOL val The value to add to the current object.Output:NoneReturn Code:FE_NO_MEMORY Unable to allocate enough  memory to add the specified value.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified value will be added to the object at the current position. You can ch ange this position with 
the Position method prior to calling th is method. Data that is added to the object, with any of the write 
methods, is not be saved to the model database until you call Put or PutTitle.
Example:None
 API-1430  WriteDoubleArray
4.8.2.28  WriteDoubleArray
WriteDoubleArray
( num, val )
Description:Writes an array of “double” va lues to the current object.
Input:INT4 num The number of entries in the “val” array that you want to write.
REAL8 val[0..num-1] The values to  add to the current object.
Output:NoneReturn Code:
FE_TOO_SMALLThe array that you specified is no t large enough for the number of 
entries that you specified.
FE_BAD_TYPEThe type of data in the array that  you passed is not of the type 
required for this method.
FE_NO_MEMORY Unable to allocate enough  memory to add the specified value.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified values will be  added to the object at the current po sition. You can change this position 
with the Position method prior to ca lling this method. Data that is ad ded to the object, with any of the 
write methods, is not be sa ved to the model database until you call Put or PutTitle.
Example:None
WriteLongArray   API-1431
4.8.2.29  WriteLongArray
WriteLongArray
( num, val )
Description:Writes an array of “long” va lues to the current object.
Input:INT4 num The number of entries in the “val” array that you want to write.
INT4 val[0..num-1] The values to  add to the current object.
Output:NoneReturn Code:
FE_TOO_SMALLThe array that you specified is no t large enough for the number of 
entries that you specified.
FE_BAD_TYPEThe type of data in the array that  you passed is not of the type 
required for this method.
FE_NO_MEMORY Unable to allocate enough  memory to add the specified value.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified values will be  added to the object at the current po sition. You can change this position 
with the Position method prior to ca lling this method. Data that is ad ded to the object, with any of the 
write methods, is not be sa ved to the model database until you call Put or PutTitle.
Example:None
 API-1432  WriteBoolArray
4.8.2.30  WriteBoolArray
WriteBoolArray
( num, val )
Description:Writes an array of “bool” va lues to the current object.
Input:INT4 num The number of entries in the “val” array that you want to write.
BOOL val[0..num-1] The values to  add to the current object.
Output:NoneReturn Code:
FE_TOO_SMALLThe array that you specified is no t large enough for the number of 
entries that you specified.
FE_BAD_TYPEThe type of data in the array that  you passed is not of the type 
required for this method.
FE_NO_MEMORY Unable to allocate enough  memory to add the specified value.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified values will be  added to the object at the current po sition. You can change this position 
with the Position method prior to ca lling this method. Data that is ad ded to the object, with any of the 
write methods, is not be sa ved to the model database until you call Put or PutTitle.
Example:None
WriteString   API-1433
4.8.2.31  WriteString
WriteString
( val )
Description:Writes a character string to the current object.Input:STRING val[0..length] The string to  add to the current object.
Output:NoneReturn Code:FE_NO_MEMORY Unable to allocate enough  memory to add the specified value.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified values will be  added to the object at the current po sition. You can change this position 
with the Position method prior to ca lling this method. Data that is ad ded to the object, with any of the 
write methods, is not be sa ved to the model database until you call Put or PutTitle.
Example:None
 API-1434  ReadDouble
4.8.2.32  ReadDouble
ReadDouble
( val )
Description:Reads a single “double” value from the current object.Input:NoneOutput:REAL8 val The value to read from the current objectReturn Code:
FE_NOT_A V AILABLEThere is not enough data  left in the object to read, from the current 
position.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified value will be read from the object at the current posi tion. You can change this position 
with the Position method prior to ca lling this method. Data ca n be read from an object after a call to Get, 
or after data has been added to th e object with one or more Write call s (and the position has been relo-
cated before the data).
Example:None
ReadFloat   API-1435
4.8.2.33  ReadFloat
ReadFloat
( val )
Description:Reads a single “float” value from the current object.Input:NoneOutput:REAL4 val The value to read from the current object.Return Code:
FE_NOT_A V AILABLEThere is not enough data  left in the object to read, from the current 
position.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified value will be read from the object at the current posi tion. You can change this position 
with the Position method prior to ca lling this method. Data ca n be read from an object after a call to Get, 
or after data has been added to th e object with one or more Write call s (and the position has been relo-
cated before the data).
Example:None
 API-1436  ReadLong
4.8.2.34  ReadLong
ReadLong
( val )
Description:Reads a single “long” value from the current object.Input:NoneOutput:INT4 val The value to read  from the current object.
Return Code:
FE_NOT_A V AILABLEThere is not enough data  left in the object to read, from the current 
position.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified value will be read from the object at the current posi tion. You can change this position 
with the Position method prior to ca lling this method. Data ca n be read from an object after a call to Get, 
or after data has been added to th e object with one or more Write call s (and the position has been relo-
cated before the data).
Example:None
ReadShort   API-1437
4.8.2.35  ReadShort
ReadShort
( val )
Description:Reads a single “short” value from the current object.Input:NoneOutput:INT2 val The value to read  from the current object.
Return Code:
FE_NOT_A V AILABLEThere is not enough data  left in the object to read, from the current 
position.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified value will be read from the object at the current posi tion. You can change this position 
with the Position method prior to ca lling this method. Data ca n be read from an object after a call to Get, 
or after data has been added to th e object with one or more Write call s (and the position has been relo-
cated before the data).
Example:None
 API-1438  ReadBool
4.8.2.36  ReadBool
ReadBool
( val )
Description:Reads a single “bool” value from the current object.Input:NoneOutput:BOOL val The value to read  from the current object.
Return Code:
FE_NOT_A V AILABLEThere is not enough data  left in the object to read, from the current 
position.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified value will be read from the object at the current posi tion. You can change this position 
with the Position method prior to ca lling this method. Data ca n be read from an object after a call to Get, 
or after data has been added to th e object with one or more Write call s (and the position has been relo-
cated before the data).
Example:None
ReadDoubleArray   API-1439
4.8.2.37  ReadDoubleArray
ReadDoubleArray
( num, val )
Description:Reads an array of “double” va lues from the current object.
Input:NoneOutput:INT4 num The number of items in the array that is read.REAL8 val[0..num-1] The valu es from the current object.
Return Code:
FE_NOT_A V AILABLEThere is not enough data  left in the object to read, from the current 
position.
FE_NO_MEMORY Unable to allocate enough  memory to read the specified values.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified values will be  read from the object at the current position. You can ch ange this position 
with the Position method prior to ca lling this method. Data ca n be read from an object after a call to Get, 
or after data has been added to th e object with one or more Write call s (and the position has been relo-
cated before the data).
Example:None
 API-1440  ReadLongArray
4.8.2.38  ReadLongArray
ReadLongArray
( num, val )
Description:Reads an array of “long” valu es from the current object.
Input:NoneOutput:INT4 num The number of items in the array that is read.INT4 val[0..num-1] The valu es from the current object.
Return Code:
FE_NOT_A V AILABLEThere is not enough data  left in the object to read, from the current 
position.
FE_NO_MEMORY Unable to allocate enough  memory to read the specified values.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified values will be  read from the object at the current position. You can ch ange this position 
with the Position method prior to ca lling this method. Data ca n be read from an object after a call to Get, 
or after data has been added to th e object with one or more Write call s (and the position has been relo-
cated before the data).
Example:None
ReadBoolArray   API-1441
4.8.2.39  ReadBoolArray
ReadBoolArray
( num, val )
Description:Reads an array of “bool” valu es from the current object.
Input:NoneOutput:INT4 num The number of items in the array that is read.BOOL val[0..num-1] The values from the current object.Return Code:
FE_NOT_A V AILABLEThere is not enough data  left in the object to read, from the current 
position.
FE_NO_MEMORY Unable to allocate enough  memory to read the specified values.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified values will be  read from the object at the current position. You can ch ange this position 
with the Position method prior to ca lling this method. Data ca n be read from an object after a call to Get, 
or after data has been added to th e object with one or more Write call s (and the position has been relo-
cated before the data).
Example:None
 API-1442  ReadString
4.8.2.40  ReadString
ReadString
( val )
Description:Reads a text string from the current object.Input:NoneOutput:STRING val[0..length] The string to  read from the current object.
Return Code:
FE_NOT_A V AILABLEThere is not enough data  left in the object to read, from the current 
position.
FE_NO_MEMORY Unable to allocate enough  memory to read the specified values.
FE_INV ALID Invalid size for the data specified.Remarks/Usage:The specified values will be  read from the object at the current position. You can ch ange this position 
with the Position method prior to ca lling this method. Data ca n be read from an object after a call to Get, 
or after data has been added to th e object with one or more Write call s (and the position has been relo-
cated before the data).
Example:None
   API-1443
4.9  Results Browsing Objects
The Results Browsing object prov ides a fast, common interface to review analysis results whether 
they are stored in the FEMAP database or in an a ttached external file. Usi ng this object, results can 
be reviewed and locally modified in the object, but they cannot be stored  back in the database.
This object provides an alternativ e to using the Output and Output Set objects. The Output object 
provides access to a singe output vector, or a sing le vector and its components. This object pro-
vides two different groups of methods. The first simply allows you to di rectly find information 
about the Output Sets, Vectors and individual En tity Results (although this  last method will be 
very slow and should only be used in rare case s). The second group of methods allows much faster 
access to the actual analysis results . You should think of this capa bility just like a spreadsheet or 
table - possibly a very la rge spreadsheet- that you will fill with  analysis results. In the “spread-
sheet” the columns represent the ou tput vectors, with one column per vector. The rows of the 
“spreadsheet” represent the data for an  individual entity - either a Node or an Element. The object 
can only contain columns of one data type - that is, either Nodal Results or Elemental Results. You 
can not add columns of Nodal Results (for exampl e, Nodal Translations) and columns of Elemen-
tal Results (for example, Plate V on Mises Stress) to the same object at the same time.
4.9.1  Results Browsi ng Object Properties
Most of the functionality of this object is available through the methods which are described 
below. This property provides additional functionality to sup port a number of those methods.
4.9.2  Limitations and Usage of Methods
While the commands that allow you to review analys is results can be thought of as a rather large 
spreadsheet, it is still best to not go too far in loading results. Anal ysis results for large models, or 
for large numbers of cases or time steps can genera te files that are many gigabytes. Attempting to 
load all of this data at once is not practical. The amount of memory required would be huge. This 
object will swap its contents to disk allowing very  large amounts of data to  be loaded, however this Property Description
REAL8 ValueForNonExisting This property allows  you to control the value returned if you 
use any of the “Get” functions an d no results exist for that Row/
ID and Column. By default this  is 0.0. You should always 
check the return code of the Get Methods, but this property pro-
vides an additional way to flag individual “cells” that do not 
exist - especially for methods that  return multiple columns, or 
entire rows in one call.
BOOL AutoPopulate This property allows y ou to control the whether or not the table 
is populated automatically afte r using calls like GetColumnV2 
and SetColumnV2.
INT4 NextSetStartID This property set s the pointer to the current Set ID.
INT4 NextVectorStartID This property sets the pointer to the current Vector ID.
INT4 NextStudyStartID This property sets the pointer to the current analysis Study ID.
 API-1444  
will result in significantly de graded performance. In cases where your programming approach 
would require huge numbers of columns with huge numbers of rows, it may be more efficient to 
think about a different, more incremental algorith m. For example, if you have a 1 million element 
model with 1000 time steps of output where you wanted to find the max/min values just for one output vector across all the time steps, loading all the data at once would require 1000 columns 
(actually 1001, with the 1 extra being to keep th e max or min value), and 1 million rows. In spread-
sheet terminology, this would requir e over 1 billion cells. In this c ase, it might be more efficient to 
use two results objects. One object would cont ain the accumulated max/min data, and the other 
could simply load one (or a few) time steps at a tim e, and then add logic to incrementally find the 
max/min. Again, this is not “required”, but it may be more efficient. There are no explicit limits on 
the numbers of rows or columns. The practical lim its will be determined by the amount of memory 
that you have available. 
When programming this obj ect the methods that review the ava ilable Output Sets and Output Vec-
tors can be used just like the me thods on normal “Entity-based” ob jects. For example, you can call 
NextSetReset(), followed by repetitive calls to NextSet(...) to step thru all the available sets. Next-
VectorReset() and NextVector(...) are similar with  Output Vectors. With  the “spreadsheet” com-
mands, the required approach is to either start with an empty ob ject, or Clear() an already used 
object, then add the desired colu mns. Adding columns does not lo ad any entity re sults into the 
object, it simply defines the structure of the data to  be loaded. At this time you can also define any 
necessary transformations by setting the output orie ntations and the desired type of transform. 
After you have defined ALL of the columns and tr ansforms, a single call to Populate() must be 
made. This creates the rows and fills data into “c ells” in each defined column. After populating the 
table with data, you can use the other me thods to retrieve values from the table.
   API-1445
4.9.3  Output Vectors
4.9.3.1  Output Components
The components are 20 vector IDs of other vector s that are “components” of the current vector. 
There are several possible ways these components are used:
1. The current vector contains the vector magnitude of 3 other vectors that are in the global 
X, Y, and Z components of similar data:
In this case, Components 0, 1, and 2 are the vector IDs of the X, Y , and Z component vectors, 
respectively. An example of this type of usag e is Vector 1 (TOTAL TRANSLATION), which has 
Component 0=2(X TRANSLATION), Component 1=3(Y TRANSLATION) and Component 
2=4(Z TRANSLATION). These compon ents MUST be defined for de formed/animated plotting to 
work correctly. Components 3 thro ugh 19 must be 0 for this case.
2. The current vector contains data which should be plotted in a specific global direction: 
In this case, if plotting should occur in Global X,  then Component 0 must equal the current Vector 
ID. If Global Y , then Component 1 = current Vector ID, and if Global Z then Component 2 = cur-
rent Vector ID. All other components must equal 0 (i.e. only 1 nonzero component and it is equal 
to the current Vector ID).
3. The current vector contains elemental centroidal data for elements which also have 
related data at the element corners: 
In this case, the number of no nzero components depends upon th e number of nodes on this ele-
ment type (for example, output for linear plates has 4 components-4 nodes/corners). The nonzero 
components must equal the Vector IDs of the same type of data at the corn ers of the elements. For 
example, if the current vector is 7033 (T OP CENTROIDAL VON MISES STRESS) then compo-
nent 0 may be 11033 (CORNER1 TOP VON MI SES STRESS) and compon ent 1 may be 15033 
(CORNER2 TOP VON MISES STRESS) etc. If you do not have corner data, all components must 
be 0. If the components are define d, FEMAP will use the corner data (not the data in the current 
vector) when calculating data at  nodes (like for contouring). If no components are defined, 
FEMAP will assign the centroid al value to each node wh en doing the calculation.
4. The current vector contains line element data at one end of the element: 
This is just like the previous case. The first comp onent is the vector ID of the End A data, the sec-
ond component is the vector ID of the End B data. This type of output also requires special settings 
in the comp_dir variable. Se t comp_dir to 2 if you want FEMAP to  use the data as it is specified. 
Set comp_dir to 3 if you want FEMAP to reverse the sign of all End B data when doing a beam 
diagram. This adjusts for differ ences in sign conventions betwee n the various analysis programs. 
5. All other cases:
All components should be 0. This will force the data in the current vector to be used for every case. 
The current setting of the View Option Deformed Style - Deformed Direction  option will control 
the deformed plotting direction.
 API-1446  
4.9.3.2  Output Vector IDs
If you are writing your own Neutral files, you can choose any vector IDs that you want, but the 
normal conventions used by FEMAP are as follows:
Standard Output Vectors version 2020.1 and above
Category Vector Range Type
1 to 24,999,999 (magnitude, 
or non-complex)1 to 2,999 Nodal output
3,000 to 5,999 Line element output6,000 to 9,999 Plate element output10,000 to 25,999 Plate corner output26,000 to 59,999 Not currently used60,000 to 79,999 Solid element output80,000 to 89,999 Output on any element type90,000 to 99,999 PATRAN elemental output
100,000 to 999,999 Not currently used
1,000,000 to 3,999,999 Plate Laminate Ply output4,000,000 to 15,999,999 Plate Laminate Ply corner 16,000,000 to 17,499,999 Solid Laminate Ply output17,500,000 to 23,499,999 Solid Laminate Ply corner24,000,000 to 24,999,999 User Defined output
25,000,00 to 49,999,999 
(complex, phase)Same definition as magnitude data , just add 25,000,000 to IDs.
50,000,000 to 74,999,999 
(complex, real)Same definition as magnitude data , just add 50,000,000 to IDs.
75,000,000 to 99,999,999 
(complex, imaginary)Same definition as magnitude data , just add 75,000,000 to IDs.
   API-1447
Standard Output Vectors version 2019.1 and prior
Category Vector Range Type
1 to 9,999,999 (magnitude, 
or non-complex)1 to 2,999 Nodal output
3,000 to 5,999 Line element output6,000 to 59,999 Plate element output60,000 to 79,999 Solid element output80,000 to 89,999 Output on any element type90,000 to 99,999 PATRAN elemental output100,000 to 299,999 Plate corner output1,000,000 to 6,000,000 Laminate Ply output9,000,000 to 9,999,999 User Defined output
10,000,001 to 20,000,000 
(complex, phase)Same definition as magnitude data , just add 10,000,000 to IDs.
20,000,001 to 30,000,000 
(complex, real)Same definition as magnitude data , just add 20,000,000 to IDs.
30,000,001 to 40,000,000 
(complex, imaginary)Same definition as magnitude data , just add 30,000,000 to IDs.
 API-1448  Clear
4.9.4  Results Browsing General Object Methods
The following methods are for general use with the object.
4.9.4.1  Clear
Clear
(  )
Description:This method clears all data from the object and re initializes it to a default state.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:
GetModel   API-1449
4.9.4.2  GetModel
GetModel
( nModelID )
Description:This method returns the identifier of the model being used by the object.
Input:NoneOutput:INT8 nModelID Model identifierReturn Code:NoneRemarks/Usage:When the object is created, nModelID  is set to the current/active model.
Example:
 API-1450  SetModel
4.9.4.3  SetModel
SetModel
( nModelID )
Description:This method chooses th e model to be used fo r all further operations.
Input:INT8 nModelID Model identifierOutput:NoneReturn Code:NoneRemarks/Usage:When the object is created, nModelID  is set to the current/active model.
Example:
SendToDataTable   API-1451
4.9.4.4  SendToDataTable
SendToDataTable
( void )
Description:This method sends th e contents of a populated Results Browsing  Object to the Data Table. The Data 
Table must visible and be unlocked
Input:NoneOutput:NoneReturn Code:
FE_FAILResults Browsing Object has not been populated or Data Table is not 
visible.
FE_SECURITY Data Table is visible, but lockedRemarks/Usage:NoneExample:
 API-1452  StudyCreate
4.9.5  Results Browsing Study Methods
The following methods allow you to create, edit and review the Output  Studies that are available in 
the model.
4.9.5.1  StudyCreate
StudyCreate
( nStudyID, sTitle, nAnalysisProgram, nAnalysisType )
Description:This method creates and Analysis Study. Input:INT4 nStudyID The ID of the Analysis Study. STRING sTitle The title of the Analysis Study. 
INT4 nAnalysisProgramAnalysis program where output came from: 0=Unknown, 4=MSC/
NASTRAN, 5=ANSYS, 16=ABAQUS, 28=LS-Dyna, 
29=MSC.Marc, 31=NE/Nastran, 34=FEMAP Struc-tural. 36=NX Nastran. Use enum zAnalysisProgram  
INT4 nAnalysisTypeType of analysis the results came from: 0=None, 1=Static, 2=Normal 
Modes/Eigenvalue, 3=Transient Dynamic/Time History, 4=Fre-
quency/Harmonic Response, 5=Re sponse Spec-trum, 6=Random 
Response, 7=Buckling, 8=Design Opt, 9=Explicit Transient Dynam-
ics, 10=Nonlinear Static, 11=N onlinear Buckling, 12=Nonlinear 
Transient, 13=Implicit Transien t Dynamics, 17=Fatigue, 19=Com-
putational Fluid Dynamics, 20=Steady-State Heat Transfer, 21=Transient Heat Transfer, 22=Advanced Nonlinear Static, 
23=Advanced Non-linear Transient, 24=Advanced Nonlinear 
Explicit, 25=Static Aeroelasticity, 26=Aerodynamic Flutter. Use enum zAnalysisType . 
Output:NoneReturn Code:FE_FAIL Unable to create Analysis StudyRemarks/Usage:None Example:
NumberOfStudies   API-1453
4.9.5.2  NumberOfStudies
NumberOfStudies
(  )
Description:This method returns the total number of Analysis Studies in the model. 
Input:None  Output:NoneReturn Code:Number of Studies The number of StudiesRemarks/Usage:None Example:
 API-1454  NextStudyReset
4.9.5.3  NextStudyReset
NextStudyReset
(  )
Description:This method resets the next pointer so that the next call to NextSt udy will return the first available Anal-
ysis Study. 
Input:None  Output:NoneReturn Code:Number of Studies The number of StudiesRemarks/Usage:None Example:
NextStudy   API-1455
4.9.5.4  NextStudy
NextStudy
(  nExistState, nLocateOption )
Description:This method returns the next Analysis Study ID.  Input:
INT4 nExistState0=ID of Next Existing Analysis Study, 1=ID of next NonExisting 
Analysis Study
INT4 nLocateOption1=After, 2=Before, 3=After or Equa l, 4=Before or Equal. To incre-
ment from smallest to largest ID us e 1. To go from largest to smallest 
use 2. Options 3 and 4 are normally only used for finding the next NonExisting Analysis Study - care must be taken with these options 
to avoid infinite loops.
Output:
None
Return Code:FE_FAIL No more Analysis Study IDs are found given the specified options.Any other number The ID of the Existing/NonExisting Analysis Study found.Remarks/Usage:None Example:
 API-1456  StudyExist
4.9.5.5  StudyExist
StudyExist
(  nStudyID )
Description:This method determin es if a selected Analysis Study exists.
Input:INT4 nStudyID The ID of the Analysis Study to check. Output:NoneReturn Code:FE_FAIL The Analysis Study does not exist.Remarks/Usage:None Example:
StudyInfo   API-1457
4.9.5.6  StudyInfo
StudyInfo
(  nStudyID, pnAnalysisProgram, pnAnalysisType )
Description:This method retrieves the informa tion of a selected Analysis Study.
Input:INT4 nStudyID The ID of the Analysis Study to check. Output:
INT4 nAnalysisProgramAnalysis program where output came from: 0=Unknown, 4=MSC/
NASTRAN, 5=ANSYS, 16=ABAQUS, 28=LS-Dyna, 
29=MSC.Marc, 31=NE/Nastran, 34=FEMAP Struc-tural. 36=NX 
Nastran. Use enum zAnalysisProgram  
INT4 nAnalysisTypeType of analysis the results came from: 0=None, 1=Static, 2=Normal 
Modes/Eigenvalue, 3=Transient Dynamic/Time History, 4=Fre-quency/Harmonic Response, 5=Re sponse Spec-trum, 6=Random 
Response, 7=Buckling, 8=Design Opt, 9=Explicit Transient Dynam-
ics, 10=Nonlinear Static, 11=N onlinear Buckling, 12=Nonlinear 
Transient, 13=Implicit Transien t Dynamics, 17=Fatigue, 19=Com-
putational Fluid Dynamics, 20=Steady-State Heat Transfer, 
21=Transient Heat Transfer, 22=Advanced Nonlinear Static, 
23=Advanced Non-linear Transient, 24=Advanced Nonlinear 
Explicit, 25=Static Aeroelasticity, 26=Aerodynamic Flutter. Use 
enum zAnalysisType . 
Return Code:
FE_FAILUnable to retrieve information a bout selected Analysis Study - most 
likely the study does not exist.
Remarks/Usage:None Example:
 API-1458  StudyTitle
4.9.5.7  StudyTitle
StudyTitle
(  nStudyID, sTitle )
Description:This method retrieves the title of a selected Analysis Study.
Input:INT4 nStudyID The ID of the Analysis Study to check. Output:STRING sTitle The title of the Analysis Study. Return Code:FE_FAIL Unable to retrieve title  of selected Analysis Study.
Remarks/Usage:None Example:
StudyNotes   API-1459
4.9.5.8  StudyNotes
StudyNotes
(  nStudyID, sNotes)
Description:This method retrieves the note s of a selected Analysis Study.
Input:INT4 nStudyID The ID of the Analysis Study to check. Output:STRING sNotes The notes of the Analysis Study. Return Code:FE_FAIL Unable to retrieve notes of selected Analysis Study.Remarks/Usage:None Example:
 API-1460  NumberOfSets
4.9.6  Results Browsing Set Methods
The following methods allow you to review the Output Sets th at are available in the model.
4.9.6.1  NumberOfSets
NumberOfSets
( )
Description:This method returns the number of output sets that are currently available.Input:NoneOutput:NoneReturn Code:Number of Sets The number of available SetsRemarks/Usage:NoneExample:
NextSetReset   API-1461
4.9.6.2  NextSetReset
NextSetReset
( )
Description:This method resets the next pointer so that the next call to NextSe t will return the first available Output 
Set.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:
 API-1462  NextSet
4.9.6.3  NextSet
NextSet
( nExistState, nLocateOption )
Description:This method returns the ID of the next available Output Set
Input:
INT4 nExistState0=ID of Next Existing Output Set, 1=ID of next NonExisting Output 
Set
INT4 nLocateOption1=After, 2=Before, 3=After or Equa l, 4=Before or Equal. To incre-
ment from smallest to largest ID us e 1. To go from largest to smallest 
use 2. Options 3 and 4 are normally only used for finding the next NonExisting Output Set - care must be taken with these options to 
avoid infinite loops.
Output:
None
Return Code:FE_FAIL No more Output Set IDs are found given the specified options.Any other number The ID of the Existing/NonExisting Output Set found.Remarks/Usage:NoneExample:
SetExists   API-1463
4.9.6.4  SetExists
SetExists
( nSetID )
Description:This method determin es if a selected Output Set exists.
Input:INT4 nSetID The ID of the Output Set to query.Output:NoneReturn Code:FE_FAIL The Output Set does not exist.Remarks/Usage:NoneExample:
 API-1464  SetInfo
4.9.6.5  SetInfo
SetInfo
( nSetID, nAnalysisProgram, nAnalysisType, dSetValue )
Description:This method returns informatio n about a selected Output Set
Input:INT4 nSetID The ID of the Output Set to query.Output:INT4 nAnalysisProgram Refer to the “program” property of the Output Set objectINT4 nAnalysisType Refer to the “analysi s” property of the Output Set object
REAL8 dSetValue Refer to the “value” property of the Output Set object
Return Code:
FE_FAILUnable to retrieve information about  selected set - most likely the set 
does not exist.
Remarks/Usage:NoneExample:
SetTitle   API-1465
4.9.6.6  SetTitle
SetTitle
( nSetID, sTItle )
Description:This method returns the title of a selected Output SetInput:INT4 nSetID The ID of the Output Set to query.Output:STRING sTitle The title of the selected Output SetReturn Code:
FE_FAILUnable to retrieve information about  selected set - most likely the set 
does not exist.
Remarks/Usage:NoneExample:
 API-1466  SetSubcase
4.9.6.7  SetSubcase
SetSubcase
( nSetID )
Description:This method returns the Nastran subcase ID  (Case ID) of the selected Output Set
Input:INT4 nSetID The ID of the Output Set to query.Output:NoneReturn Code:
ValueThe ID of the Nastran subcase associated with the Output Set. If 0, 
no subcase is associated with the output set.
Remarks/Usage:These are automatically created for Nastran Output Sets created from subcases when the Use Static Sub-
case IDs option is on in the Results  tab of the File, Preference command. 
Example:
SetRevision   API-1467
4.9.6.8  SetRevision
SetRevision
( nSetID )
Description:This method returns the revision number of a selected Output SetInput:INT4 nSetID The ID of the Output Set to query.Output:NoneReturn Code:
ValueThe ID of the revision number as sociated with the Nastran Output 
Set. If 0, no revision is ass ociated with the output set.
Remarks/Usage:These revision numbers are automatically cr eated for Nastran Output Sets when the Track Revision  
option is on in the Results  tab of the File, Preference command.
Example:
 API-1468  SetNotes
4.9.6.9  SetNotes
SetNotes
( nSetID, sNotes )
Description:This method returns the note s of a selected Output Set
Input:INT4 nSetID The ID of the Output Set to query.Output:STRING sNotes The notes of the selected Output SetReturn Code:
FE_FAILUnable to retrieve information about  selected set - most likely the set 
does not exist.
Remarks/Usage:NoneExample:
SetLocation   API-1469
4.9.6.10  SetLocation
SetLocation
( nSetID, nSetLocation )
Description:This method identifies whet her data for the Output Set is in the da tabase or in an attached external file.
Input:INT4 nSetID The ID of the Output Set to query.Output:
INT4 nSetLocation1=In FEMAP Database (FRL_DB)
2=In Nastran OP2 File (FRL_OP2)
3=In FNO File (FRL_FNO)
4=Not Used5=In Nastran XDB File (FRL_XDB)
6=In Comma-Separated Valu e (CSV) File (FRL_CSV)
7=In Virtual Output Set (FRL_VIRTUAL)8=In ABAQUS ODB File (FRL_ODB)
Return Code:
FE_FAILUnable to retrieve information about  selected set - most likely the set 
does not exist.
Remarks/Usage:NoneExample:
 API-1470  SetHasVectorsInDB
4.9.6.11  SetHasVectorsInDB
SetHasVectorsInDB
( nSetID )
Description:This method indicates whether an Output Set contains Output Vector s that are in the FEMAP Database.
Input:INT4 nSetID The ID of the Output Set to query.Output:NoneReturn Code:FE_FAIL There are no Output Vectors in the FEMAP Database for this Set
Remarks/Usage:If this method returns FE_OK, then it contains Ou tput Vectors located in the FEMAP Database. Even 
Output Sets that are located in an  attached external file can cont ain certain Output Vectors in the 
FEMAP Database, if one of the FEMAP commands ( like Model->Output->Process) was used to create 
additional Output Vectors in that Output Set.
Example:
Sets   API-1471
4.9.6.12  Sets
Sets
( nSetSetID, bClear )
Description:This method fills a Set object with the IDs of  all of the Output Se ts that are available
Input:INT4 nSetSetID The ID of the Set Object to fill with the available Output Set IDs
BOOL bClearIf True, the Set object is cleared pr ior to being filled with the avail-
able Output Set IDs.
Output:NoneReturn Code:FE_FAIL No Output Sets were found.Remarks/Usage:NoneExample:
 API-1472  SetCreate
4.9.6.13  SetCreate
SetCreate
( nSetID, sTitle, nStudyID, nAnalysisProgram, nAnalysisType, dSetValue )
Description:This method creates  a new Output Set.
Input:INT4 nSetID The ID of the Output Set to create.STRING sTitle The title of the Output Set.INT4 nStudyID The ID of the Study the Output Set is associated with.
INT4 nAnalysisProgramThe analysis program of the Output Set. 1=FEMAP Generated, 
2=PAL, 3=PAL 2, 4=MSC/NASTRAN, 5=ANSYS, 6=STAR-
DYNE, 7=COSMOS, 8=PATRAN, 9=FEMAP Neutral, 
10=ALGOR, 11=SSS/NASTRAN, 12=Comma Separated, 13=UAI/NASTRAN, 14=Cosmic NASTRAN , 15=STAAD, 16=ABAQUS, 
17=WECAN, 18=MTAB/SAP, 19 =CDA/Sprint, 20=CAEFEM, 
21=I-DEAS, 22=ME/NASTRAN, 26=CSA/NASTRAN, 28=CFDe-
sign, 31=LS-DYNA, 32=MARC, 33=SINDA, 38=NX Nastran. 
INT4 nAnalysisTypeThe analysis type of the Output Set. 0=Unknown, 1=Static, 2=Nor-
mal Modes/ Eigenvalue, 3=Transient Dynamic/Time History, 4=Fre-
quency/Harmonic Response, 5=Re sponse Spectrum, 6=Ran-dom 
Response, 7=Buckling, 8=Design Opt, 9=Explicit Transient Dynam-
ics, 10=Nonlinear Static, 11=N onlinear Buckling, 12=Nonlinear 
Transient, 13=Implicit Transien t Dynamics, 17=Fatigue, 19=Com-
putational Fluid Dynamics, 20=Steady-State Heat Transfer, 21=Transient Heat Transfer, 22=Advanced Nonlinear Static, 
23=Advanced Nonlinear Transient, 24=Advanced Nonlinear 
Explicit, 25=Static Aero-elas ticity, 26=Aerodynamic Flutter.
REAL8 dSetValueThe output set value. For modal an alyses, the modal frequency. For 
any transient or nonlinear analysis , the time value at this step. For 
Buckling, the eigenvalue. For static analysis = 0.0
Output:NoneReturn Code:FE_FAIL Output Set was not created.Remarks/Usage:NoneExample:
SetCreate   API-1473
SetCreate
( nSetID, sTitle, nStudyID, nAnalysisProgram, nAnalysisType, dSetValue )
 API-1474  NextVectorResetV2
4.9.7  Results Browsing Vector Methods
The following methods allo w you to review the Output Vector s that are available in a selected 
Output Set.
4.9.7.1  NextVectorResetV2
NextVectorResetV2
( nSetID )
Description:This method resets the next pointer so that the next call to NextV ector will return the first available Out-
put Vector in the Output Set. This method replace s NextVectorReset. For more  information see, Section 
2.4, "Working with Output in FEMAP 2020.1 and above".
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:
NextVectorV2   API-1475
4.9.7.2  NextVectorV2
NextVectorV2
( nSetID, nExistState, nLocateOption )
Description:This method returns the ID of the next available Output Vector in a selected Output Set. This method 
replaces NextVector. For more information, see Sec tion 2.4, "Working with Output in FEMAP 2020.1 
and above".
Input:INT4 nSetID The ID of the Output Set to query for Output Vectors
INT4 nExistState0=ID of Next Existing Output Set,  1=ID of next Non-Existing Out-
put Set
INT4 nLocateOption1=After, 2=Before, 3=After or Equa l, 4=Before or Equal. To incre-
ment from smallest to largest ID us e 1. To go from largest to smallest 
use 2. Options 3 and 4 are normally only used for finding the next 
Non-Existing Output Set - care must  be taken with these options to 
avoid infinite loops.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:
 API-1476  VectorExistsV2
4.9.7.3  VectorExistsV2
VectorExistsV2
( nSetID, nVectorID )
Description:This method indicates whether a selected Output Vect or exists in a selected Ou tput Set. This method 
replaces VectorExist. For more info rmation see, Section 2.4, "Working  with Output in  FEMAP 2020.1 
and above".
Input:INT4 nSetID The ID of the Output Set to queryINT4 nVectorID The ID of the Output Vector to queryOutput:None
Return Code:
FE_FAIL The Output Vector does not exist in the selected Output Set
Remarks/Usage:NoneExample:
VectorInfoV2   API-1477
4.9.7.4  VectorInfoV2
VectorInfoV2
( nSetID, nVectorID, nDataType, nOutputType, bCentroidTotal, pbNonlinear, nCompDir )
Description:This method returns selected info rmation about a selected Output Vector. This method replaces Vec-
torInfo. For more information see, Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:INT4 nSetID The ID of the Output Set to queryINT4 nVectorID The ID of the Output Vector to queryOutput:INT4 nDataType Refer to the “locatio n” property of the Output object
INT4 nOutputType Refer to the “category” property of the Output objectBOOL bCentroidTotal Refer to the “centroi dtotal” property of the Output object
BOOL pbNonlinear Refer to the “nonlinea r” property of the Output object
INT4 nCompDir Refer to the “hascomponent” property of the Output objectReturn Code:
FE_FAILUnable to query the selected Outp ut Vector - probably because it 
does not exist.
Remarks/Usage:NoneExample:
 API-1478  VectorTitleV2
4.9.7.5  VectorTitleV2
VectorTitleV2
( nSetID, nVectorID, sTitle )
Description:This method returns the title of th e selected Output Vector. This meth od replaces VectorTitle. For more 
information see, Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:INT4 nSetID The ID of the Output Set to queryINT4 nVectorID The ID of the Output Vector to queryOutput:STRING sTitle The Output Vector TitleReturn Code:
FE_FAILUnable to query the selected Outp ut Vector - probably because it 
does not exist.
Remarks/Usage:NoneExample:
VectorTitlesV2   API-1479
4.9.7.6  VectorTitlesV2
VectorTitlesV2
( nSetID, bIncludeID, minID, maxID, Count, listID, listTITLE )
Description:This method retrieves two arrays which contain the IDs and titles of a ll Output Vectors in the selected 
ID range.
Input:INT4 nSetID The ID of the Output Set to query
BOOL bIncludeIDIf True, the titles are in the form “ID..title” (for example, “1..Total 
Translation”. If False, only the title , without the ID or separator is 
returned.
INT4 minIDThe minimum and maximum Output Vector IDs to retrieve. You can 
set  minID=maxID=0 to retrieve a ll available Output Vector IDs. INT4 maxID
Output:
INT4 CountThe number of Output Vectors retr ieved. This is the number of 
entries in listID and listTITLE.
INT4 listID[0..Count-1] The IDs of the Output Vectors.
STRING listTITLE[0..Count-1]The titles of the available Output Ve ctors. If the Output Vector does 
not have a title, the string “Untitled” will be returned. 
Return Code:FE_NOT_EXIST No vectors exist in the selected rangeFE_NO_MEMORY Cannot allocate enough memory for the Titles
FE_FAIL Failed to retrieve the titles (should not happen)
Remarks/Usage:NoneExample:None
 API-1480  VectorComponentsV2
4.9.7.7  VectorComponentsV2
VectorComponentsV2
( nSetID, nVectorID, nNumComponents, nComponents )
Description:This method indicates whether a selected Output V ector has Component Output Vectors and, if so, 
returns the number of Co mponent Output Vectors an d their IDs. This method replaces VectorCompo-
nents. For more information see, Section 2.4, "W orking with Output in FEMAP 2020.1 and above".
Input:INT4 nSetID The ID of the Output Set to queryINT4 nVectorID The ID of the Output Vector to queryOutput:INT4 nNumComponents The number of components
INT4 nComponents[0..nNum-
Components-1]An array of component vector IDs
Return Code:
FE_FAILUnable to query the selected Outp ut Vector - probably because it 
does not exist.
Remarks/Usage:Components are the IDs of other Output Vectors that  are related to the selected Output Vectors. For 
things like “Total Transla tion” (or any other Total Nodal output), there will be 3 components that repre-
sent the X,Y ,Z component of the translation in Glob al Rectangular coordinate s. For Elemental Output 
such as Plate or Solid Stresses, the Vector that cont ains the centroidal value will have components that 
represent the same value at the associated corners (n odes) of the element. Fo r Beam/Bar results, there 
will be 2 components which are the vectors that contain the resu lts at the two ends of the element. One 
of these will be the same ID  as the selected vector.
Example:
VectorLocationV2   API-1481
4.9.7.8  VectorLocationV2
VectorLocationV2
( nSetID, nVectorID, nVectorLocation )
Description:This method identifies whet her data for the Output Vector is in th e database or in an attached external 
file. This method replaces VectorLo cation. For more information see, Section 2.4, "Wor king with Out-
put in FEMAP 2020.1 and above".
Input:INT4 nSetID The ID of the Output Set to queryINT4 nVectorID The ID of the Output Vector to queryOutput:INT4 nVectorLocation 0=In FEMAP Database, 1=In Nastran OP2 File, 2=In FNO File
Return Code:
FE_FAILUnable to query the selected Outp ut Vector - probably because it 
does not exist.
Remarks/Usage:NoneExample:
 API-1482  VectorEntitiesV2
4.9.7.9  VectorEntitiesV2
VectorEntitiesV2
( nSetID, nVectorID, nEntitySetID, bClear )
Description:This method loads the IDs of all No des or Elements that contain data in the selected vector into a Set 
Object. This method repl aces VectorEntities. For more information see, Section 2.4, "Working with Out-
put in FEMAP 2020.1 and above".
Input:INT4 nSetID The ID of the Output Set to queryINT4 nVectorID The ID of the Output Vector to query
INT4 nEntitySetIDThe ID of the Set Object that will  receive the IDs of the Nodes or 
Elements that have data  in this Output Vector
BOOL bClearIf True, the Set Object is cleared pr ior to loading it with the entity 
IDs
Output:NoneReturn Code:
FE_FAILUnable to query the selected Outp ut Vector - probably because it 
does not exist.
Remarks/Usage:You can tell whether the IDs refe rence Nodes or Elements by using the VectorInfo method.
Example:
VectorsV2   API-1483
4.9.7.10  VectorsV2
VectorsV2
( nSetID, nVectorSetID, bClear )
Description:This method loads a Set Obje ct with the IDs of all Output Vectors in a selected Output Set. This method 
replaces Vectors. For more information see, Section 2.4, "Working with Output in FEMAP 2020.1 and 
above".
Input:INT4 nSetID The ID of the Output Set to queryINT4 nVectorSetID The ID of the Set Object  which will receive the Output Vector IDs
BOOL bClear If True, the Set Object is cleared prior to loading the IDsOutput:
None
Return Code:
FE_FAILUnable to query the selected Outp ut Vector - probably because it 
does not exist.
Remarks/Usage:NoneExample:
 API-1484  NonExistingUserVectorV2
4.9.7.11  NonExistingUserVectorV2
NonExistingUserVectorV2
( nSetID )
Description:This method an output vector ID of the next non-exis ting vector in the user created output vector block. 
Output Set.
Input:INT4 nSetID The ID of the Output Set to query.Output:NoneReturn Code:FE_FAIL Unable to return next non-existing vector ID.Remarks/Usage:NoneExample:
VectorID   API-1485
4.9.7.12  VectorID
VectorID
(  )
Description:This method returns a ResultsIDQuery Object. It is often used for querying an output vector ID without 
initially declaring a ResultsIDQuery object. For more  on the ResultsIDQuery ob ject, see Section 4.18, 
"Results Vector ID Query Objects"
Input:NoneOutput:NoneReturn Code:
None
Remarks/Usage:NoneExample:
 API-1486  EntityValueV2
4.9.8  Results Browsi ng Entity Value Methods
The following method allows you to review the Ou tput for individual Nodes or Elements in a 
selected Output Vector.
4.9.8.1  EntityValueV2
WARNING
This method must be used with great caution - espe cially with attached re sults files. Using it may 
result in reading large amounts of data for every call, and performance will be especially poor. The 
only appropriate time to use this  is if you must dynamically query  the results on small numbers of 
nodes/elements. In almost any other case, it will be more effici ent to code an algorithm using the 
“spreadsheet” capability of this object.
EntityValueV2
( nSetID, nVectorID, nEntityID, dVal )
Description:This method returns the Output Value for a node/e lement in a selected Ou tput Vector. This method 
replaces EntityValue. For more info rmation see, Section 2.4, "Worki ng with Output in FEMAP 2020.1 
and above".
Input:INT4 nSetID The ID of the Output Set to queryINT4 nVectorID The ID of the Output Vector to query
INT4 nEntityIDThe ID of the Node or Element to query. If the vector contains nodal 
data, this must be the ID of a node . Likewise, if the vector contains 
elemental data, this must be the ID  of an element. Vectors that con-
tain element corner data are still el emental vectors, and must be spec-
ified by element ID.
Output:REAL8 dVal The Output Value for the sel ected Set, Vector and Node/Element.
Return Code:
FE_FAILUnable to query the selected Outp ut Vector - probably because it 
does not exist.
Remarks/Usage:See WARNING Above !Example:
EntityValueV2   API-1487
EntityValueV2
( nSetID, nVectorID, nEntityID, dVal )
 API-1488  AddColumnV2
4.9.9  Results Browsing Bu lk Data Review Methods
The following method allows you to  review the Output for individu al Nodes or Elements in a man-
ner that is similar to setting up, loading and qu erying a spreadsheet. For reviewing large amounts 
of data, these methods are by far the fastest.
4.9.9.1  AddColumnV2
AddColumnV2
( nSetID, nVectorID, bAddComponentsCorners, nColumnsAdded, nColumnIndices  )
Description:This method adds a co lumn to the object that will be filled by a specified Output Vector. This method 
replaces AddColumn. For more information see, Sec tion 2.4, "Working with Output in FEMAP 2020.1 
and above".
Input:INT4 nSetID The ID of the Output Set to load
INT4 nVectorID The ID of the Output Vector to LoadBOOL bAddComponentsCorn-
ersIf True, additional columns will be  added to accom modate the com-
ponents of the selected vector, if any.
Output:INT4 nColumnsAdded The total number of columns added. 
INT4 nColumnIndices[0..nCol-
umnsAdded-1]The indices of the columns that we re added. nColumnIndices[0] is 
always the index of the column fo r the selected vector. If component/
corner vectors were added, their indices will be in nColumnIndi-ces[1] and beyond.
Return Code:
FE_INV ALIDThe object has already been populated with data. You can only add 
columns prior to po pulating the object.
FE_NOT_EXIST The selected vector does not exist
FE_BAD_TYPEThe selected vector is not of the same type (Nodal or Elemental) as 
other vectors in the object.
FE_FAIL Unable to add column.Remarks/Usage:Always remember to remember the nColumnIndices values - they will be needed to query the actual 
results after data is loaded by Populate.
Example:
AddEmptyColumns   API-1489
4.9.9.2  AddEmptyColumns
AddEmptyColumns
( nNumberOfColumns, nColumnIndices )
Description:This method adds one or more  columns that are not associated with any Output Vectors.
Input:INT4 nNumberOfColumns The number of columns to addOutput:INT4 nColumnIndices[0..nCol-
umnsAdded-1]The indices of the columns that were added. 
Return Code:
FE_INV ALIDThe object has already been populated with data. You can only add 
columns prior to po pulating the object.
FE_NO_MEMORY Unable to allocate memo ry to return th e column indices
Remarks/Usage:Use this method to add columns th at you want to use to compute other values. When you populate the 
object, these columns will remain empty, but they will be available for you to store values computed 
from querying the other values.
Example:
 API-1490  AddConversionColumnV2
4.9.9.3  AddConversionColumnV2
AddConversionColumnV2
( nSetID, nVectorID, nConversionApproach, nColumnIndex )
Description:This method adds one or more columns that are not associated w ith any Output Vectors. This method 
replaces AddConversionColumn. For more informatio n see, Section 2.4, "Working with Output in 
FEMAP 2020.1 and above".
Input:INT4 nSetID The ID of the Output Set to load
INT4 nVectorID The ID of the Output Vector to Load
INT4 nConversionApproach0=Average, 1=Max Value, 2= Average, Skip Corner Results, 3=Max 
Value, Skip Corner Results, 4=Mi n Value, 5=Min Value, Skip Cor-
ner Results.
Output:INT4 nColumnIndex The index of the column that was added. 
Return Code:
FE_INV ALIDThe object has already been populated with data. You can only add 
columns prior to po pulating the object.
FE_NOT_EXIST The selected vector does not exist
FE_BAD_TYPEThe selected vector (once converted)  is not of the same type (Nodal 
or Elemental) as other vectors in the object.
FE_FAIL Unable to add column.Remarks/Usage:Use this method to add columns that  you want to use to convert existi ng Nodal results to Elemental, or 
vice versa. When you populate th e object, these columns will be auto matically populated with the con-
verted results. 
If you do not want to convert based on results in  the entire model, you must call DataNeeded() and 
define the Element ID set prior to calling this meth od. You must define the Element ID set, no matter 
whether you are converting Elemental to Nodal results or N odal to Elemental.
Example:
AddEnvelopeColumn   API-1491
4.9.9.4  AddEnvelopeColumn
AddEnvelopeColumn
( nEnvelopeType, nDataColumnIndex, nColumnColumnIndex )
Description:This method adds colu mns that will be Populated() with an envelope of the results from the Output Vec-
tors in each row.
Input:INT4 nEnvelopeType 0=Max Value, 1=Min Value, 2=Max Absolute ValueOutput:INT4 nDataColumnIndex The index of the column  that contains the enveloped results value
INT4 nColumnColumnIndexThe index of the column that contai ns the index of the column where 
the enveloped value came from.
Return Code:
FE_INV ALIDThe object has already been populated with data. You can only add 
columns prior to po pulating the object.
FE_BAD_DATA An invalid value has been  specified for the envelope type
FE_FAIL Unable to add column.Remarks/Usage:Use this method if you want to find the maximum or minimum value of other Output Vectors. You can 
Add any other combination of Output  Vectors that you want and they  will be “enveloped” during Popu-
late(). Empty columns are not considered. The envelope  is performed as a final step so that all conver-
sions and transforms have already been applie d to the populated data  prior to enveloping.
Example:
 API-1492  AddEnvelopeColumn
Sub Main
   Dim App As femap.model
   Set App = feFemap()
   Dim Res As femap.Results
   Set Res = App.feResults
   Dim ResVal1 As Double
   Dim numcolumns As Long
   Dim colindices As Variant
   Dim dataloc As Long   Dim envcolumn As Long
   Dim ColColIndex As Long
   Dim eset As femap.Set
   Set eset = App.feSet   eset.AddAll (FT_ELEM)
   rc = Res.AddColumn (1, 7033, False, numcolumns, colindices)
   rc = Res.AddColumn (2, 7033, False, numcolumns, colindices)
   rc = Res.AddColumn (3, 7033, False, numcolumns, colindices)
   rc = Res.AddEnvelopeColumn (0, envcolumn, ColColIndex)   rc = Res.DataLocation (dataloc)
   rc = Res.Populate
   While eset.Next
      Res.GetValue (eset.CurrentID, envcolumn, ResVal1)
       App.feAppMessage (FCM_NORMAL, _         "Value"+Str$(eset.CurrentID)+ " is"+Str$(ResVal1))
   Wend
End SubAddEnvelopeColumn
( nEnvelopeType, nDataColumnIndex, nColumnColumnIndex )
AddEnvelopeColumn   API-1493
Sub Main 
Dim App As femap.model 
Set App = feFemap() 

Dim Res As femap.Results 
Set Res = App.feResults 

Dim rc As femap.zReturnCode 
Dim nNumCol As Long 
Dim vCol As Variant 
Dim nEnvCol(1) As Long 
Dim i As Long 
Dim nID As Long 
Dim dVals As Variant 
Dim nSet As Long 
Dim nVec As Long

rc = Res.AddColumn( 1, 7020, False, nNumCol, vCol ) 
rc = Res.AddColumn( 1, 7021, False, nNumCol, vCol ) 
rc = Res.AddColumn( 1, 7023, False, nNumCol, vCol ) 
rc = Res.AddEnvelopeColumn( FOPA_ALL, nEnvCol(0), nEnvCol(1) ) 
Res.Populate() 
For i=0 To Res.NumberOfRows() 
  Res.GetMultipleInRow( i, 2, nEnvCol, nID, dVals ) 
  Res.GetColumnVector(dVals(1), nSet, nVec ) 
  App.feAppMessage( FCM_NORMAL, "ID="+Str$(nID)+"    Max="+ _ 
                 Format$(dVals(0)," 0.000E+00;-0.000E+00")+ _ 
           "    From Set="+Str$(nSet)+" Vector="+Str$(nVec)) 
Next
End SubAddEnvelopeColumn
( nEnvelopeType, nDataColumnIndex, nColumnColumnIndex )
 API-1494  DataNeeded
4.9.9.5  DataNeeded
DataNeeded
( nDataType, nEntitySetID )
Description:This method defines a set of entity IDs th at will be used to Populate the object.
Input:INT4 nDataType The only available data types are 7=Node, 8=Element
INT4 nEntitySetID The ID of a Set object  that contains the desired entity IDs
Output:NoneReturn Code:FE_BAD_TYPE The specified data type is not validRemarks/Usage:This method must be called prior to calling Populate() and must specify the same data type as the Output 
Vectors being loaded if it is to be effective.   Yo u can also use this method prior to calling AddConver-
sionColumn() to specify Element IDs to be used in converting results during Populate().
Example:
SetTri3Orientation   API-1495
4.9.9.6  SetTri3Orientation
SetTri3Orientation
( nStress, nStrain, nForce )
Description:This method sets the defau lt orientations for Elemental Results on 3-noded triangles
Input:INT4 nStress 0=First Edge, 1=Midsid e Locations, 3=Material Direction
INT4 nStrain 0=First Edge, 1=Midsid e Locations, 3=Material Direction
INT4 nForce 0=First Edge, 1=Midside Locations, 3=Material DirectionOutput:NoneReturn Code:FE_INV ALID The object has already been populated with data. FE_BAD_DATA One or more of the arguments has an invalid value.Remarks/Usage:This method is not normally required, as defaults are set as preferences, but if it is used, it must be called 
prior to calling Populate().
Example:
 API-1496  SetTri6Orientation
4.9.9.7  SetTri6Orientation
SetTri6Orientation
( nStress, nStrain, nForce )
Description:This method sets the defau lt orientations for Elemental Results on 6-noded triangles
Input:INT4 nStress 0=First Edge, 1=Midsid e Locations, 3=Material Direction
INT4 nStrain 0=First Edge, 1=Midsid e Locations, 3=Material Direction
INT4 nForce 0=First Edge, 1=Midside Locations, 3=Material DirectionOutput:NoneReturn Code:FE_INV ALID The object has already been populated with data. FE_BAD_DATA One or more of the arguments has an invalid value.Remarks/Usage:This method is not normally required, as defaults are set as preferences, but if it is used, it must be called 
prior to calling Populate().
Example:
SetQuad4Orientation   API-1497
4.9.9.8  SetQuad4Orientation
SetQuad4Orientation
( nStress, nStrain, nForce )
Description:This method sets the default orientations for Elemental Results on 4-noded quadrilateral
Input:
INT4 nStress0=First Edge, 1=Midside Locations, 2=Diagonal Bisector, 3=Mate-
rial Direction
INT4 nStrain0=First Edge, 1=Midside Locations, 2=Diagonal Bisector, 3=Mate-
rial Direction
INT4 nForce0=First Edge, 1=Midside Locations, 2=Diagonal Bisector, 3=Mate-
rial Direction
Output:NoneReturn Code:FE_INV ALID The object has already been populated with data. FE_BAD_DATA One or more of the arguments has an invalid value.Remarks/Usage:This method is not normally required, as defaults are set as preferences, but if it is used, it must be called 
prior to calling Populate().
Example:
 API-1498  SetQuad8Orientation
4.9.9.9  SetQuad8Orientation
SetQuad8Orientation
( nStress, nStrain, nForce )
Description:This method sets the default orientations for Elemental Results on 8-noded quadrilateral
Input:
INT4 nStress0=First Edge, 1=Midside Locations, 2=Diagonal Bisector, 3=Mate-
rial Direction
INT4 nStrain0=First Edge, 1=Midside Locations, 2=Diagonal Bisector, 3=Mate-
rial Direction
INT4 nForce0=First Edge, 1=Midside Locations, 2=Diagonal Bisector, 3=Mate-
rial Direction
Output:NoneReturn Code:FE_INV ALID The object has already been populated with data. FE_BAD_DATA One or more of the arguments has an invalid value.Remarks/Usage:This method is not normally required, as defaults are set as preferences, but if it is used, it must be called 
prior to calling Populate().
Example:
SetSolidOrientation   API-1499
4.9.9.10  SetSolidOrientation
SetSolidOrientation
( nIsotropic, nAnisotropic, nHyperelastic )
Description:This method sets the defau lt orientations for Elemental Results on Solid elements
Input:INT4 nIsotropic 0=Material Direction,  1=Global Rectangular, 3=Element
INT4 nAnisotropic 0=Material Direction, 1=Global Rectangular, 3=ElementINT4 nHyperelastic 0=Material Directi on, 1=Global Rectangular, 3=Element
Output:NoneReturn Code:FE_INV ALID The object has already been populated with data. FE_BAD_DATA One or more of the arguments has an invalid value.Remarks/Usage:This method is not normally required, as defaults are set as preferences, but if it is used, it must be called 
prior to calling Populate().
Example:
 API-1500  SetEngrShearStrain
4.9.9.11  SetEngrShearStrain
SetEngrShearStrain
( bEngrShearStrain )
Description:This method sets the a ssumption for shear strain
Input:BOOL bEngrShearStrain True=Engineering Shear Strain, False = Actual Shear StrainOutput:NoneReturn Code:FE_INV ALID The object has already been populated with data. Remarks/Usage:This method is not normally required, as defaults are set as preferences, but if it is used, it must be called 
prior to calling Populate().
Example:
SetNodalTransform   API-1501
4.9.9.12  SetNodalTransform
SetNodalTransform
( nTransformTo, nCSysID )
Description:This method defines parameters to transf orm nodal results when they are populated.
Input:
INT4 nTransformTo0=No Transform, results in Glob al Rectangular, 1=Results in 
nCSysID, 2=Results in Nodal Output Coordinate Systems
INT4 nCSysID ID of Coordinate System to transform into when nTransformTo=1
Output:NoneReturn Code:FE_INV ALID The object has already been populated with data. FE_BAD_DATA An invalid value has been specified for nTransformTo
FE_NOT_EXIST The coordinate system specified by nCSysID does not existRemarks/Usage:This method must be called prior to  calling Populate(), but is not requir ed if you do not want to trans-
form results.
Example:
 API-1502  SetLineTransform
4.9.9.13  SetLineTransform
SetLineTransform
( nTransformTo, nCSysID )
Description:This method defines parameters to transf orm nodal results when they are populated.
Input:
INT4 nTransformTo0=No Transform, results in Global Rectangular, 8=Trasform to line 
CSys. 
INT4 nCSysID ID of Coordinate System to transform into when nTransformTo=1
Output:NoneReturn Code:FE_INV ALID The object has already been populated with data. FE_BAD_DATA An invalid value has been specified for nTransformTo
FE_NOT_EXIST The coordinate system specified by nCSysID does not existRemarks/Usage:This method must be called prior to  calling Populate(), but is not requir ed if you do not want to trans-
form results.
Example:
SetPlateTransform   API-1503
4.9.9.14  SetPlateTransform
SetPlateTransform
( nTransformTo, nCSysID, nCSysAxis, dVecX, dVecY, dVecZ, dToleranceAngle )
Description:This method defines parameters to transform Elemental Results on plan ar/plate elements when they are 
populated.
Input:
INT4 nTransformTo0=No Transform, 3=Transform to  Material Coordinate System, 
4=Transform to CSys nCSysID, 5=Transform to specified vector
INT4 nCSysID ID of Coordinate System to transform into when nTransformTo=4
INT4 nCSysAxisThe Axis of nCSysID Coordinate System to use as the transform 
direction (1=X Axis, 2=Y Axis, 3=Z Axis).
REAL8 dVecX
The components of the vector to  transform into when nTrans-
formTo=5REAL8 dVecY
REAL8 dVecZ
REAL8 dToleranceAngleThis angle corresponds to the Minimum Angle From Normal  option 
in the Transform Output Data  dialog box. It is used to determine if 
the vector representing an element’s normal direction is too closely 
aligned with the vector specified for transformation. If the angle 
between the two vectors is smaller than the specified  tolerance then 
the transformation vector cannot be  accurately projected onto the 
plane of the planar element, thus no transformation will occur. Only 
used when nTransformTo is set to 4 or 5.
Output:NoneReturn Code:FE_INV ALID The object has already been populated with data. FE_BAD_DATA An invalid value has been specified for nTransformTo
FE_NOT_EXIST The coordinate system specified by nCSysID does not existRemarks/Usage:This method must be called prior to  calling Populate(), but is not requir ed if you do not want to trans-
form results. When you transform plate data, you are really specifying a direct ion that the X component 
of the stress/strain/... is transformed into. 
Example:None
 API-1504  SetSolidTransform
4.9.9.15  SetSolidTransform
SetSolidTransform
( nTransformTo, nCSysID )
Description:This method defines parameters to transform Solid element results when they are populated.
Input:
INT4 nTransformTo0=No Transform, results in Glob al Rectangular, 6=Results in 
nCSysID, 7=Results in Material Coordinate Systems
INT4 nCSysID ID of Coordinate System to transform into when nTransformTo=6
Output:NoneReturn Code:FE_INV ALID The object has already been populated with data. FE_BAD_DATA An invalid value has been specified for nTransformTo
FE_NOT_EXIST The coordinate system specified by nCSysID does not existRemarks/Usage:This method must be called prior to  calling Populate(), but is not requir ed if you do not want to trans-
form results.
Example:
SetColumnGlobalPly   API-1505
4.9.9.16  SetColumnGlobalPly
SetColumnGlobalPly
( nColumnIndex, nGlobalPlyID )
Description:This method specifies that  a column be populated with data from a Global Ply rather than simply data 
from a single Output Vector.
Input:INT4 nColumnIndex The index of a column that was created by AddColumn( )INT4 nGlobalPlyID The ID of a Global Ply or 0=Bottom Ply, or -2=Top PlyOutput:NoneReturn Code:FE_INV ALID The object has already been populated with data. FE_BAD_DATA An invalid value has been specified for nColumnIndexRemarks/Usage:This method is used for laminate ply results and must be called prior to calling Populate(). If you simply 
want results from a specific ply on all selected elem ents, you do not need to use this method. However, 
if you want the column to be fille d with data from a Global Ply that is represented by various ply num-
bers then use this method to  choose that Global Ply. 
Example:
 API-1506  SetComplexOptions
4.9.9.17  SetComplexOptions
SetComplexOptions
( bExpandComplex , dComplexPhase )
Description:This method defines paramete rs to expand complex results when they are populated.
Input:
BOOL bExpandComplexIf True, complex results will be expa nded during Populate using the 
value specified for dComplexPhase
REAL8 dComplexPhase Phase value to use during complex expansionOutput:NoneReturn Code:FE_FAIL No Output Sets were found.Remarks/Usage:NoneExample:
Populate   API-1507
4.9.9.18  Populate
Populate
( )
Description:This method loads analysis  results into the column s that you have defined.
Input:NoneOutput:NoneReturn Code:
FE_INV ALIDThe object has already been populated with data. You can only popu-
late an object one time. If you want to reuse the same object, you must first call Clear().
FE_NOT_A V AILABLE You have not defined any columns to populate
FE_BAD_DATAThere is a problem with the da ta you specified when calling 
DataNeeded()
Remarks/Usage:This method must be called once to load results into the object column s. Normally, this method will cre-
ate and load rows for all availabl e Nodes/Elements. If you only want results for certain entities, call 
DataNeeded() prior to calling this method. 
Example:
 API-1508  IsPopulated
4.9.9.19  IsPopulated
IsPopulated
( )
Description:This method indicates whether Popu late( ) has already been called.
Input:NoneOutput:NoneReturn Code:FE_FAIL The object has not been populated.Remarks/Usage:NoneExample:
DataLocation   API-1509
4.9.9.20  DataLocation
DataLocation
( )
Description:This method indicates whether Nodal or El emental data is or will be in the object
Input:NoneOutput:INT4 nDataType 7=Node, 8=ElementReturn Code:
FE_FAILNo columns have yet been defined that identify whether nodal or ele-
mental data will be load ed into this object.
Remarks/Usage:NoneExample:
 API-1510  NumberOfRows
4.9.9.21  NumberOfRows
NumberOfRows
( )
Description:This method indicates the number of rows that have been defined.
Input:NoneOutput:NoneReturn Code:
NumberThe number of rows of data that have been loaded. Prior to calling 
Populate() this will be 0
Remarks/Usage:NoneExample:
NumberOfColumns   API-1511
4.9.9.22  NumberOfColumns
NumberOfColumns
( )
Description:This method indicates the number of columns that have been defined.Input:NoneOutput:NoneReturn Code:Number The number of columns of data that have been defined.Remarks/Usage:NoneExample:
 API-1512  FindColumnV2
4.9.9.23  FindColumnV2
FindColumnV2
( nSetID, nVectorID, nColumnIndex )
Description:This method locates a column based on the Output Set and Output Vector IDs. This method replaces 
FindColumn. For more information see, Section 2.4, "Working with Output in FEMAP 2020.1 and 
above".
Input:INT4 nSetID The desired Output Set IDINT4 nVectorID The desired Output Vector IDOutput:INT4 nColumnIndex The zero-based index of the location of the desired column
Return Code:
FE_NOT_A V AILABLE No columns have been definedFE_FAIL Unable to located the desired column.Remarks/Usage:NoneExample:
GetColumnTitle   API-1513
4.9.9.24  GetColumnTitle
GetColumnTitle
( nColumnIndex, sTitle )
Description:This method returns the title of the Output  Vector loaded in the specified column
Input:INT4 nColumnIndex Zero-based index of the desired columnOutput:STRING sTitle Title of the Output Vector in specified columnReturn Code:FE_BAD_DATA Column index is outside of the range of available columnsFE_FAIL Unable to retrieve title.Remarks/Usage:NoneExample:
 API-1514  IsApiColumn
4.9.9.25  IsApiColumn
IsApiColumn
( nColumnIndex )
Description:This method identifies whether a co lumn is an normal API column or one that was addded for internal 
computations.
Input:INT4 nColumnIndex Zero-based index of the desired columnOutput:NoneReturn Code:FE_BAD_DATA Column index is outside of the range of available columnsFE_FAIL Not an API ColumnRemarks/Usage:In some cases, especially with attached result files,  FEMAP must create addi tional columns to compute 
the results that were requested. These colu mns will return FE_FAIL from this method.
Example:
GetColumnVectorV2   API-1515
4.9.9.26  GetColumnVectorV2
GetColumnVectorV2
( nColumnIndex, nSetID, nVectorID )
Description:This method returns the Output Se t ID and Output Vector ID of a selected column. This method 
replaces GetColumnVector. For more information see,  Section 2.4, "Working with Output in FEMAP 
2020.1 and above".
Input:INT4 nColumnIndex Zero-based index of the desired columnOutput:INT4 nSetID ID of the Output Set in the selected columnINT4 nVectorID ID of the Output Vector in the selected column
Return Code:
FE_BAD_DATA Column index is outside of the range of available columnsFE_FAIL Unable to retrieve vector infoRemarks/Usage:NoneExample:
 API-1516  GetColumn
4.9.9.27   GetColumn
GetColumn
( nColIndex, nIDs, dVals )
Description:This method returns the entity IDs and va lues from all rows in the selected column
Input:INT4 nColIndex Zero-based index of the desired columnOutput:INT4 nIDs [0..nNumberOf-
Rows -1]The IDs of the Node/Element
REAL8 dVals[0..nNumberOf-
Rows-1]The result values
Return Code:
FE_NO_MEMORY Insufficient memory to allocate space for values
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to find data for the specified row/columns
Remarks/Usage:This method will only work once the object has been p opulated. It simply returns values for all rows that 
have been defined.
Example:
GetColumns   API-1517
4.9.9.28  GetColumns
GetColumns
( nNumberOfColumns, nColIndices, nIDs, dVals )
Description:This method returns the entity IDs and multiple values from the selected columns and all rows 
Input:INT4 nNumberOfColumns The number of column indices in nColIndicesINT4 nColIndices[0..nNumber-
OfColumns]Zero-based indices of the desired columns
Output:
INT4 nIDs[0..nNumberOf-
Rows-1]The Node/Element ID from each row
REAL8 dVals[0..nNumberOf-
Columns*nNumberOfRows-1]The result values
Return Code:
FE_NO_MEMORY Insufficient memory to allocate space for values
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to find data for the specified columns/rowsRemarks/Usage:This method will only work once the object has been populated. The entries in nIDs[ ] are the Node/Ele-
ment IDs that directly correspond to the rows of the columns selected in nColIndices. The entries in 
dVals are the values from all the selected columns a nd all rows. Data is stored by rows so that all 
selected columns for the first row come  before the second ro w, and so on. For example, dVals[0] is from 
the first row of the first selected column, dVals[1]  is from the first row of the second selected col-
umn...then dVals[nNumberOfColumns] is from the sec ond row of the first selected column, and so on.
Example:
 API-1518  GetColumnMinMax
4.9.9.29  GetColumnMinMax
GetColumnMinMax
( nColumnIndex, nLimitToSet, nMinID, nMaxID, dMinVal, dMaxVal )
Description:This method returns the minimum and maximum values in a column
Input:INT4 nColumnIndex Zero-based index of the desired column
INT4 nLimitToSetID of Set object that contains th e entities to consider  when searching 
for min/max. Set to 0 if you want to consider all results that have 
been loaded in the column.
Output:INT4 nMinID ID of the Node/Element where the minimum value occurs
INT4 nMaxID ID of the Node/Element where the maximum value occurs
REAL8 dMinVal The minimum valueREAL8 dMaxVal The maximum valueReturn Code:FE_BAD_DATA Column index is outside of the range of available columns
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to compute min/maxRemarks/Usage:NoneExample:
GetColumnAbsMax   API-1519
4.9.9.30  GetColumnAbsMax
GetColumnAbsMax
( nColumnIndex, nLimitToSet, pnAbsMaxID, pdAbsMaxVal )
Description:This method returns the maximu m absolute value in a column
Input:INT4 nColumnIndex Zero-based index of the desired column
INT4 nLimitToSetID of Set object that contains th e entities to consider  when searching 
for min/max. Set to 0 if you want to consider all results that have 
been loaded in the column.
Output:INT4 pnAbsMaxID ID of the Node/Element where the maximum absolute value occurs
REAL8 pdAbsMaxVal The ma ximum absolute value
Return Code:FE_BAD_DATA Column index is outside of the range of available columns
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to compute maxRemarks/Usage:NoneExample:
 API-1520  GetColumnSum
4.9.9.31  GetColumnSum
GetColumnSum
( nColumnIndex, nLimitToSet, nNumVal, dSum, dSumOfSquares )
Description:This method returns values for the su m and the sum of sq uares in a column
Input:INT4 nColumnIndex Zero-based index of the desired column
INT4 nLimitToSetID of Set object that contains th e entities to consider when calculat-
ing sum and sum of squares. Set to 0 if you want to consider all 
results that have been loaded in the column.
Output:INT4 nNumVal Number of values used to compute sum and sum of squares
REAL8 dSum The sum of the column
REAL8 dSumOfSquares The sum of squares of the columnReturn Code:FE_BAD_DATA Column index is outside of the range of available columns
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to compute sum and/or sum of squaresRemarks/Usage:NoneExample:
Reset   API-1521
4.9.9.32  Reset
Reset
(  )
Description:This method resets internal row po inters so that the next call to Next() will return the first row.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:
 API-1522  Next
4.9.9.33  Next
Next
( nColumnIndex, nID, dVal)
Description:This method returns the en tityID and value from the next row in a selected column
Input:INT4 nColumnIndex Zero-based index of the desired columnOutput:INT4 nID The ID of the Node/Element from the next rowREAL8 dVal The result value from the selected column in the next row.
Return Code:FE_BAD_DATA Column index is outside of the range of available columns
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL You have reached the end of available rows.Remarks/Usage:This method will only work once th e object has been populated. You must call Reset() prior to calling 
this function so that repeated calls will start at th e first row. Changing nColumnIndex will not automati-
cally reset back to the first row, it will continue  from the location of the previous call to Next().
Example:
Next   API-1523
Sub Main 
    Dim App As femap.model 
    Set App = feFemap() 

    Dim Res As femap.Results 
    Set Res = App.feResults 
    Dim nNumCol As Long 
    Dim vCol As Variant 
    Dim nID As Long 
    Dim dVal As Double 
    Dim rc As femap.zReturnCode 

    rc = Res.AddColumn( 1, 7020, False, nNumCol, vCol ) 
    rc = Res.Populate() 
 ' This will retrieve all values from the added column 
    Res.Reset() 
    While Res.Next( vCol(0), nID, dVal) = FE_OK 
      App.feAppMessage( FCM_NORMAL, _ 
                "ID="+Str$(nID)+"   Value="+Str$(dVal)) 
    Wend 
End SubNext
( nColumnIndex, nID, dVal)
 API-1524  GetValue
4.9.9.34  GetValue
GetValue
( nID, nColumnIndex, dVal )
Description:This method returns the value from the selec ted column for the sp ecified Node/Element
Input:INT4 nID The ID of the Node/Element desiredINT4 nColumnIndex Zero-based index of the desired columnOutput:REAL8 dVal The result value Return Code:FE_BAD_DATA Column index is outside of the range of available columns
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to find da ta for the specified ID
Remarks/Usage:This method will only work on ce the object has been populated.
Example:
GetInRow   API-1525
4.9.9.35  GetInRow
GetInRow
( nRowIndex, nColumnIndex, nID, dVal )
Description:This method returns the entity ID and value from the selected row and column 
Input:INT4 nRowIndex Zero-based index of the desired rowINT4 nColumnIndex Zero-based index of the desired columnOutput:INT4 nID The ID of the Node/ElementREAL8 dVal The result value Return Code:
FE_BAD_DATAEither Row or Column index is ou tside of the range of available 
rows/columns
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to find data for the specified row/column
Remarks/Usage:This method will only work on ce the object has been populated.
Example:
 API-1526  GetMultipleInRow
4.9.9.36  GetMultipleInRow
GetMultipleInRow
( nRowIndex, nNumberOfColumns, nColumnIndices, nID, dVals )
Description:This method returns the entity ID and multip le values from the selected row and columns 
Input:INT4 nRowIndex Zero-based index of the desired rowINT4 nNumberOfColumns The number of entries in nColumnIndicesINT4 nColumnIndices 
[0..nNumberOfColumns-1]Zero-based indices of the desired columns
Output:
INT4 nID The ID of the Node/ElementREAL8 dVals[0..nNumberOf-
Columns-1]The result values, in the same order as nColumnIndices
Return Code:
FE_NO_MEMORY Insufficient memory to allocate space for values
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to find data for the specified row/columns
Remarks/Usage:This method will only work on ce the object has been populated.
Example:
GetRow   API-1527
4.9.9.37  GetRow
GetRow
( nRowIndex, nID, dVals )
Description:This method returns the entity ID and multiple values from the selected row and all columns 
Input:INT4 nRowIndex Zero-based index of the desired rowOutput:INT4 nID The ID of the Node/ElementREAL8 dVals[0..nNumberOf-
Columns-1]The result values
Return Code:
FE_NO_MEMORY Insufficient memory to allocate space for values
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to find data for the specified row/columns
Remarks/Usage:This method will only work once th e object has been populated. It is  similar to GetMultipleInRow( ), 
except that it simply returns values for all columns that have been defined.  You can use the column 
index values that were returned wh en columns were added as an inde x into the returned value array
Example:
 API-1528  GetRowByID
4.9.9.38  GetRowByID
GetRowByID
( nID, dVals )
Description:This method returns multiple  values from the selected No de/Element and all columns 
Input:INT4 nID The ID of the Node/ElementOutput:REAL8 dVals[0..nNumberOf-
Columns-1]The result values
Return Code:
FE_NO_MEMORY Insufficient memory to allocate space for values
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to find data for the specifie d Node/Element
Remarks/Usage:This method will only work once th e object has been populated. Rather  than using the rowIndex, this 
method directly looks for a specific Node/Element ID. It is similar to GetMultipleInRow( ), except that 
it simply returns values for all co lumns that have been defined. Yo u can use the column index values 
that were returned when colu mns were added as an index in to the returned value array
Example:
GetRows   API-1529
4.9.9.39  GetRows
GetRows
( nNumberOfRows, nRowIndices, nIDs, dVals )
Description:This method returns the entity IDs and multiple values from the selected rows and all columns 
Input:INT4 nNumberOfRows The number of row indices in nRowIndicesINT4 nRowIndices[0..nNum-
berOfRows]Zero-based indices of the desired rows
Output:
INT4 nIDs[0..nNumberOf-
Rows]The IDs of the Node/Element from each selected row
REAL8 dVals[0..nNumberOf-
Rows*nNumberOfColumns-1]The result values
Return Code:
FE_NO_MEMORY Insufficient memory to allocate space for values
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to find data for the specified row/columns
Remarks/Usage:This method will only work  once the object has been populated. It is just like GetRow( ), except that it 
will return data from multiple selected rows. The en tries in nIDs[ ] are the Node/Element IDs that 
directly correspond to the rows selected in nRowIndi ces. The entries in dVals are the values from all the 
selected rows and all columns. Data is stored by row so that all columns for th e first selected row come 
before the second row, and so on.  For example, dVal s[0] is from the first column of the first selected 
row, dVals[1] is from the second column of the first row ...then dV als[nNumberOfColumns] is from the 
first column of the second row, and so on.
Example:
 API-1530  GetRowsByID
4.9.9.40  GetRowsByID
GetRowsByID
( nEntitySetID, dVals )
Description:This method returns the values fro m all columns for the selected entities.
Input:
INT4 nEntitySetIDThe ID of a Set object that contains the Node/Element IDs that are 
desired.
Output:REAL8 dVals[0..nNumberOf-
Rows*nNumberOfColumns-1]The result values
Return Code:
FE_NO_MEMORY Insufficient memory to allocate space for values
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to find data for the specified row/columns
Remarks/Usage:This method will only work once th e object has been populated. It is  just like GetRowByID( ), except 
that it will return data from multiple  selected rows. The entries in dVals are the values from all the 
selected rows and all columns. nN umberOfRows is the number of ID s in nEntitySetID, and IDs/rows 
are always in increasing order from smallest to larg est, no matter how the Set Object was created. Data 
is stored by row so that all columns for the first se lected row come before the second row, and so on.  
For example, dVals[0] is from the first column of the first selected row, dVals[1] is from the second col-
umn of the first row ...then dVals[nNumberOfColumns] is from the first column of the second row, and 
so on.
Example:
GetRowsAndColumns   API-1531
4.9.9.41  GetRowsAndColumns
GetRowsAndColumns
( nNumberOfRows, nRowIndices, nNumberOfColumns, nColIndices, nIDs, dVals, 
bAllExist )
Description:This method returns the entity  IDs and multiple values from selected rows and columns
Input:INT4 nNumberOfRows The number of row indices in nRowIndicesINT4 nRowIndices[0..nNumber-
OfRows]Zero-based indices of the desired rows
INT4 nNumberOfColumns The number of column indices in nColIndices
INT4 nColIndices[0..nNumber-
OfColumns]Zero-based indices of the desired columns
Output:
INT4 nIDs[0..nNumberOfRows] The IDs of the Node/Element from each selected row
REAL8 dVals[0..nNumberOf-
Rows*nNumberOfColumns-1]The result values
BOOL AllExistWhen True, all rows and columns have values. When False, at 
least one value in the selected columns and rows is missing. 
Return Code:FE_NO_MEMORY Insufficient memory  to allocate space for values
FE_INV ALIDObject has not yet been populate d. This method is only avail-
able after results have been loaded.
FE_FAIL Unable to find data for the specified row/columnsRemarks/Usage:This method will only work once the object has been populated. It is just like GetRow( ), except that 
it will return data from mu ltiple selected rows and columns. The entries in nIDs[ ] are the Node/Ele-
ment IDs that directly correspond to the rows sel ected in nRowIndices. The entries in dVals are the 
values from all the selected rows an d selected columns. Data is stor ed by row so that all selected 
columns for the first selected row come before the se cond row, and so on. For example, dVals[0] is 
from the first column of the first selected row, dVals[1] is from the second column of the first 
row...then dVals[nNumberOfColumns] is from the first column of the second row, and so on.
Example:
 API-1532  GetRowsAndColumnsByID
4.9.9.42   GetRowsAndColumnsByID
GetRowsAndColumnsByID
( nEntitySetID, nNumberOfColumns, nColIndices, dVals, bAllExist )
Description:This method returns the va lues from selected columns for the selected entities.
Input:
INT4 nEntitySetIDThe ID of a Set object that contains the Node/Element IDs that are 
desired.
INT4 nNumberOfColumns The number of column indices in nColIndicesINT4 nColIndices[0..nNumber-
OfColumns]Zero-based indices of the desired columns
Output:
REAL8 dVals[0..nNumberOf-
Rows*nNumberOfColumns-1]The result values
BOOL AllExistWhen True, all rows and columns ha ve values. When False, at least 
one value in the selected co lumns and rows is missing. 
Return Code:FE_NO_MEMORY Insufficient memory to allocate space for values
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded.
FE_FAIL Unable to find data for the specified row/columns
Remarks/Usage:This method will only work once th e object has been populated. It is  just like GetRowByID( ), except 
that it will return data from multiple selected rows using selected colu mns. The entries in dVals are the 
values from all the selected rows an d selected columns. nNumberOfRow s is the number of IDs in nEn-
titySetID, and IDs/rows are always in increasing orde r from smallest to largest, no matter how the Set 
Object was created. Data is stored by row so that se lected columns for the first selected row come before 
the second row, and so on. For example, dVals[0] is  from the first column of the first selected row, 
dVals[1] is from the second column of the first ro w...then dVals[nNumberOfColumns] is from the first 
column of the second row, and so on.
Example:
SetValue   API-1533
4.9.9.43  SetValue
SetValue
( nID, nColumnIndex, dVal )
Description:This method sets the value in the selected column for the specified Node/Element
Input:INT4 nID The ID of the Node/Element desiredINT4 nColumnIndex Zero-based index of the desired columnREAL8 dVal The value to set in the row and columnOutput:NoneReturn Code:FE_BAD_DATA Column index is outside of the range of available columnsFE_FAIL Unable to find da ta for the specified ID
Remarks/Usage:This method allows yo u to update the value in a row/column. It is intended to be used so that you can 
use the data in other colu mns, combined with data and logic in your program to  fill values in empty col-
umns. 
Example:
 API-1534  SetColumn
4.9.9.44  SetColumn
SetColumn
( nColIndex, nNumberOfRows, nIDs, dVals )
Description:This method fills a column with data. 
Input:INT4 nColIndex The column index to fill. INT4 nNumberOfRows The number of rows that will be filled.
INT4 nIDs[0..nNumberOf-
Rows-1]The IDs of the nodes/elements a ssociated with the filled data.
REAL8 dVals[0..nNumberOf-
Rows-1]The values associated with each of the node/element IDs accord-
ingly.
Output:
NoneReturn Code:FE_FAIL Unable to fill column with data.Remarks/Usage:The Save method must be used after SetColumn to put results.
Example:
SetColumns   API-1535
4.9.9.45  SetColumns
SetColumns
( nNumberOfColumns, nColIndices, nNumberOfRows, nIDs, dVals )
Description:This method fills a column with data. 
Input:INT4 nNumberOfColumns The numbe r of columns to be filled. 
INT4 nColIndices An index of th e columns that will be filled. 
INT4 nNumberOfRows The number of rows that will be filled.
INT4 nIDs[0..(nNumberOf-
Rows*nNumberOfColumns)-1]The IDs of the nodes/elements a ssociated with the filled data.
REAL8 dVals[0..nNumberOf-
Rows*nNumberOfColumns)-1]The values associated with each of the node/element IDs accord-
ingly.
Output:NoneReturn Code:FE_FAIL Unable to fill columns with data.Remarks/Usage:The data for nIDs is stored in 1-dimensional array,  while the data for dVals is stored in a separate 1-
dimensional array using the following format:
(Column0,Row0), (Column1,Row0)…(ColumnN, Row0); (Column0,Row1), (Column1,Row1)… 
(ColumnN,Row1);...; (Column0,RowM) , (Column1,RowM)…(ColumnN,RowM)
In addition, the Save method must be used after SetColumns to put results.
Example:
 API-1536  SetInRow
4.9.9.46  SetInRow
SetInRow
( nRowIndex, nColumnIndex, dVal )
Description:This method sets the va lue in the selected column for the specified row
Input:INT4 nRowIndex Zero-based index of the desired rowINT4 nColumnIndex Zero-based index of the desired columnREAL8 dVal The value to set in the row and columnOutput:NoneReturn Code:
FE_BAD_DATAEither Row or Column index is ou tside of the range of available 
rows/columns
FE_FAIL Unable to find da ta for the specified ID
Remarks/Usage:This method allows yo u to update the value in a row/column. It is intended to be used so that you can 
use the data in other colu mns, combined with data and logic in your program to  fill values in empty col-
umns. 
Example:
SetMultipleInRow   API-1537
4.9.9.47  SetMultipleInRow
SetMultipleInRow
( nRowIndex, nNumberOfColumns, nColumnIndices, dVals )
Description:This method sets the values in multiple column s of a selected row.
Input:INT4 nRowIndex Zero-based index of the desired rowINT4 nNumberOfColumns The number of entries in nColumnIndicesINT4 nColumnIndices 
[0..nNumberOfColumns-1]Zero-based indices of the desired columns
REAL8 dVals[0..nNumberOf-
Columns-1]The values to define, in the same order as nColumnIndices
Output:
NoneReturn Code:FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to find data for the specified row/columns
Remarks/Usage:This method allows yo u to update the value in a row/column. It is intended to be used so that you can 
use the data in other colu mns, combined with data and logic in your program to  fill values in empty col-
umns. 
Example:
 API-1538  SetRow
4.9.9.48  SetRow
SetRow
( nID, dVals )
Description:This method sets the values in multiple columns for a sel ected node or element ID.
Input:INT4 nID The ID of the node/element. REAL8 dVals[0..NumberOf-
Columns] The values to be put in the column s of the specified node/element. 
Output:
NoneReturn Code:FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:None. Example:
SetRows   API-1539
4.9.9.49  SetRows
SetRows
( nNumberOfRows, nIDs, dVals )
Description:This method sets the values in multiple columns of a sel ected node or element IDs.
Input:INT4 nNumberOfRows The number or rows or nodes/elements. 
INT4 nIDs[0..(nNumberOf-
Rows* NumberOfColumns)- 1]The IDs of the nodes/elements. 
REAL8 dVals[0..(nNumberOf-
Rows * NumberOfColumns)-1] The values to be put in the column s for the specified node/elements. 
Output:
None
Return Code:FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:The data for nIDs is stored in 1-dimensional array,  while the data for dVals is stored in a separate 1-
dimensional array using the following format:
(Column0,Row0), (Column1,Row0)…(ColumnN, Row0); (Column0,Row1), (Column1,Row1)… 
(ColumnN,Row1);...; (Column0,RowM) , (Column1,RowM)…(ColumnN,RowM)
This method allows yo u to update the values of columns for multiple node or element IDs. 
Example:
 API-1540  SetRowsByID
4.9.9.50  SetRowsByID
SetRowsByID
( nEntitySetID, dVals )
Description:This method sets the values in multiple columns of a given Entity Set.
Input:INT4 nEntitySetID The ID of the Set of nodes/elements. 
REAL8 dVals[0..(Entity-
Set.count * NumberOfCol-
umns)] The values to be put in the co lumns for the specified Set. 
Output:
None
Return Code:
FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:This method allows you to update the va lues of columns for given entities in a Set. 
Example:
SetRowsAndColumnByID   API-1541
4.9.9.51  SetRowsAndColumnByID
SetRowsAndColumnByID
( nEntitySetID, nNumberOfColumns, nColIndices, dVals )
Description:This method sets the values in multiple columns of a given Entity Set.
Input:INT4 nEntitySetID The ID of the Set of nodes/elements. 
INT4 nNumberOfColumns The number of entries in nColumnIndicesINT4 nColIndices[0..nNumber-
OfColumns - 1]An array of column numbers to be filled. 
REAL8 dVals[0..(Entity-
Set.Count * nNumberOfCol-
umns)] The values to be put in the co lumns for the specified Set. 
Output:
NoneReturn Code:FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:This method allows you to upda te the values of specific column s for given entities in a Set. 
Example:
 API-1542  AddScalarAtNodeColumnV2
4.9.10  Results Browsing Update and Save Methods
The following methods allo w you to update specific entries in a manner that is similar to setting 
up, loading and querying a spread sheet. These methods will also allow you to in itialize and save 
user created data as output. 
4.9.10.1  AddScalarAtNodeColumnV2
AddScalarAtNodeColumnV2
( nSetID, nVectorID, title, category, nonlinear, nColumnIndex )
Description:This method initializes a column to prepare it for cr eating an output vector containing scalar values at 
nodes.
Input:INT4 nSetID The ID of the Output Set. INT4 nVectorID The ID of the Vector to initialize. STRING title The title of columns being added. 
INT4 categoryGeneral category of output: 0=Any, 1=Disp, 2=Accel, 3=Force, 
4=Stress, 5=Strain, 6=Temp, others=User. 
BOOL nonlinear If True, this resu lt cannot be linearly combined. 
Output:INT4 nColumnIndex The index of the column that was initialized.
Return Code:FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:None Example:
AddVectorAtNodeColumnsV2   API-1543
4.9.10.2  AddVectorAtNodeColumnsV2
AddVectorAtNodeColumnsV2
( nSetID, nVectorID, VecX, VecY, VecZ, title, category, nonlinear, pnColumnIndices )
Description:This method initializes columns to prepare it for cr eating output vectors containing vector values at 
nodes.
Input:INT4 nSetID The ID of the Output Set. 
INT4 nVectorIDThe ID of the output vector which will be created to contain the mag-
nitude of the output vectors.  
INT4 VecXThe ID of the output vector whic h will be created to contain the X 
components of output. 
INT4 VecYThe ID of the output vector whic h will be created to contain the Y 
components of output. 
INT4 VecZThe ID of the output vector whic h will be created to contain the Z 
components of output. 
STRING title The title of columns being added. 
INT4 categoryGeneral category of output: 0=Any, 1=Disp, 2=Accel, 3=Force, 
4=Stress, 5=Strain, 6=Temp, others=User. 
BOOL nonlinear If True, this resu lt cannot be linearly combined. 
Output:INT4 pnColumnIndices The indices of the columns that were initialized.
Return Code:FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:None Example:
 API-1544  AddScalarAtElemColumnV2
4.9.10.3  AddScalarAtElemColumnV2
AddScalarAtElemColumnV2
( nSetID, nVectorID, title, category, nonlinear, nColumnIndex )
Description:This method initializes a column to prepare it for cr eating an output vector containing scalar values at 
elements.
Input:INT4 nSetID The ID of the Output Set. INT4 nVectorID The ID of the Vector to initialize. STRING title The title of columns being added. 
INT4 categoryGeneral category of output: 0=Any, 1=Disp, 2=Accel, 3=Force, 
4=Stress, 5=Strain, 6=Temp, others=User. 
BOOL nonlinear If True, this resu lt cannot be linearly combined. 
Output:INT4 nColumnIndex The index of th e columns that was initialized.
Return Code:FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:NoneExample:
AddElemWithCornerColumnsV2   API-1545
4.9.10.4  AddElemWithCornerColumnsV2
AddElemWithCornerColumnsV2
( nSetID, nVectorID, Vec1, Vec2, Vec3, Vec4, Vec5, Vec6, Vec7, Vec8, title, category, 
nonlinear, pnColumnIndice )
Description:This method initializes a column to prepare it for cr eating an output vector containing scalar values at 
elements.
Input:INT4 nSetID The ID of the Output Set. INT4 nVectorID
The ID of the output vector wh ich will be created containing the 
results at the corresponding element corners. INT4 Vec1
INT4 Vec2
INT4 Vec3
INT4 Vec4INT4 Vec5INT4 Vec6INT4 Vec7INT4 Vec8STRING title The title of columns being added. 
INT4 categoryGeneral category of output: 0=Any, 1=Disp, 2=Accel, 3=Force, 
4=Stress, 5=Strain, 6=Temp, others=User. 
BOOL nonlinear If True, this resu lt cannot be linearly combined. 
Output:INT4 pnColumnIndices The indice of  the columns that were initialized.
Return Code:FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:NoneExample:
 API-1546  AddScalarAtBeamColumnsV2
4.9.10.5  AddScalarAtBeamColumnsV2
AddScalarAtBeamColumnsV2
( nSetID, VecA, VecB, title, vecstyle, category, nonlinear, add_endAB_titles, pnColumn-
Indices )
Description:This method initialized the column to prepare it fo r creating Beam output vectors for EndA and EndB.
Input:INT4 nSetID The ID of the Output Set. INT4 VecA The ID of the EndA output vector to be created. INT4 VecB The ID of the EndB output vector to be created. STRING title The title of columns being added. 
INT4 vecstyleIf 1, component[0..2] are the X,Y,Z component values. If 2, data at 
end of beams. If 3, reverse data at second end of beam 
INT4 categoryGeneral category of output: 0=Any, 1=Disp, 2=Accel, 3=Force, 
4=Stress, 5=Strain, 6=Temp, others=User. 
BOOL nonlinear If True, this resu lt cannot be linearly combined. 
BOOL add_endAB_titles Flag to prepen d “End A”, “End B” to the title. 
Output:INT4 pnColumnIndi-
ces[0..NumberOfColumns - 1]The indices of the columns.
Return Code:
FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:This method allows you to upda te the values of specific column s for given entities in a Set. 
Example:
SetColumnInfo   API-1547
4.9.10.6  SetColumnInfo
SetColumnInfo
( nColumnIndex, nDataType, bCentroidTotal, bNonlinear )
Description:This method set information of ou tput vector stored in a column. 
Input:INT4 nColumnIndex  The index of to set.
INT4 nDataType The data type of the entity. FT _NODE for nodal data or FT_ELEM 
for elemental data.
BOOL bCentroidTotal  If True, this vector has centroidal or nodal output. BOOL bNonlinear  If True, this re sult cannot be linearly combined. 
Output:NoneReturn Code:FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:NoneExample:
 API-1548  GetColumnInfo
4.9.10.7  GetColumnInfo
GetColumnInfo
( nColumnIndex, nDataType, bCentroidTotal, bCalcWarn )
Description:This method set information of ou tput vector stored in a column. 
Input:INT4 nColumnIndex  The index of to set.Output:
INT4 nDataType The data type of the entity. FT _NODE for nodal data or FT_ELEM 
for elemental data.
BOOL bCentroidTotal  If True, this vector has centroidal or nodal output. BOOL bCalcWarn  If True, this re sult cannot be linearly combined. 
Return Code:FE_FAIL Unable to get data for the specified row/columnsRemarks/Usage:NoneExample:
SetColumnComponents   API-1549
4.9.10.8  SetColumnComponents
SetColumnComponents
( nColumnIndex, pnNumComponents, pnComponentColumn )
Description:This method sets th e number of components of an Output V ector and the column index in which the 
component results are stored.
Input:INT4 nColumnIndex The index of the column.INT4 pnNumComponents The number of components.INT4 pnComponentCol-
umns[0..pnNumComponents - 
1]The indices of the component columns.
Output:
NoneReturn Code:FE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:SetColumnsComponent is an identical method to SetColumnComponents, thus functions in the same 
manner, but if possible, it is recommended to use SetColumnComponents.
Example:
 API-1550  GetColumnComponents
4.9.10.9  GetColumnComponents
GetColumnComponents
( nColumnIndex, pnNumComponents, pnComponentColumn )
Description:This method returns the number of components of an Output Vector and the column index in which the 
component results are stored.
Input:INT4 nColumnIndex The index of the column.Output:INT4 pnNumComponents The number of components.INT4 pnComponentCol-
umns[0..pnNumComponents - 
1]The indices of the component columns.
Return Code:
FE_FAIL Unable to get data for the specified row/columnsRemarks/Usage:NoneExample:
SetColumnTitle   API-1551
4.9.10.10  SetColumnTitle
SetColumnTitle
( nColumnIndex, title )
Description:This method sets the title  of a column for naming the Output Vector. 
Input:INT4 nColumnIndex The index of the column.STRING title The title to name the Output Vector.Output:NoneReturn Code:FE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:NoneExample:
 API-1552  SetColumnVectorV2
4.9.10.11  SetColumnVectorV2
SetColumnVectorV2
( nColumnIndex, nSetID, nVectorID )
Description:This method sets the Output Vector ID fo r a specific column of in an Output Set. 
Input:INT4 nColumnIndex The index of the column.INT4 nSetID The ID of the Output Set.INT4 nVectorID The ID of the Output Vector to set.Output:NoneReturn Code:FE_FAIL Unable to get data for the specified row/columnsRemarks/Usage:NoneExample:
SetColumnInteger   API-1553
4.9.10.12  SetColumnInteger
SetColumnInteger
( nColumnIndex, bIsInteger )
Description:This method finds if an Output Vector in a specified column is integer values. 
Input:INT4 nColumnIndex The index of the column.BOOL bIsInteger If True, this vector w ill be initialized to store integer values
Output:NoneReturn Code:FE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:NoneExample:
 API-1554  GetColumnInteger
4.9.10.13  GetColumnInteger
GetColumnInteger
( nColumnIndex, bIsInteger )
Description:This method finds if an Output Vector in a specified column is integer values. 
Input:INT4 nColumnIndex  The index of the column.Output:BOOL bIsInteger If True, this vector w as initialized to store integer values
Return Code:FE_FAIL Unable to get data for the specified row/columnsRemarks/Usage:NoneExample:
SaveColumn   API-1555
4.9.10.14  SaveColumn
SaveColumn
( nColumnIndex)
Description:This method saves the data that is filled in a specific columns. 
Input:INT4 nColumnIndex  The index of the column to save.Output:NoneReturn Code:FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:NoneExample:
 API-1556  Save
4.9.10.15  Save
Save
( )
Description:This method saves the data that is  filled in the columns and rows. Th is method should be used after 
modifying or creating any data that is added to the table. 
Input:None  Output:NoneReturn Code:FE_NO_MEMORY Insufficient memory to allocate space for valuesFE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:NoneExample:
GetScalarAtNodeColumnV2   API-1557
4.9.10.16  GetScalarAtNodeColumnV2
GetScalarAtNodeColumnV2
( nColumnIndex, listcount, nID, value )
Description:This method returns the entity  IDs and values from all rows  in the selected column. 
Input:INT4 nColumnIndex The index of the column. Output:INT4 listcount The count of  nodes in the column. 
INT4 nID[0..listcount - 1] Th e IDs of the Node/Element. 
REAL8 value[0..listcount - 1] The results values. Return Code:FE_NO_MEMORY Insufficient memory to allocate space for values
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded. 
FE_FAIL Unable to get data for the specified row/columnsRemarks/Usage:NoneExample:
 API-1558  SetScalarAtNodeColumnV2
4.9.10.17  SetScalarAtNodeColumnV2
SetScalarAtNodeColumnV2
( nColumnIndex, listcount, nID, value )
Description:This method stores outp ut data in a column. 
Input:INT4 nColumnIndex The index of the column. INT4 listcount The count of  nodes in the column. 
INT4 nID[0..listcount - 1] Th e IDs of the Node/Element. 
REAL8 value[0..listcount - 1] The results values. Output:NoneReturn Code:FE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:NoneExample:
GetScalarAtElemColumnV2   API-1559
4.9.10.18  GetScalarAtElemColumnV2
GetScalarAtElemColumnV2
( nColumnIndex, listcount, nID, value )
Description:This method returns the entity  IDs and values from all rows  in the selected column. 
Input:INT4 nColumnIndex The index of the column. Output:INT4 listcount The count of  nodes in the column. 
INT4 nID[0..listcount - 1] Th e IDs of the Node/Element. 
REAL8 value[0..listcount  - 1] The results values. Return Code:FE_NO_MEMORY Insufficient memory to allocate space for values
FE_INV ALIDObject has not yet been populated.  This method is only available 
after results have  been loaded. 
FE_FAIL Unable to get data for the specified row/columnsRemarks/Usage:NoneExample:
 API-1560  SetScalarAtElemColumnV2
4.9.10.19  SetScalarAtElemColumnV2
SetScalarAtElemColumnV2
( nColumnIndex, listcount, nID, value )
Description:This method stores outp ut data in a column. 
Input:INT4 nColumnIndex The index of the column. INT4 listcount The count of  nodes in the column. 
INT4 nID[0..listcount - 1] Th e IDs of the Node/Element. 
REAL8 value[0..listcount - 1] The results values. Output:NoneReturn Code:FE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:NoneExample:
GetVectorAtNodeColumnsV2   API-1561
4.9.10.20  GetVectorAtNodeColumnsV2
GetVectorAtNodeColumnsV2
( nColumnIndices, listcount, nID, total, x, y, z )
Description:This method returns the entity IDs an d the components of the results st ored from all rows in the selected 
column. 
Input:INT4 nColumnIndices[0..num-
Columns]The indices of the columns. 
Output:
INT4 listcount The count of  nodes in the column. 
INT4 nID[0..listcount - 1] Th e IDs of the Node/Element. 
REAL8 total[0..listcount - 1] The total results values. 
REAL8 x[0..listcount - 1] Th e X component results values. 
REAL8 y[0..listcount - 1] Th e Y component results values. 
REAL8 z[0..listcount - 1]  Th e Z component results values. 
Return Code:FE_FAIL Unable to get data for the specified row/columnsRemarks/Usage:NoneExample:
 API-1562  SetVectorAtNodeColumnsV2
4.9.10.21  SetVectorAtColumnsV2
SetVectorAtNodeColumnsV2
( nColumnIndices, listcount, nID, x, y, z )
Description:This method sets nodal ve ctor data in a column. 
Input:INT4 nColumnIndices[0..num-
Columns]The indices of the columns to set. 
INT4 listcount The count of  nodes in the columns 
INT4 nID[0..listcount -1 ] The IDs of the Nodes. 
REAL8 x[0..listcount - 1] Th e X component results values. 
REAL8 y[0..listcount - 1] Th e Y component results values. 
REAL8 z[0..listcount - 1] Th e Z component results values. 
Output:NoneReturn Code:FE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:NoneExample:
GetElemWithCornerColumnsV2   API-1563
4.9.10.22  GetElemWithCornerColumnsV2
GetElemWithCornerColumnsV2
( nColumnIndices, listcount, maxcorner, nID, centroid, c1, c2, c3, c4, c4, c5, c6, c7, c8 )
Description:This method gets centroid  and corner results of el ements from given columns. 
Input:INT4 nColumnIndices[0..num-
Columns]The indices of the columns to set. 
Output:
INT4 listcount The count of elements in the column. 
INT4 maxcornerThe ID of the maximum corner ava ilable for this object. For exam-
ple, if this object contains resu lts on quadrilateral plates, maxcorner 
will typically equal 4, since results  are only available for corners 
1,2,3, and 4.   
INT4 nID[0..listcount - 1] The IDs of the elements. 
REAL8 centroidThe results at the element centroid  associated with the corresponding 
node/element in the ID array. 
REAL8 c1[0..listcount - 1]
The results at the element corners associated with the corresponding 
node/element in the ID array. Some  elements have missing corners. 
For example, Tetrahedral results ar e stored on corners 1,2,3 and 5. 
Wedge results are stored on 1,2,3 and 5,6,7. REAL8 c2[0..listcount - 1]
REAL8 c3[0..listcount - 1]REAL8 c4[0..listcount - 1]REAL8 c5[0..listcount - 1]REAL8 c6[0..listcount - 1]REAL8 c7[0..listcount - 1]REAL8 c8[0..listcount - 1]Return Code:FE_FAIL Unable to get data for the specified row/columnsRemarks/Usage:NoneExample:
 API-1564  SetElemWithCornerColumnsV2
4.9.10.23  SetElemW ithCornerColumnsV2
SetElemWithCornerColumnsV2
( nColumnIndices, listcount, maxcorner, nID, centroid, c1, c2, c3, c4, c4, c5, c6, c7, c8 )
Description:This method sets centroid and corner re sults of elements of given columns. 
Input:INT4 nColumnIndices[0..num-
Columns]The indices of the columns to set. 
INT4 listcount The count of elements in the column. 
INT4 maxcornerThe ID of the maximum corner ava ilable for this object. For exam-
ple, if this object contains resu lts on quadrilateral plates, maxcorner 
will typically equal 4, since results  are only available for corners 
1,2,3, and 4.   
INT4 nID[0..listcount - 1] The IDs of the elements. 
REAL8 centroidThe results at the element centroid  associated with the corresponding 
node/element in the ID array. 
REAL8 c1[0..listcount - 1]
The results at the element corners associated with the corresponding 
node/element in the ID array. Some  elements have missing corners. 
For example, Tetrahedral results ar e stored on corners 1,2,3 and 5. 
Wedge results are stored on 1,2,3 and 5,6,7. REAL8 c2[0..listcount - 1]
REAL8 c3[0..listcount - 1]REAL8 c4[0..listcount - 1]REAL8 c5[0..listcount - 1]REAL8 c6[0..listcount - 1]REAL8 c7[0..listcount - 1]REAL8 c8[0..listcount - 1]Output:NoneReturn Code:FE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:NoneExample:
GetScalarAtBeamColumnsV2   API-1565
4.9.10.24  GetScala rAtBeamColumnsV2
GetScalarAtBeamColumnsV2
( nColumnIndices, listcount, nID, ValA, ValB )
Description:This method gets Beam output vectors for EndA and EndB co ntaining a single scalar value. 
Input:INT4 nColumnIndices[0..num-
Columns]The indices of the columns to get. 
Output:
INT4 listcount The count of elements in the column. 
INT4 nID[0..listcount - 1] The IDs of the elements. 
REAL8 ValAThe EndA output values associated with the corresponding element 
IDs array. 
REAL8 ValBThe EndB output values associate d with the corresponding element 
IDs array. 
Return Code:FE_FAIL Unable to get data for the specified row/columnsRemarks/Usage:NoneExample:
 API-1566  SetScalarAtBeamColumnsV2
4.9.10.25  SetScalarAtBeamColumnsV2
SetScalarAtBeamColumnsV2
( nColumnIndices, listcount, nID, ValA, ValB )
Description:This method sets Beam output  vectors for EndA and EndB containing a single scalar value. 
Input:INT4 nColumnIndices[0..num-
Columns]The indices of the columns to get. 
INT4 listcount The count of elements in the column. 
INT4 nID[0..listcount - 1] The IDs of the elements. 
REAL8 ValAThe EndA output values associated with the corresponding element 
IDs array. 
REAL8 ValBThe EndB output values associate d with the corresponding element 
IDs array. 
Output:NoneReturn Code:FE_FAIL Unable to set data for the specified row/columnsRemarks/Usage:NoneExample:
Sort   API-1567
4.9.10.26  Sort
Sort
( nColumnIndex, bAscending, bAbsoluteValue )
Description:This method sorts the data of a specified column. Input:INT4 nColumnIndex The index of the column to sort. BOOL bAscending If True the values w ill be listed in ascending order. 
BOOL bAbsoluteValue If True the values w ill be sorted by the absolute value. 
Output:None  Return Code:FE_FAIL Unable to sort data.Remarks/Usage:This method should be used  before calling Populate. 
Example:
 API-1568  GetScalarAtNodeSetV2
4.9.10.27  GetScalarAtNodeSetV2
GetScalarAtNodeSetV2
( nColumnIndex, nNodeSetID, value )
Description:This method gets scalar data  of a given set of nodes. 
Input:INT4 nColumnIndex The index of the column to get. INT4 nNodeSetID The ID of the set of nodes. Output:REAL8 value[0..N] The nodal results value of the nodes in the set. 
Return Code:FE_FAIL Unable to get data.Remarks/Usage:None Example:
GetScalarAtElemSetV2   API-1569
4.9.10.28  GetScalarAtElemSetV2
GetScalarAtElemSetV2
( nColumnIndex, nElemSetID, value )
Description:This method gets scalar data  of a given set of elements. 
Input:INT4 nColumnIndex The index of the column to get. INT4 nElemSetID The ID of the set of elements. Output:REAL8 value[0..N] The elemental results  value of the nodes in the set. 
Return Code:FE_FAIL Unable to get data.Remarks/Usage:None Example:
 API-1570  GetVectorAtNodeSetV2
4.9.10.29  GetVectorAtNodeSetV2
GetVectorAtNodeSetV2
( nColumnIndices, nNodeSetID, total, x, y, z )
Description:This method gets vector data of a given set of nodes. Input:INT4 nColumnIndices[0..N] The in dices of the columns to get. 
INT4 nNodeSetID The ID of the set of nodes. Output:
REAL8 total[0..N]The total magnitude values associ ated with the corresponding ele-
ment in the Set. 
REAL8 x[0..N]The X component values associated with the corresponding element 
in the Set. 
REAL8 y[0..N]The Y component values associated with the corresponding element 
in the Set. 
REAL8 z[0..N]The Z component values associated  with the corresponding element 
in the Set. 
Return Code:FE_FAIL Unable to get data.Remarks/Usage:None Example:
GetElemWithCornerSetV2   API-1571
4.9.10.30  GetElemWithCornerSetV2
GetElemWithCornerSetV2
( nColumnIndices, nElemSetID, maxcorner, centroid, c1, c2, c3, c4, c5, c5, c6, c7, c8 )
Description:This method retrieves the centroid and corner results stored in an object that contains elemental data 
with corners. Results are retrieved fo r all elements specified in the Set. 
Input:INT4 nColumnIndices[0..N] The in dices of the columns to get. 
INT4 nElemSetID The ID of the set of elements. Output:
INT4 maxcornerThe ID of the maximum corner ava ilable for this object. For exam-
ple, if this object contains resu lts on quadrilateral plates, maxcorner 
will typically equal 4, since results  are only available for corners 
1,2,3, and 4. 
REAL8 c1[0..N]
The results at the element corners associated with the corresponding 
node/element in the Set. Some el ements have missing corners. For 
example, Tetrahedral results are stored on corners 1,2,3 and 5. 
Wedge results are stored on 1,2,3 and 5,6,7. REAL8 c2[0..N]
REAL8 c3[0..N]REAL8 c4[0..N]REAL8 c5[0..N]REAL8 c6[0..N]REAL8 c7[0..N]REAL8 c8[0..N]Return Code:FE_FAIL Unable to get data.Remarks/Usage:None Example:
 API-1572  GetScalarAtBeamSetV2
4.9.10.31  GetScalarAtBeamSetV2
GetScalarAtBeamSetV2
( nColumnIndices, nElemSetID, ValA, ValB )
Description:This method gets scalar data of  a given set of beam elements. 
Input:INT4 nColumnIndices[0..N] The in dices of the columns to get. 
INT4 nElemSetID The ID of the set of elements. Output:
REAL8 ValA[0..N]The EndA values associated with the corresponding element in the 
Set. 
REAL8 ValB[0..N]The EndB values associated with th e corresponding element in the 
Set. 
Return Code:FE_FAIL Unable to get data.Remarks/Usage:None Example:
   API-1573
4.10  MapData Objects
The MapData object is essentially a random access array that allows you to store items based on a 
ID/value pair and quickly retrieve them later. Rather than having fixed values of a certain type, the 
FEMAP MapData object can hold one or more of sev eral different data types, including Booleans, 
Strings, Integers, Reals and variants . Each piece of data stored in a value is referred to as a field. 
Conceptually, data within the MapD ata object can be visualized as a table where the ID is the first 
column and each field is column 2-n (all columns represent the corresponding  value in an ID/value 
pair, regardless of how many fields are associated with a single ID). IDs do not need to be sequen-
tial, nor do they have to be in order (random is okay), however they must be unique for each row.
To use the MapData object, first Initialize() the object with an approximate guess at how many 
items (ID/value pairs) will be stored in the object.  Next, use the Define*() methods to add fields to 
be associated with each ID added to the MapDat a object. Each call to a Define*() method, if suc-
cessful, will return a “column index” for that fiel d of data. Populate the MapData object using the 
various Set*() methods. Finally, retrieve values  from the MapData object  using the Get*() meth-
ods. Each Set*() and Get*() method requires an ID and an index where the ID is the unique identi-
fier for each ID/value pair, and the index is the order of the field of interest, obtained from the 
Define*() methods. If you call Set*() method with an ID that hasn't been specified yet, it simply 
adds it to the MapData object.
Note that when using the variant data type to ho ld arrays of data, the MapData object requires an 
array of determinate length. As such, a variant arra y must be properly dimensioned prior to passing 
it to the DefineVariant() method.
Use the feMapData method of the FEMAP app lication object to create MapData objects.
 API-1574  Clear
4.10.1  MapData Object Methods
4.10.1.1  Clear
Clear
( )
Description:Clears everything in the MapData object, including a ll data definitions, which then must be set again.
Input:NoneOutput:NoneReturn Code:
Remarks/Usage:
To clear all of the data, but retain the data  definitions, use the RemoveAll method instead.
Example:None
Initialize   API-1575
4.10.1.2  Initialize
Initialize
( nCount )
Description:Sets approximate number of IDs to be added to MapData object
Input:INT4 nCount Approximate number of IDs to be added to MapData objectOutput:NoneReturn Code:
Remarks/Usage:
The count supplied is only an estimate to the number of entries th e MapData object w ill hold. If more or 
fewer entries planned to be stored, there is no need to call this meth od again as the MapData will auto-
matically resize itself as appropriate, however a more accurate count will result in more efficient mem-
ory utilization and better performance.
Example:None
 API-1576  Count
4.10.1.3  Count
Count
( )
Description:Number of IDs in the MapData objectInput:NoneOutput:NoneReturn Code:
Remarks/Usage:Example:
None
GetIDs   API-1577
4.10.1.4  GetIDs
GetIDs
( nIDSet )
Description:Fills Set Object with IDs from MapData objectInput:
Output:
nIDSet ID of Set object to fill with IDs from MapData objectReturn Code:
Remarks/Usage:Example:
None
 API-1578  Remove
4.10.1.5  Remove
Remove
( nID)
Description:Deletes a selected ID and associated data from the MapData objectInput:INT4 nID ID to delete from MapData objectOutput:
Return Code:Remarks/Usage:Example:
None
RemoveAll   API-1579
4.10.1.6  RemoveAll
RemoveAll
()
Description:Deletes a all data associated with all IDs from the MapData object, but the field definitions remain
Input:
Output:Return Code:Remarks/Usage:Example:
None
 API-1580  DefineReal
4.10.1.7  DefineReal
DefineReal
()
Description:Defines a double field in MapData object and returns a number from 0..n that re presents the index ID of 
that piece of data.
Input:
Output:Return Code:Remarks/Usage:
If the data cannot be successfully added to the MapData object, -1 is returned.
Example:None
DefineInt   API-1581
4.10.1.8  DefineInt
DefineInt
()
Description:Defines an integer field in MapData object and return s a number from 0..n that represents the index ID 
of that piece of data.
Input:
Output:Return Code:Remarks/Usage:
If the data cannot be successfully added to the MapData object, -1 is returned.
Example:None
 API-1582  DefineBool
4.10.1.9  DefineBool
DefineBool
()
Description:Defines an Boolean field in MapData object and retu rns a number from 0..n that represents the index ID 
of that piece of data.
Input:
Output:Return Code:Remarks/Usage:
If the data cannot be successfully added to the MapData object, -1 is returned.
Example:None
DefineString   API-1583
4.10.1.10  DefineString
DefineString
(nLength)
Description:Defines an String field of a specified maximum le ngth in MapData object and returns a number from 
0..n that represents the index ID of that piece of data.
Input:INT4 nLength Maximum length of StringOutput:
Return Code:Remarks/Usage:Example:
None
 API-1584  DefineVariant
4.10.1.11  DefineVariant
DefineVariant
(vVar)
Description:Defines an String field of a specified length in Ma pData object and returns a number from 0..n that rep-
resents the index ID of that piece of data.
Input:V ARIANT vVar Name of the variantOutput:
Return Code:Remarks/Usage:
The size and data type of the Va riant my be defined using the Array call in the API Programming Win-
dow 
Example:
DefineVariant   API-1585
The following shows how an array can be created to hold Real values, in this case XYZ coordinates, then how 
those values are set using SetVariant in the MapData object:
Dim fmap As femap.MapData
Set fmap = App.feMapData
Dim fsn As femap.Set
Set fsn = App.feSet
Dim nField1 As LongDim nNumNode As Long
Dim vNdID As VariantDim vNdXYZ As Variant
Dim vXyz As VariantDim i As Longfsn.AddAll( FT_NODE )
fmap.Initialize( fsn.Count )
vXyz = Array( 0#, 0#, 0# )
nField1 = fmap.DefineVariant( vXyz )
fn.GetCoordArray( fsn.ID, nNumNode, vNdID, vNdXYZ )
For i = 0 To nNumNode - 1 Step 1
vXyz = Array(vNdXYZ(i*3 + 0), vNdXYZ(i*3 + 1), vNdXYZ(i*3 + 2))
fmap.SetVariant( nField1, vNdID( i ), vXyz )NextDefineVariant
(vVar)
 API-1586  SetReal
4.10.1.12  SetReal
SetReal
( nIndex, nID, dVal )
Description:Sets Real value in field defined using DefineReal method for DataMap object for given index-ID data 
pair
Input:INT4 nIndex Index value for real fieldINT4 nID ID value for real fieldREAL8 dVal Real value for real fieldOutput:
Return Code:
FE_INV ALIDField does not currently exist (i.e., tried to set Field 4, but only Fields 
1-3 are defined)
FE_BAD_TYPEField defined as one data type, but trying to set with a different data 
type (i.e., tried to set a real valu e in a field defined for an integer)
Remarks/Usage:
Example:
None
SetInt   API-1587
4.10.1.13  SetInt
SetInt
( nIndex, nID, nVal )
Description:Sets Integer value for a field defined using Define Int method for DataMap ob ject for given Index-ID 
data pair
Input:INT4 nIndex Index value for integer fieldINT4 nID ID value for integer fieldINT4 nVal Integer value for integer fieldOutput:
Return Code:
FE_INV ALIDField does not currently exist (i.e., tried to set Field 4, but only Fields 
1-3 are defined)
FE_BAD_TYPEField defined as one data type, but trying to set with a different data 
type (i.e., tried to set a real valu e in a field defined for an integer)
Remarks/Usage:
Example:
None
 API-1588  SetBool
4.10.1.14  SetBool
SetBool
( nIndex, nID, bVal )
Description:Sets Boolean value for a field defined using DefineBo ol method for DataMap ob ject for given Index-ID 
data pair
Input:INT4 nIndex Index value for Boolean fieldINT4 nID ID value for Boolean fieldBOOL bVal Boolean value for Boolean fieldOutput:
Return Code:
FE_INV ALIDField does not currently exist (i.e., tried to set Field 4, but only Fields 
1-3 are defined)
FE_BAD_TYPEField defined as one data type, but trying to set with a different data 
type (i.e., tried to set a real valu e in a field defined for an integer)
Remarks/Usage:
Example:
None
SetString   API-1589
4.10.1.15  SetString
SetString
( nIndex, nID, sVal )
Description:Sets String value for a field defined using DefineSt ring method for DataMap object for given Index-ID 
data pair
Input:INT4 nIndex Index value for string fieldINT4 nID ID value for string fieldSTRING sVal String value for string fieldOutput:
Return Code:
FE_INV ALIDField does not currently exist (i.e., tried to set Field 4, but only Fields 
1-3 are defined)
FE_BAD_TYPEField defined as one data type, but trying to set with a different data 
type (i.e., tried to set a real valu e in a field defined for an integer)
Remarks/Usage:
Example:
None
 API-1590  SetVariant
4.10.1.16  SetVariant
SetVariant
( nIndex, nID, vVal )
Description:Sets Variant value for a field defined using Define Variant method for DataMa p object for given Index-
ID data pair
Input:INT4 nIndex Index value for variant fieldINT4 nID ID value for variant fieldV ARIANT vVal Name of variant for variant fieldOutput:
Return Code:
FE_INV ALIDField does not currently exist (i.e., tried to set Field 4, but only Fields 
1-3 are defined)
FE_BAD_TYPEField defined as one data type, but trying to set with a different data 
type (i.e., tried to set a real valu e in a field defined for an integer)
Remarks/Usage:The data type used here needs to be the exact sam e data type used with the DefineVariant() method
Example:
See DefineVariant method for exampl e of using the SetVariant method
GetReal   API-1591
4.10.1.17  GetReal
GetReal
( nIndex, nID, dVal )
Description:Gets Real value from field filled by  SetReal method for DataMap objec t for given Index-ID data pair.
Input:INT4 nIndex Index value for real fieldINT4 nID ID value for real fieldOutput:REAL8 dVal Real value from real fieldReturn Code:
FE_INV ALIDField does not currently exist (i.e., tr ied to get Field 4, but only Fields 
1-3 are defined and set)
FE_BAD_TYPEField defined as one data type, but trying to get a different data type 
(i.e., tried to get a real value from a field defined and set for an inte-
ger)
FE_NOT_EXIST Specified ID does curren tly does not exist in DataMap object
FE_TOO_SMALL Field exists for some  IDs, but not for specified ID
Remarks/Usage:
Example:
None
 API-1592  GetInt
4.10.1.18  GetInt
GetInt
( nIndex, nID, nVal )
Description:Gets Integer value from field filled by SetInt method for DataMap object for given Index-ID data pair.
Input:INT4 nIndex Index value for integer fieldINT4 nID ID value for integer fieldOutput:INT4 nVal Integer value from integer fieldReturn Code:
FE_INV ALIDField does not currently exist (i.e., tr ied to get Field 4, but only Fields 
1-3 are defined and set)
FE_BAD_TYPEField defined as one data type, but trying to get a different data type 
(i.e., tried to get a real value from a field defined and set for an inte-
ger)
FE_NOT_EXIST Specified ID does curren tly does not exist in DataMap object
FE_TOO_SMALL Field exists for some  IDs, but not for specified ID
Remarks/Usage:
Example:
None
GetBool   API-1593
4.10.1.19  GetBool
GetBool
( nIndex, nID, bVal )
Description:Gets Boolean value from field fille d by SetBool method fo r DataMap object for given Index-ID data 
pair.
Input:INT4 nIndex Index value for Boolean fieldINT4 nID ID value for Boolean fieldOutput:BOOL bVal Boolean value from Boolean fieldReturn Code:
FE_INV ALIDField does not currently exist (i.e., tr ied to get Field 4, but only Fields 
1-3 are defined and set)
FE_BAD_TYPEField defined as one data type, but trying to get a different data type 
(i.e., tried to get a real value from a field defined and set for an inte-
ger)
FE_NOT_EXIST Specified ID does curren tly does not exist in DataMap object
FE_TOO_SMALL Field exists for some  IDs, but not for specified ID
Remarks/Usage:
Example:
None
 API-1594  GetString
4.10.1.20  GetString
GetString
( nIndex, nID, sVal )
Description:Gets String value from field filled by SetString method  for DataMap object for given Index-ID data pair.
Input:INT4 nIndex Index value for string fieldINT4 nID ID value for string fieldOutput:STRING sVal String value from string fieldReturn Code:
FE_INV ALIDField does not currently exist (i.e., tr ied to get Field 4, but only Fields 
1-3 are defined and set)
FE_BAD_TYPEField defined as one data type, but trying to get a different data type 
(i.e., tried to get a real value from a field defined and set for an inte-
ger)
FE_NOT_EXIST Specified ID does curren tly does not exist in DataMap object
FE_TOO_SMALL Field exists for some  IDs, but not for specified ID
Remarks/Usage:
Example:
None
GetVariant   API-1595
4.10.1.21  GetVariant
GetVariant
( nIndex, nID, vVal )
Description:Gets Variant from field filled by Se tVarient method for DataMap objec t for given Index-ID data pair.
Input:INT4 nIndex Index value for variant fieldINT4 nID ID value for variant fieldOutput:V ARIANT vVal Name of variant for variant fieldReturn Code:
FE_INV ALIDField does not currently exist (i.e., tr ied to get Field 4, but only Fields 
1-3 are defined and set)
FE_BAD_TYPEField defined as one data type, but trying to get a different data type 
(i.e., tried to get a real value from a field defined and set as an inte-
ger)
FE_NOT_EXIST Specified ID does curren tly does not exist in DataMap object
FE_TOO_SMALL Field exists for some  IDs, but not for specified ID
Remarks/Usage:The data type used here needs to be the exact sam e data type used with the DefineVariant() method
Example:
 API-1596  GetVariant
See DefineVariant method for examples of using th e DefineVariant and SetVar iant method. This code 
would be used along with that code from that exampl e to retrieve the information from the Variant Data-
Map field to list the XYZ coordina tes for all nodes in the model. 
While fsn.Next > 0
nID = fsn.CurrentID
  App.feAppMessage( FCM_COMMAND, "Node " + Str$( nID ))
fmap.GetVariant( nField1, nID, vXyz )
App.feAppMessage(FCM_NORMAL, "X: "+Format$(vXyz(0),"0.000")+ _
", Y: "+Format$(vXyz(1),"0.000")+", Z:"+Format$(vXyz(2),"0.000"))
WendGetVariant
( nIndex, nID, vVal )
   API-1597
4.11  Entity Tracking Objects
The Entity Tracking object is us ed to determine which entities have  been created and/or deleted 
during a particular portion of an API program. Use the feTrackData method of the FEMAP appli-cation object to create TrackData objects.
To use the TrackData object, simp ly use the Start method anywhere  in the API program to begin 
tracking a particular entity type, th en use the Stop method to stop tracking a particular entity type 
later in the API program. Entity types which can be tracked indivi dually are points, curves, sur-
faces, volumes, solids, coordinate systems, nodes, elements, materi als, properties, layups, global 
plies, load sets, constraint sets, functions, data surfaces, analysis sets, output sets, regions, connec-
tion properties, connectors, aero panel/bodies, aero  properties, aero splines, aero control surfaces, 
text entities, views, groups, layers, and design optimization entities.
In addition to the Start method, the StartGeometry method can be used to begin entity tracking of 
geometric entities (points, curves , surfaces, and solids) and the StartMesh method can be used to 
begin entity tracking of a subset of finite elem ent entities (nodes, elements , materials, and proper-
ties). When using one of these methods, or tracki ng multiple entity types, it may be beneficial to 
use the StopAll method, which will stop  entity tracking for all entity types.
At any time during the tracking period or after en tity tracking has been comp leted with the Stop or 
StopAll method, use the Created me thod to fill a Set object with the entities of a specific type cre-
ated during the tracking period and/or use the Deleted method to fill a Set object with the entities 
of a specific type dele ted during the tracking period. Usin g the Created or Deleted method will 
also stop entity tracking of the specified entity type , so the Start method must be called again in 
order to begin entity tracking of the entity type again.
Both the Created and Deleted methods have an optio n to “clear” the Set obje ct before filling it with 
the entities of the specified type that have been cr eated or deleted. If the Set object is not cleared 
with these methods, then entity tracking can effec tively be done using sev eral different tracking 
periods. If the Set object is clea red, then entity tracking of the sp ecified entity type will only be 
tracked from the previous call of one of the Star t methods. Because of this , it is recommended to 
use unique Set objects for tracking purposes (i.e., one Set object to track created entities of a spe-
cific entity type and a different Se t object to track deleted entities).
The same tracking object can be used multiple times during the execution of an API program. To 
remove everything from a TrackData object and start over at any time, simply use the Clear 
method.
 API-1598  Clear
4.11.1  TrackData Object Methods
4.11.1.1  Clear
Clear
( )
Description:Clears everything in the TrackData object.Input:NoneOutput:NoneReturn Code:
Remarks/Usage:
Example:
None
Start   API-1599
4.11.1.2  Start
Start
( entityType )
Description:Begins entity tracking for the specified entity type.Input:
INT4 entityTypeType of entity to begin tracking . 3=Point, 4=Curve, 5=Surface, 
6=V olume, 7=Node, 8=Element, 9=Coordinate System, 10=Mate-
rial, 11=Property, 12=Load Set, 17=Constraint Set, 21=Text, 
22=View, 24=Group, 28=Output Set, 32= Boundary Surface, 33=Layer, 35=Function, 39=So lid, 45=Design Optimization, 
58=Region, 60=Analysis Set, 69=Data Surface, 71=Connector, 
72=Connection Property, 81=Layup, 83=Global Ply, 95=Aero Panel/Body, 96=Aero Property, 98=Aero Spline, 99=Aero Control Surface. 
For more information, see S ection 3.3.6, "Entity Types".
Output:
NoneReturn Code:FE_BAD_TYPE Entity type is not  supported by entity tracking.
Remarks/Usage:
Example:
None
 API-1600  StartGeometry
4.11.1.3  StartGeometry
StartGeometry
( )
Description:Begins entity tracking of Point, Curve, Su rface, Boundary Surface, and Solid entity types.
Input:NoneOutput:NoneReturn Code:
Remarks/Usage:Example:
None
StartMesh   API-1601
4.11.1.4  StartMesh
StartMesh
( )
Description:Begins entity tracking for Node, Element, Material, and Property entity types.
Input:
Output:Return Code:Remarks/Usage:Example:
None
 API-1602  Stop
4.11.1.5  Stop
Stop
( entityType )
Description:Ends entity tracking for the specified entity type.
Input:
INT4 entityTypeType of entity to stop tracking.  3=Point, 4=Curve, 5=Surface, 
6=V olume, 7=Node, 8=Element, 9=Coordinate System, 10=Mate-
rial, 11=Property, 12=Load Set, 17=Constraint Set, 21=Text, 
22=View, 24=Group, 28=Output Set, 32=Boundary Surface, 33=Layer, 35=Function, 39=So lid, 45=Design Optimization, 
58=Region, 60=Analysis Set, 69=Data Surface, 71=Connector, 
72=Connection Property, 81=Layup, 83=Global Ply, 95=Aero Panel/Body, 96=Aero Property, 98=Aero Spline, 99=Aero Control Surface. 
For more information, see S ection 3.3.6, "Entity Types".
Output:
Return Code:
FE_BAD_TYPE Entity type is not  supported by entity tracking.
FE_NOT_A V AILABLEEntity type is not a type currently being tracked, thus tracking cannot 
be stopped.
FE_INV ALIDEntity tracking of spec ified entity type has al ready been stopped, 
thus cannot be stopped again.
Remarks/Usage:
Example:
None
StopAll   API-1603
4.11.1.6  StopAll
StopAll
()
Description:Ends entity tracking for all entity types.Input:
Output:Return Code:Remarks/Usage:Example:
None
 API-1604  Created
4.11.1.7  Created
Created
( entityType, SetID, bClear )
Description:Fills the specified Set object with the entities of the specified type which were created during the entity 
tracking period.
Input:
INT4 entityTypeType of entity created during tr acking period. 3=Point, 4=Curve, 
5=Surface, 6=V olume, 7=Node, 8=Element, 9=Coordinate System, 
10=Material, 11=Property, 12=Load Set, 17=Constraint Set, 21=Text, 22=View, 24=Group, 28=Output Set, 32=Boundary Sur-
face, 33=Layer, 35=Function, 39=Solid, 45=Design Optimization, 
58=Region, 60=Analysis Set, 69=Data Surface, 71=Connector, 72=Connection Property, 81=Layup, 83=Global Ply, 95=Aero Panel/
Body, 96=Aero Property, 98=Aero Spline, 99=Aero Control Surface. 
For more information, see S ection 3.3.6, "Entity Types".
INT4 SetIDID of the Set object to fill with entities of the specified entity type 
created during the entity tracking pe riod. It is recommended to use a 
unique Set object for tracking cr eated entities of each entity type.
BOOL bClearIf True, removes all entities of the speci fied entity type created in the 
current tracking period from the Se t object specified with SetID. If 
false, entities created during the pr evious tracking period(s) will 
remain in the Set object until cleared.
Output:
Return Code:
FE_BAD_TYPE Entity type is not  supported by entity tracking.
FE_NOT_A V AILABLEEntity type is not a type  currently being tracked,  thus no information 
exists about entities of this type  created during tracking period.
Remarks/Usage:Calling the Created method stops tracking of the speci fied entity type. To begin tracking this entity type 
again, the Start, StartGeometry, or StartMesh method must be called again.
Example:None
Deleted   API-1605
4.11.1.8  Deleted
Deleted
( entityType, SetID, bClear )
Description:Fills the specified Set object with the entities of the specified type which were deleted during the entity 
tracking period.
Input:
INT4 entityTypeType of entity deleted during tr acking period. 3=Po int, 4=Curve, 
5=Surface, 6=V olume, 7=Node, 8=Element, 9=Coordinate System, 
10=Material, 11=Property, 12=Load Set, 17=Constraint Set, 21=Text, 22=View, 24=Group, 28=Output Set, 32=Boundary Sur-
face, 33=Layer, 35=Function, 39=Solid, 45=Design Optimization, 
58=Region, 60=Analysis Set, 69=Data Surface, 71=Connector, 72=Connection Property, 81=Layup, 83=Global Ply, 95=Aero Panel/
Body, 96=Aero Property, 98=Aero Spline, 99=Aero Control Surface. 
For more information, see S ection 3.3.6, "Entity Types".
INT4 SetIDID of the Set object to fill with entities of the specified entity type 
deleted during the entity tracking pe riod. It is recommended to use a 
unique Set object for tracking dele ted entities of each entity type.
BOOL bClearIf True, removes all entities of the spec ified entity type deleted in the 
current tracking period from the Se t object specified with SetID. If 
false, entities deleted during the previous tracking period(s) will 
remain in the Set object until cleared.
Output:
Return Code:
FE_BAD_TYPE Entity type is not  supported by entity tracking.
FE_NOT_A V AILABLEEntity type is not a type  currently being tracked,  thus no information 
exists about entities of this type  created during tracking period.
Remarks/Usage:Calling the Deleted method stops tracking of the speci fied entity type. To begin tracking this entity type 
again, the Start, StartGeometry, or StartMesh method must be called again.
Example:None
 API-1606  
4.12  Beam Calculator Objects
The Beam Calculator object provides access to the FEMAP Beam Calculator. Results provided via 
this tool are the same as those found in View, Advanced Post, Beam Cross Section command.
Prior to recovering any data for a beam, at the minimum, the Elem ent property must be set. The 
Element specified will be the element used for a ll subsequent calls to Be am Calculator Methods 
(such as CalculateStress or GetElementProperties)  until the Element property is updated and the 
methods called again. This is gene rally true for all properties; howev er, it's not required that their 
values be set prior to calling an y of the Beam Calculator methods.  Consult the description for each 
property to see how changing it may affect  the stress or beam property calculations.
Use the feBeamCalculator method of the FEMAP Application object to access Beam Calculator 
Objects.
4.12.1  Beam Calculat or Object Properties
Property Description
INT4 ElementElement ID to use with the beam  calculator. Must be a valid 
beam element with a recoverable cross-section.
Used by all Beam Calculator methods.
REAL8 PositionThe position along the beam, betw een 0.0 and 1.0 to calculate 
stresses. Default = 0.0. If not set, CalculateStress and Calculat-eStressFromForces will use the default value.
Used by all Beam Calculator  methods except FindMaxMin-
Stress.
INT4 MeshFactorSetting determines the mesh de nsity used in calculating 
stresses. Value from 1 (default, coarse) to 5 (fine). 
Used by all Beam Calculator Methods.
BOOL IncludeAxialForceConsider axial forces when ca lculating internal stresses. 
Default True.
Used by CalculateStress and FindMaxMinStress methods.
BOOL IncludeShearForceYConsider shear forces in the el ement y-direction. Default True.
Used by CalculateStress and FindMaxMinStress methods.
BOOL IncludeShearForceZConsider shear forces in the el ement z-direction. Default True.
Used by CalculateStress and FindMaxMinStress methods.
BOOL IncludeMomentYConsider moment about the el ement y-axis. Default True.
Used by CalculateStress and FindMaxMinStress methods.
   API-1607
BOOL IncludeMomentZConsider moment about the el ement z-axis. Default True.
Used by CalculateStress and FindMaxMinStress methods.
BOOL IncludeTorqueConsider torque. Default True.
Used by CalculateStress and FindMaxMinStress methods.Property Description
 API-1608  
4.12.2  Beam Calcul ator Object Methods
4.12.2.1  GetElementProperties
GetElementProperties
(pdArea, pdIzz, pdIyy, pdIyz, pdJ, pdShearAreaY, pdShearAreaZ, pdWarp, pdNeutralAxi-
sOffsetY, pdNeutralAxisOffsetZ
Description:Returns beam properties calculated from mesh at th e location along the beam specified for the element 
specified
Input:NoneOutput:REAL8 pdArea AreaREAL8 pdIzz Moment of Inertia, IzzREAL8 pdIyy Moment of Inertia, IyyREAL8 pdIyz Moment of Inertia, IyzREAL8 pdJ Torsional constantREAL8 pdShearAreaY Y Shear AreaREAL8 pdShearAreaZ Z Shear AreaREAL8 pdWarp Warping ConstantREAL8 pdNeutralAxisOffsetY Y neutral axis offsetREAL8 pdNeutralAxisOffsetZ Z neutral axis offsetReturn Code:
FE_FAILCould not retrieve element proper ties. Either the element was not 
specified or an invalid element was specified
Remarks/Usage:
Example:
None
   API-1609
4.12.2.2  GetMeshInfo
GetMeshInfo
(pnNumNode, pvCoord, pnNumElem, pvNodes)
Description:Returns node location elemen t connectivity information about the associated mesh
Input:NoneOutput:INT4 pnNumNode Number of nodesREAL8 pvCoord
[0..((pnNumNode)*2 - 1)]Y and Z coordinates of the each node . First value is the Y coordinate, 
second value is the Z coordinate. Repeats for each node.
INT4 pnNumElem Number of elementsINT4 pvNodes
[0..((pnNumElem)*9 - 1)]Node indices for 9-noded quad (nod e 9 is located at the element cen-
troid)
Return Code:
FE_FAILUnable to retrieve mesh informa tion. Invalid elem ent likely speci-
fied.
Remarks/Usage:
Example:
None
 API-1610  
4.12.2.3  CalculateStress
CalculateStress
(nOutputSetID, enComponent, pnNumNodes, pvCoordinates, pvStresses, pvMax-
Stress, pvMaxStressInfo, pvMinStress, pvMinStressInfo)
Description:Calculates stresses based on forces in one or more specified output sets. Use “Include*” properties to 
specify which force components are considered in the calculations.
Note that unless the “Position” property is set, the default position along the b eam (End A) is used for 
all calculations. To recover stresses at different po sitions along the beam, the “Position” property must 
be set for each position of interest pr ior to each corresponding CalculateStress. 
The FindMaxMinStress method auto matically will perform calculations for stresses at End A, the 
beam midpoint, and End B, and retu rn the maximum and minimum stresses.
Input:
INT4 nOutputSetIDOutput set(s) to use when calculating internal stresses. Use a 
negative number to specify a si ngle output set ID, otherwise a 
positive number specifies the Fe map Set object ID containing 
multiple Output Set IDs
enum enComponentStress component to return. U se zBeamCalculatorStressCompo-
nent.
Output:INT4 pnNumNodes Number of NodesREAL8 pvCoordinates
[(0..pnNumNodes)*2 - 1]Y and Z coordinate for each node
REAL8 pvStresses
[nOS*nComp*(pnNumNodes) - 1]Stresses at each node. Array is organized by:
-Output sets
-Stress components
-Stress
nOS = number of output sets requested
nComp = number of stress compon ents requested. Normally 1, 
unless FBMC_SC_ALL is specified, in which case 8.
REAL8 pvMaxStress[0..(0 or 7)]Maximum stress. If only a single stress component is specified, 
an array of length 1 is returned containing the maximum stress 
for the requested stress componen t. If all stress components are 
specified, the array is 8 items long and each index corresponds 
to the values from the zBeamCalculatorStressComponent enu-
meration
   API-1611
INT4 pvMaxStressInfo[0..(0 or 7)]The values in this array vary based upon the requested data
If a single stress component is specified, the array will be of 
length 1, otherwise the array will be of length 8.
If a single output set is specified the value(s) in the array will be 
the node index where the maxi mum stress was found. If multi-
ple output sets are specified the value(s) in the array will be the output set corresponding to the max stress
REAL8 pvMinStress[0..(0 or 7)]Minimum stress. If only a single stress component is specified, 
an array of length 1 is returned  containing the minimum stress 
for the requested stress componen t. If all stress components are 
specified, the array is 8 items long and each index corresponds 
to the values from the zBeamCalculatorStressComponent enu-
meration
INT4 pvMinStressInfo[0..(0 or 7)]The values in this array vary based upon the requested data
If a single stress component is specified, the array will be of 
length 1, otherwise the array will be of length 8.
If a single output set is specified the value(s) in the array will be 
the node index where the minimum stress was found. If multiple 
output sets are specified the value( s) in the array will be the out-
put set corresponding to the minimum stress
Return Code:FE_FAIL Unable to calculate beam stresses
FE_INV ALIDCurrent element is invalid - either  it is not a beam element, the 
beam orientation could not be determined, or the element does 
not exist
FE_NOT_EXIST One or more of the speci fied Output Set IDs does not exist
FE_BAD_TYPEThe specified stress component is invalid. Use zBeamCalcula-
torStressComponent enum.
FE_BAD_DATA Invalid output set specifiedRemarks/Usage:
Example:CalculateStress
(nOutputSetID, enComponent, pnNumNodes, pvCoordinates, pvStresses, pvMax-
Stress, pvMaxStressInfo, pvMinStress, pvMinStressInfo)
 API-1612  
Sub Main
    Dim App As femap.model
    Set App = feFemap()    Dim fe As femap.Elem
    Dim fbc As femap.BeamCalculator
    Dim fsO As femap.Set    Dim fsE As femap.Set
    Dim nNumNode As Long
    Dim ddCoord As Variant, ddStress As Variant    Dim ddMax As Variant, ddMin As Variant
    Dim nnMaxI As Variant, nnMinI As Variant
    Set fe = App.feElem
    Set fbc = App.feBeamCalculator
    Set fsO = App.feSet    Set fsE = App.feSet
    fsO.AddAll( FT_OUT_CASE )
    fsE.AddRule( FET_L_BEAM, FGD_ELEM_BYTYPE )    fbc.Position = 0.
    fbc.MeshFactor = 1
    ' Loop through all beam elements, calculate stresses at End A    fsE.Reset()
    While fsE.Next() <> FE_FAIL
        fbc.Element = fsE.CurrentID        rc = fbc.CalculateStress( fsO.ID, FBMC_SC_ALL, nNumNode, 
ddCoord, ddStress, ddMax, nnMaxI, ddMin, nnMinI )
    Wend
    fbc.Position = 1.
    ' Loop through all beam elements, calculate stresses at End B    fsE.Reset()
    While fsE.Next() <> FE_FAIL
        fbc.Element = fsE.CurrentID        rc = fbc.CalculateStress( fsO.ID, FBMC_SC_ALL, nNumNode, 
ddCoord, ddStress, ddMax, nnMaxI, ddMin, nnMinI )
    Wend
End SubCalculateStress
(nOutputSetID, enComponent, pnNumNodes, pvCoordinates, pvStresses, pvMax-
Stress, pvMaxStressInfo, pvMinStress, pvMinStressInfo)
   API-1613
4.12.2.4  CalculateStressFromForces
CalculateStressFromForces
(dForcesA, dForcesB, enComponent, pnNumNodes, pvCoordinates, pvStresses, 
pvMaxStress, pvMaxStressInfo, pvMinStress, pvMinStressInfo)
Description:Calculates beam stresses using user-defined forces, rather than forces from an output set. Include* 
Beam Calculator properties are ig nored when usin g this method.
Note that unless the “Position” property is set, the default position along the b eam (End A) is used for 
all calculations. To recover stresses at different positions along the be am, the “Position” property must 
be set for each position of interest pr ior to each corresponding CalculateStress. 
The FindMaxMinStress method  automatically will perfor m calculations for stresses  at End A, the beam 
midpoint, and End B, and return the maximum and minimum stresses.
Input:
REAL8 dForcesA[0..5]Forces at end A
0 - Axial Force
1 - Shear Force Y2 - Shear Force Z
3 - Moment Y
4 - Moment Z5 - Torque
REAL8 dForcesB[0..5]Forces at end B
0 - Axial Force
1 - Shear Force Y2 - Shear Force Z
3 - Moment Y
4 - Moment Z5 - Torque
enum enComponentStress component to return. Us e zBeamCalculatorStressCompo-
nent
Output:INT4 pnNumNodes Number of NodesREAL8 pvCoordinates
[(0..pnNumNodes)*2 - 1]Y and Z coordinate for each node
 API-1614  
REAL8 pvStresses
[nOS*nComp*(pnNumNodes) - 1]Stresses at each node. Array is organized by:
-Output sets-Stress components
-Stress
nOS = number of output sets requested
nComp = number of stress comp onents requested. Normally 1, 
unless FBMC_SC_ALL is specified, in which case 8.
REAL8 pvMaxStress[0..(0 or 7)]Maximum stress. If only a single st ress component is specified, 
an array of length 1 is returned containing the maximum stress for 
the requested stress component. If all stress components are spec-
ified, the array is 8 items long and each index corresponds to the 
values from the zBeamCalculator StressComponent enumeration
INT4 pvMaxStressInfo[0..(0 or 7)]The values in this array vary  based upon the requested data
If a single stress component is sp ecified, the array will be of 
length 1, otherwise the a rray will be of length 8.
If a single output set is specified the value(s) in the array will be 
the node index where the maximu m stress was found. If multiple 
output sets are specified the value( s) in the array will be the out-
put set corresponding to the max stress
REAL8 pvMinStress[0..(0 or 7)]Minimum stress. If only a single stress component is specified, an 
array of length 1 is returned containing the minimum stress for the requested stress component. If all stress components are spec-
ified, the array is 8 items long and each index corresponds to the 
values from the zBeamCalculator StressComponent enumeration
INT4 pvMinStressInfo[0..(0 or 7)]The values in this array vary  based upon the requested data
If a single stress component is sp ecified, the array will be of 
length 1, otherwise the a rray will be of length 8.
If a single output set is specified the value(s) in the array will be 
the node index where the minimum stress was found. If multiple output sets are specified the value( s) in the array will be the out-
put set corresponding to the minimum stress
Return Code:FE_FAIL Unable to calculate beam stresses
FE_INV ALIDCurrent element is invalid - either  it is not a beam element, the 
beam orientation could not be determined, or the element does not existCalculateStressFromForces(dForcesA, dForcesB, enComponent, pnNumNodes, pvCoordinates, pvStresses, 
pvMaxStress, pvMaxStressInfo, pvMinStress, pvMinStressInfo)
   API-1615
FE_NOT_EXIST One or more of the spec ified Output Set IDs does not exist
FE_BAD_TYPEThe specified stress component is invalid. Use zBeamCalculator-
StressComponent enum.
FE_BAD_TYPE Invalid data passed fo r End A or End B force arrays
Remarks/Usage:
Example:
NoneCalculateStressFromForces
(dForcesA, dForcesB, enComponent, pnNumNodes, pvCoordinates, pvStresses, 
pvMaxStress, pvMaxStressInfo, pvMinStress, pvMinStressInfo)
 API-1616  
4.12.2.5  FindMaxMinStress
FindMaxMinStress 
(nOutputSetID, enStressComponent, nMaxSetID, enMaxComponent, dMaxLocation, 
dMaxStress, nMinSetID, enMinComponent, dMinLocation, dMinStress)
Description:Returns maximum and minimum stress along with the associated stress co mponent for an element 
across one or more output sets. Max/min stresses ar e taken from calculations performed at End A, End 
B and 50% along the length of the element.
Input:
INT4 nOutputSetIDOutput Set ID. Positive value is the ID of a Set object containing one 
or more output sets. A negative value is the ID of a single Output Set
enum enComponentStress component(s) to calculate . Use zBeamCalculatorStressCom-
ponent
Output:INT4 nMaxSetID Output set ID associated with maximum stress
enum enMaxComponentStress component associated with maximum stress. Unless 
FBMC_SC_ALL is specified, this will be the same as the component 
specified with enComponent
REAL8 dMaxLocationLocation along the beam where maximum stress is found. Currently, 
will return:0.0 - End A
0.5 - Midpoint
1.0 - End B
REAL8 dMaxStress Maximum stressINT4 nMinSetID Output set ID associated with minimum stress
enum enMinComponentStress component associated with minimum stress. Unless 
FBMC_SC_ALL is specified, this will be the same as the component 
specified with enComponent
REAL8 dMinLocationLocation along the beam where mini mum stress is found. Currently, 
will return:0.0 - End A
0.5 - Midpoint
1.0 - End B
REAL8 dMinStress Minimum stressReturn Code:FE_FAIL Unable to calculate beam stresses
   API-1617
FE_INV ALIDCurrent element is invalid - either it is not a beam element, the beam 
orientation could not be determined , or the element does not exist
FE_NOT_EXIST One or more of the speci fied Output Set IDs does not exist
FE_BAD_TYPEThe specified stress component is  invalid. Use zBeamCalculator-
StressComponent enum.
FE_BAD_DATA Invalid output set specifiedRemarks/Usage:
Example:
NoneFindMaxMinStress 
(nOutputSetID, enStressComponent, nMaxSetID, enMaxComponent, dMaxLocation, 
dMaxStress, nMinSetID, enMinComponent, dMinLocation, dMinStress)
 API-1618  
4.13  Draw/Erase Objects
The Draw/Erase object provides access to the fu nctionality of the Draw/Erase Toolbar in your 
model. It is not a model entity.
Use the feDrawErase method of the FEMAP Ap plication object to access Draw/Erase Objects.
4.13.1  Draw/Erase Object Properties
Property Description
BOOL EnableWhen True, Draw/Erase functiona lity is enabled. When False, 
Draw/Erase functionality is disabled.
BOOL EraseModeWhen True, set to “Erase” mode. When False, set to “Draw” 
mode.
BOOL AutoSelectMeshWhen True, Auto Select Mesh  is enabled. When False, option 
is disabled.
BOOL EraseGeometryWhen True and EraseMesh is set to False, selects Erase 
Geometry Only . If True and EraseMesh is set to True, selects 
Erase All Selected .
BOOL EraseMeshWhen True and EraseGeometry is set to False, selects Erase 
Mesh Only . If True and EraseGeometry is set to True, selects 
Erase All Selected .
BOOL ExclusiveDrawModeWhen True, Exclusive Draw Mode  is enabled. When False, 
option is disabled.
BOOL DrawModeSelectFromAllWhen True, Draw Mode Select From All  is enabled. When 
False, option is disabled.
   API-1619
4.13.2  Draw/Erase Object Methods
4.13.2.1   ClearAll
ClearAll
( void )
Description:Removes all entities of all ty pes from the Draw/Erase lists
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:
Example:
None
 API-1620  
4.13.2.2  Clear
Clear
( entityType )
Description:Removes all entities of the selecte d type from the Draw/Erase lists
Input:
INT4 entityTypeThe type of entities to be remo ved from the Draw/Erase lists. For 
entity information, see Section 3.3.6, "Entity Types"
Output:NoneReturn Code:NoneRemarks/Usage:
Example:
None
   API-1621
4.13.2.3  SaveGroup
SaveGroup
( groupID, title )
Description:Creates a new group of the visi ble entities and related entities.
Input:
INT4 groupIDID of the group to create. Specifyi ng a value of -1 will use the next 
available Group ID or a value of 0 to display the dialog box of the Create Group command on the Draw/Erase Toolbar.
STRING title Title of GroupOutput:NoneReturn Code:NoneRemarks/Usage:
Example:
None
 API-1622  
4.13.2.4  LoadGroup
LoadGroup
( groupID )
Description:Loads a entities found in a specified group into the cu rrent “mode” of Draw/Erase Toolbar. When set to 
“Draw” mode, entities in the group will be drawn. Wh en set to “Erase” mode entities in the group will 
be erased.
Input:INT4 groupID ID of the group to lo ad into the Draw/Erase Toolbar
Output:NoneReturn Code:NoneRemarks/Usage:
Example:
None
   API-1623
4.13.2.5  Grow
Grow
( void )
Description:Expands selection to include the entities conn ected to the currently selected entities
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:
The function does the same thin g as using the Grow command on the Draw/Erase Toolbar
Example:None
 API-1624  
4.13.2.6  Shrink
Shrink
( void )
Description:Reduces selection to no longer in clude the entities which are not fully surrounded by other entities of the 
same type
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:The function does the same thin g as using the Shrink command on the Draw/Erase Toolbar
Example:None
   API-1625
4.13.2.7  HasErased
HasErased
( void )
Description:Allows you to determine if entities of any type are currently selected by the Draw/Erase Toolbar.
Input:NoneOutput:NoneReturn Code:FE_OK One or more entities are sel ected by the Draw/Erase Toolbar
FE_FAIL No entities are currently sel ected by the Draw/Erase Toolbar
Remarks/Usage:
Example:
None
 API-1626  
4.13.2.8  HasErasedType
HasErasedType
( entityType )
Description:Allows you to determine if entities  of the specified type are current ly selected by the Draw/Erase Tool-
bar.
Input:
INT4 entityTypeThe type of entities to be remo ved from the Draw/Erase lists. For 
entity information, see page 176.
Output:NoneReturn Code:
FE_OKOne or more entities of the specified  type are selected by the Draw/
Erase Toolbar
FE_FAILNo entities of the specified type ar e currently selected by the Draw/
Erase Toolbar
Remarks/Usage:
Example:
None
   API-1627
4.13.2.9  EraseSet
EraseSet
( entityType, nSetID, bAddToSelection, bClear, bRedraw )
Description:Loads a set object with entity IDs of  a particular entity type into the Draw/Erase Toolbar. Has options to 
add the IDs to the “Erase” list or the “Draw” list and also allows you to clear the list before loading the 
IDs from the set object.
Input:
INT4 entityTypeThe type of entities to be remo ved from the Draw/Erase lists. For 
entity information, see page 176.
INT4 nSetIDID of the set filled with entity IDs to load into the Draw/Erase Tool-
bar
BOOL bAddToSelectionWhen True, adds entity IDs from set to the “Erase” list. When False, 
adds entity IDs from the set to the “Draw” list.
BOOL bClearWhen True, clears the “Erase” list or  “Draw” list before adding the 
entity IDs from the set. When Fals e, adds the entity IDs to the 
“Erase” list or “Draw” list.
BOOL bRedrawWhen True, a Window, Redraw command will be do ne. When False, 
it will not be done.
Output:NoneReturn Code:
Remarks/Usage:Example:
None
 API-1628  
4.13.2.10  GetErased
GetErased
( entityType )
Description:This method creates and returns a Se t object that contains the IDs of all entities of a specified type that 
are currently selected by  the Draw/Erase Toolbar
Input:
INT4 entityTypeThe type of entities to be remo ved from the Draw/Erase lists. For 
entity information, see page 176.
Output:NoneReturn Code:NoneRemarks/Usage:The Set object is returned in  place of the return code.
Example:
Sub Main
    Dim App As femap.model
    Set App = feFemap()
    Dim de As femap.DrawErase    Set de = App.feDrawErase
    Dim eset As femap.Set
    Set eset = de.GetErased(FT_ELEM)End Sub
   API-1629
4.14  User Defined Graphics Objects
The User Defined Graphics object is used to crea te graphics data in the Femap graphics windows. 
You can create any number of User Defined Gr aphics objects and each can contain multiple col-
lectors of graphics entities such as: points, lines, triangles, text, bitmaps an d symbols. All graphics 
entities can be defined in terms of points in global space. A su bset (points, bitmaps, text and sym-
bols) can be defined in terms of locations on Femap entities (FT_POINT, FT_CURVE, FT_SUR-
FACE, FT_NODE and FT_ELEMENT). Trying to add the wrong type of graphical entity to a 
collector will be ignored.
Graphics entities in a User Defined Graphics object  will not be visible until the Publish method is 
called. If any graphical entities are added after ca lling the Publish method, a ll entities in the User 
Defined Graphics object will not be visible un til the Publish method is called again. When you 
have finished with a collector of graphics data, a bitmap or a symbol, you do not delete them but 
mark them for deletion. This is  to prevent the User Defined Gr aphics object changing/deleting 
graphics data while a draw is in progress.
Use the feUserDefinedGraphics method of the FEMAP  Application object to create User Defined 
Graphics objects. When the User Defined Graphics  object is destroyed or goes out of scope, the 
graphics associated will be deleted. No graphics are retained in the database using this object. 
Graphics data can survive the destruction of the User Defined Graphics object by using the 
Detach/Attach capability. When gr aphics data are detached from a User Defined Graphics object, 
using the Detach function,  they will survive and be drawn as is  until the model is closed and then 
they will be destroyed. Detached graphics ca n be reattached using the Attach function.
 API-1630  SetView
4.14.1  User Defined Gr aphics Object Methods
4.14.1.1  SetView
SetView
( iViewID )
Description:This function controls which windows the graphics in the User Defined Graphics object are drawn.
Input:
INT4 iViewIDSpecifies the ID of the view(s). 0=all views, -1=determines active 
view and sets that view, “n”>0 is the ID of an existing view
Output:NoneReturn Code:FE_FAIL Unable find specified viewRemarks/Usage:If iViewID is set to 0, then the graphics are drawn in  all windows of the active Model. If iViewID is set 
to -1, the active view ID is used. If iViewID is set to “n”, then the graphics are drawn in the window that 
is using view “n”. If an invalid iViewID is specifi ed, the graphics will not be drawn in any window. If 
you change the active view, the graphics will NOT move to the new active view.
Example:None
GetView   API-1631
4.14.1.2  GetView
GetView
( iViewID )
Description:This function is used to query the view ID of the User Defined Graphics object.
Input:NoneOutput:INT4 iViewID ID of viewReturn Code:FE_FAIL ID of view could not be retrievedRemarks/Usage:If you set the active view ID by calling SetView(-1), this function will not prov ide -1 but will provide 
the ID of the active view ID when the SetView(-1) was called.
Example:None
 API-1632  SetName
4.14.1.3  SetName
SetName
( pName )
Description:This function provides the User Defined Graphics object with a name. This is not currently imple-
mented.
Input:STRING pName Name of User Defined Graphics ObjectOutput:NoneReturn Code:FE_FAIL Name could not be foundRemarks/Usage:NoneExample:None
Publish   API-1633
4.14.1.4  Publish
Publish
( void )
Description:This function publishes the User Defined Graphics ob ject graphics data and makes it available to the 
graphics system
Input:NoneOutput:NoneReturn Code:FE_FAIL User Defined Graphics could not be publishedRemarks/Usage:Graphics entities in a User Defined Graphics object  will not be visible until the Publish method is 
called. If any graphical entities are added after ca lling the Publish method, a ll entities in the User 
Defined Graphics object will not be visi ble until the Publish method is called again.
Example:None
 API-1634  Blank
4.14.1.5  Blank
Blank
( qBlanked )
Description:This function blanks the User Defined Graphics ob ject so it will not be drawn until it is un-blanked
Input:
BOOL qBlankedIf True, the User Defined Graphics object is blanked. If False, the 
User Defined Graphics object is un-blanked.
Output:NoneReturn Code:FE_OK Object is initializedRemarks/Usage:There is also a CollectorBlank method for individu al collectors of graphics entities inside the User 
Defined Graphics object
Example:None
CollectorPoints   API-1635
4.14.1.6  CollectorPoints
CollectorPoints
( pName, nAppearances, fDepthOffset, iCollectorID )
Description:This function creates a Point collector. Points can be added based on location in global space or relative 
to Femap entities such as FT_POINT, FT_ CURVE, FT_SURFACE, FT_NODE and FT_ELEM.
Input:STRING pName Name of collector - currently not used
INT4 nAppearancesNumber of appearances that will be  added to this collector (see Col-
lectorAppearance)
REAL8 fDepthOffset Depth offset - currently not used (set to 0.0)
Output:
INT4 iCollectorID The ID of the collector created
Return Code:FE_FAIL Call was unsuccessfulRemarks/Usage:Point entities added us ing the functions:
CollectorAddPointLocations
CollectorAddPointEntityLocationsCollectorAddPoint EntityFaceLocations
Example:None
 API-1636  CollectorBitmap
4.14.1.7  CollectorBitmap
CollectorBitmap
( pName, nAppearances, iBitmapID, fXoffset, fYOffset, fDepthOffset, iCollectorID )
Description:This function creates a Bitmap collector. Bitmap lo cations (points) can be added based on location in 
global space or relative to Femap entities such  as FT_POINT, FT_CURVE, FT_SURFACE, FT_NODE 
and FT_ELEM.
Input:STRING pName Name of collector - currently not used
INT4 nAppearancesNumber of appearances that will be  added to this collector (see Col-
lectorAppearance)
INT4 iBimtapID ID of bitmap  to use (see BitmapCreate)
REAL8 fXOffset X offset of location compared to bottom left of bitmap
REAL8 fYOffset Y offset of location compared to bottom left of bitmap
REAL8 fDepthOffset Depth offset - currently not used (set to 0.0)
Output:INT4 iCollectorID The ID of the collector created
Return Code:FE_OKRemarks/Usage:A bitmap must be created using the following method:
BitmapCreate
Bitmap location entitie s added using the following methods:
CollectorAddPointLocationsCollectorAddPointEntityLocations
CollectorAddPoint EntityFaceLocations
Example:None
CollectorSymbol   API-1637
4.14.1.8  CollectorSymbol
CollectorSymbol
( pName, nAppearances, iSymbolID, qScreenScal e, fScale, fDepthOffset, iCollectorID )
Description:This function creates a Symbol co llector. Symbol locations (points) can be added based on location in 
global space or relative to Femap entities such  as FT_POINT, FT_CURVE, FT_SURFACE, FT_NODE 
and FT_ELEM.
Input:STRING pName Name of collector - currently not used
INT4 nAppearancesNumber of appearances that will be  added to this collector (see Col-
lectorAppearance)
INT4 iSymbolID ID of symbol to use (see SymbolCreate)
BOOL qScreenScaleIf True, fScale is a percentage of screen size, If False, fScale is a 
multiplying factor
REAL8 fScale Scale factor for symbolsREAL8 fDepthOffset Depth offset - currently not used (set to 0.0)
Output:INT4 iCollectorID The ID of the collector created
Return Code:FE_FAIL Call was unsuccessfulRemarks/Usage:A symbol must be created using the following method:
SymbolCreate
Symbol entities added usin g the following methods:
CollectorAddSymbolLocations
CollectorAddSymbolEntityLocations
CollectorAddSymbol EntityFaceLocations
CollectorAddSymbolEntityFaceNormalLocations
All symbols in the collector will be scaled by the same amount
Example:None
 API-1638  CollectorSymbolREAL8
4.14.1.9  CollectorSymbolREAL8
CollectorSymbolREAL8
( pName, nAppearances, iSymbolID, qScreenSc ale, fMaxScale, fMinScale, fXOffset, 
fYOffset, fZOffset, fDepthOffset, pFormat, iCollectorID)
Description:This function creates a Symbol collector that h as a REAL8 value associated with each symbol entity. 
Symbol locations (points) can be added based on lo cation in global space or relative to Femap entities 
such as FT_POINT, FT_CURVE, FT_SURFACE, FT_NODE and FT_ELEM. The associated REAL8 
value can be displayed on each instance of the symbol and can also be used to scale the size of the sym-
bol entities.
Input:STRING pName Name of collector - currently not used
INT4 nAppearancesNumber of appearances that will be  added to this collector (see Col-
lectorAppearance)
INT4 iSymbolID ID of symbol to use (see SymbolCreate)
BOOL qScreenScaleIf True, fMaxScale and fMinScale are percentages of screen size. If 
False, MaxScale and fMinScale are multiplying factors
REAL8 fMaxScale Scale factor of largest associated REAL8 value
REAL8 fMinScale Scale factor of sm allest associated REAL8 value
REAL8 fXOffset X offset of REAL8 valueREAL8 fYOffset Y offset of REAL8 valueREAL8 fZOffset Z offset of REAL8 value (set to 0.0)REAL8 fDepthOffset Depth offset - currently not used (set to 0.0)
STRING pFormat C/C++ format string (shou ld contain a "%g" or equivalent)
Output:INT4 iCollectorID The ID of the collector created
Return Code:FE_FAIL Call was unsuccessfulRemarks/Usage:
CollectorSymbolREAL8   API-1639
A symbol must be created using the following method:
SymbolCreate
Symbol with REAL8 text entities added using the following methods:
CollectorAddSymbolREAL8Locations
CollectorAddSymbolREAL8EntityLocations
CollectorAddSymbolREAL8EntityFaceLocationsCollectorAddSymbolREAL8EntityFaceNormalLocations
Individual symbols scaled by associated REAL8 value.  If you want all symbols the same size, set fMin-
Scale equal to fMaxScale.
The fXOffset and fYOffset are percentages of width and height of the final text string. Values of 0.0 and 
0.0 will place the text's center at the specified lo cation. Values of -50.0 and -50.0 will place the bottom 
left corner of the text at the specified location.
Example:
NoneCollectorSymbolREAL8
( pName, nAppearances, iSymbolID, qScreenSc ale, fMaxScale, fMinScale, fXOffset, 
fYOffset, fZOffset, fDepthOffset, pFormat, iCollectorID)
 API-1640  CollectorText
4.14.1.10  CollectorText
CollectorText
( pName, nAppearances, fXOffset, fYOffset, fZOffset, iCollectorID )
Description:This function create a Text collector. Text locations  (points) can be added based on location in global 
space or relative to Femap entities such as FT_POINT, FT_CURVE, FT_SURFACE, FT_NODE and 
FT_ELEM.
Input:STRING pName Name of collector - currently not used
INT4 nAppearancesNumber of appearances that will be  added to this collector (see Col-
lectorAppearance)
REAL8 fXOffset X offset of Text locationREAL8 fYOffset Y offset of Text locationREAL8 fZOffset Z offset of Text location (set to 0.0)Output:INT4 iCollectorID The ID of the collector created
Return Code:FE_FAIL Call was unsuccessfulRemarks/Usage:Bitmap location entitie s added using the following methods:
CollectorAddTextLocationsCollectorAddTextEntityLocations
CollectorAddTextE ntityFaceLocations
The fXOffset and fYOffset are percentages of width and height of the final text string. Values of 0.0 and 
0.0 will place the text's center at the specified lo cation. Values of -50.0 and -50.0 will place the bottom 
left corner of the text at the specified location.
Example:None
CollectorTextINT4   API-1641
4.14.1.11  CollectorTextINT4
CollectorTextINT4
( pName, nAppearances, fXOffset, fYOffset, fZOffset, pFormat, iCollectorID )
Description:This function create a TextINT4 collector. Text loca tions (points) can be added based on location in 
global space or relative to Femap entities such  as FT_POINT, FT_CURVE, FT_SURFACE, FT_NODE 
and FT_ELEM. This collector is more efficient memory  wise that a Text Collector if all you want to 
write is an INT4 value or an INT4 value with  some text that is the same for all INT4s.
Input:STRING pName Name of collector - currently not used
INT4 nAppearancesNumber of appearances that will be  added to this collector (see Col-
lectorAppearance)
REAL8 fXOffset X offset of Text locationREAL8 fYOffset Y offset of Text locationREAL8 fZOffset Z offset of Text location (set to 0.0)STRING pFormat C/C++ format string (shou ld contain a "%d" or equivalent)
Output:INT4 iCollectorID The ID of the collector created
Return Code:FE_FAIL Call was unsuccessfulRemarks/Usage:INT4 text entities added using the following methods:
CollectorAddTextINT4Locations
CollectorAddTextINT4EntityLocations
CollectorAddTextINT4EntityFaceLocations
The fXOffset and fYOffset are percentages of width and height of the final text string. Values of 0.0 and 
0.0 will place the text's center at the specified lo cation. Values of -50.0 and -50.0 will place the bottom 
left corner of the text at the specified location.
Example:None
 API-1642  CollectorTextREAL8
4.14.1.12  CollectorTextREAL8
CollectorTextREAL8
( pName, nAppearances, fXOffset, fYOffset, fZOffset, pFormat, iCollectorID )
Description:This function create a TextREAL8 collector. Text loca tions (points) can be added based on location in 
global space or relative to Femap entities such  as FT_POINT, FT_CURVE, FT_SURFACE, FT_NODE 
and FT_ELEM. This collector is more efficient memory  wise that a Text Collector if all you want to 
write is a REAL8 value or a REAL8 value with some text that is the same for all REAL8s.
Input:STRING pName Name of collector - currently not used
INT4 nAppearancesNumber of appearances that will be  added to this collector (see Col-
lectorAppearance)
REAL8 fXOffset X offset of Text locationREAL8 fYOffset Y offset of Text locationREAL8 fZOffset Z offset of Text location (set to 0.0)STRING pFormat C/C++ format string (shou ld contain a "%g" or equivalent)
Output:INT4 iCollectorID The ID of the collector created
Return Code:FE_FAIL Call was unsuccessfulRemarks/Usage:REAL8 text entities added using the following methods:
CollectorAddTextREAL8Locations
CollectorAddTextREA L8EntityLocations
CollectorAddTextREAL8EntityFaceLocations
The fXOffset and fYOffset are percentages of width and height of the final text string. Values of 0.0 and 
0.0 will place the text's center at the specified lo cation. Values of -50.0 and -50.0 will place the bottom 
left corner of the text at the specified location.
Example:None
CollectorLines   API-1643
4.14.1.13  CollectorLines
CollectorLines
( pName, nAppearances, fDepthOffset, iCollectorID )
Description:This function create a Line collector.Input:STRING pName Name of collector - currently not used
INT4 nAppearancesNumber of appearances that will be  added to this collector (see Col-
lectorAppearance)
REAL8 fDepthOffset Depth offset - currently not used (set to 0.0)
Output:INT4 iCollectorID The ID of the collector created
Return Code:FE_FAIL Call was unsuccessfulRemarks/Usage:Line entities added using the following methods:
CollectorAddLineLocations
CollectorAddPolyLineLocations
CollectorAddMeshLineLocations
Example:None
 API-1644  CollectorTriangles
4.14.1.14  CollectorTriangles
CollectorTriangles
( pName, nAppearances, fDepthOffset, iCollectorID )
Description:This function create a Triangle collectorInput:STRING pName Name of collector - currently not used
INT4 nAppearancesNumber of appearances that will be  added to this collector (see Col-
lectorAppearance)
REAL8 fDepthOffset Depth offset - currently not used (set to 0.0)
Output:INT4 iCollectorID The ID of the collector created
Return Code:FE_FAIL Call was unsuccessfulRemarks/Usage:Triangle entities added usin g the following methods:
CollectorAddTriangleLocations
CollectorAddMeshTriangleLocations
CollectorAddMeshTriangleNormalLocations
Example:None
CollectorBlank   API-1645
4.14.1.15  CollectorBlank
CollectorBlank
( iCollectorID, qBlanked )
Description:This function blanks the specif ied collector so it will not be drawn until it is un-blanked.
Input:INT4 iCollectorID ID of collector to blank/unblank
BOOL qBlankedIf True, the specified collector is bl anked. If False, the specified col-
lector is un-blanked.
Output:NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:There is also a Blank method for the complete User Defined Graphics objectExample:None
 API-1646  CollectorSingleSymbol
4.14.1.16  CollectorSingleSymbol
CollectorSingleSymbol
( iCollectorID, qSingle )
Description:This function controls whether a single symbol or  multiple symbols are drawn on a curve or surface 
entity
Input:INT4 iCollectorID ID of collector to controlBOOL qSingle If True, draw a single sy mbol. If False, draw  multiple symbols
Output:NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:By default, entities of type FT_ CURVE and FT_SURFACE will draw mu ltiple symbols on the curve or 
surface. This function enables a single symbol to be drawn at the centroid of the entity.
Example:None
CollectorLabels   API-1647
4.14.1.17  CollectorLabels
CollectorLabels
( iCollectorID, qLabels )
Description:This function controls whether labe ls are drawn for a collector. Curren tly this only applies to Symbol-
REAL8 collectors.
Input:INT4 iCollectorID ID of collector to label or no labelBOOL qLabels If True, labels are drawn. If False, labels are not drawn.Output:NoneReturn Code:FE_FAIL The selected cell does not have a valueRemarks/Usage:
Example:
None
 API-1648  CollectorMarkForDeletion
4.14.1.18  CollectorMarkForDeletion
CollectorMarkForDeletion
( iCollectorID )
Description:This function marks the specified colle ctor for deletion. It will be no longer accessible from the API and 
will be deleted during the next draw.
Input:INT4 iCollectorID ID of collector to mark for deletionOutput:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
CollectorAppearance   API-1649
4.14.1.19  CollectorAppearance
CollectorAppearance
( iCollectorID, iAppearancID, fColor1, fColor2, fLineWidth, iLineStyle, iFillPattern, 
qLighting, iCullMode, iFont, fPointSize )
Description:This function adds an appearance to a collectorInput:INT4 iCollectorID ID of collector to add appearanceINT4 iAppearanceID ID of appearance (A ppearance ID's are numbered 0..n-1)
REAL8 fColor1[0..3] Red, Green, Blue and Alpha values of Color 1REAL8 fColor2[0..3] Red, Green, Blue and Alpha values of Color 2REAL8 fLineWidth Width of lines to be drawn in pixels
INT4 iLineStyleStyle of Line to be drawn. 0 = Solid Line; 1 = Long Dash; 2 = Short 
dash; 3 = Medium dash, Short dash; 4 = Medium dash, Short dash, 
Short dash
INT4 iFillPatternStyle of Fill Pattern. 0 = Solid, 1 = Horizontal Line, 2 = Vertical 
Line, 3 = Diagonal Lines Top Left to Bottom Right, 4 = Diagonal Lines Bottom Left to Top Right,  5 = Check, 6= Diagonal Check
BOOL qLighting If True, filled faces can  be processed with  lighting/shading
INT4 iCullModeCull Mode. 0 = No Face Culling, 1 = Cull Back Face, 2 = Cull Front 
Face
INT4 iFontText font (see Label Font in View Options dialog). Greater than 
1000, will use the font specified in  View Options, Label Parameters. 
Greater than or equal to 0 and less than or equal to 76, will use iFont 
(see View, Options command, La bel Parameters option for list).
For version FEMAP 2019.1 and above,  it will likely be better to use 
CollectorAppearanceSetFontData, ot herwise, you are limited to the 
fonts available in earlier versions of FEMAP.
REAL8 fPointSize Size that points are drawn in pixelsOutput:NoneReturn Code:FE_FAIL Call was unsuccessful
 API-1650  CollectorAppearance
Remarks/Usage:
The second color is used when the line style or fill pattern are not 0 and fColor2 is different from fCol-
or1. The second color is also used as the background  color for text if that option is selected in View 
Options and fColor2 is different from fColor1.
Example:NoneCollectorAppearance
( iCollectorID, iAppearancID, fColor1, fColor2, fLineWidth, iLineStyle, iFillPattern, 
qLighting, iCullMode, iFont, fPointSize )
CollectorAppearanceSetFontData   API-1651
4.14.1.20  CollectorA ppearanceSetFontData
CollectorAppearanceSetFontData
( iCollectorID, iAppearancID, iPointHeight, bBold, bItalic, pcName )
Description:This function defines the font for an existing CollectorAppearance
Input:INT4 iCollectorID ID of collector to add appearance
INT4 iAppearanceIDID of existing CollectorAppearance (Appearance ID's are numbered 
0..n-1)
INT4 iPointHeightSize in “point height” (for example, “8  pt”, “9 pt”, “10 pt”, etc) for 
font requested from Windows via pcName
BOOL bBoldIf True, attempts to use Bold  version of font requested from Win-
dows via pcName
BOOL bItalicIf True, attempts to use Italic  version of font requested from Win-
dows via pcName
STRING pcName Name of font  to request from Windows
Output:NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:If requested font with desired optio ns is not available from Windows on a certain operating system or 
machine, will use a font as close as possible which is available from Windows on the operating system/
machine.
Example:None
 API-1652  CollectorAddPointLocations
4.14.1.21  CollectorAddPointLocations
CollectorAddPointLocations
( iCollectorID, iAppearanceID, nPoints, pfPoints )
Description:This functions adds point locations in global space  to a Point collector or to a Bitmap collector.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesINT4 nPoints Number of pointsREAL8 pfPoints
[0..(3*npoints)-1]Coordinates of points
Output:
NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:A point (or bitmap) will be drawn at each locatio n specified using the specified appearance. If the 
appearance ID is too large, it is wrapped: if there are 5 appearances and the iAppearanceID is set to 8 
then appearance 3 will be used.
Example:None
CollectorAddPointEntityLocations   API-1653
4.14.1.22  CollectorAddPointEntityLocations
CollectorAddPointEntityLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs )
Description:This function adds points specif ied by existing Femap entities to a Point collector or  Bitmap collector
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_POINT, FT_ CURVE, FT_SURFACE, FT_NODE, FT_ELEM
INT4 nIDs Number of entity IDsINT4 piIDs[0..(nIDs-1)] List of entity IDsOutput:NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:IF FT_CURVE or FT_SURFACE is used, multiple points are created at the locations used for geometry 
based loading. If FT_ELEM is used, a point is created at the centroid of the element (currently only 
shells and solids)
Example:None
 API-1654  CollectorAddPointEntityFaceLocations
4.14.1.23  CollectorAddPointEntityFaceLocations
CollectorAddPointEntityFaceLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piFaceIDs )
Description:This function adds points specified by a particular face of existing Femap entities to a Point collector or 
Bitmap collector
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_ELEMINT4 nIDs Number of entity IDsINT4 piIDs[0..(nIDs-1)] List of entity IDsINT4 piFaceIDs[0..(nIDs-1)] Face ID of entityOutput:NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:A point is created at the centroid of the specified face of the specified element (currently only shells and 
solids)
Example:None
CollectorAddSymbolLocations   API-1655
4.14.1.24  CollectorAddSymbolLocations
CollectorAddSymbolLocations
( iCollectorID, iAppearanceID, nSymbols, pfPoints, pfDirections, pfOrthogonals )
Description:This functions adds symbol loca tions and orientations in global space to a Symbol collector.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesINT4 nSymbols Number of symbols to drawREAL8 pfPoints
[0..(3*nsymbols)-1]Locations to draw symbols
REAL8 pfDirections 
[0..(3*nsymbols)-1]Direction of symbol at each location
REAL8 pfOrthogonals
[0..(3*nsymbols)-1]Orthogonal direction of symbol at each location
Output:
NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:If qScreenOrient = True in the previous call to Sy mbolCreate, the values of pfOrthogonals are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
Example:None
 API-1656  CollectorAddSymbo lEntityLocations
4.14.1.25  CollectorA ddSymbolEntityLocations
CollectorAddSymbolEntityLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, pfDirections, pfOrthogonals )
Description:This functions adds symbol locatio ns specified by existing Femap en tities to a Symbol collector. Direc-
tion and orthogonal direction ar e provided for each location
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_POINT, FT_ CURVE, FT_SURFACE, FT_NODE, FT_ELEM
INT4 nIDs Number of entity IDsINT4 piIDs
[0..nIDs-1]List of entity IDs
REAL8 pfDirections 
[0..(3*nIDs)-1]Direction of symbol at each location
REAL8 pfOrthogonals
[0..(3*nIDs)-1]Orthogonal direction of symbol at each location
Output:
NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:If qScreenOrient = True in the previous call to Sy mbolCreate, the values of pfOrthogonals are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
Example:None
CollectorAddSymbolEntityFaceLocations   API-1657
4.14.1.26  CollectorAddSymbolEntityFaceLocations
CollectorAddSymbolEntityFaceLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piFaceIDs, pfDirections, pfOrthogo-
nals )
Description:This functions adds symbol locatio ns specified by particular faces of existing Femap entities to a Sym-
bol collector. Direction and orthogonal di rection are provided for each location
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_SURFACE, FT_ELEMINT4 nIDs Number of entity IDs
INT4 piIDs[0..nIDs-1] List of entity IDs
INT4 piFaceIDs[0..nIDs-1] Face ID of entityREAL8 pfDirections 
[0..(3*nIDs)-1]Direction of symbol at each location
REAL8 pfOrthogonals
[0..(3*nIDs)-1]Orthogonal direction of symbol at each location
Output:
NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:If qScreenOrient = True in the previous call to Sy mbolCreate, the values of pfOrthogonals are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
Example:None
 API-1658  CollectorAddSymbolEntityFaceNormalLocations
4.14.1.27  CollectorAddSymbol EntityFaceNormalLocations
CollectorAddSymbolEntityFaceNormalLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piFaceIDs, pfOrthogonals )
Description:This functions adds symbol locatio ns specified by particular faces of existing Femap entities to a Sym-
bol collector. The direction is the normal to the particular face of the ex isting Femap entities. The 
orthogonal direction is provided for each location
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_CURVE, FT_SURFACE, FT_ELEMINT4 nIDs Number of entity IDs
INT4 piIDs[0..nIDs-1] List of entity IDs
INT4 piFaceIDs[0..nIDs-1] Face ID of entityREAL8 pfOrthogonals
[0..(3*nIDs)-1]Orthogonal direction of symbol at each location
Output:
NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:The face ID is ignored by the FT_ CURVE entities but the tangential dire ction on the curve is used to 
align the symbols
If qScreenOrient = True in the previous call to Sy mbolCreate, the values of pfOrthogonals are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
Example:None
CollectorAddSymbolEntityFaceNormalAutoLocations   API-1659
4.14.1.28  CollectorAddSymbol EntityFaceNormalAutoLocations
CollectorAddSymbolEntity FaceNormalAutoLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piFaceIDs, piOrientOption, pdOrien-
tAngle )
Description:This functions adds symbol locatio ns specified by particular faces of existing Femap entities to a Sym-
bol collector. The direction is the normal to the particular face of the ex isting Femap entities. The 
orthogonal direction is controlled by an orienta tion option, piOrientOption (and orientation angle for 
FT_SURFACE)
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_CURVE, FT_SURFACE, FT_ELEMINT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsINT4 piFaceIDs[0..nIDs-1] Face ID of entity
INT4 piOrientOption[0..nIDs-1]Orientation option to determine or thogonal direction of symbol 
at each location. See Remarks sec tion to see the various options 
available for each entity type
REAL8 pdOrientAngle [0..nIDs-1]Rotate orthogonal direction of symbols about normal (FT_SUR-
FACE)
Output:NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:The face ID is ignored by the FT_ CURVE entities but the tangential dire ction on the curve is used to 
align the symbols.
If qScreenOrient = True in the previous call to Sy mbolCreate, the values of piOrientOption are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
For eType = FT_CURVE – Symbol direc tion is local tangent to the curve
iOrientOption = 0, orthogonal direction as close to global X axis as possible
iOrientOption = 1, orthogonal direction as close to global Y axis as possible
iOrientOption = 2, orthogonal direction as close to global Z axis as possible
 API-1660  CollectorAddSymbolEntityFaceNormalAutoLocations
For eType = FT_SURFACE – Symbol direction is norm al to the surface for Face ID=1, negative normal 
for Face ID=2
iOrientOption = 0, orthogonal direction as close to global X axis as possible
iOrientOption = 1, orthogonal direction as close to global Y axis as possible
iOrientOption = 2, orthogonal direction as close to global Z axis as possible
iOrientOption = 3, orthogonal directio n as close to local surface s direction
iOrientOption = 4, orthogonal directio n as close to local surface t direction
For eType = FT_ELEM (Point1)
iOrientOption = MN, Symbol direction in global di rection M (0=X, 1=Y , 2=Z), Orthogonal in global 
direction N
For eType = FT_ELEM (Line2, Line3) – Symbol direction is along the line element from Node 1 to 
Node 2
iOrientOption = 0, orthogonal direction as close to global X axis as possible
iOrientOption = 1, orthogonal direction as close to global Y axis as possible
iOrientOption = 2, orthogonal direction as close to global Z axis as possible
For eType = FT_ELEM (Tria3/6, Quad4/8) – Symbol Direction is normal to Face ID
For Face ID=1 or 2 (Face ID=0 is same as Face ID=1)iOrientOption = 1, orthogonal direction is edge 1
iOrientOption = 2, orthogonal direction is edge 2
iOrientOption = 3, orthogonal direction is edge 3iOrientOption = 4, orthogonal di rection is edge 4 (Quad4, Quad8)
iOrientOption = 11, orthogonal direction is vertex 1 to edge 2 (Tria3, Tria6)
iOrientOption = 12, orthogonal direction is vertex 2 to edge 3 (Tria3, Tria6)
iOrientOption = 13, orthogonal direction is vertex 3 to edge 1 (Tria3, Tria6)
iOrientOption = 11, orthogonal direction is vertex 1 to vertex 3 (Quad4, Quad8)
iOrientOption = 12, orthogonal direction is vertex 2 to vertex 4 (Quad4, Quad8)
iOrientOption = 13, orthogonal direction is edge 1 to edge 3 (Quad4, Quad8)
iOrientOption = 14, orthogonal direction is edge 2 to edge 4 (Quad4, Quad8)
iOrientOption = 15, orthogonal direction is diagonal angle bisector (Quad4, Quad8)
For Face ID=3, 4, 5 or 6, orthogonal direction is along the corresponding edge
For eType = FT_ELEM (Tetra4/10, Wedge6/15, Pyramid5/13, Brick8/20) – Symbol Direction is nor-
mal to Face ID and for each face of element,  iOrientOption is as for Tria3/6 and Quad4/8
Example:NoneCollectorAddSymbolEntity FaceNormalAutoLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piFaceIDs, piOrientOption, pdOrien-
tAngle )
CollectorAddSymbolEntityEdgeLocations   API-1661
4.14.1.29  CollectorAddS ymbolEntityEdgeLocations
CollectorAddSymbolEntityEdgeLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piEdgeIDs, pfDirections, pfOrthogo-
nals )
Description:This functions adds symbol locatio ns specified by particular edges of existing Femap entities to a Sym-
bol collector. The direction and the orthogonal direc tion is provided for each location. This currently 
only applies to FT_ELEM.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_ELEMINT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsINT4 piEdgeIDs[0..nID s-1] Edge ID of entity
REAL8 pfDirections [0..(3*nIDs)-1] Direction of symbol at each locationREAL8 pfOrthogonals[0..(3*nIDs)-1] Orthogonal direction of symbol at each locationOutput:NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:This function is only valid for FT_ ELEM. The Edge ID is based on th e numbering of the midside nodes 
of the parabolic versions of the elements.
If qScreenOrient = True in the previous call to Sy mbolCreate, the values of pfOrthogonals are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
Example:None
 API-1662  CollectorAddSymbolEntityEdgeAutoLocations
4.14.1.30  CollectorAddSym bolEntityEdgeAutoLocations
CollectorAddSymbolEntityEdgeAutoLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piEdgeIDs, piOrientOption )
Description:This functions adds symbol locatio ns specified by particular edges of existing Femap entities to a Sym-
bol collector. The direction and the orthogonal direc tion is provided for each location. This currently 
only applies to FT_ELEM. The direc tion and the orthog onal directions are specified using an orienta-
tion option, piOrientOption
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_ELEMINT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsINT4 piEdgeIDs[0..nIDs-1] Edge ID of entity
INT4 piOrientOption[0..nIDs-1]Orientation option to determine or thogonal direction of symbol 
at each location. See Remarks sec tion to see the various options 
available for each entity type
Output:NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:This function is only valid for FT_ ELEM. The Edge ID is based on th e numbering of the midside nodes 
of the parabolic versions of the elements.
If qScreenOrient = True in the previous call to Sy mbolCreate, the values of piOrientOption are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
For eType = FT_ELEM (Point1)
iOrientOption = MN, Symbol direction in global di rection M (0=X, 1=Y , 2=Z), Orthogonal in global 
direction N
CollectorAddSymbolEntityEdgeAutoLocations   API-1663
For eType = FT_ELEM (Line2, Line3) – Symbol direction is along the line element from Node 1 to 
Node 2iOrientOption = 0, orthogonal direction as close to global X axis as possible
iOrientOption = 1, orthogonal direction as close to global Y axis as possible
iOrientOption = 2, orthogonal direction as close to global Z axis as possible
For eType = FT_ELEM (Tria3/6, Quad4/8)
iOrientOption = MN, Symbol direction is controlled by  M and orthogonal direction is controlled by N
M = 1, symbol direction is face normal
M = 2, symbol direction is reverse face normal
M = 3, symbol direction is edge directionM = 4, symbol direction is reverse edge direction
M = 5, symbol direction is edge normal
M = 6, symbol direction is reverse edge normalN = 1, orthogonal direction is face normal
N = 2, orthogonal direction is reverse face normal
N = 3, orthogonal direction is edge directionN = 4, orthogonal direction is reverse edge directionN = 5, orthogonal direction is edge normal
N = 6, orthogonal direction is reverse edge normal
For eType = FT_ELEM (Tetra4/10, Wedge6/15, Pyramid5/13, Brick8/20)
iOrientOption = LMN, Symbol  direction is controlled by M and orthogonal direction is controlled by N
L = 0, face normal is average of two faces adjacent to specified edgeL = 1, face normal is normal of face to the left of specified edge
L = 2, face normal is normal of face to the right of specified edge
M and N are the same as for Tria3/6, Quad4/8
Example:NoneCollectorAddSymbolEntityEdgeAutoLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piEdgeIDs, piOrientOption )
 API-1664  CollectorAddSymbolREAL8Locations
4.14.1.31  CollectorAddSymbolREAL8Locations
CollectorAddSymbolREAL8Locations
( iCollectorID, iSymbolAppearanceID, iLabelAppearanceID, nSymbols, pfPoints, pfDi-
rections, pfOrthogonals, pfValues )
Description:This functions adds symbol loca tions and orientations in global space to a Symbol collector.
Input:INT4 iCollectorID ID of collector to add dataINT4 iSymbolAppearanceID A ppearance ID for symbol
INT4 iLabelAppearanceID Appearance ID for REAL8 value textINT4 nSymbols Number of symbols to drawREAL8 pfPoints
[0..(3*nsymbols)-1]Locations to draw symbols
REAL8 pfDirections 
[0..(3*nsymbols)-1]Direction of symbol at each location
REAL8 pfOrthogonals
[0..(3*nsymbols)-1]Orthogonal direction of symbol at each location
REAL8 pfValues
[0..nsymbols-1]Value for each symbol location
Output:
NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:If qScreenOrient = True in the previous call to Sy mbolCreate, the values of pfOrthogonals are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
Example:None
CollectorAddSymbolREAL8EntityLocations   API-1665
4.14.1.32  CollectorAddSym bolREAL8EntityLocations
CollectorAddSymbolREAL8EntityLocations
( iCollectorID, iSymbolAppearanceID, iLabelAppearanceID, eType, nIDs, piIDs, pfDirec-
tions, pfOrthogonals, pfValues )
Description:This functions adds symbol locatio ns specified by existing Femap en tities to a Symbol collector. Direc-
tion and orthogonal direction are provided for each  location. A REAL8 value is provided for each sym-
bol location.
Input:INT4 iCollectorID ID of collector to add dataINT4 iSymbolAppearanceID A ppearance ID for symbol
INT4 iLabelAppearanceID Appearance ID for REAL8 value textenum zDataType eType FT_POINT, FT_ CURVE, FT_SURFACE, FT_NODE, FT_ELEM
INT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsREAL8 pfDirections 
[0..(3*nsymbols)-1]Direction of symbol at each location
REAL8 pfOrthogonals
[0..(3*nsymbols)-1]Orthogonal direction of symbol at each location
REAL8 pfValues
[0..nsymbols-1]Value for each symbol location
Output:
NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:If qScreenOrient = True in the previous call to Sy mbolCreate, the values of pfOrthogonals are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
Example:None
 API-1666  CollectorAddSymbolREAL8EntityFaceLocations
4.14.1.33  CollectorAddSym bolREAL8EntityFaceLocations
CollectorAddSymbolRE AL8EntityFaceLocations
( iCollectorID, iSymbolAppearanceID, iLabelAppearanceID, eType, nIDs, piIDs, piFace-
IDs, pfDirections, pfOrthogonals, pfValues )
Description:This functions adds symbol locatio ns specified by particular faces of existing Femap entities to a Sym-
bol collector. Direction and orthogonal direction are provided for each location. A REAL8 value is pro-
vided for each symbol location.
Input:INT4 iCollectorID ID of collector to add dataINT4 iSymbolAppearanceID A ppearance ID for symbol
INT4 iLabelAppearanceID Appearance ID for REAL8 value textenum zDataType eType FT_ELEMINT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsINT4 piFaceIDs[0..nIDs-1] Face ID of entityREAL8 pfDirections 
[0..(3*nsymbols)-1]Direction of symbol at each location
REAL8 pfOrthogonals
[0..(3*nsymbols)-1]Orthogonal direction of symbol at each location
REAL8 pfValues
[0..nsymbols-1]Value for each symbol location
Output:
NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:If qScreenOrient = True in the previous call to Sy mbolCreate, the values of pfOrthogonals are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
Example:None
CollectorAddSymbolREAL8EntityFaceNormalLocations   API-1667
4.14.1.34  CollectorAddSymbolRE AL8EntityFaceNormalLocations
CollectorAddSymbolREAL8EntityFaceNormalLocations
( iCollectorID, iSymbolAppearanceID, iLabelAppearanceID, eType, nIDs, piIDs, piFace-
IDs, pfOrthogonals, pfValues )
Description:This functions adds symbol locatio ns specified by particular faces of existing Femap entities to a Sym-
bol collector. The direction is the normal to the particular face of the ex isting Femap entities. The 
orthogonal direction is provided for each location. A REAL8 value is provided for each symbol loca-
tion.
Input:INT4 iCollectorID ID of collector to add dataINT4 iSymbolAppearanceID A ppearance ID for symbol
INT4 iLabelAppearanceID Appearance ID for REAL8 value textenum zDataType eType FT_ELEMINT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsINT4 piFaceIDs[0..nIDs-1] Face ID of entityREAL8 pfOrthogonals
[0..(3*nsymbols)-1]Orthogonal direction of symbol at each location
REAL8 pfValues
[0..nsymbols-1]Value for each symbol location
Output:
NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:If qScreenOrient = True in the previous call to Sy mbolCreate, the values of pfOrthogonals are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
Example:None
 API-1668  CollectorAddSymbolREAL8EntityFaceNormalAutoLocations
4.14.1.35  CollectorAddSymbolREAL 8EntityFaceNormalAutoLocations
CollectorAddSymbolREAL8EntityFaceNormalAutoLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piFaceIDs, piOrientOption, pdOrien-
tAngle, pfValues )
Description:This functions adds symbol locatio ns specified by particular faces of existing Femap entities to a Sym-
bol collector. The direction is the normal to the particular face of the ex isting Femap entities. The 
orthogonal direction is controlled by an orienta tion option, piOrientOption (and orientation angle for 
FT_SURFACE). A REAL8 value is pr ovided for each symbol location.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_CURVE, FT_SURFACE, FT_ELEMINT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsINT4 piFaceIDs[0..nIDs-1] Face ID of entity
INT4 piOrientOption[0..nIDs-1]Orientation option to determine or thogonal direction of symbol 
at each location. See Remarks sec tion to see the various options 
available for each entity type
REAL8 pdOrientAngle [0..nIDs-1]Rotate orthogonal direction of symbols about normal (FT_SUR-
FACE)
REAL8 pfValues[0..nIDs-1] Valu e for each symbol location
Output:NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:The face ID is ignored by the FT_ CURVE entities but the tangential dire ction on the curve is used to 
align the symbols.
If qScreenOrient = True in the previous call to Sy mbolCreate, the values of piOrientOption are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
CollectorAddSymbolREAL8EntityFaceNormalAutoLocations   API-1669
For eType = FT_CURVE – Symbol direc tion is local tangent to the curve
iOrientOption = 0, orthogonal direction as close to global X axis as possible
iOrientOption = 1, orthogonal direction as close to global Y axis as possible
iOrientOption = 2, orthogonal direction as close to global Z axis as possible
For eType = FT_SURFACE – Symbol direction is norm al to the surface for Face ID=1, negative normal 
for Face ID=2iOrientOption = 0, orthogonal direction as close to global X axis as possible
iOrientOption = 1, orthogonal direction as close to global Y axis as possible
iOrientOption = 2, orthogonal direction as close to global Z axis as possible
iOrientOption = 3, orthogonal directio n as close to local surface s direction
iOrientOption = 4, orthogonal directio n as close to local surface t direction
For eType = FT_ELEM (Point1)
iOrientOption = MN, Symbol direction in global di rection M (0=X, 1=Y , 2=Z), Orthogonal in global 
direction N
For eType = FT_ELEM (Line2, Line3) – Symbol direction is along the line element from Node 1 to 
Node 2
iOrientOption = 0, orthogonal direction as close to global X axis as possible
iOrientOption = 1, orthogonal direction as close to global Y axis as possible
iOrientOption = 2, orthogonal direction as close to global Z axis as possible
For eType = FT_ELEM (Tria3/6, Quad4/8) – Symbol Direction is normal to Face ID
For Face ID=1 or 2 (Face ID=0 is same as Face ID=1)
iOrientOption = 1, orthogonal direction is edge 1iOrientOption = 2, orthogonal direction is edge 2
iOrientOption = 3, orthogonal direction is edge 3
iOrientOption = 4, orthogonal di rection is edge 4 (Quad4, Quad8)
iOrientOption = 11, orthogonal direction is vertex 1 to edge 2 (Tria3, Tria6)
iOrientOption = 12, orthogonal direction is vertex 2 to edge 3 (Tria3, Tria6)
iOrientOption = 13, orthogonal direction is vertex 3 to edge 1 (Tria3, Tria6)
iOrientOption = 11, orthogonal direction is vertex 1 to vertex 3 (Quad4, Quad8)
iOrientOption = 12, orthogonal direction is vertex 2 to vertex 4 (Quad4, Quad8)
iOrientOption = 13, orthogonal direction is edge 1 to edge 3 (Quad4, Quad8)iOrientOption = 14, orthogonal direction is edge 2 to edge 4 (Quad4, Quad8)
iOrientOption = 15, orthogonal direction is diagonal angle bisector (Quad4, Quad8)
For Face ID=3, 4, 5 or 6, orthogonal direction is along the corresponding edge
For eType = FT_ELEM (Tetra4/10, Wedge6/15, Pyramid5/13, Brick8/20) – Symbol Direction is nor-
mal to Face ID and for each face of element,  iOrientOption is as for Tria3/6 and Quad4/8
Example:NoneCollectorAddSymbolREAL8EntityFaceNormalAutoLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piFaceIDs, piOrientOption, pdOrien-
tAngle, pfValues )
 API-1670  CollectorAddSymbolREAL8EntityEdgeLocations
4.14.1.36  CollectorAddSymbol REAL8EntityEdgeLocations
CollectorAddSymbolRE AL8EntityEdgeLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piEdgeIDs, pfDirections, pfOrthogo-
nals, pfValues )
Description:This functions adds symbol locatio ns specified by particular edges of existing Femap entities to a Sym-
bol collector. The direction and the orthogonal direc tion is provided for each location. This currently 
only applies to FT_ELEM. A REAL8 value is provided for each symbol location.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_ELEMINT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsINT4 piEdgeIDs[0..nID s-1] Edge ID of entity
REAL8 pfDirections[0..(3*nIDs)-1] Dir ection of symbol at each location
REAL8 pfOrthogonals[0..(3*nIDs)-1] Orthogonal direction of symbol at each locationREAL8 pfValues[0..nIDs-1] Valu e for each symbol location
Output:NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:This function is only valid for FT_ ELEM. The Edge ID is based on th e numbering of the midside nodes 
of the parabolic versions of the elements.
If qScreenOrient = True in the previous call to Sy mbolCreate, the values of pfOrthogonals are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
Example:None
CollectorAddSymbolREAL8EntityEdgeAutoLocations   API-1671
4.14.1.37  CollectorAddSymbol REAL8EntityEdgeAutoLocations
CollectorAddSymbolREAL 8EntityEdgeAutoLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piEdgeIDs, piOrientOption, pfValues )
Description:This functions adds symbol locatio ns specified by particular edges of existing Femap entities to a Sym-
bol collector. The direction and the orthogonal direc tion is provided for each location. This currently 
only applies to FT_ELEM. The direc tion and the orthog onal directions are specified using an orienta-
tion option, piOrientOption. A REAL8 value is provided for each symbol location.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_ELEMINT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsINT4 piEdgeIDs[0..nIDs-1] Edge ID of entity
INT4 piOrientOption[0..nIDs-1]Orientation option to determine or thogonal direction of symbol 
at each location. See Remarks sec tion to see the various options 
available for each entity type
REAL8 pfValues[0..nIDs-1] Valu e for each symbol location
Output:NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:This function is only valid for FT_ ELEM. The Edge ID is based on th e numbering of the midside nodes 
of the parabolic versions of the elements.
If qScreenOrient = True in the previous call to Sy mbolCreate, the values of piOrientOption are ignored 
and the symbol XZ plane is rotated in global space to be as close as possible to the plane of the screen.
For eType = FT_ELEM (Point1)
iOrientOption = MN, Symbol direction in global di rection M (0=X, 1=Y , 2=Z), Orthogonal in global 
direction N
 API-1672  CollectorAddSymbolREAL8EntityEdgeAutoLocations
For eType = FT_ELEM (Line2, Line3) – Symbol direction is along the line element from Node 1 to 
Node 2iOrientOption = 0, orthogonal direction as close to global X axis as possible
iOrientOption = 1, orthogonal direction as close to global Y axis as possible
iOrientOption = 2, orthogonal direction as close to global Z axis as possible
For eType = FT_ELEM (Tria3/6, Quad4/8)
iOrientOption = MN, Symbol direction is controlled by  M and orthogonal direction is controlled by N
M = 1, symbol direction is face normal
M = 2, symbol direction is reverse face normal
M = 3, symbol direction is edge directionM = 4, symbol direction is reverse edge direction
M = 5, symbol direction is edge normal
M = 6, symbol direction is reverse edge normalN = 1, orthogonal direction is face normal
N = 2, orthogonal direction is reverse face normal
N = 3, orthogonal direction is edge directionN = 4, orthogonal direction is reverse edge directionN = 5, orthogonal direction is edge normal
N = 6, orthogonal direction is reverse edge normal
For eType = FT_ELEM (Tetra4/10, Wedge6/15, Pyramid5/13, Brick8/20)
iOrientOption = LMN, Symbol  direction is controlled by M and orthogonal direction is controlled by N
L = 0, face normal is average of two faces adjacent to specified edgeL = 1, face normal is normal of face to the left of specified edge
L = 2, face normal is normal of face to the right of specified edge
M and N are the same as for Tria3/6, Quad4/8
Example:NoneCollectorAddSymbolREAL 8EntityEdgeAutoLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piEdgeIDs, piOrientOption, pfValues )
CollectorAddTextLocations   API-1673
4.14.1.38  CollectorAddTextLocations
CollectorAddTextLocations
( iCollectorID, iAppearanceID, nPoints, pfPoints, ppText )
Description:This functions adds text at locations in global space to a Text collector.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesINT4 nPoints Number of pointsREAL8 pfPoints
[0..(3*nPoints)-1]Coordinates of points to place text
STRING ppText[0..nPoints-1] STRING for each location
Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
 API-1674  CollectorAddTextEntityLocations
4.14.1.39  CollectorAddTextEntityLocations
CollectorAddTextEntityLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, ppText )
Description:This function adds text at locations specified  by existing Femap entities to a Text collector.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_POINT, FT_ CURVE, FT_SURFACE, FT_NODE, FT_ELEM
INT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsSTRING ppText[0..nIDs-1] STR ING for each location
Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:None Example:None
CollectorAddTextEntityFaceLocations   API-1675
4.14.1.40  CollectorAddTextEntityFaceLocations
CollectorAddTextEntityFaceLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piFaceIDs, ppText )
Description:This function adds text at locatio ns specified by a particular face of existing Femap entities to a Text 
collector
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_ELEMINT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsSTRING ppText[0..nIDs-1] STR ING for each location
Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:None Example:None
 API-1676  CollectorAddTextINT4Locations
4.14.1.41  CollectorAddTextINT4Locations
CollectorAddTextINT4Locations
( iCollectorID, iAppearanceID, nPoints, pfPoints, piValues )
Description:This functions adds text based on an INT4 value at  locations in global space to a Text collector. An 
INT4 value is supplied for each location.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesINT4 nPoints Number of pointsREAL8 pfPoints
[0..(3*nPoints)-1]Coordinates of points to place text
INT4 piValues[0..nPoints-1] I NT4 value for each location
Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:None Example:None
CollectorAddTextINT4EntityLocations   API-1677
4.14.1.42  CollectorAddTextINT4EntityLocations
CollectorAddTextINT4EntityLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piValues )
Description:This function adds text based on  an INT4 value at a location specified by existing Femap entities to a 
TextINT4 collector. An INT4 valu e is supplied for each location.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_POINT, FT_ CURVE, FT_SURFACE, FT_NODE, FT_ELEM
INT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsSTRING piValues[0..nIDs-1] INT4 value for each locationOutput:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:None Example:None
 API-1678  CollectorAddTextINT4EntityFaceLocations
4.14.1.43  CollectorAddTextINT4EntityFaceLocations
CollectorAddTextINT4EntityFaceLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piFaceIDs, piValues )
Description:This function adds text based on an INT4 value at  a location specified by a particular face of existing 
Femap entities to a TextINT4 collector. An INT4 value is supplie d for each location.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_ELEMINT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsINT4 piFaceIDs[0..nIDs-1] Face ID of entityINT4 piValues[0..nIDs-1] INT4  value for each location
Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:None Example:None
CollectorAddTextREAL8Locations   API-1679
4.14.1.44  CollectorAddTextREAL8Locations
CollectorAddTextREAL8Locations
( iCollectorID, iAppearanceID, nPoints, pfPoints, pfValues )
Description:This functions adds text based on a REAL8 value at locations in global space to a TextREAL8 collector. 
A REAL8 value is supp lied for each location.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesINT4 nPoints Number of pointsREAL8 pfPoints
[0..(3*nPoints)-1]Coordinates of points to place text
REAL8 pfValues[0..nPoints-1] REA L8 value for each location
Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:None Example:None
 API-1680  CollectorAddTextREAL8EntityLocations
4.14.1.45  CollectorAddTextREAL8EntityLocations
CollectorAddTextREAL8EntityLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, pfValues )
Description:This function adds text based on  a REAL8 value at a location specif ied by existing Femap entities to a 
TextREAL8 collector. A REAL8 valu e is supplied for each location.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_POINT, FT_ CURVE, FT_SURFACE, FT_NODE, FT_ELEM
INT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsREAL8 pfValues[0..nIDs-1] REAL8 value for each locationOutput:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:None Example:None
CollectorAddTextREAL8EntityFaceLocations   API-1681
4.14.1.46  CollectorAddTextREAL8EntityFaceLocations
CollectorAddTextREAL8EntityFaceLocations
( iCollectorID, iAppearanceID, eType, nIDs, piIDs, piFaceIDs, pfValues )
Description:This function adds text based on a REAL8 value at a location specified by a particular face of existing 
Femap entities to a TextREAL8 collector. An  REAL8 value is supplied for each location.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesenum zDataType eType FT_ELEMINT4 nIDs Number of entity IDsINT4 piIDs[0..nIDs-1] List of entity IDsINT4 piFaceIDs[0..nIDs-1] Face ID of entityREAL8 pfValues[0..nIDs-1] REAL8 value for each locationOutput:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:None Example:None
 API-1682  CollectorAddLineLocations
4.14.1.47  CollectorAddLineLocations
CollectorAddLineLocations
( iCollectorID, iAppearanceID, nLines, pfPoints )
Description:This functions adds lines at locations in global space to a Line collector. 
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesINT4 nLines Number of lines to addREAL8 pfPoints
[0..nLines*2*3)-1]Coordinates of points at each end of each line
Output:
NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:NoneExample:None
CollectorAddPolyLineLocations   API-1683
4.14.1.48  CollectorAddPolyLineLocations
CollectorAddPolyLineLocations
( iCollectorID, iAppearanceID, nPoints, pfPoints )
Description:This functions adds a polyline at locatio ns in global space to a Line collector. 
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesINT4 nPoints Number of points in the polylineREAL8 pfPoints
[0..(3*nPoints)+2]Coordinates of points on the polyline
Output:
NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:NoneExample:None
 API-1684  CollectorAddMeshLineLocations
4.14.1.49  CollectorAddMeshLineLocations
CollectorAddMeshLineLocations
( iCollectorID, iAppearanceID, nPoints, pfPoints, nLines, piLines )
Description:This functions adds a polyline at locatio ns in global space to a Line collector. 
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesINT4 nPoints Number of pointsREAL8 pfPoints
[0..(3*nPoints)-1]Coordinates of points
INT4 nLines Number of lines
INT4 piLines
[0..(2*nLines)-1]Two indices into pfPoints for each line
Output:
NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:NoneExample:None
CollectorAddTriangleLocations   API-1685
4.14.1.50  CollectorAddTriangleLocations
CollectorAddTriangleLocations
( iCollectorID, iAppearanceID, nTriangles, pfPoints )
Description:This functions adds tr iangles at locations in global space to a Triangle collector.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesINT4 nTriangles Number of trianglesREAL8 pfPoints
[0..nTriangles*3*3)-1]Coordinates of points at e ach corner of each triangle
Output:
NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:If the selected appearance has lighting/shading switched on, the normal used is calculated as the normal 
of each flat triangle.
Example:None
 API-1686  CollectorAddMeshTriangleLocations
4.14.1.51  CollectorAddM eshTriangleLocations
CollectorAddMeshTriangleLocations
( iCollectorID, iAppearanceID, nPoints, pfPoints, nTriangles, piTriangles )
Description:This functions adds a mesh of triangles at loca tions in global space to a Triangle collector. 
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesINT4 nPoints Number of pointsREAL8 pfPoints
[0..nPoints*3)-1]Coordinates of points
INT4 nTriangles Number of triangles
REAL8 piTriangles
[0..nTriangles*3)-1]Three indices into pfPoints for each triangle
Output:
NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:If the selected appearance has lighting/shading switched on, the normal used is calculated as the normal 
of each flat triangle.
Example:None
CollectorAddMeshTriangleNormalLocations   API-1687
4.14.1.52  CollectorAddMes hTriangleNormalLocations
CollectorAddMeshTriangleNormalLocations
( iCollectorID, iAppearanceID, nPoints, pfPoints, pfNormals, nTriangles, piTriangles )
Description:This functions adds a mesh of tria ngles at locations in global space to a Triangle collector. The normal 
enable the lighting/shadin g to be smooth over the mesh of triangles.
Input:INT4 iCollectorID ID of collector to add dataINT4 iAppearanceID ID of appearance to use for these entitiesINT4 nPoints Number of pointsREAL8 pfPoints
[0..(3*nPoints)-1]Coordinates of points
REAL8 pfNormals
[0..(3*nPoints)-1]Normal vector at each point
INT4 nTriangles Number of triangles
INT4 piTriangles
[0..(3*nTriangles)-1]Three indices into pfPoints and pfNormals for each triangle
Output:
NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:NoneExample:None
 API-1688  BitmapCreate
4.14.1.53  BitmapCreate
BitmapCreate
( iWidth, iHeight, pqBits, iBitmapID )
Description:This function creates a Bitmap that  can be used by a Bitmap collector
Input:INT4 iWidth Width of BitmapINT4 iHeight Height of BitmapBOOL pqBits 
[0..(iWidth*iHeight)-1]Bitmap data in rows starting bottom left corner
Output:
INT4 iBitmapID ID of Bitmap createdReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:NoneExample:None
BitmapMarkForDeletion   API-1689
4.14.1.54  BitmapMarkForDeletion
BitmapMarkForDeletion
( iBitmapID )
Description:This function marks a Bitmap for dele tion. After it has been marked for deletion, it cannot be used by a 
Bitmap collector
Input:INT4 iBitmapID ID of Bitm ap to mark for deletion
Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
 API-1690  SymbolCreate
4.14.1.55  SymbolCreate
SymbolCreate
( nAppearances, fLabelLocation, qScreenOrient, iSymbolID )
Description:This function creates a Symbol that can be used by a Symbol or SymbolREAL8 collector
Input:INT4 nAppearances Number of ap pearances used by the Symbol
REAL8 fLabelLocation[0..2] Location in Symb ol space that a label can be located
BOOL qSreenOrientIf True, Symbol will be oriented based  on the screen normal. If False, 
Symbol will be oriented in global space
Output:INT4 iBitmapID ID of Symbol createdReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:fLabelLocation currently only us ed by SymbolREAL8 collector.
A Symbol can have components with different appe arances (colors etc.). Wh en Symbol locations are 
added to a Symbol (or SymbolREAL8) collector, an ap pearance ID is provided and this is used as the 
base appearance ID. Each co mponent added to a symbol , has an appearance offset that will be added to 
the base appearance ID to determine the actual ap pearance used by those locations of the Symbol.
qScreenOrient is used for "2D Symbols". Most symb ols will be defined using 3D components in Sym-
bol XYZ space. However, you can get screen aligned 2D symbols by defining the components in the XZ 
plane of symbol space. If qScreenOrient = True, then the XZ plane is rotated in global space to align as 
closely as possible to the direction out of the screen.  Components can also be added to be used instead 
of the usual components if the symb ol points straight out of or into  the screen (see function SetAddIn-
Screen) and these components will usually be in th e XY plane of Symbol space. Screen oriented Sym-
bols will be drawn initially oriented based on the sc reen and when a graphics regeneration (ctrl-g) is 
processed. Dynamic rotation will not us ually keep them oriented based on screen unless the /File/Prefer-
ences… Graphics Tab Memory Optimization option is chosen.
Example:None
SymbolMarkForDeletion   API-1691
4.14.1.56  SymbolMarkForDeletion
SymbolMarkForDeletion
( iSymbolID )
Description:This function marks a Symbol  for deletion. After it has been marked for deletion, it cannot be used by a 
Symbol or SymbolREAL8 collector
Input:INT4 iSymbolID ID of Symbol to mark for deletionOutput:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
 API-1692  SymbolSetAddInScreen
4.14.1.57  SymbolSetAddInScreen
SymbolSetAddInScreen
( iSymbolID, iInScreenMode )
Description:This function controls whether Symbol compon ents for screen oriented Symbols are placed. 
Input:INT4 iSymbolID ID of Symbol to add
INT4 iInScreenModeIn Screen mode. 0 = Load Symbol  Component to draw when not 
aligned into or out of screen; > 0 = Load Symbol component to draw 
when aligned out of screen; < 0 = Load Symbol component to draw 
when aligned into screen
Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
SymbolAddPoints   API-1693
4.14.1.58  SymbolAddPoints
SymbolAddPoints
( iSymbolID, iAppearanceOffset, nPoints, pfPoints )
Description:This function adds points to a Symbol.Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
INT4 nPoints Number of pointsREAL8 pfPoints
[0..nPoints*3)-1]Coordinates of points in symbol space
Output:
NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
 API-1694  SymbolAddLineStraight
4.14.1.59  Symbol AddLineStraight
SymbolAddLineStraight
( iSymbolID, iAppearanceOffset, fPoints )
Description:This function adds indi vidual lines to a Symbol.
Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fPoints
[0..nPoints*2*3)-1]Coordinates of ends of Line in Symbol Space
Output:
NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
SymbolAddLinePoly   API-1695
4.14.1.60  SymbolAddLinePoly
SymbolAddLinePoly
( iSymbolID, iAppearanceOffset, nPoints, pfPoints )
Description:This function adds a polyline to a Symbol.
Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
INT4 nPoints Number of pointsREAL8 pfPoints
[0..nPoints*3)-1]Coordinates of points in symbol space
Output:
NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
 API-1696  SymbolAddLineCircle
4.14.1.61  SymbolAddLineCircle
SymbolAddLineCircle
( iSymbolID, iAppearanceOffset, fCenter, fPointOnCircle, fNormal, nDividers )
Description:This function adds a circle to a Symbol.Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fCenter[0..2] Coordinate of cen ter of circle in Symbol space
REAL8 fPointOnCircle[0..2] Coordinate of point on circle in Symbol spaceREAL8 fNormal[0..2] Vector normal to the circleINT4 nDividers Number of divisions in a quarter of a circleOutput:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:The normal does not have to exactly represent the norm al. The normal is used to generate an orthogonal 
direction that will be in the plane of the circle.
Example:None
SymbolAddLineBrick   API-1697
4.14.1.62  SymbolAddLineBrick
SymbolAddLineBrick
( iSymbolID, iAppearanceOffset, fPoints )
Description:This function adds a wireframe brick to a SymbolInput:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fPoints[0..23]Coordinates of 8 corners of a brick (i.e., 0=X coordinate of corner 1, 
1=Ycoordinate of corner 1, 2=Z coordinate of corner 1, 3=X coordi-
nate of corner 2, 4=Ycoordinate of corner 2, 5=Z coordinate of cor-
ner 2...21=X coordinate of corner 8, 22=Y coordinate of corner 8, 23=Z coordinate of corner 8)
Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
 API-1698  SymbolAddLineCylinder
4.14.1.63  SymbolAddLineCylinder
SymbolAddLineCylinder
( iSymbolID, iAppearanceOffset, fCenter, fPointOnCircle, fDirection, fHeight, nDividers, 
nSubDividers )
Description:This function adds a wire frame cylinder to a Symbol
Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fCenter[0..2] Coordinate of cen ter of circle in Symbol space
REAL8 fPointOnCircle[0..2] Coordinate of point on circle in Symbol spaceREAL8 fDirection[0..2] Vector along cylinderREAL8 fHeight Height of cylinderINT4 nDividers Number of lines drawn along cylindrical surfaceINT4 nSubDividers Number of divisions along circle between nDividersOutput:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:The angle between the direction of the cylinder and th e vector from the center to the point on circle does 
not have to be 90 degrees (it must not be 0 degrees) . If the angle is not 90, the cylinder will be skewed.
Internally, nSubDividers is increased until nDividers mu ltiplied by nSubDividers is greater than or equal 
to 16
Example:None
SymbolAddLineCone   API-1699
4.14.1.64  SymbolAddLineCone
SymbolAddLineCone
( iSymbolID, iAppearanceOffset, fCenter, fPointOnCircle, fDirection, fHeight, nDividers, 
nSubDividers )
Description:This function adds a wi reframe cone to a Symbol
Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fCenter[0..2] Coordinate of cen ter of circle in Symbol space
REAL8 fPointOnCircle[0..2] Coordinate of point on circle in Symbol spaceREAL8 fDirection[0..2] Vector normal to the circleREAL8 fHeight Height of coneINT4 nDividers Number of lines drawn along conical surfaceINT4 nSubDividers Number of divisions along circle between nDividersOutput:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:The angle between the direction of the cone and the ve ctor from the center to the point on circle does not 
have to be 90 degrees (it must not be 0 degrees). If the angle is not 90, the cone will be skewed.
Internally, nSubDividers is increased until nDividers mu ltiplied by nSubDividers is greater than or equal 
to 16
Example:None
 API-1700  SymbolAddLineSphere
4.14.1.65  SymbolAddLineSphere
SymbolAddLineSphere
( iSymbolID, iAppearanceOffset, fCenter, fPointOnEquator, fDirection, fAngle, nLongDi-
viders, nLongSubDividers, nLatDividers, nLatSubDividers )
Description:This function adds a wire frame sphere to a Symbol
Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fCenter[0..2] Coordinate of center of sphere in Symbol spaceREAL8 fPointOnEquator[0..2] Coordinate of point on equator in Symbol spaceREAL8 fDirection[0..2] Vector normal  to the equator of the sphere
REAL8 fAngle Angle of revolution (360.0 is a sphere)INT4 nLongDividers Number of longitudinal lines drawn on sphereINT4 nLongSubDividers Number of divisions between longitudinal linesINT4 nLatDividers Number of latitudinal lines drawn on sphereINT4 nLatSubDividers Number of di visions between latitudinal lines
Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:Internally, nLongSubDividers and nL atSubDividers is increased until th e angle for each subdivision is 
less than 22.5 degrees. The values of nLongDivid ers and nLatDividers control how many lines are 
drawn and nLongSubDividers and nLatSubD ividers control how smooth they are.
Example:None
SymbolAddFillTriangle   API-1701
4.14.1.66  SymbolAddFillTriangle
SymbolAddFillTriangle
( iSymbolID, iAppearanceOffset, fPoints, fNormals )
Description:This function adds a fill ed triangle to a Symbol
Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fPoints[0..8]Coordinates of triangle corners in Symbol space (i.e., 0=X coordi-
nate of corner 1, 1=Ycoordinate of corner 1, 2=Z coordinate of cor-
ner 1, 3=X coordinate of corner 2, 4=Ycoordinate of corner 2, 5=Z 
coordinate of corner 2, 6=X coordinate of corner 3, 7=Y coordinate of corner 3, 8=Z coordinate of corner 3)
REAL8 fNormals[0..8]Normal vectors at triangle corners in Symbol space (i.e., 0=X coordi-
nate of vector at corner 1, 1=Ycoo rdinate of vector at corner 1, 2=Z 
coordinate of vector at corner 1, 3=X coordinate of vector at corner 
2, 4=Ycoordinate of vector at corner 2, 5=Z coordinate of vector at corner 2, 6=X coordinate of vector at corner 3, 7=Y coordinate of 
vector at corner 3, 8=Z coordinate of vector at corner 3)
Output:NoneReturn Code:FE_FAIL Call was unsuccessfulRemarks/Usage:The normal do not have to be norm al to the triangle. This enables sm oother lit/shaded su rfaces to be dis-
played.
Example:None
 API-1702  SymbolAddFillCircle
4.14.1.67  SymbolAddFillCircle
SymbolAddFillCircle
( iSymbolID, iAppearanceOffset, fCenter, fPointOnCircle, fNormal, nDividers )
Description:This function adds a filled circle to a SymbolInput:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fCenter[0..2] Coordinate of cen ter of circle in Symbol space
REAL8 fPointOnCircle[0..2] Coordinate of point on circle in Symbol spaceREAL8 fNormal[0..2] Vector normal to the circleINT4 nDividers Number of divisions in a quarter of a circleOutput:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:The normal does not have to exactly represent the norm al. The normal is used to generate an orthogonal 
direction that will be in the plane of the circle.
Example:None
SymbolAddFillBrick   API-1703
4.14.1.68  SymbolAddFillBrick
SymbolAddFillBrick
( iSymbolID, iAppearanceOffset, fPoints, qEndCap )
Description:This function adds a filled brick to a SymbolInput:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fPoints[0..23]Coordinates of 8 corners of a brick (i.e., 0=X coordinate of corner 1, 
1=Ycoordinate of corner 1, 2=Z coordinate of corner 1, 3=X coordi-
nate of corner 2, 4=Ycoordinate of corner 2, 5=Z coordinate of cor-
ner 2...21=X coordinate of corner 8, 22=Y coordinate of corner 8, 23=Z coordinate of corner 8)
BOOL qEndCap Draw the two end caps. Without end caps, it is a square tube.Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
 API-1704  SymbolAddFillCylinder
4.14.1.69  SymbolAddFillCylinder
SymbolAddFillCylinder
( iSymbolID, iAppearanceOffset, fCenter, fPointOnCircle, fDirection, fHeight, nDividers, 
nSubDividers, qEndCap )
Description:This function adds a f illed cylinder to a Symbol
Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fCenter[0..2] Coordinate of cen ter of circle in Symbol space
REAL8 fPointOnCircle[0..2] Coordinate of point on circle in Symbol spaceREAL8 fDirection[0..2] Vector along cylinderREAL8 fHeight Height of cylinderINT4 nDividers Number of lines drawn along cylindrical surfaceINT4 nSubDividers Number of sub-divisions along circle between nDividersBOOL qEndCap Draw the two end caps. Without end caps, it is a cylindrical tube.Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
SymbolAddFillCone   API-1705
4.14.1.70  SymbolAddFillCone
SymbolAddFillCone
( iSymbolID, iAppearanceOffset, fCenter, fPointOnCircle, fDirection, fHeight, nDividers, 
nSubDividers, qEndCap )
Description:This function adds a f illed cone to a Symbol
Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fCenter[0..2] Coordinate of cen ter of circle in Symbol space
REAL8 fPointOnCircle[0..2] Coordinate of point on circle in Symbol spaceREAL8 fDirection[0..2] Vector normal to the circleREAL8 fHeight Height of coneINT4 nDividers Number of lines drawn along conical surfaceINT4 nSubDividers Number of sub-divisions along circle between nDividersBOOL qEndCap Draw the end capOutput:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:The angle between the direction of the cone and the ve ctor from the center to the point on circle does not 
have to be 90 degrees (it must not be 0 degrees). If the angle is not 90, the cone will be skewed.
Internally, nSubDividers is increased until nDividers mu ltiplied by nSubDividers is greater than or equal 
to 16
Example:None
 API-1706  SymbolAddFillTubeBrick
4.14.1.71  SymbolAddFillTubeBrick
SymbolAddFillTubeBrick
( iSymbolID, iAppearanceOffset, fOuterPoints, fInnerPoints )
Description:This function adds a filled quad  tube with thickness to a Symbol
Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fOuterPoints[0..23]Coordinates of outer 8 corners of a brick (i.e., 0=X coordinate of cor-
ner 1, 1=Ycoordinate of corner 1, 2=Z coordinate of corner 1, 3=X 
coordinate of corner 2, 4=Ycoordinate of corner 2, 5=Z coordinate of 
corner 2...21=X coordinate of corner 8, 22=Y coordinate of corner 8, 23=Z coordinate of corner 8)
REAL8 fInnerPoints[0..23]Coordinates of inner 8 corners of a brick (i.e., 0=X coordinate of cor-
ner 1, 1=Ycoordinate of corner 1, 2=Z coordinate of corner 1, 3=X 
coordinate of corner 2, 4=Ycoordinate of corner 2, 5=Z coordinate of 
corner 2...21=X coordinate of corner 8, 22=Y coordinate of corner 8, 23=Z coordinate of corner 8)
Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
SymbolAddFillTubeCylinder   API-1707
4.14.1.72  SymbolAddFillTubeCylinder
SymbolAddFillTubeCylinder
( iSymbolID, iAppearanceOffset, fCenter, fPointOnCircle, fDirection, fHeight, fInnerPro-
portion, nDividers, nSubDividers )
Description:This function adds a filled cylindri cal tube with thickness to a Symbol
Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fCenter[0..2] Coordinate of cen ter of circle in Symbol space
REAL8 fPointOnCircle[0..2] Coordinate of point on circle in Symbol spaceREAL8 fDirection[0..2] Vector along cylinderREAL8 fHeight Height of cylinderREAL8 fInnerProportion Proportion of inner to  outer radius (should be less than 1.0)
INT4 nDividers Number of lines drawn along cylindrical surfaceINT4 nSubDividers Number of sub-divisions along circle between nDividersOutput:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
 API-1708  SymbolAddFillSphere
4.14.1.73  SymbolAddFillSphere
SymbolAddFillSphere
( iSymbolID, iAppearanceOffset, fCenter, fPointOnEquator, fDirection, fAngle, nLongDi-
viders, nLongSubDividers, nLatDividers, nLatSubDividers )
Description:This function adds a f illed sphere to a Symbol
Input:INT4 iSymbolID ID of Symbol to addINT4 iAppearanceOffset Appearance offset  (see remarks for function SymbolCreate)
REAL8 fCenter[0..2] Coordinate of center of sphere in Symbol spaceREAL8 fPointOnEquator[0..2] Coordinate of point on equator in Symbol spaceREAL8 fDirection[0..2] Vector normal  to the equator of the sphere
REAL8 fAngle Angle of revolution (360.0 is a sphere)INT4 nLongDividers Number of longitudinal lines drawn on sphereINT4 nLongSubDividers Number of divisions between longitudinal linesINT4 nLatDividers Number of latitudinal lines drawn on sphereINT4 nLatSubDividers Number of di visions between latitudinal lines
Output:NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:Internally, nLongSubDividers and nLat SubDividers are increased until th e angle for each subdivision is 
less than 22.5 degrees. The values of nLongDivid ers, nLatDividers, nLongSubDividers and nLatSubDi-
viders control how smooth the surface is. The same variables are used as for SymbolAddLineSphere so 
the faceted lines and face ted filled surface line up.
Example:None
Detach   API-1709
4.14.1.74  Detach
Detach
( pDetachedName )
Description:This function detaches the graphics in a User Defi ned Graphics object. When the graphics are detached, 
they cannot be controlled and will pe rsist as is, until the model is closed. The graphics data will no lon-
ger exist in the User Defined Graphics object. The User Defined Graphics obje ct can continue to be 
used by adding new graphics data. The pDetachedNam e is copied to the detached graphics data to 
enable the graphics data to be reattached to a User  Defined Graphics object using the Attach function. 
The main use of the Detach/Attach ca pability is to be able to have gr aphics survive after an API has fin-
ished running and to then access them again in anothe r API. It is advised to not use the same pDetached-
Name for more than one Detach at  a time as a call to Attach will no t know which order to access them 
in.
Input:STRING pDetachedName See description
Output:
NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
 API-1710  Attach
4.14.1.75  Attach
Attach
( pDetachedName )
Description:This function attaches previously detached graphics to  a User Defined Graphics  object. When the graph-
ics are attached, they will replace al l graphics in the User Defined Grap hics object at the point Attach is 
called. While graphics are attached, they will be lo st when the User Defined Graphics object is 
destroyed unless Detach is called again. The graphics da ta to attach is specified by pDetachedName: if a 
previously detached graphics data  has a matching pDetachedName, it will be attached to the User 
Defined Graphics object. The main use of the Detach/A ttach capability is to be able to have graphics 
survive after an API has finished running and to then access them again in anothe r API. It is advised to 
not use the same pDetachedName for more than one De tach at a time as a call to Attach will not know 
which order to access them in.
Input:STRING pDetachedName See description
Output:
NoneReturn Code:FE_FAIL Call was unsuccessful.Remarks/Usage:NoneExample:None
   API-1711
4.15  CopyTool Objects
The CopyTool object offers prog rammatic access to th e capabilities of the commands on the fol-
lowing menus: Geometry, Copy...; Geometry, Rota te...; Geometry, Reflect. ..; Mesh, Copy...(Node 
and Element commands only); Mesh, Rotate... ; and Mesh, Reflect...
All of these commands have  the same options in the Numbering  and Approach  sections of the dia-
log box. All of the mentio ned ‘Geometry” commands offer the same options in the Other Entities 
to Include  section, while all of the mentioned “Mesh ” commands offer the same options in the 
Other Entities to Include  section. In addition, all of the mentioned “Copy” co mmands share the 
same Orient/Transform  section, while all of the mentione d “Rotate” commands share the same 
Orient/Transform  options. Finally, all of the “Reflect  “commands have the same option, Trap 
Width , in the Reflection Options  section.
The CopyTool Object Properties are used to set options in the Approach  section for all commands, 
along with the Trap Width  option for the “Reflect” comman ds. The CopyTool Object Options 
Methods are used to specify options in the Numbering  and Other Entities to Include  sections, 
while the CopyTool Object Oper ation Methods are used to select the one of the available Orient/
Transform  options for “Copy” or “Rotate” co mmands, or the “Reflect” operation.
The appropriate process is to have the CopyTool Properties (see Section 4.15.1, "CopyTool Object 
Properties") and CopyTool Option Methods (See Section 4.15.2, "CopyTool Object Options Meth-ods") specified as desired before  calling one of the CopyTool Obje ct Operation methods (See Sec-
tion 4.15.3, "CopyTool Object Operation Methods").
Use the feCopyTool method of the FEMAP App lication object to create CopyTool objects.
4.15.1  CopyTool Object Properties
Property Description
INT4 RepetitionsSpecifies number of Repetitions  of the selected entities for the 
selection operation to create and specifies Repetitions  value in the 
Approach  section of Copy Options  dialog box.
BOOL CopyInSameLocationFlag controls Copy in Same Location  option in the Approach  sec-
tion of Copy Options  dialog boxes. When enabled, a copy of each 
entity will be created in each entity’s  original location (i.e., creates 
coincident entities).
BOOL AlwaysCreateParentCSysFlag controls Always Create Parent CSys  option in the Approach  
section of Copy Options  dialog boxes. When enabled, a “parent” 
coordinate system is created and referenced by other coordinate 
systems created by an operation.
BOOL UsePatternFlag controls option selected in the Approach  section of the Copy 
Options  dialog box. When True, Pattern  is selected. When False, 
Single/Multiple Copies  is selected.
REAL8 ReflectionTrapWidthOnly used when using the Reflect CopyTool Operation method. 
Specifies the Trap Width  in the Reflection Options  section of the 
Copy Options  dialog box. See Section 4.15.3.8, "Reflect" .
 API-1712  
BOOL CopyToActiveLayerFlag controls Assign to Active Layer  option in the Parameters  sec-
tion of the Copy Options  dialog box. When True, newly created 
entities will be placed on the activ e layer. When False, they are 
placed on the layer of the original entity.
BOOL CopyActiveColorFlag controls Assign Active Color  option in the Parameters  section 
of the Copy Options  dialog box. When True, option is enabled. 
When False, option is disabled.
BOOL CopyToActiveCSysFlag controls Assign to Active CSys  option in the Parameters  sec-
tion of the Copy Options  dialog box. When True, option is enabled. 
When False, option is disabled.Property Description
Clear   API-1713
4.15.2  CopyTool Object Options Methods
4.15.2.1  Clear
Clear
( Void )
Description:Clears everything in the CopyTool object.Input:NoneOutput:NoneReturn Code:
None
Remarks/Usage:Use to clear all values in  the CopyTool object specified by the CopyTool Object Properties and Copy-
Tool Object Options Methods. It may be a good id ea to use this method to purge the object so no 
unwanted options are used, especially if performin g a different operation (i.e. a “Copy” command after 
using “Rotate” command with  a number of Repetitions.
Example:None
 API-1714  SetNumbering
4.15.2.2  SetNumbering
SetNumbering
( zCopyRenumMethod, nToBy )
Description:Specifies option to use in the Numbering section, along with To or By value.
Input:
enum zCopyReumMethodNumbering method to use for duplicated entities. In the Numbering  
section of Copy Options dialog box:
Default = FCPRNM_DEFAULT (0)
Block = FCPRNM_BLOCK (1)Offset = FCPRNM_OFFSET (2)
INT4 nToByWhen zCopyReumMethod is set to FCPRNM_BLOCK, used to 
specify To value. Sets By value when set to FCPRNM_OFFSET.
Output:
None
Return Code:NoneRemarks/Usage:NoneExample:None
SetVectorPattern   API-1715
4.15.2.3  SetVectorPattern
SetVectorPattern
( nPatternDirection, bOn, nNumberInPattern, dSpacing, vDirection )
Description:Specifies if “pattern direction” 1,  2, and/or 3 should be used when creating a pattern, as well as how 
many repetitions, spaci ng between duplicates, and direction vector for each pattern direction.
Input:INT4 nPatternDirection Pattern Direction. 0 = Direction 1, 1 = Direction 2, 2 = Direction 3
BOOL bOnWhen True, the pattern direction specified with nPatternDirection 
will be used when creating a patter n. When False, the pattern direc-
tion specified will not be considered
INT4 nNumberInPatternNumber of repetitions to make in th e direction specified in nPattern-
Direction
REAL8 dSpacingThe distance between each duplicate created in the direction speci-
fied by nPatternDirection. The tota l distance between each instance 
in the pattern is the product of “dSpacing” and the magnitude of 
“vDirection”. “dSpacing” is only th e actual distance if “vDirection” 
is specified as a unit vector.
REAL8 vDirection[0..2]The XYZ components of the vector to create copies along the direc-
tion specified in nPatternDirection.  Must be specified in Global 
Rectangular coordinates.
Output:NoneReturn Code:
FE_INV ALIDVector specified for vDirection is not valid or value < 1 has been 
defined for nNumberInPattern
Remarks/Usage:Once all the desired pattern directions and options ha ve been specified, use CreatePattern to create 
duplicates in the specified pattern.
Example:
 API-1716  SetVectorPattern
Sub Main
    Dim App As femap.model
    Set App = feFemap()    Dim copy As femap.CopyTool
    Set copy = App.feCopyTool
    Dim xyz1(2) As Double
    Dim xyz2(2) As Double
    Dim xyz3(2) As Double
    xyz1(0) = 1.0
    xyz1(1) = 0.0    xyz1(2) = 0.0
    xyz2(0) = 0.0
    xyz2(1) = 1.0
    xyz2(2) = 0.0
    xyz3(0) = 0.0
    xyz3(1) = 0.0    xyz3(2) = 1.0
    rc = copy.SetVectorPattern (0, True, 2, 1.5, xyz1)
    rc = copy.SetVectorPattern (1, True, 2, 1.5, xyz2)
    rc = copy.SetVectorPattern (2, True, 2, 1.5, xyz3)
    copy.CreatePattern (FT_SOLID, -1)
End SubSetVectorPattern
( nPatternDirection, bOn, nNumberInPattern, dSpacing, vDirection )
SetCSysPattern   API-1717
4.15.2.4  SetCSysPattern
SetCSysPattern
( nPatternDirection, bOn, nNumberInPattern, dSpacing, nCSysID )
Description:Specifies if “pattern direction” 1,  2, and/or 3, should be used when creating a pattern, as well as how 
many repetitions, spacing between duplicates, and coor dinate system used to define pattern directions.
Input:
INT4 nPatternDirectionPattern Direction:
0 = Direction 1 (X Axis of coordinate system specified in nCSysID) 
1 = Direction 2 (Y Axis of coordinate system specified in nCSysID)2 = Direction 3 (Z Axis of coordinate system specified in nCSysID)
BOOL bOnWhen True, the pattern direction specified with nPatternDirection 
will be used when creating a patter n. When False, the pattern direc-
tion specified will not be considered
INT4 nNumberInPatternNumber of repetitions to make in th e direction specified in nPattern-
Direction
REAL8 dSpacingThe distance between each duplicate created in the direction speci-
fied by nPatternDirection. The coor dinate system axes are always 
considered as unit vectors so unlik e the SetVectorPattern method, 
“dSpacing” is always the total distance between instances.
INT4 nCSysID Coordinate System used to define the 3 pattern directions.Output:NoneReturn Code:FE_INV ALID Value < 1 has been defined for nNumberInPatternFE_NOT_EXIST Coordinate System  specified does not exist.
Remarks/Usage:Once all the desired pattern directions and options ha ve been specified, use CreatePattern to create 
duplicates in the specified pattern.
Example:
 API-1718  SetCSysPattern
Sub Main
    Dim App As femap.model
    Set App = feFemap()
    Dim copy As femap.CopyTool
    Set copy = App.feCopyTool
    rc = copy.SetCSysPattern (0, True, 3, 1.5, 3)
    rc = copy.SetCSysPattern (1, True, 3, 1.5, 3)    rc = copy.SetCSysPattern (2, True, 2, 2.5, 3)
    copy.CreatePattern(FT_SOLID, -1)End SubSetCSysPattern
( nPatternDirection, bOn, nNumberInPattern, dSpacing, nCSysID )
SetPropertyOption   API-1719
4.15.2.5  SetPropertyOption
SetPropertyOption
( zCopyRenumMethod, nOverrideID )
Description:Specifies which option is used to assign prop erties to duplicate elements (specified in Properties/Mate-
rial Options  section) or assign properties to duplicate ge ometric entities when th e original geometric 
entity already have mesh attributes assigned (specified in Other Entities to Include  section)
Input:
enum zCopyPropApproachApproach to use when assigning pr operties to duplicate elements or 
as mesh attributes on dup licate geometric entities:
Same Properties = FCPPR_KEEP (0)
Duplicate Properties = FCPPR_DUP_PROP (1)
Duplicate Materials = FCPPR_DUP_MATL (2)Use Property = FCPPR_OVERRIDE (3)
INT4 nOverrideIDProperty to use for duplicates when zCopyPropApproach is set to 
FCPPR_OVERRIDE. If type of specif ied property is not compatible 
with a duplicate, the duplicate maintains the original property.
Output:NoneReturn Code:FE_NOT_EXIST Property specified for nOverrideID does not exist
Remarks/Usage:NoneExample:None
 API-1720  IncludeOtherEntities
4.15.2.6  IncludeOtherEntities
IncludeOtherEntities
( bGeometry, bMesh, bLoads, bConstraints, bConnections )
Description:This method has been superseded by  IncludeOtherEntities2, which has an  individual option specifically 
for coordinate systems. Specifies which other types of  entities should be duplicat ed when finite element 
entities or geometric entities are dup licated (options are found in the Other Entities to Include  section of 
Copy Options )
Input:
BOOL bGeometryFlag to include geometric entities as sociated to finite element entities 
being duplicated (True) or not (False)
BOOL bMeshFlag to include finite element entiti es associated to geometric entities 
being duplicated (True) or not (False)
BOOL bLoadsFlag to include loads applied to en tities being duplicated (True) or 
not (False)
BOOL bConstraintsFlag to include constraints applied to entities being duplicated (True) 
or not (False)
BOOL bConnectionsFlag to include regions which re ference entities being duplicated 
(True) or not (False)
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
IncludeOtherEntities2   API-1721
4.15.2.7  IncludeOtherEntities2
IncludeOtherEntities2
( bCoordSys, bGeometry, bMesh, bLoads, bConstraints, bConnections )
Description:Specifies which other types of en tities should be duplicated when fi nite element entities or geometric 
entities are duplicated (options are found in the Other Entities to Include  section of Copy Options ). This 
method supersedes IncludeOtherEntities.
Input:
BOOL bCoordSysFlag to include coordinate system s associated to finite element enti-
ties being duplicated (True) or not (False)
BOOL bGeometryFlag to include geometric entities as sociated to finite element entities 
being duplicated (True) or not (False)
BOOL bMeshFlag to include finite element entiti es associated to geometric entities 
being duplicated (True) or not (False)
BOOL bLoadsFlag to include loads applied to en tities being duplicated (True) or 
not (False)
BOOL bConstraintsFlag to include constraints applied to entities being duplicated (True) 
or not (False)
BOOL bConnectionsFlag to include regions which re ference entities being duplicated 
(True) or not (False)
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-1722  AllOtherEntities
4.15.2.8  AllOtherEntities
AllOtherEntities
( bOn )
Description:Specifies that all entity types which are associated w ith, referenced by, and appl ied to the entities being 
duplicated will also be duplicated
Input:
BOOL bOnFlag to include all entity types whic h are associated with, referenced 
by, and applied to the entities being duplicated (True) or not (False)
Output:NoneReturn Code:
None
Remarks/Usage:NoneExample:None
AlongVector   API-1723
4.15.3  CopyTool Obj ect Operation Methods
4.15.3.1  AlongVector
AlongVector
( nDataType, nEntitySetID, vDirection )
Description:Copies entities of the specified type along a user-def ined vector, using the options specified on the 
CopyTool object by the CopyTool Object Properties and CopyTool Object Options Methods
Input:
INT4 nDataTypeThe type of entities to be copied. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_SUR-
FACE, FT_SOLID, FT_NODE, or FT_ELEM. 
INT4 nEntitySetIDThe ID of a set that contains a list  of entity IDs that will be copied. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to copy. 
REAL8 vDirection[0..2]The XYZ components of the vector to create copies along. Must be 
specified in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
 API-1724  PointToPoint
4.15.3.2  PointToPoint
PointToPoint
( nDataType, nEntitySetID, vFrom, vTo )
Description:Copies entities of the specified type along a vector defined by from one user-defined location to another 
user-defined location, using the optio ns specified on the CopyTool obj ect by the CopyTool Object Prop-
erties and CopyTool Object Options Methods
Input:
INT4 nDataTypeThe type of entities to be copied. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_SUR-FACE, FT_SOLID, FT_NODE, or FT_ELEM. 
INT4 nEntitySetIDThe ID of a set that contains a list  of entity IDs that will be copied. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to copy. 
REAL8 vFrom[0..2]The XYZ coordinates of the location at  the base of a vector to move 
along. Must be specified in Global Rectangular coordinates.
REAL8 vTo[0..2]The XYZ coordinates of the location at the tip of a vector to move 
along. Must be specified in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
BetweenCSys   API-1725
4.15.3.3  BetweenCSys
BetweenCSys
( nDataType, nEntitySetID, nFromCSys, nToCSys )
Description:Copies entities of the specified type then orients the duplicate entities by alig ning the XYZ axes of the 
“From” coordinate system to XYZ axes of the “To”  coordinate system, using the options specified on 
the CopyTool object by the CopyTool Object Pr operties and CopyTool Object Options Methods
Input:
INT4 nDataTypeThe type of entities to be copied and aligned. For entity information, 
see Section 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_SURFACE, FT_SOLID, FT_NODE, or FT_ELEM. 
INT4 nEntitySetIDThe ID of a set that contains a list  of entity IDs that will be copied 
and aligned. Alternatively, if you specify a negative value, this is 
simply the ID of the single  entity to copy and align. 
INT4 nFromCSysThe ID of the Coordinate System to use as the “From” Coordinate 
System
INT4 nToCSysThe ID of the Coordinate System to use as the “To” Coordinate Sys-
tem
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
 API-1726  BetweenVectors
4.15.3.4  BetweenVectors
BetweenVectors
( nDataType, nEntitySetID, vFromBase, vFromDir, vToBase, vToDir )
Description:Copies entities of the specified type then orients the duplicate entities by mo ving the “From Base” loca-
tion to the “To Base” location, then  aligning the vector specified by the “From” coordinates to the vec-
tor specified by “To” coordinates, using the options  specified on the CopyTool object by the CopyTool 
Object Properties and CopyTo ol Object Options Methods
Input:
INT4 nDataTypeThe type of entities to be copied and aligned. For entity information, 
see Section 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, 
FT_SURFACE, FT_SOLID, FT_NODE, or FT_ELEM. 
INT4 nEntitySetIDThe ID of a set that contains a list  of entity IDs that will be copied 
and aligned. Alternatively, if you specify a negative value, this is 
simply the ID of the single  entity to copy and align. 
REAL8 vFromBase[0..2]The XYZ coordinates of the location at  the base of a vector to align 
from. Must be specified in Global Rectangular coordinates.
REAL8 vFromDir[0..2]The components of the vector to align from during copy. Must be 
specified in Global Rectangular coordinates.
REAL8 vToBase[0..2]The XYZ coordinates of the location at  the base of a vector to align 
to. Must be specified in Global Rectangular coordinates.
REAL8 vToDir[0..2]The components of the v ector to align to during copy. Must be speci-
fied in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
BetweenPlanes   API-1727
4.15.3.5  BetweenPlanes
BetweenPlanes
( nDataType, nEntitySetID, vFromBase, vFromNormal, vFromX, vToBase, vToNormal, 
vToX )
Description:Copies entities of the specified type then orients the duplicate entities by aligni ng the “From” plane to 
the “To” plane, including the norm al direction of the planes, using the options specified on the Copy-
Tool object by the CopyTool Object Properties and CopyTool Object Options Methods
Input:
INT4 nDataTypeThe type of entities to be copied and aligned. For entity information, 
see Section 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, 
FT_SURFACE, FT_SOLID, FT_NODE, or FT_ELEM. 
INT4 nEntitySetIDThe ID of a set that contains a list  of entity IDs that will be copied 
and aligned. Alternatively, if you specify a negative value, this is 
simply the ID of the single  entity to copy and align. 
REAL8 vFromBase[0..2]The XYZ coordinates of location in  the plane to align from during 
alignment. Must be specified in  Global Rectangular coordinates.
REAL8 vFromNormal[0..2]The components of a vector normal to the plane to align from during 
alignment. Must be specified in  Global Rectangular coordinates.
REAL8 vFromX[0..2]The components of a vector that specifies the "X"/control direction 
within the plane to align from during  alignment. Must be specified in 
Global Rectangular coordinates.
REAL8 vToBase[0..2]The XYZ coordinates of location in  the plane to align to during 
alignment. Must be specified in  Global Rectangular coordinates.
REAL8 vToNormal[0..2]The components of a vector normal to the plane to align to during 
alignment. Must be specified in  Global Rectangular coordinates.
REAL8 vToX[0..2]The components of a vector that specifies the "X"/control direction 
within the plane to align to during  alignment. Must be specified in 
Global Rectangular coordinates.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:None
 API-1728  BetweenPlanes
Example:
NoneBetweenPlanes
( nDataType, nEntitySetID, vFromBase, vFromNormal, vFromX, vToBase, vToNormal, 
vToX )
RotateAroundVector   API-1729
4.15.3.6  RotateAroundVector
RotateAroundVector
( nDataType, nEntitySetID, vAroundBase, vAroundDir, dAngle, dDistanceAlong )
Description:Copies entities of the specified type, then rotates th em around a user-defined vector by a specified 
amount, in degrees, and optionally along the user-defined vector a specified distance, using the options 
specified on the CopyTool  object by the CopyTool Object Properties and CopyTool Object Options 
Methods
Input:
INT4 nDataTypeThe type of entities to be copied. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_SUR-
FACE, FT_SOLID, FT_NODE, or FT_ELEM. 
INT4 nEntitySetIDThe ID of a set that contains a list  of entity IDs that will be copied 
and rotated/moved. Alternatively, if you specify a negative value, 
this is simply the ID of the sing le entity to copy and rotate/move. 
REAL8 vAroundBase[0..2]The XYZ coordinates of the location at  the base of a vector to rotate 
around. Must be specified in Global Rectangular coordinates.
REAL8 vAroundDir[0..2]The components of a vector to rotate around. Must be specified in 
Global Rectangular coordinates.
REAL8 dAngle The angle of rotation, in degrees.REAL8 dDistanceAlong The tota l distance along the axis of rotation, typically zero.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
 API-1730  RotatePointToPoint
4.15.3.7  RotatePointToPoint
RotatePointToPoint
( nDataType, nEntitySetID, vAroundBase, vAroundDir, vFrom, vTo )
Description:Copies entities of the specified type, then rotates them around a user-defin ed from one location to 
another location (locations define both angle of rotation and distance along the user-defined vector), 
using the options specified on the CopyTool object  by the CopyTool Object Properties and CopyTool 
Object Options Methods
Input:
INT4 nDataTypeThe type of entities to be copied. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_SUR-
FACE, FT_SOLID, FT_NODE, or FT_ELEM. 
INT4 nEntitySetIDThe ID of a set that contains a list  of entity IDs that will be copied 
and rotated/moved. Alternatively, if you specify a negative value, 
this is simply the ID of the sing le entity to copy and rotate/move. 
REAL8 vAroundBase[0..2]The XYZ coordinates of the location at  the base of a vector to rotate 
around. Must be specified in Global Rectangular coordinates.
REAL8 vAroundDir[0..2]The components of a vector to rotate around. Must be specified in 
Global Rectangular coordinates.
REAL8 vFrom[0..2]The XYZ coordinates of the location to rotate/move from. Must be 
specified in Global Rectangular coordinates.
REAL8 vTo[0..2]The XYZ coordinates of  the location to rotate/move to. Must be 
specified in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
Reflect   API-1731
4.15.3.8  Reflect
Reflect
( nDataType, nEntitySetID, vAcrossBase, vAcrossDir )
Description:Copies entities of the specified type by reflecting th em across the specified plane, using the options 
specified on the CopyTool object by the CopyTool Object Propertie s, including ReflectionTrapWidth, 
and CopyTool Object Options Methods. 
Input:
INT4 nDataTypeThe type of entities to be copied  and reflected. Fo r entity informa-
tion, see Section 3.3.6, "En tity Types". Can be FT_POINT, 
FT_CURVE, FT_SURFACE, FT_SOLID, FT_NODE, or 
FT_ELEM. 
INT4 nEntitySetIDThe ID of a set that contains a list  of entity IDs that will be copied 
and reflected. Alternatively, if you specify a negative value, this is 
simply the ID of the single entity to copy and reflect. 
REAL8 vAcrossBase[0..2]The XYZ coordinates of the location at the base of the reflection 
plane. Must be specified in Global Rectangular coordinates.
REAL8 vAcrossDir[0..2]The components of a vector normal to the reflection plane. Must be 
specified in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
 API-1732  InPlace
4.15.3.9  InPlace
InPlace
( nDataType, nEntitySetID )
Description:Copies entities of the specified type “in place”, using the options specified on the CopyTool object by 
the CopyTool Object Properties and CopyTool Object Options Methods. 
Input:
INT4 nDataTypeThe type of entities to be copied in  place. For entity information, see 
Section 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_-
SURFACE, FT_SOLID, FT_NODE, or FT_ELEM. 
INT4 nEntitySetIDThe ID of a set that contains a list of entity IDs that will be copied in 
place. Alternatively, if you specify  a negative value, this is simply 
the ID of the single entity to copy in place. 
Output:
None
Return Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
CreatePattern   API-1733
4.15.3.10  CreatePattern
CreatePattern
( nDataType, nEntitySetID )
Description:Creates copies using the pattern sp ecified by the SetVectorPattern an d/or SetCSysPattern Copy Tool 
Object Options methods and other options specified by various CopyTool Object Options Methods.
Input:
INT4 nDataTypeThe type of entities to be copied to  create a pattern. For entity infor-
mation, see Section 3.3.6, "En tity Types". Can be FT_POINT, 
FT_CURVE, FT_SURFACE, FT_SOLID, FT_NODE, or FT_ELEM. 
INT4 nEntitySetIDThe ID of a set that contains a list of entity IDs that will be copied to 
create a pattern. Alternatively, if you specify a negative value, this is 
simply the ID of the single entit y to copy to create a pattern. 
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:Either SetVectorPattern or SetCSysP attern must be set in at least on e direction, otherwise coincident 
entities will be created.
Example:None
 API-1734  CreatePattern
   API-1735
4.16  MoveTool Objects
The MoveTool object offers prog rammatic access to the capabi lities of the Modify, Move By, 
Point; Modify, Move By, Curve; Modify, Move  By, Surface; Modify, Move By, Solid; Modify, 
Move By, CSys; Modify, Move By, Node; and Mo dify, and Move By, Element commands, along 
with all the commands on the Modify, Rotate By.. .; Modify, Reflect...; and Modify, Align... menus.
All of the mentioned comman ds regarding “Geometry” of fer the same option in the Other Entities 
to Include  section ( Mesh ), while all of the mentioned comma nds regarding “Mesh” offer the same 
option in the Other Entities to Include  section ( Geometry ). In addition, all of the mentioned com-
mands regarding “Coordinate System s” offer the same option in the Other Entities to Include  sec-
tion ( Geometry and Mesh ).
In addition, all of the mentioned “Move By” commands  share the same Orient/Transform  section, 
while all of the mentioned “Rotat e By” commands share the same Orient/Transform  options, as do 
all of the mentioned “Align” co mmands. Finally, all of the “R eflect “commands have the same 
option, Trap Width , in the Reflection Options  section.
The appropriate process is to have the MoveTool Properties (see Section 4.16.1, "MoveTool 
Object Properties") and MoveTool Option Met hods (See Section 4.16.2, "MoveTool Object 
Options Methods") specified as desired before calling one on the MoveTool Object Operation 
methods (See Section 4.16.3, "MoveTool Object Operation Methods").
Use the feMoveTool method of the FEMAP App lication object to create MoveTool objects.
4.16.1  MoveTool Object Properties
Property Description
BOOL AlwaysCreateParentCSysFlag controls Always Create Parent CSys  option in the 
Approach  section of Move Options  dialog boxes. When 
enabled, a “parent” coordinate system is created and referenced by other coordinate systems created by an operation.
REAL8 ReflectionTrapWidthOnly used when using the Reflect MoveTool Operation 
method. Specifies the Trap Width  in the Reflection Options  sec-
tion of the Move Options  dialog box. See Section 4.16.3.8, 
"Reflect".
 API-1736  Clear
4.16.2  MoveTool Ob ject Options Methods
4.16.2.1  Clear
Clear
( Void )
Description:Clears everything in the MoveTool object.Input:NoneOutput:NoneReturn Code:
None
Remarks/Usage:Use to clear all values in the MoveTool object speci fied by the MoveTool Object Properties and Move-
Tool Object Options Methods. It may be a good id ea to use this method to purge the object so no 
unwanted options are used, especially if perform ing a different operation (i.e. a “Move By” command 
after using “Rotate By” command).
Example:None
IncludeOtherEntities   API-1737
4.16.2.2  IncludeOtherEntities
IncludeOtherEntities
( bGeometryOrMesh )
Description:This method has been su perseded by IncludeOther Entities2, which has an individual option for coordi-
nate systems. Specifies which ot her types of entities should be mo ved/rotated/reflected/aligned when 
finite element entities, geometri c entities, or coordinate systems are moved/rotated/reflected/aligned 
(option is found in the Other Entities to Include  section of Move Options )
Input:
BOOL bGeometryOrMeshFlag to include geometric entities as sociated to finite element entities 
being moved/rotated/reflected/aligne d or to include finite element 
entities associated to geometri c entities being moved/rotated/
reflected/aligned (True) or not (Fal se). For coordinate systems, both 
geometry and mesh will be bein g moved/rotated/reflected/aligned 
when this argument is set to True.
Output:
NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-1738  IncludeOtherEntities2
4.16.2.3  IncludeOtherEntities2
IncludeOtherEntities2
( bCoordSys, bGeometryOrMesh )
Description:Specifies which other types of entities should be mo ved/rotated/reflected/alig ned when finite element 
entities, geometric entities, and/or coordinate syst ems are moved/rotated/refl ected/aligned (option is 
found in the Other Entities to Include  section of Move Options ). This method supersedes IncludeOther-
Entities.
Input:
BOOL bCoordSysFlag to include moving coordinate  systems associated with entities 
when moving geometry, mesh , or coordinate systems.
BOOL bGeometryOrMeshFlag to include geometric entities as sociated to finite element entities 
being moved/rotated/reflected/aligne d or to include finite element 
entities associated to geometri c entities being moved/rotated/
reflected/aligned (True) or not (Fal se). For coordinate systems, both 
geometry and mesh will be bein g moved/rotated/reflected/aligned 
when this argument is set to True.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
AlongVector   API-1739
4.16.3  MoveTool Object Operation Methods
4.16.3.1  AlongVector
AlongVector
( nDataType, nEntitySetID, vDirection )
Description:Moves entities of the specified type along a user-d efined vector, using the options specified on the 
MoveTool object by the MoveTool Object Properties and MoveTool Object Options Methods
Input:
INT4 nDataTypeThe type of entities to be moved. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_SUR-
FACE, FT_SOLID, FT_NODE, or FT_ELEM. 
INT4 nEntitySetIDThe ID of a set that contains a list  of entity IDs that will be moved. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to move. 
REAL8 vDirection[0..2]The XYZ components of the vector to  move along. Must be specified 
in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
 API-1740  PointToPoint
4.16.3.2  PointToPoint
PointToPoint
( nDataType, nEntitySetID, vFrom, vTo )
Description:Moves entities of the specified type along a vector defined by from one user-def ined location to another 
user-defined location, using the options specified on the MoveTool  object by the MoveTool Object 
Properties and MoveTool Object Options Methods
Input:
INT4 nDataTypeThe type of entities to be moved. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_SUR-FACE, FT_SOLID, FT_NODE, FT_ELEM, or FT_CSYS. 
INT4 nEntitySetIDThe ID of a set that contains a list  of entity IDs that will be moved. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to move. 
REAL8 vFrom[0..2]The XYZ coordinates of the location at  the base of a vector to move 
along. Must be specified in Global Rectangular coordinates.
REAL8 vTo[0..2]The XYZ coordinates of the location at the tip of a vector to move 
along. Must be specified in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
BetweenCSys   API-1741
4.16.3.3  BetweenCSys
BetweenCSys
( nDataType, nEntitySetID, nFromCSys, nToCSys )
Description:Reorients entities of the specified ty pe by aligning the XY Z axes of the “From” coordinate system to 
XYZ axes of the “To” coordinate system, using the options specified on the MoveTool object by the 
MoveTool Object Properties and Mo veTool Object Options Methods
Input:
INT4 nDataTypeThe type of entities to be aligned. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_SUR-FACE, FT_SOLID, FT_NODE, FT_ELEM, or FT_CSYS
INT4 nEntitySetIDThe ID of a set that contains a list of entity IDs that will be aligned. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to align. 
INT4 nFromCSysThe ID of the Coordinate System to use as the “From” Coordinate 
System
INT4 nToCSysThe ID of the Coordinate System to use as the “To” Coordinate Sys-
tem
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
 API-1742  BetweenVectors
4.16.3.4  BetweenVectors
BetweenVectors
( nDataType, nEntitySetID, vFromBase, vFromDir, vToBase, vToDir )
Description:Reorients entities of the specified ty pe by moving the “From Base” lo cation to the “To Base” location, 
then aligning the vector specified by the “From” coordinates to the vector specified by “To” coordi-
nates, using the options specified  on the MoveTool object by the MoveTool Object Properties and 
MoveTool Object Options Methodss
Input:
INT4 nDataTypeThe type of entities to be aligned. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_SUR-
FACE, FT_SOLID, FT_NODE, FT_ELEM, or FT_CSYS
INT4 nEntitySetIDThe ID of a set that contains a list of entity IDs that will be aligned. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to align. 
REAL8 vFromBase[0..2]The XYZ coordinates of the location at  the base of a vector to align 
from. Must be specified in Global Rectangular coordinates.
REAL8 vFromDir[0..2]The components of the vector to align from during move. Must be 
specified in Global Rectangular coordinates.
REAL8 vToBase[0..2]The XYZ coordinates of the location at  the base of a vector to align 
to. Must be specified in Global Rectangular coordinates.
REAL8 vToDir[0..2]The components of the vector to align from during move. Must be 
specified in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
BetweenPlanes   API-1743
4.16.3.5  BetweenPlanes
BetweenPlanes
( nDataType, nEntitySetID, vFromBase, vFromNormal, vFromX, vToBase, vToNormal, 
vToX )
Description:Reorients entities of the specified ty pe by aligning the “From” plane to the “To” plane, including the 
normal direction of the planes, using the options sp ecified on the MoveTool object by the MoveTool 
Object Properties and MoveTo ol Object Options Methods
Input:
INT4 nDataTypeThe type of entities to be aligned. For entity information, see Section 
3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_SUR-
FACE, FT_SOLID, FT_NODE, FT_ELEM, or FT_CSYS
INT4 nEntitySetIDThe ID of a set that contains a list of entity IDs that will be aligned. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to align. 
REAL8 vFromBase[0..2]The XYZ coordinates of location in  the plane to align from during 
alignment. Must be specified in  Global Rectangular coordinates.
REAL8 vFromNormal[0..2]The components of a vector normal to the plane to align from during 
alignment. Must be specified in  Global Rectangular coordinates.
REAL8 vFromX[0..2]The components of a vector that specifies the "X"/control direction 
within the plane to align from during  alignment. Must be specified in 
Global Rectangular coordinates.
REAL8 vToBase[0..2]The XYZ coordinates of location in  the plane to align to during 
alignment. Must be specified in  Global Rectangular coordinates.
REAL8 vToNormal[0..2]The components of a vector normal to the plane to align to during 
alignment. Must be specified in  Global Rectangular coordinates.
REAL8 vToX[0..2]The components of a vector that specifies the "X"/control direction 
within the plane to align to during  alignment. Must be specified in 
Global Rectangular coordinates.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:None
 API-1744  BetweenPlanes
Example:
NoneBetweenPlanes
( nDataType, nEntitySetID, vFromBase, vFromNormal, vFromX, vToBase, vToNormal, 
vToX )
RotateAroundVector   API-1745
4.16.3.6  RotateAroundVector
RotateAroundVector
( nDataType, nEntitySetID, vAroundBase, vAroundDir, dAngle, dDistanceAlong )
Description:Rotates entities of the specified type around a user-def ined vector by a specified amount, in degrees, and 
optionally along the us er-defined vector a specified distance, using the options speci fied on the Move-
Tool object by the MoveTool Object Properties and MoveTool Object Options Methods
Input:
INT4 nDataTypeThe type of entities to be rotated/ moved. For entity information, see 
Section 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_-
SURFACE, FT_SOLID, FT_NODE, FT_ELEM, or FT_CSYS 
INT4 nEntitySetIDThe ID of a set that contains a list  of entity IDs that will be rotated/
moved. Alternatively, if you specify  a negative value, this is simply 
the ID of the single en tity to rotate/move. 
REAL8 vAroundBase[0..2]The XYZ coordinates of the location at  the base of a vector to rotate 
around. Must be specified in Global Rectangular coordinates.
REAL8 vAroundDir[0..2]The components of a vector to rotate around. Must be specified in 
Global Rectangular coordinates.
REAL8 dAngle The angle of rotation, in degrees.REAL8 dDistanceAlong The tota l distance along the axis of rotation, typically zero.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
 API-1746  RotatePointToPoint
4.16.3.7  RotatePointToPoint
RotatePointToPoint
( nDataType, nEntitySetID, vAroundBase, vAroundDir, vFrom, vTo )
Description:Rotates entities of the specified ty pe around a user-defined from one location to another location (loca-
tions define both angle of rotation and distance along the user-defined vector), using the options speci-
fied on the MoveTool object by the MoveTool Object Properties and MoveTool Object Options 
Methods
Input:
INT4 nDataTypeThe type of entities to be rotate /move. For entity information, see 
Section 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_-
SURFACE, FT_SOLID, FT_NODE, FT_ELEM, or FT_CSYS 
INT4 nEntitySetIDThe ID of a set that contains a list  of entity IDs that will be rotated/
moved. Alternatively, if you specify  a negative value, this is simply 
the ID of the single en tity to rotate/move. 
REAL8 vAroundBase[0..2]The XYZ coordinates of the location at  the base of a vector to rotate 
around. Must be specified in Global Rectangular coordinates.
REAL8 vAroundDir[0..2]The components of a vector to rotate around. Must be specified in 
Global Rectangular coordinates.
REAL8 vFrom[0..2]The XYZ coordinates of the location to rotate/move from. Must be 
specified in Global Rectangular coordinates.
REAL8 vTo[0..2]The XYZ coordinates of  the location to rotate/move to. Must be 
specified in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
Reflect   API-1747
4.16.3.8  Reflect
Reflect
( nDataType, nEntitySetID, vAcrossBase, vAcrossDir )
Description:Reflects entities of the specified type by reflecting them across the specified plane, using the options 
specified on the MoveTool object by the MoveTool Object Properties, including ReflectionTrapWidth, 
and MoveTool Object Options Methods. 
Input:
INT4 nDataTypeThe type of entities to be reflected . For entity information, see Sec-
tion 3.3.6, "Entity Types". Can be FT_POINT, FT_CURVE, FT_-SURFACE, FT_SOLID, FT_NODE, FT_ELEM, or FT_CSYS.
INT4 nEntitySetIDThe ID of a set that contains a list of entity IDs that will be reflected. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single entity to reflect. 
REAL8 vAcrossBase[0..2]The XYZ coordinates of the location at the base of the reflection 
plane. Must be specified in Global Rectangular coordinates.
REAL8 vAcrossDir[0..2]The components of a vector normal to the reflection plane. Must be 
specified in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_BAD_TYPEInvalid entity type. Must specify one of the types listed in nData-
Type.
Remarks/Usage:NoneExample:None
 API-1748  Reflect
   API-1749
4.17  MergeTool Objects
The MergeTool object offers programm atic access to the capabilities of the File, Merge  command.
The MergeTool Object Properties ar e used to set options in the Options  section of the Model 
Merge Manager  dialog box and some additional settings when creating a Pattern. The MergeTool 
Object Options Methods are used to sp ecify option in other sections of the Model Merge Manager , 
while the MergeTool Object Opera tion Methods are used to select the one of option available in 
the Orientation/Transform  section of the Model Merge Manager  dialog box.
The appropriate process is to have the MergeTool Properties (see Section 4.17.1, "MergeTool 
Object Properties"), MergeTool Model Selection Me thods (See Section 4.17 .2, "MergeTool Object 
Model Selection Methods"), and MergeTool Entity Selection and St atus Methods (Section 4.17.3, 
"MergeTool Object Entity Selection and Status Me thods") specified as desired before calling one 
of the MergeTool Object Operation methods (See  Section 4.17.4, "MergeTool Object Operation 
Methods").
Use the feMergeTool method of the FEMAP App lication object to crea te MergeTool objects.
4.17.1  MergeTool Object Properties
Property Description
BOOL CreateGroupForMergedFlag controls Create Group for Merged Model  option in the 
Options  section of Model Merge Manager  dialog box. When 
enabled, creates a group containing  all of the entities merged from 
the Entities to Merge list into the active or current model.
BOOL AlwaysCreateParentCSysFlag controls Create Parent CSys for Merged Model  option in the 
Options  section of Model Merge Manager  dialog box. When 
enabled, creates a “parent” Coor dinate Systems in the active or 
current model for the entities in  the Entities to Merge list. 
BOOL CondenseMergedGroupsFlag controls Condense Transferred Groups  option in the Options  
section of Model Merge Manager  dialog box. When enabled, any 
groups brought into the active or current model from the Entities to 
Merge list will be “condensed”. 
BOOL LimitToMergedEntitiesFlag controls Limit Loads, Constraints and Contact to Merged 
Entities  option in the Options  section of Model Merge Manager  
dialog box. When enabled, will onl y transfer loads, boundary con -
ditions, and connec tion entities from the From Model  or current 
model when the entities referenced by these entity types are also 
being merged into the active or current model.
BOOL KeepInOriginalSetsFlag controls Keep Loads and Constraints in Original Sets  option 
in the Options  section of Model Merge Manager  dialog box. When 
enabled, which is the default when using the Copy in Current 
Model  option, load sets and constraint sets will not be renumbered. 
BOOL UsePatternFlag controls if a “pattern” of me rge entities is created. When True, 
a “pattern” of merged entities will be created based on the settings 
for SetVectorPattern, SetCSy sPattern, and CreatePattern
 API-1750  
BOOL DuplicateFirstInPatternFlag controls if the original entitie s being duplicated in a “pattern” 
will also be duplicated.Property Description
Clear   API-1751
4.17.2  MergeTool Object  Model Selection Methods
4.17.2.1  Clear
Clear
( Void )
Description:Clears everything in the MergeTool object.Input:NoneOutput:NoneReturn Code:
None
Remarks/Usage:Use to clear all values in the MergeTool object specified by the MergeTool Object Properties and 
MergeTool Object Options Methods. It may be a good idea to use this method to purge the object so no 
unwanted options are used, especi ally if performing a different Orientation/Transform  operation (i.e. a 
“Copy” after using “Rotate” or setting a different “patte rn”). Calling this method also clears the selected 
model to be merged. You will have to r eselect a model prior to calling Merge again.
Example:None
 API-1752  SelectModel
4.17.2.2  SelectModel
SelectModel
( nModelID )
Description:Specifies the From Model  in Merge/Extract  section of the Model Merge Manager  dialog box using the 
ID of the model.
Input:INT8 nModelID The ID of the Model to be selected. Output:NoneReturn Code:FE_NOT_A V AILABLE The model specified is  not open in the current session.
FE_FAIL Unable to merge entities from the specified modelRemarks/Usage:Calling this method not only  selects the model to be merged, it al so scans the model and automatically 
sets up merging and renumbering information for the en tities in the model. In ma ny cases, if you wanted 
to merge this entire model, you w ill not need to call any further stat us or selection methods prior to 
merging.
Example:None
SelectModelByName   API-1753
4.17.2.3  SelectModelByName
SelectModelByName
( fName )
Description:Specifies the From Model  in Merge/Extract  section of the Model Merge Manager  dialog box using the 
full name or partial name of the model.
Input:STRING fName The name of the Model to be  selected. To work properly under all 
conditions, this string should cont ain the full pathname to the model 
file. For example, “C:\MyModel s\MyModel.modfem”. If you spec-
ify a string that is less than the full path name the model will still be 
selected as long as only one open model matches the string that you 
specify. Unsaved models can be se lected by specifying an empty 
string, but again, only if there is  only one model that is unsaved.
Output:NoneReturn Code:FE_NOT_A V AILABLE The model specified is  not open in the current session.
FE_FAIL Unable to merge entities from the specified modelRemarks/Usage:Calling this method not only  selects the model to be merged, it al so scans the model and automatically 
sets up merging and renumbering information for the en tities in the model. In ma ny cases, if you wanted 
to merge this entire model, you w ill not need to call any further stat us or selection methods prior to 
merging.
While it is possible to use only a por tion of the model name to specify the From Model , enough of the 
title must be used to identify one and only model,  otherwise the call will re turn FE_FAIL. If the model 
has not yet been saved, it will not have a name, enteri ng “Untitled” can potentia lly work, but is not rec-
ommended. You can use feAppGetAllModels to  retrieve the names of all open models.
Example:None
 API-1754  SelectCurrentModel
4.17.2.4  SelectCurrentModel
SelectCurrentModel
( Void )
Description:Sets the Copy in Current  option in the Merge/Extract  section of the Model Merge Manager  dialog box.
Input:NoneOutput:NoneReturn Code:FE_NOT_A V AILABLE The model specified is  not open in the current session.
FE_FAIL Unable to merge entities from the specified modelRemarks/Usage:Calling this method not only  selects the model to be merged, it al so scans the model and automatically 
sets up merging and renumbering information for the entities in the model.  In many cases, if you 
wanted to merge this entire model, you will not need to call any further status  or selection methods prior 
to merging.
Example:None
GetEntityTypes   API-1755
4.17.3  MergeTool Object Entity  Selection and Status Methods
4.17.3.1  GetEntityTypes
GetEntityTypes
( nNumTypes, nAvailableTypes )
Description:Returns available entity  types found in the From Model  or the current model if the Copy in Current 
Model  option is specified via SelectCurrentModel
Input:NoneOutput:INT4 nNumTypes Number of available entity types in the From Model .
INT4 nAvailableTypes
[0.. nNumTypes -1] Available entity types in From Model . For entity information, see 
Section 3.3.6, "Entity Types".
Return Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_FAIL Unable to retrieve the array of available entity types.
Remarks/Usage:If an entity type is not returned, then  none of those entities exist in the From Model .
Example:
Sub Main
    Dim App as femap.model    Set App = feFemap()
    Dim mt As femap.MergeTool
    Set mt = App.feMergeTool    Dim numAvail As Long
    Dim EntTypes As Variant
    'Must specify name of model which is already open in FEMAP    mt.SelectModelByName ("Test")
    mt.GetEntityTypes (numAvail, EntTypes)End Sub
 API-1756  GetEntityStatus
4.17.3.2  GetEntityStatus
GetEntityStatus
( entityType, bStatus )
Description:Retrieves the “status” of a entity type. The status speci fies if the entity type will  be merged or not into 
the To Model .
Input:
INT4 entityTypeEntity type to retrieve status. U se enum zDataType to select from 
available entity types. For entity information, see Section 3.3.6, 
"Entity Types".
Output:
BOOL bStatus If True, entity type will be merged into the To Model . If False, entity 
type will not be merged into the To Model .
Return Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_NOT_A V AILABLE The entity type specified do es not exist in the model to be merged
Remarks/Usage:NoneExample:None
GetEntityOptions   API-1757
4.17.3.3  GetEntityOptions
GetEntityOptions
( entityType, nFromSetID, nToSetID, nRenumStrategy, RenumStartAt, 
bRenumberDuplicates )
Description:Retrieves the “status” of the renumbering and du plicate options for a particular entity type.
Input:
INT4 entityTypeThe type of entity to be merged. Use enum zDataType to select from 
available entity types. For entity information, see Section 3.3.6, 
"Entity Types".
INT4 nFromSetIDThe ID of a Set object that will be filled with the IDs of the entities of 
the selected type that will be merged 
NOTE: This Set object must have  been created when the current 
model was active even though it will contain IDs from the model 
being merged.
INT4 nToSetIDThe ID of a Set object that will be filled with the IDs that merged 
entities will be renumbered to when  merged into the current model.
NOTE: This Set object must have  been created when the current 
model was active.
Output:
INT4 nRenumStrategyCurrent renumbering option specifie d for a particular entity type. 
Use enum zMergeRenumMethod.None = 0 (FMRRNM_NONE)
Minimal Renumbering = 1 (FMRRNM_MINIMAL)
Block Renumbering = 2 (FMRRNM_BLOCK)Offset Renumbering = 3 (FMRRNM_OFFSET)
Compress = 4 (FMRRNM_COMPRESS)
INT4 RenumStartAtCurrent ID specified for Renumber To  for Minimal Renumbering , 
Block Renumbering , and Compress  or Offset By  for Offset Renum-
bering .
BOOL bRenumberDuplicatesFlag indicating if Renumber Duplicates  (True) or Overwrite Dupli-
cates  (False) is currently specified.
Return Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_NOT_A V AILABLE The entity type specified do es not exist in the model to be merged
Remarks/Usage:
 API-1758  GetEntityOptions
None
Example:NoneGetEntityOptions
( entityType, nFromSetID, nToSetID, nRenumStrategy, RenumStartAt, 
bRenumberDuplicates )
SetAllStatus   API-1759
4.17.3.4  SetAllStatus
SetAllStatus
( bStatus )
Description:For the all entity types sets the optio n to merge or not merge the type
Input:
BOOL bStatusIf True, all available entity types wi ll be merged. If False, no types 
will be merged.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
Remarks/Usage:Normally this method is used to turn off merging of all entity types prior to selecting a few individual 
entity types to be merged. Since the status of most entity types is auto matically set to True when a model 
is selected, it is often not ne cessary to call this method.
Example:None
 API-1760  SetStatus
4.17.3.5  SetStatus
SetStatus
( bGeometry, bModel, bConnection, bAeroElasticity, bAnalysisAndSimulation, bResults, 
bOthers )
Description:For categories of entity types sets th e option to merge or ignore the type
Input:
BOOL bGeometryIf True, geometry types will be merged. This includes: Points, 
Curves, Surfaces, Solids  and Mesh Points 
BOOL bModelIf True, model types will be merged. This includes: Coordinate Sys-
tems, Nodes, Elements, Materials, Properties, Layups, Global Plies, Load Sets, Constraint Sets, Func tions, Tables and Data Surfaces
BOOL bConnectionIf True, connection types will be me rged. This includes: Connection 
Properties, Regions and Connections
BOOL bAeroElasticityIf True, aeroelasticity types will be merged. This includes: Aero Pan-
els, Properties, Splines and Surfaces
BOOL 
bAnalysisAndSimulationIf True, analysis and simulation typ es will be merged. This includes: 
Analysis Manager Sets, Design Op timization Data, Monitor Points 
and Direct Matrix Input Data
BOOL bResultsIf True, analysis result types will be  merged. This includes: Analysis 
Studies and Result Sets
BOOL bOthersIf True, all other types will be merged. This includes: Text, Groups, 
Layers, Views and more.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
Remarks/Usage:NoneExample:None
SetEntityStatus   API-1761
4.17.3.6  SetEntityStatus
SetEntityStatus
( entityType, bStatus )
Description:For the specified en tity type, sets the option to merge or ignore the type
Input:
INT4 entityTypeEntity type to set status. Use enum  zDataType to select from avail-
able entity types. For entity inform ation, see Section 3.3.6, "Entity 
Types".
BOOL bStatusIf True, the selected entity type w ill be merged. If False, that type 
will not be merged.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_NOT_A V AILABLE The entity type specified do es not exist in the model to be merged
Remarks/Usage:NoneExample:
Sub Main
    Dim App as femap.model
    Set App = feFemap()
    Dim mt As femap.MergeTool    Set mt = App.feMergeTool
    ‘Select the From Model by name “wingpost”
    mt.SelectModelByName("wingpost")    mt.SetStatus(False, False, False, False, False, False, False)
    mt.SetEntityStatus(FT_NODE, True)    mt.Merge( )
End Sub
 API-1762  SelectEntity
4.17.3.7  SelectEntity
SelectEntity
( bThisEntityOnly, entityType, nFromSetID, bSetInCurrentModel, nRenumStrategy, 
nRenumSrartAt, bRenumberDuplicates )
Description:Selects a Set of entities of a specif ied type to be merged. Also speci fies the renumber ing and overwriting 
options for that entity type.
Input:
BOOL bThisEntityOnlyIf True, automatically deselects all other entity types, which is the 
same as calling:     SetAllStatus(False)
     SelectEntity(False, …)
INT4 entityTypeThe type of entities to be merged. Use enum zDataType to select 
from available entity type s. For entity informatio n, see Section 3.3.6, 
"Entity Types".
INT4 nFromSetIDThe ID of a Set object that contai ns the IDs of the entities to be 
merged. This Set object can be creat ed in either model (see bSetIn-
CurrentModel argument), but must co ntain the IDs of entities in the 
model being merged.
BOOL bSetInCurrentModelIf True, the nFromSetID Set object must have been created when the 
current model was active. If False, it must have been created when 
the model being merged was active.   Set objects are linked to the 
model that is active when they are created, not when IDs are added, 
so it is important to be careful which model is active when creating 
objects. 
INT4 nRenumStrategyCurrent renumbering option specifie d for a particular entity type. 
Use enum zMergeRenumMethod.None = 0 (FMRRNM_NONE)
Minimal Renumbering = 1 (FMRRNM_MINIMAL)
Block Renumbering = 2 (FMRRNM_BLOCK)Offset Renumbering = 3 (FMRRNM_OFFSET)
Compress = 4 (FMRRNM_COMPRESS)
INT4 RenumStartAtCurrent ID specified for Renumber To  for Minimal Renumbering , 
Block Renumbering , and Compress  or Offset By  for Offset Renum-
bering .
BOOL bRenumberDuplicatesFlag indicating if Renumber Duplicates  (True) or Overwrite Dupli-
cates  (False) is currently specified.
Output:None
SelectEntity   API-1763
Return Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_NOT_A V AILABLE The entity type specifie d has not been selected to be merged
FE_NOT_EXIST No entities of the specified type exist in the model to be merged
Remarks/Usage:Calling this method will automa tically turn on the status for the spec ified entity type. There is no need 
for an additional call  to SetEntityStatus.
Selecting single entity types via this  method does not insure that you will be able to merge a valid model 
or portion of a model. Unless you really just want wh at you are selecting, you will probably need to call 
AddRelated prior to merging.
Example:
Sub Main
    Dim App as femap.model
    Set App = feFemap()    Dim mt As femap.MergeTool
    Set mt = App.feMergeTool
    Dim ndSet As femap.Set    Set ndSet = App.feSet
    ‘Set a model by name “wingpost”
    App.feAppSetModelByName("wingpost")    ndSet.Select(FT_NODE, True, "Select Nodes to Merge")
    ‘Set a different model by name “MergeModel”
    App.feAppSetModelByName("MergeModel")    ‘Select the From Model by name “wingpost”
    mt.SelectModelByName("wingpost")
    mt.SelectEntity(True,FT_NODE,ndSet.ID,False,FMRRNM_OFFSET, 
100000, True)
    mt.Merge( )
End SubSelectEntity
( bThisEntityOnly, entityType, nFromSetID, bSetInCurrentModel, nRenumStrategy, 
nRenumSrartAt, bRenumberDuplicates )
 API-1764  SelectFromGroup
4.17.3.8  SelectFromGroup
SelectFromGroup
( bThisGroupOnly, bAllEentityTypes, entityType, nFromGroupID, nRenumStrategy, 
nRenumSrartAt, bRenumberDuplicates )
Description:Selects entities of one or more types that are included  in a Group in the model to be merged. Also spec-
ifies the renumbering and overwriti ng options for those entity types.
Input:
BOOL bThisGroupOnlyIf True, automatically deselects a ll entity types other than the ones 
selected from the group, which is the same as calling:     SetAllStatus(False)
     SelectFromGroup(False, …)
BOOL bAllEntityTypesIf True, all entity types that are re ferenced in the Group are selected. 
If False, only the type specifi ed by entityType is selected.
INT4 entityTypeOnly used if bAllEntityTypes=False.  Use enum zDataType to select 
from available entity type s. For entity informatio n, see Section 3.3.6, 
"Entity Types".
INT4 nFromGroupID The ID of a Group that is defined in the model being merged. 
INT4 nRenumStrategyCurrent renumbering option specifie d for a particular entity type. 
Use enum zMergeRenumMethod.
None = 0 (FMRRNM_NONE)Minimal Renumbering = 1 (FMRRNM_MINIMAL)
Block Renumbering = 2 (FMRRNM_BLOCK)
Offset Renumbering = 3 (FMRRNM_OFFSET)Compress = 4 (FMRRNM_COMPRESS)
INT4 RenumStartAtCurrent ID specified for Renumber To  for Minimal Renumbering , 
Block Renumbering , and Compress  or Offset By  for Offset Renum-
bering .
BOOL bRenumberDuplicatesFlag indicating if Renumber Duplicates  (True) or Overwrite Dupli-
cates  (False) is currently specified.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_NOT_A V AILABLE The entity type specified do es not exist in the model to be merged
FE_NOT_EXIST No entities of the specified type exist in the model to be merged
SelectFromGroup   API-1765
Remarks/Usage:
Calling this method will auto matically turn on the status for the sp ecified entity types. There is no need 
for additional calls to SetEntityStatus.
Selecting single entity types or even  entire groups via this method does not insure that you will be able 
to merge a valid model or portion of a model. Unless you really just  want what you are selecting, you 
will probably need to call AddRelated prior to merging.
Example:NoneSelectFromGroup
( bThisGroupOnly, bAllEentityTypes, entityType, nFromGroupID, nRenumStrategy, 
nRenumSrartAt, bRenumberDuplicates )
 API-1766  AddRelated
4.17.3.9  AddRelated
AddRelated
( bAddAssociated )
Description:Selects all entities that are related (used by) the entities that are already selected to be merged
Input:
BOOL bAddAssociatedIf True, additional associated entities will be added to the selection. 
For example, if you have selected su rfaces, then if this is True any 
nodes and elements meshed on those surfaces are considered to be 
“associated” and w ill be included.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
Remarks/Usage:Use of this method is usua lly required if you are adjusting the en tity selection to insure  that a complete/
valid portion of your model will be merged. Otherw ise, you can end up merging entities that still refer-
ence other entities that do not exist in the current model.
Example:
Sub Main
    Dim App as femap.model
    Set App = feFemap()    Dim mt As femap.MergeTool
    Set mt = App.feMergeTool
    ‘Select From Model by name “wingpost”    mt.SelectModelByName("wingpost")
    mt.SetStatus(False, False, False, False, False, False, False)
    mt.SetEntityStatus(FT_ELEM, True)
    mt.AddRelated(True)
    mt.Merge( )
End Sub
ShowDialog   API-1767
4.17.3.10  ShowDialog
ShowDialog
( Void )
Description:Displays the same dialog used by the File, Merge  command 
Input:NoneOutput:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_CANCEL The dialog box was canceledRemarks/Usage:You can use this method to display the dialog at an y time. Any selections or ch anges to options that you 
do prior to calling this method will be shown in the dialog when it is displayed, and changes in the dia-
log will reflect in the object if you press “OK”. 
No merging is done when the dial og is closed. You must still manua lly call one of the merging methods.
Example:None
 API-1768  SetVectorPattern
4.17.3.11  SetVectorPattern
SetVectorPattern
( nPatternDirection, bOn, nNumberInPattern, dSpacing, vDirection )
Description:Specifies if “pattern direction” 1,  2, and/or 3 should be used when creating a pattern, as well as how 
many repetitions, spaci ng between duplicates, and direction vector for each pattern direction.
Input:INT4 nPatternDirection Pattern Direction. 0 = Direction 1, 1 = Direction 2, 2 = Direction 3
BOOL bOnWhen True, the pattern direction specified with nPatternDirection 
will be used when creating a patter n. When False, the pattern direc-
tion specified will not be considered
INT4 nNumberInPatternNumber of repetitions to make in th e direction specified in nPattern-
Direction
REAL8 dSpacingThe distance between each duplicate created in the direction speci-
fied by nPatternDirection. The tota l distance between each instance 
in the pattern is the product of “dSpacing” and the magnitude of 
“vDirection”. “dSpacing” is only th e actual distance if vDirection is 
specified as a unit vector.
REAL8 vDirection[0..2]The XYZ components of the vector to create copies along the direc-
tion specified in nPatternDirection.  Must be specified in Global 
Rectangular coordinates.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_INV ALIDVector specified for vDirection is not valid or value < 1 has been 
defined for nNumberInPattern
FE_TOO_SMALL,
FE_BAD_TYPEvDirection is not properly specified as a vector.
FE_BAD_DATA nNumberInPattern must be greater than 0
Remarks/Usage:Once all the desired pattern directions and options ha ve been specified, use CreatePattern to create 
duplicates in the specified pattern.
Example:
SetVectorPattern   API-1769
Sub Main
    Dim App As femap.model
    Set App = feFemap()    Dim mt As femap.MergeTool
    Set mt = App.feMergeTool
    Dim xyz1(2) As Double
    Dim xyz2(2) As Double
    Dim xyz3(2) As Double
    xyz1(0) = 1.0
    xyz1(1) = 0.0    xyz1(2) = 0.0
    xyz2(0) = 0.0
    xyz2(1) = 1.0
    xyz2(2) = 0.0
    xyz3(0) = 0.0
    xyz3(1) = 0.0    xyz3(2) = 1.0
    rc = mt.SetVectorPattern (0, True, 2, 1.5, xyz1)
    rc = mt.SetVectorPattern (1, True, 2, 1.5, xyz2)
    rc = mt.SetVectorPattern (2, True, 2, 1.5, xyz3)
    mt.CreatePattern (FT_SOLID, -1)
End SubSetVectorPattern
( nPatternDirection, bOn, nNumberInPattern, dSpacing, vDirection )
 API-1770  SetCSysPattern
4.17.3.12  SetCSysPattern
SetCSysPattern
( nPatternDirection, bOn, nNumberInPattern, dSpacing, nCSysID )
Description:Specifies if “pattern direction” 1,  2, and/or 3, should be used when creating a pattern, as well as how 
many repetitions, spacing between duplicates, and coor dinate system used to define pattern directions.
Input:
INT4 nPatternDirectionPattern Direction:
0 = Direction 1 (X Axis of coordinate system specified in nCSysID) 
1 = Direction 2 (Y Axis of coordinate system specified in nCSysID)2 = Direction 3 (Z Axis of coordinate system specified in nCSysID)
BOOL bOnWhen True, the pattern direction specified with nPatternDirection 
will be used when creating a patter n. When False, the pattern direc-
tion specified will not be considered
INT4 nNumberInPatternNumber of repetitions to make in th e direction specified in nPattern-
Direction
REAL8 dSpacingThe distance between each duplicate created in the direction speci-
fied by nPatternDirection. The coor dinate system axes are always 
considered as unit vectors so unlik e the SetVectorPattern method, 
“dSpacing” is always the total distance between instances.
INT4 nCSysID Coordinate System used to define the 3 pattern directions.Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_INV ALIDInvalid merging options have been specified. Possibly dSpacing is 
too small or negative, or a problem with the transformation or you 
are attempting to merge incomp lete geometric information.
FE_NOT_EXIST The specified coor dinate system does not exist.
FE_BAD_DATA nNumberInPattern must be greater than 0Remarks/Usage:Once all the desired pattern directions and options ha ve been specified, use CreatePattern to create 
duplicates in the specified pattern.
Example:
SetCSysPattern   API-1771
Sub Main
    Dim App As femap.model
    Set App = feFemap()
    Dim mt As femap.MergeTool
    Set mt = App.feMergeTool
    rc = mt.SetCSysPattern (0, True, 3, 1.5, 3)
    rc = mt.SetCSysPattern (1, True, 3, 1.5, 3)    rc = mt.SetCSysPattern (2, True, 2, 2.5, 3)
    mt.CreatePattern(FT_SOLID, -1)End SubSetCSysPattern
( nPatternDirection, bOn, nNumberInPattern, dSpacing, nCSysID )
 API-1772  Merge
4.17.4  MergeTool Obj ect Operation Methods
4.17.4.1  Merge
Merge
( Void )
Description:Merges all of the selected entities into the current model Input:NoneOutput:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_INV ALIDInvalid merging options have been specified. Possibly a renumbering 
problem, a problem with the transf ormation or you are attempting to 
merge incomplete geometric information.
FE_FAIL Merging of selected entities failed.Remarks/Usage:This method is used to merge entiti es into the current model at the same  location where they exist in the 
selected model. Other methods a llow you to specify transforms to apply during the merge.
Example:None
AlongVector   API-1773
4.17.4.2  AlongVector
AlongVector
( vDirection )
Description:Merges all of the selected entities into the cu rrent model and transforms them along a vector
Input:
REAL8 vDirection[0..2]The components of a vector specify ing the direction and distance to 
offset the merged entities. Must be  specified in Global Rectangular 
coordinates.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_INV ALIDInvalid merging options have been specified. Possibly a renumbering 
problem, a problem with the transf ormation or you are attempting to 
merge incomplete geometric information.
FE_FAIL Merging of selected entities failed.FE_TOO_SMALL,
FE_BAD_TYPEvDirection is not properly specified as a vector.
Remarks/Usage:
NoneExample:None
 API-1774  PointToPoint
4.17.4.3  PointToPoint
PointToPoint
( vFrom, vTo )
Description:Merges all of the selected entities into the current  model and transforms them from one specified loca-
tion to another
Input:
REAL8 vFrom[0..2]The XYZ coordinates of the location at  the base of a vector to move 
along. Must be specified in Global Rectangular coordinates.
REAL8 vTo[0..2]The XYZ coordinates of the location at the tip of a vector to move 
along. Must be specified in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_INV ALIDInvalid merging options have been specified. Possibly a renumbering 
problem, a problem with the transf ormation or you are attempting to 
merge incomplete geometric information.
FE_FAIL Merging of selected entities failed.FE_TOO_SMALL,
FE_BAD_TYPEOne of the arguments is not pr operly specified as a location
Remarks/Usage:
NoneExample:None
BetweenCSys   API-1775
4.17.4.4  BetweenCSys
BetweenCSys
( nFromCSys, nToCSys )
Description:Merges all of the selected entities in to the current model and transforms  them to align from one location 
and orientation to another
Input:
INT4 nFromCSysThe ID of the Coordinate System to use as the “From” Coordinate 
System
INT4 nToCSysThe ID of the Coordinate System to use as the “To” Coordinate Sys-
tem
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_NOT_EXIST One or both of the coordinate systems do not exist.
FE_INV ALIDInvalid merging options have been specified. Possibly a renumbering 
problem, a problem with the transf ormation or you are attempting to 
merge incomplete geometric information.
FE_FAIL Merging of selected entities failed.Remarks/Usage:NoneExample:None
 API-1776  BetweenVectors
4.17.4.5  BetweenVectors
BetweenVectors
( vFromBase, vFromDir, vToBase, vToDir )
Description:Merges all of the selected entities into the current  model and transforms them by moving the “From-
Base” location to the “ToBase” loca tion and then aligning the “FromD ir” vector to the “ToDir” vector
Input:
REAL8 vFromBase[0..2]The XYZ coordinates of the location at  the base of a vector to align 
from. Must be specified in Global Rectangular coordinates.
REAL8 vFromDir[0..2]The components of the vector to align from during merge. Must be 
specified in Global Rectangular coordinates.
REAL8 vToBase[0..2]The XYZ coordinates of the location at  the base of a vector to align 
to. Must be specified in Global Rectangular coordinates.
REAL8 vToDir[0..2]The components of the vector to align to during merge. Must be 
specified in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_INV ALIDInvalid merging options have been specified. Possibly a renumbering 
problem, a problem with the transf ormation or you are attempting to 
merge incomplete geometric information.
FE_FAIL Merging of selected entities failed.FE_TOO_SMALL,
FE_BAD_TYPEOne of the arguments is not proper ly specified as a location or vector
Remarks/Usage:
NoneExample:None
BetweenPlanes   API-1777
4.17.4.6  BetweenPlanes
BetweenPlanes
( vFromBase, vFromNormal, vFromX, vToBase, vToNormal, vToX )
Description:Merges all of the selected entities into the current model and transforms them by aligning the “From” 
plane to the “To” plane, including the normal direction of the planes
Input:
REAL8 vFromBase[0..2]The XYZ coordinates of location in  the plane to align from during 
alignment. Must be specified in  Global Rectangular coordinates.
REAL8 vFromNormal[0..2]The components of a vector normal to the plane to align from during 
alignment. Must be specified in  Global Rectangular coordinates.
REAL8 vFromX[0..2]The components of a vector that specifies the “X”/control direction 
within the plane to align from during  alignment. Must be specified in 
Global Rectangular coordinates.
REAL8 vToBase[0..2]The XYZ coordinates of location in  the plane to align to during 
alignment. Must be specified in  Global Rectangular coordinates.
REAL8 vToNormal[0..2]The components of a vector normal to the plane to align to during 
alignment. Must be specified in  Global Rectangular coordinates.
REAL8 vToX[0..2]The components of a vector that specifies the “X”/control direction 
within the plane to align to during  alignment. Must be specified in 
Global Rectangular coordinates.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_INV ALIDInvalid merging options have been specified. Possibly a renumbering 
problem, a problem with the transf ormation or you are attempting to 
merge incomplete geometric information.
FE_FAIL Merging of selected entities failed.FE_TOO_SMALL,
FE_BAD_TYPEOne of the arguments is not proper ly specified as a location or vector
Remarks/Usage:
NoneExample:
 API-1778  BetweenPlanes
NoneBetweenPlanes
( vFromBase, vFromNormal, vFromX, vToBase, vToNormal, vToX )
RotateAroundVector   API-1779
4.17.4.7  RotateAroundVector
RotateAroundVector
( vAroundBase, vAroundDir, dAngle, dDistanceAlong )
Description:Merges all of the selected entities into the current  model and transforms them by rotating around and 
optionally moving along the specified vector 
Input:
REAL8 vAroundBase[0..2]The XYZ coordinates of the location at  the base of a vector to rotate 
around. Must be specified in Global Rectangular coordinates.
REAL8 vAroundDir[0..2]The components of a vector to rotate around. Must be specified in 
Global Rectangular coordinates.
REAL8 dAngle The angle of rotation, in degrees.REAL8 dDistanceAlong The tota l distance along the axis of rotation, typically zero.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_INV ALIDInvalid merging options have been specified. Possibly a renumbering 
problem, a problem with the transf ormation or you are attempting to 
merge incomplete geometric information.
FE_FAIL Merging of selected entities failed.FE_TOO_SMALL,
FE_BAD_TYPEOne of the arguments is not proper ly specified as a location or vector
Remarks/Usage:
NoneExample:None
 API-1780  RotatePointToPoint
4.17.4.8  RotatePointToPoint
RotatePointToPoint
( vAroundBase, vAroundDir, vFrom, vTo )
Description:Merges all of the selected entities into the current model and transfor ms them by rota ting around a spec-
ified vector from one location to another 
Input:
REAL8 vAroundBase[0..2]The XYZ coordinates of the location at  the base of a vector to rotate 
around. Must be specified in Global Rectangular coordinates.
REAL8 vAroundDir[0..2]The components of a vector to rotate around. Must be specified in 
Global Rectangular coordinates.
REAL8 vFrom[0..2]The XYZ coordinates of the location to rotate/move from. Must be 
specified in Global Rectangular coordinates.
REAL8 vTo[0..2]The XYZ coordinates of  the location to rotate/move to. Must be 
specified in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_INV ALIDInvalid merging options have been specified. Possibly a renumbering 
problem, a problem with the transf ormation or you are attempting to 
merge incomplete geometric information.
FE_FAIL Merging of selected entities failed.FE_TOO_SMALL,
FE_BAD_TYPEOne of the arguments is not proper ly specified as a location or vector
Remarks/Usage:
NoneExample:None
Reflect   API-1781
4.17.4.9  Reflect
Reflect
( vAcrossBase, vAcrossDir )
Description:Merges all of the selected entities into the current model and transforms them by reflecting across a 
specified plane 
Input:
REAL8 vAcrossBase[0..2]The XYZ coordinates of the location at the base of the reflection 
plane. Must be specified in Global Rectangular coordinates.
REAL8 vAcrossDir[0..2]The components of a vector normal to the reflection plane. Must be 
specified in Global Rectangular coordinates.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_INV ALIDInvalid merging options have been specified. Possibly a renumbering 
problem, a problem with the transf ormation or you are attempting to 
merge incomplete geometric information.
FE_FAIL Merging of selected entities failed.FE_TOO_SMALL,
FE_BAD_TYPEOne of the arguments is not proper ly specified as a location or vector
Remarks/Usage:
NoneExample:None
 API-1782  CreatePattern
4.17.4.10  CreatePattern
CreatePattern
( vInitialOffset )
Description:Merges multiple copies of the sel ected entities using the Pattern optio ns specified by the SetVectorPat-
tern or SetCSysPattern methods
Input:
REAL8 vInitialOffset[0..2]The components of a vector used to offset the entire pattern from the 
merged entities location in the model being merged.
Output:NoneReturn Code:
FE_NO_FILENAMENo model has been selected to merge. You must always select the 
model to merge first before other methods.
FE_NOT_A V AILABLE No pattern info has been specified
FE_INV ALIDInvalid merging options have been specified. Possibly a renumbering 
problem, a problem with the transf ormation or you are attempting to 
merge incomplete geometric information.
FE_TOO_SMALL,
FE_BAD_TYPEThe specified offset or one of the pattern vectors not properly speci-
fied or is too small.
FE_BAD_DATA nNumberInPattern must be greater than 0Remarks/Usage:NoneExample:None
   API-1783
4.18  Results Vector  ID Query Objects
The Results Vector ID Query Object is used to determine the ID of an output vector for a nodal 
output vector, an elemental output vector (based on element topology and/ or type), a complex out-
put vector, or user output vector. There are also methods available which return a range of related 
Output Vector IDs for the specified  output quantity. The purpose of th is object is to allow the user 
to find specific output vector IDs without having  to open the FEMAP user interface and view the 
IDs in an existing put set.
In addition, there is a method which “finds” an output vector ID based on the output vector title.
To make these methods easier to use, constants (enumerations) have been created for the various 
arguments, which are described in Section 4.18.1, "Results Vector ID Query Constants (Enumera-
tions)"
There are no properties on Results Vector ID Query Object, but the available methods can be 
found in Section 4.18.2, "Results Vector ID Query Object Methods"
Use the feResultsIDQuery method of the FEMAP Application object to create Results Vector ID 
Query objects.
4.18.1  Results Vector ID Qu ery Constants (Enumerations)
This section contains constants (enumerations) fo r the arguments of all methods of the Results 
Vector ID Query Object, other than the Find  method. For more in formation about the Find  
method, see Section 4.18.2.1, "Find".
For more information on each  method’s enumerations:
Nodal  and NodalWithComponents  - See Section 4.18.1.1, "Const ants for Nodal and NodalWith-
Components Methods"
NodalOther  - See Section 4.18.1.2, "Const ants for NodalOther Method"
Line and LineAllLocations  - See Section 4.18.1.3, "Constants for Line and LineAllLocations 
Methods"
LineOther  - See Section 4.18.1.4, "Constants for LineOther Method"
Plate , PlateWithCorners , Laminate , LaminateWithCorners , LaminateGlobalPly , and LaminateGo-
lbolPlyWithCorners  - See Section 4.18.1.5, "Constan ts for Planar Element Methods"
PlateOther  - See Section 4.18.1.6, "Constants for PlateOther Method"
Solid  and SolidWithCorners  - See Section 4.18.1.8, "Con stants for SolidOther Method"
SolidOther  - See Section 4.18.1.8, "Const ants for SolidOther Method"
LaminateSolid , LaminateSolidWithCorners , LaminateSolidGlobalPly  and LaminateSolidG-
lobalPlyWithCorners  - See Section 4.18.1.9, "Constants for Sold Laminate Element Methods"
Elemental  - See Section 4.18.1.10, "C onstants for Elemental Method"
Complex  - Only has 4 constants, which are documented in the method. See Section 4.18.2.23, 
"Complex"
User  - Has no constants. Section 4.18.2.24, "User"
 API-1784  
4.18.1.1  Constants for Nodal and NodalWithComponents Methods
The following table provides the lis t of available constants for ve ctor-based nodal output quantities 
(enum zVecNodalResult)
The following table provides the list of ava ilable constants for vector-based nodal output  types, 
component or resultant (enum zVecNodalType)Constant Name Constant Name
VNV_TRANSLATION 0 VNV_GP_MPC_FORCE 18
VNV_ROTATION 1 VNV_GP_MPC_MOMENT 19VNV_VELOCITY 2 VNV_GP_DRILLING_FORCE 20VNV_ANG_VELOCITY 3 VNV_GP_DRILLING_MOMENT 21VNV_ACCELERATION 4 VNV_GP_CONTACT_FORCE 22VNV_ANG_ACCELERATION 5 VNV_GP_CONTACT_MOMENT 23VNV_APPLIED_FORCE 6 VNV_CONTACT_TRACTION 24VNV_APPLIED_MOMENT 7 VNV_CONTACT_FORCE 25VNV_CONSTRAINT_FORCE 8 VNV_GLUE_TRACTION 26
VNV_CONSTRAINT_MOMENT 9 VNV_GLUE_FORCE 27
VNV_MPC_FORCE 10 VNV_GLUE_MOMENT 28VNV_MPC_MOMENT 11 VNV_CONTACT_INCSLIDEDISTANCE 29VNV_GP_TOTAL_FORCE 12 VNV_CONTACT_SLIDEDISTANCE 30VNV_GP_TOTAL_MOMENT 13 VNV_GLUE_INCSLIDEDISTANCE 31VNV_GP_APPLIED_FORCE 14 VNV_GLUE_SLIDEDISTANCE 32VNV_GP_APPLIED_MOMENT 15 VNV_AERO_TRANSLATION 33VNV_GP_CONSTRAINT_FORCE 16 VNV_AERO_ROTATION 34VNV_GP_CONSTRAINT_MOMENT 17
Constant Name Constant Name
VNT_TOTAL_NONE 0 VNT_Y 2VNT_X 1 VNT_Z 3
   API-1785
4.18.1.2  Constants for NodalOther Method
The following table provides the list of available constants for s calar nodal output quantities (enum 
zVecNodalScalar):
4.18.1.3  Constants for Line and LineAllLocations Methods
The following table provides the list of availa ble constants for output quantities which may be 
available for Bar, Beam, or Weld elements (enum zVecLineResult):Constant Name Constant Name
VNS_TEMPERATURE 0 VNS_CONTACT_NORMALFORCE 12
VNS_THERMAL_CONSTRAINTFORCE 1 VNS_CONTACT_FRICTIONFORCE 13VNS_THERMAL_APPLIEDLOAD 2 VNS_CONTACT_NORMALSTRESS 14VNS_PRESSURE 3 VNS_CONTACT_FRICTIONSTRESS1 15VNS_ENTHALPY 4 VNS_CONTACT_FRICTIONSTRESS2 16VNS_ENTHALPY_CHANGE 5 VNS_CONTACT_X_FORCE 17VNS_THERMAL_MULTIPOINTFORCE 6 VNS_CONTACT_Y_FORCE 18VNS_CONTACT_PRESSURE 7 VNS_CONTACT_Z_FORCE 19VNS_CONTACT_INISEPDIST 8 VNS_CONTACT_X_FRICTIONFORCE 20
VNS_CONTACT_DEFSEPDIST 9 VNS_CONTACT_Y_FRICTIONFORCE 21
VNS_GLUE_PRESSURE 10 VNS_CONTACT_Z_FRICTIONFORCE 22VNS_CONTACT_STATUS 11 VNS_COMPLEX_MODE_SHAPE 23
Constant Name Constant Name
VLV_AXIAL_FORCE 0 VLV_STRESS_TENSION_MARGIN 11VLV_TORQUE 1 VLV_STRESS_COMPRESSION_MARGIN 12VLV_TORQUE_WARPING 2 VLV_STRAIN_AXIAL 13VLV_MOMENT_PLANE1 3 VLV_STRAIN_BENDING 14VLV_MOMENT_PLANE2 4 VLV_STRAIN_COMBINED 15VLV_SHEAR_PLANE1 5 VLV_STRAIN_PLASTIC 16VLV_SHEAR_PLANE2 6 VLV_STRAIN_CREEP 17VLV_STRESS_AXIAL 7 VLV_STRAIN_TOTAL 18VLV_STRESS_BENDING 8 VLV_STRAIN_TENSION_MARGIN 19VLV_STRESS_COMBINED 9 VLV_STRAIN_COMPRESSION_MARGIN 20VLV_STRESS_EQUIV ALENT 10
 API-1786  
The following table provides the list of availabl e constants for element ty pe for output quantities 
on line elements (enum zVecLineElemType):
The following table provides the lis t of available constants to speci fy which end of the line element 
for output quantities on line elements (enum zVecLineEnd):
The following table provides the list of availabl e constants for stress recovery location for output 
quantities on line elements (enum zVecLineLoc):
4.18.1.4  Constants for LineOther Method
The following table provides the list of available constants to select a scalar output quantity on line 
elements (enum zVecLineOther).
Spring Element (non-CBUSH) Output:
Rod Element Output:Constant Name Constant Name
VLT_BAR 0 VLT_WELD 2
VLT_BEAM 1
Constant Name Constant Name
VLE_OVERALL 0 VLE_B 2VLE_A 1
Constant Name Constant Name
VLL_OVERALL 0 VLL_2 4VLL_MAX 1 VLL_3 5VLL_MIN 2 VLL_4 6VLL_1 3
Constant Name Constant Name
VLO_SPRING_FORCE 0 VLO_SPRING_STRAIN 2VLO_SPRING_STRESS 1
Constant Name Constant Name
VLO_ROD_AXIAL_FORCE 3 VLO_ROD_STRAIN_AXIAL 10VLO_ROD_TORQUE 4 VLO_ROD_STRAIN_TORSIONAL 11VLO_ROD_STRESS_AXIAL 5 VLO_ROD_STRAIN_PLASTIC 12VLO_ROD_STRESS_TORSIONAL 6 VLO_ROD_STRAIN_CREEP 13VLO_ROD_STRESS_EQUIV ALENT 7 VLO_ROD_STRAIN_TOTAL 14VLO_ROD_STRESS_AXIAL_MARGIN 8 VL O_ROD_STRAIN_AXIAL_MARGIN 15
   API-1787
Gap Element Output:
Bush Element Output:
Bush/Fastener Element Output:
Other Weld Element Output:VLO_ROD_STRESS_TORSIONAL
_MARGIN9VLO_ROD_STRAIN_TORSIONAL
_MARGIN16
Constant Name Constant Name
VLO_GAP_DISPLACEMENT_AXI AL 17 VLO_GAP_SLIP_W 21
VLO_GAP_DISPLACEMENT_V 18 VLO_GAP_FORCE_X 22VLO_GAP_DISPLACEMENT_W 19 VLO_GAP_FORCE_Y 23VLO_GAP_SLIP_V 20 VLO_GAP_FORCE_Z 24
Constant Name Constant Name
VLO_BUSH_AXIAL_FORCE 25 VL O_BUSH_AXIAL_STRESS 28
VLO_BUSH_AXIAL_DISPLACEMENT 26 VLO_BUSH_AXIAL_STRAIN 29VLO_BUSH_AXIAL_VELOCITY 27 VLO_ BUSH_AXIAL_PLASTIC_STRAIN 30
Constant Name Constant Name
VLO_BUSHFAST_FORCE_X 31 VLO_BUSHFAST_STRESS_RX 40
VLO_BUSHFAST_FORCE_Y 32 VLO_BUSHFAST_STRESS_RY 41VLO_BUSHFAST_FORCE_Z 33 VLO_BUSHFAST_STRESS_RZ 42VLO_BUSHFAST_MOMENT_X 34 VLO_BUSHFAST_STRAIN_TX 43VLO_BUSHFAST_MOMENT_Y 35 VLO_BUSHFAST_STRAIN_TY 44VLO_BUSHFAST_MOMENT_Z 36 VLO_BUSHFAST_STRAIN_TZ 45VLO_BUSHFAST_STRESS_TX 37 VLO_BUSHFAST_STRAIN_RX 46VLO_BUSHFAST_STRESS_TY 38 VLO_BUSHFAST_STRAIN_RY 47VLO_BUSHFAST_STRESS_TZ 39 VLO_BUSHFAST_STRAIN_RZ 48
Constant Name Constant Name
VLO_WELD_AXIAL_STRESS 49 VLO_WELD_BEARING_STRESS 51VLO_WELD_MAX_SHEAR_STRESS 50Constant Name Constant Name
 API-1788  
4.18.1.5  Constants for Planar Element Methods
The following table provides the list of availabl e constants for vector-based and tensor output 
quantities on planar elements and laminates, with  or without global piles (enum zVecPlateResult)
The following table provides the list of availabl e constants for the various types of output quanti-
ties on planar elements and laminates, with or without global piles (enum zVecPlateType)
The following table provides the list of available co nstants to specify if the output is at the top, 
middle, or bottom of a plate element (enum zVecPlatePly)
The following table provides the list of available consta nts to specify if the outp ut is at the centroid 
or an individual corner of a planar or laminate element (enum zVecPlateLoc)Constant Name Constant Name
VPV_FORCE 0 VPV_NONLINEAR_STRESS 6
VPV_MOMENT 1 VPV_NONLINEAR_STRAIN 7VPV_STRESS 2 VPV_CURV ATURE 8VPV_STRAIN 3 VPV_ELASTIC_CURV ATURE 9VPV_ELASTIC_STRAIN 4 VPV_THERMAL_CURV ATURE 10VPV_THERMAL_STRAIN 5
Constant Name Constant Name
VPT_VON_MISES 0 VPT_X 7VPT_MAX_PRIN 1 VPT_Y 8VPT_MIN_PRIN 2 VPT_Z 9VPT_MID_PRIN 3 VPT_XY 10VPT_MAX_SHEAR 4 VPT_YZ 11VPT_ANG_PRIN 5 VPT_XZ 12VPT_MEAN 6
Constant Name Constant Name
VPP_TOP 0 VPP_BOT 3VPP_MID 1
Constant Name Constant Name
VPL_CENTROID 0 VPL_3 4VPL_1 1 VPL_4 5VPL_2 3
   API-1789
4.18.1.6  Constants for PlateOther Method
The following table provides the list of available constants to select a scalar output quantity on pla-
nar elements (enum zVecPlateScalar).
Shear Element Output:
Axisymmetric Element Linear Stress Output:
Axisymmetric Element Li near Strain Output:Constant Name Constant Name
VPS_SHEAR_1FROM4 0 VPS_SHEAR_KICK3 12
VPS_SHEAR_1FROM2 1 VPS_SHEAR_KICK4 13VPS_SHEAR_2FROM1 2 V PS_SHEAR_FLOW12 14
VPS_SHEAR_2FROM3 3 V PS_SHEAR_FLOW23 15
VPS_SHEAR_3FROM2 4 V PS_SHEAR_FLOW34 16
VPS_SHEAR_3FROM4 5 V PS_SHEAR_FLOW41 17
VPS_SHEAR_4FROM3 6 VPS_SHEAR_MAXSHEAR 18VPS_SHEAR_4FROM1 7 VPS_SHEAR_A VGSHEAR 19VPS_SHEAR_13DIAG 8 VPS_SH EAR_MAXSHEARSTRAIN 20
VPS_SHEAR_24DIAG 9 VPS_SHEAR_A VGSHEARSTRAIN 21VPS_SHEAR_KICK1 10 VPS_SH EAR_MARGINOFSAFETY 22
VPS_SHEAR_KICK2 11 VPS_SHEA R_STRAINMARGINOFSAFETY 23
Constant Name Constant Name
VPS_AXISYM_RADIALSTRESS 24 VPS_AXISYM_MINPRINSTRESS 29
VPS_AXISYM_AZIMUTHSTRESS 25 VPS_AXISYM_MAXSHEARSTRESS 30VPS_AXISYM_AXIALSTRESS 26 VPS_AXISYM_OCTAHEDRALSTRESS 31VPS_AXISYM_SHEARSTRESS 27 VPS_AXISYM_VONMISESSTRESS 32VPS_AXISYM_MAXPRINSTRESS 28
Constant Name Constant Name
VPS_AXISYM_RADIALSTRAIN 33 VPS_AXISYM_MINPRINSTRAIN 38VPS_AXISYM_AZIMUTHSTRAIN 34 VPS_AXISYM_MAXSHEARSTRAIN 39VPS_AXISYM_AXIALSTRAIN 35 VPS_AXISYM_OCTAHEDRALSTRAIN 40VPS_AXISYM_SHEARSTRAIN 36 VPS_AXISYM_VONMISESSTRAIN 41VPS_AXISYM_MAXPRINSTRAIN 37
 API-1790  
Axisymmetric Element No nlinear Stress Output:
Axisymmetric Element No nlinear Strain Output:
Axisymmetric Element Linear and Nonlin ear Effective Plastic Strain Output:
Axisymmetric Element Linear and Nonl inear Effective Creep Strain Output:
Axisymmetric Element Radial Force Output:
Axisymmetric Element Azimuth Force Output:
Axisymmetric Element Axial Force Output:Constant Name Constant Name
VPS_AXISYM_RADIALSTRESSNL 42 VPS_AXISYM_SHEARSTRESSNL 45
VPS_AXISYM_AZIMUTHSTRESSNL 43 VPS_AXISYM_VONMISESSTRESSNL 46
VPS_AXISYM_AXIALSTRESSNL 44
Constant Name Constant Name
VPS_AXISYM_RADIALSTRAINNL 47 VPS_AXISYM_AXIALSTRAINNL 49VPS_AXISYM_AZIMUTHSTRAINNL 48 VPS_AXISYM_SHEARSTRAINNL 50
Constant Name Constant Name
VPS_AXISYM_EFFPLASTICSTRAIN 51 V PS_AXISYM_EFFPLASTICSTRAINNL 53
Constant Name Constant Name
VPS_AXISYM_EFFCREEPSTRAIN 52 V PS_AXISYM_EFFCREEPSTRAINNL 54
Constant Name Constant Name
VPS_AXISYM_RADIALFORCE1 55 VPS_AXISYM_RADIALFORCE3 57
VPS_AXISYM_RADIALFORCE2 56 VPS_AXISYM_RADIALFORCE4 58
Constant Name Constant Name
VPS_AXISYM_AZIMUTHFORCE1 59 V PS_AXISYM_AZIMUTHFORCE3 61
VPS_AXISYM_AZIMUTHFORCE2 60 V PS_AXISYM_AZIMUTHFORCE4 62
Constant Name Constant Name
VPS_AXISYM_AXIALFORCE1 63 VPS_AXISYM_AXIALFORCE3 65
VPS_AXISYM_AXIALFORCE2 64 VPS_AXISYM_AXIALFORCE4 66
   API-1791
Axisymmetric Element Linear and Nonlinear Mean Stress and V olumetric Strain Output:
Plate Fiber Output:
Laminate Max Failure Indices an d Min Strength Ratio Output:
4.18.1.7  Constants for Solid Element Methods
The following table provides the list of available constants for stress, nonlinear stress, strain, and 
nonlinear strain output quantities on solid elements and solid laminates, with or without global 
piles (enum zVecSolidResult)
The following table provides the list of availabl e constants for the various types of output quanti-
ties on solid elements and solid laminates, with or without gl obal piles (enum zVecSolidType)Constant Name Constant Name
VPS_AXISYM_MEANPRESSURE 67 V PS_AXISYM_VOLUMETRICSTRAIN 68
VPS_AXISYM_MEANPRESSURENL 69 V PS_AXISYM_VOLUMETRICSTRAINNL 70
Constant Name Constant Name
VPS_FIBER_TOP 70 VPS_FIBER_TOPTHERMAL 74
VPS_FIBER_BOTTOM 71 VPS_FIBER_BOTTOMTHERMAL 75VPS_FIBER_TOPNL 72 VPS_FIBER_TOPELASTIC 76VPS_FIBER_BOTTOMNL 73 VPS_FIBER_BOTTOMELASTIC 77
Constant Name Constant Name
VPS_LAMINATE_MAXFAILUREINDEX 78 V PS_LAMINATE_MINSTRENGTHRATIO 79
Constant Name Constant Name
VSV_STRESS 0 VSV_NONLINEAR_STRESS 2
VSV_STRAIN 1 VSV_NONLINEAR_STRAIN 3
Constant Name Constant Name
VST_X 0 VST_INT_PRIN 8VST_Y 1 VST_MAX_SHEAR 9VST_Z 2 VST_MEAN 10VST_XY 3 VST_VON_MISES 11VST_YZ 4 VST_OCT_SHEAR 12VST_ZX 5 VST_PLASTIC 13VST_MAX_PRIN 6 VST_CREEP 14VST_MIN_PRIN 7 VST_VOLUMETRIC 15
 API-1792  
The following table provides the list of available consta nts to specify if the outp ut is at the centroid 
or an individual corner of a solid or solid laminate element (enum zVecSolidLoc)
4.18.1.8  Constants for SolidOther Method
The following table provides the list of available constants to select a sc alar output quantity on 
solid elements (enum zVecSolidOther).
Solid Bolt Output:
Cohesive Element OutputConstant Name Constant Name
VPL_CENTROID 0 VPL_5 5
VPL_1 1 VPL_6 6VPL_2 2 VPL_6 7VPL_3 3 VPL_8 8VPL_4 4
Constant Name Constant Name
VSO_BOLT_AXIALFORCE 0 VSO_BOLT_MOMENT1 3VSO_BOLT_SHEARFORCE1 1 VSO_BOLT_MOMENT2 4VSO_BOLT_SHEARFORCE2 2 VSO_BOLT_INITAXIALSTRAIN 5
Constant Name Constant Name
VSO_COHESIVE_NORMRELSEP 6 VSO_COHESIVE_YSHEARSTRESS 16VSO_COHESIVE_XRELDISP 7 VSO_COHESIVE_ZSHEARSTRESS 17VSO_COHESIVE_YRELDISP 8 VSO_COHESIVE_MATCSID 18VSO_COHESIVE_ZRELDISP 9 VSO_COHESIVE_XSTRESS 19VSO_COHESIVE_RELMATCS 10 VSO_COHESIVE_YSTRESS 20VSO_COHESIVE_XRELDISPMATCS 11 VSO_COHESIVE_ZSTRESS 21VSO_COHESIVE_YRELDISPMATCS 12 VSO_COHESIVE_DAMAGE1 22
VSO_COHESIVE_ZRELDISPMATCS 13 VSO_COHESIVE_DAMAGE2 23VSO_COHESIVE_NORMALSTRESS 14 VSO_COHESIVE_DAMAGE3 24VSO_COHESIVE_XSHEARSTRESS 15
   API-1793
4.18.1.9  Constants for Sold Laminate Element Methods
The following table provides the list of available co nstants for stress, strain, failure, and strength 
ratio output quantities on solid la minate elements, with or withou t global piles (enum zVecSolid-
LamResult)
The following table provides the list of availabl e constants for the various types of output quanti-
ties on solid elements and solid la minates, with or without glob al piles (enum zVecSolidLamType)
The following table provides the list of available co nstants to specify if the output is at the top, 
middle, or bottom of a ply in a solid laminate element (enum zVecSolidLamLoc)
4.18.1.10  Constants for Elemental Method
The following table provides the lis t of available constants to sel ect output quantities for elements 
which are not available using the other meth ods for elemental output, by shape (enum 
zVecElemOther).
Strain Energy Output:Constant Name Constant Name
VSLV_STRESS 0 VSLV_FAILURE 2
VSLV_STRAIN 1 VSLV_STRENGTHRATIO 3
Constant Name Constant Name
VSLT_X 0 VSLT_MEAN 10VSLT_Y 1 VSLT_VON_MISES 11VSLT_Z 2 VSLT_PLY_11 12
VSLT_XY 3 VSLT_PLY_22 13
VSLT_YZ 4 VSLT_PLY_33 14VSLT_ZX 5 VSLT_PLY_12 15VSLT_MAX_PRIN 6 VSLT_PLY_23 16VSLT_MIN_PRIN 7 VSLT_PLY_13 17VSLT_MID_PRIN 8 VSLT_BOND 18VSLT_MAX_SHEAR 9
Constant Name Constant Name
VSLL_TOP 0 VSLL_BOT 3VSLL_MID 1
Constant Name Constant Name
VEO_STRAIN_ENERGY 0 VEO_ STRAIN_ENERGY_DENSITY 2
VEO_STRAIN_ENERGY_PERCENT 1
 API-1794  
Heat Transfer Output:
Kinetic Energy and Energy Loss Output:
Crack Stress Output
Gasket Element Output:
Fluid Pressure and Normalized Mass De nsity (Topology Optimization) Output:Constant Name Constant Name
VEO_TEMP_GRADIENT_X 3 VEO_HEAT_FLUX_TOTAL 10
VEO_TEMP_GRADIENT_Y 4 VEO_APPLIED_LOAD 11VEO_TEMP_GRADIENT_Z 5 VEO_CONVECTION_FREE 12VEO_TEMP_GRADIENT_TOTAL 6 VEO_CONVECTION_FORCED 13VEO_HEAT_FLUX_X 7 VEO_RADIATION 14VEO_HEAT_FLUX_Y 8 VEO_HEAT_FLOW_TOTAL 15VEO_HEAT_FLUX_Z 9
Constant Name Constant Name
VEO_KINETIC_ENERGY 16 VEO_ENERGY_LOSS_PERCENT 28VEO_ENERGY_LOSS 26 VEO_KINETIC_ENERGY_DENSITY 29VEO_ENERGY_LOSS_DENSITY 27 VEO_KINETIC_ENERGY_PERCENT 30
Constant Name Constant Name
VEO_CRACK_STRESS_1 17 VEO_CRACK_STRESS_6 22VEO_CRACK_STRESS_2 18 VEO_CRACK_STRESS_7 23VEO_CRACK_STRESS_3 19 VEO_CRACK_STRESS_8 24VEO_CRACK_STRESS_4 20 VEO_CRACK_STRESS_9 25VEO_CRACK_STRESS_5 21
Constant Name Constant Name
VEO_GASKET_PRESSURE 31 VEO_GASKET_YIELD_STRESS 34VEO_GASKET_CLOSURE 32 VEO_GASKET_STATUS 35VEO_GASKET_PLASTIC_CLOSURE 33
Constant Name Constant Name
VEO_FLUID_PRESSURE 36 VEO_NORMALIZED_MASS_DENSITY 37
Find   API-1795
4.18.2  Results Vector ID  Query Object Methods
4.18.2.1  Find
Find
( nRVOutSetID, sRVTitle )
Description:Determines the ID of an output v ector which matches the specified title that exists in the specified out-
put set. Attempting to “Exact Match es” is the best approach, but this  method can sometimes use a “Par-
tial Match” to determine the output vector ID, as long as there is only a single “Partial Match”. See 
Remarks/Usage section.
Input:INT4 nRVOutSetID ID of Output Set to find output vector IDSTRING sRVTitle Title of Output Vector to find in specified output setOutput:
None
Return Code:INT4 1 to Maximum ID ID of FEMAP Output Vector
FE_FAILID could not be determined usin g entered text. See Remarks/Usage 
Section
Remarks/Usage:Using more characters for sRVTitle increases the ch ances of finding the correct Output Vector ID.
Some Examples:
“Translation” = FE_FAIL, “Total Translation” = 1
“Beam EndA Moment” = FE_FAIL, “Beam EndA Plane1 Moment” = 3014“Membrane Force” = FE_FAIL, “X Membrane Force” = 8006
“Plate V onMises Stress”= FE_FAIL, “Plate Top V onMisesStress” = 7033
“Solid V on Mises” = FE_FAIL (when Strains are also in  Output Set) or 60031 (no Strains in output set), 
therefore it is always better to use “Solid V on Mises Stress”, as it will always return 60031.
Also, this method does not consider any corner output vectors wh en attempting to determine an output 
vector ID from a “Partial Match”, therefore an “Exact  Match” will be needed fo r corner output vectors.
Example:None
 API-1796  Nodal
4.18.2.2  Nodal
Nodal
( zVecNodalResult, zVecNodalType )
Description:Determines the ID of the output vector which contains  vector-based output data  on nodes by entering a 
type of vector output (Translations, Rotations, App lied Forces, Grid Point Forces, Contact Forces, etc) 
and if a specific component direction (X,Y , or Z) or the resultant (Total) is n eeded. See Section 4.18.1.1, 
"Constants for Nodal and NodalWithComponents Methods"
Input:enum zVecNodalResult The vector-based nodal output quantity. 
enum zVecNodalTypeSpecific component di rection or resultant:
Total/None = VNT_TOTAL_NONE
T1/R1/X = VNT_X
T2/R2/Y = VNT_YT3/R3/Z = VNT_Z
Output:NoneReturn Code:INT4 1 to Maximum ID Output Vector IDFE_FAIL Output Vector ID could not be determinedRemarks/Usage:NoneExample:None
NodalWithComponents   API-1797
4.18.2.3  NodalWithComponents
NodalWithComponents
( zVecNodalResult, VectorIDs )
Description:Determines the IDs of the output vectors which contain vector-based output data on nodes by entering a 
type of vector output (Translations, Rotations, App lied Forces, Grid Point Forces, Contact Forces, etc). 
See Section 4.18.1.1, "Constants for Nodal and NodalWithComponents Methods".
Input:enum zVecNodalResult The vector-based nodal output quantity.Output:
V ARIANT VectorIDs[0..3]Array of four output vector IDs:
0 = Total/None1 = T1/R1/X
2 = T2/R2/Y
3 = T3/R3/Z
Return Code:FE_FAIL Output Vector IDs could not be determinedRemarks/Usage:NoneExample:None
 API-1798  NodalOther
4.18.2.4  NodalOther
NodalOther
( zVecNodalScalar )
Description:Determines the ID of the output vector which contains scalar output data on nodes by entering a type of 
vector output (Temperature, Enthalpy, Contact Pr essure, Contact Normal Force, etc). See Section 
4.18.1.2, "Constants for NodalOther Method"
Input:enum zVecNodalScalar The scalar nodal output quantity.Output:NoneReturn Code:
INT4 1 to Maximum ID Output Vector ID
FE_FAIL Output Vector ID could not be determinedRemarks/Usage:NoneExample:None
Line   API-1799
4.18.2.5  Line
Line
( zVecLineElemType, zVecLineResult, zVecLineEnd, zVecLineLoc )
Description:Determines the ID of the output vector which contains  output data for Bar, Beam, or Weld elements by 
entering the type of element, the type of results (Axial Force, To rque, Moment, Shear, Stresses, and 
Strains), which end of the line element, and stress recovery locations. See Section 4.18.1.3, "Constants 
for Line and LineAllLocations Methods"
Input:
enum zVecLineElemTypeType of line element:
Bar Element = VLT_BAR
Beam Element = VLT_BEAM
Weld Element = VLT_WELD
enum zVecLineResult Type of  results on line element
enum zVecLineEndSpecifies end of the line element for the results:
No End = VLE_OVERALLEnd A= VLE_A
End B= VLE_B
enum zVecLineLocSpecifies stress recovery location of the line element for results:
Overall = VLL_OVERALLMax = VLL_MAX
Min = VLL_MIN
Pt1 = VLL_1Pt2 = VLL_2
Pt3 = VLL_3
Pt4 = VLL_4
Output:NoneReturn Code:INT4 1 to Maximum ID Output Vector IDFE_FAIL Output Vector ID could not be determinedRemarks/Usage:NoneExample:None
 API-1800  LineAllLocations
4.18.2.6  LineAllLocations
LineAllLocations
( zVecLineElemType, zVecLineResult, VectorIDs )
Description:Determines the IDs of the output vectors which contai n output data for Bar, Beam, or Weld elements, at 
all locations, by entering th e type of element and the type of r esults (Axial Force, Torque, Moment, 
Shear, Stresses, and Strains). See Section 4.18.1.3, "Constants for Line and LineAllLocations Methods".
Input:
enum zVecLineElemTypeType of line element:
Bar Element = VLT_BARBeam Element = VLT_BEAM
Weld Element = VLT_WELD
enum zVecLineResult Type of  results on line element
Output:
V ARIANT VectorIDs[0..7]Array of eight output vector IDs:
0 = End A: Stress Recovery Point 1
1 = End A: Stress Recovery Point 22 = End A: Stress Recovery Point 3
3 = End A: Stress Recovery Point 4
4 = End B: Stress Recovery Point 15 = End B: Stress Recovery Point 2
6 = End B: Stress Recovery Point 3
7 = End B: Stress Recovery Point 4
Return Code:FE_FAIL Output Vector IDs could not be determinedRemarks/Usage:NoneExample:None
LineOther   API-1801
4.18.2.7  LineOther
LineOther
( zVecLineOther )
Description:Determines the ID of the output vector which contains  output data for line elements other than Bars or 
Beams, (i.e., Springs, Rods, Gaps , CBUSH, Bush/Fastener), and some for Welds. See Section 4.18.1.4, 
"Constants for LineOther Method"
Input:enum zVecLineOther The line element output quantityOutput:NoneReturn Code:
INT4 1 to Maximum ID Output Vector ID
FE_FAIL Output Vector ID could not be determinedRemarks/Usage:NoneExample:None
 API-1802  Plate
4.18.2.8  Plate
Plate
( zVecPlateResult, zVecPlateType, zVecPlatePly, zVecPlateLoc )
Description:Determines the ID of the output vector which contai ns output data for non-laminate planar elements 
(Force, Moment, Stress, Strain, etc) at a specified position (Top/Middle/Bottom ) and location (Centroid 
or Corner). See Section 4.18.1.5, "C onstants for Planar Element Methods"
Input:enum zVecPlateResult Type of result s on non-laminate planar element
enum zVecPlateType Sub-type of non-laminate pl anar results (Tensor, Invariant, or Other)
enum zVecPlatePlyPosition on element for the results:
Top = VPP_TOPMiddle = VPP_MID
Bottom = VPP_BOT
enum zVecPlateLocLocation on element for the results:
Centroid = VPL_CENTROID
Corner 1 = VPL_1Corner 2 = VPL_2
Corner 3 = VPL_3
Corner 4 = VPL_4
Output:NoneReturn Code:INT4 1 to Maximum ID Output Vector IDFE_FAIL Output Vector ID could not be determinedRemarks/Usage:NoneExample:None
PlateWithCorners   API-1803
4.18.2.9  PlateWithCorners
PlateWithCorners
( zVecPlateResult, zVecPlateType, zVecPlatePly, VectorIDs )
Description:Determines the IDs of the output vectors which cont ain output data for non-laminate planar elements 
(Force, Moment, Stress, Strain, etc) for a specifie d position (Top/Middle/Bottom). See Section 4.18.1.5, 
"Constants for Planar Element Methods".
Input:enum zVecPlateResult Type of result s on non-laminate planar element
enum zVecPlateType Sub-type of non-laminate pl anar results (Tensor, Invariant, or Other)
enum zVecPlatePlyPosition on element for the results:
Top = VPP_TOPMiddle = VPP_MID
Bottom = VPP_BOT
Output:
V ARIANT VectorIDs[0..4]Array of five output vector IDs:
0 = Centroid
1 = Corner 12 = Corner 2
3 = Corner 3
4 = Corner 4
Return Code:FE_FAIL Output Vector IDs could not be determinedRemarks/Usage:NoneExample:None
 API-1804  Laminate
4.18.2.10  Laminate
Laminate
( zVecPlateResult, zVecPlateType, nRVPly, zVecPlateLoc )
Description:Determines the ID of the output vector which contains  output data for laminate planar elements (Force, 
Moment, Stress, Strain, etc) at a specified location (C entroid or individual Corn er), for a sp ecified lami-
nate ply ID. See Section 4.18.1.5, "C onstants for Planar Element Methods"
Input:enum zVecPlateResult Type of resu lts on laminate planar element
enum zVecPlateType Sub-type of laminate plan ar results (Tensor, Invariant, or Other)
INT4 nRVPly ID of laminate ply
enum zVecPlateLocLocation on element for the results:
Centroid = VPL_CENTROIDCorner 1 = VPL_1Corner 2 = VPL_2
Corner 3 = VPL_3
Corner 4 = VPL_4
Output:NoneReturn Code:INT4 1 to Maximum ID Output Vector IDFE_FAIL Output Vector ID could not be determinedRemarks/Usage:NoneExample:None
LaminateWithCorners   API-1805
4.18.2.11  LaminateWithCorners
LaminateWithCorners
( zVecPlateResult, zVecPlateType, nRVPly, VectorIDs )
Description:Determines the IDs of the output ve ctors which contain output data for laminate planar elements (Force, 
Moment, Stress, Strain, etc) for a specified laminate ply ID. See Section 4.18.1.5, "Constants for Planar 
Element Methods".
Input:enum zVecPlateResult Type of resu lts on laminate planar element
enum zVecPlateType Sub-type of laminate plan ar results (Tensor, Invariant, or Other)
INT4 nRVPly ID of laminate plyOutput:
V ARIANT VectorIDs[0..4]Array of five output vector IDs:
0 = Centroid
1 = Corner 12 = Corner 2
3 = Corner 3
4 = Corner 4
Return Code:FE_FAIL Output Vector IDs could not be determinedRemarks/Usage:NoneExample:None
 API-1806  LaminateGlobalPly
4.18.2.12  LaminateGlobalPly
LaminateGlobalPly
( zVecPlateResult, zVecPlateType, nRVGlobalPly, zVecPlateLoc )
Description:Determines the ID of the output vector which contains  output data for laminate planar elements (Force, 
Moment, Stress, Strain, etc) at a specified location (C entroid or individual Corn er), for a sp ecified lami-
nate global ply ID. See Section 4.18.1.5,  "Constants for Planar Element Methods"
Input:enum zVecPlateResult Type of resu lts on laminate planar element
enum zVecPlateType Sub-type of laminate plan ar results (Tensor, Invariant, or Other)
INT4 nRVGlobalPly ID of laminate global ply
enum zVecPlateLocLocation on element for the results:
Centroid = VPL_CENTROIDCorner 1 = VPL_1Corner 2 = VPL_2
Corner 3 = VPL_3
Corner 4 = VPL_4
Output:NoneReturn Code:INT4 1 to Maximum ID Output Vector IDFE_FAIL Output Vector ID could not be determinedRemarks/Usage:NoneExample:None
LaminateGlobalPlyWithCorners   API-1807
4.18.2.13  LaminateGlobalPlyWithCorners
LaminateGlobalPlyWithCorners
( zVecPlateResult, zVecPlateType, nRVGlobalPly, VectorIDs )
Description:Determines the IDs of the output ve ctors which contain output data for laminate planar elements (Force, 
Moment, Stress, Strain, etc) for a specified laminate global ply ID. See Section 4.18.1.5, "Constants for 
Planar Element Methods".
Input:enum zVecPlateResult Type of resu lts on laminate planar element
enum zVecPlateType Sub-type of laminate plan ar results (Tensor, Invariant, or Other)
INT4 nRVGlobalPly ID of laminate global plyOutput:
V ARIANT VectorIDs[0..4]Array of five output vector IDs:
0 = Centroid
1 = Corner 12 = Corner 2
3 = Corner 3
4 = Corner 4
Return Code:FE_FAIL Output Vector IDs could not be determinedRemarks/Usage:NoneExample:None
 API-1808  PlateOther
4.18.2.14  PlateOther
PlateOther
( zVecPlateScalar )
Description:Determines the ID of the output vector which contains  output data for planar elements other than plates 
and laminates, with or without global plies incl uding Shear and Axisymmetric elements. Also, this 
method can be used to determine th e output vector ID for scalar output on plate or laminate elements, 
with or without global plies (i.e., only one output value exists for the elemen t). See Section 4.18.1.6, 
"Constants for PlateOther Method"
Input:enum zVecPlateScalar The planer elemen t output quantity (typically a scalar)
Output:NoneReturn Code:INT4 1 to Maximum ID Output Vector IDFE_FAIL Output Vector ID could not be determinedRemarks/Usage:NoneExample:None
Solid   API-1809
4.18.2.15  Solid
Solid
( zVecSolidResult, zVecSolidType, zVecSolidLoc )
Description:Determines the ID of the output vector which cont ains output data for non- laminate solid elements 
(Stress, Nonlinear Stress, Strain, and Nonlinear Stra in) at specified location (Centroid or Corner). See 
Section 4.18.1.7, "Constants for Solid Element Methods".
Input:enum zVecSolidResult Type of results on non-laminate solid elementenum zVecSolidType Sub-type of non-laminate solid results (Tensor, Invariant, or Other)
enum zVecSolidLocLocation on element for the results:
Centroid = VSL_CENTROIDCorner 1 = VSL_1
Corner 2 = VSL_2
Corner 3 = VSL_3Corner 4 = VSL_4Corner 5 = VSL_5
Corner 6 = VSL_6
Corner 7 = VSL_7Corner 8 = VSL_8
Output:NoneReturn Code:INT4 1 to Maximum ID Output Vector IDFE_FAIL Output Vector ID could not be determinedRemarks/Usage:NoneExample:None
 API-1810  SolidWithCorners
4.18.2.16  SolidWithCorners
SolidWithCorners
( zVecSolidResult, zVecSolidType, VectorIDs )
Description:Determines the IDs of the output vectors which cont ain output data for non-laminate solid elements 
(Stress, Nonlinear Stress, Strain, and Nonlinear Strain ) at all locations. See Sec tion 4.18.1.7, "Constants 
for Solid Element Methods".
Input:enum zVecSolidResult Type of results on non-laminate solid elementenum zVecSolidType Sub-type of non-laminate solid results (Tensor, Invariant, or Other)
Output:
V ARIANT VectorIDs[0..4]Array of nine output vector IDs:
0 = Centroid1 = Corner 12 = Corner 2
3 = Corner 3
4 = Corner 45 = Corner 5
6 = Corner 6
7 = Corner 78 = Corner 8
Return Code:FE_FAIL Output Vector IDs could not be determinedRemarks/Usage:NoneExample:None
SolidOther   API-1811
4.18.2.17  SolidOther
SolidOther
( zVecSolidOther )
Description:Determines the ID of the output vector which contai ns specialized output data  for solid elements, such 
as solid elements used as Bolts, as well as Solid Cohesive elements. See Section 4.18.1.8, "Constants for 
SolidOther Method"
Input:enum zVecSolidOther The speciali zed solid element output quantity
Output:NoneReturn Code:
INT4 1 to Maximum ID Output Vector ID
FE_FAIL Output Vector ID could not be determinedRemarks/Usage:NoneExample:None
 API-1812  LaminateSolid
4.18.2.18  LaminateSolid
LaminateSolid
( zVecSolidLamResult, zVecSolidLamType, nRVPly, zVecSolidLamLoc, zVecSolidLoc )
Description:Determines the ID of the output vector which contai ns output data for solid laminate planar elements 
(Stress, Strain, Failure, or Strength  Ratio) at a specified location (Centr oid or individual Corner), for the 
top, middle, or bottom of the specif ied solid laminate ply ID. See Sec tion 4.18.1.9, "Constants for Sold 
Laminate Element Methods".
Input:enum zVecSolidLamResult Type of re sults on solid laminate element
enum zVecSolidLamType Sub-type of solid laminate results (Tensor, Invariant, or Other)INT4 nRVPly ID of solid laminate plyenum zVecSolidLamLoc Results at Top, Middle, or Bottom of specified solid laminate ply
enum zVecSolidLocLocation on element for the results:
Centroid = VSL_CENTROIDCorner 1 = VSL_1
Corner 2 = VSL_2
Corner 3 = VSL_3Corner 4 = VSL_4
Corner 5 = VSL_5
Corner 6 = VSL_6Corner 7 = VSL_7
Corner 8 = VSL_8
See Section 4.18.1.7, "Constan ts for Solid Element Methods"
Output:NoneReturn Code:INT4 1 to Maximum ID Output Vector IDFE_FAIL Output Vector ID could not be determinedRemarks/Usage:NoneExample:None
LaminateSolidWithCorners   API-1813
4.18.2.19  LaminateSolidWithCorners
LaminateSolidWithCorners
( zVecSolidLamResult, zVecSolidLamType, nRVPly, zVecSolidLamLoc, VectorIDs )
Description:Determines the IDs of the output vectors which contai n output data for solid laminate elements (Stress, 
Strain, Failure, or Strength Ratio)  for the top, middle, or bottom of the specified solid laminate ply ID. 
See Section 4.18.1.9, "Constants fo r Sold Laminate Element Methods".
Input:enum zVecSolidLamResult Type of re sults on solid laminate element
enum zVecSolidLamType Sub-type of solid laminate results (Tensor, Invariant, or Other)INT4 nRVPly ID of solid laminate plyenum zVecSolidLamLoc Results at Top, Middle, or Bottom of specified solid laminate ply
Output:
V ARIANT VectorIDs[0..4]Array of nine output vector IDs:
0 = Centroid
1 = Corner 12 = Corner 2
3 = Corner 3
4 = Corner 45 = Corner 5
6 = Corner 6
7 = Corner 78 = Corner 8
Return Code:FE_FAIL Output Vector IDs could not be determinedRemarks/Usage:NoneExample:None
 API-1814  LaminateSolidGlobalPly
4.18.2.20  LaminateSolidGlobalPly
LaminateSolidGlobalPly
( zVecSolidLamResult, zVecSolidLamType, nRVGlobalPly, zVecSolidLamLoc, 
zVecSolidLoc )
Description:Determines the ID of the output vector which contai ns output data for solid laminate planar elements 
(Stress, Strain, Failure, or Strength  Ratio) at a specified location (Centr oid or individual Corner), for the 
top, middle, or bottom of the specified solid laminate  global ply ID. See Section 4.18.1.9, "Constants for 
Sold Laminate Element Methods".
Input:enum zVecSolidLamResult Type of re sults on solid laminate element
enum zVecSolidLamType Sub-type of solid laminate results (Tensor, Invariant, or Other)INT4 nRVGlobalPly ID of solid laminate global ply
enum zVecSolidLamLocResults at Top, Middle, or Bottom of  specified solid laminate global 
ply
enum zVecSolidLocLocation on element for the results:
Centroid = VSL_CENTROID
Corner 1 = VSL_1Corner 2 = VSL_2
Corner 3 = VSL_3
Corner 4 = VSL_4Corner 5 = VSL_5
Corner 6 = VSL_6
Corner 7 = VSL_7Corner 8 = VSL_8
See Section 4.18.1.7, "Constan ts for Solid Element Methods"
Output:NoneReturn Code:INT4 1 to Maximum ID Output Vector IDFE_FAIL Output Vector ID could not be determinedRemarks/Usage:NoneExample:None
LaminateSolidGlobalP lyWithCorners   API-1815
4.18.2.21  LaminateSolidGlobalPlyWithCorners
LaminateSolidGlobalPlyWithCorners
( zVecSolidLamResult, zVecSolidLamType, nRVPly, zVecSolidLamLoc, VectorIDs )
Description:Determines the IDs of the output vectors which contai n output data for solid laminate elements (Stress, 
Strain, Failure, or Strength Ratio)  for the top, middle, or bottom of the specified solid laminate global 
ply ID. See Section 4.18.1.9 , "Constants for Sold La minate Element Methods".
Input:enum zVecSolidLamResult Type of re sults on solid laminate element
enum zVecSolidLamType Sub-type of solid laminate results (Tensor, Invariant, or Other)INT4 nRVGlobalPly ID of solid laminate global ply
enum zVecSolidLamLocResults at Top, Middle, or Bottom of  specified solid laminate global 
ply
Output:
V ARIANT VectorIDs[0..4]Array of nine output vector IDs:
0 = Centroid1 = Corner 1
2 = Corner 2
3 = Corner 34 = Corner 4
5 = Corner 5
6 = Corner 67 = Corner 7
8 = Corner 8
Return Code:FE_FAIL Output Vector IDs could not be determinedRemarks/Usage:NoneExample:None
 API-1816  Elemental
4.18.2.22  Elemental
Elemental
( zVecElemOther )
Description:Determines the ID of the output vector which contai ns specialized output data for elements which is not 
able to be dete rmined using the Line, LineOther , Plate , Laminate , LaminateGlobalPly , PlateOther , 
Solid , SolidOther , LaminateSolid , or LaminateSolidGlobalPly  methods. See Section 4.18.1.10, "Con-
stants for Elemental Method". Also, see Remarks/Usage section.
Input:enum zVecElemOther The element output quantityOutput:NoneReturn Code:INT4 1 to Maximum ID Output Vector IDFE_FAIL Output Vector ID could not be determinedRemarks/Usage:This method is used to determine the output vector ID for almo st any Strain Energy, Heat Transfer, 
Kinetic Energy, Energy Loss, Crack Stress, or Fluid Pressure output quantity. In addition, it can be used 
to determine the Output V ector ID for any Gasket element output qu antity. Finally, it can also determine 
the output vector ID for Normalized Mass Density,  which is useful when reviewing results recovered 
from a Topology Optimizatio n run performed w ith SOL 200 of Simcenter Nastran.
Example:None
Complex   API-1817
4.18.2.23  Complex
Complex
( zVecComplex, nRVOriginalVector )
Description:Determines the ID of the output vector which is th e corresponding complex output vector to the output 
vector ID specified as the “Original Output Vector” (i .e., the ID of the phase output vector when a mag-
nitude output vector has been specified or vice versa). See Remarks/Usage section.
Input:
enum zVecComplexUsed to determine which type of co mplex output vector ID should be 
found to correspond with the “Original Vector ID”. To determine corresponding output vector, use:
VCX_MAGNITUDE for Magnitude
VCX_PHASE for PhaseVCX_REAL for Real
VCX_IMAGINARY for Imaginary
INT4 nRVOriginalVector “Original Vector ID”
Output:NoneReturn Code:INT4 1 to Maximum ID Output Vector IDFE_FAIL Output Vector ID could not be determinedRemarks/Usage:This method can be used as a secondary step to determine the corresponding  complex output vector 
after another method on the Results ID Query object has been used to find the ID of the “Original Vec-
tor”. Typically, if a magnitude vector ID has been found first, set zVecComplex to VCX_PHASE to find 
the corresponding phase vector ID. Another use might be to find the ID of the real output vector if the 
ID of the imaginary vector is already known.
See example. This would return a value of 74000001 , the first value in the Us er Output range for Real
Example:
 API-1818  Complex
This method and be used in conjun ction with User method to do this:
Sub Main
    Dim App as femap.model    Set App = feFemap()
    Dim r As femap.ResultsIDQuery
    Set r = App.feResultsIDQuery
    Dim outvec As Long
    outvec = r.Complex(VCX_REAL, r.User(1))
End SubComplex
( zVecComplex, nRVOriginalVector )
User   API-1819
4.18.2.24  User
User
( nRVUserVector )
Description:Determines the ID an output vector in the “Use r Output” range for the sp ecified output vector ID
Input:
INT4 nRVUserVectorID of output vector to determin e output vector in “User Output” 
range. The only values which can be used are:
Magnitude = 1 to 999,999
Phase = 25,000,001 to 25,999,999Real = 50,000,0001 to 50,999,999
Imaginary = 75,000,001 to 75,999,999
Output:None
Return Code:
INT4 
24000001 to 24999999
49000001 to 49999999
74000001 to 7499999999000001 to 99999999Output Vector ID in “User Output” range. There are 999,999 avail-
able vectors in each “User Output” range:
Magnitude = 24,000,001 to 24,999,999Phase = 49,000,001 to 49,999,999
Real = 74,000,0001 to 74,999,999
Imaginary = 99,000,001 to 99,999,999
FE_FAIL Output Vector ID could not be determinedRemarks/Usage:See example. This would return a value of 49000001, the first value in the User  Output range for Phase
Example:This method and be used in conjunction with Complex method to do this:
Sub Main
    Dim App as femap.model
    Set App = feFemap()
    Dim r As femap.ResultsIDQuery
    Set r = App.feResultsIDQuery
    Dim outvec As Long
    outvec = r.User(r.Complex(VCX_PHASE,1))End Sub
 API-1820  User
   API-1821
4.19  Stress Linearization (StressLinear) Objects
The Stress Linearization (StressLinear) object offers programmatic access to the View, Advanced 
Post, Stress Linearization  command.
The FEMAP Stress Linearization Tool is based on the ASME Boiler and Pressure Vessel Code, 
2007 SECTION VIII, DIVISION  2, ANNEX 5.1 LINEARIZATION OF STRESS RESULTS FOR 
STRESS CLASSIFICATION.
The ASME Code, and this tool, are based on the us er choosing an appropri ate Stress Classification 
Line (SCL) by choosing two nodes.
Stress Linearization relies on transforming FEA te nsor stresses to be aligned with the SCL. For 
this calculation to be correct, the reference coordi nate system for the stress data must be known. 
The base reference system can be specified in  the FEMAP user interface by either using File, Pref-
erences , choosing the Geometry/Model  tab, then clicking the Output Orientation  button or using 
the Transform  button found in various dialog boxes, then clicking the Output Orientation  button. 
In all cases, the Current Output Orientation  dialog will be displayed to set the base orientation.
The base orientation can also be set/updated via the API through Gl obal Integer Properties such as 
Info_OrientSolidIsoOutput, Info _OrientQuad4StressOutput, etc as detailed in this manual.
NOTE: Users should be familiar with the requ irements and recommendations of the ASME 
Code, the proper choice of the SCL is key to applying this standard.
The appropriate process is to have the StressLin ear Properties (see Section 4.19.1, "StressLinear 
Object Properties") specified as de sired before calling a StressLin ear Method (see Section 4.19.2, 
"StressLinear Object Methods"). Currently, there is only one StressLinear method (CalcStressLin-
earization).
Use the feStressLinear method of the FEMAP Appl ication object to create Stress Linearization 
objects.
4.19.1  StressLinear Object Properties
Property Description
INT4 ndID1 Node ID at the beginning of the SCL.INT4 ndID2 Node ID at the end of the SCLINT4 ouSetID ID of the Output Set with stresses to be linearized
INT4 nElemTypeType of Elements to consider  for calculations. 0=Solid, 1= 
Plates, 2=Axisymmetric
INT4 nStressMode Type of stress used fo r calculations. 0=von Mises, 1=Tresca
BOOL bNonlinerModeControls whether standard linear stress data or nonlinear stress 
data will be used from the output set specified for ouSetID
BOOL bFullStressTensorDefault/Recommended value is  FALSE to follow the ASME 
code. Setting to TRUE will use a ll stress tensor values when 
linearizing bending stress.
Calculated Stress Output (Read-Only)
 API-1822  
REAL8 dMembraneStressCalculated linearized Membrane Stress per the ASME Code 
(will be 0.0 until CalcStressLinearization is used)
REAL8 dBendingStressCalculated linearized Bending Stress per the ASME Code (will 
be 0.0 until CalcStressLinearization is used)
REAL8 dMaxMemStressCalculated linearized Membrane and Bending Stress per the 
ASME Code (will be 0.0 until CalcStressLinearization is used)
REAL8 dMaxStressActual maximum stress along the SCL from the FEA results 
(will be 0.0 until CalcStressLinearization is used)Property Description
CalcStressLinearization   API-1823
4.19.2  StressLinear Object Methods
4.19.2.1  CalcStressLinearization
CalcStressLinearization
( Void )
Description:Calculates the ASME Stress Linearization, if succe ssful, with a return code of FE_OK, the Calculated 
Stress Output values on the Str essLinear Object will be updated
Input:NoneOutput:NoneReturn Code:FE_OK Stress Linearization successfully calculatedFE_FAIL Error in calculations
FE_BAD_DATAOne of the following has occurred:
Node IDs not unique, or at least one node ID does not existOutput Set does not exist
Nodes not connected by mesh
Axisymmetric elements not on proper global planes
FE_BAD_TYPE Wrong element type specifiedRemarks/Usage:NoneExample:
 API-1824  CalcStressLinearization
Sample: In this sample, two SCL's are defined,  and two stress linearizations are calculated
Sub Main
    Dim App as femap.model    Set App = feFemap()
    Dim fSL As femap.StressLinear
    Set fSL = App.feStressLinear
    fSL.ouSetID = 1
    fSL.nElemType = 0    fSL.ndID1 = 2789
    fSL.ndID2 = 2899
    fSL.bNonlinearMode = False    If fSL.CalcStressLinearization() = FE_OK Then
        Msg = "Maxium Stress = " +Str$(fSL.dMaxStress)
        App.feAppMessage( FCM_NORMAL, Msg )
        Msg = "Membrane Stress = " + Str$(fSL.dMembraneStress)
        App.feAppMessage( FCM_NORMAL, Msg )        Msg = "Bending Stress = " + Str$(fSL.dBendingStress )
        App.feAppMessage( FCM_NORMAL, Msg )
    End If
    fSL.ouSetID = 1
    fSL.nElemType = 0    fSL.ndID1 = 2791
    fSL.ndID2 = 2896
    If fSL.CalcStressLinearization() = FE_OK Then        Msg = "Maxium Stress = " +Str$(fSL.dMaxStress)
        App.feAppMessage( FCM_NORMAL, Msg )
        Msg = "Membrane Stress = " + Str$(fSL.dMembraneStress)        App.feAppMessage( FCM_NORMAL, Msg )
        Msg = "Bending Stress = " + Str$(fSL.dBendingStress )
        App.feAppMessage( FCM_NORMAL, Msg )    End If
End SubCalcStressLinearization
( Void )
CalcStressLinearization   API-1825
 API-1826  
4.20  PublishTool Objects
The PublishTool object provides  capabilities to publish customi zed HTML and RTF reports to 
either the clipboard or to a file.
Use the fePublishTool method of the FEMAP app lication object to crea te PublishTool objects.
Clear   API-1827
4.20.1  PublishToo l Object Methods
4.20.1.1  Clear
Clear
( )
Description:Clears everything in the PublishTool objectInput:NoneOutput:NoneReturn Code:
None
Remarks/Usage:NoneExample:None
 API-1828  Clear
4.20.1.2  SetFormat
SetFormat
( nFormat )
Description:Specifies the format of data to be published to the Clipboard or to a File
Input:INT4 nFormat The format to publish (0=RTF, 1=HTML)Output:NoneReturn ValueFE_INV ALID The specified format does not correspond to either RTF or HTML
Remarks/Usage:
Example:
*see AddParagraph() method
SetParagraphAlignment   API-1829
4.20.1.3  SetParagraphAlignment
SetParagraphAlignment
( nAlign )
Description:Specifies how paragraphs and ot her objects will be aligned as  they are added to the Tool
Input:INT4 nAlign 0=Left, 1=Right, 2=CenterOutput:NoneReturn ValueFE_INV ALID The alignment method is not validRemarks/Usage:This method can be called as many times as necessary, bu t must be called prior to adding the data that is 
supposed to be aligned. Default alignment is Left.
Example:
 API-1830  SetParagraphIndent
4.20.1.4  SetParagraphIndent
SetParagraphIndent
( nLeft, nRight, nFirstLine )
Description:Specifies how paragraphs and ot her objects will be indented as they are added to the Tool
Input:
INT4 nLeftIndentThe space between the margin and left side of a paragraph, image or 
table. This is specified in points (1/72 inch)
INT4 nRightIndentThe space between the margin and righ t side of a paragraph. This is 
specified in points (1/72 inch)
INT4 nFirstLineIndentAdditional space between the indented  left side of the paragraph and 
the beginning of the first line. That  is, the first line is indented by 
nLeftIndent+nFirstLineIndent. This is specified in points (1/72 inch)
Output:NoneReturn ValueNoneRemarks/Usage:This method can be called as many times as necessary, bu t must be called prior to adding the data that is 
supposed to be indented. 
SetParagraphIndent(0,0,0) eliminates all indents. 
Example:
SetParagraphSpacing   API-1831
4.20.1.5  SetParagraphSpacing
SetParagraphSpacing
( nSpaceAbove, nSpaceBelow )
Description:
Specifies how space will be added above and below paragraphs and othe r objects as they are added to 
the Tool
Input:
INT4 nSpaceAboveThe space above the top of a paragrap h, image or table. This is spec-
ified in points (1/72 inch)
INT4 nSpaceBelowThe space below the bottom of a paragraph, image or table. This is 
specified in points (1/72 inch)
Output:NoneReturn ValueNoneRemarks/Usage:This method can be called as many times as necessary, but must be called prior to adding the data that 
will have spacing above or below.
 
SetParagraphSpacing(0,0) eliminates spacing.
Example:
 API-1832  AddStyle
4.20.1.6  AddStyle
AddStyle
( sFontName, nFontSize, nColor , nHighlightColor,  bBol d, bItalic, bUnderline 
bPreserveFormatting )
Description:
Defines a style that can then be applie d to text that is added to the Tool
Input:
STRING sFontNameThe name of a font to be used for text. This must match the name of 
an existing Font. Alternatively, this can be a blank string if you want 
to continue to use the current font.
INT4 nFontSizeThe size of the font to be used in points (1/72 inch). Specify as 0 to 
use the size of the current font
INT4 nColor The color of textINT4 nHighlightColor The background color of textBOOL bBold Text will be bold if TrueBOOL bItalic Text will be italic if TrueBOOL bUnderline Text will be underlined if True
BOOL bPreserveFormattingIf True, line breaks that are included  in a paragraph that is added will 
be maintained so the text appears "as specified". If False, line breaks 
are ignored and the text will be con tinuous, only breaking at margins. 
Output:NoneReturn Value
INT4 nStyleIDThe ID of the specified style which can later be used to apply this 
style.
Remarks/Usage:This method does not activate a style, it merely defines it. The "Style ID" that is returned is then used as 
text is defined to apply the style to the text.
Example:*see AddParagraph() method
AddParagraph   API-1833
4.20.1.7  AddParagraph
AddParagraph
( sText, nStyle )
Description:
Adds a paragraph of text to the Publish ToolInput:STRING sText The text of the paragraph
INT4 nStyleThe style to be applied to the paragr aph. This is the value returned by 
the AddStyle( ) method. Specify as 0 to use the default style.
Output:NoneReturn Value
None
Remarks/Usage:The active alignments, indents and spacing ar e applied to the paragraph as it is added.
Example:
 API-1834  ( sText, nStyle )
Sub Main
    Dim App as femap.model
    Set App = feFemap()
    Dim pTool As femap.PublishTool
    Set pTool = App.fePublishTool()
    rc = pTool.SetFormat( PUB_RTF )
    'Create a style for the Heading
    bBold = True : bUnderline = Tr ue : bItalic = True : bPres = False
    aStyle = pTool.AddStyle( "Arial", 20, FC L_BLACK, FCL_WHITE, bBold, bItalic, bUnderline, 
bPres )
    pTool.AddParagra ph( "Heading", aStyle )
    pTool.AddParagraph( " ", 0)
    'Create other styles for the Text
    bStyle = pTool.AddStyle( "Arial", 15, FCL_ RED, FCL_YELLOW, bBold, bItalic, bUnderline, bPres 
)
    cStyle = pTool.AddStyle( "Arial", 15 , FCL_FORESTGREEN, FCL_Y ELLOW, bBold, bItalic, 
bUnderline, bPres )
    ' Add paragraphs of text with different style applied
    For i = 0 To 5        
        If i Mod 2 = 0 Then
            pTool.AddParagraph("Test"+Str( i ), bStyle)        Else
            pTool.AddParagraph("Test"+Str( i ), cStyle)
        End If        
        pTool.AddParagraph( " ", 0)
    Next
    'Send the text & othe r contents to the clipboard
    rc = pTool.PublishToClipboard()
End SubAddParagraph
( sText, nStyle )
AddPicture   API-1835
4.20.1.8  AddPicture
AddPicture
( sFileName, nFormat, nSizePct )
Description:
Adds an image from a fileInput:STRING sFileName The full pathname to the image file to be included.
INT4 nFormat 0=Bitmap,  1=J PEG, 2=PNG, 3=GIF, 4=TIFF 
INT4 nSizePctA scale factor that can be applied to the natural size of the image. If 
specified as 0 (or 100) the image will not be scaled.
Output:None
Return Value
FE_NOT_EXIST The specified image file does not existFE_FAIL The image can not be addedRemarks/Usage:The active alignments, left indent and spac ing are applied to th e image as it is added.
Example:
 API-1836  AddView
4.20.1.9  AddView
AddView
( nVuID, nSizePct )
Description:
Adds an image created from a View stored in the current modelInput:INT4 nVuID The ID of the View to  be used to create the image
INT4 nSizePctA scale factor that can be applied to the natural size of the image. If 
specified as 0 (or 100) the image will not be scaled.
Output:NoneReturn Value
FE_NOT_EXIST The specified view does not exist
FE_NOT_A V AILABLE There is no ac tive View in the current model
FE_FAIL The image can not be addedRemarks/Usage:The active alignments, left indent and spac ing are applied to th e image as it is added.
Example:
AddDataTable   API-1837
4.20.1.10  AddDataTable
AddDataTable
( bCopyAllRows, bCopyHeader, bCopyFoote r, nNumColumns, sColumnTitles )
Description:
Adds a copy of the current Data TableInput:
BOOL bCopyAllRowsIf True, all rows in the Data Tabl e will be copied. If False, only 
selected rows will be copied.
BOOL bCopyHeaderIf True, any Data Table Column or Table header rows will be 
included
BOOL bCopyFooter If True, any Data Table Footer rows will be included
INT32 nNumColumnsIf 0, all Columns will be included. If >0, this is the number of titles 
included in sColumnTItles
STRING sColumn-
Titles[0..nNumColumns-1]If nNumColumns > 0 this is a list of  the column titles that will be 
copied. The titles must be specified in  full, exactly matching what is 
in the Data Table, howe ver it is case insensitive.
Output:NoneReturn ValueFE_BAD_DATA Invalid column title specifiedFE_NO_MEMORY Insufficient memo ry to retrieve Column titles
FE_FAIL The Data Table is not available or can not be addedRemarks/Usage:The active alignments, left indent and spacing are applied to the data table as it is added.
Example:
 API-1838  AddFunctionTableEditor
4.20.1.11  AddFunctionTableEditor
AddFunctionTableEditor
( bCopyHeader )
Description:
Adds a copy of the current Function/Table EditorInput:BOOL bCopyHeader If True, any Column or Table header rows will be includedOutput:NoneReturn ValueFE_FAIL The Function/Table Editor is not available or can not be addedRemarks/Usage:The active alignments, left indent and spacing ar e applied to the function or table as it is added.
Example:
AddEntityEditor   API-1839
4.20.1.12  AddEntityEditor
AddEntityEditor
( void )
Description:
Adds a copy of the current Entity EditorInput:NoneOutput:NoneReturn ValueFE_FAIL The Entity Editor is not available or can not be addedRemarks/Usage:The active alignments, left indent and spac ing are applied to th e image as it is added.
Example:
 API-1840  AddMessages
4.20.1.13  AddMessages
AddMessages
( void )
Description:
Adds selected text from the Message WindowInput:
INT4 nFirstLineThe first line of text to select from the Message WIndow. Specify as 
<= 0  to select the first available line in the Window
INT4 nLastLineThe last line of text to select from the Message WIndow. Specify as 
<= 0  to select the last available line in the Window
Output:NoneReturn ValueFE_FAIL The Message Window is not available or can not be addedRemarks/Usage:The active alignments, left indent and spacin g are applied to the image as it is added.  
You can use the method feFileMessageLineNumber( ) to retrieve the current line number in the Mes-
sage Window prior to and after an operation to us e as the first and last lines for this method.
Example:
AddChart   API-1841
4.20.1.14  AddChart
AddChart
( nSizePct )
Description:
Adds an image of the current Charting PaneInput:
INT4 nSizePctA scale factor that can be applied to the natural size of the image. If 
specified as 0 (or 100) the image will not be scaled.
Output:NoneReturn ValueFE_FAIL The Charting Pane is not available or can not be added
Remarks/Usage:
The active alignments, left indent and spac ing are applied to th e image as it is added.
Example:
 API-1842  UserTable
4.20.1.15  UserTable
UserTable
( void )
Description:
Creates and returns a PublishTable objectInput:NoneOutput:NoneReturn ValuePublishTable objectRemarks/Usage:Refer to the documentation of the PublishTable object to c onfigure and publish the table
Example:
PublishToClipboard   API-1843
4.20.1.16  PublishToClipboard
PublishToClipboard
( void )
Description:
Publishes the contents of the current object to the Clipboard for pastin g to other applications
Input:NoneOutput:NoneReturn ValueFE_FAIL Unable to publish current objectRemarks/Usage:
Example:
 API-1844  PublishToFile
4.20.1.17  PublishToFile
PublishToFile
( sFileName )
Description:
Publishes the contents of the cu rrent object to a specified file
Input:STRING sFileName The name of the file  to contain the published data.
Output:NoneReturn ValueFE_FAIL Unable to publish current object Remarks/Usage:For easiest access later, the file extension of the sp ecified file should match the normal usage for the 
publishing format. For example, .html fo r HTML format or .rtf for RTF format.
Example:
( sFileName )   API-1845
 API-1846  
4.21  PublishTable Objects
One or more PublishTable object is created by using the UserTable method of the PublishTool 
Object. These objects are th en associated with that specific PublishTool object. 
AddColumn   API-1847
4.21.1  PublishTable Object Methods
4.21.1.1  AddColumn
AddColumn
( sColumnTitle, nAlign, dWidth )
Description:
Adds an empty column to the tableInput:STRING sColumnTitle A title to add to the column headerINT4 nAlign Alignment of text in th e column 0=Left, 1=Right, 2=Center
REAL8 dWidth Width of the column in in ches. Specify as 0.0 for default width.
Output:NoneReturn ValueINT4 nColumnID The column ID of the adde d column. -1 if adding the column failed.
Remarks/Usage:The column ID returned by this  method must be used when a dding text/values to the column 
Example:
 API-1848  ( sColumnTitle, nAlign, dWidth )
Sub Main
    Dim App as femap.model
    Set App = feFemap()
    Dim pTool As femap.PublishTool
    Dim pTable As femap.PublishTable
    Set pTool = App.fePublishTool()
    Set pTable = pTool.UserTable
    'Create a style for the Heading & Body of pTable
    bBold = True : bUnderline = False : bItalic = True : bPreserveFormatting = False
    headerStyle = pTool.AddStyle( "Arial", 15 , FCL_BLACK, FCL_PALESKYBLUE, bBold, bItalic, 
bUnderline, bPreserveFormatting )
    bodyStyle = pTool.AddStyle( "Arial", 20, FCL_BLACK, FCL_WHITE, bBold, bItalic, bUnderline, bPreserveFormatting )
    'Set the style of the table
    rc = pTable.SetTableStyle( headerStyle, bodyStyle )
    'AddColumn() method returns the zero-based index
    col0 = pTable.AddColumn(" Column 1", PUBALN_CENTER, 2.0)
    col1 = pTable.AddColumn(" Column 2", PUBALN_CENTER, 2.0 )
    rc = pTable.AddColumnGrou pTitle(col0, col1, "Column Group")
    'Add row titles
    rc = pTable.SetRowTitle(0, "Row 1")
    rc = pTable.SetRowTitle(1, "Row 2")
    'Set some mock data
    rc = pTable.SetRealFormat( 10, 3 )    rc = pTable.SetCellText(0, col0, "Data")
    rc = pTable.SetCellReal(0, col1, 5.45677777)
    rc = pTable.Publish()
    rc = pTool.PublishToClipboard()
    'Now it's on the Clipboard. Paste anywhere to view.
End SubAddColumn
( sColumnTitle, nAlign, dWidth )
AddColumnGroupTitle   API-1849
4.21.1.2  AddColumnGroupTitle
AddColumnGroupTitle
( nStartColumn, nEndColum n, sColumnGroupTitle )
Description:
Adds a second title above a co ntiguous range of columns
Input:INT4 nStartColumn The ID of the co lumn where the Group Title starts
INT4 nEndColumn The ID of the co lumn where the Group Title ends
STRING sColumnGroupTitle The title to add above  the headers of th e selected columns
Output:NoneReturn ValueFE_FAIL Adding the column header failed.Remarks/Usage:This method adds a joined  group title above all of the selected co lumns. This creates a second row of 
headers above the column titles. It is not possible to create additiona l rows of headers nor to add multi-
ple group titles to the same column.  Columns must be added prior to calling this method.
You can specify nStartColumn=nEndColumn if you just  want a second header above a single column.   
Any column that does not have a Group Title will have  its header text centered vertically between the 
two header rows.
Example:*see AddColumn() method
 API-1850  AddRowNumbering
4.21.1.3  AddRowNumbering
AddRowNumbering
( nFirstRowNumber )
Description:
Adds row numbers as a left side header in the table
Input:
INT4 nFirstRowNumberThe number used for the first row of  the table.  Typically, this would 
be either 0 or 1, however you ma y specify any positive value. Suc-
cessive rows increment this numb er by 1. Specifying a negative 
value turns off row numbering.
Output:NoneReturn ValueFE_FAIL Adding the column header failed.Remarks/Usage:Defining Row Numbering using this method does not change the way rows must be referenced by the 
other methods of this object. Actual row numbers al ways start at 0 and increase by 1. This method sim-
ply defines the values that are shown in the left side header.
SetRowTitle( ) is an alternative to this method that le ts you specify arbitrary left side header information
Example:
SetRowTitle   API-1851
4.21.1.4  SetRowTitle
SetRowTitle
( nRow, sRowTitle )
Description:
Adds a string as a left side header  for a particular row in the table
Input:
INT4 nRowThe row of the table where the left side header is being defined. The 
first row in the table is always row 0
STRING sRowTitle Title of the row headerOutput:NoneReturn Value
FE_NOT_A V AILABLE Invalid row numb er. Row numbers must be >= 0.
Remarks/Usage:AddRowNumbering( ) is an alternativ e to this method that can be used  if you simply want row numbers 
in the left side header.
Example:*see AddColumn() method
 API-1852  SetRealFormat
4.21.1.5  SetRealFormat
SetRealFormat
( nWidth, nPrecision )
Description:
Specifies how real numbers are formatted when added to the cells of the table
Input:INT4 nWidth The number of characte rs to use in writing the value
INT4 nPrecisionThe number of digits beyond the decimal point when writing the 
value
Output:NoneReturn Value
FE_INV ALIDAn invalid format has been specif ied. Both nWidth and nPrecision 
must be positive, nWidth > nPrecision and nWidth <= 20
Remarks/Usage:In the user interface, values shown in dialog  boxes typically use a format similar to 
SetRealFormat( 10, 7 ), while values in the lis ting commands often use SetRealFormat( 12, 7 )
When real numbers are formatted, values may switch between a standard floating point and exponential 
representations based on the specified format sizes and the numeric values.
Example:*see AddColumn() method
SetTableStyle   API-1853
4.21.1.6  SetTableStyle
SetTableStyle
( nHeaderStyle, nBodyStyle )
Description:
Specifies the styles used by the head er and body sections of the table
Input:
INT4 nHeaderStyleThe ID of a style that is defined in  the PublishTool object that is used 
for both the top and left side header of the table
INT4 nBodyStyleThe ID of a style that is defined in  the PublishTool object that is used 
for the body portion of the table
Output:NoneReturn ValueNoneRemarks/Usage:The styles specified must be defined using the AddS tyle( ) method of the associ ated PublishTool object. 
These styles are generally applied, but can be ove rridden for specific cells using the SetCellStyle( ) 
method. 
Example:*see AddColumn() method
 API-1854  SetCellStyle
4.21.1.7  SetCellStyle
SetCellStyle
( nRow, nColumn, nStyle )
Description:
Selects a style to apply to a table cellInput:
INT4 nRowThe ID of the row to be updated. The first body row of the table is 
nRow=0
INT4 nColumnThe ID of the column to be update d. This value is the return code 
from the AddColumn() method. Howe ver, just like rows, the first 
body column of the table is nColumn=0
INT4 nStyleThe ID of a style that is defined in  the PublishTool object that is used 
for the selected cell.
Output:
NoneReturn ValueNoneRemarks/Usage:This method merely defines potential styles to cells, the style is no t applied until the table is published.  
Styles selected by this method override the head er and body styles selected by SetTableStyle().
You can override the header styl es by specifying the following…
nRow = -1   The column title row
nRow = -2   The column group title rownColumn = -1 The left side header column
Example:
SetCellReal   API-1855
4.21.1.8  SetCellReal
SetCellReal
( nRow, nColumn, dValue )
Description:
Adds a real number value to a cellInput:
INT4 nRowThe ID of the row to be updated. The first body row of the table is 
nRow=0
INT4 nColumnThe ID of the column to be update d. This value is the return code 
from the AddColumn() method. Howe ver, just like rows, the first 
body column of the table is nColumn=0
REAL8 dValue A real number value to assign to the specified cellOutput:NoneReturn ValueFE_NOT_A V AILABLE The specified row is not defined or could not be added
FE_FAIL Unable to assign the speci fied value to the cell
Remarks/Usage:
The format of the values shown in cells defined by this method is controlled by the SetRealFormat( ) 
method. Only a single real, integer or te xt value can be assigned to a table cell.
Example:*see AddColumn() method
 API-1856  SetCellInteger
4.21.1.9  SetCellInteger
SetCellInteger
( nRow, nColumn, nValue )
Description:
Adds an integer value to a cellInput:
INT4 nRowThe ID of the row to be updated. The first body row of the table is 
nRow=0
INT4 nColumnThe ID of the column to be update d. This value is the return code 
from the AddColumn() method. Howe ver, just like rows, the first 
body column of the table is nColumn=0
INT4 nValue An integer value to  assign to the specified cell
Output:NoneReturn ValueFE_NOT_A V AILABLE The specified row is not defined or could not be added
FE_FAIL Unable to assign the speci fied value to the cell
Remarks/Usage:
Only a single real, integer or text value can be assigned to a table cell.
Example:
SetCellText   API-1857
4.21.1.10  SetCellText
SetCellText
( nRow, nColumn, sText )
Description:
Adds a text string to a cellInput:
INT4 nRowThe ID of the row to be updated. The first body row of the table is 
nRow=0
INT4 nColumnThe ID of the column to be update d. This value is the return code 
from the AddColumn() method. Howe ver, just like rows, the first 
body column of the table is nColumn=0
STRING sText A text string to assign to the specified cell
Output:NoneReturn ValueFE_NOT_A V AILABLE The specified row is not defined or could not be added
FE_FAIL Unable to assign the speci fied value to the cell
Remarks/Usage:
Only a single real, integer or text value can be assi gned to a table cell. If more are required, you must 
format them as a string and use this  method to apply them to the cell.
Example:*see AddColumn() method
 API-1858  SetMultiCellStyle
4.21.1.11  SetMultiCellStyle
SetMultiCellStyle
( nCount, vRow, vC olumn, vStyle )
Description:
Selects a style to apply to multiple table cellsInput:INT4 nCount The number of entries in the vRow, vColumn and vStyle arrays
INT4 vRow[0..nCount-1]The IDs of the rows to be updated. The first body row of the table is 
nRow=0
INT4 vColumn[0..nCount-1]The IDs of the columns to be update d. This value is the return code 
from the AddColumn() method. Howe ver, just like rows, the first 
body column of the table is nColumn=0
INT4 vStyle[0..nCount-1]The IDs of styles that are defined in the PublishTool object that is 
used for the selected cell.
Output:NoneReturn ValueFE_INV ALID nCount must be greater than zeroFE_NO_MEMORY Insufficient memory to retrieve the multi cell information
FE_TOO_SMALL One or more of the arrays does not contain enough valuesFE_NOT_A V AILABLE Unable to access one or more of the arrays
FE_BAD_TYPE One or more of the arrays contains values of an incorrect type
Remarks/Usage:
This method operates just like ca lling SetCellStyle( vRow(i), vColumn(i), vStyle(i) ) multiple times.
Example:
SetMultiCellReal   API-1859
4.21.1.12  SetMultiCellReal
SetMultiCellReal
( nCount, vRow, vC olumn, vValue )
Description:
Adds real number values to multiple table cellsInput:INT4 nCount The number of entries in the vRow, vColumn and vValue arrays
INT4 vRow[0..nCount-1]The IDs of the rows to be updated. The first body row of the table is 
nRow=0
INT4 vColumn[0..nCount-1]The IDs of the columns to be update d. This value is the return code 
from the AddColumn() method. Howe ver, just like rows, the first 
body column of the table is nColumn=0
INT4 vValue[0..nCount-1] The values to add to the specified cells.
Output:NoneReturn ValueFE_INV ALID nCount must be greater than zeroFE_NO_MEMORY Insufficient memory to retrieve the multi cell information
FE_TOO_SMALL One or more of the arrays does not contain enough valuesFE_NOT_A V AILABLE Unable to access one or more of the arrays
FE_BAD_TYPE One or more of the arrays contains values of an incorrect type
Remarks/Usage:
This method operates just like calling SetCelReal ( vRow(i), vColumn(i), vValue(i) ) multiple times.
Example:
 API-1860  SetMultiCellInteger
4.21.1.13  SetMultiCellInteger
SetMultiCellInteger
( nCount, vRow, vC olumn, vValue )
Description:
Adds integer values to multiple table cellsInput:INT4 nCount The number of entries in the vRow, vColumn and vValue arrays
INT4 vRow[0..nCount-1]The IDs of the rows to be updated. The first body row of the table is 
nRow=0
INT4 vColumn[0..nCount-1]The IDs of the columns to be update d. This value is the return code 
from the AddColumn() method. Howe ver, just like rows, the first 
body column of the table is nColumn=0
INT4 vValue[0..nCount-1] The values to add to the specified cells.
Output:NoneReturn ValueFE_INV ALID nCount must be greater than zeroFE_NO_MEMORY Insufficient memory to retrieve the multi cell information
FE_TOO_SMALL One or more of the arrays does not contain enough valuesFE_NOT_A V AILABLE Unable to access one or more of the arrays
FE_BAD_TYPE One or more of the arrays contains values of an incorrect type
Remarks/Usage:
This method operates just like calling SetCellInteg er( vRow(i), vColumn(i), vValue(i) ) multiple times.
Example:
SetMultiCellText   API-1861
4.21.1.14  SetMultiCellText
SetMultiCellText
( nCount, vRow, vColumn, vText )
Description:
Adds text values to multiple table cellsInput:INT4 nCount The number of entries in the vRow, vColumn and vText arrays
INT4 vRow[0..nCount-1]The IDs of the rows to be updated. The first body row of the table is 
nRow=0
INT4 vColumn[0..nCount-1]The IDs of the columns to be update d. This value is the return code 
from the AddColumn() method. Howe ver, just like rows, the first 
body column of the table is nColumn=0
INT4 vText[0..nCount-1] The text to add to the specified cells.Output:NoneReturn ValueFE_INV ALID nCount must be greater than zeroFE_NO_MEMORY Insufficient memory to retrieve the multi cell information
FE_TOO_SMALL One or more of the arrays does not contain enough valuesFE_NOT_A V AILABLE Unable to access one or more of the arrays
FE_BAD_TYPE One or more of the arrays contains values of an incorrect type
Remarks/Usage:
This method operates just like calling SetCellTex t( vRow(i), vColumn(i), vText(i) ) multiple times.
Example:
 API-1862  Publish
4.21.1.15  Publish
Publish
( void )
Description:
Adds the contents of the current table into the associated PublishTool object
Input:NoneOutput:NoneReturn ValueFE_NOT_A V AILABLE Current object is not prop erly associated with a PublishTool object
FE_FAIL Unable to add table into  the PublishTool object
Remarks/Usage:
This method must be called after the entire contents of the table have been defined. The contents of the 
table are inserted into the object as it is called… just like the various "Add" methods in the PublishTool 
object.
Example:*see AddColumn() method
   API-1863
4.22  BodyMesher Objects
The BodyMesher object offers programmatic access to the capab ilities of the Mesh, Bodies and 
Mesh, Mesh on Mesh commands.
The BodyMesher Object Properties are used to se t options in the Autome sh Bodies dialog box 
used by the Mesh, Bodies and Mesh, Mesh on Mesh commands. The BodyMesher Object Option 
Methods are used to set multiple properties on th e BodyMesher object usin g a single method, cal-
culate a default mesh size, set sizing on additi onal curves and/or surfaces, while the BodyMesher 
Object Operation Methods are used to mesh sel ected bodies or remesh the selected elements.
The appropriate process is to have the BodyMesh er Properties (see Section 4.22.1, "BodyMesher 
Object Properties") specified or use the BodyM esher Option Methods (see Section 4.22.2, "Body-
Mesher Object Option Methods") to  specify multiple parameters be fore calling one of the one of 
the BodyMesher Object Operatio n Methods (see Section 4.22.3, "BodyMesher Object Operation 
Methods").
Use the feBodyMesher method of the FEMAP App lication object to create BodyMesher objects.
4.22.1  BodyMesher Object Properties
Property Description
Mesh Type
enum MeshTypeSpecifies Type of Elements to create:
Tri = FTO_TRIA3 (2) or FTO_TRIA6 (3)
Quad = FTO_QUAD4 (4) or FTO_QUAD8 (5)
Tet (Mesh, Bodies command only) = FTO_TETRA4 (6) or 
FTO_TETRA10 (10)
BOOL MidsideNodes When True, enables Midside Nodes option
Mesh Sizing
REAL8 TargetSize Specifies value for Target Element Size
BOOL PointsAroundCircleOn When True, enables Points  Around Circle option
INT4 PointsAroundCircle Specifies value for Points Around Circle
BOOL MinSizeFactorOn When True, enables Min Element Size Factor option
REAL8 MinSizeFactor Specifies value (percentage) for Min Element Size Factor
BOOL GrowthFactorOn When True, enables Growth Factor option
REAL8 GrowthFactor Specifies value (percentage) for Growth Factor
Geometry tab - Mesh Associativity (Mesh, Bodies command only)
enum AssociateToSpecifies option for Mesh Associativity:
All Geometry = MPAS_ALL (0)
Required Geometry Only = MPAS_REQD (1)
Additional Selected Geometry = MPAS_SELECT (2)
BOOL AssociateAngleOn When True, enables Additiona l Geometry by Angle option
 API-1864  
REAL8 AssociateAngle Specifies value for Additio nal Geometry by Angle
Geometry tab - On Associated Geometry (Mesh, Bodies command only)
BOOL UseCurveSizing When True, enables Use Curve Sizing option
BOOL UseSurfaceSizing When True, enables Use Surface Sizing option
Curvature/Proximity tab - Surface Curvature
BOOL CurvatureAlignment When True, enables Curvature Alignment option
BOOL CurvatureRefinement When True, enables Curvature Refinement option
INT4 CurvatureRefinementMaxPoints Specifies value for Max Points Around Circle
REAL8 CurvatureRefinementLimit Specifies value (percentage) for Refinement Deviation Limit
Curvature/Proximity tab - Surface Proximity
BOOL ProximityRefinement When True, enables Proximity Refinement option
BOOL ProximityElemAcrossOn When True, enables Elements Across option
INT4 ProximityElemAcross Specifies value for Elements Across
BOOL ProximityDistanceOn When True, enables Max Search Distance option
REAL8 ProximityDistance Specifies value for Max Search Distance
INT4 ProximityDirectionSpecifies option for Search Dire ction: Inside = 0, Outside = 
1, Both = 2
Mesh Quality tab - Mesh Quality
BOOL MinQualityOn When True, enables Min Tri/Quad Quality option
REAL8 MinQuality Specifies value for Min Tri/Quad Quality
BOOL EnhancedQualityMesh When True, enables Enhanced Quality Mesh option
BOOL CompatibilityRefinement When True, enables Compa tibility Refinement option
Mesh Quality tab - Faceting Tolerances
REAL8 FacetMaxSize Specifies value (percentage) for Max Facet Size
REAL8 FacetDistanceError Specifies value (percentage) for Distance Error
REAL8 FacetAngleError Specifies value (percentage) for Angle Error
REAL8 FacetChordError Specifies value (percent age) for Chord Error
REAL8 FacetCurveFactor Specifies value for Curve Factor
BOOL UseFaceter When True, enables Use Faceter option
Tet Options tab (Mesh, Bodies command only)Property Description
   API-1865
BOOL TetSliverRemoval When True, enables Tet Sliver Removal option
BOOL TetAllowV oids When True, enables Allow V oid Regions option
BOOL TetMultipleThruThicknessOn When True, enables Multiple Tet thru Thickness option
INT4 TetMultipleThruThicknessSpecifies value for Multiple Tet thru Thickness (value should 
be specified with a value from 2 to 10)
INT4 TetOptimizationLevelSpecifies option for Tet Optim ization: 0 = None, 1 = Mini -
mal, 2 = between Minimal and Default, 3 = Default, 4 = 
between Default and Maximum, 5 = Maximum
REAL8 TetGrowthRatio Specifies value for Tet Growth Ratio
Mesh Features tab - Element Attributes to Retain (Mesh, Mesh on Mesh command only)
BOOL RetainProperty When True, enables Property option
BOOL RetainElementTypeWhen True, enables Element Type option, but is only used when RetainProperty is also set to True
BOOL RetainCornerThickness When True, enables Corner Thickness option
BOOL RetainOffset When True, enables Offset option
BOOL RetainNormalDirection When True, enables Normal Direction option
BOOL RetainColor When True, enables Color option
BOOL RetainLayer When True, enables Layer option
BOOL RetainAssociativity When True, enables Associativity option
Mesh Features tab - Feature Control (Mesh, Mesh on Mesh command only)
REAL8 FeatureEdgeBreakAngle Specifies value (degrees) for Edge Break
BOOL KeepMeshOnFreeEdges When True, enables Keep Mesh on Free Edges option
Mesh Features tab - Connectivity (Mesh, Mesh on Mesh command only)
BOOL MergeNodes When True, enables Merge Nodes optionProperty Description
 API-1866  Clear
4.22.2  BodyMesher Object Option Methods
4.22.2.1  Clear
Clear
( bClearAll )
Description:Reset the contents of the BodyMesher object.
Input:
BOOL bClearAllIf True, resets all parameters and m esh contents in the BodyMesher 
object back to their default/empty st ate. If False, only the mesh con-
tents are cleared.
Output:NoneReturn Code:NoneRemarks/Usage:Setting Clear (FALSE) allows the obje ct to be reused for multiple mesh es without resetting all of the 
parameters.
Example:None
Dialog   API-1867
4.22.2.2  Dialog
Dialog
( bMeshingSolids, nSolidOrElemSet )
Description:Displays the dialog box shown in the Mesh, Bodies  and Mesh, Mesh on Mesh commands to collect 
parameter settings
Input:
BOOL bMeshingSolidsIf True displays the dialog box u sed by the Mesh, Bodies command. 
If False, displays the dialog box used by the Mesh, Mesh on Mesh 
command.
INT4 nSolidOrElemSetThe ID of a Set object containing  the IDs of Solids (can include 
Sheet Solids and General Bodies as we ll) or Elements to be meshed. 
Alternatively, if you specify a nega tive value, it is simply the ID of 
the single entity to mesh.
Output:NoneReturn Code:FE_INV ALID nSolidOrElemSet must be nonzeroFE_CANCEL User canceled the dialog boxRemarks/Usage:The entities specified in nSolidOrElem Set are not remeshed or added to the object in this method, they 
are simply used to properly initialize the dialog box.
Example:None
 API-1868  Size
4.22.2.3   Size
Size
( dTargetSize, dMinSizeFactor, dGrowthFactor, nPointsAroundCircle )
Description:Single method to set multiple  properties on the object to  set mesh sizing parameters
Input:REAL8 dTargetSize Sets value for TargetSize property on the object
REAL8 dMinSizeFactorSets the MinSizeFactorOn and MinSizeFactor properties on the 
object. If dMinSizeFactor=0.0, then MinSizeFactorOn = False
REAL8 dGrowthFactorSets the GrowthFactorOn and Growth Factor properties on the object. 
If dGrowthFactor = 0.0, GrowthFactorOn = False
INT4 nPointsAroundCircleSets the PointsAroundCircleOn an d PointsAroundCircle properties 
on the object. If nPointsAroundCirc le < 3, PointsAroundCircleOn = 
False
Output:NoneReturn Code:
FE_INV ALIDOne or more parameters is specifie d with an invalid or unreasonable 
value
Remarks/Usage:NoneExample:None
UseSizing   API-1869
4.22.2.4  UseSizing
UseSizing
( bUseCurveSizing, bUseSurfaceSizing )
Description:Single method to set multiple pr operties on the object in the On  Associated Geometry parameters
Input:BOOL bUseCurveSizing Sets the UseCurveSizing property on the objectBOOL bUseSurfaceSizing Sets the UseS urfaceSizing property on the object
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-1870  Associate
4.22.2.5  Associate
Associate
( nAssociateTo, nExtraCurveSetID, nExtraSurfaceSetID, bAssociateAngleOn, dAssoci-
ateAngle )
Description:Single method to set properties on the object to set Mesh Associativ ity parameters and add extra geom-
etry to be retained
Input:
INT4 nAssociateToSets the level of automatic mesh ass ociativity to be retained. 0=All 
Geometry, 1=Required Geometry Only, 2=Retain additional geome-
try selected by nExtraCurveS etID and/or nExtraSurfaceSetID
INT4 nExtraCurveSetIDThe ID of a Set object containing the IDs of additiona l Curves to be 
retained in the final mesh when nAss oicateTo is set to a value of 2. 
Use 0 for None.
INT4 nExtraSurfaceSetIDThe ID of a Set object containing th e IDs of additional Surfaces to be 
retained in the final mesh when nAss oicateTo is set to a value of 2. 
Use 0 for None.
BOOL bAssociateAngleOnIf True, select extra geometry to retain by the angle between surfaces 
adjacent to curves
REAL8 dAssociateAngleThe angle to be used to select extr a geometry to be retained. Ignored 
if bAssociateAngleOn = False
Output:NoneReturn Code:FE_INV ALID Either invalid value for nAssociateTo or dAssociateAngle 
Remarks/Usage:NoneExample:None
CalculateDefaultMeshSize   API-1871
4.22.2.6  CalculateDefaultMeshSize
CalculateDefaultMeshSize
( enDataType, nSolidOrElemSet, dSize )
Description:Find the default mesh size that is used to initialize the target mesh size
Input:enum enDataType Either FT_ELEM or FT_SOLID
INT4 nSolidOrElemSetThe ID of a Set object containing  the IDs of Solids (can include 
Sheet Solids and/or General Bodies) or Elements to be used to com-
pute the target size. 
Output:REAL8 dSize The computed target size for meshing
Return Code:
FE_INV ALID Invalid entity type selected for enDataTypeRemarks/Usage:Calling this method will return the defa ult target size and will also upda te the target size in the object.
Example:None
 API-1872  SetSizeOnCurves
4.22.2.7  SetSizeOnCurve
SetSizeOnCurves
( nCurveSet, dSize )
Description:Sets mesh sizing on selected curvesInput:
INT4 nCurveSetThe ID of a Set object containing the IDs of Curves to set sizing. 
Alternatively, if you specify a nega tive value, it is simply the ID of 
the single curve to be set.
REAL8 dSize The nominal element size along the curvesOutput:None
Return Code:
FE_FAIL Unable to set sizes on curvesRemarks/Usage:This method is equivalent to ca lling the feMeshSizeCurve method w ith no biasing or other options. 
Mesh size along curves are only used if UseCurveSizing is set to True and the curves are retained in the 
final mesh.
Example:None
SetSizeOnSurfaces   API-1873
4.22.2.8  SetSizeOnSurfaces
SetSizeOnSurfaces
( nSurfaceSet, dSize )
Description:Sets mesh sizing on selected surfacesInput:
INT4 nSurfaceSetThe ID of a Set object containing the IDs of Surfaces to set sizing. 
Alternatively, if you specify a nega tive value, it is simply the ID of 
the single surface to be set.
REAL8 dSize The nominal element size  along the curves of the surfaces.
Output:None
Return Code:
FE_FAIL Unable to set sizes on surfacesRemarks/Usage:This method is equivalent to calling the feMeshSizeS urface method with no options other than sizing. 
Mesh sizes on surfaces are only used if UseSurfaceSi zing is True and the surfaces are retained in the 
final mesh.
Example:None
 API-1874  MeshBodies
4.22.3  BodyMesher Ob ject Operation Methods
4.22.3.1  MeshBodies
MeshBodies
( nSolidSet, enElemShape, nPropID, nZeroAttrPropID )
Description:Mesh Solids, Sheet Solids, and/or General Bodies with  the selected parameters
Input:
INT4 nSolidSetThe ID of a Set object containing  the IDs of Solids (can include 
Sheet Solids and General Bodies as  well) to be meshed. Alterna-
tively, if you specify a negative value,  it is simply the ID of the single 
entity to mesh. 
enum enElemShapeThe type of mesh to create. This can be FTO_TRIA3 (2), 
FTO_TRIA6 (3), FTO_QUAD4 (4), FTO_QUAD8 (5), FTO_TET-RA4 (6), or FTO_TETRA10 (10).
INT4 nPropIDThe ID of an existing Property to apply to the mesh elements. Spec-
ify nPropID=0 to use the Meshing Attributes that have been previ-
ously applied to the geometry.
INT4 nZeroAttachPropIDIf nPropID=0, and Meshing Attributes  are being used, this property 
will be used for any geometry where Meshing Attributes are not specified.
Output:NoneReturn Code:FE_INV ALID Invalid element shape or no  geometry specified to be meshed
FE_BAD_TYPEThe specified property does not corre spond to the element shape that 
was selected
FE_NOT_EXIST The specified property does not existFE_FAIL Meshing failedRemarks/Usage:Calls the Mesh, Bodies  command programmatically  using the Object Prop erties currently specified
on the BodyMesher object
Example:None
MeshOnMesh   API-1875
4.22.3.2  MeshOnMesh
MeshOnMesh
( nElemSet, enElemShape )
Description:Remesh Elements with the selected parametersInput:
INT4 nElemSetThe ID of a Set object containing the IDs of Elements to be 
remeshed. Alternatively, if you specify a negative value, it is simply 
the ID of the single entity to remesh.
enum enElemShapeThe type of mesh to create. This can be FTO_TRIA3 (2), 
FTO_TRIA6 (3), FTO_QUAD4 (4), or FTO_QUAD8 (5).
Output:NoneReturn Code:FE_INV ALID Invalid element shape or no  geometry specified to be meshed
FE_FAIL Meshing failedRemarks/Usage:Calls the Mesh, Mesh on Mesh  command programmatically usin g the Object Properties currently
specified on the BodyMesher object
Example:None
 API-1876  
   API-1877
5. FEMAP Entity Objects
In addition to the various method s and properties that are availabl e directly from the main FEMAP 
application object, and the tool objects describe d earlier, FEMAP also provides objects that allow 
you to query and manipulate the data in your m odel. You will find that these objects give you the 
detailed control that is often necessary  to implement your own functionality.
Using the Documentation for Entity Objects
All of the entity objects share common functionality  to retrieve, store and search your model data. 
Rather than describe all of this  functionality for each object, these  common functions are described 
in Section 5.1, "Common Entity Properties and Me thods". Each of the in dividual entity objects 
then describes only the additional functionality provided by that object.
Creating an Object
To link your application to FEMAP, you had to declare an obje ct and then connect it to FEMAP. In 
Basic, this is done via the GetObject or Crea teObject functions. Creating these additional FEMAP 
objects is similar. First you must declare an obj ect. Then, however, instead of using the standard 
system level functions, you use one of the follo wing FEMAP functions to  actually create the 
object. Once the object has been created, all of th e properties and methods for that type of object 
are available for use.
All of the following methods are available from the FEMAP application object, and return the 
object that they create.
Entity Objects
Method Description Other Methods
feAeroPanel (Section 5.2, "Aero Panel/Body 
Objects")Creates an Aero Panel/Body 
Object
feAeroProp (Section 5.3, "Aero Property 
Objects")Creates an Aero Property 
Object
feAeroSpline (Section 5.4, "Aero Spline 
Objects")Creates an Aero Spline  
Object
feAeroSurf (Section 5.5, "Aero Surface 
Objects")Creates an Aero Control 
Surface Object
feAnalysisCase (Section 5.6, "AnalysisCase 
Objects")Creates an AnalysisCase 
ObjectAnalysisMgr.Case
feAnalysisMgr (Section 5.7, "AnalysisMgr 
Objects")Creates an AnalysisMgr 
Object
 API-1878  
feAnalysisStep (Section 5.8, "AnalysisStep 
Objects")Creates an AnalysisStep 
ObjectAnalysisCase.PutStep
feAnalysisStudy (Section 5.9, "Analysis-
Study Objects")Creates an AnalysisStudy 
Object
feBCDefinition (Section 5.10, "BCDefinition 
Objects")Creates a BCDefinition 
ObjectBCSet.NextBCDef
feBCEqn (Section 5.11, "BCEqn Objects") Creates a BCEqn Object BCSet.NextBC, 
BCDefini-
tion.NextBC
feBCGeom (Section 5.12, "BCGeom 
Objects")Creates a BCGeom Object BCSet.NextBC, 
BCDefini-tion.NextBC
feBCNode (Section 5.13, "BCNode Objects") C reates a BCNode Object BCSet.NextBC, 
BCDefini-
tion.NextBC
feBCSet (Section 5.14, "BCSet Objects") Creates a BCSet Object
feChart (Section 5.15, "Chart Objects") Creates a Chart ObjectfeChartSeries (Section 5.16, "Chart Data 
Series Objects")Creates a Chart Data Series 
Object
feConnectionProp (Section 5.17, "Connec-
tion Property Objects")Creates a Connection Prop-
ertyConnection.Prop
feConnectionRegion (Section 5.18, "Connec-
tion Region Objects")Creates a Connection 
Region / Contact ObjectfeContact
feConnection (Section 5.19, "Connection 
Objects")Creates a Connection
feCSys (Section 5.20, "CSys Objects") Creates a CSys Object
feCurve (Section 5.21, "Curve Objects") Creates a Curve ObjectfeDataSurface (Section 5.22, "Data Surface 
Objects")Creates a Data Surface 
Object
feMatrixInput (Section 5.23, "Direct Matrix 
Input Objects")Creates a Direct Matrix 
Input Object
feDiscreteValueSet (Section 5.24, "Discrete 
Value Set Object")Creates a Discrete Value Set 
Object
feElem (Section 5.25, "Element Ob jects") Creates an Element Object
feFreebody (Section 5.26, "Freebody 
Objects")Creates an Freebody ObjectMethod Description Other Methods
   API-1879
feFrequency (Section 5.27, "Frequency 
Objects")Creates an Frequency 
Object
feFunction (Section 5.28, "Function Objects") Creates a Function Object
feGFXArrow (Section 5.29, "GFXArrow 
Objects")Creates a GFXArrow Object
feGFXLine (Section 5.30, "GFXLine 
Objects")Creates a GFXLine Object
feGFXPoint (Section 5.31, "GFXPoint 
Objects")Creates a GFXPoint Object
feGFXQuad4 (Section 5.32, "GFXQuad4 
Objects")Creates a GFXQuad4 Object
feGFXTria3 (Section 5.33, "GFXTria3 
Objects")Creates a GFXTria3 Object
feGlobalPly (Section 5.34, "GlobalPly 
Objects")Creates a GlobalPly Object
feGlobalStep (Section 5.35, "GlobalStep 
Objects")Creates an GlobalStep 
Object
feGroup (Section 5.36, "Group Objects") Creates a Group ObjectfeLayer (Section 5.37, "Layer Objects") Creates a Layer ObjectfeLayup (Section 5.38, "Layup Object s") Creates a Layup Object Prop.Layup
feLoadBolt (Section 5.39, "LoadBolt Object") Creates a LoadBolt Object
feLoadDefinition (Section 5.40, "LoadDefini-
tion Objects")Creates a LoadDefinition 
ObjectLoadSet.NextLoad-
Def
feLoadETemp (Section 5.41, "LoadETemp 
Objects")Creates a LoadETemp 
ObjectLoadSet.NextLoad, 
LoadDefinition.Next-Load
feLoadGeom (Section 5.42, "LoadGeom 
Objects")Creates a LoadGeom Ob ject LoadSet.NextLoad, 
LoadDefinition.Next-
Load
feLoadMesh (Section 5.43, "LoadMesh 
Objects")Creates a LoadMesh Ob ject LoadSet.NextLoad, 
LoadDefinition.Next-
Load
feLoadNTemp (Section 5.44, "LoadNTemp 
Objects")Creates a LoadNTemp 
ObjectLoadSet.NextLoad, 
LoadDefinition.Next-Load
feLoadSet (Section 5.45, "LoadSet Objects") Creates a LoadSet ObjectMethod Description Other Methods
 API-1880  
feMapOutput (Section 5.46, "MapOutput 
Objects")Creates a MapOutput Object
feMatl (Section 5.47, "Material Objects") C reates a Material Object Element.Matl, 
Prop.Matl
feMeshHardPoint (Section 5.48, "Mesh Point 
Objects")Creates a Mesh Point Object
feMeshHardPointDefinition (Section 5.49, 
"Mesh Point Definition Objects")Creates a Mesh Point Defi-
nition Object
feMonitorPoint (Secti on 5.50, "Monitor Point 
Objects")Creates a Monitor Point 
Object
feNode (Section 5.51, "Node Objects") Creates a Node ObjectfeOptim (Section 5.52, "Optim Ob jects") Creates an Optimization 
Object
feOptMC (Section 5.53, "Optimization Manu-
facturing Constraints Objects")Creates an Optimization 
Manufacturing Constraint Object
feOptRel (Section 5.54, "Optimization Rela-
tionship (Variable) Objects")Creates an Optimization 
Relationship (Variable) 
Object
feOptResp (Section 5.55, "Optimization 
Response (Limits) Objects")Creates an Optimization 
Response (Limits) Object
feOutput (Section 5.56, "Output Objects 
(OBSOLETE)")Creates an Output Object Output.Corner, 
Output.X, Output.Y , 
Output.Z
feOutputSet (Section 5.57, "OutputSet 
Objects")Creates an OutputSet Object Output.Vector
fePlane (Section 5.58, "Plane Objects") Creates a Plane Object
fePoint (Section 5.59, "Point Objects") Creates a Point ObjectfeProp (Section 5.60, "Property Objects" ) Creates a Property Object Element.Prop
feReference (Section 5.61, "Reference 
Objects")Creates a Reference Object
feReport (Section 5.62, "Report Ob jects") Creates a Report Object
feSEReference (Section 5.63, "Superelement 
Reference Objects")Creates an Superelement 
Object
feSolid (Section 5.64, "Solid Ob jects") Creates a Solid/V olume 
ObjectMethod Description Other Methods
   API-1881
Other Objects
feUserData (Section 4.8, "UserData Objects") Creates a UserData ObjectfeSurface (Section 5.65, "Surface Ob jects") Creates a Surface Object
feTableData (Section 5.66, "Table Data 
Objects")Creates a Table Data Object
feText (Section 5.67, "Text Objects") Creates a Text Object
feTMGBC (Section 5.68, "TMGBC Objects") Creates a TMGBc ObjectfeTMGCtrl (Section 5.69, "TMGCtrl 
Objects")Creates a TMGCtrl Object
feTMGInt (Section 5.70, "TMGInt Objects") Creates a TMGInt Object
feTMGOpt (Section 5.71, "TMGOpt 
Objects")Creates a TMGOpt Object
feTMGReal (Section 5.72, "TMGReal Objects")Creates a TMGReal Object
feVar (Section 5.73, "Variable Objects") Creates a Var Object
feVector (Section 5.74, "Vector Objects") Creates a Vector ObjectfeView (Section 5.75, "View Objects") Creates a View ObjectfeViewOrient (Section 5.76, "ViewOrient 
Objects")Creates a View Orient Object
Method Description Other MethodsMethod Description Other Methods
 API-1882  
Example of Creating an Object
The following shows a sample (in Basic) of how to  create a Node object, and use it to retrieve 
Node 100, update its X coordinate, and save the updated location in your model. This example 
assumes that FEMAP is running and h as a model that contains Node 100.
Sub Main 
Dim App As femap.model 
Set App = feFemap()

Dim nd As femap.Node 
Set nd = App.feNode 

rc     = nd.Get(100) 
nd.x   = 50.5 
rc     = nd.Put(100)
End Sub 
Destroying an Object
Objects are destroyed automatically  when your application ends. However, you can, and should, 
destroy them yourself as soon as you are done usin g them. By destroying objects sooner, you will 
minimize the amount of memory that is requir ed at any one time by your application and by 
FEMAP.
From Basic, you can destroy an object simply by changing its value. For example, if you had:

Dim femap As Object 
Set femap = GetObject(, "femap.model") 
Dim nd As Object 
Set nd = femap.feNode 
...
Set nd = femap.feNode 
...
The first “nd” object was destroyed as soon as yo u made the second Set statement. This, however, 
creates a second node object that will be destroye d when your application terminates. Similarly, 
you can do the following:

Dim femap As Object 
Set femap = GetObject(, "femap.model") 
Dim nd As Object 
Set nd = femap.feNode 
...
Set nd = Nothing 
...
This destroys the nd object without creating another.
   API-1883
5.1  Common Entity Properties and Methods 
Entity objects are ones that contain the data that  is part of your FEMAP model. This includes 
nodes, elements, materials, properties, points , and curves. All of the properties and methods 
described here can be acc essed from any entity object, no matter  what its type. As you will see, 
most of these methods deal with traversing the ent ities in the model, or retrieving or storing entity 
data. You will find properties and methods that are specific to an entity ty pe documented with that 
object. 
5.1.1  Common Entity Properties
Property Description
INT4 IDThe ID of the entity that has been  loaded. This property can be 
retrieved any time. It is automatically updated by any method that loads or saves entity data. It  is not recommen ded to change 
this property directly. You can do  it, but simply doing that does 
not load the data for th e entity with the new ID.
INT4 SetIDThe SetID of the entity that ha s been loaded. For many entity 
types, this will alwa ys be 1. All entities that are not stored in 
sets are stored with a SetID = 1.  Loads, constraints, and other 
set-based data are stored with SetID equal to the ID of the 
appropriate set.Unlike the ID property, you can and should update this property 
to be the set that you want to use to retrieve and store entities. 
You can do this either directly or indirectly with the NextSet, 
PrevSet, NextEmptySet, or  PrevEmpty Set methods.
INT4 ActiveThe ID of the active entity. This is normally used for set-based 
entities like load sets, output sets, etc. to choose the active set. It 
is also used for properties and materials to choose the active entity.
 API-1884  Get
5.1.2  Common Entity Methods
5.1.2.1  Get
Get
( id )
Description:This method retrieves an entity from your  model database with the specified ID.
Input:
INT4 idID of the entity to retrieve. If you specify id=0, then the current value 
of the ID property will be used instead.
Output:NoneReturn Code:FE_FAIL The specified entity does not exist.
Remarks/Usage:This method retrieves the data for the sel ected entity and updates  the ID property.
Example:None
GetLibrary   API-1885
5.1.2.2  GetLibrary
GetLibrary
( libINDEX, libFile )
Description:This method retrieves an entity  from the associated library.
Input:
INT4 libINDEXThe index of the entity stored in th e library. The first entity stored is 
libINDEX = 0, the second has libIN DEX = 1, and so on. If you spec-
ify libINDEX = -1, a dialog box w ill be displayed showing all enti-
ties in the library, and will allow the user to select the entity to load.
INT4 or enum libFILEUse zLibraryFile enumerat ion. Alternatively, en ter value for Type of 
library: 0=Open Dialog Box, 1=Personal, 2=Shared, 3=Femap Stan-
dard Libraries
Output:
None
Return Code:
FE_FAILNo Material was selected. Either th e library is empty or does not con-
tain any Materials of the matchi ng type (e.g. 3D Orthotropic)
FE_CANCEL User canceled the dialog box to select a Material from the library
FE_INV ALID Library file was opened but is n't a valid library of the correct type
FE_NOT_EXIST The selected index in the library was not found.
FE_NOT_A V AILABLEThe library file could not be accessed. Either the filename is speci-
fied incorrectly in FEMAP, or there is some other permission or cor-ruption problem with the file.
FE_BAD_TYPETried to call GetLibrary from an en tity/object type that does not sup-
port libraries
Remarks/Usage:When using this method with a Material object , you must set the “Active Material Type” using 
App.Info_ActiveType (FT_MATL) = “Type of Material  to Get from Library” before calling the GetLi-
brary method. To avoid setting the “Active Material Type”, use the GetLibraryOfType method on the 
Material Object.
When using this method with a Property object, you must set the “Active Element Type” using 
App.Info_ActiveType (FT_ELEM) = “Type of Elemen t/Property to Get from Li brary” before calling 
the GetLibrary method. Setting the “Active Property  Type” will NOT work as expected. To avoid set-
ting the “Active Element Type”, use the GetLib raryOfType method on the Property Object.
Example:
 API-1886  GetLibrary
NoneGetLibrary
( libINDEX, libFile )
Put   API-1887
5.1.2.3  Put
Put
( id )
Description:This method stores an entity in the mo del database with the specified ID.
Input:
INT4 idThe ID of the entity to store. If you specify id=0, then the current 
value of the ID property will be used instead.
Output:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:All of the data that has been curre ntly loaded/updated is stored as th e entity with the specified ID. The 
ID where you store the data does not have to be the sa me as the ID that you used in a previous Get. For 
example, calling Get(3), then Put(6), creates a new en tity with an ID of 6 that is a copy of entity 3.
Example:None
 API-1888  PutLibrary
5.1.2.4  PutLibrary
PutLibrary
( libINDEX, libFILE )
Description:This method stores an entity in the selec ted index of the specified library file.
Input:
INT4 libINDEXIf libINDEX = -1 (actually just < 0 ), the entity will be added to the 
end of the library. If a library does not exist, a new library will be 
created. If libINDEX = 0, the entity w ill be inserted as the first entry 
in the library. Also, if no library currently exists or the library is 
empty creates a new library. If libINDEX > 0, the entity is inserted 
before the libINDEX'th entry in the existing library.
INT4 or enum libFILEUse zLibraryFile enumerat ion. Alternatively, en ter value for Type of 
library: 0=Open Dialog Box, 1=Personal, 2=Shared, 3=Femap Stan-dard Libraries
Output:NoneReturn Code:FE_FAIL Unable to complete the insertion of the entity into the library.FE_NOT_EXIST The library does not exist. Can only happen when libIndex > 0.
FE_NOT_A V AILABLELess than libINDEX entr ies were found in the library so the entity 
cannot be inserted at that location.
Remarks/Usage:For most entity types, the current data  that you have loaded into the object can be stored directly to the 
library. There is no need to neces sarily store it in the model database.  For several entity types, such as 
functions and analysis sets, the object must first be st ored in the database. For th ese entities, it is actually 
the data from the database th at is written to the library, not the data  in the current object. The ID of the 
current object must identify the database entity that you want written in the library.
Example:None
GetTitleList   API-1889
5.1.2.5  GetTitleList
GetTitleList
( minID, maxID, count, listID, listTITLE )
Description:This method retrieves two arrays  which contain the IDs and titles of  all entities (in the selected ID 
range) with the same type as the current object. 
Input:INT4 minIDThe minimum and maximum entity ID s to retrieve. You can set  
minID=maxID=0 to retrie ve all available entities.INT4 maxID
Output:
INT4 countThe number of entities retrieved. Th is is the number of entries in 
listID and listTITLE.
INT4 listID[0..count-1] The IDs of the available entities.
STRING listTITLE[0..count-1]The titles of the available entities. If the entity does not have a title, 
the string “Untitled” will be returned.
Return Code:
FE_FAILThis function is only available for entity types that have titles (Mate-
rial, Property, View, etc.). If you ca ll this method from another entity 
type, it will fail.
Remarks/Usage:This method is identica l to calling GetTitleIDList( False, ....). See that method for more information.
Example:
 API-1890  GetTitleIDList
5.1.2.6  GetTitleIDList
GetTitleIDList
( bIncludeID, minID, maxID, count, listID, listTITLE )
Description:This method retrieves two arrays  which contain the IDs and titles of  all entities (in the selected ID 
range) with the same type as the current object. 
Input:
BOOL bIncludeIDIf True, the  titles are in the form “ID..title” (for example, “1..Steel”. 
If False, only the title, without th e ID or separator is returned.
INT4 minIDThe minimum and maximum entity ID s to retrieve. You can set  
minID=maxID=0 to retrie ve all available entities.INT4 maxID
Output:
INT4 countThe number of entities retrieved. Th is is the number of entries in 
listID and listTITLE.
INT4 listID[0..count-1] The IDs of the available entities.
STRING listTITLE[0..count-1]The titles of the available entities. If the entity does not have a title, 
the string “Untitled” will be returned.
Return Code:
FE_FAILThis function is only available for entity types that have titles (Mate-
rial, Property, View, etc.). If you ca ll this method from another entity 
type, it will fail.
Remarks/Usage:This method is somewhat different than the other en tity methods. It does not re ally operate on, or tell 
about the current entity. It simply uses  it to select the type of entity that you are interested in, and to 
choose the setID of interest for certai n entity types - like output objects.
Calling this method with bIncludedID=False,  is the same as calling GetTitleList( )
Example:
GetTitleIDList   API-1891

‘Attach to FEMAP........................ 
Dim femap As Object 
Set App = feFemap() 
‘Look at Output Set 3................... 
Dim oc As Object 
Set oc = femap.feOutputSet() 
oc.Get (3) 
Dim od As Object 
Set od = oc.Vector(1) 

Dim rc As Integer 
Dim Count As Long 
Dim ID As Variant 
Dim Title As Variant 
Dim Row As Integer 
‘Retrieve ID and Title of all available Output Vectors... 
rc = od.GetTitleIDList(False, 0, 0, Count, ID, Title) 
‘ Display list in cells of a spreadsheet................. 
For Row = 1 To Count 
   Worksheets(1).Cells(Row, 1).Value = ID(Row - 1) 
   Worksheets(1).Cells(Row, 2).Value = Title(Row - 1) 
Next RowGetTitleIDList
( bIncludeID, minID, maxID, count, listID, listTITLE )
 API-1892  ParseTitleID
5.1.2.7  ParseTitleID
ParseTitleID
( sTitleID )
Description:Returns the ID from a string that was forma tted by GetTitleIDList in the form “ID..title”
Input:STRING sTitleID This must be a st ring in the format “ID..title”
Output:NoneReturn Code:
IDThis is the ID contained in the st ring. 0 if the string has the wrong 
format.
Remarks/Usage:NoneExample:
ParseTitleID   API-1893
Sub ListOutputVectors()
'Attach to FEMAP........................ 
Dim femap As Object 
Set App = feFemap() 

'Look at Output Set 3................... 
Dim oc As Object
Set oc = femap.feOutputSet() 
oc.Get (1) 
Dim od As Object
Set od = oc.Vector(1) 

Dim rc As Integer 
Dim Count As Long 
Dim ID As Variant 
Dim Title As Variant 
Dim Row As Integer 
'Retrieve ID and Title of all available Output Vectors... 
rc = od.GetTitleIDList(True, 0, 0, Count, ID, Title) 
' Display list in cells of a spreadsheet................. 
For Row = 1 To Count 
   Worksheets(1).Cells(Row, 1).Value = _ 
      od.ParseTitleID(Title(Row - 1)) 
   Worksheets(1).Cells(Row, 2).Value = Title(Row - 1) 
Next Row
End SubParseTitleID
( sTitleID )
 API-1894  Exist
5.1.2.8  Exist
Exist
( id )
Description:This method checks to see if a sp ecified entity currently exists.
Input:
INT4 idThe ID of the entity to check. If you specify id=0, then the current 
value of the ID property will be used instead.
Output:NoneReturn Code:FE_FAIL The selected entity does not exist.Remarks/Usage:This method does not load any data. It simply returns FE_OK if the entity exists, and FE_FAIL if it does 
not.
Example:None
Deletable   API-1895
5.1.2.9  Deletable
Deletable
( id )
Description:This method checks to see if  an entity can be deleted.
Input:
INT4 idThe ID of the entity to check. If you specify id=0, then the current 
value of the ID property will be used instead.
Output:NoneReturn Code:FE_FAIL The entity is not deletable.Remarks/Usage:Entities are deletable only if there are no other entities in the model that require them to exist. For exam-
ple, nodes cannot be deleted until after all elem ents that reference th em have been deleted.
Example:None
 API-1896  Delete
5.1.2.10  Delete
Delete
( id )
Description:This method deletes an en tity from the model database.
Input:
INT4 idThe ID of the entity to delete. If you specify id=0, then the current 
value of the ID property will be used instead.
Output:NoneReturn Code:FE_OK The entity was deleted.FE_FAIL The entity could not be deleted.Remarks/Usage:Entities are not deletable if there are other entities in the FEMAP model that require them to exist. Cer-
tain objects, like LoadSet and BCSet objects, will also automatically  delete all of the other entities that 
they contain if you delete  them. For example, if you delete a Lo adSet, all of the individual loads on 
nodes, elements or geometry in  that set will also be deleted.
Example:None
DeleteLibrary   API-1897
5.1.2.11  DeleteLibrary
DeleteLibrary
( libINDEX, libFILE )
Description:This method deletes an entity  from the selected index of the specified library file.
Input:
INT4 libINDEXThe index of the entity stored in th e library. The first entity stored is 
libINDEX = 0, the second has libIN DEX = 1, and so on. If you spec-
ify libINDEX = -1, a dialog box w ill be displayed showing all enti-
ties in the library, and will allow the us er to select the entity to delete.
INT4 or enum libFILEUse zLibraryFile enumerat ion. Alternatively, en ter value for Type of 
library: 0=Open Dialog Box, 1=Personal, 2=Shared, 3=Femap Stan-
dard Libraries
Output:
None
Return Code:
FE_FAILThis function is only available for entity types that have libraries 
(Material, Property, View, etc.). If you call this method from another 
entity type, it will fail.
Remarks/Usage:You must use this method with caution. There is no option to allo w the user to confirm the deletion and 
no option to undo the operation.  Once entities are deleted from a lib rary, they cannot be recovered.
Example:None
 API-1898  Reset
5.1.2.12  Reset
Reset
( void )
Description:This method resets the Next pointer so that the next call to Next will return the first (lowest ID) entity.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:After calling Reset, Next will return the first entity and Prev will return the last (highest ID) entity.
Example:None
Next   API-1899
5.1.2.13  Next
Next
( void )
Description:This method retrieves the next av ailable entity with a larger ID.
Input:NoneOutput:NoneReturn Code:FE_FAIL No additional entities were found.Remarks/Usage:Calling this method simply finds the ne xt available entity with an ID that  is greater than the current ID, 
and calls the Get method with that ID.
Example:None
 API-1900  NextInSet
5.1.2.14  NextInSet
NextInSet
( setID )
Description:This method retrieves the next av ailable entity with a larger ID that is referenced in the Set.
Input:
INT4 setIDThe ID of a Set object that contai ns the IDs of the entities that you 
want to iterate through. 
Output:NoneReturn Code:FE_FAIL No additional entities were found.Remarks/Usage:Calling this method simply finds the ne xt available entity that is in the specified Set object that has an 
ID that is greater than the current ID, and calls the Get method  with that ID.  So, to  start at the beginning 
of the Set, first call the Reset () method on the current entity (not on the Set), or call FirstInSet()
Example:None
Prev   API-1901
5.1.2.15  Prev
Prev
( void )
Description:This method retrieves the next av ailable entity with a smaller ID. 
Input:NoneOutput:NoneReturn Code:FE_FAIL No additional entities were found.Remarks/Usage:Calling this method simply finds the next available entity  with an ID that is sm aller than the current ID, 
and calls the Get method with that ID.
Example:None
 API-1902  First
5.1.2.16  First
First
( void )
Description:This method loads the first (with  the lowest ID) available entity.
Input:NoneOutput:NoneReturn Code:FE_FAIL No entities exist, or unable to load.Remarks/Usage:Calling this method is like callin g Reset, followed by Next.
Example:None
FirstInSet   API-1903
5.1.2.17  FirstInSet
FirstInSet
( setID )
Description:This method loads the first (with  the lowest ID) available entity that is referenced in the Set.
Input:
INT4 setIDThe ID of the set that contains th e entities that you want to iterate 
through.
Output:NoneReturn Code:FE_FAIL No entities exist, or unable to load.Remarks/Usage:Calling this method is like calling Reset, followed by NextInSet()
Example:None
 API-1904  Last
5.1.2.18  Last
Last
( void )
Description:This method loads the last (with the highest ID) available entity.
Input:NoneOutput:NoneReturn Code:FE_FAIL No entities exist, or unable to load.Remarks/Usage:Calling this method is like callin g Reset, followed by Prev.
Example:None
NextSet   API-1905
5.1.2.19  NextSet
NextSet
( void )
Description:This method update s the setID to be the next set that  contains entities of this type.
Input:NoneOutput:NoneReturn Code:FE_FAIL No more sets available.Remarks/Usage:If no more sets are found, setID remains unchanged. This method finds the next set with a higher ID.
Example:None
 API-1906  PrevSet
5.1.2.20  PrevSet
PrevSet
( void )
Description:This method updates the setID to be the previous set that  contains entities of this type.
Input:NoneOutput:NoneReturn Code:FE_FAIL No more sets available.Remarks/Usage:If no more sets are found, setID remains unchanged. This method finds the next set with a lower ID.
Example:None
NextEmptySet   API-1907
5.1.2.21  NextEmptySet
NextEmptySet
( void )
Description:This method update s the setID to be the next set of this entity type that is empty.
Input:NoneOutput:NoneReturn Code:FE_FAIL No more sets available.Remarks/Usage:If no more empty sets are found, setID remains unchange d. This method finds the next set with a higher 
ID.
Example:None
 API-1908  PrevEmptySet
5.1.2.22  PrevEmptySet
PrevEmptySet
( void )
Description:This method update s the setID to be the previous set of this entity type that is empty.
Input:NoneOutput:NoneReturn Code:FE_FAIL No more sets available.Remarks/Usage:If no more empty sets are found, set ID remains unchan ged. This method finds the next set with a lower 
ID.
Example:None
NextID   API-1909
5.1.2.23  NextID
NextID
( void )
Description:This method finds the ID of the next  available entity with a higher ID.
Input:NoneOutput:NoneReturn Code:
IDIf return value is less than or equal to MAX_LABEL, this is the 
entity that was found. Otherwise, there are no more available entities.
Remarks/Usage:This method is the same as Next, except that it does no t update the current ID, nor does it load the data 
for the entity.
Example:None
 API-1910  PrevID
5.1.2.24  PrevID
PrevID
( void )
Description:This method finds the ID of the ne xt available entity with a lower ID.
Input:NoneOutput:NoneReturn Code:
IDIf return value is greater than or equa l to 1, this is the entity that was 
found. Otherwise, there are no more available entities.
Remarks/Usage:This method is the same as Prev, except that it does  not update the current ID , nor does it load the data 
for the entity.
Example:None
NextEmptyID   API-1911
5.1.2.25  NextEmptyID
NextEmptyID
( void )
Description:This method finds the ID of the next  nonexisting entity with a higher ID.
Input:NoneOutput:NoneReturn Code:
IDIf return value is less than or equal to MAX_LABEL, this is the 
entity ID that was empty. Otherwise, there are no more available empty entities.
Remarks/Usage:NoneExample:None
 API-1912  PrevEmptyID
5.1.2.26  PrevEmptyID
PrevEmptyID
( void )
Description:This method finds the ID of the next  nonexisting entity with a lower ID.
Input:NoneOutput:NoneReturn Code:
IDIf return value is greater than or equa l to 1, this is the entity that was 
empty. Otherwise, there are no more available empty entities.
Remarks/Usage:NoneExample:None
SelectID   API-1913
5.1.2.27  SelectID
SelectID
( title )
Description:This function displays a selection dial og box to allow a user to choose a single entity of a specific type. 
The selected entity is automatically  loaded into the calling entity.
Input:
STRING titleA text string that will be added to  the title bar of the dialog box to 
give the user more informatio n about what is being selected.
Output:NoneReturn Code:
FE_CANCEL The user cancelled the selection.
FE_NOT_EXISTNo entities of the selected type exist.  None were selected and the dia-
log box was not displayed. 
Remarks/Usage:This function displays one of two different dialog boxes, depending on  the entity type that you choose. 
For entities that have titles, like properties or materials,  the dialog box will cont ain a list of the available 
entities along with their titles. For other entities, like  nodes or elements, a simple  dialog box is displayed 
so that the ID can be typed or picked.
This method is the same as the Sel ectID method in the Set Object, howe ver instead of simply adding the 
entity ID into the Set, it retrieves the selected entity.
Example:None
 API-1914  SelectIDWithNew
5.1.2.28  SelectIDWithNew
SelectIDWithNew
( sTitle )
Description:This function displays a selection dialog box (inclu ding the ability for the user  to create a new entity 
from within the dialog, when applicab le) to allow a user to choose a si ngle entity of a specific type. The 
selected entity is automatically loaded into the calling entity
Input:
STRING sTitleA text string that will be added to  the title bar of the dialog box to 
give the user more informatio n about what is being selected.
Output:NoneReturn Code:FE_CANCEL The user cancelled the selection.FE_BAD_TYPE An invalid en tity type was specified
Remarks/Usage:For supported entities, this  method is identical to the SelectID method with the exceptions of a new 
entity icon being displayed in the di alog and the dialog will be displaye d even if no entities of the speci-
fied type exis t the database. 
Supported entities include:
Layer
Property
MaterialCoordinate System
Global Ply
Load SetConstraint Set
Connection Property
Connection Region
Example:None
CountSet   API-1915
5.1.2.29  CountSet
CountSet
( void )
Description:
Returns the number of entities in the database of the current type
Input:NoneOutput:NoneReturn Code:Count The number of entities of the current typeRemarks/Usage:This function only counts entities that are in the set specified by  the “SetID” entity property. For most 
entities (Curves, Surfaces, Nodes, Elements, ...) this counts all entities in the model. For other “set-
based” entities - like Loads and Constr aints - it only counts the entities in  the one set, so you must spec-
ify which set you want prio r to calling this function.
Example:None
 API-1916  
5.2  Aero Panel/Body Objects   
Aero Panel/Body objects correspond to the Aero Panels and Bodies in your model. They are 
derived from Entity objects so, in addition to the properties and me thods described here, all of the 
properties and methods defined for Entity objects are also available for Aero Panel/Body objects. 
For more information, see Section 5.1, "Common Entity  Properties and Methods". 
Use the feAeroPanel method of th e FEMAP Application object to cr eate Aero Panel/Body objects.
5.2.1  Aero Panel/B ody Object Properties
Aero Panel/Bodies are always stored with a SetID= 1, and the ID equal to the Aero Panel/Body ID.
Property Description
INT4 color The panel/body color.INT4 layer The layer associated with the panel/body.STRING title Aero Panel/Body title.INT4 propID ID of Aero Property  referenced by the panel/body.
INT4 icpThe ID of the coordinate system in which points 1,4 are 
defined with Pt1, vPt1, Pt4, and/or vPt4.
INT4 nSpan Number of spanwise boxes.INT4 nChord Number of chordwise boxes.INT4 nIgid Interference group identificationREAL8 Pt1[0..2]
orV ARIANT vPt1Location of point 1 in coordinate system, icp.
REAL8 Pt4[0..2]
or
V ARIANT vPt4Location of point 4 in coordinate system, icp.
REAL8 dChord12 Edge chord length 1-2
REAL8 dChord34 Edge chord length 3-4INT4 nLspanID ID of Aero Division List INT4 nLchordID ID of Aero Division List 
INT4 typeType of panel:
Panel=0, Body=1
GetDivisionList   API-1917
5.2.2  Aero Panel/Body Object Methods
5.2.2.1  GetDivisionList
GetDivisionList
( nChord, cval, nSpan, sval )
Description:This method retrieves Chord /Span division arrays for the Aero PanelInput:
Output:
INT4 nChord The number of chord division s for which data is being returned.
REAL8 cval[0..(nChord-1]The division location along the chord as a percentage along the 
edge - i.e. 0.8 mean a division 80% of the way between points 
INT4 nSpan The number of span divisions for which data is being returned.
REAL8 sval[0..(nSpan-1]The division location along the span as a percentage along the edge 
- i.e. 0.8 mean a division 80% of the way between points 
Return Code:FE_FAIL Unable to retrieve data from the panel.FE_NOT_EXIST No divisions have been defined.FE_OKRemarks/Usage:
Example:
None
 API-1918  PutDivisionList
5.2.2.2  PutDivisionList
PutDivisionList
( nChord, cval, nSpan, sval )
Description:This method retrieves Ch ord/Span division arrays for the Aero Panel
Input:INT4 nChord The number of chord divisions for which data is being stored.
REAL8 cval[0..(nChord-1]The division location along the chord as a percentage along the 
edge - i.e. 0.8 mean a division 80% of the way between points 
INT4 nSpan The number of span divisions for which data is being stored.
REAL8 sval[0..(nSpan-1]The division location along the span as a percentage along the edge 
- i.e. 0.8 mean a division 80% of the way between points 
Output:
NoneReturn Code:FE_FAIL Unable to save data to the panel.FE_OKRemarks/Usage:
Example:
None
SlenderBodyCount   API-1919
5.2.2.3  SlenderBodyCount
SlenderBodyCount
( void )
Description:This method retrieves the number of Slender Body elements defined.
Input:NoneOutput:NoneReturn Code:count Number of Slender Body elements.Remarks/Usage:
Example:
None
 API-1920  InterferenceBodyCount
5.2.2.4  InterferenceBodyCount
InterferenceBodyCount
( void )
Description:This method retrieves the number of Interference Body elements defined.Input:NoneOutput:NoneReturn Code:count Number of Interference Body elements.Remarks/Usage:
Example:
None
PanelSpanCount   API-1921
5.2.2.5  PanelSpanCount
PanelSpanCount
( void )
Description:This method retrieves the numb er of Span elements defined.
Input:NoneOutput:NoneReturn Code:count Number of Span elements.Remarks/Usage:
Example:
None
 API-1922  PanelChordCount
5.2.2.6  PanelChordCount
PanelChordCount
( void )
Description:This method retrieves the number of Chord elements defined.Input:NoneOutput:NoneReturn Code:count Number of Chord elementsRemarks/Usage:
Example:
None
GetBoxSet   API-1923
5.2.2.7  GetBoxSet
GetBoxSet
( void )
Description:This method creates and returns a Set object that co ntains the IDs of the aero elements included within 
the box set bounded by Box 1 - Box2. 
Input:NoneOutput:NoneReturn Code:
Remarks/Usage:
This method is used to determin e the panel elements chosen based on a Aero Spline BOX1, BOX2 defi-
nition.
Example:None
 API-1924  AeroChordXYZ
5.2.2.8  AeroChordXYZ
AeroChordXYZ
( nNumChord , dChrodLoc )
Description:This methods retrieve the locations  of the Chord edge locations in the global coordinate system 
Input:NoneOutput:INT4 nNumChord Number of Chord edge locationsREAL8 dChordLoc
[0.. nNumChord -1] The global coordinates of the Chord point location
Return Code:
Remarks/Usage:Example:
None
AeroSpanXYZ   API-1925
5.2.2.9  AeroSpanXYZ
AeroSpanXYZ
( nNumSpan , dSpanLoc )
Description:This methods retrieve the locations  of the Span edge locations in  the global coordinate system 
Input:NoneOutput:INT4 nNumSpan Number of Span edge locationsREAL8 dSpanLoc
[0.. nNumChord -1] The global coordinates of the Span point location
Return Code:
Remarks/Usage:Example:
None
 API-1926  
5.3  Aero Property Objects   
Aero Panel/Body objects correspond to the Ae ro Properties in your model. They are derived from 
Entity objects so, in addition to the properties and methods described here, all of the properties and 
methods defined for Entity objects are also available for Aero Prop erty objects. For more informa-
tion, see Section 5.1, "Common Entity Properties and Methods". 
Use the Prop method of the FEMAP Applicatio n object to create Aero Property objects.
5.3.1  Aero Property Object Properties
Aero Properties are always stored with a SetID= 1, and the ID equal to the Aero Property ID.
Property Description
INT4 color The property color.INT4 layer The layer associated with the property.STRING title Aero Property title.REAL8 pdval[0..9]
orV ARIANT vpdvalvalues associated with property.
INT4 pnval[0..14]
or
V ARIANT vpnvalvalues associated with property
REAL8 ap_d_width Reference half-width
REAL8 ap_d_ar Aspect ratio of the interference tube
INT4 ap_i_orient Orientation flag Z = 0, Y = 1, ZY = 2INT4 ap_i_lrsb Slender Body Radius: ID of Aero Division List INT4 ap_i_lrib Interference Body Radius: ID of Aero Division List INT4 ap_i_lth1 Theta Array 1:  ID of Aero Division List
INT4 ap_i_lth2 Theta Array 2: ID of Aero Division List 
INT4 ap_i_thi1 First Interference element, Pair 1INT4 ap_i_thi2 First Interference element, Pair 2INT4 ap_i_thi3 First Interference element, Pair 3INT4 ap_i_thn1 Last Interfe rence element, Pair 1
INT4 ap_i_thn2 Last Interfe rence element, Pair 2
INT4 ap_i_thn3 Last Interfe rence element, Pair 3
INT4 typeType of property:
Panel=0, Body=1
GetThetaList   API-1927
5.3.2  Aero Property Object Methods
5.3.2.1  GetThetaList
GetThetaList
( nListID, ncount, nval )
Description:This method retrieves theta arrays for the Aero Property
Input:INT4 nListID 0 = Theta1, 1 = Theta2Output:INT4 ncount The number of theta values for which data is being returned.REAL8 nval[0..(ncount-1] Theta values 
Return Code:
FE_FAIL Unable to retrieve data from the property.FE_NOT_EXIST No theta va lues have been defined.
FE_OKRemarks/Usage:
Example:
None
 API-1928  PutThetaList
5.3.2.2  PutThetaList
PutThetaList
( nListID, ncount, nval )
Description:This method saves theta a rrays to the Aero Property
Input:INT4 nListID 0 = Theta1, 1 = Theta2INT4 ncount The number of theta values being defined.REAL8 nval[0..(ncount-1] Theta values Output:NoneReturn Code:FE_FAIL Unable to save data to the property.FE_OKRemarks/Usage:
Example:
None
GetRadiList   API-1929
5.3.2.3  GetRadiList
GetRadiList
( nListID, ncount, nval )
Description:This method retrieves Radi arrays for the Aero Property
Input:INT4 nListID 0 = Radi at Slender Body, 1 = Radi at Interference BodyOutput:INT4 ncount The number of values fo r which data is being returned.
REAL8 nval[0..(ncount-1] Radi values Return Code:FE_FAIL Unable to retrieve data from the property.FE_NOT_EXIST No values have been defined.FE_OKRemarks/Usage:
Example:
None
 API-1930  PutRadiList
5.3.2.4  PutRadiList
PutRadiList
( nListID, ncount, nval )
Description:This method saves Radi a rrays to the Aero Property
Input:INT4 nListID 0 = Theta1, 1 = Theta2INT4 ncount The number of theta values being defined.REAL8 nval[0..(ncount-1] Theta values Output:NoneReturn Code:FE_FAIL Unable to save data to the property.FE_OKRemarks/Usage:
Example:
None
ClearSbList   API-1931
5.3.2.5  ClearSbList
ClearSbList
( void )
Description:This method clears the Slender Body Radi arrays in the Aero Property
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:
Example:
None
 API-1932  ClearIbList
5.3.2.6  ClearIbList
ClearIbList
( void )
Description:This method clears the In terference Body Radi arrays in the Aero Property
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:
Example:
None
ClearTheta1List   API-1933
5.3.2.7  ClearTheta1List
ClearTheta1List
( void )
Description:This method clears the Theta 1 arrays in the Aero Property
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:
Example:
None
 API-1934  ClearTheta2List
5.3.2.8  ClearTheta2List
ClearTheta2List
( void )
Description:This method clears the Theta 2 arrays in the Aero Property
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:
Example:
None
SlenderBodyDivisionsByProp   API-1935
5.3.2.9  SlenderB odyDivisionsByProp
SlenderBodyDivisionsByProp
( void )
Description:This method returns the number of Slender Body Divisions on an Aero PropertyInput:NoneOutput:NoneReturn Code:count Number of Slender Body DivisionsRemarks/Usage:NoneExample:None
 API-1936  InterferenceBodyDivisionsByProp
5.3.2.10  InterferenceBodyDivisionsByProp
InterferenceBodyDivisionsByProp
( void )
Description:This method returns the numb er of Interference Body Divisions on an Aero Property
Input:NoneOutput:NoneReturn Code:count Number of Interference Body DivisionsRemarks/Usage:NoneExample:None
GetSBRadiCount   API-1937
5.3.2.11  GetSBRadiCount
GetSBRadiCount
( void )
Description:This method returns the number of Slende r Body Radii specified on an Aero Property
Input:NoneOutput:NoneReturn Code:
countNumber of Slender Body Radii sp ecified in Create Custom Cross 
Section dialog box in the GUI. 
FE_OKNumber of Slender Body Radii defined by number of Interference 
Elements.
Remarks/Usage:NoneExample:None
 API-1938  GetIBRadiCount
5.3.2.12  GetIBRadiCount
GetIBRadiCount
( void )
Description:This method returns the number  of Interference Body Radii sp ecified on an Aero Property
Input:NoneOutput:NoneReturn Code:
countNumber of Interference Body Radii specified in Create Custom 
Cross Section dialog box in the GUI. 
FE_OKNumber of Interference Body Radii defined by number of Interfer-
ence Elements.
Remarks/Usage:NoneExample:None
   API-1939
5.4  Aero Spline Objects   
Aero Spline objects correspond to the Aero Splines in your model. They are derived from Entity 
objects so, in addition to the properties and methods  described here, all of the properties and meth-
ods defined for Entity objects are also available for Aero Spline objects. Fo r more information, see 
Section 5.1, "Common Entity  Properties and Methods". 
Use the feAeroSpline method of the FEMAP Appl ication object to create Aero Spline objects.
5.4.1  Aero Spline Object Properties
Aero Splines are always stored with a SetID= 1, and the ID equal to the Aero Spline ID.
Property Description
INT4 color The spline color.INT4 layer The layer associated with the spline.STRING title Spline title.
INT4 typeType of spline:
Surface=0, Beam=1
INT4 icaero Aero element IDINT4 ibox1 First box in interpolationINT4 ibox2 Last box in interpolationINT4 isetg Group ID REAL8 dz Linear attachment flexibilityINT4 meth IPS = 0,TPS = 1, FPS = 2INT4 nelem The number of elements along the local spline x-axisINT4 melem The number of elements along the local spline y-axisINT4 usage FORCE =0, DISP=1, BOTH=2REAL8 dtor Torsional flexibility ratioINT4 cid CAERO2 CIDREAL8 dthx RX Rotational attachment flexibilityREAL8 dthy RY Rotational attachment flexibility
 API-1940  GetNodeSet
5.4.2  Aero Spline Object Methods
5.4.2.1  GetNodeSet
GetNodeSet
( void )
Description:This method creates and returns a Set object that co ntains the IDs of the Nodes in the Structural Grid 
Group.
Input:NoneOutput:NoneReturn Code:
Remarks/Usage:Example:
None
GetBoxSet   API-1941
5.4.2.2  GetBoxSet
GetBoxSet
( void )
Description:This method creates and returns a Set object that co ntains the IDs of the aero elements included within 
the box set bounded by Box 1 - Box2 belonging to th e Aero Panel defined by icaero in the Spline prop-
erties.
Input:NoneOutput:NoneReturn Code:
Remarks/Usage:
This method is used to determin e the panel elements chosen based on a Aero Spline BOX1, BOX2 defi-
nition.
Example:None
 API-1942  
5.5  Aero Surface Objects   
Aero Surface objects correspond to the Aero Cont rol Surfaces in your model. They are derived 
from Entity objects so, in addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are also available for Ae ro Surface objects. For more 
information, see Section 5.1, "Com mon Entity Properties and Methods". 
Use the feAeroSurf method of the FEMAP Appli cation object to create Aero Surface objects.
5.5.1  Aero Surfac e Object Properties
Aero Surfaces are always stored with a SetID= 1, and the ID equal to the Aero Surface ID.
Property Description
INT4 color The control surface color.INT4 layer The layer associat ed with the control surface.
STRING title Aero Control Surface title.
INT4 csysThe ID of the coordinate system  which defines y axis of con-
trol surface 1.
INT4 csys1The ID of the coordinate system  which defines y axis of con-
trol surface 2.
INT4 aeid The ID of the division list that defines control surface 1.
INT4 aeid1 The ID of the division list that defines control surface 2.
REAL8 eff Control surface effectivenessBOOL ldw Linear downwash flag, NOLDW = FALSE, LDW = TRUEREAL8 crefc Reference chord le ngth for the control surface
REAL8 crefs Reference surface area for the control surface
REAL8 pllim Lower deflection limits for the control surfaceREAL8 pulim Upper deflection lim its for the control surface
REAL8 hmllim Lower hinge moment limitsREAL8 hmulim Upper hinge moment limits
INT4 tqllimFemap function defining deflection limits vs dynamic pres-
sure.
INT4 tqulimFemap function defining deflection limits vs dynamic pres-
sure.
STRING label Controller name, 8 characters max. 
PutSurfaceSet1   API-1943
5.5.2  Aero Surfac e Object Methods
5.5.2.1  PutSurfaceSet1
PutSurfaceSet1
( nSetID )
Description:This method loads Aero Panel elem ents into Control Surface 1 arrays.
Input:INT4 nSetID The ID of the Set Object that  will contain the IDs of the elements. 
Output:NoneReturn Code:
FE_OK
Remarks/Usage:
Example:
None
 API-1944  PutSurfaceSet2
5.5.2.2  PutSurfaceSet2
PutSurfaceSet2
( nSetID )
Description:This method loads Aero Panel elem ents into Control Surface 2 arrays.
Input:INT4 nSetID The ID of the Set Object that  will contain the IDs of the elements. 
Output:NoneReturn Code:FE_OKRemarks/Usage:
Example:
None
GetSurfaceSet1   API-1945
5.5.2.3  GetSurfaceSet1
GetSurfaceSet1
( void )
Description:This method creates and returns a Set object that cont ains the IDs of the Aero Panel elements in Control 
Surface 1.
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:
Example:
None
 API-1946  GetSurfaceSet2
5.5.2.4  GetSurfaceSet2
GetSurfaceSet2
( void )
Description:This method creates and returns a Set object that cont ains the IDs of the Aero Panel elements in Control 
Surface 2.
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:
Example:
None
ClearSurfaceSet1   API-1947
5.5.2.5  ClearSurfaceSet1
ClearSurfaceSet1
( nSetID )
Description:This method clears the array that contains the ID s of the Aero Panel elements in Control Surface 1.
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:
Example:
None
 API-1948  ClearSurfaceSet2
5.5.2.6  ClearSurfaceSet2
ClearSurfaceSet2
( nSetID )
Description:This method clears the array that contains the ID s of the Aero Panel elements in Control Surface 2.
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:
Example:
None
   API-1949
5.6  AnalysisCase Objects
AnalysisCase objects correspond to the analysis cases in the analysis sets in your model. They are 
derived from Entity objects, so in addition to the properties and me thods described here, all of the 
properties and methods defined for Entity objects are also available for AnalysisCase objects. For 
more information, see Section 5.1, "Common Entity Proper ties and Methods". 
Use the feAnalysisCase method of the FEMAP Application object to  create AnalysisCase objects. 
Alternatively, you can create an AnalysisCase object by calling the Ca se method of the Analy-
sisMgr object. This approach has the added advant age of ensuring that th e case is from the correct 
analysis set, and pre-loading the case data.
5.6.1  AnalysisCase Object Properties
AnalysisCases are stored with their SetID equal to the ID of the analysis set, and the ID equal to 
the analysis case that you are trying to access. No te that the master case is not accessed from an 
AnalysisCase object. Those properties are dir ectly available from the AnalysisMgr object.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
Analysis Case Options - GeneralSTRING CaseTitle[80] Title of analys is case (maximum 80 characters).
STRING CaseLabel[80] Label of analys is case (maximum 80 characters).
INT4 caseIDID of analysis case (Not Available for master, caseID for oth-
ers).
enum SubcaseAnalysisTypeAnalysis Type for Subcase (only used by certain solvers for 
certain analysis types). See “Analysis Types” in Section 3.3.7, "FEMAP Constants" for available enumerations.
INT4 CaseType Type of analysis case (0=Normal, 1=Subcom)
INT4 BCSet[0..20]
orV ARIANT vBCSetSetIDs of load and constraint sets for this case: [0]=Con-
straints, [1]=Constraint Equa tions, [2]=Loads, [3]=Initial 
Conditions, [4]=Master DOF, [5]=Base/Support DOF, [6]=Omit DOF, [7]=QSET DOF, [8]=CSET DOF, [9]=BSET 
DOF, [10]=Bolt Preloads, [11]=SUPORT1 DOF, [12]=Tem-
peratures, [13]=Connection Group (MSC Only), [14]=Loads (Time), [15]=Temperatures (Init) , [16]=Glue Set, [17]=Con-
tact Set, others not currently used.
 API-1950  
INT4 Output[0..30]
or
V ARIANT vOutputOutput requests for this case: 0=off,-1=full model, 
>0=groupID,  [0]=Nodal App lied Load, [1]= Nodal Reaction 
Force, [2]=Nodal Displace ment, [3]=Nodal Velocity, 
[4]=Nodal Acceleration, [5]=No dal Temperature, [6]=Nodal 
Heat Flux, [7]=Nodal Constraint Equation Forces, [8]=Nodal 
Force Balance, [9]=Nodal Ki netic Energy, [15]=Element 
Force, [16]=Element Stress, [1 7]=Element Strain, [18]=Ele-
ment Plastic Strain, [19]=Element Strain Energy, [20]=Ele-
ment Heat Flux, [21]=Element Enthalpy, [22]=Element 
Enthalpy Rate, [23]=Element Contact, [24]=Element Tem-perature, [25]=Kinetic Energy, [26]=Energy Loss, [27]=Fluid 
Pressure, others not currently used.
STRING Echo[80] String for ECHO op tion (maximum 80 characters).
BOOL SkipStandard Flag to skip standard output for this case.
BOOL NasCaseAlternateTextLocation Flag to use Start Text Inside Case option.
INT4 StartText ID of starting text.
INT4 EndText ID of ending text.
INT4 DestinationOutput destination: 0=De fault, 1=Print, 2=Post, 
3=Print+Post, 4=Punc h, 5=Punch+Post.
INT4 ImaginaryFormat for complex output: 0=Magnitude/Phase, 1=Real/
Imaginary.
INT4 CornerOutput Flag to requ est output at element corners.
INT4 IntegrationOutput Flag to request output at element integration points.
BOOL NasRelEMotion Flag to request  Relative Enforced Motion Results.
BOOL NasCurvatureStrainFlag to request Curvature Strain Results. True = Curvature, 
False = Fiber
ABAQUS Case OptionsABAQUS Step Options
BOOL AbaHistOnFlag indicating ABAQUS History Options have been 
defined.
REAL8 AbaHistTimePeriod Time periodREAL8 AbaHistInitTimeInc Initial time increment.REAL8 AbaHistMinTimeInc Minimum time increment.REAL8 AbaHistMaxTimeInc M aximum time increment.
INT4 AbaHistEigenvector s Number of eigenvectors.Property Description
   API-1951
REAL8 AbaHistMinFreq Dynamic analysis minimum frequency.
REAL8 AbaHistMaxFreq Dynamic analysis maximum frequency.REAL8 AbaHistShiftFreq Dynamic analysis shift frequency.REAL8 AbaHistScaleFactor Time step scale factor.INT4 AbaHistOutInterval Time step  number of output intervals.
BOOL AbaHistNonlinGeom Flag to  specify nonlinear geometry.
BOOL AbaHistLinearPert Flag to specify linear perturbation.BOOL AbaHistAutoContact Flag to specify auto contact.BOOL AbaHistStabilize Flag to stabilize contact.BOOL AbaHistOutZeroInc Flag to write  results for zero time increment.
INT4 AbaHistStepAmp Step amplitu de: 0=Default, 1=Step, 2=Ramp.
INT4 AbaHistStepLoad Step loads: 0=New, 1=Modify.INT4 AbaHistStepConstr Step constraints: 0=New, 1=Modify.
INT4 AbaHistAnalysisTypeStep based analysis type (see “Analysis Type” property 
above):0=Default=Use “Analysis Type”
ANSYS Case OptionsANSYS Load Step - Case Options
INT4 BCSet[0..20]
or
V ARIANT vBCSetSetIDs of load and constraint sets for this case: [0]=Con-
straints, [1]=Constraint Equa tions, [2]=Loads, [3]=Initial 
Conditions, [10]=Bolt Preloads, [12]=Temperatures, [16]=Glue Set, [17]=Contact Set
BOOL AnsLdstepOnFlag indicating ANSYS Load Step options have been 
defined.
BOOL AnsKbc Flag to use Amplitude (KBC) optionBOOL AnsPstres Flag to use Includ e Prestress Effect (PSTRES) option
INT4 AnsEqslvSpecifies Equation Solver (EQSLV): 0=Sparse Direct, 
1=Jacobi Conjugate Gradient iterative, 2=Incomplete Chole-
sky Conjugate Gradient iterati ve, 3=Quasi-Minimal Residual 
iterative, 4=Precond itioned Conjugate Gradient iterative
BOOL AnsNewConstraint Flag to specify New (True) or Modify (False) for Constraints
BOOL AnsNewLoad Flag to specify New (True) or Modify (False) for Loads
BOOL AnsNewContact Flag to specify New (True) or Modify (False) for ContactsProperty Description
 API-1952  
ANSYS Time Step Options - Case Options
BOOL AnsTimestepOnFlag indicating ANSYS Time Step options have been 
defined.
REAL8 AnsTime Time DurationBOOL AnsAutots Flag to use Automatic  Time Stepping (AUTOTS) option
BOOL AnsNsubs Flag to set Number of Steps (True) or Size of Steps (False)INT4 AnsNsbstep Used when AnsNsubs is True, sets Number of Steps INT4 AnsNsbmx Used when AnsNsubs is True, sets Max Number of StepsINT4 AnsNsbmn Used when AnsNsubs is True, sets Min Number of StepsREAL8 AnsDtime Used when AnsNsubs is False, sets Time StepREAL8 AnsDtmin Used when AnsNsubs  is False, sets Min Time Step 
REAL8 AnsDtmax Used when AnsNsubs  is False, sets Max Time Step 
BOOL AnsPlslimit Flag to use Max Plasti c Strain option with specified value
REAL8 AnsPlslimitvalue Max Plastic Strain value BOOL AnsCrplimit Flag to use Max Creep  Strain option with specified value
REAL8 AnsCrplimitvalue Ma x Creep Strain value
BOOL AnsDpplimit Flag to use Max Pressu re Change option with specified value
REAL8 AnsDpplimitvalue Max Pressure Change value
BOOL AnsDsplimit Flag to use Max Disp  Change option with specified value
REAL8 AnsDsplimitvalue Max Disp Change valueBOOL AnsBisect Flag to use Bisection Factor option with specified value
REAL8 AnsBisectfactor Bisection Factor valueBOOL AnsPredictor Flag to use Predict to Bisect optionBOOL AnsMidtol Flag to u se Midstep Tolerance option with specified value
REAL8 AnsTolerb Midstep Tolerance valueBOOL AnsResfq Flag to use Response Frequency optionANSYS Modal Analysis Options - Case Options
BOOL AnsModalOptOnFlag indicating ANSYS Modal An alysis options have been 
defined.Property Description
   API-1953
INT4 AnsModalMethodSelect Method for model extraction: 0=Block Lanczos, 
1=PCG Lanczos, 2=Supernode,  3=Subspace, 4=Unsymmetri-
cal, 5=Damped, 6=Damped w/ QR
INT4 AnsModalNmode Number Frequency ModesREAL8 AnsModalFreqb Fre quency value for From
REAL8 AnsModalFreqe Frequency value for To
BOOL AnsModalNrmkeyFlag to use Mass (True) or Max=Unity (False) for Mode Nor-
malization
BOOL AnsModalStrmck Flag to enable Strum Sequence CheckREAL8 AnsModalRangefact RangeFact valu e (only used when AnsModalMethod=2)
INT4 AnsModalBlocksize Blocksize valu e (only used when AnsModalMethod=2)
INT4 AnsModalRobustlev RobustLev value (only used when AnsModalMethod=2)
INT4 AnsModalComputeSpecifies if Eigenvalues and/or Eigenvectors options should 
on/off. 0=Both Off, 1=Eigenvalues Only On, 2=Eignevectors Only On, 3=Both On (only us ed when AnsModalMethod=2)
BOOL AnsModalReusekeyFlag to enable Eigen Reuse (only used when AnsModal-
Method=6)
INT4 AnsModalSymmethSelect Mode Extract symmetri cal method for Damped w/QR: 
0=Block Lanczos, 1=Subspace, 2=Supernode (only used when AnsModalMethod=6)
ANSYS Buckling Analysis Options - Case Options
BOOL AnsBuckleOptOnFlag indicating ANSYS Buckling Analysis options have been 
defined.
INT4 AnsBuckleMethodSelect Method for model extraction: 0=Block Lanczos, 
1=Subspace
INT4 AnsBuckleNmode Number of Buckle Modes
REAL8 AnsBuckleShiftSpecifies Shift value when AnsBuckleRangekey is True 
(Center option) or Lower Bound when AnsBuckleRangekey 
is False (Range option)
REAL8 AnsBuckleLdmulteSpecifies Bound value when AnsBuckleRangekey is True 
(Center option) or Upper Bound when AnsBuckleRangekey is False (Range option)
BOOL AnsBuckleRangekey Flag to use Center (True) or Range (False) for “Range Type”
BOOL AnsBuckleStrmck Flag to enable Strum Sequence Check
ANSYS Harmonic Analysis Options - Case OptionsProperty Description
 API-1954  
BOOL AnsHarmonicOptOnFlag indicating ANSYS Harmon ic Analysis options have 
been defined.
BOOL AnsHarmonicMethodFlag for Modal (True) or Ph ysical (False) option for Fre-
quency Response analysis
INT4 AnsHarmonicMinmode Min Mode Value (only used AnsHarmonicMethod = True)INT4 AnsHarmonicMaxmode Max Mode Value (only used AnsHarmonicMethod = True)REAL8 AnsHarmonicFreqb Frequency value for Hz FromREAL8 AnsHarmonicFreqe Frequency value for Hz To
INT4 AnsHarmonicLogoptSpecifies Log Frequency Span : 0=Logarithm, 1=Octave 
band, 2=1/2 Octave band, 3=1/ 3 Octave band, 4=1/6 Octave 
band, 5=1/12 Octave band, 6=1/24 Octave band
BOOL AnsHarmonicReimkyFlag for Real/Imag (True) or Ampl/Phase (False) option for 
Complex Key
BOOL AnsHarmonicClust Flag for Cluster (Tru e) or Uniform (False) option for Cluster
ANSYS Transient Dynamics Options - Case Options
BOOL AnsTransOptOnFlag indicating ANSYS Transi ent Dynamics options have 
been defined.
BOOL AnsTransMethodFlag for Modal (True) or Phys ical (False) option for Tran-
sient analysis
INT4 AnsTransMinmode Min Mode Value (only used AnsTransMethod = True)INT4 AnsTransMaxmode Max Mode Value (only used AnsTransMethod = True)
BOOL AnsTransTintoptFlag for HHT (True) or Newm ark (False) option for Time 
Integration
REAL8 AnsTransDmpsfreq Excitation Frequency valueBOOL AnsTransLumpm Flag to enable  Lumped option for Mass Matrix
REAL8 AnsTransAlphad Mass value (Damping)REAL8 AnsTransBetad Stiffness value (Damping)REAL8 AnsTransDmpstr Struct value (Damping)REAL8 AnsTransDmprat Ratio value (Damping)
BOOL AnsTransGammaFlag to use gamma option with specified value (when 
enabled, alpha, delta, alphaf, and alpham are ignored)
REAL8 AnsTransGammavalue gamma valueREAL8 AnsTransAlpha alpha value (only used when AnsTransGamma is False)Property Description
   API-1955
REAL8 AnsTransDelta delta value (only used when AnsTransGamma is False)
REAL8 AnsTransAlphaf alphaf value (onl y used when AnsTransGamma is False)
REAL8 AnsTransAlpham alpham value (onl y used when AnsTransGamma is False)
ANSYS Nonlinear Options - Case Options
BOOL AnsNlOptOnFlag indicating ANSYS Non linear options have been 
defined.
INT4 AnsNroptSpecifies Method for Stiffness  Updates: 0=ANSYS choose, 
1=Full Newton Raphson, 2=Modified Newton Raphson, 
3=Initial Stiffness, 4=Full Ne wton Raphson Unsymmetrical
INT4 AnsNeqit Max Iterations value
BOOL AnsCnvtolUFlag to use Displacement op tion (Convergence Tolerances) 
with specified value
REAL8 AnsUtoler Displacement value
BOOL AnsCnvtolRotFlag to use Rotation option (Convergence Tolerances) with 
specified value
REAL8 AnsRottoler Rotation value
BOOL AnsCnvtolFFlag to use Force option (Convergence Tolerances) with 
specified value
REAL8 AnsFtoler Force value
BOOL AnsCnvtolMFlag to use Moment option (C onvergence Tolerances) with 
specified value
REAL8 AnsMtoler Moment value
BOOL AnsCnvtolDvolFlag to use V olume Change  option (Convergence Toler-
ances) with specified value
REAL8 AnsDvoltoler V olume Change value
BOOL AnsCnvtolHdspFlag to use Hydro Pressure option (Convergence Tolerances) 
with specified value
REAL8 AnsHdsptoler Hydro Pressure valueBOOL AnsNlgeom Flag to use Nonlinear Geometry option
BOOL AnsArclen Flag to use Arc-Length option
BOOL AnsLnsrch Flag to use Line Search optionBOOL AnsPred Flag to use Predictor optionANSYS Output Requests - Case OptionsProperty Description
 API-1956  
BOOL AnsOutputOn Flag indicating ANSYS Output Requests have been defined.
ANSYS Output Requests - Binary Result File (OUTRES) SectionBOOL AnsOutresAll Flag to select All Results option
INT4 AnsOutresAllFreqSpecify FREQ value for All Re sults: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutresAllNthSpecify integer value for OR  STEPS for All Results, only 
used when AnsOutresAllFreq=3
BOOL AnsOutresBasic Flag to select Basic Results option
INT4 AnsOutresBasicFreqSpecify FREQ value for Basic Results: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutresBasicNthSpecify integer value for OR STEPS for Basic Results, only 
used when AnsOutresBasicFreq=3
BOOL AnsOutresRsol Flag to select Nodal Reaction option
INT4 AnsOutresRsolFreqSpecify FREQ value for Nodal Reaction: 0=None, 1=Write 
All, 2=Write Last, 3=Write Every Nth
INT4 AnsOutresRsolNthSpecify integer value for OR STEPS for Nodal Reaction, 
only used when AnsOutresRsolFreq=3
BOOL AnsOutresNsol Flag to select Nodal DOF option
INT4 AnsOutresNsolFreqSpecify FREQ value for Nodal DOF: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutresNsolNthSpecify integer value for OR STEPS for Velocity, only used 
when AnsOutresNsolFreq=3
BOOL AnsOutresVel Flag to select Velocity option
INT4 AnsOutresVelFreqSpecify FREQ value for Velocity: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutresVelNthSpecify integer value for OR STEPS for Velocity, only used 
when AnsOutresVelFreq=3
BOOL AnsOutresAcc Flag to select Acceleration option
INT4 AnsOutresAccFreqSpecify FREQ value for Accele ration: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutresAccNthSpecify integer value for OR STEPS for Acceleration, only 
used when AnsOutresAccFreq=3
BOOL AnsOutresEsol Flag to select Element Results optionProperty Description
   API-1957
INT4 AnsOutresEsolFreqSpecify FREQ value for Elemen t Results: 0=None, 1=Write 
All, 2=Write Last, 3=Write Every Nth
INT4 AnsOutresEsolNthSpecify integer value for OR  STEPS for Element Results, 
only used when AnsOutresEsolFreq=3
ANSYS Output Requests - Print Result File (OUTPR) SectionBOOL AnsOutprAll Flag to select All Results option
INT4 AnsOutprAllFreqSpecify FREQ value for All Re sults: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutprAllNthSpecify integer value for OR  STEPS for All Results, only 
used when AnsOutprAllFreq=3
BOOL AnsOutprBasic Flag to select Basic Results option
INT4 AnsOutprBasicFreqSpecify FREQ value for Basic Results: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutprBasicNthSpecify integer value for OR STEPS for Basic Results, only 
used when AnsOutprBasicFreq=3
BOOL AnsOutprRsol Flag to select Nodal Reaction option
INT4 AnsOutprRsolFreqSpecify FREQ value for Nodal Reaction: 0=None, 1=Write 
All, 2=Write Last, 3=Write Every Nth
INT4 AnsOutprRsolNthSpecify integer value for OR STEPS for Nodal Reaction, 
only used when AnsOutprRsolFreq=3
BOOL AnsOutprNsol Flag to select Nodal DOF option
INT4 AnsOutprNsolFreqSpecify FREQ value for Nodal DOF: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutprNsolNthSpecify integer value for OR STEPS for Velocity, only used 
when AnsOutprNsolFreq=3
BOOL AnsOutprVel Flag to select Velocity option
INT4 AnsOutprVelFreqSpecify FREQ value for Velocity: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutprVelNthSpecify integer value for OR STEPS for Velocity, only used 
when AnsOutprVelFreq=3
BOOL AnsOutprAcc Flag to select Acceleration option
INT4 AnsOutprAccFreqSpecify FREQ value for Accele ration: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutprAccNthSpecify integer value for OR STEPS for Acceleration, only 
used when AnsOutprAccFreq=3Property Description
 API-1958  
BOOL AnsOutprEsol Flag to se lect Element Results option
INT4 AnsOutprEsolFreqSpecify FREQ value for Elemen t Results: 0=None, 1=Write 
All, 2=Write Last, 3=Write Every Nth
INT4 AnsOutprEsolNthSpecify integer value for OR  STEPS for Element Results, 
only used when AnsOutprEsolFreq=3
NASTRAN Case OptionsAnalysis Case Options - NASTRAN SpecificBOOL NasOmodesOn Flag indicating an  OMODES request has been defined.
STRING NasOmodes[160] Expression used to select OMODES outputAnalysis Case Options - SUBCOMINT4 NasSubSeqCase[200] IDs of Subca ses to be combined in this SUBCOM
REAL8 NasSubSeqCase[200] Scale factors ap plied to Subcases combined in SUBCOM
Analysis Case Options - Direct Matrix Input (DMIG)
BOOL NasEnableDMIG Flag indi cating Enable Matrix Input
INT4 NasDMIGK2GGID of Direct Matrix Input entity  referenced by Stiffness drop-
down in G-Type Matrices. Writes K2GG Case Control entry.
INT4 NasDMIGM2GGID of Direct Matrix Input en tity referenced by Mass drop-
down in G-Type Matrices. Wr ites M2GG Case Control entry.
INT4 NasDMIGB2GGID of Direct Matrix Input en tity referenced by Damping 
drop-down in G-Type Matric es. Writes B2GG Case Control 
entry.
INT4 NasDMIGK42GGID of Direct Matrix Input enti ty referenced by Structural 
Damping drop-down in G-Type Matrices. Writes K42GG Case Control entry.
INT4 NasDMIGP2GID of Direct Matrix Input enti ty referenced by Loading drop-
down in G-Type Matrices. Writes P2G Case Control entry.
INT4 NasDMIGK2PPID of Direct Matrix Input entity  referenced by Stiffness drop-
down in P-Type Matrices. Wr ites K2PP Case Control entry.
INT4 NasDMIGM2PPID of Direct Matrix Input en tity referenced by Mass drop-
down in P-Type Matrices. Wr ites M2PP Case Control entry.
INT4 NasDMIGB2PPID of Direct Matrix Input en tity referenced by Damping 
drop-down in P-Type Matrices. Writes B2PP Case Control 
entry.
Analysis Case Options - Monitor PointsProperty Description
   API-1959
BOOL NasCaseMonitorEnabledFlag indicating Monitor Point Output Requests will be writ-
ten to the analysis case, when applicable
BOOL NasCaseMonitorAeroEnabled Flag to set Print Aero Mon itor Results option
BOOL NasCaseMonitorLoadEnabled Flag to set Print Load Monitor Results option
NASATRAN Nonlinear Analysis - Case OptionsBOOL NasCnlOn Flag indicating the Non linear Case Options has been defined.
BOOL NasCnlUseLoadSet Flag to use th e Nonlinear options from the Load Set.
INT4 NasCnlIncrements Number of Time Increments.REAL8 NasCnlTime_Increment Value for Time Step Size.INT4 NasCnlMaxIter Nonlinear - Max Iterations per Step BOOL NasCnlConvergenceFlags[0..2]
or
V ARIANT vNasCnlConvergenceFlagsNonlinear - Convergence Flags for 0=Displacement, 1=Load 
and 2=Work 
REAL8 NasCnlConvergenceV-
alue[0..2]or
V ARIANT vNasCnlConvergenceV-
alueNonlinear - Convergence Tolerances for Displacement, Load 
and Work 
BOOL MSCNasCnlConvergenceF-
lags[0..1]
or
V ARIANT vMSCNasCnlConver-genceFlagsNonlinear - Convergence Flags for 0=Vector and 1=Length
MSC Nastran Only and there are no tolerance values.
INT4 NasCnlStiffnessMethod Nonlin ear - Stiffness Update Method 
INT4 NasCnlKstep Nonlinear - Itera tions before Stiffness Update 
INT4 NasCnlIntermediateOutput Nonlin ear - Intermediate Output Type 
INT4 NasCnlOutputInterval No nlinear - Output Interval 
INT4 NasCnlSolutionStrategyNonlinear - Nonlinear Arc-Leng th Solution Strategy (Arc- 
Length if nonzero) 
INT4 NasCnlSolutionOverridesNonlinear - Solution Strategy Overrides: 0=none/ advanced, 
1=Full Newton Raphson, 2=Modified Newton Raphson 
BOOL NasCnlModnewtonLineSearch Nonlinear - Modifi ed Newton Line Search Override (1=Skip) 
BOOL NasCnlModnewtonQuasiNew-
tonNonlinear - Modified Newt on Quasi-Newton Override 
(1=Skip) 
BOOL NasCnlModnewtonBisection N onlinear - Modified Newton Bi section Override (1=Skip) Property Description
 API-1960  
INT4 NasCnlArcConstrain tType Nonlinear - Arc Length Constraint Type 
REAL8 NasCnlArcMinAdjust Nonlin ear - Min Arc Length Adjust 
REAL8 NasCnlArcMaxAdjust Nonlinear - Max Arc Length Adjust REAL8 NasCnlArcLoadScale Nonlinear - Arc Length Method Constraint Load Scale 
INT4 NasCnlArcDesiredIter Nonlinear - Arc Length Desired Iterations INT4 NasCnlArcMaxSteps Nonlinear - Arc Length Max Steps INT4 NasCnlTimeSkipAdjust Nonlinear - Transient Time Step Skip Factor 
INT4 NasCnlDominantPeriodSteps Nonlinear - Transient Steps for Dominant Period 
REAL8 NasCnlBoundsRb Nonlinear - Transient Bounds to Maintain Step REAL8 NasCnlStabilityTolerance Nonlinear - Transient Minimum Stability Tolerance 
INT4 NasCnlDivergenceLimit Nonlin ear - Max Diverging Conditions 
INT4 NasCnlQuasiNewtonVec tors Nonlinear - Number of Quasi-Newton Vectors 
INT4 NasCnlMaxLineSearch Nonlinear - Max Line Search per Iteration REAL8 NasCnlLineSearchTolerance Nonlinear - Line Search Tolerance INT4 NasCnlMaxBisections Nonlinea r - Max Bisections per Increment 
REAL8 NasCnlMaxRotation Nonlinea r - Max Rotation per Bisection 
REAL8 NasCnlFstress Nonlinear - Stress Fraction Limit REAL8 NasCnlMaxAdjust Nonlinear - Ma x Adjusted vs. Initial Increment 
BOOL NasCnlkDAMP Nonlinear - Flag to In clude Differential Stiffness in Damping
BOOL NasCnlCreep Flag Indicating this a Creep Analysis. BOOL NasCnlSkipNLPARM Flag to disable writing of the NLPARM for this case. 
NASTRAN Modal Analysis - Case options
BOOL NasModeOnFlag indicating NASTRAN Mo dal Options have been 
defined for subcase
INT4 NasModeEigrSet SetID to be used for EIGR. 
INT4 NasModeMethodModal Solution method: 0=Gi vens,1=Modified Givens, 
2=Inverse Power, 3=Inverse Po wer/Strum, 4=Householder, 
5=Modified Householder, 6=Lanczos, 7=Hessenberg, 
8=Complex Inverse Power, 9=Complex Lanczos
BOOL NasModeSolutionType Solution type: False=Direct, True=ModalProperty Description
   API-1961
REAL8 NasModeFreqRange[2]
or
V ARIANT vNasModeFreqRangeFrequency range of interest, [0]=Min, [1]=Max.
INT4 NasModeEstRoots Estimat ed number of eigenvalues.
INT4 NasModeDesiredRoots Number of desired eigenvalues/modes.INT4 NasModeNormOpt Normalizatio n method: 0=Mass,1=Max, 2=Point.
INT4 NasModeNormNode Node ID for u se with point normalization method.
INT4 NasModeNormDOF Nodal DOF for u se with point normalization method.
INT4 NasModeMassForm Mass matrix formula tion: 0=Default, 1= Lumped, 2=Coupled.
BOOL NasModesSkipEigrIf True, skips writing the EIGR card for specifying modal 
analysis options
REAL8 NasModeImagFreqRange[2]
orV ARIANT vNasModeImagFreqRangeFor Complex Modes analysis, spec ifies the imaginary part of 
the Frequency Range of interest.
REAL8 NasModesComplexConverge Specifie s Complex Modes convergence value
REAL8 NasModesComplexRegion-
WidthSpecifies Region Width for Complex Modes analysis.
REAL8 NasModeDampOverall Specifies PARAM,G
Nastran STATSUB Options
BOOL NasStatsubOnFlag indicating STATSUB Options have been defined for 
subcase
INT4 NasStatsubBuckle  ID of Sta tic Subcase in Bu ckling Subcase list
INT4 NasStatsubPreload  ID of Static Subcase in Preload Subcase listNASTRAN Multi-Step Control Options (SOL 401) - Case
BOOL NasMsnlCntOnFlag indicating Multi-Step Co ntrol Options for Multi-Step 
Structural have been defined for subcase
NASTRAN Multi-Step Control Options (SOL 401) - Case - General optionsBOOL NasMsnlCntSkipNLCNTL Flag to disab le writing of the NLCNTL for this case
NASTRAN Multi-Step Control Options (SOL 401) - Case - Time Step ControlBOOL NasMsnlCntAutotim Flag to use Auto Time Step (AUTOTIM) optionREAL8 NasMsnlCntDtinit Initial Time Step (DMINIT) valueREAL8 NasMsnlCntDtmin Min Time Step (DMIN) valueProperty Description
 API-1962  
REAL8 NasMsnlCntDtmax Max Time Step (DMAX) value
BOOL NasMsnlCntDtsbcdt Flag to specify New (False) or Modify (True) for Subcase 
Time Step (DTSBCDT)
REAL8 NasMsnlCntEqmfmin Equilibri um Min Factor (EQMFMIN) value
REAL8 NasMsnlCntEqmfmx Equilibrium Max Factor (EQMFMAX) value
INT4 NasMsnlCntTsccr Specifies Time Step Method option: 0=Constant, 1=Adap-
tive, Truncation Error, 2=Adaptive, Maximum Creep Incre-
ment to Elastic Strain Ratio, 3=Adaptive, Maximum Creep Increment, 12=Combination of 1 and 2, 13=Combination of 1 
and 3, 23=Combination of 2 and 3, 123=Combination of 1, 2 
and 3
BOOL NasMsnlCntTsceq Flag to use Eq uilibrium Iteration Stepping (TSCEQ)
BOOL NasMsnlCntLvar Flag to specify “0..Ramp” (False) or “1..Step” (True) for 
Time Unassigned Loads (LV AR)
BOOL NasMsnlCntTvar Flag to specify “0..Ramp” (False) or “1..Step” (True) for 
Time Unassigned Temp Loads (TV AR)
BOOL NasMsnlCntDtsbcdt Flag to activate stepping based on UMAT supplied time 
increments (TSCUMAT)
REAL8 NasMsnlCntEqmfmin Minimum time step factor for UMAT stepping (UMFMIN) 
value
REAL8 NasMsnlCntEqmfmx Minimum time step factor for UMAT stepping (UMFMX) 
value
NASTRAN Multi-Step Control Options (SOL 401) - Case - Other OptionsBOOL NasMsnlCntPlastic Flag to enable Include Plasticity option
BOOL NasMsnlCntCreep Flag to enable Include Creep optionNASTRAN Multi-Step Control Options (SOL 401) - Case - Solution and ConvergenceSolution and Convergence - Solution Parameters
INT4 NasMsnlCntLOADOFFDisable Mechanical Lo ads (LOADOFF) option:
0=No Loads Turned Off
1=Body Loads Turned Off2=Boundary Loads Turned Off
3=Both Boundary and Body Loads Turned Off
INT4 NasMsnlCntSolverSpecifies Solver (SOLVER) option: 0=SPARSE, 
1=PARDISO, 2=MUMPS, 3=ELEMITERProperty Description
   API-1963
INT4 NasMsnlCntRFV ARSpecifies Rot. Load Iner tia Scaling (RFV AR) option:
0=Scale Angular Velocity and Acceleration
1=Scale Force
BOOL NasMsnlCntINACCNFlag to use Compute Initial Acceleration in Dynamics 
(INACCN)
BOOL NasMsnlCntINERTIA Flag to use En able Inertia in Dynamics (INERTIA)
BOOL NasMsnlCntMsglvl Flag to u se Thermal Strain Loading (TSCEQ)
BOOL NasMsnlCntThrmst Flag to use Diagnostic Level (MSGLVL)Solution and Convergence - Stiffness Parameters
INT4 NasMsnlCntKupdate0=Auto Stiffness Update, 1= Full Newton-Raphson, 2=Quasi 
Newton-Raphson
INT4 NasMsnlCntQuasiNewtonIterQuasi Newton-Rhapson Iterations. Must be a value greater 
than or equal to 2. Only us ed when NasMsnlCntKupdate is 
set to 2=Quasi Newton-Raphson
INT4 NasMsnlCntStfoptn1=Elastic Stiffness Matrix, 2=Tangent Stiffness Matrix, 
3=Elastic/Tangent Stiffness Matrix
BOOL NasMsnlCntFollowk Flag to use Follow Stiffness (FOLLOWK)
BOOL NasMsnlCntSpink Flag to use Spin Softening (SPINK)
BOOL NasMsnlCntStressk Flag to use Stress Stiffening (STRESSK)BOOL NasMsnlCntTstepk Flag to use Follow Stiffness (TSTEPK)BOOL NasMsnlCntMSTAB Flag to use Enable  Stiffness Matrix Stabilization (MSTAB)
REAL8 NasMsnlCntMSFAC Value for Matrix Stabilization Factor (MSFAC) parameter.Solution and Convergence - Convergence Parameters
V ARIENT vNasMsnlCntConv_flagsFlags to use convergence option and specified value:
[0]=Displacement (EPSU)
[1]=Load (EPSP)
[2]=Work (EPSW)
V ARIENT vNasMsnlCntConv_valueValues for use corresponding convergence option
[0]=Displacement (EPSU)
[1]=Load (EPSP)
[2]=Work (EPSW)
INT4 NasMsnlCntMaxbis Max Bisection (MAXBIS) valueINT4 NasMsnlCntMaxdiv Max Divergences (MAXDIV) valueINT4 NasMsnlCntMaxiter Max It erations/Step (MAXITER) valuesProperty Description
 API-1964  
INT4 NasMsnlCntMaxqn Max Quasi Newton Vectors (MAXQN)
INT4 NasMsnlCntNORMPSpecifies Norm Criteria for Force (NORMP) option: 0=Norm 
1 Criteria, 1.=Norm 2 Criteria, 2.=Norm Infinity Criteria
INT4 NasMsnlCntNORMUSpecifies Norm Criteria for Di splacement (NORMU) option: 
0=Norm 1 Criteria, 1.=Norm 2 Criteria, 2.=Norm Infinity 
Criteria
REAL8 NasMsnlCntREFP Value for Forc e Error Function Denominator (REFP)
REAL8 NasMsnlCntREFU Value for Forc e Error Function Denominator (REFU)
Solution and Convergence - Time Integration
INT4 NasMsnlCntTINTMTHSpecifies Integration Scheme. 1=Newmark, 2=Hilber-
Hughes-Taylor, 3=Generalized alpha method, 4=Modified 
generalized alpha method. 
REAL8 NasMsnlCntBETA Value for BETA time integration parameter.
REAL8 NasMsnlCntGAMA Value for GAMA time integration parameter.
REAL8 NasMsnlCntALFA Value for AL FA time integration parameter.
REAL NasMsnlCntTETA Value for TETA time integration parameter.REAL NasMsnlCntRHOINF Value for R HOINF time integration parameter.
NASTRAN Multi-Step Control Options (SOL 401) - Case - Contact/Bolt PreloadContact/Bolt Preload - ContactINT4 NasMsnlCntCntmdiv Num Diverg ence for Bisection (CNTMDIV) value
REAL8 NasMsnlCntFsymtol Frict Threshold (FSYMTOL) value
INT4 NasMsnlCntKsymUnsymmetric Matrix option (KSYM) option:0=AUTO, 
1=SYM, 2=UNSYM
REAL8 NasMsnlCntKsymtol Symmetrizing Tol (KSYMTOL) value
INT4 NasMsnlCntMsglvlcContact Diagnostics (MSGLVLC) option: 0=None, 1=Con-
vergence, 2=Convergence and Contact Pair
INT4 NasMsnlCntUsolverUnsymmetric Solver (USOLVER) option: 0=HYBRID, 
1=SPARSE, 2=PARDISO, 3=MUMPS
Contact/Bolt Preload - Bolt/PreloadREAL8 NasMsnlCntEpsbolt Nonzero Preload Convergence Tol (EPSBOLT) valueREAL8 NasMsnlCntZerbolt Zero Preload Tol (ZERBOLT) valueINT4 NasMsnlCntItrbolt Max Iteratio ns for Convergence (ITRBOLT) valueProperty Description
   API-1965
REAL8 NasMsnlCntMisfblt Bolt Strain Limit (MISFBLT) value
INT4 NasMsnlCntMsglvlbDiagnostics (MSGLVLB) option: 0=Summary at Conver-
gence, 1=Summary Each Iteration, 2=Summary and Load 
Tol Each Iteration
NASTRAN Multi-Step Control Options (SOL 401) - Case - Creep OptionsREAL8 NasMsnlCntCrcerat Max Creep Ratio (CRCERAT) value
REAL8 NasMsnlCntCr cinc Max Creep Inc (CRCINC) value
REAL8 NasMsnlCntCricoff Creep Strain Inc (CRICOFF) valueREAL8 NasMsnlCntCrinfac Integra tion Factor (CRINFAC) value
REAL8 NasMsnlCntCrmfmn Min St ep Factor (CRMFMN) value
REAL8 NasMsnlCntCrmfmx Max St ep Factor (CRMFMX) value
REAL8 NasMsnlCntCrteabs Max Tr uncation Error (CRTEABS) value
REAL8 NasMsnlCntdCrteco Time Step for Next Truncation Step (CRTECO) value
REAL8 NasMsnlCntCrterel Max Relative  Truncation Error (CRTEREL) value
Arc-Length Control Options (SOL 401)
BOOL NasMsnlArcLenOnFlag indicating Arc-Length Control Options have been 
defined for subcase (i.e., se ts Enable NLARCL option)
INT4 NasMsnlArcLenConstrConstraint Type: 0=Default, 1=Riks, 2=Modified Riks, 
3=Crisfield
REAL8 NasMsnlArcLenMinAlr Min ArcL en Adjust Ration (MINALR) value
REAL8 NasMsnlArcLenMaxAlr Max ArcLen Adjust Ration (MAXALR) valueREAL8 NasMsnlArcLenMaxR Load/ArcLen Bound (MAXR) valueREAL8 NasMsnlArcLenScale Scale for Constraint Load (SCALE) valueINT4 NasMsnlArcLenDIter Desire d Iterations (DESITER) value
INT4 NasMsnlArcLenMxInc Max Load Increments (MXINC) valueREAL8 NasMsnlArcLenInitLdfac Initia l Load Factor (LDFACIN) value
REAL8 NasMsnlArcLenMxLdfac Max Load Factor (MXLDFAC) valueINT4 NasMsnlArcLenSkipFac Output  Skip Factor (NOUTAL) value
NASTRAN Multi-Step Control Options (SOL 402) - Case
BOOL NasMsnlCnt2OnFlag indicating Multi-Step Co ntrol Options for Multi-Step 
Nonlinear Kinematic have been defined for subcaseProperty Description
 API-1966  
NASTRAN Multi-Step Control Options (SOL 402) - Case - General options
BOOL NasMsnlCnt2SkipNLCNTL2 Flag to di sable writing of the NLCNTL2 for this case
NASTRAN Multi-Step Control Options (SOL 402) - Case - Time StepBOOL NasMsnlkCnt2CIBL
or
BOOL NasMsnlkCnt2AUTOTIMFlag to use Auto Time Stepping (CIBL) option (version 12), 
Auto Time Stepping (AUTOTIM) option (2019.1 and above)
REAL8 NasMsnlkCnt2DTI0
orREAL8 NasMsnlkCnt2DTINITFirst Time Step (DTI0) value (version 12), First Time Step 
(DTINIT) value (2019.1 and above)
REAL8 NasMsnlkCnt2HMIN
or
REAL8 NasMsnlkCnt2DTMINMinimum Time Step (HMIN) value (version 12), Minimum 
Time Step (DTMIN) value (2019.1 and above)
REAL8 NasMsnlkCnt2HMAX
orREAL8 NasMsnlkCnt2DTMAXMaximum Time Step (HMAX) value (version 12), Maximum 
Time Step (DTMAX) value (2019.1 and above)
REAL8 NasMsnlkCnt2RUP
or
REAL8 NasMsnlkCnt2EQMFMXMaximum Increase Ratio (RUP) value (version 12), Maxi-
mum Increase Ratio (EQMFMX) value (2019.1 and above)
REAL8 NasMsnlkCnt2RDOW
or
REAL8 NasMsnlkCnt2EQMFMINMaximum Decrease Ratio (RDOW) value (version 12), Max-
imum Decrease Ratio (EQMFMIN ) value (2019.1 and above)
INT4 NasMsnlkCnt2ITEREF Number of Iterations (ITEREF) value
INT4 NasMsnlkCnt2RJPNSpecifies Negative Pivot Time Step Rejection (RJPN) option:
0=Never1=Last Iteration Only
2=Print State At Last Iteration
3=Always
BOOL NasMsnlkCnt2RJPZ Zero Pivot Ti me Step Rejection (RJPZ) value
BOOL NasMsnlkCnt2TSDYN Integratio n Error Control (TSDYN) value
BOOL NasMsnlkCnt2ERCDFlag to use Activate Time Stepping Based on Disp/Temp 
Error
REAL8 NasMsnlkCnt2PRED Value fo r Allowable Change/Step (PRED)
NASTRAN Multi-Step Control Options (SOL 402) - Case - Viscous Material OptionsBOOL NasMsnlkCnt2TSVSC Flag to use In tegration Error Control (TSVSC) option
REAL8 NasMsnlkCnt2VSCOTE Error Threshold (VSCOTE)
INT4 NasMsnlkCnt2VSCOSN Min Stress Factor (VSCOSN)Property Description
   API-1967
NASTRAN Multi-Step Control Options (SOL 402) - Case - Analysis Control
REAL8 NasMsnlkCnt2DISLIM Maximum Displacement (DISLIM) valueREAL8 NasMsnlkCnt2RO TLIM Maximum Rotation (ROTLIM) value
REAL8 NasMsnlkCnt2DEFLIM Maximum  Deformation (DEFLIM) value
BOOL NasMsnlkCnt2LV ARFlag to specify “0..Ramp” (False) or “1..Step” (True) for 
Time Unassigned Loads (LV AR)
BOOL NasMsnlkCnt2TV ARFlag to specify “0..Ramp” (False) or “1..Step” (True) for 
Time Unassigned Temp Loads (TV AR)
BOOL NasMsnlkCnt2DIPR Flag to use Predict Displacement (DIPR) option
BOOL NasMsnlkCnt2NORM Flag to use Force Normalization (NORM) option
BOOL NasMsnlkCnt2MATSYMFlag to use Unsymmetrical Matrices for Complex Modes 
(MATSYM)
BOOLNasMsnlkCnt2INERTIA Flag to use En able Inertia in Dynamics (INERTIA)
BOOLNasMsnlkCnt2IAR0 Flag to use Save Da ta at Beginning of Computation (IAR0)
NASTRAN Multi-Step Control Options (SOL 402) - Case - Plasticity and Creep ControlBOOL NasMsnlkCnt2PLASTIC Flag to use Enable Plasticity option
BOOL NasMsnlkCnt2CREEP Flag to use Enable Creep option
REAL8 NasMsnlkCnt2CRINFAC Creep Inte gration Factor (CRINFAC) value
NASTRAN Multi-Step Control Options (SOL 402) - Case - Internal Restart
INT4 NasMsnlkCnt2RSUBSpecifies if the Restart (RSUB) should be enabled and the 
value to use for Restart Subcase. If value is set to 0, the Restart (RSUB) option will be disabled. If value is set to a 
value above 0, the Restart (RSUB) option will be enabled and 
the value specified wi ll be used as the value for Restart Sub-
case.
NASTRAN Multi-Step Control Options (SOL 402) - Case - Solution and ConvergenceSolution and Convergence - Analysis OptionsREAL8 NasMsnlkCnt2STAB Stabili zation Factor (STAB) value
REAL8 NasMsnlkCnt2M ADI Minimum Disp Variation (MADI) value
Solution and Convergence - Equilibrium and ConvergenceINT4 NasMsnlkCnt2ILNS Li ne Search (ILNS) value
REAL8 NasMsnlkCnt2PRLN Line Search  Convergence Tol (PRLN) valueProperty Description
 API-1968  
REAL8 NasMsnlkCnt2AMIN Min Line Search Factor (AMIN) value
REAL8 NasMsnlkCnt2AMAX Ma x Line Search Convergence Force (AMAX) value
INT4 NasMsnlkCnt2ITMA Max Iter (ITMA) value
REAL8 NasMsnlkCnt2PRCR Relativ e Force Tol (PRCR) value
REAL8 NasMsnlkCnt2REFP Relative Force (REFP) valueREAL8 NasMsnlkCnt2PRCQ Relativ e Disp Force (PRCQ) value
REAL8 NasMsnlkCnt2REFU Refe rence Disp (REFU) value
REAL8 NasMsnlkCnt2PRCE Rel Energy Tol (PRCE) valueREAL8 NasMsnlkCnt2REFE Refe rence Energy (REFE) value
INT4 NasMsnlkCnt2IT1K Stiffnes s Update Param 1 (IT1K) value
INT4 NasMsnlkCnt2IT2K Stiffnes s Update Param 2 (IT2K) value
INT4 NasMsnlkCnt2IT3K Stiffnes s Update Param 3 (IT3K) value
INT4 NasMsnlkCnt2PLASSpecifies First Iteration Strategy (PLAS) option:
-1=Elastic tangent matrix, plastic stress variation-2=Elastic tangent matrix, elastic stress variation
-3=Plastic tangent matrix, elastic stress variation
1=Plastic tangent matrix, plastic stress variation
INT4 NasMsnlkCnt2OTRESpecifies Rigid Body Motion (OTRE) option:
0=Disable Convergence
1=Enable based on PRCE, PRCQ, and PRCR criteria
2=Enable based on PRCE, PRCQ, PRCR, and REFP
Solution and Convergence - Time Integration
INT4 NasMsnlkCnt2IMPLSpecifies Integration Scheme  (IMPL) option (version 12):
1=NewMark implicit predictor-corrector
2=Newmark implicit predictor-co rrector with automatic time 
stepping21=Hilber-Hughes-Taylor (HHT) implicit predictor-corrector 
scheme
22=Hilber-Hughes-Taylor (HHT) implicit predictor-corrector 
with automatic time stepping
31=Generalized midpoint
32=Generalized midpoint with automatic time stepping61=Generalized Alpha
62=Generalized Alpha with  automatic time steppingProperty Description
   API-1969
INT4 NasMsnlkCnt2TINTMTHSpecifies Integration Scheme (TINTMTH) option (2019.1 
and above):
1=Newmark
2=Hilber-Hughes-Taylor3=Generalized Midpoint
4=Generalized Alpha
REAL8 NasMsnlkCnt2BETA Param1 (BETA) value
REAL8 NasMsnlkCnt2GAMA Param2 (GAMA) value
REAL8 NasMsnlkCnt2ALFA HHT Scheme Param (ALFA) valueREAL8 NasMsnlkCnt2TETA Generalized  Scheme Param (TETA) value
REAL8 NasMsnlkCnt2P RCO Intg Control Param 1 (PRCO) value
REAL8 NasMsnlkCnt2HP RCO Intg Control Param 2 (HPRCO) value
Solution and Convergence - Contact
REAL8 NasMsnlkCnt2RELC Valu e for Relaxation Force (RELC)
REAL8 NasMsnlkCnt2DCON Value fo r Characteristic Length (DCON)
REAL8 NasMsnlkCnt2PRCS Value for Ing Regularization Factor (PRCS)
REAL8 NasMsnlkCnt2PRCF Value for Thresh old for Contact Force Variation (PRCF)
Solution and Convergence - DiagnosticINT4 NasMsnlkCnt2IMPG Pr int Frequency (IMPG) value
INT4 NasMsnlkCnt2IMPR Max Re sidual Printout (IMPR) value
INT4 NasMsnlkCnt2IMPV Max Pivots (IMPV) value
NASTRAN Multi-Step Time Steps (SOL 401 and SOL 402) - Case
BOOL NasMsnlTSOnFlag indicating Multi-Step Time  Steps for Multi-Step Struc-
tural or Multi-Step Nonlinear Kinematic have been defined 
for subcase
BOOL NasMsnlTSSkipTSTEP Flag to disab le writing of the TSTEP for this case
REAL8 NasMsnlTSEndTime[0..9]Value in End Time Column of row specified by zero-based 
index value in Time Steps dialog box. 0=Row 1, 1=Row 2, 
etc
INT4 NasMsnlTSNumIncrements[0..9]Value in Number of Increments Column of row specified by 
zero-based index value in Time Steps dialog box. 0=Row 1, 1=Row 2, etc.Property Description
 API-1970  
INT4 NasMsnlTSOutputFreq[0..9]Value in Output Frequency Column of row specified by zero-
based index value in Time Steps dialog box. 0=Row 1, 
1=Row 2, etc: 0=Requested Increments, 1=Solution Step End 
Time, 2=All Times, 3=Couplin g Times, 4=Skip Factor 
INT4 NasMsnlTSSkipFactor[0..9]Value in Number of Increments Column of row specified by 
zero-based index value in Time Steps dialog box. 0=Row 1, 
1=Row 2, etc. Only used when NasMsnlTSOutputFreq=4
NASTRAN Aeroelastic Trim Parameters - Case Options
BOOL NasCaeOnFlag indicating NASTRAN Trim Options have been defined 
for subcase.
REAL8 NasCaeMachNumber Mach numberREAL8 NasCaeDynPressure Dynamic pressureBOOL NasCaeRigidTrim Flag to request a rigid trim analysisBOOL NasCaeWrtieTrim Flag to enable writing of the TRIM for this case. 
NASTRAN Flutter Parameters - Case Options
BOOL NasCflOnFlag indicating NASTRAN Fl utter Options have been 
defined for subcase
INT4 NasCflMethod Flu tter analysis method
INT4 NasCflDenID Femap function defining density ratios INT4 NasCflMachFactID Femap fu nction defining density ratios
INT4 NasCflRfreqFactID Femap fu nction defining density ratios
INT4 NasCflFliMethod Interpolation methodINT4 NasCflEig Number EigenvaluesREAL8 NasCflEps ConvergenceBOOL NasCflWriteFlutter Flag to enable  writing of the FLUTTER for this case. 
INT4 NasSELoad Superelement load set IDINT4 NasCflSdampID ID of Femap function defining the Modal Damping TableMSC NASTRAN Implicit Nonlinear (SOL 400) - Control Parameters
BOOL NasInlStepOptOnFlag indicating Control Parame ters for Implicit Nonlinear 
Analysis have been defined for the subcase
BOOL NasInlStepOptSkipNLSTEP Flag to disab le writing of NLSTEP for this subcase
INT4 NasInlStepOptID ID of NLSTEP for this subcaseProperty Description
   API-1971
Control Parameters - Step Parameters
REAL8 NasInlStepOptTOTTIM Total Time (TOTTIM) value
INT4 NasInlStepOptCTRLDEFSpecifies Nonlinearity (CTRLDEF) option:
0=Default
1=Linear
2=Mildly Nonlinear3=Severely Nonlinear
Control Parameters - General ParametersINT4 NasInlStepOptMAXITER Max Iter ations/Increment (MAXITER) value
INT4 NasInlStepOptMINITER Min Iter ations/Increment (MINITER) value
INT4 NasInlStepOptMAXBIS Max Bise ctions for Step (MAXBIS) value
BOOL NasInlStepOptCREEP Flag to enable Include Creep (CREEP) optionControl Parameters - Analysis Parameter
INT4 NasInlStepOptLoadSteppingSpecifies Increment Type option:
0=Fixed
1=Adaptive
2=Arc-Length
Control Parameters - Analysis Parameters - Fixed Time Stepping ParametersINT4 NasInlStepOptNINC Number of Increments (NINC) value
INT4 NasInlStepOptNO Outpu t Interval (NO) value
Control Parameters - Analysis Parameters - Adaptive Load Stepping ParametersREAL8 NasInlStepOptDTINITF Initial Fraction (DTINITF) valueREAL8 NasInlStepOptDTMINF Min Fraction (DTMINF) valueREAL8 NasInlStepOptDTMAXF Max Fraction (DTMAXF) valueREAL8 NasInlStepOptSFACT Increase Factor (SFACT) valueINT4 NasInlStepOptADJUST Auto Skip Factor (ADJUST) valueINT4 NasInlStepOptMSTEP Dominant Pe riod Resp. Steps (MSTEP) value
REAL8 NasInlStepOptRB Adaptive Time Step Bound (RB) valueINT4 NasInlStepOptNDESIR Desired Iterations/Increments (NDESIR) valueINT4 NasInlStepOptNSMAX Max Increments (NSMAX) value
REAL8 NasInlStepOptUTOL Displacement Tolerance (UTOL) valueProperty Description
 API-1972  
INT4 NasInlStepOptIDAMPSpecifies Static Damping (IDMAP) option:
0=No Added Damping
4=Time Step Control Using Damping
5=Damping-based Time Step Control with No Damping
6=Add Damping when Minimum Time Step is Reached
REAL8 NasInlStepOptDAMP Damping Ratio (DAMP) value
INT4 NasInlStepOptINTOUTSpecifies Output Flag (INTOUT) option:
-1=Last Increment
0=Every Load Increment>0=Equally Spaced Intervals (value is used to specify value 
for Output Every Nth Step) 
Adaptive Load Stepping Parameters - CriteriaBOOL NasInlStepOptEnableCriteria Flag to enable the Enable User Criteria option
INT4 NasInlStepOptIPHYSSpecifies Physical Criteria (IPHYS) option:
-2=No Auto Physical Criteria; Continue When User Criteria 
Exceeded-1=Add Auto Physical Criteria; Continue When User Criteria 
Exceeded
1=1..No Auto Physical Criteria; Stop When User Criteria Exceeded
2=2..Add Auto Physical Criteria; Stop When User Criteria 
Exceeded
INT4 NasInlStepOptLIMTARSpecifies Definition (LIMTAR) option:
0=Criteria as Limits
1=Criteria as Targets
REAL8 NasInlStepOptRSMALL Min. Ratio (RSMALL) valueREAL8 NasInlStepOptRBIG Max Ration (RBIG) value
BOOL NasInlStepOptIncrements[0..9]Flag in Status column of row specified by zero-based index 
value in list of Criteria. When  True, Criterion is enabled.
0=Elem. Strain
1=Elem. Plastic Strain
2=Elem. Creep Strain3=Elem. Normalized Creep Strain
4=Elem. Strain Energy
5=Elem. Stress6=Elem. Normalized Stress
7=Nodal Temperature
8=Nodal Displacement9=Nodal RotationProperty Description
   API-1973
INT4 NasInlStepOptGroupIDs[0..9]ID of existing Group in Group column of row specified by 
zero-based index value in list of Criteria. For description of 
each row, See NasInlStepOptIncrements.
REAL8 NasInlStepOptYT1_i[0..9]Value in Y1 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT1_i[0..9]Value in M1 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptYT2_i[0..9]Value in Y2 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT2_i[0..9]Value in M2 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptYT3_i[0..9]Value in Y3 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT3_i[0..9]Value in M3 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptYT4_i[0..9]Value in Y4 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT4_i[0..9]Value in M4 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
Control Parameters - Analysis Parameters - Arc-Length Load Stepping Parameters
INT4 NasInlStepOptTYPESpecifies Constraint Type option:
0=Crisfield1=Riks
2=Modifed Riks
REAL8 NasInlStepOptDTINITFA Initial Time Step Fraction (DTINITFA) valueREAL8 NasInlStepOptMINALR Min ArcL enAdjust Ratio (MINALR) value
REAL8 NasInlStepOptMAXALR Max ArcLenAdjust Ratio (MAXALR) valueREAL8 NasInlStepOptSCALEA Scale Factor (SCALEA) valueINT4 NasInlStepOptNDESIRA Desired Iterations (NDESIRA) valueProperty Description
 API-1974  
INT4 NasInlStepOptNSMAXA Max Increments (NSMAXA) value
Control Parameters - Analysis Parameters - Mechanical Analysis ParametersBOOL NasInlStepOptMECH Flag to enable the Enable MECH option
INT4 NasInlStepOptKMETHODSpecifies Method (KMETHOD) option:
0=Full Newton-Raphson
1=Quasi Newton-Raphson
INT4 NasInlStepOptKSTEP Iter ation Interval (KSTEP) value
INT4 NasInlStepOptMAXQN QN Vectors (MAXQN) valueINT4 NasInlStepOptMAXLS Max Line Searches (MAXLS) valueREAL8 NasInlStepOptLSTOL Line Search Tol (LSTOL) valueREAL8 NasInlStepOptFSTRESS Fraction Limit (FTRESS) valueBOOL NasInlStepOptConvU Flag to enable Displacement option
REAL8 NasInlStepOptEPSU Displacement value
BOOL NasInlStepOptConvP Flag  to enable Load option
REAL8 NasInlStepOptEPSP Load valueBOOL NasInlStepOptConvW Flag  to enable Work option
REAL8 NasInlStepOptEPSW Work valueBOOL NasInlStepOptConvV Flag to enable Vector optionBOOL NasInlStepOptConvN Flag  to enable Length option
BOOL NasInlStepOptConvA Flag to enable Automatic Switching option
INT4 NasInlStepOptMRCONVSpecifies Checking (MRCONV) option:
0=Forces, Moments, Displacements, and Rotations
1=Forces, Moments, and Displacements2=Forces, Displacements, and Rotations
3=Forces and Displacements
MSC Nastran Boundary Conditions
INT4 ContactOptionBoundary Conditions dialog bo x for MSC Nastran Only. Sets 
BCONTACT Option (0=Default, 1=Inital Contact, 2=All Body, 3=Auto) 
INT4 ContactSetTypeBoundary Conditions dialog bo x for MSC Nastran Only. Sets 
Contact/Glue Sets option (0=A ll Connectors, 1=Connection 
Group, 2=All Body). ID of group for Connection Group set using BCSet[13]
ANSYS Case Options (Legacy)Property Description
   API-1975
Analysis Case Options - ANSYS Specific (Legacy)
BOOL AnsDOFOn Flag indicating Dynami c DOF Options have been defined.
BOOL AnsDOFDoSet Flag indicating a mast er DOF set is specified and in use.
BOOL AnsDOFAutomatic Indicates automatic dynamic DOF selection.BOOL AnsDOFNoRotation Excludes rotatio nal DOF from automatic DOF selection.
INT4 AnsDOFSetID Constraint set ID to be used as a master DOF set.INT4 AnsDOFNumber Number of degrees of freedom to automatically select.
Modal Options - ANSYS (Legacy)BOOL AnsModesOn Flag indicating modal expansion options have been defined.INT4 AnsModesNumModes Number of  modes/frequencies to expand.
REAL8 AnsModesMinFreq Minimum frequency of interest.REAL8 AnsModesMaxFreq Maximum frequency of interes.tREAL8 AnsModesModalMethod Modal expansion method.
BOOL AnsModesElemResultsFlag indicating whether elementa l results (stresses, strains...) 
will be calculated.
Heat Transfer Options ANSYS (Legacy)BOOL AnsHeatOn Flag indicating Heat Transfer Options have been defined.REAL8 AnsHeatEndTime Time at  end of this load step.
REAL8 AnsHeatTimeStep Initial time increment.INT4 AnsHeatOutputFreq Output step interval.Analysis Case Options - MARC SpecificBOOL MarHistOn Flag indicating MARC Hi story options have been defined
INT4 MarHistContactProp ID of Contact Property written to the CONTACT TABLE.
INT4 MarHistCtrlMethodID of control type written to  the CONTROL option. 0=None, 
1=Full Newton-Raphson, 2=Modified Newton-Raphson, 
3=Strain Correction Newton-Raphson, 8=Secant Method, 
INT4 MarHistSolverMethID of solver type written to  the SOLVER option. 0=None, 
1=Profile Direct, 2=Sparse Iterative, 3=Sparse Direct, 4=Hardware Provided Sparse Di rect, 5=MultiFrontal Direct 
Sparse.
INT4 MarHistCtrlMaxStep Number of Max Steps written to CONTROL option.
INT4 MarHistCtrlMaxRecycle Number of Max Recycles written to CONTROL option.Property Description
 API-1976  
INT4 MarHistCtrlMinRecycle Number of Mi n Recycles written to CONTROL option.
REAL8 MarHistMaxResidualNumber of Max Conv. Residual written to CONTROL 
option.
INT4 MarHistConvergeMethID of method written to CONTROL option. 0=Rel Force 
Residuals, 1=Rel Disp Residuals, 2=Rel Strain Ener Res, 
3=Abs Force Residuals, 4=Abs Disp Residuals, 5=Abs Strain Ener Res.
BOOL MarHistNonPosDefiniteFlag indicating Nonpositive Def will be used on SOLVER 
option.
BOOL MarHistNonSymmetricFlag indicating NonSymmetric will be used on SOLVER 
option.
REAL8 MarHistModalMinFreq Number indicatin g the Min Freq for a modal analysis.
REAL8 MarHistModalMaxFreq Number indicatin g the Max Freq for a modal analysis.
INT4 MarHistModalEigenNumber indicating the Number of eigenvectors to be found in 
modal analysis.
INT4 MarHistCheckingID indicating checking will be used. 0=None, 1=Strum 
Sequence.
BOOL MarHistAutoSwitchFlag indicating Auto Switch will be used on CONTROL 
option. 
INT4 MarHistAnalCaseSolID indicating the Anal ysis type for this Subcase 1=Static, 
2=Normal Modes, 3=Buckling.
INT4 MarHistBuckleNumModes Number of Buckling modes.INT4 MarHistBucklePosEigen Number of  Modes With positive eigenvalues.
BOOL MarIncOn Flag indicating MARC Incr ement options have been defined
INT4 MarIncArcLenMethID indicating the Arclength Method. 0=None( AUTO STEP), 
1=Crisfield, 2=Riks, 3=Modified Riks, 4=Crisfield/Modified 
Riks.
REAL8 MarIncTimePeriod Number in dicating AUTO STEP time period. 
REAL8 MarIncInitTimeInc Number indi cating AUTO STEP initial time increment.
REAL8 MarIncMinTimeInc N umber indicating AUTO STEP min time increment.
REAL8 MarIncMaxTimeInc Number indi cating AUTO STEP max time increment.
REAL8 MarIncScaleFact Number indicating AUTO STEP scale factor.INT4 MarIncMaxStep Number indicatin g AUTO STEP max number of steps.
INT4 MarIncNumOutInc Numb er indicating number of output intervals.Property Description
   API-1977
BOOL MarIncQuasiStatDamp Flag to in clude Damping scheme for statics.
REAL8 MarIncFracFirstNumber indicating AUTO INCREMENT fraction of total 
load applied in first step. 
INT4 MarIncMaxNumIncNumber indicating AUTO INCREMENT max num incre-
ments. 
INT4 MarIncCtrlMaxRecycle Number in dicating AUTO INCREMENT max recycles.
REAL8 MarIncMaxFracForAllNumber indicating AUTO INCREMENT max fraction of 
load for any step.
REAL8 MarIncTotalTime Number indicating AUTO INCREMENT total time.BOOL MarCtblOn Flag indicating the MA RC Contact Table has been defined.
BOOL MarCtblWrite Flag indicating the MARC Contact Table is to be written.Property Description
 API-1978  InitAnalysisCase
5.6.2  AnalysisCase Object Methods
In addition to the standard methods, th e following methods are also available.
5.6.2.1  InitAnalysisCase
InitAnalysisCase
( nSetID, nCaseID )
Description:This method initializes the defau lt values for an analysis case
Input:INT4 nSetID The Analysis SetID containing the case to be initializedINT4 nCaseID The Case ID to be initializedOutput:NoneReturn Value
FE_FAILUnable to initialize the case. Probab ly the Analysis Set you specified 
does not exist.
Remarks/Usage:NoneExample:None
DeleteAnalys isCase   API-1979
5.6.2.2  DeleteAnalysisCase
DeleteAnalysisCase
( nSetID, nCaseID )
Description:Use this method to delete an analysis case.Input:INT4 nSetID The Analysis SetID containing the case to be deletedINT4 nCaseID The Case ID to be deletedOutput:NoneReturn ValueFE_FAILRemarks/Usage:This method takes care  of deleting any start/end text or Marc contact table records that referenced the 
case.  
Example:None
 API-1980  ActiveContactEntities
5.6.2.3  ActiveC ontactEntities
ActiveContactEntities
( bContact, nConnectorSetID, nRegionSetID, nConPropSetID )
Description:This method is used to populate Set Objects with the Connectors, Connection Regions, and Connection 
Properties that will be exported for Contact or Glue C ontact by an analysis case.  This method takes into 
consideration the settings in  the Contact Sets or Glue  Sets section of the Boun dary Conditions dialog 
box for Simcenter SOL 401/402 or setting for Contact/G lue Sets of the Boundary Conditions dialog box 
for MSC Nastran
Input:
BOOL bContactIf True, populates sets with connecti on entities for Contact. If False, 
populates sets with connectio n entities for Glued Contact
INT4 nConnectorSetIDSet ID of Set Object to popula te with Connectors which will be 
exported by this analysis case
INT4 nRegionSetIDSet ID of Set Object to populate  with Connection Regions which will 
be exported by this analysis case
INT4 nConPropSetIDSet ID of Set Object to populate  with Connection Properties which 
will be exported by this analysis case
Output:NoneReturn ValueFE_FAIL No Connection Re gions were detected.
Remarks/Usage:It is important to use three unique s Set Objects when usin g this method, otherwise the IDs of different 
entity types may contaminate a Set. Also, it is recommend to  use “empty sets” to insure that only the 
Connection entities from a single anal ysis case populate the three sets.
Example:None
GetContactTable   API-1981
5.6.2.4  GetContactTable
GetContactTable
( count, rowSeg, colSeg, tieType, distTol, sepForce, friction, interClose )
Description:This method retrieves data from the Contact Table.Input:NoneOutput:INT4 count The number of entries in each of the other vectors.INT4 rowSeg[0..count-1] The IDs of the contact segments referenced in rows of the table
INT4 colSeg[0..count-1] The IDs of the contact segments referenced in columns of the table
INT4 tieType[0..count-1] The tying type (0,1=None, 2=Touch, 3=Glue)REAL8 distTol[0..count-1 ] The distance tolerance
REAL8 sepForce[0..count-1] The separation forceREAL8 friction[0..count-1] The friction valuesREAL8 interClose[0..count- 1] The interference closure
Return ValueFE_NOT_EXIST The contact table does not exist.FE_FAIL Unable to allocate memory to return the contact table data.
Remarks/Usage:NoneExample:None
 API-1982  PutContactTable
5.6.2.5  PutContactTable
PutContactTable
( count, rowSeg, colSeg, tieType, distTol, sepForce, friction, interClose )
Description:This method replaces data  in the Contact Table
Input:INT4 count The number of entries in each of the other vectors.INT4 rowSeg[0..count-1] The IDs of the contact segments referenced in rows of the table
INT4 colSeg[0..count-1] The IDs of the contact segments referenced in columns of the table
INT4 tieType[0..count-1] The tying type (0,1=None, 2=Touch, 3=Glue)REAL8 distTol[0..count-1 ] The distance tolerance
REAL8 sepForce[0..count-1] The separation forceREAL8 friction[0..count-1] The friction valuesREAL8 interClose[0..count- 1] The interference closure
Output:NoneReturn ValueFE_FAIL Unable to update the contact table.Remarks/Usage:This function completely replaces the contact tabl e - it does not add to data that is already there.
Example:None
GetStandardTrim   API-1983
5.6.2.6  GetStandardTrim
GetStandardTrim
( useTrim, TrimID, TrimVal )
Description:This method retrieves data fro m the standard trim definition.
Input:NoneOutput:INT4 useTrim[0..11] 0=Off,1=Use, 2= Fi xed. See Remarks for array index value
INT4 TrimID[0..11] Not currently used
REAL8 TrimVal[0..11]Magnitude value when UseTrim[i] = Fixed. See Remarks for array 
index value
Return ValueFE_NOT_EXIST Standard Trim values have not been defined.FE_FAIL Unable to allocate memo ry to return the trim data.
Remarks/Usage:Valid TrimID values: 
0 = NAS_AERO_TRIM_ANGLEA
1 = NAS_AERO_TRIM_SIDES
2 = NAS_AERO_TRIM_ROLL3 = NAS_AERO_TRIM_PITCH
4 = NAS_AERO_TRIM_YAW
5 = NAS_AERO_TRIM_URDD16 = NAS_AERO_TRIM_URDD2
7 = NAS_AERO_TRIM_URDD3
8 = NAS_AERO_TRIM_URDD49 = NAS_AERO_TRIM_URDD5
10 - NAS_AERO_TRIM_URDD6
Example:None
 API-1984  PutStandardTrim
5.6.2.7  PutStandardTrim
PutStandardTrim
( useTrim, TrimID, TrimVal )
Description:This method loads standard trim  data into the trim definition.
Input:INT4 useTrim[0..11] 0=Off, 1=Use, 2= Fixed. See Remarks for array index valueINT4 TrimID[0..11] Not currently used
REAL8 TrimVal[0..11]Magnitude value when UseTrim[i] = Fixed. See Remarks for array 
index value
Output:NoneReturn ValueFE_NOT_EXIST Standard Trim values have not been defined.FE_FAIL Unable to allocate memo ry to return the trim data.
Remarks/Usage:Valid index values: 
0 = NAS_AERO_TRIM_ANGLEA
1 = NAS_AERO_TRIM_SIDES
2 = NAS_AERO_TRIM_ROLL3 = NAS_AERO_TRIM_PITCH
4 = NAS_AERO_TRIM_YAW
5 = NAS_AERO_TRIM_URDD16 = NAS_AERO_TRIM_URDD2
7 = NAS_AERO_TRIM_URDD3
8 = NAS_AERO_TRIM_URDD49 = NAS_AERO_TRIM_URDD5
10 - NAS_AERO_TRIM_URDD6
Example:None
GetTrimControlSurf   API-1985
5.6.2.8  GetTrimControlSurf
GetTrimControlSurf
( useTrim, TrimID, TrimVal )
Description:This method retrieves data from the trim defi nition for user defined Aero Control Surfaces 
Input:NoneOutput:INT4 useTrim[0..29] 0=Off,1=Use, 2= FixedINT4 TrimID[0..29] ID of the Fe map Aero Control Surface Entity
REAL8 TrimVal[0..29] magnitudeReturn ValueFE_NOT_EXIST Trim values have not been defined.FE_FAIL Unable to allocate memo ry to return the trim data.
Remarks/Usage:
Example:
None
 API-1986  PutTrimControlSurf
5.6.2.9  PutTrimControlSurf
PutTrimControlSurf
( useTrim, TrimID, TrimVal )
Description:This method loads user defined Aero Cont rol Surface data into the Trim definition
Input:INT4 useTrim[0..29] 0=Off,1=Use, 2= FixedINT4 TrimID[0..29] ID of the Fe map Aero Control Surface Entity
REAL8 TrimVal[0..29] magnitudeOutput:NoneReturn ValueFE_FAIL Unable to store the trim data.Remarks/Usage:
Example:
None
GetOptLimits   API-1987
5.6.2.10  GetOptLimits
GetOptLimits
( nSetID, bClear )
Description:Gets Optimization Limits (Op timization Response objects) enabled for an analysis case
Input:INT4 nSetID ID of Set Object to be populatedBOOL bClear Clear existing entitiesOutput:NoneReturn ValueFE_INV ALID Analysis type is not design optimizationFE_NOT_EXIST No Optimization Limits  (Responses) have been enabled
Remarks/Usage:NoneExample:None
 API-1988  PutOptLimits
5.6.2.11  PutOptLimits
PutOptLimits
( nSetID, bClear )
Description:Sets Optimization Limits (Optimization Resp onse objects) enabled for an analysis case
Input:
INT4 nSetIDID of Set Object containing Optimization Limits (Response) IDs. 
Alternatively, specify a negative nu mber to put a single optimization 
variable
BOOL bClear Clear existing entitiesOutput:None
Return Value
FE_INV ALID Analysis type is not design optimizationFE_NOT_EXIST No Optimization Limits  (Responses) have been enabled
Remarks/Usage:
Example:
None
GetStep   API-1989
5.6.2.12  GetStep
GetStep
( StepID )
Description:This method creates and returns an AnalysisStep object  that is loaded with the options referenced by an 
analysis step.
Input:INT4 entID The ID of Analysis St ep in the current Case to load
Output:NoneReturn ValueNoneRemarks/Usage:The current AnalysisCase object must be loaded with  the data from the case that contains the step that 
you want to retrieve. The AnalysisCase.ID property is used to define the case that you want to retrieve.
Example:
Sub Main
    Dim App as femap.model    Set App = feFemap()
    Dim rc As Integer    Dim aCase As femap.AnalysisCase
    Set aCase = App.feAnalysisCase
    Dim aStep As femap.AnalysisStep
    aCase.SetID = 1
    rc = aCase.Get( 1 )
    If (rc = FE_OK) Then        Set aStep = aCase.GetStep( 1 )
        App.feAppMessage(FCM_NORMAL, aStep.StepTitle )
    End IfEnd Sub
 API-1990  PutStep
5.6.2.13  PutStep
PutStep
( pDISPATCH )
Description:Saves a fully populated Analysis Step Object to the database
Input:OBJECT pDISPATCH AnalysisStep Object to save to the databaseOutput:NoneReturn ValueNoneRemarks/Usage:This can be used in conjunction with GetStep to create a fully po pulated AnalysisStep object, make 
changes to the object, then save  the changes to the database.
Example:None
DeleteStep   API-1991
5.6.2.14  DeleteStep
DeleteStep
( entID )
Description:Use this method to delete an analysis step.Input:INT4 entID The Analysis Step to be deletedOutput:NoneReturn ValueFE_FAILRemarks/Usage:
Example:
None
 API-1992  KBC
5.6.3  AnalysisCase Object  - ANSYS Specific Methods
In addition to the standard meth ods, the following methods are al so available specifcially for use 
with ANSYS translator.
5.6.3.1  KBC
KBC
( key )
Description:This method sets th e Amplitude (KBC) option on ANSYS Load Step Options dialog box
Input:BOOL key When True, enables Amplitude (KBC) optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
PSTRES   API-1993
5.6.3.2  PSTRES
PSTRES
( key )
Description:This method sets the Include Prestress Effects ( PSTRES) option on ANSYS Load Step Options dialog 
box
Input:BOOL key When True, enables Include Prestress Effects (PSTRES) optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-1994  TIME
5.6.3.3  TIME
TIME
( time )
Description:This method sets the Time Duration valu e on ANSYS Time Step Options dialog box
Input:REAL8 time Time Duration valueOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
AUTOTS   API-1995
5.6.3.4  AUTOTS
AUTOTS
( key )
Description:This method sets the Automatic Time Stepping (AUTOTS) option on ANSYS Load Step Options dialog 
box
Input:BOOL key When True, enables Automatic  Time Stepping (AUTOTS) option
Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-1996  LANBOPTION
5.6.3.5  LANBOPTION
LANBOPTION
( strmck )
Description:This method sets the St rum Sequence Check option on ANSYS Moda l Analysis dialog box for use the 
Block Lanczos mode extraction method
Input:BOOL key When True, enables Strum Sequence Check optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
PCGOPT   API-1997
5.6.3.6  PCGOPT
PCGOPT
( strmck )
Description:This method sets the Strum Sequence Check option on ANSYS Modal Analysis dialog box for the PCG 
Lanczos mode extraction method
Input:BOOL key When True, enables Strum Sequence Check optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-1998  SUPOPT
5.6.3.7  SUBOPT
SUPOPT
( strmck )
Description:This method sets the St rum Sequence Check option on ANSYS Moda l Analysis dialog box for use the 
Subspace mode extraction method
Input:BOOL key When True, enables Strum Sequence Check optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
LUMPM   API-1999
5.6.3.8  LUMPM
LUMPM
( key )
Description:This method sets the Lu mper option on ANSYS Transient Dynamics dialog box
Input:BOOL key When True, enables Lumped optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2000  ALPHAD
5.6.3.9  ALPHAD
ALPHAD
( alpha )
Description:This method sets the Mass value (Damping) on ANSYS Transient Analysis dialog box
Input:REAL8 alpha Mass value (Damping)Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
BETAD   API-2001
5.6.3.10  BETAD
BETAD
( beta )
Description:This method sets the Stiffness value (Dampi ng) on ANSYS Transient Analysis dialog box
Input:REAL8 beta Stiffness value (Damping)Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2002  DMPSTR
5.6.3.11  DMPSTR
DMPSTR
( dmp )
Description:This method sets the Struct value (Damping) on ANSYS Transient Analysis dialog box
Input:REAL8 dmp Struct value (Damping)Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
DMPRAT   API-2003
5.6.3.12  DMPRAT
DMPRAT
( rat )
Description:This method sets th e Ratio value (Damping) on ANSYS Transient Analysis dialog box
Input:REAL8 rat Ratio value (Damping)Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2004  NEQIT
5.6.3.13  NEQIT
NEQIT
( neqit )
Description:This method sets the Max Iterations  value on ANSYS Nonlinear dialog box
Input:INT4 neqit Max Iterations valueOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
NLGEOM   API-2005
5.6.3.14  NLGEOM
NLGEOM
( key )
Description:This method sets th e Nonlinear Geometry option on  ANSYS Nonlinear dialog box
Input:BOOL key When True, enables Nonlinear Geometry optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2006  ARCLEN
5.6.3.15  ARCLEN
ARCLEN
( key )
Description:This method sets the Ar c-Length option on ANSYS Nonlinear dialog box
Input:BOOL key When True, enables Arc-Length optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
LNSRCH   API-2007
5.6.3.16  LNSRCH
LNSRCH
( key )
Description:This method sets the Line Search option on ANSYS Nonlinear dialog box
Input:BOOL key When True, enables Line Search optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2008  PRED
5.6.3.17  PRED
PRED
( sskey )
Description:This method sets the Predictor option on ANSYS Nonlinear dialog box
Input:BOOL sskey When True, enables Predictor optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
SPOPT   API-2009
5.6.3.18  SPOPT
SPOPT
( sptype, nmode, elcalc )
Description:This method sets the Spectrum op tions on ANSYS Random Vibration Analysis Options dialog box
Input:INT4 sptype ID of the spectrum type option.INT4 nmode Specifies the number of modes.BOOL elcalc When True, Element Results is on. 
Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2010  PSDUNIT
5.6.3.19  PSDUNIT
PSDUNIT
( tblno, type)
Description:This method sets the PSD table on the ANSYS Random Vibration Analysis Options dialog box
Input:
INT4 tblnoID of the function, 0=DISP, 1=VEL, 2=ACEL 
(Acc2/Hz) , 3=ACCG 
(g2/Hz) , 4=FORC, 5=PRES.
INT4 type Specifies the PSD type.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
PFACT   API-2011
5.6.3.20  PFACT
PFACT
( tblno, excit)
Description:This method sets the PSD table on the ANSYS Random Vibration Analysis Options dialog box
Input:
INT4 tblnoID of the function, 0=DISP, 1=VEL, 2=ACEL 
(Acc2/Hz) , 3=ACCG 
(g2/Hz) , 4=FORC, 5=PRES.
BOOL excit Sets the Mode Factors, True = Node, False = Base.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2012  PSDCOM
5.6.3.21  PSDCOM
PSDCOM
( signif, type)
Description:This method sets the Mode Comb inations options on the ANSYS Ra ndom Vibration Analysis Options 
dialog box
Input:REAL8 signif Sets the Significance value. INT4 comode Sets the Mode Number value.BOOLforcetype Sets the Combine Force, True = Static, False = Total.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
   API-2013
5.7  AnalysisMgr Objects
While maybe not entirely obvious, AnalysisMgr obj ects correspond to the analysis sets in your 
model. They are derived from Entity objects, so in addition to the properties and methods 
described here, all of the properties and methods defined for Entity objects are also available for 
AnalysisMgr objects. Fo r more information, see Section 5. 1, "Common Entity Properties and 
Methods".
Use the feAnalysisMgr method of the FEMAP App lication object to create AnalysisMgr objects.
Note: While a method called feAn alysisSet also exists, it is only  used to create AnalysisMgr 
objects, thus it is redundant and should NOT be us ed. It has not been removed for the sole purpose 
of allowing any programs which have it specified to continue to run properly.
5.7.1  AnalysisMgr Object Properties
AnalysisMgr objects are always stored with their SetID = 1, and the ID equal to the analysis set 
that you are trying to access. 
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
STRING title Analysis set title (maximum 79 characters).
INT4 SolverAnalysis program to be used for analysis: 0=Unknown, 
4=MSC/NASTRAN, 5=ANSYS, 16=ABAQUS, 28=LS-Dyna, 
29=MSC.Marc, 31=NE/Nastran, 34=FEMAP Structural. 36=NX Nastran.
INT4 AnalysisTypeType of analysis: 0=Unknown, 1=Static, 2=Normal Modes/
Eigenvalue, 3=Transient Dynamic/Time History, 4=Fre-
quency/Harmonic Response, 5=Response Spectrum, 6=Ran-dom Response, 7=Buckling, 8=Design Opt, 9=Explicit 
Transient Dynamics, 10=Non linear Static, 11=Nonlinear 
Buckling, 12=Nonlinear Transi ent, 13=Implicit Transient 
Dynamics, 17=Fatigue, 19=Computational Fluid Dynamics, 
20=Steady-State Heat Transfer, 21=Transient Heat Transfer, 
22=Advanced Nonlinear Static, 23=Advanced Nonlinear Tran-sient, 24=Advanced Nonlinear Ex plicit, 25=Static Aeroelastic-
ity, 26=Aerodynamic Flutter
INT4 LinkedSolverOptionSets Solve Using option for analysis set: 
0=Integrated Solver (FS_INTEGRATED enum), 1=Linked Solver (FS_LINKED enum), 2=VisQ (FS_VISQ enum)
(Obsolete) BOOL LaunchWithVisQ *This property is obsolete and has been removed. It will not 
work in version 11.3 and ab ove. Use LinkedSolverOption 
instead to launch the analysis using VisQ.
Master Case Options - Master Case and Boundary ConditionsSTRING CaseTitle[80] Title of analysis set Master (maximum 80 characters).
 API-2014  
STRING CaseLabel[80] Label of analysis set Master (maximum 80 characters).
enum SubcaseAnalysisTypeAnalysis Type for Subcase (onl y used by certain solvers for 
certain analysis types). See “Ana lysis Types” in Section 3.3.7, 
"FEMAP Constants" for available enumerations.
INT4 CaseType 0=Normal, 1=Subcom (not used)BOOL SkipStandard Flag to skip standard output for this case.
INT4 StartText ID of starting text.INT4 EndText ID of ending text.
INT4 BCSet[20]
or
V ARIANT vBCSetSetIDs of load and constraint  sets for this case: [0]=Con-
straints, [1]=Constraint Equati ons, [2]=Loads,  [3]=Initial Con-
ditions, [4]=Master DOF, [5]=Base/Support DOF, [6]=Omit 
DOF, [7]=QSET DOF, [8]=CSET DOF, [9]=BSET DOF, 
[10]=Bolt Preloads, [11]=SUPORT1 DOF, [12]=Tempera-tures, [13]=Connection Group (MSC Only), [14]=Loads (Time), [15]=Temperatures (Init) , [16]=Glue Set, [17]=Con-
tact Set, others not currently used.
Master Case Options - Output Requests  (Multiple Solvers other than ANSYS)
INT4 Output[35]
orV ARIANT vOutputOutput requests for this ca se: 0=off,-1=full model, 
>0=groupID, [0]=No dal Applied Load, [1]=Nodal Reaction 
Force, [2]=Nodal Displacem ent, [3]=Nodal Velocity, 
[4]=Nodal Acceleration, [5]=No dal Temperature, [6]=Nodal 
Heat Flux, [7]=Nodal Constrai nt Equation Forc es, [8]=Nodal 
Force Balance, [9]=Nodal Ki netic Energy, [15]=Element 
Force, [16]=Element Stress, [1 7]=Element Strain, [18]=Ele-
ment Plastic Strain, [19]=Element Strain Energy, [20]=Ele-ment Heat Flux, [21]=Element Enthalpy, [22]=Element 
Enthalpy Rate, [23]=Element Contact, [24]=Element Tem-
perature, [25]=Element Kinetic Energy, [26]=Element Energy Loss, [27]=Glue, others not currently used.
STRING Echo[80] String for ECHO option.
INT4 DestinationOutput destination: 0=Default,  1=Print Only, 2=PostProcess 
Only, 3=Print and PostProcess, 4=Punch Only, 5=Punch and 
PostProcess, 6=XDB, 7=Output Database (ABAQUS ODB File), 8=Print and Output Database (ABAQUS ODB File)
INT4 ImaginaryFormat for complex output: 0=Magnitude/Phase, 1=Real/
Imaginary.
INT4 CornerOutput Flag to requ est output at element corners.
INT4 IntegrationOutput Flag to request output at element integration points.
BOOL NasRelEMotion Flag to request Relative Enforced Motion Results.Property Description
   API-2015
BOOL NasCurvatureStrainFlag to request Curvature Stra in Results. True = Curvature, 
False = Fiber
ABAQUS OptionsAnalysis Set Options - ABAQUS SpecificBOOL AbaModOn Flag indicating ABAQUS Model options have been specified.
BOOL AbaModGroupsAsSets Flag to write all groups as sets.
BOOL AbaModTitleSetNames Flag to write entity titles as set names.
BOOL AbaModCbushAsMatrixFlag to write all CBUSH elements as MATRIX (True), other-
wise, writes connections entries.
BOOL AbaModSkipStandard Flag to skip  output of standard ABAQUS model.
INT4 AbaModStartText ID of text written at beginning of ABAQUS modelINT4 AbaModEndText ID of text written at end of ABAQUS model.
INT4 AbaModVersionVersion number of ABAQUS to  translate for (61=Version 
6.1).
ABAQUS Step Options - Master Case OptionsBOOL AbaHistOn Flag indicating ABAQUS History Options have been defined.
REAL8 AbaHistTimePeriod Time period.REAL8 AbaHistInitTimeInc Initial time increment.
REAL8 AbaHistMinTimeInc M inimum time increment.
REAL8 AbaHistMaxTimeInc M aximum time increment.
INT4 AbaHistEigenvectors Number of eigenvectors.REAL8 AbaHistMinFreq Dynamic analysis minimum frequency.
REAL8 AbaHistMaxFreq Dynamic analysis maximum frequency.
REAL8 AbaHistShiftFreq Dynami c analysis shift frequency.
REAL8 AbaHistScaleFactor Time step scale factor.INT4 AbaHistOutInterval Time step  number of output intervals.
BOOL AbaHistNonlinGeom Flag to  specify nonlinear geometry
BOOL AbaHistLinearPert Flag to specify linear perturbation.BOOL AbaHistAutoContact Flag  to specify auto contact.
BOOL AbaHistStabilize Flag to stabilize contact.BOOL AbaHistOutZeroInc Flag to wr ite results for zero time increment.Property Description
 API-2016  
INT4 AbaHistStepAmp Step amplitu de: 0=Default, 1=Step, 2=Ramp.
INT4 AbaHistStepLoad Step loads: 0=New, 1=Modify.
INT4 AbaHistStepConstr Step constraints: 0=New, 1=Modify.
INT4 AbaHistAnalysisTypeStep-based analysis type (see “Analysis Type” property 
above):
0=Default=”Use Analysis Type”
ANSYS OptionsANSYS Command and Model Control and ANSYS Command Control (Legacy)
BOOL AnsCmlOnFlag indicates ANSYS Command and Model Control or 
ANSYS Command Control options  (Legacy) are specified.
INT4 AnsCmlVersion Version of ANSYSINT4 AnsCmlPid Value of item in ANSYS Product drop-downSTRING AnsCmlProd Title of item in ANSYS Product drop-downBOOL AnsCmlList Flag to List Input File in Output Text FileSTRING AnsCmlJobname Jobname (maximum 259 characters)STRING AnsCmlDir Output Director y (maximum 259 characters)
INT4 AnsCmlDBmem Database Memory (in Megabytes)INT4 AnsCmlWSmem Workspace Memory (in Megabytes)STRING AnsCmlUser Other Command Line  Inputs (maximum 259 characters)
ANSYS Command and Model Control - Model Control, Result Control, Manual Control
INT4 AnsModelGroupIDSpecifies group ID for Portio n of Model to Write option. 
0=Entire Model, above 0=ID of group to export
BOOL AnsModelSkipCsys Flag to Skip Coordinate Systems during export.
BOOL AnsModelSkipNode Flag to  Skip Nodes during export.
BOOL AnsModelSkipElem Flag to Skip Elements during export.
BOOL AnsModelSkipMatl Flag to Skip Materials during export.
BOOL AnsModelSkipProp Flag to Skip Properties during export.
BOOL AnsModelSkipGroup Flag to Skip Groups during export.BOOL AnsModelSkipMisc Flag to Skip  Miscellaneous text during export.
INT4 AnsModelRSTcompSpecifies File Compression Level option. 0=Sparse, 1=No 
Compression.Property Description
   API-2017
BOOL AnsModSkipStandard Flag to skip  output of standard ANSYS model.
INT4 AnsModStartText ID of text wr itten at beginning of ANSYS model.
INT4 AnsModEndText ID of text written at end of ANSYS model.ANSYS Load Step - Master Case Options
INT4 BCSet[0..20]
orV ARIANT vBCSetSetIDs of load and constraint  sets for this case: [0]=Con-
straints, [1]=Constraint Equati ons, [2]=Loads,  [3]=Initial Con-
ditions, [10]=Bolt Preloads, [12]=Temperatures, [16]=Glue 
Set, [17]=Contact Set
BOOL AnsLdstepOn Flag indicating ANSYS Load Step options have been defined.BOOL AnsKbc Flag to use Amplitude (KBC) optionBOOL AnsPstres Flag to use Include Prestress Effect (PSTRES) option
INT4 AnsEqslvSpecifies Equation Solver (EQSLV): 0=Sparse Direct, 
1=Jacobi Conjugate Gradient iterative, 2=Incomplete Chole-sky Conjugate Gradient iterati ve, 3=Quasi-Minimal Residual 
iterative, 4=Preconditioned Conjugate Gradient iterative
BOOL AnsNewConstraint Flag to specify New (True) or Modify (False) for Constraints
BOOL AnsNewLoad Flag to specify New (True) or Modify (False) for Loads
BOOL AnsNewContact Flag to specify New (True) or Modify (False) for Contacts
ANSYS Time Step Options - Master Case OptionsBOOL AnsTimestepOn Flag indicating ANSYS Time Step options have been defined.
REAL8 AnsTime Time DurationBOOL AnsAutots Flag to use Automatic Time Stepping (AUTOTS) optionBOOL AnsNsubs Flag to set Number of Steps (True) or Size of Steps (False)INT4 AnsNsbstep Used when AnsNsubs is True, sets Number of Steps INT4 AnsNsbmx Used when AnsNsubs is True, sets Max Number of Steps
INT4 AnsNsbmn Used when AnsNsubs is True, sets Min Number of StepsREAL8 AnsDtime Used when AnsNsubs is False, sets Time StepREAL8 AnsDtmin Used when AnsNsubs is False, sets Min Time Step 
REAL8 AnsDtmax Used when AnsNsubs is False, sets Max Time Step BOOL AnsPlslimit Flag to use Max Plastic  Strain option with specified value
REAL8 AnsPlslimitvalue Max Plastic Strain value BOOL AnsCrplimit Flag to use Max Cree p Strain option with specified valueProperty Description
 API-2018  
REAL8 AnsCrplimitvalue Max Creep Strain value
BOOL AnsDpplimit Flag to use Max Pressure  Change option with specified value
REAL8 AnsDpplimitvalue Max Pressure Change valueBOOL AnsDsplimit Flag to use Max Disp  Change option with specified value
REAL8 AnsDsplimitvalue Max  Disp Change value
BOOL AnsBisect Flag to use Bisection Factor option with specified value
REAL8 AnsBisectfactor Bisection Factor valueBOOL AnsPredictor Flag to us e Predict to Bisect option
BOOL AnsMidtol Flag to use Midstep To lerance option with specified value
REAL8 AnsTolerb Midstep Tolerance valueBOOL AnsResfq Flag to us e Response Frequency option
ANSYS Modal Analysis Options - Master Case Options
BOOL AnsModalOptOnFlag indicating ANSYS Modal An alysis options have been 
defined.
INT4 AnsModalMethodSelect Method for model extraction: 0=Block Lanczos, 1=PCG 
Lanczos, 2=Supernode, 3= Subspace, 4=Unsymmetrical, 
5=Damped, 6=Damped w/ QR
INT4 AnsModalNmode Number Frequency ModesREAL8 AnsModalFreqb Frequency value for FromREAL8 AnsModalFreqe Frequency value for To
BOOL AnsModalNrmkeyFlag to use Mass (True) or Ma x=Unity (False) for Mode Nor-
malization
BOOL AnsModalStrmck Flag to  enable Strum Sequence Check
REAL8 AnsModalRangefact RangeFact valu e (only used when AnsModalMethod=2)
INT4 AnsModalBlocksize Blocksize value (only used when AnsModalMethod=2)INT4 AnsModalRobustlev RobustLev valu e (only used when AnsModalMethod=2)
INT4 AnsModalComputeSpecifies if Eigenvalues and/or  Eigenvectors options should 
on/off. 0=Both Off, 1=Eigenv alues Only On, 2=Eignevectors 
Only On, 3=Both On (only used when AnsModalMethod=2)
BOOL AnsModalReusekeyFlag to enable Eigen Reuse (only used when AnsModal-
Method=6)Property Description
   API-2019
INT4 AnsModalSymmethSelect Mode Extract symmetri cal method for Damped w/QR: 
0=Block Lanczos, 1=Subspace, 2=Supernode (only used when 
AnsModalMethod=6)
ANSYS Buckling Analysis Options - Master Case Options
BOOL AnsBuckleOptOnFlag indicating ANSYS Buckling Analysis options have been 
defined.
INT4 AnsBuckleMethodSelect Method for model extraction: 0=Block Lanczos, 1=Sub-
space
INT4 AnsBuckleNmode Number of Buckle Modes
REAL8 AnsBuckleShiftSpecifies Shift value when AnsB uckleRangekey is True (Cen-
ter option) or Lower Bound when AnsBuckleRangekey is 
False (Range option)
REAL8 AnsBuckleLdmulteSpecifies Bound value when AnsBuckleRangekey is True 
(Center option) or Upper Bound when AnsBuckleRangekey is False (Range option)
BOOL AnsBuckleRangekey Flag to use Center (True) or Range (False) for “Range Type”BOOL AnsBuckleStrmck Flag to enable Strum Sequence CheckANSYS Harmonic Analysis Options - Master Case Options
BOOL AnsHarmonicOptOnFlag indicating ANSYS Harmonic Analysis options have been 
defined.
BOOL AnsHarmonicMethodFlag for Modal (True) or Physic al (False) option for Frequency 
Response analysis
INT4 AnsHarmonicMinmode Min Mode Value (only used AnsHarmonicMethod = True)INT4 AnsHarmonicMaxmode Max Mode Value (only used AnsHarmonicMethod = True)
REAL8 AnsHarmonicFreqb Frequency value for Hz FromREAL8 AnsHarmonicFreqe Frequency value for Hz To
INT4 AnsHarmonicLogoptSpecifies Log Frequency Span: 0=Logarithm, 1=Octave band, 
2=1/2 Octave band, 3=1/3 Octa ve band, 4=1/6 Octave band, 
5=1/12 Octave band, 6=1/24 Octave band
BOOL AnsHarmonicReimkyFlag for Real/Imag (True) or Ampl/Phase (False) option for 
Complex Key
BOOL AnsHarmonicClust Flag fo r Cluster (True) or Unifor m (False) option for Cluster
ANSYS Transient Dynamics Options - Master Case Options
BOOL AnsTransOptOnFlag indicating ANSYS Transient Dynamics options have 
been defined.Property Description
 API-2020  
BOOL AnsTransMethodFlag for Modal (True) or Physic al (False) option for Transient 
analysis
INT4 AnsTransMinmode Min Mode Value (only used AnsTransMethod = True)INT4 AnsTransMaxmode Max Mode Value (only used AnsTransMethod = True)
BOOL AnsTransTintoptFlag for HHT (True) or Newmark (False) option for Time Inte-
gration
REAL8 AnsTransDmpsfreq Excitation Frequency valueBOOL AnsTransLumpm Flag to enab le Lumped option for Mass Matrix
REAL8 AnsTransAlphad M ass value (Damping)
REAL8 AnsTransBetad Stiffness value (Damping)REAL8 AnsTransDmpstr Struct value (Damping)REAL8 AnsTransDmprat Ratio value (Damping)
BOOL AnsTransGammaFlag to use gamma option with specified value (when enabled, 
alpha, delta, alphaf, and alpham are ignored)
REAL8 AnsTransGammavalue gamma valueREAL8 AnsTransAlpha alpha value (only used when AnsTransGamma is False)
REAL8 AnsTransDelta delta value (only used when AnsTransGamma is False)
REAL8 AnsTransAlphaf alphaf value (onl y used when AnsTransGamma is False)
REAL8 AnsTransAlpham alpham value (onl y used when AnsTransGamma is False)
ANSYS Nonlinear Options - Master Case OptionsBOOL AnsNlOptOn Flag indicating ANSYS Nonlinear options have been defined.
INT4 AnsNroptSpecifies Method for Stiffne ss Updates: 0=ANSYS choose, 
1=Full Newton Raphson, 2=Modified Newton Raphson, 3=Initial Stiffness, 4=Full Ne wton Raphson Unsymmetrical
INT4 AnsNeqit Max Iterations value
BOOL AnsCnvtolUFlag to use Displacement option (Convergence Tolerances) 
with specified value
REAL8 AnsUtoler Dis placement value
BOOL AnsCnvtolRotFlag to use Rotation option (C onvergence Tolerances) with 
specified value
REAL8 AnsRottoler Rotation valueProperty Description
   API-2021
BOOL AnsCnvtolFFlag to use Force option (Convergence Tolerances) with speci-
fied value
REAL8 AnsFtoler Force value
BOOL AnsCnvtolMFlag to use Moment option (Convergence Tolerances) with 
specified value
REAL8 AnsMtoler Moment value
BOOL AnsCnvtolDvolFlag to use V olume Change option (Convergence Tolerances) 
with specified value
REAL8 AnsDvoltoler V olume Change value
BOOL AnsCnvtolHdspFlag to use Hydro Pressure option (Convergence Tolerances) 
with specified value
REAL8 AnsHdsptoler Hydro Pressure valueBOOL AnsNlgeom Flag to use Nonlinear Geometry option
BOOL AnsArclen Flag to use Arc-Length optionBOOL AnsLnsrch Flag to use Line Search optionBOOL AnsPred Flag to use Predictor optionANSYS Output Requests - Master Case OptionsBOOL AnsOutputOn Flag indicating ANSYS Output Requests have been defined.ANSYS Output Requests - Binary Result File (OUTRES) SectionBOOL AnsOutresAll Flag to select All Results option
INT4 AnsOutresAllFreqSpecify FREQ value for All R esults: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutresAllNthSpecify integer value for OR S TEPS for All Results, only used 
when AnsOutresAllFreq=3
BOOL AnsOutresBasic Flag to select Basic Results option
INT4 AnsOutresBasicFreqSpecify FREQ value for Basic R esults: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutresBasicNthSpecify integer value for OR  STEPS for Basic Results, only 
used when AnsOutresBasicFreq=3
BOOL AnsOutresRsol Flag to select Nodal Reaction option
INT4 AnsOutresRsolFreqSpecify FREQ value for Noda l Reaction: 0=None, 1=Write 
All, 2=Write Last, 3=Write Every NthProperty Description
 API-2022  
INT4 AnsOutresRsolNthSpecify integer value for OR STEPS for Nodal Reaction, only 
used when AnsOutresRsolFreq=3
BOOL AnsOutresNsol Flag to select Nodal DOF option
INT4 AnsOutresNsolFreqSpecify FREQ value for Noda l DOF: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutresNsolNthSpecify integer value for OR STEPS for Velocity, only used 
when AnsOutresNsolFreq=3
BOOL AnsOutresVel Flag to select Velocity option
INT4 AnsOutresVelFreqSpecify FREQ value for Velo city: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutresVelNthSpecify integer value for OR STEPS for Velocity, only used 
when AnsOutresVelFreq=3
BOOL AnsOutresAcc Flag to select Acceleration option
INT4 AnsOutresAccFreqSpecify FREQ value for Accele ration: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutresAccNthSpecify integer value for OR  STEPS for Acceleration, only 
used when AnsOutresAccFreq=3
BOOL AnsOutresEsol Flag to select Element Results option
INT4 AnsOutresEsolFreqSpecify FREQ value for Elem ent Results: 0=None, 1=Write 
All, 2=Write Last, 3=Write Every Nth
INT4 AnsOutresEsolNthSpecify integer value for OR STEPS for Element Results, only 
used when AnsOutresEsolFreq=3
ANSYS Output Requests - Print Result File (OUTPR) SectionBOOL AnsOutprAll Flag to select All Results option
INT4 AnsOutprAllFreqSpecify FREQ value for All R esults: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutprAllNthSpecify integer value for OR S TEPS for All Results, only used 
when AnsOutprAllFreq=3
BOOL AnsOutprBasic Flag to select Basic Results option
INT4 AnsOutprBasicFreqSpecify FREQ value for Basic R esults: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutprBasicNthSpecify integer value for OR  STEPS for Basic Results, only 
used when AnsOutprBasicFreq=3
BOOL AnsOutprRsol Flag to select Nodal Reaction optionProperty Description
   API-2023
INT4 AnsOutprRsolFreqSpecify FREQ value for Noda l Reaction: 0=None, 1=Write 
All, 2=Write Last, 3=Write Every Nth
INT4 AnsOutprRsolNthSpecify integer value for OR STEPS for Nodal Reaction, only 
used when AnsOutprRsolFreq=3
BOOL AnsOutprNsol Flag to select Nodal DOF option
INT4 AnsOutprNsolFreqSpecify FREQ value for Noda l DOF: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutprNsolNthSpecify integer value for OR STEPS for Velocity, only used 
when AnsOutprNsolFreq=3
BOOL AnsOutprVel Flag to select Velocity option
INT4 AnsOutprVelFreqSpecify FREQ value for Velo city: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutprVelNthSpecify integer value for OR STEPS for Velocity, only used 
when AnsOutprVelFreq=3
BOOL AnsOutprAcc Flag to select Acceleration option
INT4 AnsOutprAccFreqSpecify FREQ value for Accele ration: 0=None, 1=Write All, 
2=Write Last, 3=Write Every Nth
INT4 AnsOutprAccNthSpecify integer value for OR  STEPS for Acceleration, only 
used when AnsOutprAccFreq=3
BOOL AnsOutprEsol Flag to select Element Results option
INT4 AnsOutprEsolFreqSpecify FREQ value for Elem ent Results: 0=None, 1=Write 
All, 2=Write Last, 3=Write Every Nth
INT4 AnsOutprEsolNthSpecify integer value for OR STEPS for Element Results, only 
used when AnsOutprEsolFreq=3
LS-DYNA OptionsLS-DYNA Model OptionsBOOL DynModOn Flag Indicating LS-DYNA parameters have been specified.BOOL DynModExportRigidNodes Flag to export Rigid Reference Nodes.BOOL DynModMatlBasedParts Flag to write Material Based Plate Parts.
INT4 DynModelGroupIDSpecifies group ID for Portio n of Model to Write option. 
0=Entire Model, above 0=ID of group to export
BOOL DynModelSkipCsys Flag to Skip Coordinate Systems during export.BOOL DynModelSkipNode Flag to Skip Nodes during export.BOOL DynModelSkipElem Flag to Skip Elements during export.Property Description
 API-2024  
BOOL DynModelSkipMatl Flag to Skip Materials during export.
BOOL DynModelSkipProp Flag to Skip Properties during export.
BOOL DynModelSkipGroup Flag to Skip Groups during export.BOOL DynModelSkipMisc Flag to Skip  Miscellaneous text during export.
BOOL DynModSkipStandard Flag to skip  the standard LS-DYNA model section
INT4 DynModStartText ID of text written at the beginning of  the model section.
INT4 DynModEndText ID of text writte n at the end of the model section.
BOOL DynModGroupsAsSets (Obsolete) Flag to write Femap groups as sets.Master Case Options - LS-DYNA Analysis ControlBOOL DynHistOn Flag indicating an Dyna History section has been defined.INT4 DynHistBodyLoadGrp Initial Body Load Group.BOOL DynHistMassDampOn Flag indicating Mass Damping value has been defined.REAL8 DynHistMsssDamp Mass Damping Value.BOOL DynHistImplicit Flag indi cating use of Implicit Solver.
BOOL DynHistSpringback Flag indicating Springback option has been defined.BOOL DynHistStrinOutput Flag indi cating Strain will be output. 
REAL8 DynHistTotalTime Value defining total solution time,REAL8 DynHistTimeHistOuput Number indicating output time interval.
REAL8 DynHistPrintHistOutput Number in dicating print output time interval.
INT4 DynHistPlateIntgPts Number indicatin g number of plate integration points.
INT4 DynHistGroupHistId ID of group to limit output request.NASTRAN OptionsMaster Case Options - NASTRAN SpecificBOOL NasOmodesOn Flag indicating an OMODES request has been defined.STRING NasOmodes[160] Expression used to select OMODES outputAnalysis Set Options - NASTRAN SpecificNASTRAN Executive Control Options
BOOL NasExecOnFlag indicating NASTRAN Execu tive Options have been 
defined.Property Description
   API-2025
INT4 NasExecVersionVersion of NASTRAN to support - Possible values 2004, 2001 
and 70 (for all previous versions)
STRING NasExecOutDir[260] Path to directory for output.STRING NasExecAnalyzeFilename
[80]Base File Name for input f ile (maximum 80 characters).
STRING NasExecUserCmdLine
[260]Additional Command Line Arguments
STRING NasExecProbl em[160] Problem ID
STRING NasExecSolName[80] Name of solution - specified as text, but could be a number.REAL8 NasExecMaxTime Maximum execution time.STRING NasExecDiag[160] String specifying diagnostics to incl ude in the solution.
BOOL NasExecIterSolve Flag to select iterative solver.
INT4 NasExecIterSolve2Similar to NasExecIterSolve, but allows you to set 0=Off, 
1=On, 2=NX Nastran Elemental Iterative Solver
INT4 NasExecNumCPUNumber of processors to use during solution: 0=Default=1 
Processor.
BOOL NasExecSaveDB Flag to save solution databases for later restart.BOOL NasExecRestart Flag indicating you wa nt to restart a previous analysis.
STRING NasExecRestartDB[260] Path to solutio n database that you want to restart from.
BOOL NasExecRestartReadOnly Flag indicating yo u want to perform a read only restart.
INT4 NasExecRestartVersion ID of restart version in master fileINT4 NasExecRestartSubcase ID of subcase to start from when restarting a nonlinear analysis
BOOL NasExecSkipStandard Flag to skip  writing standard Executive Control.
INT4 NasExecStartText ID of text to in clude at beginning of Executive Control.
INT4 NasExecEndText ID of text to include at end of Executive Control.
INT4 NasExecMemory Value of  solution memory in Mb.
BOOL NasExecGPU Flag to enable GPU ComputingINT4 NasExecGPUOpt Sets the GPU Op tion:0=DCMP, FRRD1;1=DCMP; 2=FRRD1
BOOL NasExecExtendedMessages Flag to  enable Extended Error Messages.
STRING NasExecSystemCell[160] Specifi es System Cell options for Nastran
STRING NasExecScratchDir1[260] Specifies primary scratch directoryProperty Description
 API-2026  
STRING NasExecScratchDir2[260] Speci fies secondary scratch directory
INT4 NasExecScratchSize1 Size of primary scratch directory (in MBytes)INT4 NasExecScratchSize2 Size of secondary scratch directory (in MBytes)
BOOL NasExecSolutionMonitorEnables the Nastran Solution Mon itor to be activated during an 
analysis.
INT4 NasExtSEOutAssignFormSets the Form option in the Cr eate Assign Statement dialog 
box accessed by clicking Start Text, then clicking Create 
ASSIGN. 0=None, 1=FORMATTED, 2=UNFORMATTED, 3=LITTLEENDIAN, 4=BIGENDIAN
NASTRAN Bulk Data Options
BOOL NasBulkOnFlag indicating NASTRAN Bulk Data Options have been 
defined.
INT4 NasBulkGroupIDID of the group of entities to be written to the NASTRAN file. 
0 = entire model.
BOOL NasBulkAutospc Flag to write PARAM,AUTOSPC.
INT4 NasBulkAutospcTypeID of Autospc method 0=Eigenvalue, 1=1..Singular Value 
Decomposition
BOOL NasBulkGrdpnt Flag to write PARAM,GRDPNT.INT4 NasBulkGrdpntVal Value to  include on PARAM,GRDPNT.
BOOL NasBulkWtmass Flag to write PARAM,WTMASS.REAL8 NasBulkWtmassVal Value to  include on PARAM,WTMASS.
BOOL NasBulkK6rot Flag to write PARAM,K6ROT.REAL8 NasBulkK6rotVal Value to include on PARAM,K6ROT.BOOL NasBulkMaxratio Flag to write PARAM,MAXRATIO.REAL8 NasBulkMaxratioVal Value to include on PARAM,MAXRATIO.BOOL NasBulkNdamp Flag to write PARAM,NDAMP.REAL8 NasBulkNdampVal Value to include on PARAM,NDAMP.BOOL NasBulkInrel Flag to write PARAM,INREL.INT4 NasBulkInrelVal ID of Inertia Relief option: -1=On, -2=AutomaticBOOL NasBulkBoltFact Flag to write PARAM, BOLTFACTREAL8 NasBulkBoltFactVal Value to be written with PARAM, BOLTFACT option Property Description
   API-2027
BOOL NasBulkEnfmotnFlag to write NASTRAN  command option for NX Nastran or 
PARAM,ENFMOTN for MSC Nastran
INT4 NasBulkEnfmotnOpt ID of ENFMOTN option: 0,1, 2
BOOL BulkSwpangle Flag to write PARAM, SWPANGLEREAL8 NasBulkSwpangleVal Value to be written with PARAM, SWPANGLE option 
BOOL NasBulkMgrid Flag to write PARAM, MGRIDINT4 NasBulkMgridID ID of Node  to write with PARAM, MGRID
INT4 NasBulkMdofVal DOF written with PARA M, MGRID, must be an integer 1-6
INT4 NasBulkMatnlWhen enabled and set to 1, writes PARAM,MATNL, 1. When 
enabled and set to -1, write s PARAM,MATNL,-1. When dis-
abled, writes nothing and default is used.
BOOL NasBulkLangle Flag to write PARAM,LANGLE.BOOL NasBulkLgdisp Flag to write PARAM,LGDISP.
BOOL NasBulkLgstrnIf True, writes PARAM,LGSTRN,1 to include effects of large 
strain.
BOOL NasBulkPrgpst Flag to write PARAM,PRGPST.BOOL NasBulkOgeom Flag to write PARAM,OGEOM
BOOL NasBulkSrcompsIf True, writes PARAM,SRCOMPS,YES to output Laminate 
Strength Ratios
BOOL NasBulkNofisrIf True, writes PARAM,NOFISR,1 to skip failure indices to 
the F06 file.
BOOL NasBulkPARAMBailout Flag to write PARAM,BAILOUT,-1BOOL NasBulkAutompc Flag to write PARAM,AUTOMPC.BOOL NasBulkDdrmmOff Flag to control PARAM,DDRMMBOOL NasBulkModacc Flag to write PARAM,MODACCBOOL NasBulkResVec Flag to write PARAM,RESVECBOOL NasBulkResVecOn Value to write with PARAM,RESVECBOOL NasBulkResViner Flag to write PARAM,RESVINERBOOL NasBulkCntAset Flag to write PARAM,CNTASETBOOL NasBulkSecomb Flag to write PARAM,SECOMBBOOL NasBulkAlpha1 Flag to write PARAM,ALPHA1Property Description
 API-2028  
REAL8 NasBulkAlpha1Val[0..1]
or
V ARIANT vNasBulkAlpha1ValValue to be written with PARAM, ALPHA1 option, 0=Real, 
1=Complex
BOOL NasBulkAlpha2 Flag to write PARAM,ALPHA2
REAL8 NasBulkAlpha2Val[0..1]
orV ARIANT vNasBulkAlpha2ValValue to be written with PARAM, ALPHA2 option, 0=Real, 
1=Complex
INT4 NasBulkLargeFieldSelection of field format: 0= Small,1=Large Csys,Matl,Prop, 
2=Large All But Elem, 3=Large, 4 = Large Csys, Node
BOOL NasBulkQuadrFlag selecting CQUADR/CTRIAR as the preferred plate/shell 
elements.
BOOL NasBulkSkipBeamShape Flag to skip  writing Beam Shapes as PBEAML/PBARL
BOOL NasBulkRigidThermalExp If True includes effects of thermal expansion for rigid elementsBOOL NasBulkGapsAsContact Flag to  write Gap Elements as contact.
BOOL NasBulkDynLdAsLOADSET Flag to write  Dynamic Loads usin g LOADSET/LSEQ method
BOOL NasBulkWriteAllLoadBCSets Flag to  write all Static Loads and BC Sets.
BOOL NasBulkSkipStandard Flag to skip standard bulk data.BOOL NasBulkEndTextOutsideBulk Flag to write  End Text at End of File Outside Bulk
INT4 NasBulkStartText ID of text writte n at the beginning of the Bulk Data.
INT4 NasBulkEndText ID of text wr itten at the end of the Bulk Data.
BOOL NasBulkPARAMBuckle Flag to write PARAM, BUCKLE.Monitor Points
BOOL NasMonitorEnabledFlag indicating Monitor Point Ou tput Requests will be written 
to the analysis case, when applicable
INT4 NasMptSetIDID of the Set Object containing the Monitor Points selected for 
Export, which can be used in co njunction with the Methods of 
the Analysis Set Object to Get, Put, and Clear the list.
BOOL NasMonitorAeroEnabled Flag to set  Print Aero Monitor Results option
BOOL NasMonitorLoadEnabled Flag to set  Print Load Mon itor Results option
Direct Matrix Input (DMIG)BOOL NasEnableDMIG Flag indi cating Enable Matrix Input
INT4 NasDMIGK2GGID of Direct Matrix Input entity  referenced by Stiffness drop-
down in G-Type Matrices. Writes K2GG Case Control entry.Property Description
   API-2029
INT4 NasDMIGM2GGID of Direct Matrix Input en tity referenced by Mass drop-
down in G-Type Matrices. Writes M2GG Case Control entry.
INT4 NasDMIGB2GGID of Direct Matrix Input en tity referenced by Damping drop-
down in G-Type Matrices. Writes B2GG Case Control entry.
INT4 NasDMIGK42GGID of Direct Matrix Input en tity referenced by Structural 
Damping drop-down in G-Type Matrices. Writes K42GG Case Control entry.
INT4 NasDMIGP2GID of Direct Matrix Input en tity referenced by Loading drop-
down in G-Type Matrices. Writes P2G Case Control entry.
INT4 NasDMIGK2PPID of Direct Matrix Input entity  referenced by Stiffness drop-
down in P-Type Matrices. Writes K2PP Case Control entry.
INT4 NasDMIGM2PPID of Direct Matrix Input en tity referenced by Mass drop-
down in P-Type Matrices. Writes M2PP Case Control entry.
INT4 NasDMIGB2PPID of Direct Matrix Input en tity referenced by Damping drop-
down in P-Type Matrices. Writes B2PP Case Control entry.
NASTRAN Nonlinear Analysis Options - Master Case OptionsBOOL NasCnlOn Flag indicating the Non linear Case Options has been defined.
BOOL NasCnlUseLoadSet Flag to use th e Nonlinear options from the Load Set.
INT4 NasCnlIncrements Numb er of Time Increments.
REAL8 NasCnlTime_Increment Value for Time Step Size.INT4 NasCnlMaxIter Nonlinear - Max Iterations per Step BOOL NasCnlConvergenceF-
lags[0..2]
orV ARIANT vNasCnlConvergenceF-
lagsNonlinear - Convergence Flags for 0=Displacement, 1=Load 
and 2=Work 
REAL8 NasCnlConvergenceV-
alue[0..2]or
V ARIANT vNasCnlConvergenceV-
alueNonlinear - Convergence Tolera nces for Displacement, Load 
and Work 
BOOL MSCNasCnlConvergenceF-
lags[0..1]
or
V ARIANT vMSCNasCnlConver-genceFlagsNonlinear - Convergence Flags for 0=Vector and 1=Length
MSC Nastran Only and there are no tolerance values.Property Description
 API-2030  
INT4 NasCnlStiffnessMethodNonlinear - Stiffness Update Method. 0=Default, 1=AUTO, 
2=Full 
INT4 NasCnlKstep Nonlinear - Itera tions before Stiffness Update 
INT4 NasCnlIntermediateOutput Nonlin ear - Intermediate Output Type 
INT4 NasCnlOutputInterval No nlinear - Output Interval 
INT4 NasCnlSolutionStrategyNonlinear - Nonlinear Arc-Leng th Solution Strategy (Arc- 
Length if nonzero) 
INT4 NasCnlSolutionOverridesNonlinear - Solution Strategy Overrides: 0=none/ advanced, 
1=Full Newton Raphson, 2=Modified Newton Raphson 
BOOL NasCnlModnewtonLine-
SearchNonlinear - Modified Newton Li ne Search Override (1=Skip) 
BOOL NasCnlModnewtonQua-
siNewtonNonlinear - Modified Newton Quasi-Newton Override 
(1=Skip) 
BOOL NasCnlModnewtonBisection N onlinear - Modified Newton Bisection Override (1=Skip) 
INT4 NasCnlArcConstraintType Nonlinear - Arc Length Constraint Type REAL8 NasCnlArcMinAdjust Nonlin ear - Min Arc Length Adjust 
REAL8 NasCnlArcMaxAdjust Nonlin ear - Max Arc Length Adjust 
REAL8 NasCnlArcLoadScale Nonlinear - Arc Length Method Constraint Load Scale 
INT4 NasCnlArcDesiredIter Nonlinear - Arc Length Desired Iterations INT4 NasCnlArcMaxSteps Nonlinear - Arc Length Max Steps INT4 NasCnlTimeSkipAdjust Nonlinear - Transient Time Step Skip Factor 
INT4 NasCnlDominantPeriodSteps Nonlinear - Transient Steps for Dominant Period 
REAL8 NasCnlBoundsRb Nonlinear - Tran sient Bounds to Maintain Step 
REAL8 NasCnlStabilityTolerance Nonlinear - Transient Minimum Stability Tolerance 
INT4 NasCnlDivergenceLimit Nonlin ear - Max Diverging Conditions 
INT4 NasCnlQuasiNewtonVectors Nonlinear  - Number of Quasi-Newton Vectors 
INT4 NasCnlMaxLineSearch Nonlinear - Max Line Search per Iteration REAL8 NasCnlLineSearchTolerance Nonlinear - Line Search Tolerance INT4 NasCnlMaxBisections Nonlinear - Max Bisections per Increment 
REAL8 NasCnlMaxRotation Nonlinear  - Max Rotation per Bisection 
REAL8 NasCnlFstress Nonlinear - Stress Fraction Limit Property Description
   API-2031
BOOL NasCnlkDAMP Nonlinear - Flag to In clude Differential Stiffness in Damping
REAL8 NasCnlMaxAdjust Nonlinear - Ma x Adjusted vs. Initial Increment 
BOOL NasCnlCreep Flag Indicating this a Creep Analysis. BOOL NasCnlSkipNLPARM Flag to disable writing of the NLPARM  for this case. 
NASTRAN Nonlinear Options
BOOL NasNonlinOnFlag indicating NASTRAN Non linear Options have been 
defined.
INT4 NasNonlinNDT Number of time steps.
REAL8 NasNonlinDTInitial time increment. In vers ion 11.2.2 and below, Positive 
value = Adaptive option selected in Nonlinear Control Options 
dialog box, Negative value = Constant Interval option selected.
BOOL NasNonlinAdaptFlag to turn on Adaptive in Step  Control section of Nonlinear 
Control Options dialog box
INT4 NasNonlinNO Output step interval.INT4 NasNonlinMaxIter Max  iterations per step.
BOOL NasNonlinEpsFlag[3]
or
V ARIANT vNasNonlinEpsFlagFlags indicating data to use for checking convergence: 0=Tem-
perature, 1=Load, 2=Work.
REAL8 NasNonlinEps[3]
orV ARIANT vNasNonlinEpsConvergence values to check with the convergence flags.
INT4 NasNonlinKUPDATE Stiffness Update Method. 0=Default, 1=AUTO, 2=Full
BOOL NasNonlinKDAMP Flag to Include Differential Stiffness in Damping
NASTRAN Modal OptionsBOOL NasModeOn Flag indicating NASTRAN Modal Options have been defined.
BOOL NasModesSkipEigrIf True, skips writing the EIGR ca rd for specifying modal anal-
ysis options
INT4 NasModeEigrSet SetID to be used for EIGR (Method ID field)
INT4 NasModeMethodModal Solution method: 0=Gi vens,1=Modified Givens, 
2=Inverse Power, 3=Inverse Power/Strum, 4=Householder, 5=Modified Householder, 6=La nczos, 7=Hessenberg, 8=Com-
plex Inverse Power, 9=Complex Lanczos, 10=Auto(HOU/
MHOU)/Auto (NEi), 11=Subspace (NEi Nastran only).
BOOL NasModeSolutionType Solution type: False=Direct, True=ModalProperty Description
 API-2032  
REAL8 NasModeFreqRange[2]
or
V ARIANT vNasModeFreqRangeFrequency range of inte rest, [0]=Min, [1]=Max.
REAL8 NasModeImagFreqRange[2]
orV ARIANT vNasModeImagFre-
qRangeFor Complex Modes analysis, spec ifies the imaginary part of 
the Frequency Range of interest.
INT4 NasModeEstRoots Estimated number of eigenvalues.
INT4 NasModeDesiredRoots Number of desired eigenvalues/modes.INT4 NasModeNormOpt Normalization method: 0=Mass,1=Max, 2=Point.INT4 NasModeNormNode Nod e ID for use with poin t normalization method.
INT4 NasModeNormDOF Nodal DOF for us e with point norm alization method.
INT4 NasModeMassForm Mass matrix formul ation: 0=Default, 1=Lumped, 2=Coupled.
BOOL NasModeSelOn If True, option in Resp onse Mode Selectio n section is enabled
BOOL NasModeSelInc If True, selects Include. If False, selects Exclude
STRING NasModeSel String specifying IDs of modes for dynamic responseREAL8 NasModesComplexConverge Specifi es Complex Modes convergence value
REAL8 NasModesComplexRegion-
WidthSpecifies Region Width for Complex Modes analysis.
REAL8 NasModeDampOverall Specifies PARAM,G
NASTRAN Dynamic Options
BOOL NasDynOnFlag indicating NASTRAN Dyna mic Options have been 
defined.
BOOL NasDynUseLoadSet Flag to use dynamic options from the load set.
REAL8 NasDynDampOverall Value fo r Overall Structural Damping.
REAL8 NasDynDampW3 Value for System Damping.REAL8 NasDynDampW4 Value for Element Damping.REAL8 NasDynKeepFreq[2]
or
V ARIANT vNasDynKeepFreq Max and Min frequencies used to limit response.
REAL8 NasDynTranDT Value used for Transient Time Increment.
INT4 NasDynFreqTbl ID of Function defining the Solution frequencies.INT4 NasDynDampModalTbl ID of Function defining the Modal Damping Table.Property Description
   API-2033
INT4 NasDynKeepModes Number of Modes used to limit response.
INT4 NasDynTranTimeSteps Number of Transient Time StepsINT4 NasDynTransOutInt Number for Transient Output Interval
BOOL NasDynDampModalMethod
INT4 NasDynRespSpectID of Function defining the Modal Frequency Correlation for 
Response Spectrum.
BOOL NasDynFzero Flag to write PARAM,FZEROREAL8 NasDynFzeroVal Value of PARAM, FZEROBOOL NasDynWmodal Flag to write PARAM,WMODALINT4 NasDynFreqID Value for Frequency ID(Obsolete)
 INT4 NasDynNoFreq[2] 
or V ARIANT vNasDynNoFreq*This property is obsolete and has been removed. It will not 
work in version 11.3 and above. Use Solution Frequency defi-
nition instead. Number of Frequency Intervals
(Obsolete) 
BOOL NasDynLogInterp[2] orV ARIANT vNasDynLogInterp*This property is obsolete and has been removed. It will not 
work in version 11.3 and above. Use Solution Frequency defi-nition instead. Flag to u se Logarithmic Interpolation
(Obsolete)
 INT4 NasDynFreqType[2] 
or V ARIANT vNasDynFreqType*This property is obsolete and has been removed. It will not 
work in version 11.3 and above. Use Solution Frequency defi-
nition instead. Input type for definition of Solution Frequen-cies
(Obsolete)
 REAL8 NasDynMinFreq[2] or 
V ARIANT vNasDynFreqType*This property is obsolete and has been removed. It will not 
work in version 11.3 and above. Use Solution Frequency defi-
nition instead. Min of frequency range for solution frequen-cies.
(Obsolete)
REAL8 NasDynMaxFreq[2] or
V ARIANT vNasDynMaxFreq*This property is obsolete and has been removed. It will not 
work in version 11.3 and above. Use Solution Frequency defi-
nition instead. Max of frequen cy range for solution frequen-
cies.
(Obsolete)
REAL8 NasDynSpreadCluster[2] or
V ARIANT vNasDynSpreadCluster *This property is obsolete and has been removed. It will not 
work in version 11.3 and above. Use Solution Frequency defi-
nition instead. Value defining frequency spread around modes. 
NASTRAN Modal XY Plot Options
BOOL NasModeXYOnFlag indicating NASTRAN Modal XY Plot Options have been 
defined.Property Description
 API-2034  
BOOL NasModeXYRequest[0..4]
orV ARIANT vNasModeXYRequestFlags selecting types of output  for XY plotting. Options: 
[0]=Modal Participation Factor s, [1]=Modal Effective Mass, 
[2]=Modal Effective Weight, [3]=Modal Effective Mass Frac-
tion, [4]=Summary
INT4 NasModeXYRefNode ID of Reference NodeNASTRAN Random OUTPUT2 Options
BOOL NasRandomOnFlag indicating NASTRAN Random Output2 options have 
been defined.
INT4 NasRandomRequest[0..1]
or
V ARIANT vNasRandomRequestOutput requests for Output2: [0 ]=Nodal Output, [1]=Elemental 
Output. 0=None, 1=Power Spectral Density Functions, 
2=Autocorrelation Functions, 3= All, 4=Root Mean Square, 
BOOL NasModeXYRefNode Flag indicatin g output of summary data only.
NASTRAN Random XY Plot Options
BOOL NasRandXYOnFlag indicating NASTRAN Random XY Plot Options have 
been defined.
BOOL NasRandXYRequest[48]
or
V ARIANT vNasRandXYRequestFlags selecting nodal and elemental output for XY plotting.
BOOL NasRandXYSummary Flag indicatin g output of summary data only.
BOOL NasRandXYPsdf Flag requesting PSDF XY output.BOOL NasRandXYAuto Flag requesting Autocorrelation XY output.INT4 NasRandXYNodeGroup ID of group containing node IDs for XY plot output.INT4 NasRandXYElemGroup ID of group containing element IDs for XY plot output.NASTRAN Power Spectral Density Factors
BOOL NasRandCorrOnFlag indicating Autocorrelatio n Function Time Lag options 
have been defined. NasRandXYOn or NasRandomOn Flag must also be set to True for this Flag to have any effect.
INT4 NasRandCorrLagInterval Number of Lag Intervals
REAL8 NasRandCorrLagStart Value for Starting LagREAL8 NasRandCorrLagMax Value for Max LagNASTRAN Response Spectrum Generation
BOOL NasGenSpecOnFlag indicating NASTRAN Resp onse Spectrum Generation 
Options have been specifiedProperty Description
   API-2035
BOOL NasGenSpecRequest[18]
or
V ARIANT vNasGenSpecRequestFlags selecting spectrum generation for displacement, velocity 
and acceleration DOF.
BOOL NasGenSpecAbsolute Flag in dicating absolute or relative. 
INT4 NasGenSpecNodeGroup ID of group cont aining node IDs for spectrum generation.
NASTRAN Response Spectrum Application
BOOL NasAppSpecOnFlag indicating NASTRAN Respon se Spectrum Application 
Options have been specified.
INT4 NasAppSpecType Spectrum type.INT4 NasAppSpecFunctio n Spectrum function ID.
REAL8 NasAppSpecScale Scale fact or to apply to spectrum.
INT4 NasAppSpecMethodModal combination method: 0=ABS, 1=SRSS, 2=NRL, 
3=NRLO.
REAL8 NasAppSpecClose Modal combination closeness.INT4 NasAppSpecSuport ID of constraint set to be used as a Base/SUPORT.INT4 NasAppSpecDamp Function ID to be used for modal damping.
NASTRAN Optimization Options
BOOL NasOptimOnFlag indicating NASTRAN Optimiz ation Options have been 
specified.
BOOL NasOptimIsTopologyFlag indicating Topology optimiz ation (True) or Design opti-
mization (False)
INT4 NasOptimAnalysisTypeSets analysis type for design op timization. 1 = Linear Statics, 2 
= Normal Modes/Eigenvalue
BOOL NasOptimTrackModesEnables mode shape tracking fo r normal modes design optimi-
zation
INT4 NasOptimGoalDesign objective. Use enum zOptGoal:
User-defined goal = FOG_DRESP(0)
Weight = FOG_WEIGHT(1)V olume = FOG_VOLUME(2)
Compliance = FOG_COMPLIANCE(3)
INT4 NasOptimCycles Cycles value (Max number of design cycles)
BOOL NasOptimMinDesobjFlag to use Minimize Design Objective (True) or Maximum 
(False)
INT4 NasOptimDrespDesign objective response ID if NasOptimGoal = 0 
(FOG_DRESP)Property Description
 API-2036  
BOOL NasOptimInterval Flag to use “1..Interval” option (True) or not (False)
INT4 NasOptimIntervalVal Value for optimization output interval
BOOL NasOptimEchoFlag to Echo a punch file of th e optimized mode (True) or not 
Echo (False). This cannot be accessed with the GUI.
BOOL NasOptimMCDelayFlag to use Delay until cycle and specified value for manufac-
turing constraints
INT4 NasOptimMCDelayVal First design cy cle to apply manufacturing constraints
NASTRAN GEOMCHECK OptionsBOOL NasGCheckOn Flag indicating Geomtery checking is specified.
BOOL NasGCheckNone Flag to  write GEOMCHECK, NONE
BOOL NasGCheckTest[21]
or
V ARIANT vNasGCheckTestFlag indicating type of Ge omtery checking specified.
[0]=Q4_SKEW, [1]=Q4_TAPER , [2]=Q4_WARP, [3]=Q4_I-
AMIN, [4]=Q4_IAMAX, [5]= T3_SKEW, [6]=T3_IAMAX, 
[7]=TET_AR, [8]=TET_EPLR,  [9]=TET_DETJ, [10]=TET_-
DETG, [11]=HEX_AR, [12]=HEX_EPLR, [13]=HEX_DETJ, 
[14]=HEX_WARP, [15]=PEN_AR, [16]=PEN_EPLR, [17]=PEN_DETJ, [18]=PEN_WARP, [19]=BEAM_OFF, 
[20]=BAR_OFF. 
Used in conjunction with NasGCheckTol and NasGC-heckMsg.
BOOL NasGCheckTest2[3]
or
V ARIANT vNasGCheckTest2Flag indicating type of Ge omtery checking specified 
[0]=PYR_AR, [1]=PYR_EPLR, [2]=PYR_WARP, 
[3]=PYR_DETJ. Used in conj unction with NasGCheckTol2 
and NasGCheckMsg2.
REAL8 NasGCheckTol[21]
or
V ARIANT vNasGCheckTolNumber indicating toleran ce value for each GEOMCHEC. 
Used in conjunction w ith NasGCheckTest and 
NasGCheckMsg.
REAL8 NasGCheckTol2[3]
or
V ARIANT vNasGCheckTol2Number indicating tolerance value for each GEOMCHECK. 
Used in conjunction with NasGCheckTest2 and 
NasGCheckMsg2.
INT4 NasGCheckMsg[21]
orV ARIANT vNasGCheckMsg0=Fatal, 1=Inform, 2=Warn. Used in conjunction with
NasGCheckTest and NasGCheckTol.
INT4 NasGCheckMsg2[3]
or
V ARIANT vNasGCheckMsg20=Fatal, 1=Inform, 2=Warn. Used in conjunction with 
NasGCheckTest2 and NasGCheckTol2.
BOOL NasGCheckSummary Flag to re quest Geomtery Check summary.
INT4 NasGCheckMsgLimit Number in dicating max number of messagesProperty Description
   API-2037
NASTRAN MODELCHECK Options
BOOL NasMCheckOnFlag indicating NASTRAN Model Check options have been 
specified.
BOOL NasMCheckWtDOFSet[6]
or
V ARIANT vNasMCheckWtDOFSetFlag indicating selected Model Checks [0]=G, [1]=N, 
[2]=N+AUTOSPC, [3]=F, [4]=A [5]=V
BOOL NasMCheckWtCG Flag to select CGI option. 
INT4 NasMCheckWtRefNode ID of Model Check Ref Node. INT4 NasMCheckWtUnits Numb er indicating Units to be  used. 0=MASS, 1=WEIGHT
INT4 NasMCheckGrndRefNode ID of Ground Check Ref Node.BOOL NasMCheckGrndDOFSet[5]
or
V ARIANT vNasMCheck-
GrndDOFSetFlag indicating selected Ground Checks [0]=G, [1]=N, 
[2]=N+AUTOSPC, [3]=F, [4]=A.
REAL8 NasMCheckMaxStrnEn Number indicating Max Strain Energy.
BOOL NasMCheckDataRec Flag to use DATAREC. REAL8 NasMCheckDataTol Tolerance Number to print forces above. 
Mass and Damping Options (SOL 401)BOOL NasMsnlModalMassForm Mass matrix form ulation: 0=Default, 1=Lumped, 2=Coupled
NASTRAN Multi-Step Control Options (SOL 401)
BOOL NasMsnlCntOnFlag indicating Multi-Step Co ntrol Options for Multi-Step 
Structural have been defined for master case
NASTRAN Multi-Step Control Options (SOL 401) - General optionsBOOL NasMsnlCntSkipNLCNTL Flag to disa ble writing of the NLCNTL for master case
NASTRAN Multi-Step Control Options (SOL 401) - Time Step ControlBOOL NasMsnlCntAutotim Flag to use Auto Time Step (AUTOTIM) option
REAL8 NasMsnlCntDtinit Initial Time Step (DMINIT) valueREAL8 NasMsnlCntDtmin Min Time Step (DMIN) valueREAL8 NasMsnlCntDtmax Max Time Step (DMAX) value
BOOL NasMsnlCntDtsbcdt Flag to specify New (False) or  Modify (True) for Subcase 
Time Step (DTSBCDT)
REAL8 NasMsnlCntEqmfmin Equilibri um Min Factor (EQMFMIN) valueProperty Description
 API-2038  
REAL8 NasMsnlCntEqmfmx Equilibri um Max Factor (EQMFMAX) value
INT4 NasMsnlCntTsccr Specifies Time Step Method option: 0=Constant, 1=Adaptive, 
Truncation Error, 2=Adaptive, Maximum Creep Increment to 
Elastic Strain Ratio, 3=Adaptiv e, Maximum Creep Increment, 
12=Combination of 1 and 2, 13=Combination of 1 and 3, 23=Combination of 2 and 3, 123=Combination of 1, 2 and 3
BOOL NasMsnlCntTsceq Flag to use E quilibrium Iteration Stepping (TSCEQ)
BOOL NasMsnlCntLvar Flag to specify “0..Ramp” (False)  or “1..Step” (True) for Time 
Unassigned Loads (LV AR)
BOOL NasMsnlCntTvar Flag to specify “0..Ramp” (False)  or “1..Step” (True) for Time 
Unassigned Temp Loads (TV AR)
BOOL NasMsnlCntDtsbcdt Flag to activate stepping base d on UMAT supplied time incre-
ments (TSCUMAT)
REAL8 NasMsnlCntEqmfmin Minimum time step factor for UMAT stepping (UMFMIN) 
value
REAL8 NasMsnlCntEqmfmx Minimum time step factor for UMAT stepping (UMFMX) 
value
NASTRAN Multi-Step Control Options (SOL 401) - Other OptionsBOOL NasMsnlCntPlastic Flag to en able Include Plasticity option
BOOL NasMsnlCntCreep Flag to enable Include Creep optionNASTRAN Multi-Step Control Options (SOL 401) - Case - Solution and ConvergenceSolution and Convergence - Solution Parameters
INT4 NasMsnlCntLOADOFFDisable Mechanical Loads (LOADOFF) option:
0=No Loads Turned Off1=Body Loads Turned Off
2=Boundary Loads Turned Off
3=Both Boundary and Body Loads Turned Off
INT4 NasMsnlCntSolverSpecifies Solver (SOLVER) option: 0=SPARSE, 1=PARDISO, 
2=MUMPS, 3=ELEMITER
INT4 NasMsnlCntRFV ARSpecifies Rot. Load Inertia Scaling (RFV AR) option:
0=Scale Angular Veloc ity and Acceleration
1=Scale Force
BOOL NasMsnlCntINACCNFlag to use Compute Initial Acceleration in Dynamics 
(INACCN)
BOOL NasMsnlCntINERTIA Flag to use Enable Inertia in Dynamics (INERTIA)
BOOL NasMsnlCntMsglvl Flag to us e Thermal Strain Loading (TSCEQ)Property Description
   API-2039
BOOL NasMsnlCntThrmst Flag to use Diagnostic Level (MSGLVL)
Solution and Convergence - Stiffness Parameters
INT4 NasMsnlCntKupdate0=Auto Stiffness Update, 1=Fu ll Newton-Raphson, 2=Quasi 
Newton-Raphson
INT4 NasMsnlCntQuasiNewtonIterQuasi Newton-Rhapson Iterations. Must be a value greater 
than or equal to 2. Only used  when NasMsnlCntKupdate is set 
to 2=Quasi Newton-Raphson
INT4 NasMsnlCntStfoptn1=Elastic Stiffness Matrix, 2=Tangent Stiffness Matrix, 
3=Elastic/Tangent Stiffness Matrix
BOOL NasMsnlCntFollowk Flag to use Follow Stiffness (FOLLOWK)
BOOL NasMsnlCntSpink Flag to  use Spin Softening (SPINK)
BOOL NasMsnlCntStressk Flag to use Stress Stiffening (STRESSK)BOOL NasMsnlCntTstepk Flag to use Follow Stiffness (TSTEPK)BOOL NasMsnlCntMSTAB Flag to use Enable  Stiffness Matrix Stabilization (MSTAB)
REAL8 NasMsnlCntMSFAC Value for Matrix Stabilization Factor (MSFAC) parameter.
Solution and Convergence - Convergence Parameters
V ARIENT vNasMsnlCntConv_flagsFlags to use convergence option and specified value:
[0]=Displacement (EPSU)
[1]=Load (EPSP)
[2]=Work (EPSW)
V ARIENT vNasMsnlCntConv_valueValues for use corresponding convergence option
[0]=Displacement (EPSU)
[1]=Load (EPSP)
[2]=Work (EPSW)
INT4 NasMsnlCntMaxbis Ma x Bisection (MAXBIS) value
INT4 NasMsnlCntMaxdiv Max Divergences (MAXDIV) valueINT4 NasMsnlCntMaxiter Max Iterations/Step (MAXITER) valuesINT4 NasMsnlCntMaxqn Max Quasi Newton Vectors (MAXQN)
INT4 NasMsnlCntNORMPSpecifies Norm Criteria for Fo rce (NORMP) option: 0=Norm 
1 Criteria, 1.=Norm 2 Criteria, 2.=Norm Infinity Criteria
INT4 NasMsnlCntNORMUSpecifies Norm Criteria for Displacement (NORMU) option: 
0=Norm 1 Criteria, 1.=Norm 2 Cr iteria, 2.=Norm Infinity Cri-
teria
REAL8 NasMsnlCntREFP Value for Forc e Error Function Denominator (REFP)Property Description
 API-2040  
REAL8 NasMsnlCntREFU Value for Forc e Error Function Denominator (REFU)
Solution and Convergence - Time Integration
INT4 NasMsnlCntTINTMTHSpecifies Integration Scheme. 1=Newmark, 2=Hilber-Hughes-
Taylor, 3=Generalized alpha me thod, 4=Modified generalized 
alpha method. 
REAL8 NasMsnlCntBETA Value for BE TA time integration parameter.
REAL8 NasMsnlCntGAMA Value for GAMA time integration parameter.REAL8 NasMsnlCntALFA Value for AL FA time integration parameter.
REAL NasMsnlCntTETA Value for TETA time integration parameter.REAL NasMsnlCntRHOINF Value for RHOINF time integration parameter.NASTRAN Multi-Step Control Options (SOL 401) - Contact/Bolt PreloadContact/Bolt Preload - Contact
INT4 NasMsnlCntCntmdiv Num Diverg ence for Bisection (CNTMDIV) value
REAL8 NasMsnlCntFsymtol Frict Threshold (FSYMTOL) value
INT4 NasMsnlCntKsymUnsymmetric Matrix option (KSYM) option:0=AUTO, 
1=SYM, 2=UNSYM
REAL8 NasMsnlCntKsymtol Symmetrizing Tol (KSYMTOL) value
INT4 NasMsnlCntMsglvlcContact Diagnostics (MSGLVLC) option: 0=None, 1=Conver-
gence, 2=Convergence and Contact Pair
INT4 NasMsnlCntUsolverUnsymmetric Solver (USOLVER) option: 0=HYBRID, 
1=SPARSE, 2=PARDISO, 3=MUMPS
Contact/Bolt Preload - Bolt/PreloadREAL8 NasMsnlCntEpsbolt Nonzero Prel oad Convergence Tol (EPSBOLT) value
REAL8 NasMsnlCntZerbolt Zero Preload Tol (ZERBOLT) valueINT4 NasMsnlCntItrbolt Max Iteratio ns for Convergence (ITRBOLT) value
REAL8 NasMsnlCntMisfblt Bolt Strain Limit (MISFBLT) value
INT4 NasMsnlCntMsglvlbDiagnostics (MSGLVLB) option: 0=Summary at Conver-
gence, 1=Summary Each Iterat ion, 2=Summary and Load Tol 
Each Iteration
NASTRAN Multi-Step Control Options (SOL 401) - Creep OptionsREAL8 NasMsnlCntCrce rat Max Creep Ratio (CRCERAT) value
REAL8 NasMsnlCntCrcinc Max Creep Inc (CRCINC) valueProperty Description
   API-2041
REAL8 NasMsnlCntCricoff Creep Strain Inc (CRICOFF) value
REAL8 NasMsnlCntCrinfac Integration Factor (CRINFAC) valueREAL8 NasMsnlCntCrmfmn Min Step Factor (CRMFMN) valueREAL8 NasMsnlCntCrmfmx Max St ep Factor (CRMFMX) value
REAL8 NasMsnlCntCrteabs Max Tr uncation Error (CRTEABS) value
REAL8 NasMsnlCntdCrteco Time Step for Next Truncation Step (CRTECO) valueREAL8 NasMsnlCntCrterel Max Relativ e Truncation Error (CRTEREL) value
NASTRAN Multi-Step Global Control Options - Global Parameters (SOL 402)
BOOL NasMsNLKGlobalOFlag indicating Multi-Step Glob al Control Options for Multi-
Step Nonlinear Kinematic have been defined
INT4 NasMsNLKGlobalRESOSpecifies Solver (RESO) option: 0=Auto, 1=Skyline, 2=Sparse, 
3=Parallel
INT4 NasMsNLKGlobalSTRMEASSpecifies Stress-Strain Measure for Plastic Matl. (STRMEAS) 
option: 
0=Green Strain, PK2 Stress1=Log Strain, Cauchy Stress
2=Biot Strain, Biot Stress
3=Log Strain, Kirchhoff Stress
INT4 NasMsNLKGlobalSTROUTSpecifies Stress-Strain Measure for Output (STROUT) option: 
0=Green Strain, PK2 Stress
1=Log Strain, Cauchy Stress
2=Biot Strain, Biot Stress3=Log Strain, Kirchhoff Stress
INT4 NasMsNLKGlobalSTRCONVSpecifies Stress-Strain Conversion Method (STRCONV) 
option: 
0=Exact Method1=Standard Method
INT4 NasMsNLKGlobalIREFSpecifies Computation (IREF) option:
0=No initial static or st eady-state computation
1=Initial static computation only2=Steady-state computation only
3=Initial Static and steady-state computation
BOOL NasMsNLKGlobalINLY Flag to us e Unsymmetric Solver (INLY) option
NASTRAN Multi-Step Global Control Options - Advanced Parameters (SOL 402)REAL8 
NasMsNLKGlobalPRECPIVOThreshold for Zero Pivots (PRECPIVO) value
INT4 NasMsNLKGlobalNKINE Modes to Save as Output (NKINE)Property Description
 API-2042  
INT4
NasMsNLKGlobalMODEVERSSpecifies Version for Param. Defaults (MODEVERS) option: 
0=Default, 1=2019.1, 2=2019.2
NASTRAN Multi-Step Global Control Options - Restart Parameters (SOL 401 & SOL 402)BOOL NasMsNLKGlobalRSTGEN Flag to use Save Restart Data (RSTGEN) optionINT4 NasMsNLKGlobalRSTUNIT Restart File Unit Number (RSTUNIT)INT4 NasMsNLKGlobalRSTFROM Sub case to Restart From (RSTFROM)
INT4 NasMsNLKGlobalEXEFROM Subca se to Execute From (EXEFROM)
BOOL NasMsNLKGlobalMDLV ALFlag to use Disable Model Va lidation for Restart Run (MDL-
V AL) option
NASTRAN Multi-Step Control Options (SOL 402)
BOOL NasMsnlCnt2OnFlag indicating Multi-Step Co ntrol Options for Multi-Step 
Nonlinear Kinematic have been defined
NASTRAN Multi-Step Control Options (SOL 402) - General optionsBOOL NasMsnlCnt2SkipNLCNTL2 Flag to disa ble writing of the NLCNTL2 for this case
NASTRAN Multi-Step Control Options (SOL 402) - Time StepBOOL  NasMsnlkCnt2CIBL
orBOOL NasMsnlkCnt2AUTOTIMFlag to use Auto Time Stepping (CIBL) option (version 12), 
Auto Time Stepping (AUTOTIM) option (2019.1 and above)
REAL8 NasMsnlkCnt2DTI0
or
REAL8 NasMsnlkCnt2DTINITFirst Time Step (DTI0) value (version 12), First Time Step 
(DTINIT) value (2019.1 and above)
REAL8 NasMsnlkCnt2HMIN
or
REAL8 NasMsnlkCnt2DTMINMinimum Time Step (HMIN) value (version 12), Minimum 
Time Step (DTMIN) value (2019.1 and above)
REAL8 NasMsnlkCnt2HMAX
orREAL8 NasMsnlkCnt2DTMAXMaximum Time Step (HMAX) value (version 12), Maximum 
Time Step (DTMAX) value (2019.1 and above)
REAL8 NasMsnlkCnt2RUP
or
REAL8 NasMsnlkCnt2EQMFMXMaximum Increase Ratio (RUP) va lue (version 12), Maximum 
Increase Ratio (EQMFMX) value (2019.1 and above)
REAL8 NasMsnlkCnt2RDOW
or
REAL8 NasMsnlkCnt2EQMFMINMaximum Decrease Ratio (RDOW) value (version 12), Maxi-
mum Decrease Ratio (EQMFMIN ) value (2019.1 and above)
INT4 NasMsnlkCnt2ITEREF Number of Iterations (ITEREF) valueProperty Description
   API-2043
INT4 NasMsnlkCnt2RJPNSpecifies Negative Pivot Time Step Rejection (RJPN) option:
0=Never
1=Last Iteration Only
2=Print State At Last Iteration3=Always
BOOL NasMsnlkCnt2RJPZ Zero Pivot Ti me Step Rejection (RJPZ) value
BOOL NasMsnlkCnt2TSDYN Integrati on Error Control (TSDYN) value
BOOL NasMsnlkCnt2ERCD Flag to use Activate Time Stepping Based on Disp/Temp Error
REAL8 NasMsnlkCnt2PRED Value fo r Allowable Change/Step (PRED)
NASTRAN Multi-Step Control Options (SOL 402) - Viscous Material OptionsBOOL NasMsnlkCnt2TSVSC Flag to use In tegration Error Control (TSVSC) option
REAL8 NasMsnlkCnt2VSCOTE Error Threshold (VSCOTE)
INT4 NasMsnlkCnt2VSCOSN Min Stress Factor (VSCOSN)NASTRAN Multi-Step Control Options (SOL 402) - Analysis ControlREAL8 NasMsnlkCnt2DISLIM Maximum Displacement (DISLIM) value
REAL8 NasMsnlkCnt2ROTLIM Maxi mum Rotation (ROTLIM) value
REAL8 NasMsnlkCnt2DEFLIM Maximum  Deformation (DEFLIM) value
BOOL NasMsnlkCnt2LV ARFlag to specify “0..Ramp” (False)  or “1..Step” (True) for Time 
Unassigned Loads (LV AR)
BOOL NasMsnlkCnt2TV ARFlag to specify “0..Ramp” (False)  or “1..Step” (True) for Time 
Unassigned Temp Loads (TV AR)
BOOL NasMsnlkCnt2DIPR Flag to use Predict Displacement (DIPR) option
BOOL NasMsnlkCnt2NORM Flag to use Force Normalization (NORM) option
BOOL NasMsnlkCnt2MATSYMFlag to use Unsymmetrical Matrices for Complex Modes 
(MATSYM)
BOOLNasMsnlkCnt2INERTIA Flag to use Enable Inertia in Dynamics (INERTIA)
BOOLNasMsnlkCnt2IAR0 Flag to use Save Data at Beginning of Computation (IAR0)NASTRAN Multi-Step Control Options (SOL 402) - Plasticity and Creep ControlBOOL NasMsnlkCnt2PLASTIC Flag to  use Enable Plasticity option
BOOL NasMsnlkCnt2CREEP Flag to use Enable Creep option
REAL8 NasMsnlkCnt2CRINF AC Creep Integration Factor (CRINFAC) value
NASTRAN Multi-Step Control Options (SOL 402) - Internal RestartProperty Description
 API-2044  
INT4 NasMsnlkCnt2RSUBSpecifies if the Restart (RSUB) should be enabled and the 
value to use for Restart Subcase. If value is set to 0, the Restart 
(RSUB) option will be disabled. If value is set to a value above 
0, the Restart (RSUB) option will be enabled and the value 
specified will be used as th e value for Restart Subcase.
NASTRAN Multi-Step Control Options (SOL 402) - Solution and ConvergenceSolution and Convergence - Analysis OptionsREAL8 NasMsnlkCnt2STAB Stabilization Factor (STAB) valueREAL8 NasMsnlkCnt2MADI Minimum Disp Variation (MADI) value
Solution and Convergence - Equilibrium and ConvergenceINT4 NasMsnlkCnt2ILNS Line Search (ILNS) valueREAL8 NasMsnlkCnt2PRLN Line Search  Convergence Tol (PRLN) value
REAL8 NasMsnlkCnt2AMIN Min Line Search Factor (AMIN) value
REAL8 NasMsnlkCnt2AMAX Max Line Sear ch Convergence Force (AMAX) value
INT4 NasMsnlkCnt2ITMA Max Iter (ITMA) valueREAL8 NasMsnlkCnt2PRCR Rela tive Force Tol (PRCR) value
REAL8 NasMsnlkCnt2REFP Relative Force (REFP) valueREAL8 NasMsnlkCnt2PRCQ Relativ e Disp Force (PRCQ) value
REAL8 NasMsnlkCnt2REFU Refe rence Disp (REFU) value
REAL8 NasMsnlkCnt2PRCE Rel Energy Tol (PRCE) value
REAL8 NasMsnlkCnt2REFE Refe rence Energy (REFE) value
INT4 NasMsnlkCnt2IT1K Stiffness Update Param 1 (IT1K) valueINT4 NasMsnlkCnt2IT2K Stiffness Update Param 2 (IT2K) valueINT4 NasMsnlkCnt2IT3K Stiffness Update Param 3 (IT3K) value
INT4 NasMsnlkCnt2PLASSpecifies First Iteration Strategy (PLAS) option:
-1=Elastic tangent matrix, plastic stress variation
-2=Elastic tangent matrix, elastic stress variation
-3=Plastic tangent matrix, elastic stress variation1=Plastic tangent matrix, plastic stress variation
INT4 NasMsnlkCnt2OTRESpecifies Rigid Body Motion (OTRE) option:
0=Disable Convergence
1=Enable based on PRCE, PRCQ, and PRCR criteria2=Enable based on PRCE , PRCQ, PRCR, and REFP
Solution and Convergence - Time IntegrationProperty Description
   API-2045
INT4 NasMsnlkCnt2IMPL
orINT4 NasMsnlkCnt2TINTMTHSpecifies Integration Scheme (TINTMTH) option (2019.1 and 
above):
1=Newmark
2=Hilber-Hughes-Taylor3=Generalized Midpoint
4=Generalized Alpha
Specifies Integration Scheme (IMPL) option:
1=NewMark implicit predictor-co rrector, 2=Newmark implicit 
predictor-corrector with auto matic time stepping, 21=Hilber-
Hughes-Taylor (HHT) implicit predictor-corrector scheme,
22=Hilber-Hughes-Tay lor (HHT) implicit predictor-corrector 
with automatic time stepping , 31=Generalized midpoint, 
32=Generalized midpoint w ith automatic time stepping, 
61=Generalized Alpha, 62=Generalized Alpha with automatic 
time stepping
REAL8 NasMsnlkCnt2BETA Param1 (BETA) valueREAL8 NasMsnlkCnt2GAMA Param2 (GAMA) valueREAL8 NasMsnlkCnt2ALFA HHT Scheme Param (ALFA) valueREAL8 NasMsnlkCnt2TETA Generalized Scheme Param (TETA) valueREAL8 NasMsnlkCnt2P RCO Intg Control Pa ram 1 (PRCO) value
REAL8 NasMsnlkCnt2HP RCO Intg Control Para m 2 (HPRCO) value
Solution and Convergence - ContactREAL8 NasMsnlkCnt2RELC Value for Relaxation Force (RELC)
REAL8 NasMsnlkCnt2DCON Value for Characteristic Length (DCON)
REAL8 NasMsnlkCnt2PRCS  Value for Ing Regula rization Factor (PRCS)
REAL8 NasMsnlkCnt2PRCF Va lue for Threshold for Cont act Force Variation (PRCF)
Solution and Convergence - DiagnosticINT4 NasMsnlkCnt2IMPG Print Frequency (IMPG) valueINT4 NasMsnlkCnt2IMPR Max Residual Printout (IMPR) valueINT4 NasMsnlkCnt2IMPV Max Pivots (IMPV) value
NASTRAN Multi-Step Time Steps (SOL 401 and SOL 402)
BOOL NasMsnlTSOnFlag indicating Multi-Step Time Steps for Multi-Step Struc-
tural or Multi-Step Nonlinear Ki nematic have been defined for 
subcase
BOOL NasMsnlTSSkipTSTEP Flag to disa ble writing of the TSTEP for this caseProperty Description
 API-2046  
REAL8 NasMsnlTSEndTime[0..9]Value in End Time Column of  row specified by zero-based 
index value in Time Steps dialog box. 0=Row 1, 1=Row 2, etc
INT4 NasMsnlTSNumIncre-
ments[0..9]Value in Number of Increments  Column of row specified by 
zero-based index value in Time Steps dialog box. 0=Row 1, 
1=Row 2, etc.
INT4 NasMsnlTSOutputFreq[0..9]Value in Output Frequency Column of row specified by zero-
based index value in Time Step s dialog box. 0=Row 1, 1=Row 
2, etc: 0=Requested Increments, 1=Solution Step End Time, 
2=All Times, 3=Coupling Times, 4=Skip Factor 
INT4 NasMsnlTSSkipFactor[0..9]Value in Number of Increments  Column of row specified by 
zero-based index value in Time Steps dialog box. 0=Row 1, 
1=Row 2, etc. Only used when NasMsnlTSOutputFreq=4
NASTRAN NXSTRAT Options
BOOL NasNXStratOnFlag indicating NASTRAN Advanced Nonlinear options have 
been defined.
INT4 NasNXStratSolver Solver type 0=Direct Sparse 1=Multigrid 
INT4 NasNXStratAuto Auto IncrementationBOOL NasNXStratNposit Contin ue when not positive definite
BOOL NasNXStratMasstyp Mass Matrix TypeINT4 NasNXStratTint Integration order thru Shell thickBOOL NasNXStratMstab Matrix StabilizationREAL8 NasNXStratMsfac Matrix Stabilization FactorREAL8 NasNXStratDtdelay Element Death Time delayREAL8 NasNXStratSdofang Shell DOF AngleBOOL NasNXStratUpform u/p formulationBOOL NasNXStratDispopt Prescribed displacement optionBOOL NasNXStratLoadopt Applied Load optionREAL8 NasNXStratAlpha Newmark Time Integ alpha coefficientREAL8 NasNXStratDelta Newmark Time Integ delta coefficientINT4 NasNXStratItemax Max iter for multigrid solver
REAL8 NasNXStratEpsia Convergence Tolerance epsiaREAL8 NasNXStratEpsib Convergence Tolerance epsibREAL8 NasNXStratEpsii Convergence Tolerance epsiiProperty Description
   API-2047
INT4 NasNXStratLsearch Line Search Flag
INT4 NasNXStratMaxite Max Iter per time stepINT4 NasNXStratConvcri Convergence CriteriaINT4 NasNXStratPlasAlg Plasticity AlgorithmREAL8 NasNXStratEtol Re lative Energy Tolerance
REAL8 NasNXStratRtol Relative Force ToleranceREAL8 NasNXStratRnorm Reference ForceREAL8 NasNXStratRmnorm Reference MomentREAL8 NasNXStratRctol Relative Contact Force ToleranceREAL8 NasNXStratDtol Relative Displacement ToleranceREAL8 NasNXStratDnorm Reference TranslationREAL8 NasNXStratDmnorm Reference RotationREAL8 NasNXStratStol Line Search Convergence ToleranceREAL8 NasNXStratRconsm Reference Contact ForceREAL8 NasNXStratEnlsth Line Search Energy ThresholdINT4 NasNXStratAtssubd Auto Time Step Small Step SizeREAL8 NasNXStratAtsmxdt Auto Time Step Largest Step SizeINT4 NasNXStratAtsnext Auto Time Step Size FlagREAL8 NasNXStratAtsdfac Divisio n Factor for Sub Increment
BOOL NasNXStratAtslows Low Speed Dynamics FlagREAL8 NasNXStratAtsdamp Low Speed Dynamics Damping Factor
INT4 NasNXStratLdcgrid Node ID for Prescribed DisplacementINT4 NasNXStratLdcdof DOF for Prescribed DisplacementREAL8 NasNXStratLdcdisp Magnitude  of Prescribed Displacement
REAL8 NasNXStratLdcimax Displacement Convergence FactorREAL8 NasNXStratLdcdmax Max DisplacementBOOL NasNXStratLdccont Solution Termination after CriticalINT4 NasNXStratLdcsubd Ma x Arc Length Subdivisions
INT4 NasNXStratImpact Impact Control SchemeProperty Description
 API-2048  
INT4 NasNXStratNsupp Num Iterations for Pairing
BOOL NasNXStratModex Restart Flag - Obsolete, use NasNXStratModexNew
INT4 NasNXStratModexNewRestart Flag/Option - 0=Norm al, 1=Restart, 2=Recover 
Results 
REAL8 NasNXStratAtsmass Value for Auto Time Stepping Inertia FactorREAL8 NasNXStratTstart Restart Solution TimeINT4 NasNXStratIrint Frequency of Results in FileINT4 NasNXStratNsubgrp Number of SubgroupsBOOL NasNXStratElcv Conversion FlagINT4 NasNXStratEqrbar RBAR element optionINT4 NasNXStratEqrbe2 RBE2 element optionREAL8 NasNXStratSpringk Stiffness of RBAR/RBE2 springsREAL8 NasNXStratBeame Young’s modulus for RBAR/RBE2 elementsREAL8 NasNXStratBeama Effective cross section for RBAR/RBE2 elementsREAL8 NasNXStratRblcrit Critical Length for RBAR/RBE2 elementsINT4 NasNXStratXstep Time Step MethodINT4 NasNXStratXdtcal Critical time st ep recalculation every XDTCAL steps
REAL8 NasNXStratXdtfac Critical time step factorREAL8 NasNXStratXmscale Mass scale factorREAL8 NasNXStratXdtmin1 Min steps size to use mass scalingREAL8 NasNXStratXdtmin2 Max st eps size to use mass scaling
INT4 NasNXStratIcmode Incompa tible mode flag 0=off 1=on
BOOL NasNXStratBeamalgWhen True, Use NXN v8.5 Elas tic Beam Formulation option 
is enabled
INT4 NasNXStratUlform Larg e strain formulation used
INT4 NasNXStratTimeSteps[0..9] Number of StepsREAL8 NasNXStratTimeIncre-
ment[0..9]Time increment
INT4 NasNXStratSkipFactor[0..9] Output results every Nth step.
INT4 NasNXStratCstype Selects the type of contact segment to use.Property Description
   API-2049
BOOL NasNXStratElrescsFor NX Nastran Advanced Nonlinear solver, if True, results 
are in elemental coordinate syst em, if False, in the Material 
coordinate system
REAL8 NasNXStratMaxDisp Limit for max incr emental displacement/equilibrium iteration
INT4 NasNXStratBoltstp Number of step s for applying bolt pre-load force
BOOL NasNXStratCvssvalFlag to convert TABLES1 from en gineering stress strain to 
true stress strain.
BOOL NasNXStratRtalg Flag selecting the ri gid target method: 0=Current, 1=Old(v4)
BOOL NasNXStratTnslcfFlag allowing tensile consistent contact forces on quadratic 3D 
contact segments
REAL8 NasNXStratDrillkfMaximum Rotational Stiffness Fact or used when drilling stiff-
ness is zero
REAL8 NasNXStratLslower Value for Lower bound of line search.REAL8 NasNXStratLsupper Value for Upper bound of line search. 
 BOOL NasNXStratXtcurve Flag to exte nd TABLES1 by linear extrapolation
NASTRAN DDAM OptionsBOOL NasDdamOn Flag indicating Nastra n DDAM Options have been specified
BOOL NasDdamEnabled If True, DDAM analysis is enabledBOOL NasDdamIncludePath If True, full pa ths are specified in all filenames
BOOL NasDdamIsDDAMIf True, this is a DDAM analysis, otherwise it is a non-DDAM 
spectrum analysis
INT4 NasDdamUseBuiltInCoeff 0=Specify Co efficients, 1=External File, 2=Built-In
INT4 NasDdamEquationType 0=DDS-072, 1=NRL 1396INT4 NasDdamSurfaceShip 0=Surface, 1=SubmergedINT4 NasDdamEquipmentLocatio n 0=Deck, 1=Hull, 2=Shell
INT4 NasDdamElasticPlastic 0=Elastic, 1=Elastic-Plastic
INT4 NasDdamForeAftDirection F ore/Aft Axis (0=X, 1=Y , 2=Z)
INT4 NasDdamVerticalDirection Ve rtical Axis (0=X, 1=Y , 2=Z)
INT4 NasDdamDirectionSequenceNumber specifying sequence of axes to apply (X=1,Y=2,Z=3), 
so 132 means X th en Z, then Y
REAL8 NasDdamMassToWeight Mass to Weight conversion factorREAL8 NasDdamWeightCutoffPct Modal Mass Cutoff PercentageProperty Description
 API-2050  
REAL8 NasDdamGCutoff Minimum Acceleration in Gs
STRING NasDdamSpecCoeff-
File[260]Filename (and path) of file co ntaining spectrum coefficients 
(only used if NasD damUseBuiltInCoeff=1)
BOOL NasDdamCoeffOn[14]
or
V ARIANT vNasDdamCoeffOnFlags to turn on/off spec ified spectrum coefficients
REAL8 NasDdamCoeffVal[14]
or
V ARIANT vNasDdamCoeffValValues of specified spectrum coefficients.
REAL8 NasDdamForceConversion Value for Force Unit Conversion
REAL8 NasDdamAccelConversion Value  for Acceleration Unit Conversion
INT4 NasDdamSelModeMethodSpecifies Selection Method option:
0=None1=CUTOFF2=PERCENT
3=TOP
REAL8 NasDdamSelModeVal Specify value for Value in Mode Selection section
NASTRAN Rotor Dynamics Options
BOOL NasRotorOnFlag indicating Nastran Rotor Dynamics Options have been 
specified
BOOL NasRotorEnabled If True, Rotor Dynamics analysis is enabledBOOL NasRotorIncludePath If True, full paths are specified in all filenames
BOOL NasRotorSingleRotorIf True, this is a single rotor analys is of the full model, if False, 
multiple rotors must be sp ecified with rotor regions
BOOL NasRotorFixedRefSys True = Fixed Reference CSys, False = RotatingBOOL NasRotorAsyncResponse True = As ynchronous Response Calculations
BOOL NasRotorSteinerInertia True = Include Steiner Inertia TermsBOOL NasRotorForceExcitation True = Fo rce Excitation, False = Mass Unbalance
BOOL NasRotorDoCSV True = Create  comma separated output file
BOOL NasRotorDoGPF True = Create GPF output file
INT4 NasRotorInputUnitsSpeed Input Units 0=Rev/Min, 1=Cycle/Sec, 2=Hz, 3=Radi-
ans/Sec
INT4 NasRotorOutputUnits Output Units 0=Rev/Min, 1=Cycle/Sec, 2=Hz, 3=Radians/SecProperty Description
   API-2051
INT4 NasRotorPrintedOutputPrinted Output 0=None, 1=Ge neralized Matrices, 2=Eigen-
value Summary/Eigenvectors, 3=Both
INT4 NasRotorSpeedNumSteps Number of Steps in Rotor SpeedREAL8 NasRotorComplexModeOut-
putMode/Whirl Output (0.0=None, <0=All RPM, >0=Specified 
Speed)
REAL8 NasRotorWhirlThreshold Whirl Threshold
REAL8 NasRotorExcitationOrderExcitation Order (Default = 1.0, 0.0=Forward Whirl, 
2.0=Backward Whirl)
REAL8 NasRotorSpeedStart Rotor Speed Start ValueREAL8 NasRotorSpeedStep Rotor Speed Step SizeSTRING NasRotorModeSelec-
tion[60]String specifying IDs of modes for dynamic response
NASTRAN Static Aerodynamic Options
BOOL NasAeroOnFlag indicating NASTRAN Aerody namic Data Options have 
been defined.
INT4 NasAeroCsID Aerodynamic coordinate systemINT4 NasAeroRefCsID Reference coordinate systemREAL8 NasAeroRefLength Reference chord leng th (also used in Fl utter for Ref Length)
REAL8 NasAeroRefSpan Reference spanREAL8 NasAeroRefArea Reference wing area
INT4 NasAeroSymXYSymmetry flag for the aero coor dinate x-y plane. -1 = Symme-
try, 0 = No Symmetry, 1 = Anti Symmetry (also used in Flut-
ter)
INT4 NasAeroSymxzSymmetry flag for the aero coordinate z-x plane 1 = Symme-
try, 0 = No Symmetry, -1 = Anti Symmetry (also used in Flut-
ter)
BOOL NasAeroAeunit PARAM, AUNITS flagREAL8 NasAeroAeunitVal PARAM, AUNITS valAeroelastic Trim Case Options - NASTRAN SpecificBOOL NasCaeOn Flag indicating NASTRAN Trim Options have been defined.REAL8 NasCaeMachNumber Mach numberREAL8 NasCaeDynPressure Dynamic pressureBOOL NasCaeRigidTrim Flag to request a rigid trim analysisProperty Description
 API-2052  
BOOL NasCaeWrtieTrim Flag to enable writing of the TRIM for this case. 
NASTRAN Aerodynamic Flutter OptionsREAL8 NasAeroVelo Velocity for aerodynamic forceREAL8 NasAeroRefDens Reference densityINT4 NasAeroMkFuID Mach number/Reduced Frequency function.
REAL8 vNasAeroFreqKeep[2]Dynamic options: [0] sets PARAM, LFREQ and [1] sets 
PARAM, HFREQ
INT4 NasAeroModesKeep Dynamic options: Wh en non-zero, writes PARAM, LMODES
BOOL NasAerobPARAMfzero Dynamic optio ns: When True writes PARAM,FZERO
REAL8 NasAerodPARAMfzero Dynamic options: PARAM,FZERO valBOOL NasAeroDampMethod Dynamic optio ns: When True, writes PARAM,KDAMP
BOOL NasAerobOPPHIPA Dynamic options : When True, write s PARAM,OPPHIPA,1
Aerodynamic Flutter Case Options - NASTRAN SpecificBOOL NasCflOn Flag indicating NASTRAN Flutter Options have been defined.INT4 NasCflMethod Flutter analysis methodINT4 NasCflDenID Femap function defining density ratios INT4 NasCflMachFactID Femap function defining density ratiosINT4 NasCflRfreqFactID Femap fu nction defining density ratios
INT4 NasCflFliMethod Interpolation methodINT4 NasCflEig Number EignevaluesREAL8 NasCflEps ConvergenceBOOL NasCflWriteFlutter Flag to enable writing of the FLUTTER for this case. 
INT4 NasCflSdampID ID of Femap function defining the Modal Damping TableNASTRAN External Superelement Creation Options (Nastran SOL 101 and 103 Only)BOOL NasExtSEOutOn Enable creating of external superelementINT4 NasExtSEOutExtID External super element IDBOOL NasExtSEOutMatStiffness Store boundary stiffness matrixBOOL NasExtSEOutMatMass Store boundary mass matrixBOOL NasExtSEOutMatK4damp Store boundary structural damping matrixBOOL NasExtSEOutMatLoads Store loads matrixProperty Description
   API-2053
INT4 NasExtSEOutToExternal superelement outp ut location. 0=DMIGPCH, 
1=DMIGOP2, 2=MATOP4
INT4 NasExtSEOutUnitID Unit IDSTRING NasExtSEOutAssignTitle Title for filena me when writing to DMIGOP2 or MATOP4
BOOL NasExtSEOutOptGeom Store geometry
BOOL NasExtSEOutOptAsmbulkGenerate bulk entries related to superelement assembly pro-
cess
BOOL NasExtSEOutOptExtbulk Generate bulk  entries for external superelement
NASTRAN External Superelement Reference Options
BOOL NasBulkSecombWrite PARAM,SECOMB when writing super element refer-
ences
BOOL NasExecAllowDuplicateNo-
desAllow duplicate node IDs across super elements
REAL8 NasExecDuplicateTolerance Specify duplicate node tolerance
BOOL NasExecWriteSERefPath Write full path  for external super element references
MSC Nastran Contact Solver Parameters Options
BOOL NasMscCtOnFlag indicating MSC Nastran Contact Solver Parameters 
options have been defined.
BOOL NasMscCtEnableIf True, selected options in MSC Nastran Contact Solver 
Parameters will be used
INT4 NasMscCtMETHODSpecifies Contact Method (METHOD) option, 0=NODE-
SURF, 1=SEGSMALL, 2=SEGLARGE
REAL8 NasMscCtERROR Specify value for Touch Dist (ERROR)REAL8 NasMscCtBIAS Specify value for Cont  Tolerance (BIAS), use 0.9 for default
REAL8 NasMscCtSLDLMT Specify value for Max Slide Dist (SLDLMT)REAL8 NasMscCtSTKSLP Specify value for Max Slip Dist (STKSLP)BOOL NasMscCtNLGLUE If True, All Glue (NLGLUE) is enabledBOOL NasMscCtERRBAS If True, Error by Pair (ERRBAS) is enabled
BOOL NasMscCtBEAMB If True, Include 3D Beam (BEAMB) is enabledBOOL NasMscCtTHKOFF If True, Ignore Tole rance Thickness (THKOFF) is enabled
INT4 NasMscCtAUGMENTSpecifies the Augment Method (AUGMENT), 0=None, 
1=Linear-Constant, Quadratic-B ilinear, 2=Constant, 3=Bilin-
earProperty Description
 API-2054  
REAL8 NasMscCtAUGDIST Specify value for Aug Pen Dist (AUGDIST)
REAL8 NasMscCtPENALT Specify valu e for Augment PenFactor (PENALT)
REAL8 NasMscCtTPENALT Specify valu e for Stick Pen Fact (TPENALT)
REAL8 NasMscCtSFNPNLT Specify value for Normal Scale Factor (SFNPNLT)REAL8 NasMscCtSFTPNLT Specify value for Tangent Scale Factor (SFTPNLT)REAL8 NasMscCtDDULMT Specify value for Max DDU (DDULMT)BOOL NasMscCtTAUGMNT If True, Sticking Augment (TAUGMNT) is enabledBOOL NasMscCtLINCNT If True, Infinite simal Sliding (LINCNT) is enabled
INT4 NasMscCtFTYPESpecifies Friction (FTYPE) ty pe, 0=None, 6=Bilinear Cou-
lomb, 7=Bilinear Shear
REAL8 NasMscCtRVCNST Specify value for Bilin (RVCNST)BOOL NasMscCtSEGSYM If True, Non Symm etric Matrix (SEGSYM) is enabled
INT4 NasMscCtICSEPSpecifies Sep Control (ICSEP) op tion, 0=Nodal Force > Sepa-
ration Force, 1=Prevent Separation Until Next Increment, 
2=Prevent New Node Separation, 3=Both 1 and 2
INT4 NasMscCtIBSEPSpecifies Separation (IBSEP) option, 0=Force Based, 1=Abso-
lute Stress Based, 2=Absolute Intg  Pt Stress, 3=Relative Nodal 
Stress, 4=Relative Intg Pt Stress
INT4 NasMscCtMAXSEP Integer value for Max Sep (MAXSEP), use 9999 for default
REAL8 NasMscCtFNTOL Specify value for Sep Force/Stress (FNTOL)INT4 NasMscCtNODSEP Integer value for Skip Sep Check (NODSEP), use 2 for default
MSC Nastran Contact Solver Parameters Options - Cohesive Contact OptionsBOOL NasMscCtFGCFLG If True, Enable Co hesive Contact (FGCFLG) is enabled
REAL8 NasMscCtFGCNST Specify valu e for Normal Stiffness (FGCNST)
REAL8 NasMscCtFGCTST Specify valu e for Tangent Stiffness (FGCTST)
INT4 NasMscCtFGCNSTR ID of function for Normal Stress Function (FGCNSTR)
INT4 NasMscCtFGCTSTR ID of function fo r Tangent Stress Function (FGCTSTR)
INT4 NasMscCtFGCNSTI ID of function fo r Normal Stiffness Function (FGCNSTI)
INT4 NasMscCtFGCTSTI ID of function fo r Tangent Stiffness Function (FGCTSTI)
INT4 NasMscCtFGCRCEN ID of Reference NodeMSC NASTRAN Implicit Nonlinear (SOL 400) - Nonlinear Behavior OptionsProperty Description
   API-2055
BOOL NasNonlinBehaviorOnFlag indicating Nonlinear Beha vior Options for Implicit Non-
linear Analysis have been defined
BOOL NasNonlinBehaviorEnable Flag to  enable the Enable NLMOPTS option
Nonlinear Behavior Options - Nonlinear Properties
INT4 NasNonlinBehaviorPROPMAPSpecifies Mapping (PROPMAP) option:
-1=No mapping considered
0=Full integration elements when necessary1=Reduced integration elements when necessary
2=Full integration elem ents when possible
3=Reduced integration elements when possible
INT4 NasNonlinBehaviorPROPBEHSpecifies Behavior (PROPBEH) option:
0=1D
1=3D
2=PLST3=PSTR4=AXI
INT4 NasNonlinBehaviorIPRINTSpecifies Print Flag (IPRINT) option:
0=Default
1=Print2=Punch
3=Print and Punch
INT4 NasNonlinBehaviorDIRECT Specify value for Layer Direction (DIRECT)
REAL8 
NasNonlinBehaviorTHICKOPSpecify value for Thickness (THICKOP)
Nonlinear Behavior Options - Composite Options
INT4 NasNonlinBehaviorVCOORDSpecifies Output (VCOORD) option:
0=Use Original CSys
1=Use Ply CSys of bottom layer
2=Use Ply CSys of above layer
BOOL NasNonlinBehaviorCPROJ If True, X- axis Projection (CPROJ) is enabled
BOOL NasNonlinBehaviorTSHEAR If True, Parabolic  Shear Distribution (TSHEAR) is enabled
Nonlinear Behavior Options - Strain Formulations
INT4 NasNonlinBehaviorLRGSTRNSpecifies Large Strain (LRGSTRN) option:
-1=No Large Strain Formulation
0=Mean Normal Return
1=Hypoelasticity and additive pl asticity with mean normal 
return
2=Hyperelasticity and multipli cative plasticity with radial 
returnProperty Description
 API-2056  
INT4 NasNonlinBehaviorASSMSpecifies Assumed Strain (ASSM) option:
0=Default
1=Use assumed strain formulation
2=Do not use assumed strain formulation
Nonlinear Behavior Options - Element Deactivation
INT4 NasNonlinBehaviorV ALD1Specifies Rules (V ALD1) option:
-1=Default deactivation ru les are always ignored
0=Default deactivation ru les are always applied
1=Default deactivation rules are applied in a mechanical pass 
only
2=Default deactivation rules are applied in a thermal pass only
INT4 NasNonlinBehaviorV ALD2Specifies Diag. Output (V ALD2) option:
0=Summary of deactivated elements1=Detailed list of deactivated elements
2=Summary of deactivated and remaining elements
3=Detailed list of deactiva ted and remaining elements
Nonlinear Behavior Options - CreepBOOL NasNonlinBehaviorCreepOn If True, Enable  Creep Formulations (CREEP) is enabled
BOOL 
NasNonlinBehaviorCreepTypeSpecifies Creep Type:
True = Explicit Creep, False = Implicit Creep
INT4 NasNonlinBehaviorCreepExpSpecifies Explicit Creep option:
0=Maxwell Model Creep
1=Explicit Viscoplastic Creep
INT4 NasNonlinBehaviorCreepImpSpecifies Implicit Creep option:
0=Elastic Tangent1=Secant Tangent
2=Radial Return
MSC NASTRAN Implicit Nonlinear (SOL 400) - Automatic Contact Parameters
BOOL NasAutoCtOnFlag indicating Automatic Cont act Parameters for Implicit 
Nonlinear Analysis have been defined
BOOL NasAutoCtEnabled Flag to en able the Enable BCAUTOP option
Automatic Contact Parameters - Primary Parameters
INT4 NasAutoCtBodyValSpecifies Automatic Contact Body Type option:
0=Elements (ESET)
1=Elements as Seeds (SeedESet)
2=Nodes as Seeds (SeedGSet)3=Properties (PropSet)
INT4 NasAutoCtESET ID of Group for Elements (ESET)Property Description
   API-2057
INT4 NasAutoCtSeedESet ID of Grou p for Elements as Seeds (SeedESet)
INT4 NasAutoCtSeedGSet ID of Group for Nodes as Seeds (SeedGSet)INT4 NasAutoCtPropSet ID of Group for Properties (PropSet)
INT4 NasAutoCtRigidSet ID of Gr oup for Rigid Regions (RigidSet)
INT4 NasAutoCtCTYPESpecifies Type (CTYPE) option:
0=Touching
1=Permanent Glue
2=Step Glue3=General Glue
REAL8 NasAutoCtDISTANCE Specify value for Distance ToleranceAutomatic Contact Parameters - Auxiliary ParametersINT4 NasAutoCtConProp ID of Connection Property for Connection PropertyINT4 NasAutoCtRegion ID of Connection Region for Region PropertyAutomatic Contact Parameters - Secondary Parameters
BOOL NasAutoCt2DSpecifies options for Dimension (DIMENS):
True=2D, False=3D
BOOL NasAutoCtBEAMCNT If True, Consider  Beam Contact (BEAMCNT) is enabled
BOOL NasAutoCtBEAMCAP If True, Detection at Beam Free End (BEAMCAP) is enabledBOOL NasAutoCtEDGECNT If True, Consider Edge Contact (EDGECNT) is enabledBOOL NasAutoCtIGNTHK If True, Ignore Shell Thickness (IGNTHK) is enabled
BOOL NasAutoCtINISTF If True, Initial St ress Free Contact (INISTF) is enabled
BOOL NasAutoCtSelfCont If True, Self Contact (SelfCont) is enabledAutomatic Contact Parameters - Friction
INT4 NasAutoCtFTYPESpecifies Type (FTYPE) option:
0=No Friction
6=Bilinear Coulomb Friction7=Bilinear Shear Friction
BOOL NasAutoCtFRICFriction Option:
True = Value Coefficient, False = Table Coefficient
INT4 NasAutoCtFRICTABLE ID of Function for Table CoefficientREAL8 NasAutoCtFRICVal Specify value for Value CoefficientMSC NASTRAN Implicit Nonlinear (SOL 400) - Control ParametersProperty Description
 API-2058  
BOOL NasInlStepOptOnFlag indicating Control Parame ters for Implicit Nonlinear 
Analysis have been defined for the subcase
BOOL NasInlStepOptSkipNLSTEP Flag to di sable writing of NLSTEP for this subcase
INT4 NasInlStepOptID ID of NLSTEP for this subcaseControl Parameters - Step ParametersREAL8 NasInlStepOptTOTTIM Total Time (TOTTIM) value
INT4 NasInlStepOptCTRLDEFSpecifies Nonlinearity (CTRLDEF) option:
0=Default
1=Linear2=Mildly Nonlinear
3=Severely Nonlinear
Control Parameters - General ParametersINT4 NasInlStepOptMAXITER Max Iter ations/Increment (MAXITER) value
INT4 NasInlStepOptMINITER Min Iter ations/Increment (MINITER) value
INT4 NasInlStepOptMAXBIS Max Bisec tions for Step (MAXBIS) value
BOOL NasInlStepOptCREEP Flag to enable Include Creep (CREEP) optionControl Parameters - Analysis Parameter
INT4 NasInlStepOptLoadSteppingSpecifies Increment Type option:
0=Fixed
1=Adaptive2=Arc-Length
Control Parameters - Analysis Parameters - Fixed Time Stepping ParametersINT4 NasInlStepOptNINC Number of Increments (NINC) value
INT4 NasInlStepOptNO Outpu t Interval (NO) value
Control Parameters - Analysis Parameters - Adaptive Load Stepping ParametersREAL8 NasInlStepOptDTINITF Ini tial Fraction (DTINITF) value
REAL8 NasInlStepOptDTMINF Min  Fraction (DTMINF) value
REAL8 NasInlStepOptDTMAXF Max Fraction (DTMAXF) valueREAL8 NasInlStepOptSFACT Increase Factor (SFACT) valueINT4 NasInlStepOptADJUST Auto Skip Factor (ADJUST) valueINT4 NasInlStepOptMSTEP Dominant Period Resp. Steps (MSTEP) value
REAL8 NasInlStepOptRB Adaptive Time Step Bound (RB) valueProperty Description
   API-2059
INT4 NasInlStepOptNDESIR Desired It erations/Increments (NDESIR) value
INT4 NasInlStepOptNSMAX Max Increments (NSMAX) valueREAL8 NasInlStepOptUTOL Displacement Tolerance (UTOL) value
INT4 NasInlStepOptIDAMPSpecifies Static Damping (IDMAP) option:
0=No Added Damping
4=Time Step Control Using Damping
5=Damping-based Time Step Control with No Damping6=Add Damping when Minimum Time Step is Reached
REAL8 NasInlStepOptDAMP Damping Ratio (DAMP) value
INT4 NasInlStepOptINTOUTSpecifies Output Flag (INTOUT) option:
-1=Last Increment
0=Every Load Increment>0=Equally Spaced Intervals (val ue is used to specify value 
for Output Every Nth Step) 
Adaptive Load Stepping Parameters - Criteria
BOOL NasInlStepOptEnableCriteria Flag to enable the Enable User Criteria option
INT4 NasInlStepOptIPHYSSpecifies Physical Criteria (IPHYS) option:
-2=No Auto Physical Criteria; Continue When User Criteria 
Exceeded-1=Add Auto Physical Criteria;  Continue When User Criteria 
Exceeded
1=1..No Auto Physical Criteria; Stop When User Criteria Exceeded
2=2..Add Auto Physical Criteria; Stop When User Criteria 
Exceeded
INT4 NasInlStepOptLIMTARSpecifies Definition (LIMTAR) option:
0=Criteria as Limits
1=Criteria as Targets
REAL8 NasInlStepOptRSMALL Min. Ratio (RSMALL) valueREAL8 NasInlStepOptRBIG Max Ration (RBIG) valueProperty Description
 API-2060  
BOOL NasInlStepOptIncre-
ments[0..9]Flag in Status column of row specified by ze ro-based index 
value in list of Criteria. Wh en True, Criterion is enabled.
0=Elem. Strain
1=Elem. Plastic Strain2=Elem. Creep Strain
3=Elem. Normalized Creep Strain
4=Elem. Strain Energy5=Elem. Stress
6=Elem. Normalized Stress
7=Nodal Temperature8=Nodal Displacement
9=Nodal Rotation
INT4 NasInlStepOptGroupIDs[0..9]ID of existing Group in Group column of row specified by 
zero-based index value in list of  Criteria. For description of 
each row, See NasInlStepOptIncrements.
REAL8 NasInlStepOptYT1_i[0..9]Value in Y1 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT1_i[0..9]Value in M1 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See NasInlStepOptIncrements.
REAL8 NasInlStepOptYT2_i[0..9]Value in Y2 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT2_i[0..9]Value in M2 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptYT3_i[0..9]Value in Y3 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See NasInlStepOptIncrements.
REAL8 NasInlStepOptMT3_i[0..9]Value in M3 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptYT4_i[0..9]Value in Y4 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT4_i[0..9]Value in M4 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See NasInlStepOptIncrements.
Control Parameters - Analysis Parameters - Arc-Length Load Stepping ParametersProperty Description
   API-2061
INT4 NasInlStepOptTYPESpecifies Constraint Type option:
0=Crisfield
1=Riks
2=Modifed Riks
REAL8 NasInlStepOptDTINITFA Initial Ti me Step Fraction (DTINITFA) value
REAL8 NasInlStepOptMINALR Min ArcLenAdjust Ratio (MINALR) valueREAL8 NasInlStepOptMAXALR Max ArcL enAdjust Ratio (MAXALR) value
REAL8 NasInlStepOptSCALEA Scale Factor (SCALEA) valueINT4 NasInlStepOptNDESIRA Desired Iterations (NDESIRA) valueINT4 NasInlStepOptNSMAXA Max Increments (NSMAXA) valueControl Parameters - Analysis Parameters - Mechanical Analysis ParametersBOOL NasInlStepOptMECH Flag to enable the Enable MECH option
INT4 NasInlStepOptKMETHODSpecifies Method (KMETHOD) option:
0=Full Newton-Raphson1=Quasi Newton-Raphson
INT4 NasInlStepOptKSTEP Iterat ion Interval (KSTEP) value
INT4 NasInlStepOptMAXQN QN Vectors (MAXQN) valueINT4 NasInlStepOptMAXLS Max Line Searches (MAXLS) valueREAL8 NasInlStepOptLSTOL Line Search Tol (LSTOL) valueREAL8 NasInlStepOptFSTRESS Fraction Limit (FTRESS) valueBOOL NasInlStepOptConvU Flag to  enable Displacement option
REAL8 NasInlStepOptEPSU Displacement value
BOOL NasInlStepOptConvP Flag to enable Load optionREAL8 NasInlStepOptEPSP Load valueBOOL NasInlStepOptConvW Flag to enable Work optionREAL8 NasInlStepOptEPSW Work valueBOOL NasInlStepOptConvV Flag to enable Vector optionBOOL NasInlStepOptConvN Flag  to enable Length option
BOOL NasInlStepOptConvA Flag to enable Automatic Switching optionProperty Description
 API-2062  
INT4 NasInlStepOptMRCONVSpecifies Checking (MRCONV) option:
0=Forces, Moments, Disp lacements, and Rotations
1=Forces, Moments, and Displacements
2=Forces, Displacements, and Rotations3=Forces and Displacements
MSC Nastran Boundary Conditions
INT4 ContactOptionBoundary Conditions dialog bo x for MSC Nastran Only. Sets 
BCONTACT Option (0=Default, 1=Inital Contact, 2=All 
Body, 3=Auto) 
INT4 ContactSetTypeBoundary Conditions dialog bo x for MSC Nastran Only. Sets 
Contact/Glue Sets option (0=All Connectors, 1=Connection 
Group, 2=All Body). ID of group for Connection Group set 
using BCSet[13]
ANSYS Analysis Set Options (Legacy)Master Case Options - ANSYS Specific (Legacy)BOOL AnsDOFOn Flag indicating dynamic DOF options have been defined.BOOL AnsDOFDoSet Flag indicating a mast er DOF set is specified and in use.
BOOL AnsDOFAutomatic Indicates au tomatic dynamic DOF selection.
BOOL AnsDOFNoRotation Excludes rotatio nal DOF from automatic DOF selection.
INT4 AnsDOFSetID Constraint set ID to be used as a master DOF set.INT4 AnsDOFNumber Number of degrees of  freedom to automatically select.
ANSYS Model Write (Legacy)BOOL AnsModOn Flag indicating ANSYS Model options have been specified.
BOOL AnsModTitleSetNames Flag to Write FEMAP titles as set names.BOOL AnsModSkipPreprocessCMD Flag to skip writing /PREP7 command
BOOL AnsModGroupsAsSets Flag to write Groups As SetsBOOL AnsModSkipStandard Flag to skip  output of standard ANSYS model.
INT4 AnsModStartText ID of text wr itten at beginning of ANSYS model.
INT4 AnsModEndText ID of text written at end of ANSYS model.STRING AnsModTitle Title for analys is (maximum 79 characters).
BOOL AnsModWriteSolCmd Flag to write commands for automatic solve of model.
BOOL AnsModWriteIter Flag to choose the iterative solver in ANSYS 5.3 and above.
BOOL AnsModWriteLargeDef Flag to include large deformation effects in nonlinear.Property Description
   API-2063
INT4 AnsModMemory Analys is memory: 0=Default.
INT4 AnsModVersion ANSYS versio n (4=ANSYS 4.4, 5=ANSYS 5.x).
ANSYS Modal Options (Legacy)BOOL AnsModesOn Flag indicating modal expansion options have been defined.INT4 AnsModesNumModes Number of  modes/frequencies to expand.
REAL8 AnsModesMinFreq Minimum  frequency of interest.
REAL8 AnsModesMaxFreq Maximum frequency of interest.REAL8 AnsModesModalMethod Modal expansion method.
BOOL AnsModesElemResultsFlag indicating whether elementa l results (stresses, strains...) 
will be calculated.
ANSYS Heat Transfer Options (Legacy)BOOL AnsHeatOn Flag indicating heat tr ansfer options have been defined.
REAL8 AnsHeatEndTime Time at end of this load step.REAL8 AnsHeatTimeStep Initial time increment.INT4 AnsHeatOutputFreq Output step interval.ANSYS Random Analysis Options (Legacy)
BOOL AnsRandOnFlag indicating ANSYS Random Analysis Options have been 
specified.
BOOL AnsRandDisp Flag reques ting displacement output. 
BOOL AnsRandVel Flag requesting velocity output.BOOL AnsRandAccel Flag requesting acceleration output.
BOOL AnsRandDispRelativeFlag indicating displacement output  should be relative or abso-
lute.
BOOL AnsRandVelRelative Flag indicating veloc ity output should be relative or absolute.
BOOL AnsRandAccelRelativeFlag indicating acceleration output  should be relative or abso-
lute.
Analysis Set Options - FEMAP Structural SpecificFEMAP Structural File Operations
BOOL FStFilOnFlag indicating FEMAP Structural File Operation Options 
have been specified.
STRING FStFilLogFile[260] Full path to the log file (blank=default).Property Description
 API-2064  
BOOL FStFilKeepLogFile Flag indicating that the log file should be kept.
BOOL FStFilEchoLogFileSTRING FStFilHyper1[260] Filename for fi rst Hypermatrix file (blank=default).
STRING FStFilHyper2[260] Filename for sec ond Hypermatrix file (blank=default).
BOOL FStFilKeepHyper Flag indicating that Hypermatrix files should be kept.STRING FStFilScratch1[260] Path to sparse solver scratch directory.STRING FStFilScratch2[260] Path to add itional sparse solver scratch directory.
FEMAP Structural Heat Transfer 
Options
BOOL FStHeatOnFlag indicating FEMAP Structural  Heat Transfer Options have 
been specified.
REAL8 FStHeatTempTol Temperatu re convergence tolerance.
INT4 FStHeatConvergeType Convergence norm: 0=Absolute, 1=Euclidean, 2=Maximum.INT4 FStHeatMaxIter Maximum iterations.FEMAP Structural Dynamic Solution Options
BOOL FStDynOnFlag indicating FEMAP Structural Dynamic Solution options 
have been specified.
INT4 FStDynSolMethod Solution method: 0=Guyan, 1=SVI, 2=Lanczos.BOOL FStDynMassForm Mass formulation: 0=Consistent, 1=Lumped.BOOL FStDynModalDamp Flag indicating that modal damping should be included.BOOL FStDynModalNorm Flag indica ting mode normalization method.
INT4 FStDynNumModes Numb er of flexible modes.
INT4 FStDynRigidModes Number of rigid body modes.
INT4 FStDynFreqMethodFrequency range method: 0=Above, 1=Below, 2=Around, 
3=Between.
REAL8 FStDynFreqRange[2]
or
V ARIANT vFStDynFreqRangeFrequency range: [0]=Single or Min Frequency, [1]=Max Fre-
quency.
INT4 FStDynMassDirEffective mass direction: 0=None, 1=X, 2=Y , 3=Z, 4=X+Y , 
5=X+Z, 6=Y+Z, 7=X+Y+Z.
REAL8 FStDynMassTol Effective mass lower limit.INT4 FStDynIterVec Number of iteration vectors.Property Description
   API-2065
INT4 FStDynMaxIter Max iterations.
INT4 FStDynSigDigits Significant digits.FEMAP Structural Solver Options
BOOL FStSolOnFlag indicating FEMAP Structural  Solver Options have been 
specified.
BOOL FStSolIter Flag choosing sparse or iterative solver.REAL8 FStSolIterConvTol Iterative solver convergence tolerance.INT4 FStSolIterMaxIter Itera tive solver max iterations.
INT4 FStSolMemIterMax Max memory  for iterative solver in MBytes.
INT4 FStSolMemVirtMax Total virt ual memory limit in MBytes.
INT4 FStSolMemAppPct Application dynamic memory in percent.INT4 FStSolMemFortranPct Fortran workspace in percent.BOOL FStSolStressStiff Flag to turn on stress stiffening.BOOL FStSolSpinSoft Flag to turn on spin softening.INT4 FStSolStiffSoftLoad Load se t ID for use with stress s tiffening or spin softening.
BOOL FStSolShellAuto Shell autorestraint option.BOOL FStSolSingularity Flag to  select singularity removal.
BOOL FStSolVerification Flag indicating that a verification-only analysis.
REAL8 FStSolShellAutoAng Shell autorestraint angle.REAL8 FStSolSingCriteria Singularity removal criteria.
INT4 FStSolNodeGroupID of group containing node IDs for nodal output recovery 
(0=All Nodes).
INT4 FStSolElemGroupID of group containing element IDs for elemental output 
recovery (0=All Elements).
Master Case Options - MARC SpecificBOOL MarHistOn Flag indicating MARC Hi story options have been defined
INT4 MarHistContactProp ID of Contact Property written to the CONTACT TABLE.
INT4 MarHistCtrlMethodID of control type written to  the CONTROL option. 0=None, 
1=Full Newton-Raphson, 2=Modified Newton-Raphson, 3=Strain Correction Newton-Raphson, 8=Secant Method, Property Description
 API-2066  
INT4 MarHistSolverMethID of solver type written to the SOLVER option. 0=None, 
1=Profile Direct, 2=Sparse Iterative, 3=Sparse Direct, 4=Hard-
ware Provided Sparse Direct, 5=MultiFrontal Direct Sparse.
INT4 MarHistCtrlMaxStep Number of Max Steps written to CONTROL option.INT4 MarHistCtrlMaxRecycle Number of Ma x Recycles written to CONTROL option.
INT4 MarHistCtrlMinRecycle Number of Min Recycles written to CONTROL option.
REAL8 MarHistMaxResidual Number of Max Conv. Residual written to CONTROL option.
INT4 MarHistConvergeMethID of method written to CONTROL option. 0=Rel Force 
Residuals, 1=Rel Disp Residuals, 2=Rel Strain Ener Res, 3=Abs Force Residuals, 4=Abs Di sp Residuals, 5=Abs Strain 
Ener Res.
BOOL MarHistNonPosDefiniteFlag indicating Nonpositive Def will be used on SOLVER 
option.
BOOL MarHistNonSymmetricFlag indicating NonSymmetric will be used on SOLVER 
option.
REAL8 MarHistModalMinFreq Number indicatin g the Min Freq for a modal analysis.
REAL8 MarHistModalMaxFreq Number indicatin g the Max Freq for a modal analysis.
INT4 MarHistModalEigenNumber indicating the Number of eigenvectors to be found in 
modal analysis.
INT4 MarHistCheckingID indicating checking w ill be used. 0=None, 1=Strum 
Sequence.
BOOL MarHistAutoSwitchFlag indicating Auto Switch will be used on CONTROL 
option. 
INT4 MarHistAnalCaseSolID indicating the Analysis ty pe for this Subcase 1=Static, 
2=Normal Modes, 3=Buckling.
INT4 MarHistBuckleNumModes Number of Buckling modes.INT4 MarHistBucklePosEigen Number of  Modes With positive eigenvalues.
BOOL MarIncOn Flag indicating MARC Incr ement options have been defined
INT4 MarIncArcLenMethID indicating the Arclengt h Method. 0=None( AUTO STEP), 
1=Crisfield, 2=Riks, 3=Modified Riks, 4=Crisfield/Modified 
Riks.
REAL8 MarIncTimePeriod Number indicating AUTO STEP time period. REAL8 MarIncInitTimeInc Number indica ting AUTO STEP initial time increment.
REAL8 MarIncMinTimeInc Number indica ting AUTO STEP min time increment.Property Description
   API-2067
REAL8 MarIncMaxTimeInc Number indica ting AUTO STEP max time increment.
INT4 MarIncScaleFact Number indi cating AUTO STEP scale factor.
INT4 MarIncMaxStep Number indicatin g AUTO STEP max number of steps.
INT4 MarIncNumOutInc Number indica ting number of output intervals.
BOOL MarIncQuasiStatDamp Flag to include Damping scheme for statics.
REAL8 MarIncFracFirstNumber indicating AUTO INCREMENT fraction of total load 
applied in first step. 
INT4 MarIncMaxNumIncNumber indicating AUTO INCREMENT max num incre-
ments. 
INT4 MarIncCtrlMaxRecycle Number indicating AUTO INCREMENT max recycles.
REAL8 MarIncMaxFracForAllNumber indicating AUTO INCREMENT max fraction of load 
for any step.
REAL8 MarIncTotalTime Number indi cating AUTO INCREMENT total time.
BOOL MarCtblOn Flag indicating the MA RC Contact Table has been defined.
BOOL MarCtblWrite Flag indicating the MARC Contact Table is to be written.
Analysis Set Options - MARC SpecificBOOL MarModOn Flag Indicating MARC parameters have been specified.
BOOL MarModSkipStandard Flag to skip  the standard MARC model section.
INT4 MarModStartText ID of text written at the begining of the model section.
INT4 MarModEndText ID of text writte n at the end of the model section.
char MarModTitle[160] Title of  model specif ied as text.
INT4 MarModWorkSpVec Size of Work Space Vector on the SIZING command. INT4 MarModMaxConstrain Max Number of constraints written to the SIZING command.
BOOL MarModFolOn Flag indicating Fo llower Force has been specified. 
INT4 MarModFolOptID of Follower Option 1=Off Incremental, 2=Last Iter Inc,
3=Beg Disp Incr, 4=Off Total, 5=Last Iter Total, 6=Beg Disp To 
BOOL MarModPlasOn Flag indicating Plasticity has been specified. 
INT4 MarModPlasOptID of Plasticity Option 1=Add Normal Small Strain 2=Add 
Radial Small Strain, 3=Add Normal Large Strain, 4=Add 
Radial Large Strain, 5=Multiplicative.
BOOL MarModElasOn Flag indicating Elas ticity Force has been specified. Property Description
 API-2068  
BOOL MarModElasTotal Total Lagran ge=TRUE, Updated Lagrange=FALSE 
BOOL MarModElasIs Flag indicating ELASTIC parameter will be used. BOOL MarModConstDil Flag indicating CONSTANT parameter will be used.
BOOL MarModLgDisp Flag indicating LARGE DISP parameter will be used.
BOOL MarModUpdate Flag indicatin g UPDATE parameter will be used.
BOOL MarModFinite Flag indicating FINITE parameter will be used.BOOL MarModEchoInput Flag to Echo the Input.BOOL MarModWriteGroupSet Flag to write groups as sets.BOOL MarModExtInput Flag indicating the EXTENDED parameter will be used.
BOOL MarModShlTrShear Flag indicatin g the TSHEAR parameter will be used. 
INT4 MarModPltIntegPt Number of  SHELL SECT integration points.
BOOL MarModDistLoadOn Flag indicating Load  List information has been specified. 
INT4 MarModDistLoadList Number indicating th e max number of Load List in the model.
INT4 MarModDistLoadElem Number indicating the max number of Elements in any list.
INT4 MarModDistLoadNode Number indicating the max number of Nodes in any list.BOOL MarModTyingOn Flag indicatin g TIE parameter will be used.
INT4 MarModTyingCe Number of tying type constraint equations. INT4 MarModTyingType Number of different types of tying constraints.INT4 MarModTyingServoNd Max Number of  retained nodes for the tying type.
INT4 MarModTyingServoLk Max Number of Servo Links.BOOL MarModOutOfCore Flag indicatin g the ELSTO parameter will be used.
INT4 MarModCoreVal Number indicatin g the Out Of Core buffer size. 
BOOL MarModProcessors Flag indicating the PROCESSOR parameter will be used.
INT4 MarModNoCpu Number of CPU’s to be used.
INT4 MarModVecLengthNumber indicating Vector Length for the PROCESSOR 
param.
BOOL MarModParallel Flag if matrices are to be formed in parallel.BOOL MarModBWOpt Flag indicating th e OPTIMIZE parameter will be used.Property Description
InitAnalysisMgr   API-2069
5.7.2  AnalysisMgr  Object Methods
5.7.2.1  InitAnalysisMgr
InitAnalysisMgr
( analysis_program, analysis_type, InitMasterCase )
Description:This method initiali zes default options in the AnalysisMgr object
Input:INT4 analysis_program Refer to the Solver propertyINT4 analysis_type Refer to the AnalysisType propertyBOOL InitMasterCase If true, also initializ es the Master Case in in the object
Output:
None
Return Code:FE_FAIL Unable to initialize the current objectRemarks/Usage:NoneExample:None
 API-2070  GetText
5.7.2.2  GetText
GetText
( textID, text )
Description:This method returns a string containing th e text associated with a specified textID.
Input:INT4 textID A textID returned fro m one of the text properties.
Output:
STRING textA string containing the text. This string will contain carriage control 
characters if there are multiple lines in the text.
Return Code:FE_FAIL Unable to get the text. Check to see this is a valid ID.Remarks/Usage:Text IDs are returned from variou s AnalysisMgr properties. These properties have names ending with 
StartText or EndText.
Example:None
PutText   API-2071
5.7.2.3  PutText
PutText
( textID, text )
Description:This method updates or creates text  to associate with a text property.
Input:
INT4 textIDA textID used to store the text string. Specify the same value as the 
text property returned if you simply  want to update the text. Specify 
0 if you want to create a new text entity. In this  case, the return value 
will be the textID that was created. You should set the text property 
to this value.
STRING textA string containing the text. May contain carriage control to signify 
multiple lines.
Output:
None
Return ValuetextID The ID. Remarks/Usage:Text IDs are returned from variou s AnalysisMgr properties. These properties have names ending with 
StartText or EndText.
Example:None
 API-2072  AllFreqOn
5.7.2.4  AllFreqOn
AllFreqOn
( void )
Description:This method turns on all available “lists of solution frequencies” (FRE Q and FREQi entries) in the Solu-
tion Frequencies tab of the NASTRAN Dynamic Analysis dialog box
Input:NoneOutput:NoneReturn ValueFE_OK All available lists of solution frequencies have been turned on.Remarks/Usage:This method applies only to the analysis set  currently loaded into  a AnalysisMgr object
Example:None
AllFreqOff   API-2073
5.7.2.5  AllFreqOff
AllFreqOff
( void )
Description:This method turns off all available lists of solution frequencies (F REQ and FREQi entries) in the Solu-
tion Frequencies tab of the NASTRAN Dynamic Analysis dialog box
Input:NoneOutput:NoneReturn ValueFE_OK All available lists of solution frequencies have been turned off.Remarks/Usage:This method applies only to the analysis set  currently loaded into  a AnalysisMgr object
Example:None
 API-2074  TurnOnFreq
5.7.2.6  TurnOnFreq
TurnOnFreq
( freqID )
Description:This method turns on any number of “lists of solution frequencies” (FREQ and FREQi entries) in the 
Solution Frequencies tab of the NASTRAN Dynamic Analysis dialog box
Input:
freqIDThe ID of a set that contains a list of solution frequency lists to 
enable. Alternatively, if you specif y a negative value, this is simply 
the ID of the single list of solution frequencies. 
Output:NoneReturn ValueFE_OK  Specified lists of solution frequencies have been turned on.
Remarks/Usage:This method applies only to the analysis set  currently loaded into  a AnalysisMgr object
Example:None
TurnOffFreq   API-2075
5.7.2.7  TurnOffFreq
TurnOffFreq
( freqID )
Description:This method turns off any number of “lists of so lution frequencies” (FREQ and FREQi entries) in the 
Solution Frequencies tab of the NASTRAN Dynamic Analysis dialog box
Input:
freqIDThe ID of a set that contains a list of solution frequency lists to dis-
able. Alternatively, if you specify a negative value, this is simply the 
ID of the single list of solution frequencies.
Output:NoneReturn ValueFE_OK  Specified lists of solution frequencies have been turned off.
Remarks/Usage:This method applies only to the analysis set  currently loaded into  a AnalysisMgr object
Example:None
 API-2076  GetUsedFREQS( nSetID )
5.7.2.8  GetUsedFREQS
GetUsedFREQS( nSetID )
Description:
This method fills a set object w ith the FREQS that are turned on  in the specified analysis set.
Input:INT4 nSetID The ID of the set to fill the FREQ IDs with.Output:NoneReturn Code:FE_OK  Specified lists of solution frequencies have been turned on.
Remarks/Usage:
This method applies only to the analysis set  currently loaded into  a AnalysisMgr object
Example:None
PutUsedFREQS( nSetID )   API-2077
5.7.2.9  PutUsedFREQS
PutUsedFREQS( nSetID )
Description:
This method puts a set object filled with FREQ ID s to be turned on in th e specified analysis set.
Input:INT4 nSetID The set ID filled w ith the FREQ IDs to turn on.
Output:NoneReturn Code:FE_OK  Specified lists of solution frequencies have been turned on.
Remarks/Usage:
This method applies only to the analysis set  currently loaded into  a AnalysisMgr object
Example:None
 API-2078  GetCorrelate
5.7.2.10  GetCorrelate
GetCorrelate
( count, excitedCase, appliedCase, realScale, imagScale, realFunc, imagFunc )
Description:This method retrieves data from th e Random Analysis Correlation Table.
Input:NoneOutput:INT4 count The number of entries in each of the other vectors.INT4 excitedCase[0..count-1] The IDs of the analysis case being excited.
INT4 appliedCase[0..count-1] The IDs of th e analysis case where the PSD is applied.
REAL8 realScale[0..count-1] T he scale factor for the real portion of the PSD.
REAL8 imagScale[0..count-1] The scale factor  for the imaginary portion of the PSD.
INT4 realFunc[0..count-1] The IDs of functions defining the real PSDs.INT4 imagFunc[0..count-1] The IDs of functions defining the imaginary PSDs.Return ValueFE_NOT_EXIST The correlatio n table does not exist.
FE_FAIL Unable to allocate memory  to return the correlation data.
Remarks/Usage:This function has been replace by GetCorrelate2 in Femap 10.1. The AnalysisMgr object must be 
loaded with data from the associated set before this function can be used.
Example:None
GetCorrelate2   API-2079
5.7.2.11  GetCorrelate2
GetCorrelate2
( count, excitedCase, appliedCase, realScale, imagScale, realFunc, imagFunc, realIn-
terp, imagInterp )
Description:This method retrieves data from th e Random Analysis Correlation Table.
Input:NoneOutput:INT4 count The number of entries in each of the other vectors.INT4 excitedCase[0..count-1] The IDs of the analysis case being excited.
INT4 appliedCase[0..count-1] The IDs of th e analysis case where the PSD is applied.
REAL8 realScale[0..count-1] T he scale factor for the real portion of the PSD.
REAL8 imagScale[0..count-1] The scale factor  for the imaginary portion of the PSD.
INT4 realFunc[0..count-1] The IDs of functions defining the real PSDs.INT4 imagFunc[0..count-1] The IDs of functions defining the imaginary PSDs.
INT4 realInterp[0..count-1]The IDs of Interpolation method defining the real PSD. 0=Log Log, 
1=Linear, 2=XLog YLin, 3=XLin YLog 
INT4 imagInterp[0..count-1]The IDs of Interpolation method de fining the imaginary PSD. 0=Log 
Log, 1=Linear, 2=XLog YLin, 3=XLin YLog 
Return ValueFE_NOT_EXIST The correlatio n table does not exist.
FE_FAIL Unable to allocate memory  to return the correlation data.
Remarks/Usage:The AnalysisMgr object must be loaded with data from the associated set befo re this function can be 
used.
Example:None
 API-2080  PutCorrelate
5.7.2.12  PutCorrelate
PutCorrelate
( count, excitedCase, appliedCase, realScale, imagScale, realFunc, imagFunc )
Description:This method replaces da ta in the Random Anal ysis Correlation Table.
Input:INT4 count The number of entries in each of the other vectors.INT4 excitedCase[0..count-1] The IDs of the analysis case being excited.
INT4 appliedCase[0..count-1] The IDs of th e analysis case where the PSD is applied.
REAL8 realScale[0..count-1] T he scale factor for the real portion of the PSD.
REAL8 imagScale[0..count-1] The scale factor  for the imaginary portion of the PSD.
INT4 realFunc[0..count-1] The IDs of functions defining the real PSDs.INT4 imagFunc[0..count-1] The IDs of functions defining the imaginary PSDs.Output:NoneReturn ValueFE_FAIL Unable to update the correlation table.Remarks/Usage:This function has been replace by PutCorrelate2 in Femap 10.1. The An alysisMgr object must be loaded 
with data from the associated set be fore this function can be used. This function completely replaces the 
correlation table - it does not add to data that is already there.
Example:None
PutCorrelate2   API-2081
5.7.2.13  PutCorrelate2
PutCorrelate2
( count, excitedCase, appliedCase, realScale, imagScale, realFunc, imagFunc, realIn-
terp, imagInterp )
Description:This method replaces da ta in the Random Anal ysis Correlation Table.
Input:INT4 count The number of entries in each of the other vectors.INT4 excitedCase[0..count-1] The IDs of the analysis case being excited.
INT4 appliedCase[0..count-1] The IDs of th e analysis case where the PSD is applied.
REAL8 realScale[0..count-1] T he scale factor for the real portion of the PSD.
REAL8 imagScale[0..count-1] The scale factor  for the imaginary portion of the PSD.
INT4 realFunc[0..count-1] The IDs of functions defining the real PSDs.
INT4 imagFunc[0..count-1] The IDs of functions defining the imaginary PSDs.
INT4 realInterp[0..count-1]The IDs of Interpolation method defining the real PSD. 0=Log Log, 
1=Linear, 2=XLog YLin, 3=XLin YLog 
INT4 imagInterp[0..count-1]The IDs of Interpolation method de fining the imaginary PSD. 0=Log 
Log, 1=Linear, 2=XLog YLin, 3=XLin YLog 
Output:NoneReturn ValueFE_FAIL Unable to update the correlation table.Remarks/Usage:The AnalysisMgr object must be loaded with data from the associated set befo re this function can be 
used. This function complete ly replaces the correlation table - it do es not add to data that is already 
there.
Example:None
 API-2082  ActiveContactEntities
5.7.2.14  ActiveContactEntities
ActiveContactEntities
( bContact, nConnectorSetID, nRegionSetID, nConPropSetID )
Description:This method is used to populate Set Objects with the Connectors, Connection Regions, and Connection 
Properties that will be exported fo r Contact or Glue Contact by an an alysis set. This method takes into 
consideration the settings in  the Contact Sets or Glue  Sets section of the Boun dary Conditions dialog 
box for Simcenter SOL 401/402 or setting for Contact/G lue Sets of the Boundary Conditions dialog box 
for MSC Nastran
Input:
BOOL bContactIf True, populates sets with connecti on entities for Contact. If False, 
populates sets with connectio n entities for Glued Contact
INT4 nConnectorSetIDSet ID of Set Object to popula te with Connectors which will be 
exported by this analysis set
INT4 nRegionSetIDSet ID of Set Object to populate  with Connection Regions which will 
be exported by this analysis set
INT4 nConPropSetIDSet ID of Set Object to populate  with Connection Properties which 
will be exported by this analysis set
Output:NoneReturn ValueFE_FAIL No Connection Re gions were detected.
Remarks/Usage:It is important to use three unique s Set Objects when usin g this method, otherwise the IDs of different 
entity types may contaminate a Set. Also, it is recommend to  use “empty sets” to insure that only the 
Connection entities from a single Anal ysis Set populate the three sets.
Example:None
GetContactTable   API-2083
5.7.2.15  GetContactTable
GetContactTable
( count, rowSeg, colSeg, tieType, distTol, sepForce, friction, interClose )
Description:This method retrieves data from the Contact Table.Input:NoneOutput:INT4 count The number of entries in each of the other vectors.INT4 rowSeg[0..count-1] The IDs of the contact segments referenced in rows of the table
INT4 colSeg[0..count-1] The IDs of the contact segments referenced in columns of the table
INT4 tieType[0..count-1] The tying type (0,1=None, 2=Touch, 3=Glue)REAL8 distTol[0..count-1 ] The distance tolerance
REAL8 sepForce[0..count-1] The separation forceREAL8 friction[0..count-1] The friction valuesREAL8 interClose[0..count- 1] The interference closure
Return ValueFE_NOT_EXIST The contact table does not exist.FE_FAIL Unable to allocate memory to return the contact table data.
Remarks/Usage:NoneExample:None
 API-2084  PutContactTable
5.7.2.16  PutContactTable
PutContactTable
( count, rowSeg, colSeg, tieType, distTol, sepForce, friction, interClose )
Description:This method replaces data  in the Contact Table
Input:INT4 count The number of entries in each of the other vectors.INT4 rowSeg[0..count-1] The IDs of the contact segments referenced in rows of the table
INT4 colSeg[0..count-1] The IDs of the contact segments referenced in columns of the table
INT4 tieType[0..count-1] The tying type (0,1=None, 2=Touch, 3=Glue)REAL8 distTol[0..count-1 ] The distance tolerance
REAL8 sepForce[0..count-1] The separation forceREAL8 friction[0..count-1] The friction valuesREAL8 interClose[0..count- 1] The interference closure
Output:NoneReturn ValueFE_FAIL Unable to update the contact table.Remarks/Usage:This function completely replaces the contact tabl e - it does not add to data that is already there.
Example:None
Case   API-2085
5.7.2.17  Case
Case
( caseID )
Description:This method creates and returns an AnalysisCase object  that is loaded with the options referenced by a 
case.
Input:INT4 caseID The ID of the Analysis Case to load.Output:NoneReturn Code:NoneRemarks/Usage:The current AnalysisMgr object must be loaded with the data from the set  that contains the case that you 
want to retrieve. The AnalysisMgr.ID property is u sed to define the set that you want to retrieve.
Example:
Sub Main
    Dim App as femap.model    Set App = feFemap()
    Dim rc As Integer    Dim aMgr As femap.AnalysisMgr
    Set aMgr = App.feAnalysisMgr
    Dim aCase As femap.AnalysisCase
    rc = aMgr.Get( 1 )
    If (rc = FE_OK) Then
        Set aCase = aMgr.Case( 1 )        App.feAppMessage(FCM_NORMAL, aCase.CaseTitle )
    End If
End Sub
 API-2086  Analyze
5.7.2.18  Analyze
Analyze
( setID )
Description:Selects and analyzes an Analysis Set.Input:INT4 setID The ID of the An alysis Set to be analyzed.
Output:NoneReturn Code:NoneRemarks/Usage:This method can be used to select an analysis  set and run the associated analysis program.
Example:None
AnalyzeMultiple   API-2087
5.7.2.19  AnalyzeMultiple
AnalyzeMultiple
( setID )
Description:Selects and sequentially analyzes one or more Analysis Sets.Input:
INT4 setIDThe ID of a Set that contains the IDs of the Analysis Sets to be ana-
lyzed.
Output:NoneReturn Code:NoneRemarks/Usage:This method can be used to selec t multiple analysis sets and run th e associated analysis program. 
Example:None
 API-2088  ClearAnalysisQueue
5.7.2.20  ClearAnalysisQueue
ClearAnalysisQueue
( void )
Description:Clears the Analysis Job Queue of jobs.Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:NoneExample:None
Preview   API-2089
5.7.2.21  Preview
Preview
( SetID )
Description:Calls Preview Input in the Analysis Set ManagerInput:
INT4 setIDThe ID of a Analysis Set to be previewed in the Preview Analysis 
Input File window. Enter -1 for the Active Analysis Set.
Output:NoneReturn Code:FE_OKRemarks/Usage:NoneExample:None
 API-2090  GetStandardTrim
5.7.2.22  GetStandardTrim
GetStandardTrim
( useTrim, TrimID, TrimVal )
Description:This method retrieves data fro m the standard trim definition.
Input:NoneOutput:INT4 useTrim[0..11] 0=Off,1=Use, 2= Fi xed. See Remarks for array index value
INT4 TrimID[0..11] Not currently used
REAL8 TrimVal[0..11]Magnitude value when UseTrim[i] = Fixed. See Remarks for array 
index value
Return ValueFE_NOT_EXIST Standard Trim values have not been defined.FE_FAIL Unable to allocate memo ry to return the trim data.
Remarks/Usage:Valid TrimID values: 
0 = NAS_AERO_TRIM_ANGLEA
1 = NAS_AERO_TRIM_SIDES
2 = NAS_AERO_TRIM_ROLL3 = NAS_AERO_TRIM_PITCH
4 = NAS_AERO_TRIM_YAW
5 = NAS_AERO_TRIM_URDD16 = NAS_AERO_TRIM_URDD2
7 = NAS_AERO_TRIM_URDD3
8 = NAS_AERO_TRIM_URDD49 = NAS_AERO_TRIM_URDD5
10 - NAS_AERO_TRIM_URDD6
Example:None
PutStandardTrim   API-2091
5.7.2.23  PutStandardTrim
PutStandardTrim
( useTrim, TrimID, TrimVal )
Description:This method loads standard trim  data into the trim definition.
Input:INT4 useTrim[0..11] 0=Off, 1=Use, 2= Fixed. See Remarks for array index valueINT4 TrimID[0..11] Not currently used
REAL8 TrimVal[0..11]Magnitude value when UseTrim[i] = Fixed. See Remarks for array 
index value
Output:NoneReturn ValueFE_NOT_EXIST Standard Trim values have not been defined.FE_FAIL Unable to allocate memo ry to return the trim data.
Remarks/Usage:Valid index values: 
0 = NAS_AERO_TRIM_ANGLEA
1 = NAS_AERO_TRIM_SIDES
2 = NAS_AERO_TRIM_ROLL3 = NAS_AERO_TRIM_PITCH
4 = NAS_AERO_TRIM_YAW
5 = NAS_AERO_TRIM_URDD16 = NAS_AERO_TRIM_URDD2
7 = NAS_AERO_TRIM_URDD3
8 = NAS_AERO_TRIM_URDD49 = NAS_AERO_TRIM_URDD5
10 - NAS_AERO_TRIM_URDD6
Example:None
 API-2092  GetTrimControlSurf
5.7.2.24  GetTrimControlSurf
GetTrimControlSurf
( useTrim, TrimID, TrimVal )
Description:This method retrieves data from the trim defi nition for user defined Aero Control Surfaces 
Input:NoneOutput:INT4 useTrim[0..29] 0=Off,1=Use, 2= FixedINT4 TrimID[0..29] ID of the Fe map Aero Control Surface Entity
REAL8 TrimVal[0..29] magnitudeReturn ValueFE_NOT_EXIST Trim values have not been defined.FE_FAIL Unable to allocate memo ry to return the trim data.
Remarks/Usage:
Example:
None
PutTrimControlSurf   API-2093
5.7.2.25  PutTrimControlSurf
PutTrimControlSurf
( useTrim, TrimID, TrimVal )
Description:This method loads user defined Aero Cont rol Surface data into the Trim definition
Input:INT4 useTrim[0..29] 0=Off,1=Use, 2= FixedINT4 TrimID[0..29] ID of the Fe map Aero Control Surface Entity
REAL8 TrimVal[0..29] magnitudeOutput:NoneReturn ValueFE_FAIL Unable to store the trim data.Remarks/Usage:
Example:
None
 API-2094  GetOptVars
5.7.2.26  GetOptVars
GetOptVars
( nSetID, bClear )
Description:Gets Optimization Variables (Optimization Re lationship objects) enabled for an analysis
Input:INT4 nSetID ID of Set to be populatedBOOL bClear Clear existing entitiesOutput:NoneReturn ValueFE_INV ALID Analysis type is not design optimizationFE_NOT_EXIST No Optimization Variables (Relationship) have been enabled
Remarks/Usage:NoneExample:None
PutOptVars   API-2095
5.7.2.27  PutOptVars
PutOptVars
( nSetID, bClear )
Description:Sets Optimization Variables (Optimization Re lationship objects) enabled for an analysis
Input:
INT4 nSetIDID of Set Object containing Opti mization Variable (Relationship) 
IDs. Alternatively, specify a nega tive number to put a single optimi-
zation variable
BOOL bClear Clear existing entitiesOutput:None
Return Value
FE_INV ALID Analysis type is not design optimizationFE_NOT_EXIST No Optimization Variables (Relationship) have been enabled
Remarks/Usage:NoneExample:None
 API-2096  GetOptLimits
5.7.2.28  GetOptLimits
GetOptLimits
( nSetID, bClear )
Description:Gets Optimization Limits (O ptimization Response objects) enabled for an analysis
Input:INT4 nSetID ID of Set Object to be populatedBOOL bClear Clear existing entitiesOutput:NoneReturn ValueFE_INV ALID Analysis type is not design optimizationFE_NOT_EXIST No Optimization Limits  (Responses) have been enabled
Remarks/Usage:NoneExample:None
PutOptLimits   API-2097
5.7.2.29  PutOptLimits
PutOptLimits
( nSetID, bClear )
Description:Sets Optimization Limits (Optimization R esponse objects) enabled for an analysis
Input:
INT4 nSetIDID of Set Object containing Optimization Limits (Response) IDs. 
Alternatively, specify a negative nu mber to put a single optimization 
variable
BOOL bClear Clear existing entitiesOutput:None
Return Value
FE_INV ALID Analysis type is not design optimizationFE_NOT_EXIST No Optimization Limits  (Responses) have been enabled
Remarks/Usage:
Example:
None
 API-2098  GetOptMCs
5.7.2.30  GetOptMCs
GetOptMCs
( nSetID, bClear )
Description:Gets Topology Optimization Manufacturin g Constraints enabled for an analysis
Input:INT4 nSetID ID of Set Object to be populatedBOOL bClear Clear existing entitiesOutput:NoneReturn ValueFE_INV ALID Analysis type is not design/topology optimizationFE_NOT_EXIST No Manufacturing Constraints have been enabledRemarks/Usage:NoneExample:None
PutOptMCs   API-2099
5.7.2.31  PutOptMCs
PutOptMCs
( nSetID, bClear )
Description:Sets Topology Optimization Manufacturin g Constraints enabled for an analysis
Input:
INT4 nSetIDID of Set Object containing Manufacturing Constraint IDs. Alterna-
tively, specify a negative number to  put a single manufacturing con-
straint.
BOOL bClear Clear existing entitiesOutput:None
Return Value
FE_INV ALID Analysis type is not design/topology optimizationFE_NOT_EXIST No Manufacturing Constraints have been enabledRemarks/Usage:
Example:
None
 API-2100  GetMptSet
5.7.2.32  GetMptSet
GetMptSet
( pSelectedMptSet )
Description:Gets Monitor Points enabled for an analysisInput:NoneOutput:
OBJECT pSelectedMptSet Set object that contains the IDs of the Monitor Po ints enabled for 
analysis
Return Code:NoneRemarks/Usage:NoneExample:None
PutMptSet   API-2101
5.7.2.33  PutMptSet
PutMptSet
( pSelectedMptSet )
Description:Sets Monitor Points en abled for an analysis
Input:OBJECT pSelectedMptSet Set Object containing  the IDs of the monitor points to enable
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-2102  PutMptSetID
5.7.2.34  PutMptSetID
PutMptSetID
( nSetID )
Description:Alternative method for specifying Mon itor Points enabled for an analysis
Input:
INT4 nSetIDID of Set Object containing Mo nitor Point IDs. Alternatively, 
specify a negative number to en able a single monitor point.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
ClearMptSet   API-2103
5.7.2.35  ClearMptSet
ClearMptSet
( void )
Description:This method clears the array that contains the IDs of the Monitor Points curre ntly enabled for analysis.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-2104  DeleteAnalysisCase
5.7.2.36  DeleteAnalysisCase
In addition to the standard meth ods, the following methods are al so available specifically for use 
with ANSYS translator.DeleteAnalysisCase
( nSetID, nCaseID )
Description:Use this method to delete an analysis case.Input:INT4 nSetID The Analysis SetID containing the case to be deletedINT4 nCaseID The Case ID to be deletedOutput:NoneReturn ValueFE_FAILRemarks/Usage:This method takes care  of deleting any start/end text or Marc contact table records that referenced the 
case.
Example:None
KBC   API-2105
5.7.3  AnalysisMgr Object s - ANSYS Specific Methods
5.7.3.1  KBC
KBC
( key )
Description:This method sets th e Amplitude (KBC) option on ANSYS Load Step Options dialog box
Input:BOOL key When True, enables Amplitude (KBC) optionOutput:NoneReturn Value
None
Remarks/Usage:NoneExample:None
 API-2106  PSTRES
5.7.3.2  PSTRES
PSTRES
( key )
Description:This method sets the Include Prestress Effects ( PSTRES) option on ANSYS Load Step Options dialog 
box
Input:BOOL key When True, enables Include Prestress Effects (PSTRES) optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
TIME   API-2107
5.7.3.3  TIME
TIME
( time )
Description:This method sets the Time Duration valu e on ANSYS Time Step Options dialog box
Input:REAL8 time Time Duration valueOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2108  AUTOTS
5.7.3.4  AUTOTS
AUTOTS
( key )
Description:This method sets the Automatic Time Stepping (AUTOTS) option on ANSYS Load Step Options dialog 
box
Input:BOOL key When True, enables Automatic  Time Stepping (AUTOTS) option
Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
LANBOPTION   API-2109
5.7.3.5  LANBOPTION
LANBOPTION
( strmck )
Description:This method sets the St rum Sequence Check option on ANSYS Moda l Analysis dialog box for use the 
Block Lanczos mode extraction method
Input:BOOL key When True, enables Strum Sequence Check optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2110  PCGOPT
5.7.3.6  PCGOPT
PCGOPT
( strmck )
Description:This method sets the Strum Sequence Check option on ANSYS Modal Analysis dialog box for the PCG 
Lanczos mode extraction method
Input:BOOL key When True, enables Strum Sequence Check optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
SUPOPT   API-2111
5.7.3.7  SUBOPT
SUPOPT
( strmck )
Description:This method sets the St rum Sequence Check option on ANSYS Moda l Analysis dialog box for use the 
Subspace mode extraction method
Input:BOOL key When True, enables Strum Sequence Check optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2112  LUMPM
5.7.3.8  LUMPM
LUMPM
( key )
Description:This method sets the Lu mper option on ANSYS Transient Dynamics dialog box
Input:BOOL key When True, enables Lumped optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
ALPHAD   API-2113
5.7.3.9  ALPHAD
ALPHAD
( alpha )
Description:This method sets the Mass value (Damping) on ANSYS Transient Analysis dialog box
Input:REAL8 alpha Mass value (Damping)Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2114  BETAD
5.7.3.10  BETAD
BETAD
( beta )
Description:This method sets the Stiffness value (Dampi ng) on ANSYS Transient Analysis dialog box
Input:REAL8 beta Stiffness value (Damping)Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
DMPSTR   API-2115
5.7.3.11  DMPSTR
DMPSTR
( dmp )
Description:This method sets the Struct value (Damping) on ANSYS Transient Analysis dialog box
Input:REAL8 dmp Struct value (Damping)Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2116  DMPRAT
5.7.3.12  DMPRAT
DMPRAT
( rat )
Description:This method sets th e Ratio value (Damping) on ANSYS Transient Analysis dialog box
Input:REAL8 rat Ratio value (Damping)Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
NEQIT   API-2117
5.7.3.13  NEQIT
NEQIT
( neqit )
Description:This method sets the Max Iterations  value on ANSYS Nonlinear dialog box
Input:INT4 neqit Max Iterations valueOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2118  NLGEOM
5.7.3.14  NLGEOM
NLGEOM
( key )
Description:This method sets th e Nonlinear Geometry option on  ANSYS Nonlinear dialog box
Input:BOOL key When True, enables Nonlinear Geometry optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
ARCLEN   API-2119
5.7.3.15  ARCLEN
ARCLEN
( key )
Description:This method sets the Ar c-Length option on ANSYS Nonlinear dialog box
Input:BOOL key When True, enables Arc-Length optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2120  LNSRCH
5.7.3.16  LNSRCH
LNSRCH
( key )
Description:This method sets the Line Search option on ANSYS Nonlinear dialog box
Input:BOOL key When True, enables Line Search optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
PRED   API-2121
5.7.3.17  PRED
PRED
( sskey )
Description:This method sets the Predictor option on ANSYS Nonlinear dialog box
Input:BOOL sskey When True, enables Predictor optionOutput:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2122  SPOPT
5.7.3.18  SPOPT
SPOPT
( sptype, nmode, elcalc )
Description:This method sets the Spectrum op tions on ANSYS Random Vibration Analysis Options dialog box
Input:INT4 sptype ID of the spectrum type option.INT4 nmode Specifies the number of modes.BOOL elcalc When True, Element Results is on. 
Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
PSDUNIT   API-2123
5.7.3.19  PSDUNIT
PSDUNIT
( tblno, type)
Description:This method sets the PSD table on the ANSYS Random Vibration Analysis Options dialog box
Input:
INT4 tblnoID of the function, 0=DISP, 1=VEL, 2=ACEL 
(Acc2/Hz) , 3=ACCG 
(g2/Hz) , 4=FORC, 5=PRES.
INT4 type Specifies the PSD type.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2124  PFACT
5.7.3.20  PFACT
PFACT
( tblno, excit)
Description:This method sets the PSD table on the ANSYS Random Vibration Analysis Options dialog box
Input:
INT4 tblnoID of the function, 0=DISP, 1=VEL, 2=ACEL 
(Acc2/Hz) , 3=ACCG 
(g2/Hz) , 4=FORC, 5=PRES.
BOOL excit Sets the Mode Factors, True = Node, False = Base.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
PSDCOM   API-2125
5.7.3.21  PSDCOM
PSDCOM
( signif, comode, forcetype )
Description:This method sets the Mode Comb inations options on the ANSYS Ra ndom Vibration Analysis Options 
dialog box
Input:REAL8 signif Sets the Significance value. INT4 comode Sets the Mode Number value.BOOL forcetype Sets the Combine Force, True = Static, False = Total.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2126  AnsWriteGroup
5.7.3.22  AnsWriteGroup
AnsWriteGroup
( group )
Description:This method specifies a Group ID  for the Portion of Model to Wr ite option in the ANSYS Command 
and Model Options dialog box
Input:
INT4 groupID of Group to write to the input file. To write out the entire model, 
set this value to 0.
Output:NoneReturn Value
None
Remarks/Usage:NoneExample:None
AnsSkipCSys   API-2127
5.7.3.23  AnsSkipCSys
AnsSkipCSys
( key )
Description:This method specifies setting for Skip CSys option in the ANSYS Co mmand and Model Options dialog 
box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2128  AnsSkipNode
5.7.3.24  AnsSkipNode
AnsSkipNode
( key )
Description:This method specifies setting for Skip Node option in the ANSYS Co mmand and Model Options dialog 
box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
AnsSkipElem   API-2129
5.7.3.25  AnsSkipElem
AnsSkipElem
( key )
Description:This method specifies setting for Skip Elem option in the ANSYS Co mmand and Model Options dialog 
box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2130  AnsSkipMatl
5.7.3.26  AnsSkipMatl
AnsSkipMatl
( key )
Description:This method specifies se tting for Skip Matl option in the ANSY S Command and Model Options dialog 
box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
AnsSkipProp   API-2131
5.7.3.27  AnsSkipProp
AnsSkipProp
( key )
Description:This method specifies se tting for Skip Prop option in the AN SYS Command and Model Options dialog 
box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2132  AnsSkipGroup
5.7.3.28  AnsSkipGroup
AnsSkipGroup
( key )
Description:This method specifies setting fo r Skip Group option in the ANSYS  Command and Model Options dia-
log box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
AnsSkipMisc   API-2133
5.7.3.29  AnsSkipMisc
AnsSkipMisc
( key )
Description:This method specifies setting for Skip Misc option in the ANSYS Co mmand and Model Options dialog 
box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2134  AnsRSTComp
5.7.3.30  AnsRSTComp
AnsRSTComp
( level )
Description:This method specifies the File Compression Level option in the ANSYS Command and Model Options 
dialog box
Input:
INT4 levelSpecifies the value for File Compression Level.
0=Sparse, 1=No Compression
Output:NoneReturn Value
None
Remarks/Usage:NoneExample:None
DynWriteGroup   API-2135
5.7.4  AnalysisMgr Objects - LS-Dyna Specific Methods
5.7.4.1  DynWriteGroup
DynWriteGroup
( group )
Description:This method specifies a Group ID for the Porti on of Model to Write op tion in the LS-DYNA Model 
Options dialog box
Input:
INT4 groupID of Group to write to the input file. To write out the entire model, 
set this value to 0.
Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2136  DynSkipCSys
5.7.4.2  DynSkipCSys
DynSkipCSys
( key )
Description:This method specifies setting for Skip CSys  option in the LS-DYNA Model Options dialog box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
DynSkipNode   API-2137
5.7.4.3  DynSkipNode
DynSkipNode
( key )
Description:This method specifies setting for Skip Node option in the LS-DYNA Mode l Options dialog box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2138  DynSkipElem
5.7.4.4  DynSkipElem
DynSkipElem
( key )
Description:This method specifies setting for Skip Elem option in the LS-DYNA Mode l Options dialog box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
DynSkipMatl   API-2139
5.7.4.5  DynSkipMatl
DynSkipMatl
( key )
Description:This method specifies setting for Skip Matl option in the LS- DYNA Model Options dialog box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2140  DynSkipProp
5.7.4.6  DynSkipProp
DynSkipProp
( key )
Description:This method specifies setting for Skip Prop option in the LS-DYNA Mo del Options dialog box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
DynSkipGroup   API-2141
5.7.4.7  DynSkipGroup
DynSkipGroup
( key )
Description:This method specifies setting for Skip Group option in the LS-DYNA Model Options dialog box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
 API-2142  DynSkipMisc
5.7.4.8  DynSkipMisc
DynSkipMisc
( key )
Description:This method specifies setting fo r Skip Misc option in the LS- DYNA Model Options dialog box
Input:BOOL key When True, option is enabled. When False, option is disabled.Output:NoneReturn ValueNoneRemarks/Usage:NoneExample:None
   API-2143
5.8   AnalysisStep Objects
AnalysisStep objects correspond to the analysis steps within subcases which are within analysis 
sets in your model. They are deri ved from Entity objects, so in ad dition to the properties and meth-
ods described here, all of the pr operties and methods defined for En tity objects are also available 
for AnalysisStep objects. For more information,  see Section 5.1, "Common Entity Properties and 
Methods". 
Use the feAnalysisStep method of the FEMAP Appl ication object to create AnalysisStep objects. 
Alternatively, you can create an AnalysisStep ob ject by calling the GetStep method of the Analy-
sisCase object. This approach has the added advant age of ensuring that the step is from the correct 
analysis case, and pre-loading the step data.
Currently, AnalysisStep Objects are only used fo r MSC Nastran Implicit No nlinear Analysis (SOL 
400)
5.8.1  AnalysisStep Object Properties
AnalysisStep Objects are stored with their SetID eq ual to the ID of the an alysis set, CaseID equal 
to the analysis case, and StepID equal to the analys is step that you are trying to access. Note that 
the neither the analysis set, nor subcase is no t accessed from an AnalysisStep object. Those proper-
ties are directly available from the AnalysisMgr object or AnalysisCase object, respectively.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
Analysis Step Options - GeneralSTRING StepTitle[80] Title of analysis  step (maximum 80 characters).
STRING StepLabel[80] Label of analysis step (maximum 80 characters).INT4 CaseID ID of analysis case (subcase)
INT4 InternalStepIDID of analysis step stored w ithin FEMAP. It is highly recom-
mended to simply use “NextExmptyID” when creating a new step to avoid accidentally overwriting an existing step.
INT4 StepIDID of analysis step as seen in the user interface (i.e., ID of 
Step when written to the MSC Nastran SOL 400 input file)
BOOL UseGlobalStep Flag to use Global Step. True = Use Global StepINT4 GlobalStepID ID of Global Step to use when UseGlobalStep is True
enum StepAnalysisTypeAnalysis Type for Step (only u sed by certain solvers for cer-
tain analysis types). See “Ana lysis Types” in Section 3.3.7, 
"FEMAP Constants" for available enumerations.
 API-2144  
INT4 BCSet[0..20]
or
V ARIANT vBCSetSetIDs of load and constraint  sets for this step: [0]=Con-
straints, [1]=Constraint Equa tions, [2]=Loads, [3]=Initial 
Conditions, [4]=Master DOF, [5]=Base/Support DOF, 
[6]=Omit DOF, [7]=QSET DOF, [8]=CSET DOF, [9]=BSET DOF, [10]=Bolt Preloads, [11]=SUPORT1 DOF, [12]=Tem-
peratures, [13]=Connection Group (MSC Only), [14]=Loads 
(Time), [15]=Temperatures (Init) , [16]=Glue Set, [17]=Con-
tact Set, others not currently used.
INT4 Output[0..30]
or
V ARIANT vOutputOutput requests for this step: 0=off,-1=full model, 
>0=groupID,  [0]=Nodal App lied Load, [1]= Nodal Reaction 
Force, [2]=Nodal Displace ment, [3]=Nodal Velocity, 
[4]=Nodal Acceleration, [5]=No dal Temperature, [6]=Nodal 
Heat Flux, [7]=Nodal Constraint Equation Forces, [8]=Nodal 
Force Balance, [9]=Nodal Ki netic Energy, [15]=Element 
Force, [16]=Element Stress, [1 7]=Element Strain, [18]=Ele-
ment Plastic Strain, [19]=Element Strain Energy, [20]=Ele-
ment Heat Flux, [21]=Element Enthalpy, [22]=Element Enthalpy Rate, [23]=Element Contact, [24]=Element Tem-perature, [25]=Kinetic Energy, [26]=Energy Loss, [27]=Fluid 
Pressure, others not currently used.
STRING Echo[80] String for ECHO op tion (maximum 80 characters).
BOOL SkipStandard Flag to skip standard output for this step.
BOOL NasStepAlternateTextLocation Flag to  use Start Text Inside Step option.
INT4 StartText ID of starting text.INT4 EndText ID of ending text.
INT4 DestinationOutput destination: 0=De fault, 1=Print, 2=Post, 
3=Print+Post, 4=Punc h, 5=Punch+Post.
INT4 ImaginaryFormat for complex output: 0=Magnitude/Phase, 1=Real/
Imaginary.
INT4 CornerOutput Flag to requ est output at element corners.
INT4 IntegrationOutput Flag to request output at element integration points.
BOOL NasCurvatureStrainFlag to request Curvature Strain Results. True = Curvature, 
False = Fiber
NASTRAN Step OptionsAnalysis Step Options - NASTRAN SpecificBOOL NasOmodesOn Flag indicating an  OMODES request has been defined.
STRING NasOmodes[160] Expression used to select OMODES outputProperty Description
   API-2145
Analysis Case Options - Monitor Points
BOOL NasCaseMonitorEnabledFlag indicating Monitor Point Output Requests will be writ-
ten to the analysis case, when applicable
BOOL NasCaseMonitorAeroEnabled Flag to set Print Aero Mon itor Results option
BOOL NasCaseMonitorLoadEnabled Flag to set Print Load Monitor Results option
NASTRAN Modal Analysis - Step options
BOOL NasModeOnFlag indicating NASTRAN Mo dal Options have been 
defined for subcase
INT4 NasModeEigrSet SetID to be used for EIGR. 
INT4 NasModeMethodModal Solution method: 0=Gi vens,1=Modified Givens, 
2=Inverse Power, 3=Inverse Po wer/Strum, 4=Householder, 
5=Modified Householder, 6=Lanczos, 7=Hessenberg, 
8=Complex Inverse Power, 9=Complex Lanczos
BOOL NasModeSolutionType Solution type: False=Direct, True=Modal
REAL8 NasModeFreqRange[2]
or
V ARIANT vNasModeFreqRangeFrequency range of interest, [0]=Min, [1]=Max.
INT4 NasModeEstRoots Estimat ed number of eigenvalues.
INT4 NasModeDesiredRoots Number of desired eigenvalues/modes.INT4 NasModeNormOpt Normalizatio n method: 0=Mass,1=Max, 2=Point.
INT4 NasModeNormNode Node ID for u se with point normalization method.
INT4 NasModeNormDOF Nodal DOF for u se with point normalization method.
INT4 NasModeMassForm Mass matrix formula tion: 0=Default, 1= Lumped, 2=Coupled.
BOOL NasModesSkipEigrIf True, skips writing the EIGR card for specifying modal 
analysis options
REAL8 NasModeImagFreqRange[2]
or
V ARIANT vNasModeImagFreqRangeFor Complex Modes analysis, spec ifies the imaginary part of 
the Frequency Range of interest.
REAL8 NasModesComplexConverge Specifie s Complex Modes convergence value
REAL8 NasModesComplexRegion-
WidthSpecifies Region Width for Complex Modes analysis.
REAL8 NasModeDampOverall Specifies PARAM,G
MSC NASTRAN Implicit Nonlinear (SOL 400) - Control ParametersProperty Description
 API-2146  
BOOL NasInlStepOptOnFlag indicating Control Parame ters for Implicit Nonlinear 
Analysis have been defined for the subcase
BOOL NasInlStepOptSkipNLSTEP Flag to disab le writing of NLSTEP for this subcase
INT4 NasInlStepOptID ID of NLSTEP for this subcaseControl Parameters - Step ParametersREAL8 NasInlStepOptTOTTIM Total Time (TOTTIM) value
INT4 NasInlStepOptCTRLDEFSpecifies Nonlinearity (CTRLDEF) option:
0=Default
1=Linear2=Mildly Nonlinear
3=Severely Nonlinear
Control Parameters - General ParametersINT4 NasInlStepOptMAXITER Max Iter ations/Increment (MAXITER) value
INT4 NasInlStepOptMINITER Min Iter ations/Increment (MINITER) value
INT4 NasInlStepOptMAXBIS Max Bise ctions for Step (MAXBIS) value
BOOL NasInlStepOptCREEP Flag to enable Include Creep (CREEP) optionControl Parameters - Analysis Parameter
INT4 NasInlStepOptLoadSteppingSpecifies Increment Type option:
0=Fixed
1=Adaptive2=Arc-Length
Control Parameters - Analysis Parameters - Fixed Time Stepping ParametersINT4 NasInlStepOptNINC Number of Increments (NINC) value
INT4 NasInlStepOptNO Outpu t Interval (NO) value
Control Parameters - Analysis Parameters - Adaptive Load Stepping ParametersREAL8 NasInlStepOptDTINITF Initial Fraction (DTINITF) valueREAL8 NasInlStepOptDTMINF Min Fraction (DTMINF) valueREAL8 NasInlStepOptDTMAXF Max Fraction (DTMAXF) valueREAL8 NasInlStepOptSFACT Increase Factor (SFACT) valueINT4 NasInlStepOptADJUST Auto Skip Factor (ADJUST) valueINT4 NasInlStepOptMSTEP Dominant Pe riod Resp. Steps (MSTEP) value
REAL8 NasInlStepOptRB Adaptive Time Step Bound (RB) valueProperty Description
   API-2147
INT4 NasInlStepOptNDESIR Desired Iterations/Increments (NDESIR) value
INT4 NasInlStepOptNSMAX Max Increments (NSMAX) value
REAL8 NasInlStepOptUTOL Displacement Tolerance (UTOL) value
INT4 NasInlStepOptIDAMPSpecifies Static Damping (IDMAP) option:
0=No Added Damping
4=Time Step Control Using Damping
5=Damping-based Time Step Control with No Damping
6=Add Damping when Minimum Time Step is Reached
REAL8 NasInlStepOptDAMP Damping Ratio (DAMP) value
INT4 NasInlStepOptINTOUTSpecifies Output Flag (INTOUT) option:
-1=Last Increment
0=Every Load Increment>0=Equally Spaced Intervals (value is used to specify value 
for Output Every Nth Step) 
Adaptive Load Stepping Parameters - Criteria
BOOL NasInlStepOptEnableCriteria Flag to enable the Enable User Criteria option
INT4 NasInlStepOptIPHYSSpecifies Physical Criteria (IPHYS) option:
-2=No Auto Physical Criteria; Continue When User Criteria 
Exceeded-1=Add Auto Physical Criteria; Continue When User Criteria 
Exceeded
1=1..No Auto Physical Criteria; Stop When User Criteria Exceeded
2=2..Add Auto Physical Criteria; Stop When User Criteria 
Exceeded
INT4 NasInlStepOptLIMTARSpecifies Definition (LIMTAR) option:
0=Criteria as Limits
1=Criteria as Targets
REAL8 NasInlStepOptRSMALL Min. Ratio (RSMALL) valueREAL8 NasInlStepOptRBIG Max Ration (RBIG) valueProperty Description
 API-2148  
BOOL NasInlStepOptIncrements[0..9]Flag in Status column of row specified by zero-based index 
value in list of Criteria. When  True, Criterion is enabled.
0=Elem. Strain
1=Elem. Plastic Strain2=Elem. Creep Strain
3=Elem. Normalized Creep Strain
4=Elem. Strain Energy5=Elem. Stress
6=Elem. Normalized Stress
7=Nodal Temperature8=Nodal Displacement
9=Nodal Rotation
INT4 NasInlStepOptGroupIDs[0..9]ID of existing Group in Group column of row specified by 
zero-based index value in list of Criteria. For description of 
each row, See NasInlStepOptIncrements.
REAL8 NasInlStepOptYT1_i[0..9]Value in Y1 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT1_i[0..9]Value in M1 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptYT2_i[0..9]Value in Y2 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT2_i[0..9]Value in M2 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptYT3_i[0..9]Value in Y3 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT3_i[0..9]Value in M3 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptYT4_i[0..9]Value in Y4 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT4_i[0..9]Value in M4 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
Control Parameters - Analysis Parameters - Arc-Length Load Stepping ParametersProperty Description
   API-2149
INT4 NasInlStepOptTYPESpecifies Constraint Type option:
0=Crisfield
1=Riks
2=Modifed Riks
REAL8 NasInlStepOptDTINITFA Initial Time Step Fraction (DTINITFA) valueREAL8 NasInlStepOptMINALR Min ArcL enAdjust Ratio (MINALR) value
REAL8 NasInlStepOptMAXALR Max ArcLenAdjust Ratio (MAXALR) valueREAL8 NasInlStepOptSCALEA Scale Factor (SCALEA) valueINT4 NasInlStepOptNDESIRA Desired Iterations (NDESIRA) valueINT4 NasInlStepOptNSMAXA Max Increments (NSMAXA) valueControl Parameters - Analysis Parameters - Mechanical Analysis ParametersBOOL NasInlStepOptMECH Flag to enable the Enable MECH option
INT4 NasInlStepOptKMETHODSpecifies Method (KMETHOD) option:
0=Full Newton-Raphson1=Quasi Newton-Raphson
INT4 NasInlStepOptKSTEP Iter ation Interval (KSTEP) value
INT4 NasInlStepOptMAXQN QN Vectors (MAXQN) valueINT4 NasInlStepOptMAXLS Max Line Searches (MAXLS) valueREAL8 NasInlStepOptLSTOL Line Search Tol (LSTOL) valueREAL8 NasInlStepOptFSTRESS Fraction Limit (FTRESS) valueBOOL NasInlStepOptConvU Flag to enable Displacement optionREAL8 NasInlStepOptEPSU Displacement valueBOOL NasInlStepOptConvP Flag  to enable Load option
REAL8 NasInlStepOptEPSP Load valueBOOL NasInlStepOptConvW Flag  to enable Work option
REAL8 NasInlStepOptEPSW Work valueBOOL NasInlStepOptConvV Flag to enable Vector optionBOOL NasInlStepOptConvN Flag  to enable Length option
BOOL NasInlStepOptConvA Flag to enable Automatic Switching optionProperty Description
 API-2150  
INT4 NasInlStepOptMRCONVSpecifies Checking (MRCONV) option:
0=Forces, Moments, Displacements, and Rotations
1=Forces, Moments, and Displacements
2=Forces, Displacements, and Rotations3=Forces and Displacements
MSC Nastran Boundary Conditions
INT4 ContactOptionBoundary Conditions dialog bo x for MSC Nastran Only. Sets 
BCONTACT Option (0=Default, 1=Inital Contact, 2=All 
Body, 3=Auto) 
INT4 ContactSetTypeBoundary Conditions dialog bo x for MSC Nastran Only. Sets 
Contact/Glue Sets option (0=A ll Connectors, 1=Connection 
Group, 2=All Body). ID of group for Connection Group set 
using BCSet[13]Property Description
InitAnalysisStep   API-2151
5.8.2  AnalysisStep Object Methods
In addition to the standard methods, th e following methods are also available.
5.8.2.1   InitAnalysisStep
InitAnalysisStep
( nSetID, nCaseID, nStepID )
Description:This method initializes the defau lt values for an analysis step
Input:INT4 nSetID The Analysis Set ID (SetID ) containing the case to be initialized
INT4 nCaseID The Analysis Case ID (CaseID ) containing the step to be initialized
INT4 nStepID The Analysis Step ID (StepID) to be initialized
Output:NoneReturn Value
FE_FAILUnable to initialize the case. Probabl y the Analysis Set or Analysis 
Case you specified does not exist.
Remarks/Usage:NoneExample:None
 API-2152  DeleteAnalysisStep
5.8.2.2  DeleteAnalysisStep
DeleteAnalysisStep
( nSetID, nCaseID, nStepID )
Description:Use this method to delete an analysis step.Input:INT4 nSetID The Analysis Set ID (SetID ) containing the case to be deleted
INT4 nCaseID The Analysis Case ID (CaseID ) containing the step to be initialized
INT4 nStepID The Analysis Step  ID (StepID) to be deleted
Output:NoneReturn ValueFE_FAILRemarks/Usage:This method takes care  of deleting any start/end text or Marc contact table records that referenced the 
case.
Example:None
ActiveContactEntities   API-2153
5.8.2.3  ActiveC ontactEntities
ActiveContactEntities
( bContact, nConnectorSetID, nRegionSetID, nConPropSetID )
Description:This method is used to populate Set Objects with the Connectors, Connection Regions, and Connection 
Properties that will be exported for Contact or Glue Co ntact by an analysis step. This method takes into 
consideration the settings in  the Contact Sets or Glue  Sets section of the Boun dary Conditions dialog 
box for Simcenter SOL 401/402 or setting for Contact/G lue Sets of the Boundary Conditions dialog box 
for MSC Nastran
Input:
BOOL bContactIf True, populates sets with connecti on entities for Contact. If False, 
populates sets with connectio n entities for Glued Contact
INT4 nConnectorSetIDSet ID of Set Object to popula te with Connectors which will be 
exported by this analysis step
INT4 nRegionSetIDSet ID of Set Object to populate  with Connection Regions which will 
be exported by this analysis step
INT4 nConPropSetIDSet ID of Set Object to populate  with Connection Properties which 
will be exported by this analysis step
Output:NoneReturn ValueFE_FAIL No Connection Re gions were detected.
Remarks/Usage:It is important to use three unique s Set Objects when usin g this method, otherwise the IDs of different 
entity types may contaminate a Set. Also, it is recommend to  use “empty sets” to insure that only the 
Connection entities from a single anal ysis step populate the three sets.
Example:None
 API-2154  
5.9  AnalysisStudy Objects
AnalysisStudy objects correspond to the analysis studies in your model. They are derived from 
Entity objects, so in addition to  the properties and methods describ ed here, essentially all of the 
properties and methods defined for Entity objects ar e also available for Anal ysisStudy objects. For 
more information, see Section 5.1, "Common Entity Proper ties and Methods".
Use the feAnalysisStudy method of the FEMAP Application object to create AnalysisStudy 
objects.
5.9.1  AnalysisStudy Object Properties
AnalysisStudy objects are always stored with thei r SetID = 1, and the ID equal to the analysis 
study that you are trying to access. AnalysisStudy objects do not contain an y of the actual results 
data or output sets; they simply contain th e header information fo r the analysis study.
Output Sets are “added” to an analysis study by specifying the Analysis Study ID on the output set 
(“study” property on the OutputSet object).
Property Description
STRING Title Analysis Study title (maximum 79 characters).
INT4 AnalysisProgAnalysis program where output came from: 0=Unknown, 
4=MSC/NASTRAN, 5=ANSYS, 16=ABAQUS, 28=LS-Dyna, 29=MSC.Marc, 31=NE/Nastran, 34=FEMAP Struc-
tural. 36=NX Nastran. Use enum zAnalysisProgram
INT4 AnalysisTypeType of analysis the results came from: 0=None, 1=Static, 
2=Normal Modes/Eigenvalue, 3=Transient Dynamic/Time History, 4=Frequency/Harmonic  Response, 5=Response Spec-
trum, 6=Random Response, 7=Buckling, 8=Design Opt, 
9=Explicit Transient Dynamics, 10=Nonlinear Static, 11=Nonlinear Buckling, 12=Non linear Transient, 13=Implicit 
Transient Dynamics, 17=Fatigue, 19=Computational Fluid 
Dynamics, 20=Steady-State Heat Transfer, 21=Transient Heat Transfer, 22=Advanced Nonlinear Static, 23=Advanced Non-
linear Transient, 24=Advanced Nonlinear Explicit, 25=Static 
Aeroelasticity, 26=Aer odynamic Flutter. 
Use enum zAnalysisType
INT4 FileTimeReturns time as an integer which can be mapped to “Windows 
Time” (time_t data type) us ing certain programming lan-
guages.
STRING NotesOne or more lines of text. Maximum 256 characters. Each line 
is separated by a CR-LF (0x0D,  0x0A) character pair. The end 
of the string is terminated by a NULL character.
INT4 AnalysisSetID of the FEMAP Analysis Set, if the input file created using 
the Analysis Set Manager and au tomatic creation of studies is 
enabled. If 0, the input file was likely created in a different 
manner or the analysis st udy was created manually.
CountOutputSets   API-2155
5.9.2  AnalysisSt udy Object Methods
5.9.2.1  CountOutputSets
CountOutputSets
( void )
Description:This method returns the number of output sets which reside in an analysis study.
Input:NoneOutput:NoneReturn Code:
INT4 countThe number of output sets in the anal ysis study currently in the Anal-
ysisStudy object. If 0, no output sets are in the analysis study.
Remarks/Usage:
Example:
 API-2156  OutputSets
5.9.2.2  OutputSets
OutputSets
( nOuptutSetSetID )
Description:This method loads an existing Set object with the ou tput set IDs for the analysis study currently loaded 
in the AnalysisStudy object
Input:
INT4 nOutputSetSetIDThe ID of a Set object to be filled with output set IDs currently resid-
ing an analysis study.
Output:NoneReturn Code:
Remarks/Usage:
Example:
HasOutputSet   API-2157
5.9.2.3  HasOutputSet
HasOutputSet
( nSetID )
Description:This method returns a Boolean indica ting if the specified output set reside  in the analysis  study currently 
loaded in the Anal ysisStudy object.
Input:INT4 nSetID The ID of an output setOutput:NoneReturn Code:
BOOLTrue = output set resides in analysis study, False = output set does 
not reside in analysis study
Remarks/Usage:
Example:
 API-2158  AddOutputSets
5.9.2.4  AddOutputSets
AddOutputSets
( nSetID )
Description:The method adds all output sets in a set object to an analysis study
Input:
INT4 nSetIDThe ID of a Set that contains output  set IDs to add to analysis study. 
Alternatively, if you specify a negative  value, this is simply the ID of 
a single output set to ad d to the analysis study.
Output:NoneReturn Code:
None
Remarks/Usage:
Example:
RemoveOutputSets   API-2159
5.9.2.5  RemoveOutputSets
RemoveOutputSets
( nSetID )
Description:The method removes all output sets in a set object from an analysis study
Input:
INT4 nSetIDThe ID of a Set that contains output set IDs to remove from analysis 
study. Alternatively, if you specif y a negative value, this is simply 
the ID of a single output set to  remove from the analysis study.
Output:NoneReturn Code:
None
Remarks/Usage:
Example:
 API-2160  RemoveAllOutputSets
5.9.2.6  RemoveAllOutputSets
RemoveAllOutputSets
( void )
Description:The method removes all output sets from an analysis study
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:
Example:
Delete   API-2161
5.9.2.7  Delete
Delete
( nSetID )
Description:The method deletes all analysis studies in a set ob ject from the model and optio nally delete the output 
sets in those studies from the model at the same time.
Input:
INT4 nSetIDThe ID of a Set that contains anal ysis study IDs to delete from the 
model. Alternatively, if you specif y a negative value, this is simply 
the ID of a single analysis set to delete from the analysis study.
BOOL bDeleteOutputWhen True, will also delete any outp ut sets currently residing in an 
analysis study which is deleted. Wh en False, output sets will remain 
in the model.
Output:
None
Return Code:NoneRemarks/Usage:
Example:
 API-2162  Property
5.10  BCDefinition Objects
BCDefinition objects correspond to th e constraint definitions in your model. They group individ-
ual constraints into related sets and provide a title for the set. They are de rived from Entity objects, 
so in addition to the propertie s and methods described here, a ll of the properties and methods 
defined for Entity objects are also available for BCDefinition objects. For more information, see 
Section 5.1, "Common Entity  Properties and Methods". 
Use the feBCDefinition method of  the FEMAP Application object  to create BCDefinition objects.
5.10.1  BCDefinition Object Properties
BCDefinition objects are always stored with their SetID equal to the setID of the constraint set; 
however, their IDs simply go from 1 to N. To fi nd a particular object, you must retrieve each 
object in the set and check the constraints it contains.
Property Description
STRING title Constraint Definition title.
INT4 OnTypeThe type of entity that the cons traint is applied to in this 
constraint definition. For more information on Entity 
Types refer to the table in S ection 3.3.6, "Entity Types". 
This must be FT_POINT, FT_CURVE, FT_SURFACE or 
FT_NODE.
INT4 DataTypeThe type of entities that are referenced by this constraint 
definition. For more informa tion on Entity Types refer to 
the table in Section 3.3.6, "E ntity Types". This must be 
FT_BCO, FT_BCO_GEOM or FT_BEQ
PutAll   API-2163
5.10.2  BCDefinition Object Methods
5.10.2.1  PutAll
PutAll
( entID, enDataType, enOnType, sTitle  )
Description:This method stores a Constraint De finition with the specified ID alon g with all the available options.
Input:INT4 entID The ID of the Co nstraint Definition to store.
INT4 DataType
Refer to the property descrip tions for each of these items. INT4 OnType
STRING Title
Output:
NoneReturn Code:FE_FAIL Unable to store the entity with the specified IDRemarks/Usage:Unlike the standard Put method, th is function loads all of the properties as arguments. If you are updat-
ing all of the properties before stor ing an entity, this function will be f aster than multiple  calls to load 
each property individually.
Example:None
 API-2164  ResetNextBC
5.10.2.2  ResetNextBC
ResetNextBC
( void )
Description:This method initializes all options prior to calling the “NextBC” method below
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:This method is used prior to ca lling NextBC to specify which constrai nts will be retrieved. It simply 
resets this object so that the next call to NextBC wi ll return the first constraint available in the object.
Example:
NextBC   API-2165
5.10.2.3  NextBC
NextBC
( pDISPATCH )
Description:This method returns the next available constraint  that is contained in the Constraint Definition
Input:NoneOutput:
OBJECT pDISPATCHThe next constraint object. Depending on the type of the constraint 
definition this could be a BCN ode, BCGeom or BEqn object
Return Code:
FE_FAILThere are no more constraints of the specified type to retrieve. Call 
ResetNextBC to go back to the first constraint, if you want to retrieve 
the constraints again.
Remarks/Usage:This method, coupled with  ResetNextBC provides an easy way to retrieve all constraints from a Con-
straint Definition. 
For any method where API obje cts are returned as parameters, such as this one, it is your responsibility 
to free that object when you are finished using the object. Some pr ogramming languages like Basic will 
do this automatically, but others lik e C++, require you to do this manu ally. The objects are only created 
or returned when the Return Code is FE_OK.
Example:
 API-2166  CountBCs
5.10.2.4  CountBCs
CountBCs
( void )
Description:This method returns the number of constraints referenced by a constr aint definition, as a return code.
Input:NoneOutput:NoneReturn Code:INT4 numBCs The number of constraints re ferenced by this constraint definition.
Remarks/Usage:This method relies on the curre nt Constraint Definition ID to count the referenced constraints
Example:
   API-2167
5.11  BCEqn Objects
BCEqn objects correspond to the co nstraint equations in your model. They are derived from Entity 
objects, so in addition to the properties and methods  described here, all of the properties and meth-
ods defined for Entity objects are also available fo r BCEqn. For more information, see Section 5.1, 
"Common Entity Proper ties and Methods". 
Use the feBCEqn method of the FEMAP App lication object to create BCEqn objects.
5.11.1  BCEqn Object Properties
BCEqns are always stored with their SetID equal to  the setID of the constr aint set; however, their 
IDs simply go from 1 to N. To find a particular ob ject, you must retrieve ea ch object in the set and 
check its nodes.
When you create a new BCEqn, it will always refe rence the active constraint set. You can change 
the set that it references simply by changing the setID  parameter.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
INT4 dof[0..5999]
or
V ARIANT vdofAn integer from 1 to 6 indicatin g the DOF associated with the 
corresponding term in the equation.
INT4 node[0..5999]
or
V ARIANT vnodeThe node ID referenced by  each term in the equation.
REAL8 coefficient[0..5999]
orV ARIANT vcoefficientThe coefficient associated with each term in the equation.
INT4 color The constraint color.
INT4 layer The ID of the layer associated with the constraint.
INT4 BCDefinitionIDThe ID of the constraint definition  that contains this constraint 
(0=None)
Additional Properties
INT4 countThe number of nonzero terms in the equation. This property is 
read-only and cannot be changed.
 API-2168  GetAll
5.11.2  BCEqn Object Methods
5.11.2.1  GetAll
GetAll
( nID, nSetID, pnDefID, pnCount, pvNode, pvDof, pvCoeff, peColor, pnLayer  )
Description:Retrieves all constraint equation properties in a single callInput:INT4 nID ID of Constraint equationINT4 nSetID ID of Constraint setOutput:INT4 pnDefID ID of Constraint definition
INT4 pnCount Number of terms in constraint equation
INT4 pvNode [0..nCount-1] Array containing node IDsINT4 pvDof [0..nCount-1] Array containing DOFsREAL8 pvCoeff [0..nCount-1] Array containing CoefficientsINT4 peColor Color of constraint equationINT4 pnLayer Layer of constraint equationReturn Code:FE_NOT_EXIST Constraint equation does no t exist in the specified constraint set
Remarks/Usage:
Example:
None
PutAll   API-2169
5.11.2.2  PutAll
PutAll
( nID, nSetID, nDefID, nCount, vNode, vDof, vCoeff, eColor, nLayer  )
Description:Sets all constraint equation properties in a single call,Input:INT4 nID ID of Constraint equationINT4 nSetID ID of Constraint set. If non-existing, one is created
INT4 nDefIDID of Constraint definition. If non-e xisting, one is created. If exist-
ing, must be a nodal constraint equation definition
INT4 nCount Total number of terms in the constraint equationINT4 vNode [0..nCount-1] Array containing node IDsINT4 vDof [0..nCount-1] Array containing DOFs, corresponding to each nodeREAL8 vCoeff [0..nCount-1] Array containing  Coefficients, corresponding to each node
INT4 eColor Color of constraint equationINT4 nLayer Layer of constraint equationOutput:Return Code:FE_FAIL Specified layer doesn't existFE_INV ALID Set or Definition ID is invalidFE_NOT_EXIST One or more nodes in the node array does not exist
FE_TOO_SMALLInsufficient terms (< 2) have been supplied for the constraint equa-
tion
FE_BAD_DATA Array for nodes, DOFs, or coefficients is invalid
FE_BAD_TYPEDefinition ID exists in the current constraint set, however is invalid 
for constraint equations
Remarks/Usage:
Example:
None
 API-2170  NextOnNode
5.11.2.3  NextOnNode
NextOnNode
( nodeSET )
Description:Gets the next constraint equation that is defined on a selected set of nodes.Input:
INT4 nodeSETThe ID of a Set object that contai ns the IDs of the entities to be 
searched. Alternatively, if you specif y a negative value, this is simply 
the ID of the single entity to search.
Output:NoneReturn Code:
FE_FAILNo additional constraint equations can be found in this Constraint 
Set
Remarks/Usage:Before calling this method, the setID property of the object must be defined to search  the desired Con-
straint Set. Also, you should call Reset before the first call to this method so it will retrieve the first 
available load.
Example:Retrieve all of the constraint equations in Constraint Set 7, defined on Surfaces 1 and 2:
    Dim b As femap.BCEqn
    Set b = App.feBCEqn    Dim s As femap.Set
    Set s = App.feSet
    s.AddRange(  1, 2, 1 )
    b.SetID = 1
    b.Reset()
    While b.NextOnNode( s.ID ) = FE_OK
        . . .    Wend
   API-2171
5.12  BCGeom Objects
BCGeom objects correspond to the geometry-based constraints in your model. They are derived 
from Entity objects, so in  addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are also available for BCGeom. For more information, 
see Section 5.1, "Common Entity Properties and Methods".
Use the feBCGeom method of the FEMAP App lication object to cr eate BCGeom objects.
5.12.1  BCGeom Ob ject Properties
BCGeoms are always stored with their SetID equa l to the setID of the constraint set; however, 
their IDs simply go from 1 to  N. To find a particular object, you must retrieve each object in the set 
and check its geomID and geomType.
When you create a new BCGeom, it will always re ference the active constraint set. You can 
change the set that it references simp ly by changing the setID parameter.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
BOOL dof[0..5]
or
V ARIANT vdofAn array of flags telling whether or not the corresponding 
degrees of freedom are constrained (True) or free (False), in 
this set.
INT4 color The constraint color.INT4 layer The ID of the layer associated with the constraint.
BOOL expanded True if this geometry-based constraint is currently expanded.
INT4 geomTypeThe type of geometry that is constrained by this object: 
3=Point, 4=Curve, 5=Surface.
INT4 geomID The ID of the geometry th at is constrained by this object.
INT4 typeThe type of constraint being applied (0=DOF Pinned or Fixed, 
1=General 6 DOF Control in output_sys, 2=Constrained normal 
to surface, 3=Constrained in all “in-surface” directions, 4=Allow sliding in a direction,  5=Cylinder, dof control direc-
tions)
REAL8 direction[0..2]
orV ARIANT vdirectionThe direction of sliding for type=4 constraints.
INT4 outCSys ID of constraint coordinate system for type=1 constraints.
INT4 BCDefinitionIDThe ID of the constraint definition  that contains this constraint 
(0=None)
Additional Properties
 API-2172  
BOOL dofvec[0..5]Accesses all six components of the dof vector and returns them 
as a variant. Same as using dof independently.Property Description
GetSearch   API-2173
5.12.2  BCGeom Object Methods
5.12.2.1  GetSearch
GetSearch
( geomType, geomID )
Description:This method searches for and retrie ves an entity that is constraini ng a specified geometric entity. 
Input:INT4 geomType Type of geometry being co nstrained: 3=Point, 4=Curve, 5=Surface.
INT4 geomID ID of geometry being constrained.Output:None
Return Code:
FE_FAIL The specified entity does not exist or is not constrained.
Remarks/Usage:Since BCGeom objects are not stored by a specified ID, but rather in sequential order, the normal Get 
method may not be useful if you are trying to find  the constraints on a spec ific geometric entity. The 
only way to do that would be to Get every constraint and check for the geometry that you want. This method does that for you. You specify the geometry you want to search for, and it returns the constraints 
on that entity. Be aware that this method does still search the entire set. If you are going to retrieve con-
straints on a large number of geomet ry entities, it could be faster to re trieve them all using Get, and dis-
card the ones you do not want.
Example:None
 API-2174  SetSurfSliding
5.12.2.2  SetSurfSliding
SetSurfSliding
( INT4 surfID )
Description:This method initializes the current obje ct to allow sliding along a surface. 
Input:INT4 surfID The ID of the surface to slide alongOutput:NoneReturn Code:NoneRemarks/Usage:This method does not store the co nstraint. You must still call Put to do that. It simply initializes the 
properties necessary to define this type of constraint.
Example:None
SetSurfNormal   API-2175
5.12.2.3  SetSurfNormal
SetSurfNormal
( INT4 surfID )
Description:This method initializes the current object to allow movement normal to a surface. 
Input:INT4 surfID The ID of the surface to move normal to.Output:NoneReturn Code:NoneRemarks/Usage:This method does not store the co nstraint. You must still call Put to do that. It simply initializes the 
properties necessary to define this type of constraint.
Example:None
 API-2176  SetSurfDirection
5.12.2.4  SetSurfDirection
SetSurfDirection
( INT4 surfID, REAL8 x, REAL8 y, REAL8 z )
Description:This method initializes the current object to allow sliding of a su rface in a specified direction. 
Input:INT4 surfID The ID of the surface to slideREAL8 x The Global X component of the permitted sliding directionREAL8 y The Global Y component of the permitted sliding directionREAL8 z The Global Z component of  the permitted sliding direction
Output:NoneReturn Code:NoneRemarks/Usage:This method does not store the co nstraint. You must still call Put to do that. It simply initializes the 
properties necessary to define this type of constraint.
Example:None
SetCylinder   API-2177
5.12.2.5  SetCylinder
SetCylinder
( INT4 surfID, BOOL radius, BOOL rotation, BOOL sliding )
Description:This method initializes the current object to allow sliding of a su rface in cylindrical directions. 
Input:INT4 surfID The ID of the surface to slideBOOL radius If True, allow growth of the radius of the cylinder.BOOL rotation If True, allow rotation around the axis of the cylinder.
BOOL sliding If True, allow slidin g along the axis of the cylinder.
Output:NoneReturn Code:FE_FAIL The specified surface is not cylindrical.Remarks/Usage:This method does not store the co nstraint. You must still call Put to do that. It simply initializes the 
properties necessary to define this type of constraint.
Example:None
 API-2178  SetFixed
5.12.2.6  SetFixed
SetFixed
( geomType , geomID )
Description:This method initializes the current  object to apply “Fixed” bou ndary conditions (All 6 DOFs con-
strained) on a geometric en tity of the specified type
Input:
INT4 geomTypeThe type of entity to constrain. Fo r entity information, see page 176. 
Can be 3=Point (FT_POINT), 4=Cu rve (FT_CURVE), or 5=Surface 
(FT_SURFACE).
INT4 geomID The ID of the point,  curve, or surface to constrain
Output:NoneReturn Code:FE_INV ALID The specified geomType is  not a point, curve, or surface
FE_NOT_EXIST The specified point, cu rve, or surface ID does not exist
Remarks/Usage:This method does not store the co nstraint. You must still call Put to do that. It simply initializes the 
properties necessary to define this type of constraint.
Example:None
SetPinned   API-2179
5.12.2.7  SetPinned
SetPinned
( geomType , geomID )
Description:This method initializes the current object to apply “Pinned” boundary  conditions (constrains the 3 trans-
lational DOFs) on a geometric entity of the specified type
Input:
INT4 geomTypeThe type of entity to constrain. Fo r entity information, see page 176. 
Can be 3=Point (FT_POINT), 4=Cu rve (FT_CURVE), or 5=Surface 
(FT_SURFACE).
INT4 geomID The ID of the point,  curve, or surface to constrain
Output:NoneReturn Code:FE_INV ALID The specified geomType is  not a point, curve, or surface
FE_NOT_EXIST The specified point, cu rve, or surface ID does not exist
Remarks/Usage:This method does not store the co nstraint. You must still call Put to do that. It simply initializes the 
properties necessary to define this type of constraint.
Example:None
 API-2180  SetNoRotation
5.12.2.8  SetNoRotation
SetNoRotation
( geomType , geomID )
Description:This method initializes the current object to apply “No Rotation” boun dary conditions (constrains the 3 
rotational DOFs) on a geometric entity of the specified type
Input:
INT4 geomTypeThe type of entity to constrain. Fo r entity information, see page 176. 
Can be 3=Point (FT_POINT), 4=Cu rve (FT_CURVE), or 5=Surface 
(FT_SURFACE).
INT4 geomID The ID of the point,  curve, or surface to constrain
Output:NoneReturn Code:FE_INV ALID The specified geomType is  not a point, curve, or surface
FE_NOT_EXIST The specified point, cu rve, or surface ID does not exist
Remarks/Usage:This method does not store the co nstraint. You must still call Put to do that. It simply initializes the 
properties necessary to define this type of constraint.
Example:None
SetArbitrary   API-2181
5.12.2.9  SetArbitrary
SetArbitrary
( geomType , geomID, csysID, DOF1, DOF2, DOF3, DOF4, DOF5, DOF6 )
Description:This method initializes the current ob ject to apply boundary conditions in a specified coordinate system, 
using the selected DOF, on a geometric entity of the specified type
Input:
INT4 geomTypeThe type of entity to constrain. Fo r entity information, see page 176. 
Can be 3=Point (FT_POINT), 4=Cu rve (FT_CURVE), or 5=Surface 
(FT_SURFACE).
INT4 geomID The ID of the point,  curve, or surface to constrain
INT4 csysIDThe ID of a coordinate system. Specify -1 to use the output coordi-
nate of each node associated to the specified geometric entity.
BOOL DOF1 True = TX constrained in co ordinate system specified in csysID
BOOL DOF2 True = TY constrained in co ordinate system specified in csysID
BOOL DOF3 True = TZ constrained in coor dinate system specified in csysID
BOOL DOF4 True = RX constrained in co ordinate system specified in csysID
BOOL DOF5 True = RY constrained in co ordinate system specified in csysID
BOOL DOF6 True = RZ constrained in coordinate system specified in csysIDOutput:NoneReturn Code:FE_INV ALID The specified geomType is  not a point, curve, or surface
FE_NOT_EXIST The specified point, cu rve, or surface ID does not exist
FE_NOT_A V AILABLE The specified coordinate system does not exist or cannot be used
Remarks/Usage:This method does not store the co nstraint. You must still call Put to do that. It simply initializes the 
properties necessary to define this type of constraint.
Example:None
 API-2182  NextOnEntity
5.12.2.10  NextOnEntity
NextOnEntity
( geomTYPE, geomSET )
Description:Gets the next constraint that is define d on a selected set of geometric entities.
Input:
INT4 geomTYPEThe type of geometry where the co nstraints are defined. Must be 
Point, Curve, or Surface. For entity  information, see Section 3.3.6, 
"Entity Types".
INT4 geomIDThe ID of a Set object that contai ns the IDs of the entities to be 
searched. Alternatively, if you specif y a negative value, this is simply 
the ID of the single entity to search.
Output:
None
Return Code:FE_BAD_TYPE geomTYPE is not one of the available entity typesFE_FAIL No additional loads can be found in this Load Set
Remarks/Usage:Before calling this method, the setID property of the object must be defined to search  the desired Con-
straint Set. Also, you should call Reset before the first call to this method so it will retrieve the first 
available load.
Example:Retrieve all of the constraints in Constraint Set 7, defined on Surfaces 1 and 2:
    Dim b As femap.BCGeom
    Set b = App.feBCGeom
    Dim s As femap.Set    Set s = App.feSet
    s.AddRange(  1, 2, 1 )    b.SetID = 1
    b.Reset()    While b.NextOnEntity( FT_SURFACE, s.ID ) = FE_OK
       . . .
    Wend
   API-2183
5.13  BCNode Objects
BCNode objects correspond to the nodal constraints in your model. They are derived from Entity 
objects, so in addition to the properties and methods  described here, all of the properties and meth-
ods defined for Entity objects ar e also available for BCNodes. For more information, see Section 
5.1, "Common Entity Pr operties and Methods".
Use the feBCNode method of the FEMAP App lication object to create BCNode objects.
5.13.1  BCNode Object Properties
BCNodes are always stored with their SetID equal to the setID of the constraint set, and the ID 
equal to the node ID.
When you create a new BCNode, it will always refe rence the active constraint  set. You can change 
the set that it references simply by changing the setID  parameter.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
BOOL dof[0..5]
or
V ARIANT vdofAn array of flags telling whether or not the corresponding 
degrees of freedom are constrained (True) or free (False) in this 
set.
INT4 color The constraint color.INT4 layer The ID of the layer associated with the constraint.
BOOL expandedTrue if this is a constraint from an expanded geometric con-
straint.
INT4 BCDefinitionIDThe ID of the constraint definition  that contains this constraint 
(0=None)
BOOL NonZeroConstraint True if constraint is a NonZero constraint
REAL8 value[0..5]
orV ARIANT vvalueAn array of values containing the non-zero values at each corre-
sponding degrees of freedom. NonZ eroConstraint must be True 
and each DOF must also be cons trained using dof or vdof when 
creating a new NonZero Constraint when only using BCNode 
object properties
Additional Properties
BOOL dofvec[0..5]Accesses all six components of the dof vector and returns them 
as a Variant. Same as using dof independently.
 API-2184  Add
5.13.2  BCNode Object Methods
5.13.2.1  Add
Add
( setID, bDOF1, bDOF2, bDOF3, bDOF4, bDOF5, bDOF6 )
Description:This method creates nodal constraints on all selected nodes. Input:
INT4 setIDThe ID of a Set object that contains the nodes to constrain. Alterna-
tively, if you specify a negative value,  this is simply the ID of the sin-
gle node to constrain.
BOOL bDOF1
The constraints to apply to the nodes. If True, the corresponding 
degree of freedom is constrained.BOOL bDOF2
BOOL bDOF3BOOL bDOF4BOOL bDOF5BOOL bDOF6Output:NoneReturn Code:FE_FAIL The Constraints could not be created.Remarks/Usage:Prior to using this method, you must properly specify the other parameters  in the object - such as, color, 
layer and setID, and any other types required for your constraints. This method simply uses the data you 
specify here to overwrite specifi c values in the BCNode object, and create a new constraint for each 
entry in the set of nodes.
Example:None
AddArray   API-2185
5.13.2.2  AddArray
AddArray
( count, doDOF, NodeID, DOF )
Description:This method creates multiple nodal constraints. This method is obso lete and should be replaced by 
PutArray.
Input:
INT4 countThe number of constraints to creat e, and the number of IDs in 
NodeID
BOOL doDOFIf True, then the DOF array must contain degree-of-freedom flags to 
be used. If False, then whatever is  specified in the current object is 
used and DOF is ignored
INT4 NodeID[0..count-1]The Node IDs where constraints will be created. One constraint is 
created on each ID.
INT4 DOF[0..(6*count)-1]Flags specifying constraints on each specified node. 6 flags per node.   
Refer to “dof” property.
Output:NoneReturn Code:FE_FAIL The Constraints could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, you must properly specify the other parameters  in the object - such as, color, 
layer and setID, and any other types required for your constraints. This method simply uses the data you specify here to overwrite specifi c values in the BCNode object, and create a new constraint for each 
entry in the arrays.
Example:None
 API-2186  AddNonZero
5.13.2.3  AddNonZero
AddNonZero
( setID, bDOF1, dVal1, bDOF2, dVal2, bDOF3, dVal3, bDOF4, dVal4, bDOF5, dVal5, 
bDOF6, dVal6 )
Description:This method creates non-zero noda l constraints on all selected nodes
Input:
INT4 setIDThe ID of a Set object that contains the nodes to constrain. Alterna-
tively, if you specify a negative value,  this is simply the ID of the sin-
gle node to constrain.
BOOL bDOF1If True, TX degree of freedom is constrained and corresponding non-
zero value will be applied
REAL8 dVal1 Non-zero value for TX degree of freedom
BOOL bDOF2If True, TY degree of freedom is constrained and corresponding non-
zero value will be applied
REAL8 dVal2 Non-zero value for TY degree of freedom
BOOL bDOF3If True, TZ degree of freedom is constrained and corresponding non-
zero value will be applied
REAL8 dVal3 Non-zero value for TZ degree of freedom
BOOL bDOF4If True, RX degree of freedom is constrained and corresponding non-
zero value will be applied
REAL8 dVal4 Non-zero value for RX degree of freedom
BOOL bDOF5If True, RY degree of freedom is constrained and corresponding non-
zero value will be applied
REAL8 dVal5 Non-zero value for RY degree of freedom
BOOL bDOF6If True, RZ degree of freedom is constrained and corresponding non-
zero value will be applied
REAL8 dVal6 Non-zero value for RZ degree of freedomOutput:NoneReturn Code:FE_FAIL The Constraints could not be created.Remarks/Usage:
AddNonZero   API-2187
Prior to using this method, you must properly specify the other parameters  in the object - such as, color, 
layer, and setID, and any other types required for your  constraints. This method simply uses the data you 
specify here to overwrite specifi c values in the BCNode object, and create a new constraint for each 
entry in the set of nodes. Also, if a value is specif ied for a particular DOF whic h is not currently set to 
True, but then is set to True later,  the value will then also be applied.
Example:NoneAddNonZero
( setID, bDOF1, dVal1, bDOF2, dVal2, bDOF3, dVal3, bDOF4, dVal4, bDOF5, dVal5, 
bDOF6, dVal6 )
 API-2188  PutArray
5.13.2.4  PutArray
PutArray
( count, doDOF, NodeID, DOF )
Description:This method creates multip le nodal constraints. 
Input:
INT4 countThe number of constraints to creat e, and the number of IDs in 
NodeID
BOOL doDOFIf True, then the DOF array must contain degree-of-freedom flags to 
be used. If False, then whatever is  specified in the current object is 
used and DOF is ignored
INT4 NodeID[0..count-1]The Node IDs where constraints will be created. One constraint is 
created on each ID.
INT4 DOF[0..(6*count)-1]Flags specifying constraints on each specified node. 6 flags per node.   
Refer to “dof” property.
Output:NoneReturn Code:FE_FAIL The Constraints could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, y ou must properly specify the setID parameter in the object.
Example:None
GetAllArray   API-2189
5.13.2.5  GetAllArray
GetAllArray
( count, NodeID, Layer, Color, BCDefiniti onID, bNonZero, DOF, NonZeroValues )
Description:This method finds informa tion on nodal constraints.
Input:NoneOutput:
INT4 countThe number of constraints to creat e, and the number of IDs in 
NodeID
INT4 NodeID[0..count-1]The Node IDs where constraints will be created. One constraint is 
created on each ID.
INT4 Layer[0..count-1] The IDs of the layers the loads are on.
INT4 Color[0..coun t-1] The IDs of the load color.
INT4 BCDefinitionID[0..count-
1]The ID of the constraint definitio n that contains this constraint 
(0=None)
BOOL bNonZero[0..(6*count)-
1]True if constraint is a NonZero constraint
INT4 DOF[0..(6*count)-1]Flags specifying constraints on each specified node. 6 flags per node.   
Refer to “dof” property.
REAL8 NonZeroVal-
ues[0..(6*count)-1]An array of values containing the non-zero values at each corre-
sponding degrees of freedom. NonZer oConstraint must be True and 
each DOF must also be constrained using dof or vdof when creating a new NonZero Constraint when only using BCNode object proper-
ties
Return Code:FE_NOT_A V AILABLE No contraints exist in the Constriant Set.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, y ou must properly specify the setID parameter in the object.
Example:None
 API-2190  PutAllArray
5.13.2.6  PutAllArray
PutAllArray
( count, NodeID, Layer, Color, BCDefiniti onID, bNonZero, DOF, NonZeroValues )
Description:This method creates multip le nodal constraints. 
Input:
INT4 countThe number of constraints to creat e, and the number of IDs in 
NodeID
INT4 NodeID[0..count-1]The Node IDs where constraints will be created. One constraint is 
created on each ID.
INT4 Layer[0..count-1] The IDs of the layers the loads are on.
INT4 Color[0..coun t-1] The IDs of the load color.
INT4 BCDefinitionID[0..count-
1]The ID of the constraint definitio n that contains this constraint 
(0=None)
BOOL bNonZero[0..(6*count)-
1]True if constraint is a NonZero constraint
INT4 DOF[0..(6*count)-1]Flags specifying constraints on each specified node. 6 flags per node.   
Refer to “dof” property.
INT4 NonZeroVal-
ues[0..(6*count)-1]An array of values containing the non-zero values at each corre-
sponding degrees of freedom. NonZer oConstraint must be True and 
each DOF must also be constrained using dof or vdof when creating a new NonZero Constraint when only using BCNode object proper-
ties
Output:NoneReturn Code:FE_FAIL The Constraints could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, y ou must properly specify the setID parameter in the object.
Example:None
   API-2191
5.14  BCSet Objects
BCSet objects correspond to the constraint sets in your model. They are derived from Entity 
objects, so in addition to the properties and methods  described here, all of the properties and meth-
ods defined for Entity objects are al so available for constraint sets . For more information, see Sec-
tion 5.1, "Common Entity Properties and Methods".
Use the feBCSet method of the FEMAP App lication object to create BCSet objects.
5.14.1  BCSet Object Properties
BCSets are always stored with a SetID=1, a nd the ID equal to the constraint set ID. 
BCSet objects are really simply placeholders for gl obal data for the constraint set. The actual con-
straints are defined in other objects.
Property Description
STRING title Constraint set title (maximum 79 characters).
BOOL IsCombination This is a Nastran SPCADD/MPCADD combination set if True.
 API-2192  Expand
5.14.2  BCSet Object Methods
5.14.2.1  Expand
Expand
( void )
Description:This method expands all of the geometric co nstraints in a selected constraint set. 
Input:NoneOutput:NoneReturn Code:
FE_FAIL The specified expansion did not work.
Remarks/Usage:This method takes the curre nt constraint set object (uses the ID),  and expands all of the geometric con-
straints in that set, so that they may be retrie ved as normal mesh-based cons traints. If you are using 
advanced geometric constraints (not just fixed and/or pinned), the re sulting nodal output coordinate sys-
tems, and expanded constraints may depend on the sets you choose to expand. Expanding one set at a 
time may not yield the result that you expect.
NOTE: This method only works with  BCSets after they have been stor ed in the model database. If you 
are creating a new BCSet, only call this method after you have called Put().
Example:None
Compress   API-2193
5.14.2.2  Compress
Compress
( void )
Description:This method compresses all of the geometric constraints in a selected constraint set. 
Input:NoneOutput:NoneReturn Code:FE_FAIL The specified compression did not work.Remarks/Usage:This method takes the current constraint set object (uses the ID), and compresses (deletes) any expanded 
constraints. You are left with the unexpanded geometric constraints.
NOTE: This method only works with  BCSets after they have been stor ed in the model database. If you 
are creating a new BCSet, only call this method after you have called Put().
Example:None
 API-2194  ResetNextBC
5.14.2.3  ResetNextBC
ResetNextBC
( enDataType, bOtherBCOnly, bIncludeExpanded )
Description:This method initializes all options prior to calling the “NextBC” method below
Input:
INT4 enDataTypeThe type of constraint entities to be  retrieved. For entity information, 
see Section 3.3.6, "Entity Types". Can be FT_BCO, FT_BCO_-
GEOM, or FT_BEQ.
BOOL bOtherBCOnlyIf true, then only constraints that are not part of a constraint defini-
tion will be retrieved. Otherwise all are available.
BOOL bIncludeExpandedIf True, expanded geometric constr aints (if any) will be returned 
along with normal constraints. Ignored if enDataType = FT_BCO_-
GEOM.
Output:
NoneReturn Code:FE_OKRemarks/Usage:This method is used prior to calling NextBC to specify which constrai nts will be retrieved. It also resets 
this object so that the next call to NextBC will re turn the first constraint available in the object.
Example:
NextBC   API-2195
5.14.2.4  NextBC
NextBC
( pDISPATCH )
Description:This method returns the next available constraint that matches the criteria established by ResetNextBC
Input:NoneOutput:
OBJECT pDISPATCHThe next constraint object. Depending on the options specified, this 
could be a BCNode, BCGeom or BCEqn object
Return Code:FE_BAD_DATA The data type that you are trying to retrieve is invalid.
FE_FAILThere are no more constraints of the specified type to retrieve. Call 
ResetNextBC to go back to the first constraint, if you want to retrieve 
the constraints again.
Remarks/Usage:This method, coupled with  ResetNextBC provides an easy way to retrieve all constraints from a Con-
straint Set.
For any method where API obje cts are returned as parameters, such as this one, it is your responsibility 
to free that object when you are finished using the object. Some pr ogramming languages like Basic will 
do this automatically, but others lik e C++, require you to do this manu ally. The objects are only created 
or returned when the Return Code is FE_OK.
Example:
 API-2196  NextBC
‘ This example loops through all constraint sets retrieving all 
‘ BCNode objects. For each it displays a message box.
Sub Main 
 Dim App As femap.model 
 Set App = feFemap()

 Dim bs As femap.BCSet 
 Set bs = App.feBCSet 
  Dim b As femap.BCNode 
 While bs.Next() 
  bs.ResetNextBC( FT_BCO, False, False ) 
   While bs.NextBC( b ) 
      MsgBox(Str$(b.setID)+""+Str$(b.ID) )
    Wend 
  Wend
End SubNextBC
( pDISPATCH )
ResetNextBCDef   API-2197
5.14.2.5  ResetNextBCDef
ResetNextBCDef
( bAllDataTypes, enDataType )
Description:This method initializes all options prior to calling the “NextBCDef” method below
Input:
BOOL bAllDataTypesUsed to limit the type of constraint  definitions to be retrieved. If 
True, all selected constraint defini tions will be returned. If False, 
only constraint definitions that co ntain constraints of the type speci-
fied in enDataType will be returned.
INT4 enDataTypeThe type of constraint entities to be  retrieved. For entity information, 
see Section 3.3.6, "Entity Types". Can be FT_BCO, FT_BCO_-
GEOM, or FT_BEQ.
Output:
None
Return Code:FE_OKRemarks/Usage:This method is used prior to calling NextBCDef to specify which constraint definitions will be 
retrieved. It also resets this object  so that the next call to NextBCDef will return the first constraint defi-
nition available in the object.
Example:
 API-2198  NextBCDef
5.14.2.6  NextBCDef
NextBCDef
( pDISPATCH )
Description:This method returns the next available constraint definition that matches the criteria established by 
ResetNextBCDef
Input:NoneOutput:
OBJECT pDISPATCHThe next constraint definition objec t. This is always a BCDefinition 
object.
Return Code:
FE_FAILThere are no more constraint defi nitions of the specified type to 
retrieve. Call ResetNextBCDef to go back to the first constraint defi-
nition, if you want to retrieve the constraints again.
Remarks/Usage:This method, coupled with ResetNextBCDef provides an easy way to  retrieve all constraint definitions 
from a Constraint Set.
For any method where API obje cts are returned as parameters, such as this one, it is your responsibility 
to free that object when you are finished using the object. Some pr ogramming languages like Basic will 
do this automatically, but others lik e C++, require you to do this manu ally. The objects are only created 
or returned when the Return Code is FE_OK.
Example:
NextBCDef   API-2199
 ‘ This example loops through all constraint sets retrieving all 
‘ nodal BCDefinition objects, then loops through each 
‘ BCDefinition to retrieve the individual constraints. For each 
‘ it displays a message box. 
Sub Main 
 Dim App As femap.model 
 Set App = feFemap()

 Dim bs As femap.BCSet 
 Set bs = App.feBCSet

 Dim bd As femap.BCDefinition 
 Dim b As femap.BCNode

 While bs.Next() 
 bs.ResetNextBCDef( False, FT_BCO ) 
   While bs.NextBCDef( bd ) 
      MsgBox( "BC Set"+Str$(bd.setID)+" BC Def"+Str$(bd.ID)) 
      While bd.NextBC( b ) 
         MsgBox(  "BC On Node "+Str$(b.ID) ) 
       Wend 
   Wend 
 Wend
End SubNextBCDef
( pDISPATCH )
 API-2200  GetCombination
5.14.2.7  GetCombination
GetCombination
( nCombo, nSetID )
Description:This method returns the data for a Nastran SPCADD/MPCADD Combination Set. 
Input:NoneOutput:INT4 nCombo Number of en tries in the combination.
INT4 nSetID [0..count-1] The IDs of th e constraint sets in the combination.
Return Code:FE_BAD_TYPE This is not a Co mbination Constraint Set.
FE_NOT_A V AILABLE No constraint sets are in the Combination.Remarks/Usage:NoneExample:None
PutCombination   API-2201
5.14.2.8  PutCombination
PutCombination
( nCombo, nSetID )
Description:This method sets the data in a N astran SPCADD/MPCADD Combination Set. 
Input:INT4 nCombo Number of en tries in the combination.
INT4 nSetID[0..count-1] The IDs of the constraint sets in the combination.
Output:NoneReturn Code:FE_NOT_EXIST One or more Combined Cons traint Sets specified do not exist.
Remarks/Usage:
Example:
None
 API-2202  NodesAsSet
5.14.2.9  NodesAsSet
NodesAsSet
( bExpandedGeomBC, bNodalBC, bEquationBC, nNodeSetID, bClear )
Description:This method adds the IDs of nodes constrained in the Constraint Set curren tly loaded in the BCSet 
Object to a specified Set. There are options to in clude nodes which are constrained after geometric con-
straints are expanded, individual nodes which are constrained, and/or nodes used in constraint equations
Input:
BOOL bExpandedGeomBCWhen True, the IDs of any nodes which are constrained after geo-
metric constraints are expanded will be added to the Set.
BOOL bNodalBCWhen True, the IDs of any individual nodes which are constrained 
will be added to the Set.
BOOL bEquationBCWhen True, the IDs of any nodes which are used in a constraint equa-
tion will be added to the Set
INT4 nNodeSetID ID of Set object to add node IDs
BOOL bClearWhen True, any IDs which are in the set are removed before adding 
the node IDs to the Set
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
   API-2203
5.15  Chart Objects
Chart objects correspond to the charts in Charting pane. They are derived from Entity objects, so in 
addition to the properties and methods described here, all of the properties and methods defined 
for Entity objects are also available for chart ob jects. For more information, see Section 5.1, 
"Common Entity Properties and Methods".
Use the feChart method of the FEMAP App lication object to create Chart objects.
5.15.1  Chart Object Properties
Charts are always stored with a SetID= 1, and the ID equal to the Chart ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
INT4 StyleChart Style: 0=Point, 1=Line, 2=Line-Fast, 3=Line-Step, 
4=Area, 5=Area-Step
STRING Title The Chart Title
BOOL TitleVisible Controls Chart Title visibility
BOOL ScaleInheritUse scale factors from individual data series when true. 
When false, MasterScale value is used for all displayed 
data series, regardless of individual data series scale fac-tors
REAL8 MasterScaleScale factor for all data series displayed on the chart. Only 
used when ScaleInherit is set to False
INT4 TitleLocation Chart Title Location: 0=Top, 1=Left, 2=Right, 3=BottomINT4 TitleJustification Chart Title Just ification: 0=Left, 1=Center, 2=Right
REAL8 TitleFontSize Title Font SizeBOOL TitleFontBold Controls if Font is Bold  in Chart Title (TRUE= Bold )
BOOL TitleFontItalic Controls if Font is Italic  in Chart Title (TRUE= Italic )
BOOL TitleFontUnderlineControls if Font is Underlined
 in Chart Title 
(TRUE=underline )
INT4 TitleFontColor Controls  Chart Title Font Color
STRING FontControls overall Font for the Chart. Controls Title, Axis 
Titles, and Axis Labels
INT4 PaletteChart Palette: 0=FEMAP, 1=Gray, 2=Office, 3=Vibrant, 
4=Blue, 5=Brown, 6=Green, 7=Red
BOOL PaletteFromChartWhen TRUE, all Data Series use Chart Palette Colors. 
When FALSE, Data Series colors controlled by individual Data Series 
 API-2204  
BOOL DarkBackground When TRUE, Chart switches to have a Dark Background
BOOL LegendVisible Controls Chart Legend visibility
INT4 LegendLocation [0..1]
or
V ARIANT vLegendLocationChart Legend Location
[0] = Vertical Location - 0= Top Outside, 1=Top, 2=Cen-
ter, 3=Bottom, 4=Bottom Outside
[1] = Horizontal Location - 0= Left Outside, 1=Left, 
2=Center, 3=Right, 4=Right Outside
INT4 LegendDirectionChart Legend Direction: 0= Top to Bottom, 1=Left to 
Right
REAL8 LegendFontSize Font size for legend labels. Must be greater than 0.0BOOL AxisAutoscale[0..1]
orV ARIANT vAxisAutoscaleControls if Autoscale is on for an Axis (TRUE=On) 
[0]=X Axis[1]=YAxis 
INT4 AxisStyle[0..1]
or
V ARIANT vAxisStyleControls Axis Style. 0=Linear, 1=Logarithmic
[0]=X Axis
[1]=YAxis 
REAL8 AxisRange[0..1][0..1]
orV ARIANT vAxisRangeControls minimum and maximum values for each axis
[0][0]=X Axis, minimum [0 ][1] =X Axis, maximum
[1][0]=Y Axis, minimum [1 ][1] =Y Axis, maximum
BOOL AxisRangePad[0..1]
or
V ARIANT vAxisRangePadControls autoscale padding for axis 
[0]=X Axis
[1]=YAxis 
BOOL AxisVisible[0..1]
or
V ARIANT vAxisVisibleControls if an Axis is visible (TRUE=On) 
[0]=X Axis
[1]=YAxis 
BOOL AxisMajorGri dlineVisible[0..1]
or
V ARIANT vAxisMajorGridlineVisibleControls if major grid lin es on an Axis are visible 
(TRUE=On)[0]=X Axis
[1]=YAxis 
REAL8 AxisMajorInterval[0..1]
orV ARIANT vAxisMajorIntervalSets the interval value for major grid lines on an axis.
[0]=X Axis[1]=YAxis 
BOOL AxisMajorTickmarkVisible[0..1]
or
V ARIANT vAxisMajorTickmarkVisibleControls if major grid line tick marks are visible on an axis 
(TRUE=On) 
[0]=X Axis[1]=YAxis 
INT4 AxisMajorColor Controls  Major Grid Line Color
BOOL AxisMajorColorAutoDim Controls Dim for Dark Backgrounds option (TRUE=On)Property Description
   API-2205
BOOL AxisMinorGridlineVisible[0..1]
or
V ARIANT vAxisMinorGridlineVisibleControls if minor grid lines on an Axis are visible 
(TRUE=On) The major grid lines must be on for the minor 
grid lines to be visible.
[0]=X Axis[1]=YAxis 
INT4 AxisMinorCount[0..1]
or
V ARIANT vAxisMinorCountSets the value for number of minor grid lines between each 
major grid line on an axis for linear scale.
[0]=X Axis[1]=YAxis 
INT4 AxisMinorCountLog[0..1]
or
V ARIANT vAxisMinorCountLogSets the value for number of minor grid lines between each 
major grid line on an axis  for logarithmic scale. 
[0]=X Axis[1]=YAxis 
BOOL AxisMinorTickmarkVisible[0..1]
orV ARIANT vAxisMinorTickmarkVisibleControls if minor grid line tick marks are visible on an 
axis (TRUE=On). 
[0]=X Axis[1]=YAxis 
BOOL AxisZoom[0..1]
orV ARIANT vAxisZoomControls Allow Zooming op tion for an axis. TRUE = 
Allow Zooming on, FALSE = Allow Zooming Off.
[0]=X Axis
[1]=YAxis 
STRING AxisTitleX Title of X AxisSTRING AxisTitleY Title of Y AxisBOOL AxisTitleVisible[0..1]
or
V ARIANT vAxisTitleVisibleControls visibility of Axis Title
[0]=X Axis
[1]=YAxis 
INT4 AxisTitleJust ification[0..1]
orV ARIANT vAxisTitleJustificationAxis Title Justification: 0=Left, 1=Center, 2=Right
[0]=X Axis[1]=YAxis 
INT4 AxisTitleFontSize[0..1]
or
V ARIANT vAxisTitleFontSizeAxis Title Font Size
[0]=X Axis
[1]=YAxis 
BOOL AxisTitleFontBold
or
V ARIANT vAxisTitleFontBoldControls if Font is Bold  in Axis Title (TRUE= Bold )
[0]=X Axis
[1]=YAxis 
BOOL AxisTitleFontItalic
orV ARIANT vAxisTitleFontItalicControls if Font is Italic  in Axis Title (TRUE= Italic )
[0]=X Axis[1]=YAxis Property Description
 API-2206  
BOOL AxisTitleFontUnderline
orV ARIANT vAxisTitleFontUnderlineControls if Font is Underlined
 in Axis Title 
(TRUE=underline )
[0]=X Axis
[1]=YAxis 
INT4 AxisTitleFontColor
or
V ARIANT vAxisTitleFontColorControls Axis Title Font Color
[0]=X Axis
[1]=YAxis 
INT4 AxisLabelDecimal[0..1]
or
V ARIANT vAxisLabelDecimalControls number of digits afte r the decimal point. Set to -1 
for automatic mode[0]=X Axis
[1]=YAxis 
INT4 AxisLabelFormat[0..1]
or
V ARIANT vAxisLabelFormatControls Label Format on an  axis. 0=Standard, 1=Scien-
tific, 2=Percentage[0]=X Axis
[1]=YAxis 
REAL8 AxisValueFontSize Font size for axis value labels. Must be  greater than 0.0
BOOL MarkerFromChartWhen TRUE, overrides all data  series marker settings and 
uses only chart marker settings
BOOL MarkerVisibleControls visibility of Data Se ries Markers being controlled 
by the Chart (MarkerFromCha rt = TRUE). When chart 
style is set to FCH_STYLE_LINEFAST, markers are 
unavailable and this setting is ignored
INT4 MarkerSize Data Series Marker size, 1 to 10
INT4 MarkerStyleData Series Marker style. 0=Circle, 1=Square, 2=Dia-
mond, 3=Triangle, 4=Pentagon, 5=Hexagon, 6=Star
BOOL LabelFromChartWhen TRUE, overrides all da ta series label settings and 
uses only chart marker settings
BOOL LabelVisibleControls visibility of Data Se ries Labels being controlled 
by the Chart (LabelFromChart = TRUE). When chart style 
is set to FCH_STYLE_LINEFA ST, labels are unavailable 
and this setting is ignored
REAL8 LabelFontSize Font size for poin t labels. Must be greater than 0.0
BOOL ShowLabelXShow X value on label (TRUE=ON ). Also used to control 
value shown in Tooltip labels
BOOL ShowLabelYShow Y value on label (TRUE=ON ). Also used to control 
value shown in Tooltip labelsProperty Description
   API-2207
BOOL ShowLabelMaxMinShow data series max/min values only. 
ShowLabelX = TRUE, ShowLabelY = TRUE - XY data 
shown at data series max/min Y values
ShowLabelX = TRUE, ShowLabelY = FALSE - X data shown at data series max/min X values
ShowLabelX = FALSE, ShowLabelY = TRUE - Y data 
shown at data series max/min Y values
BOOL OutputSetInheritUse output set / vector data specified on the Chart Data 
Series (TRUE = Inherit from Da ta Series). Only for XY vs 
ID, XY vs Set, XY vs Set Value, and XY vs Position)
BOOL OutputSetOutput Set ID. Only used when OutputSetInherit = 
FALSE. When using Type = XY vs ID or XY vs Position, sets output set. When using Type = XY vs. Set or XY vs. 
Set Value, sets the Start Output Set
BOOL OutputSetEndEnding Output Set ID. Only us ed when OutputSetInherit = 
FALSE. When using Type = XY vs. Set or XY vs. Set Value, sets the End Output Set
BOOL OutputSetAllFor XY vs Set and XY vs Set Value only. When TRUE, all 
output sets in the model will be  used when plotting.  Only 
used when OutputSetInherit = FALSE. 
Secondary Plot
enum zChartComplexLocation 
ComplexPlotLocationSpecifies location of Complex Plot (Secondary Plot). 
0=None (FCCL_OFF), 1=Top (FCCL_TOP), and 2=Bot-tom (FCCL_BOTTOM)
BOOL AxisAutoscale2[0..1]
or
V ARIANT vAxisAutoscale2Controls if Autoscale is on  for an Axis (TRUE=On) in 
secondary chart 
[0]=X Axis (Curre ntly not used)
[1]=YAxis (Y Complex)
INT4 AxisStyle2[0..1]
or
V ARIANT vAxisStyle2Controls Axis Style in secondary chart. 0=Linear, 1=Loga-
rithmic
[0]=X Axis (Curre ntly not used)
[1]=YAxis (Y Complex)
REAL8 AxisRange2[0..1][0..1]
or
V ARIANT vAxisRange2Controls minimum and maximum values for each axis  in 
secondary chart
[0][0]=X Axis, minimum [0][1 ] =X Axis, maximum (Cur-
rently not used)
[1][0]=Y Axis, minimum [1][1 ] =Y Axis, maximum (Y 
Complex)
BOOL AxisRangePad2[0..1]
or
V ARIANT vAxisRangePad2Controls autoscale padding fo r axis in secondary chart
[0]=X Axis (Curre ntly not used)
[1]=YAxis (Y Complex)Property Description
 API-2208  
INT4 AxisLabelD ecimal2[0..1]
orV ARIANT vAxisLabelDecimal2Controls number of digits af ter the decimal point in sec-
ondary chart. Set to -1 for automatic mode
[0]=X Axis (Curre ntly not used)
[1]=YAxis (Y Complex)
INT4 AxisLabelFormat2[0..1]
orV ARIANT vAxisLabelFormat2Controls Label Format on an  axis in secondary chart. 
0=Standard, 1=Scientific, 2=Percentage
[0]=X Axis (Curre ntly not used)
[1]=YAxis (Y Complex)Property Description
AddDataSeries   API-2209
5.15.2  Chart Object Methods
5.15.2.1  AddDataSeries
AddDataSeries
( SetID )
Description:Adds one or more Data Series to the ChartInput:
INT4 SetIDID of set containing Data Series IDs to add. When value is negative, 
ID of Data Series to add
Output:NoneReturn Code:
FE_NOT_EXISTWhen value of SetID is negative,  FE_NOT_EXIST is returned if the 
Data Series does not exist
Remarks/Usage:None.Example:None
 API-2210  RemoveDataSeries
5.15.2.2  RemoveDataSeries
RemoveDataSeries
( SetID )
Description:Removes one or more Data Series from the ChartInput:
INT4 SetIDID of set containing data series IDs to Remove. When value is nega-
tive, ID of data series to remove
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
RemoveAllDataSeries   API-2211
5.15.2.3  RemoveAllDataSeries
RemoveAllDataSeries
( void )
Description:Removes all data series from the chartInput:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-2212  GetDataSeries
5.15.2.4  GetDataSeries
GetDataSeries
( numDS, dsID )
Description:Returns an array of Data Series displayed on the ChartInput:NoneOutput:INT4 numDS Number of Data Series on Chart
INT4 dsID[0..numDS-1] Data Series IDs
Return Code:
NoneRemarks/Usage:NoneExample:None
ShowPane   API-2213
5.15.2.5  ShowPane
ShowPane
( void )
Description:Displays the Chart in the Charting paneInput:NoneOutput:NoneReturn Code:FE_FAIL Charting pane is not displayed
Remarks/Usage:
The charting pane will display the chart as it exists in  memory at the time this  method is called. Any 
subsequent changes to the chart object will not be displayed. 
Example:None
 API-2214  
5.16  Chart Data Series Objects
Chart Data Series objects correspond to Data  Series objects which are displayed in the Charting  
pane. They are derived from Entity objects, so in  addition to the properties and methods described 
here, all of the properties and methods defined fo r Entity objects are also available for chart 
objects. For more informatio n, see Section 5.1, "Common En tity Properties and Methods".
Use the feChartSeries method of the FEMAP Application object to create Chart objects.
5.16.1  Chart Data Se ries Object Properties
Chart Data Series are always stored with a Se tID=1, and the ID equal to the Data Series ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
STRING Title Data Series title
INT4 SeriesTypeData Series type.
0 = FCHD_ID (Vector vs. Entity - Entity ID)
1 = FCHD_SET (Vector vs. Set - Output Set ID)2 = FCHD_SETV AL (Vector vs. Set - Output Set Value)3 = FCHD_POSITION (Vector vs. Entity - Position)
4 = FCHD_FUNCTION (Function)
7 =F CHD_VECVEC (Vector vs. Vector)10 = FCHD_CPLXEXP (Expand Complex)
INT4 StudyIDStudy  ID for FCHD_SET, FCHD_SETV AL, and FCH-
D_VECVEC. Only used when  OutputSetAll is set to 
False. When StudyID is non- zero, OutputSet and Output-
SetEnd are ignored.
INT4 OutputSetOutput Set  ID for FCHD_ID, FCHD_POSITION, and 
FCHD_CPLXEXP. 
Starting Set  ID for FCHD_SET, FCHD_SETV AL, and 
FCHD_VECVEC (only used when OuptutSetAll = False)
INT4 OutputSetEndEnding Set  ID for FCHD_SET, FCHD_SETV AL, and 
FCHD_VECVEC(only used when OuptutSetAll = False)
BOOL OutputSetAllWhen TRUE, all Use All Output Sets  is enabled and all 
output sets in the model are used for FCHD_SET, FCH-
D_SETV AL, and FCHD_VECVEC.
INT4 OutputVectorV2Dependent Vector  ID for FCHD_VECVEC. 
Vector  ID for all others, except FCHD_FUNCTION
OutputVector has been deprecated. For more information, 
see Section 2.4, "Working with Output in FEMAP 2020.1 
and above"
   API-2215
INT4 OutputVector2V2Independent Vector  ID for FCHD_VECVEC.
OutputVector2 has been deprecated. For more informa-
tion, see Section 2.4, "Working with Output in FEMAP 2020.1 and above"
INT4 IntervalInterval  for limiting retrieval of  data when using FCH-
D_SET, FCHD_SETV AL, and FCHD_VECVEC. Regard-
less of the interval set, the Starting Set  and Ending Set  are 
always included
INT4 FunctionID ID of Function for FCHD_FUNCTION
INT4 GroupID of Group (optional) for FCHD_ID and FCHD_POSI-
TION
INT4 PositionComponent of Position  for FCHD_POSITION. 0=X, 1=Y , 
2=Z
INT4 PositionIsRelativeWhen TRUE, enables the x-axis points to be 
Relative to Node specified in the Location property.
INT4 PositionCoordSys Coordinate System ID for FCHD_POSITION.
INT4 LocationFor FCHD_SET, FCHD_SETV AL, and FCHD_ECPLX-
EXP: Location  to obtain data. Value must be a valid Node  
or Element ID and correspond with selected OutputVector. 
For FCHD_VECVEC: Independent Entity  location. 
For FCHD_POSITION: Node/Element ID of Relative to 
Node/Element . Value must be a valid Node  or Element  ID.
INT4 Location2 For FCHD_VECVEC : Dependent entity location
INT4 TransformNodalModeUse enum zOutputDestination
For FCHD_ID, FCHD_POSITION, and FCHD_ECPLX-
EXP: Nodal vector transform mode for Vector  
For FCHD_SET and FCHD_SETV AL: Nodal vector 
transform mode for Vector  across all selected output sets
For FCHD_VECVEC: Nodal vector transform mode for 
Independent Vector  across all selected output sets
INT4 TransformNodalCSysCoordinate system for nodal transformations when Trans-
formNodalMode is FOD_VECTOR_TO_CSYSProperty Description
 API-2216  
INT4 TransformNodalMode2Use enum zOutputDestination
For FCHD_VECVEC: Nodal vector transform mode for 
Dependent Vector  across selected output sets
INT4 TransformNodalCSys2Coordinate system for nodal transformations when Trans-
formNodalMode2 is FOD_VECTOR_TO_CSYS
INT4 TransformPlateModeUse enum zOutputDestination
For FCHD_ID, FCHD_POSITION, and FCHD_ECPLX-
EXP: Plate vector transform mode for Vector  
For FCHD_SET and FCHD_SETV AL: Plate vector trans-
form mode for Vector  across all selected output sets
For FCHD_VECVEC: Plate vect or transform mode for 
Independent Vector  across all selected output sets
INT4 TransformPlateCSysPlate vector transformation coordinate system when 
TransformPlateMode = FOD_PLATE_TO_CSYS
INT4 TransformPlateDOFCoordinate system axis for plate transformations when 
TransformPlateMode = FOD_PLATE_TO_CSYS
REAL8 TransformPlateVector[0..2]
orV ARIANT vTransformPlateVectorComponents of vector for plate transformations when 
TransformPlateMode = FOD_PLATE_TO_VECTOR
REAL8 TransformPlateTolerance Tolerance Angle  for plate transformations
INT4 TransformPlateMode2Use enum zOutputDestination
For FCHD_VECVEC: Plate vect or transform mode for 
Dependent Vector  across all sele cted output sets
INT4 TransformPlateCSys2Plate vector transformation coordinate system when 
TransformPlateMode2 = FOD_PLATE_TO_CSYS
INT4 TransformPlateDOF2Coordinate system axis for plate transformations when 
TransformPlateMode2 = FOD_PLATE_TO_CSYS
REAL8 TransformPlateVector2[0..2]
or
V ARIANT vTransformPlateVector2Components of vector for plate transformations when 
TransformPlateMode2 = FOD_PLATE_TO_VECTOR
REAL8 TransformPlateTolerance2Tolerance Angle  for plate transformations of Dependent 
VectorProperty Description
   API-2217
INT4 TransformSolidModeUse enum zOutputDestination
For FCHD_ID, FCHD_POSITION, and FCHD_ECPLX-
EXP: Solid vector transform mode for Vector  
For FCHD_SET and FCHD_SETV AL: Solid vector trans-
form mode for Vector  across all selected output sets
For FCHD_VECVEC: Solid vector transform mode for 
Independent Vector  across all selected output sets
INT4 TransformSolidCSysSolid vector transformation coordinate system when 
TransformSolidMode = FOD_SOLID_TO_CSYS
INT4 TransformSolidMode2Use enum zOutputDestination
For FCHD_VECVEC: Solid vector transform mode for 
Independent Vector  across all selected output sets
INT4 TransformSolidCSys2Solid vector transformation coordinate system when 
TransformSolidMode2 = FOD_SOLID_TO_CSYS
INT4 ConvertMethodUse enum zResultsConvert (FRC_NONE, FRC_A VG, and 
FRC_MAX only)
For FCHD_ID, FCHD_POSITION, and FCHD_ECPLX-
EXP: Nodal / elemental conversion method for Vector  
For FCHD_SET and FCHD_SETV AL: Nodal / elemental 
conversion method for Vector  across all selected output 
sets
For FCHD_VECVEC: Nodal / elemental conversion 
method for Independent Vector  across all selected output 
sets
INT4 ConvertMethod2Use enum zResultsConvert (FRC_NONE, FRC_A VG, and 
FRC_MAX only)
For FCHD_VECVEC: Nodal / elemental conversion 
method for dependent vector across all selected output 
sets. Property Description
 API-2218  
INT4 ComplexMethodUse enum zChartSeriesComplexMethod
For FCHD_ID and FCHD_POSI TION: Method used for 
Complex Expansion of Vector
For FCHD_SET, FCHD_SETV AL, and FCH-
D_VECVEC: Method used for Complex Expansion of Vector across all selected output sets
REAL8 ComplexPhaseFor FCHD_ID, FCHD_POSITION, FCHD_SET, FCH-
D_SETV AL, and FCHD_VECVEC: Phase Angle  value 
used when ComplexMethod = FCSCM_SYNC
For FCHD_CPLXEXP: always value for Increment
REAL8 ComplexStart For FC HD_CPLXEXP: value for Start
REAL8 ComplexEnd For FC HD_CPLXEXP: value for Stop
REAL8 ScaleScale factor applied to all va lues in an individual Data 
Series
BOOL SortData When TRUE, use So rt Data option for FCHD_VECVEC
BOOL ColorInherit When TRUE, use Palette colors from the Chart
INT4 ColorWhen ColorInherit = FALSE, sets color of individual Data 
Series
BOOL MarkerInherit When TRUE, use Marker settings from the Chart
BOOL MarkerVisibleWhen MarkerInherit = FALSE, co ntrols visibility of mark-
ers for individual Data Series.
INT4 MarkerStyleWhen MarkerInherit = FALSE, controls style of markers 
for individual Data Series.
INT4 MarkerSizeWhen MarkerInherit = FALSE, controls size of markers 
for individual Data Series.
BOOL LabelInherit When TRUE, use Label settings from the Chart
BOOL LabelVisibleWhen LabelInherit = FALSE, setting this to TRUE will 
display labels for individual Data Series.
BOOL ShowLabelXWhen LabelInherit = FALSE and LabelVisible = TRUE, 
setting this to TRUE will displa y the X value in labels for 
individual Data Series.
BOOL ShowLabelYWhen LabelInherit = FALSE and LabelVisible = TRUE, 
setting this to TRUE will displa y the Y value in labels for 
individual Data Series.Property Description
   API-2219
BOOL ShowLabelMaxMinWhen LabelInherit = FALSE and LabelVisible = TRUE, 
setting this to TRUE will disp lay only the Max/Min labels 
based on selected X and Y components.
INT4 CombinationType The operation to perform on two chart series: 0=Add, 
1=Subtract, 2=Multiply, 3=Divide.
BOOL AbsoluteCombination Flag to convert combination re sult to absolute value upon 
completion.Property Description
 API-2220  GetXY
5.16.2  Chart Data Series Object Methods
5.16.2.1  GetXY
GetXY
( numPoints, xyValues, xRange, yRange )
Description:Retrieves all XY values from Data SeriesInput:NoneOutput:INT4 numPoints Number of points returned
V ARIANT 
xyValues[0..2*numpoints-1]V ARIANT xRange[0..1]
V ARIANT xRange[0..1] Min/Max X Values
V ARIANT xRange[0..1] Min/Max Y Values
Return Code:
NoneRemarks/Usage:None.Example:None
CopyToClipboard   API-2221
5.16.2.2  CopyToClipboard
CopyToClipboard
( void )
Description:Copies all of the XY values to the clipboardInput:NoneOutput:NoneReturn Code:FE_FAIL Unable to copy to clipboard/no values to copy.
Remarks/Usage:
NoneExample:None
 API-2222  GetEntityType
5.16.2.3  GetEntityType
GetEntityType
( chartID )
Description:Returns either Node or Elem ent for the specified Chart 
Input:chartID ID of ChartOutput:NoneReturn Code:Integer 7 = Node, 8 = Element
FE_FAIL Chart has no data or the type of data cannot be determined
Remarks/Usage:
NoneExample:None
   API-2223
5.17  Connection Property Objects
Connection Property objects corr espond to the connection propertie s in your model. They are 
derived from Entity objects so, in addition to the properties and me thods described here, all of the 
properties and methods defined fo r Entity objects are also ava ilable for Connection Property 
objects. For more informatio n, see Section 5.1, "Common En tity Properties and Methods". 
Use the feConnectionProp method of the FEMAP Application object to create Connection Prop-
erty objects.
5.17.1  Connection Prope rty Object Properties
Connection Properties are always stored with a Se tID=1, and the ID equal to the connection prop-
erty ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
5.17.2  Accessing Connect ion Property Properties
You can access the individual properties for the Pr operty object by referencing the properties 
described above, and the da ta contained in the table below. For example, to retrieve the coefficient 
of static friction in direction 1, use:Property Description
INT4 color The connection property color.INT4 layer The layer associated  with the connection property.
INT4 type Type of Connection, 0=Contact, 1=Glued.STRING title Connection property title (maximum 79 characters).BOOL flag[0..3]
orV ARIANT vflagArray of connection property flags.
INT4 flagI[0..3]
or
V ARIANT vflagIArray of connection property fl ags accessed as an INT4. Most 
flags are simply true/false and can be accessed with flag( ). 
REAL8 pval[0..399]
or
V ARIANT vpvalArray of connection property values.
INT4 plyval[0..1]
orV ARIANT vplyvalArray of material IDs.
Additional Properties
INT4 plymat[0..1] Same as plyval, but returns/sets entire array as a V ARIANT.
INT4 pmat[0..234] Same as pval, but retu rns/sets entire array as a V ARIANT.
 API-2224  
mu = pr.pval(0)
This approach provides great flexibility, but can be slow if you are going to work with a large 
number of properties. In this case it is best to  access the data using “Additional Properties”. These 
all set and return entire arrays of values in one reference. For example, you could write:
Dim pr as Object 
Set pr = femap.feConnectionProp 
Dim v  as Variant 
pr.Get(1) 
v = pr.pmat 
v(0)=0.3 
v(1)=0.35 
pr.pmat = v 
pr.Put(1)
This code loads Connection Property  1, retrieves the entire array of  real values into “v”, updates 
the two coefficients of friction, puts the entire array back, and saves the updated Connection Prop-
erty definition. While the code is slightly longer  than simply accessing the individual properties, 
performance will be better using this approach.
   API-2225
5.17.2.1  Connection Property Array Index Values
In general, most of the property data is simply stored in the various array properties. The location 
of the specific property data is defined in the following table. 
Property Values (continued)
CONTACT
Flags0 ABAQUS GAP CONDUCTANCE Active1 ABAQUS GAP CONDUCTANCE is Pressure based2 ABAQUS GAP RADIATION ActiveValues0 Static Friction 11 Static Friction 22 Dynamic Friction3 Decay4V i s c o u s5D a m p i n g6789101112131415 Abaqus Small Slide16 Abaqus Hcrit17 Abaqus Ext Zone18 Abaqus Smoothing19 Abaqus Tied
 API-2226  
20 Abaqus Weight
21 Abaqus Thickness22 Abaqus Slide Dist23 Abaqus Friction Type24 Abaqus Friction Value25 Abaqus Max Shear26 Abaqus Adjust27 Abaqus Approach2829
30Dyna Type (0=Default/General , 1=Automatic, 2=Old (Non-
Automatic, 3=Constraint, 4=Eroding, 5=Force Transducer, 6=Forming, 7=Rigid, 8=Single Edge, 9=Sliding Only, 
10=Tiebreak, 11=Tied, 12=Tie d Shell Edge, 13=Tied Shell 
Edge to Surface)
31 Dyna One Way Contact32 Dyna Offset
33Dyna Penetration (0=Option Of f, 1=Option On, 2=Both Pen-
etration and Shortest Diagonal Options On)
34Dyna Birth (Value of 0.0=Option Off, Value greater than 
0.0=Option On, Value=Time)
35Dyna Death (Value of 0.0=Option Off, Value greater than 
0.0=Option On, Value=Time)
36 Dyna Scale Factors Slave Penalty Stiffness37 Dyna Scale Factors Master Penalty Stiffness
38Dyna Thickness Overrides Slave (Value of 0.0=Option Off, 
Value greater than 0.0=Option On, Value=Override Value)
39Dyna Thickness Overrides Master (Value of 0.0=Option Off, 
Value greater than 0.0=Option On, Value=Override Value)
40 Dyna Scale Factors Slave Thickness41 Dyna Scale Factors Master Thickness42 Dyna Scale Factors Coulomb FrictionProperty Values (continued)
CONTACT
   API-2227
43 Dyna Scale Factors Viscous Friction
44 Dyna Output Slave Forces45 Dyna Output Master Forces
46Dyna Rigid Function Force vs. Penetration (ID of FEMAP 
Function)
47Dyna Rigid Force Method (1=Total Force/Penetration, 
2=Nodal Force/Penetration, 3= Pressure/Penetration, 4=Total 
Force/Penetration)
48 Dyna Rigid Unloading Stiffness49 Dyna Tiebreak Normal Failure50 Dyna Tiebreak Shear Failure51 Dyna Tiebreak Normal Exponent52 Dyna Tiebreak Shear Exponent
53Dyna Tiebreak Function - Resisting Stress/Opening (ID of 
FEMAP Function)
54 Dyna Eroding Symmetry On55 Dyna Eroding Interior Node Erosion56 Dyna Eroding Interior Solid Erosion
57Dyna Constraint (0=Symmetric Constraint, 1=Slave Nodes 
Constrained, 2=Master Nodes Constrained)
58 Dyna Friction Static59 Dyna Friction Dynamic60 Dyna Friction Exp. Decay61 Dyna Friction Viscous62 Dyna Friction Viscous Damping...65 Marc Tolerance66 Marc Sep Force67 Marc Inter68 Marc DispProperty Values (continued)
CONTACT
 API-2228  
69 Marc Friction
70 Marc Stick Vel71 Marc Fr Stress72 Marc Con Type73 Marc Con Shell74 Marc Tol Bias75 Marc Beam76 Marc Sep77 Marc Sep Max78 Marc Sep Stress79 Marc Slip Coeff80 Marc Slip F81 Marc Slip Trans82 Marc Rig Avg83 Marc Rig Cutoff…100 Sinda Type101 Sinda Coeff1102 Sinda View103 Sinda Coeff2104 Sinda Cfunc1105 Sinda Vfunc106 Sinda Cfunc2107 Sinda Cfunc3…115 Ansys Closure116 Ansys Min Pen117 Ansys Max PenProperty Values (continued)
CONTACT
   API-2229
118 Ansys Close Stiff
119 Ansys Open Stiff120 Ansys Norm Tol121 Ansys Pinball122 Ansys Surf Off123 Ansys Max Fric124 Ansys Penalty Type125 Ansys Node Cont126 Ansys Unsym127 Ansys No Spurious128 Ansys Shell Thick129 Ansys Cont Surf130 Ansys Init Pen131 Ansys Time Inc…135 NE/Nastran Scale Fact136 NE/Nastran Fric Stiff137 NE/Nastran Static Friction138 NE/Nastran Pen Type
139
(9.2+) NE/Nastran Max Penetration
140(9.2+) NE/Nastran Max Adjust Ratio
141(9.2+) NE/Nastran Max Penetration Fraction
142(9.2+) NE/Nastran Penetration Surface Offset
143(9.2+) NE/Nastran Max Activation Distance
144(9.2+) NE/Nastran Max Activation Distance ( Automatic )
...145 NX/Nas601 Type146 NX/Nas601 NSideProperty Values (continued)
CONTACT
 API-2230  
147 NX/Nas601 Birth Time
148 NX/Nas601 Death Time149 NX/Nas601 Initial Penetration150 NX/Nas601 Penetration Depth151 NX/Nas601 Segment Normal152 NX/Nas601 Offset Type153 NX/Nas601 Offset Distance154 NX/Nas601 Initial Penetration Duration155 NX/Nas601 Consistant Stiffness156 NX/Nas601 Tied157 NX/Nas601 Tied Tolerance158 NX/Nas601 Surface Extention Factor159 NX/Nas601 Friction Model160 NX/Nas601 Friction Parameter 1161 NX/Nas601 Friction Parameter 2162 NX/Nas601 Friction Parameter 3163 NX/Nas601 Friction Parameter 4164 NX/Nas601 Friction Parameter 5165 NX/Nas601 Eps N166 NX/Nas601 Eps T167 NX/Nas601 CFactor 1168 NX/Nas601 Penetration Tolerance169 NX/Nas601 Normal Modulus170 NX/Nas601 Tangential Modulus171 NX/Nas601 Tensile Freeing Force172 NX/Nas601 Total Freeing Force
173
(9.3+)NX/Nas601 DISP
174(9.3+)NX/Nas601 GAPV ALProperty Values (continued)
CONTACT
   API-2231
...
175(9.1+) NX/Nas101 Max Force Iterations
176(9.1+) NX/Nas101 Max Status Iterations
177(9.1+) NX/Nas101 Normal Penalty Factor
178(9.1+) NX/Nas101 Tangential Penalty Factor
179(9.1+) NX/Nas101 Force Convergence Tolerance
180(9.1+) NX/Nas101 Number of Allow Contact Changes
181(9.1+) NX/Nas101 Contact Precentage
182(9.1+) NX/Nas101 Shell Offset
183(9.1+) NX/Nas101 Contact Status
184(9.1+) NX/Nas101 Friction
185(9.1+) NX/Nas101 Min Contact Search Dist
186(9.1+) NX/Nas101 Max Contact Search Dist
187(9.1+) NX/Nas101 Averaging Method
188(9.1+) NX/Nas101 Initial Penetration
189(9.2+) NX/Nas101 Gluing Search Distance
190(9.2+) NX/Nas101 Gluing Penalty Factor
191(9.3+) NX/Nas101 Gluing Zoffset
192(9.3+) NX/Nas101 INTORD
193(9.3+) NX/Nas101 REFINE
194(10.0+) NX/Nas101 NCHG TYPE
195(10.0+) NX/Nas101 PENTYPE
196(10.0+) NX/Nas101 CSTRAT
197(10.1+) NX/Nas101 GLUETYPE
198(10.1+) NX/Nas101 PENGLUEProperty Values (continued)
CONTACT
 API-2232  
199(10.1+) NX/Nas101 PENAUTO
...
200(9.2+) NX/Nas701 Friction
201(9.2+) Marc Friction
202(9.2+) AnsyNX/Nas601s Friction
203(10.0+)NX/Nas601BOND_EXT
204(10.0+)NX/Nas601SLIDVEL
205(10.0+)NX/Nas601OCHECK
206(10.0+)NX/Nas601GAPBIAS
207(10.0+)NX/Nas601OFFDET
208(10.0+)NX/Nas601RTPCHECK
209(10.0+)NX/Nas601RTPMAX
210(10.0+)NX/Nas601FRICDLY
211(10.0+)NX/Nas601TFORCE
212(10.0+)NX/Nas701 SLIDVEL
213(10.0+)NX/Nas701 OFFDET
214(10.0+)NX/Nas701 GAPBIAS
215(10.1+) NX/Nas101 PENADAPT
216(10.1+)NX/Nas101 PENETFAC
217(10.3+)Dyna A Soft Constraint
218(10.3+)Dyna A Soft Constraint Scale Factor
219(10.3+)Dyna A Airbag Load Curve ID
220(10.3+)Dyna A Maximum Parametric Segment Search
221(10.3+)Dyna A Segment Based Contact Options
222(10.3+)Dyna A Search DepthProperty Values (continued)
CONTACT
   API-2233
223(10.3+)Dyna A Number of Cycles Between Sorts (or Fre-
quency Curve IDx (-1))
224(10.3+)Dyna A Cycles Between Contact Force Updates
225(10.3+)Dyna B Maximum Penetration Distance
226(10.3+)Dyna B Thickness Option
227(10.3+)Dyna B Shell Thickness Considerations
228(10.3+)Dyna B Shooting Node Logic (0=Enabled)
229(10.3+)Dyna B Symmetry Plane (0=Off)
230(10.3+)Dyna B Primary Segment Searching Option (0=2D; 
1=3D)
231(10.3+)Dyna B Solid Element Thickness
232(10.3+)Dyna B Solid Element Stiffness
233(10.3+)Dyna C Improve Implicit Convergence (1=On; 2=Off)
234(10.3+)Dyna C Ignore Initial Penetration Options
235(10.3+)Dyna C Penetration Depth Reduction Factor (or Time 
Curve ID X(-1))
236(10.3+)Dyna C Stiffness Time Step (or Time Curve IDx (-1))
237(10.3+)Dyna C Angle Tolerance for Feature Line (radians)
238(10.3+)Dyna D Split Quadrilateral Co ntact Segments into 2 tri-
angles
239(10.3+)Dyna D Time Interval between Shell Penetration 
Reports
240(10.3+)Dyna D Scale Factor for Neighbor Segment Contact
241(10.3+)Dyna D Incremental Displacement Update for Tied 
Contacts (1=On)
242(10.3+)Dyna ABCD Level (0=Off, 1=A, 2=AB, 3=ABC, 
4=ABCD)
243(10.3+)NE/Nastran Maximum Normal Activation Distance
244(10.3+)NE/Nastran Maximum Radial Activation Distance
245(10.3+)NE/Nastran Maximum Allowable Slip
246(10.3+)NE/Nastran MAXAD OR MAXNAD/MAXRAD tog-
gleProperty Values (continued)
CONTACT
 API-2234  
262(2019.1+)ABAQUS GAP CONDUCTANCE: Function defin-
ing Conductance, Gap Clearan ce, Temperature relationship
263(2019.1+)ABAQUS GAP RADIATION: Emissivity A
264(2019.1+)ABAQUS GAP RADIATION: Emissivity B
265(2019.1+)ABAQUS GAP RADIATION: Function defining 
Effective View Factor, Gap Clearance relationship
...
400(2019.1+)Adaptively Modify Pe nalty Factor (1=On)
401(2019.1+)Adjustment Tolerance
402(2019.1+)Const Offset Distance
403(2019.1+)End Time of Initial Penetration
404(2019.1+)Sliding Contact Formulation
0=Automatically Upda te Contact Pairing
1=Update Contact Pairing Based on Initial Geometry 2=Update Contact Pairing with Sliding DisplacementsProperty Values (continued)
CONTACT
SetDefaults   API-2235
5.17.3  Connection Prope rty Object Methods
There following methods are available in addition to th e standard entity methods.
5.17.3.1  SetDefaults
SetDefaults
( ContactTolerance )
Description:This method initializes default va lues for the connection property.
Input:
REAL8 ContactToleranceSpecifies the “Max Contact Search Distance” for NX Nastran Linear 
Contact, the “Search Distance” fo r NX Nastran Glued Contact, and 
the “Tied Tolerance” for NX Nast ran Advnaced Nonlinear Contact.
If you specify 0, FEMAP will automa tically calculate the value (10 x 
model merge tolerance)
Output:
NoneReturn Code:NoneRemarks/Usage:This is a simple method that allows defa ult values to be pl aced into the object.
Example:None
 API-2236  
5.18  Connection Region Objects
Connection Region objects correspond to the conn ection regions in your model (in earlier ver-
sions, they were called Contact  Objects and Contact Segments).  They are derived from Entity 
objects, so in addition to the properties and methods  described here, all of the properties and meth-
ods defined for Entity objects are also available for Connection Region obj ects. For more informa-
tion, see Section 5.1, "Common Entity Properties and Methods". 
Use the feConnectionRegion method of the FEM AP Application object to create Connection 
Region objects. For compatibility with earlier re leases, you can also use feContact to create this 
object, however this method is obsolete.
5.18.1  Connection Regi on Object Properties
Connection Regions are always stored with a Se tID=1, and the ID equal to the region ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
Connection Region OptionsINT4 color The connection region color.INT4 layer The layer associated  with the connection region.
STRING title The connection region title (maximum 79 characters).
INT4 refNode Reference node ID.INT4 output Output on nodes(7) or elements(8).
BOOL rigid Flag to indicate rigid segment.REAL8 box[0..1][0..2]
or
V ARIANT vboxLocations at corners of contact box: box[0][xyz] is the mini-
mum dimension, box[1][xyz] is the maximum.
INT4 count The number of items in the connection region contact list
INT4 type Type of Region (0=Normal/Contact, 1=Fluid, 2=Bolt, 3=Rotor)INT4 refCSys Reference Coordinate SystemBOOL Disabled Flag to indicate a region is disabledRegion Options button - Simcenter Nastran tabREAL8 offset Region Offset DistanceRegion Options button - MSC Nastran tab
INT4 SurfaceContactFlagFlag to indicate how body surfaces may contact. Writes 
COPTB and corresponding value to BCBDPRP entry.
INT4 FrictionType 0=Friction Valu e (FRIC), 1=Friction Table (TABLE)
   API-2237
REAL8 FrictionValueSpecifies a friction coefficient and writes FRIC and a real 
number to BCBDPRP entry
INT4 FrictionTableSpecify the ID of an existing function. Writes FRIC and the 
integer ID va lue to BCBDPRP.
INT4 SmoothingControlWrites IDSPL and corresponding  value to BCBDPRP entry. 
Default=0.
INT4 MidNodeProjectionWrites MIDNOD and corresponding value to BCBDPRP entry. 
Only used when Smoothing Co ntrol IDSPL does not equal 0.
REAL8 DiscontinuityValueWrites SANGLE and correspondi ng value to BCBDPRP entry. 
Default=60.0.
INT4 ContactCheckWrites ISTYP to BCBDPRP entry.
0=Check Each Body, 1=Optimized Contact. Default=0.
Region Options button - MSC Nastran tab - Rigid Options buttonINT4 ControlNode ID of the Control N ode (CGID) for Rigid Motion Control.
INT4 MotControlTypeControl Type (CONTROL) for Rigid Motion Control.
-1=Position Control, 0=Velocity  Control, 2=Load Control
INT4 RotControlNodeID of the Rotation Control No de (NLOAD) for Rigid Motion 
Control.
BOOL AngVelFlag When True, sets Angular Velocity Value (ANGVEL) option.
INT4 AngVelTableWrites ID of existing function to (ANGVEL), VX (VELRB1), 
VY (VELRB2), and/or VZ (VELRB3) fields as an integer.
REAL8 AngVelValue Set or get the A ngular Velocity Value (ANGVEL) option.
BOOL RotAxisFlag[0..2]Set or get, Rotation Axis op tions, whether values or time 
dependent. For example, to  set on X (DCOS1), use 
RotAxisFlag[0]=1.
INT4 RotAxisTable[0..2]Set or get the ID(s) of existing fu nction(s) as integers. Specify a 
function ID at index [0] for DCOS1, a function ID at index [1] 
for DCOS2, a function ID at index [2] for DCOS3. 
REAL8 RotAxisValue[0..2]Set or get the real values for X,Y, Z Rotation Axis options. 
Specify a real value at index [0] for X (DCOS1), a real value at 
index [1] for Y (DCOS2), a real value at index [2] for Z 
(DCOS3)
BOOL MotionFlag[0..2]Set or get, Angular Velocity (VELRBX) options. For example, 
to set on VX (VELRB1), use MotionFlag[0]=1.Property Description
 API-2238  
INT4 MotionTable[0..2]Set or get the ID(s) of existing fu nction(s) as integers. Specify a 
function ID at index [0] for Ti me Dependent VX, a function ID 
at index [1] for Time Dependent VY, a function ID at index [2] 
for Time Dependent VZ. 
REAL8 MotionValue[0..2]Set or get the real values for VX,VY, VZ Motion Value 
Angular Velocity options. Specify a real value at index [0] for 
VX (VELRB1), a real value at index [1] for VY (VELRB2), a 
real value at index [2] for VZ (VELRB3)
REAL8 AppAngVelVal Set or get the va lue of Approach Angular Velocity. 
REAL8 AppRotAxisVal[0..2]Set or get the real values for X (N1),Y (N2), Z (N3) of the 
Approach Velocity Rotation Axes.
REAL8 AppVelVal[0..2]Set or get the real values for X (V1),Y (V2), Z (V3) of the 
Approach Velocity.
REAL8 GrowthComp[0..2]Set or get the real values for Growth Factor options. Specify a 
real value at index [0] for Comp onent 1 (GF1), a real value at 
index [1] for Component 2 (GF2), a real value at index [2] for 
Component 3 (GF3)
INT4 GrowthTable[0..2]Set or get the ID(s) of existing fu nction(s) as integers. Specify a 
function ID at index [0] for Ta ble 1 (TAB-GF1), a function ID 
at index [1] for Table 2 (TAB-GF2 ), a function ID at index [2] 
for Table 3 (TAB-GF3). 
Region Options button - ABAQUS tabThis is done via SetAnalyticSurfa ceType and GetAnalyticSurfaceType
Fluid Region OptionsBOOL FluidZFreeOn True = Fluid Z Free Surface is OnREAL8 FluidZFree Z-Depth of Fluid Free SurfaceREAL8 FluidDensity Density of Fluid
INT4 FluidXZSymmetrySymmetry Condition for XZ Pl ane (0=None, 1=Symmetric, 
2=Antisymmetric)
INT4 FluidYZSymmetrySymmetry Condition for YZ Pl ane (0=None, 1=Symmetric, 
2=Antisymmetric)
REAL8 FluidCharLength Fluid Characteristic LengthREAL8 FluidExactIntegFact Exact Integration factor for fluidRotor Region OptionsINT4 RotorLoadSet ID of Load Set containi ng Rotational body lo ads to be appliedProperty Description
   API-2239
REAL8 RotorOverallDamp Frequen cy for Overall Damping (W3)
REAL8 RotorMatlDamp Frequency  for Material Damping (W4)
REAL8 RotorSpeed Rotor speed  (not currently used)
NonStructural Mass Region Options
INT4 MassTypeThe type of Nonstructural Mass Region 0=Mass per length, 
1=mass per area, 2=total mass on length, 3=total mass on area
REAL8 MassNSM Nonstructural mass valueBolt Region OptionsINT4 BoltType Type of bolt 1=Beam 2=SolidINT4 BoltDir Bolt Direction 1=X, 2=Y , 3=Z
BOOL UseSolverAxesIf True, allows Nastran to auto matically determine bolt axis/
direction (CSID, IDIR fields) fo r BOLT entries. Valid for Bolt 
Type: SolidProperty Description
 API-2240  GetContactList
5.18.2  Connection Re gion Object Methods
There following methods are available in addition to th e standard entity methods.
5.18.2.1  GetContactList
GetContactList
Description:
This method retrieves info r mation from the contact list in a connection region.
Input:None
Output:
INT4 listcount The number of entries in the other arrays. 
INT4 listTYPE[0..N]The type of entity in each list entry. Refer to Section 3.3.6, "Entity 
Types"  for a list of types.
INT4 entityID[0..N] The ID of the entity in each list entry.
INT4 faceID[0..N]The ID of the face referenced by each 
 entity (if applicable).
For Elements, this typically should sp ecify the element face that is in 
the region (1 through 6). Howeve r, in cases like Bolt and NonStruc -
tural Mass Regions, al ong with Connection Regions where Output is 
set to “Element – No Faces”,  face ID should be set to 0 to indicate 
the entire element is in the Region.
For Curves and Surfaces, faceID 1 = Positive Side, faceID 2 = Nega -
tive Side.
INT4 expanded[0..N]Flag indicating that this is an exp anded node/element entry from a 
geometry contact.
Return Code:
FE_NOT_EXIST There are no entries in the list.
Remarks/Usage:This method simply retrie ves the 
 information about the contact li sts from the current object. You must 
first load that data - either usin g the Get( ) method, or by loadin g it yourself with PutContactList( ).
Example:None(  listcount, listTYPE, entityID, faceID, expanded )
PutContactList   API-2241
5.18.2.2  PutContactList
PutContactList
(  listcount, listTYPE, entityID, faceID, expanded )
Description:This method loads information into th e contact list for a connection region.
Input:INT4 listcount The number of en tries in the other arrays.
INT4 listTYPE[0..N]The type of entity specified in eac h entry. Refer to Section 3.3.6, 
"Entity Types" for a list of types.
INT4 entityID[0..N] The ID of the entity specified in each entry.
INT4 faceID[0..N]The ID of the face referenced by each entity (if applicable).
For Elements, this typically should sp ecify the element face that is in 
the region (1 through 6). However,  in cases like Bolt and NonStruc-
tural Mass Regions, al ong with Connection Regions where Output is 
set to “Element – No Faces”,  face ID should be set to 0 to indicate 
the entire element is  in the Region.
For Curves and Surfaces, faceID 1 = Positive Side, faceID 2 = Nega-
tive Side.
INT4 expanded[0..N]Flag indicating whether each entry is an expanded node/element 
entry from a geometric contact.
Output:NoneReturn Code:NoneRemarks/Usage:This method stores informa tion into the list of the current object. Any previous list information in that 
object is lost. This method does not store that info rmation to the model databa se. After using this func-
tion, you must call Put( ) if you want to store the updated list in the database.
Example:None
 API-2242  GetEntities
5.18.2.3  GetEntities
GetEntities
Description:
This retrieves a Sort Object (SortSet) that contains all of the enti ties of a give n type referenced by the 
region. 
Input:
INT4 entityTYPEThe type of entity that you want to select. Refer to Section 3.3.6, 
"Entity Types"  for a list of types.
BOOL bGetExpandedIf True, the region is first expand ed - any selected geometric entities 
will also select associat ed nodes or elements.
Output:
None
Return Code:
None
Remarks/Usage:
Once a Sort Object has been  populated with entities, th e entity ID can be accessed via the nInt1 property 
of the Sort Object, the FaceID vi a the nInt2 property, and the Expansion Status via the nInt3 property.
Example:
This method must be us ed with a Set statement to de fine the Sort object (SortSet).
Sub Main
    Dim App As femap.model    Set App = feFemap()
    Dim regn As femap.ConnectionRegion
    Set regn = App.feConnectionRegion    regn.Get(1)
    Dim sorts As femap.SortSet
    Set sorts = regn.GetEntities(FT_ELEM, True)    Dim s As femap.Set
    Set s = App.feSet
    While sorts.Next() <> FE_FAIL
        s.Add(sorts.nInt1)
    Wend
End Sub
This sequence creates the “s” Set object with the list of 
 elements that are referenced by Region 1.(  entityTYPE, bGetExpanded )
GetEntitySet   API-2243
5.18.2.4  GetEntitiySet
GetEntitySet
Description:
This retrieves a set that contains  al l of the entity IDs of a given type referenced by the region.
Input:
INT4 entityTYPEThe type of entity that you want to select. Refer to Section 3.3.6, 
"Entity Types"  for a list of types.
BOOL bGetExpandedIf True, the region is first expand ed - any selected geometric entities 
will also select associat ed nodes or elements.
Output:
NoneReturn Code:None
Remarks/Usage:
NoneExample:This method must be used  with a Set 
 statement to  define the Set object.
Sub Main
    Dim App As femap.model
    Set App = feFemap()
    Dim regn As femap.ConnectionRegion
    Set regn = App.feConnectionRegion
    regn.Get(1)
    Dim s As femap.Set
    Set s = regn.GetEntitySet(FT_ELEM, True)
End Sub
This sequence creates the “s” Set object with the list of elements that are referenced by Region 1.(  entityTYPE, bGetExpanded )
 API-2244  AddContact
5.18.2.5  AddContact
AddContact
(  listTYPE, entityID, faceID )
Description:This method loads information into  the contact list for a connection region. Unlike PutContactList, this 
method loads one entry at a time
Input:
INT4 listTYPEThe type of entity to be added. Refe r to Section 3.3.6, "Entity Types" 
for a list of types.
INT4 entityID The ID of  the entity specified
INT4 faceIDThe ID of the face referenced by each entity (if applicable).
For Elements, this typically should sp ecify the element face that is in 
the region (1 through 6). However,  in cases like Bolt and NonStruc-
tural Mass Regions, al ong with Connection Regions where Output is 
set to “Element – No Faces”,  face ID should be set to 0 to indicate 
the entire element is  in the Region.
For Curves and Surfaces, faceID 1 = Positive Side, faceID 2 = Nega-
tive Side.
Output:NoneReturn Code:NoneRemarks/Usage:This method stores informati on into the list of the current object. Af ter using this function, you must call 
Put( ) if you want to store the updated list in the database.
Example:None
SetOutputType   API-2245
5.18.2.6  SetOutputType
SetOutputType
(  entityTYPE )
Description:This method sets th e output type for the connection region.
Input:
INT4 entityTYPEThe type of entity for output. Refer to Section 3.3.6, "Entity Types" 
for a list of types.
Output:NoneReturn Code:NoneRemarks/Usage:For both Elements and Elements - No Faces, entit yTYPE should be set to FT_ELEM. When Face ID = 
0 for the element IDs, that indicates the regi on has output set to Elements - No Faces.
Example:None
 API-2246  SetOffset
5.18.2.7  SetOffset
SetOffset
(  offset )
Description:This method sets the offset  for the connection region.
Input:REAL8 offset The value of the region offset.Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
GetOffset   API-2247
5.18.2.8  GetOffset
GetOffset
(  offset )
Description:This method returns the offs et for the connection region.
Input:NoneOutput:REAL8 offset The value of the region offset.Return Code:NoneRemarks/Usage:NoneExample:None
 API-2248  SetFriction
5.18.2.9  SetFriction
SetFriction
(  body_friction )
Description:This method sets the frictio n for the connection region.
Input:REAL8 body_friction The value of the region friction.Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
GetFriction   API-2249
5.18.2.10  GetFriction
GetFriction
(  body_friction )
Description:This method returns the fric tion for the connection region.
Input:NoneOutput:REAL8 offset The value of the region friction.Return Code:NoneRemarks/Usage:NoneExample:None
 API-2250  SetAnalyticSurfaceType
5.18.2.11  SetAnalyticSurfaceType
SetAnalyticSurfaceType
(  body_friction )
Description:This method sets the Analytic Surfa ce Type for the connection region.
Input:
INT4 aba_rigSurfTypeThe type of Analytic Rigid Surface. Refer to Section 3.3.7, 
"FEMAP Constants": 0=FARS_CYLINDER, 1=FARS_REVOLU-
TION, 2=FARS_SEGMENTS.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
GetAnalyticSurfaceType   API-2251
5.18.2.12  GetAnalyticSurfaceType
GetAnalyticSurfaceType
(  void )
Description:This method returns the Analytic Su rface Type for the connection region.
Input:NoneOutput:NoneReturn Code:INT4 0=CYLINDER, 1=SEGMENTS, 2=REVOLUTIONRemarks/Usage:NoneExample:None
 API-2252  SetRigidType
5.18.2.13  SetRigidType
SetRigidType
(  offset )
Description:This method defines whether a connection region is rigid.Input:BOOLEAN isRigid Set to True for a rigid region, False otherwise
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
IsRigidType   API-2253
5.18.2.14  IsRigidType
IsRigidType
(  void  )
Description:This method indicates whether a connection region is rigid.
Input:NoneOutput:NoneReturn Code:FE_FAIL Region is not rigid ( FE_OK = Rigid )Remarks/Usage:NoneExample:None
 API-2254  Expand
5.18.2.15  Expand
Expand
( void )
Description:This method expands all of the geomet ric connection region s in the model. 
Input:NoneOutput:NoneReturn Code:FE_FAIL The specified expansion did not work.Remarks/Usage:This method expands all connection regions,  not just the one in the current object.
Example:None
Compress   API-2255
5.18.2.16  Compress
Compress
( void )
Description:This method compresses all of the geom etric connection regions in the model.
Input:NoneOutput:NoneReturn Code:FE_FAIL The specified compression did not work.Remarks/Usage:This method compresses all connec tion regions, not just the one loaded into the current object.
Example:None
 API-2256  Clear
5.18.2.17  Clear
Clear
( void )
Description:This method clears and resets the contents of the connection region
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
Reverse   API-2257
5.18.2.18  Reverse
Reverse
( void )
Description:This method reverses the direction of the connection region.Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-2258  Enable
5.18.2.19  Enable
Enable
( bEnable )
Description:This method is used to enable or disable a Conn ection, Fluid, Bolt, NonStructrual Mass, or Rotor 
region.
Input:BOOL bEnable Flag to set the state of the connection region. Output:NoneReturn Code:FE_FAIL Region is not proper type.Remarks/Usage:NoneExample:None
IsEnabled   API-2259
5.18.2.20  IsEnabled
IsEnabled
( void )
Description:This method checks the state of the connection region.Input:NoneOutput:NoneReturn Code:FE_FAIL Region is disabled.FE_OK Region is enabled.Remarks/Usage:NoneExample:None
 API-2260  BoundingBox
5.18.2.21  BoundingBox
BoundingBox
( Box )
Description:This method returns the coordinates of a rect angular box that enclos es a connection region.
Input:NoneOutput:
REAL8 Box[0..5]The dimensions of the bounding box, in Global Rectangular coordi-
nates.
Box[0] - Minimum X,      Box[3] - Maximum X
Box[1] - Minimum Y ,      Box[4] - Maximum Y
Box[2] - Minimum Z,      Box[5] - Maximum Z
Return Code:
FE_FAIL Unable to find a bounding box.FE_INV ALID Connection Region co ntains invalid entity types
Remarks/Usage:This method always re trieves a box that is aligned with Global  Rectangular coordinates, not an aligned 
box of minimum volume.
Example:None
BoundingBoxInCSys   API-2261
5.18.2.22  BoundingBoxInCSys
BoundingBoxInCSys
( nCSysID, Box )
Description:This method returns the coordinates of a rectangula r box that encloses a connection region, in coordi-
nates of the selected coordinate system
Input:INT4 nCSysID ID of coordinate syst em to return minimum and maximum 
Output:
REAL8 Box[0..5]The dimensions of the bounding box, in “coordinate system specified 
with nCSysID” coordinates.
Box[0] - Minimum X,      Box[3] - Maximum X
Box[1] - Minimum Y ,      Box[4] - Maximum Y
Box[2] - Minimum Z,      Box[5] - Maximum Z
Return Code:FE_FAIL Unable to find a bounding box.FE_INV ALID Connection Region co ntains invalid entity types
Remarks/Usage:This method always re trieves a box that is aligne d with the selected coordinate system, not an aligned 
box of minimum volume.
Example:None
 API-2262  IsEmpty
5.18.2.23  IsEmpty
IsEmpty
( void )
Description:This method checks if a connection region  has no entities selected, thus is empty.
Input:NoneOutput:NoneReturn Code:FE_FAIL Region is not empty (i.e., has entities).FE_OK Region is empty.Remarks/Usage:NoneExample:None
RemoveDuplicates   API-2263
5.18.2.24  RemoveDuplicates
RemoveDuplicates
( void )
Description:This method removes an y duplicate entities which exist in a region
Input:NoneOutput:NoneReturn Code:FE_FAIL Could not create the reduced listFE_NOT_A V AILABLE There are no selected surfaces/elements/etc   in the regionFE_OK Region contains no duplicatesRemarks/Usage:NoneExample:
Sub Main
    Dim App as femap.model
    Set App = feFemap()
    Dim c As ConnectionRegion
    Set c = App.feConnectionRegion
    While c.Next()
        c.RemoveDuplicates()        c.Put(c.ID)
    Wend
End Sub
 API-2264  NodesAsSet
5.18.2.25  NodesAsSet
NodesAsSet
( bExpandGeom, nNodeSetID, bClear )
Description:This method adds the IDs of nodes referenced by the region (Connection, Bolt, or Rotor only) currently 
loaded in the ConnectionReg ion Object to a specified Set. There is  an option to include  the IDs of nodes 
which are referenced by a region after geometric portions of the region are expanded.
Input:
BOOL bExpandGeomWhen True, the IDs of any nodes which are referenced by a region 
after geometric portions of the regi on are expanded will be added to 
the Set.
INT4 nNodeSetID ID of Set object to add node IDs
BOOL bClearWhen True, any IDs which are in the set are removed before adding 
the node IDs to the Set
Output:
NoneReturn Code:NoneRemarks/Usage:NoneExample:None
ElementsAsSet   API-2265
5.18.2.26  ElementsAsSet
ElementsAsSet
( bExpandGeom, nElemSetID, bClear )
Description:This method adds the IDs of elements referenced by  the region (any Type ot her than Rotor) currently 
loaded in the Conn ectionRegion Object to a specified Set. Ther e is an option to include the IDs of ele-
ments which are referenced by a region after ge ometric portions of th e region are expanded.
Input:
BOOL bExpandedGeomLoadsWhen True, the IDs of any elements which are referenced by a region 
after geometric portions of the regi on are expanded will be added to 
the Set.
INT4 nElemSetID ID of Set object to add element IDs
BOOL bClearWhen True, any IDs which are in the set are removed before adding 
the element IDs to the Set
Output:
NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-2266  
5.19  Connection Objects
Connection objects correspond to the connections in your model.  They are derived from Entity 
objects, so, in addition to the properties and methods described here, all of the properties and 
methods defined for Entity objects are also ava ilable for Connection obj ects. For more informa-
tion, see Section 5.1, "Common Entity Properties and Methods". 
Use the feConnection method of the FEMAP Ap plication object to create Connection objects.
5.19.1  Connection Object Properties
Connections are always stored with a SetID= 1, and the ID equal to the connection ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
INT4 color The connection color.INT4 layer The layer associ ated with the connection.
INT4 propID ID of the connection prop erty referenced by the connection
STRING title The title of the connection (max 79 char)INT4 contact[0..1]
or 
V ARIANT vcontactThe IDs of the Master an d Slave connection regions.
BOOL IsCombinationFlag to indicate whether a conn ection is made of referenced 
connectors.
Prop   API-2267
5.19.2  Connection Object Methods
The following methods are av ailable in addition to th e standard entity methods.
5.19.2.1  Prop
Prop
( void )
Description:This method creates and returns a Connection Property ob ject that is loaded with  the property data refer-
enced by a connection
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:
Example:
None
 API-2268  Enable
5.19.2.2  Enable
Enable
( bEnable )
Description:This method enables and disables connectionsInput:BOOL bEnable Enable connection if True, disables it if FalseOutput:NoneReturn Code:NoneRemarks/Usage:Enabled connections are translated for analysis, disabled ones are not.
Example:None
IsEnabled   API-2269
5.19.2.3  IsEnabled
IsEnabled
( void )
Description:This method indicates whet her a connection is enabled
Input:NoneOutput:NoneReturn Code:FE_FAIL Indicates connection is disabled (FE_OK if enabled)Remarks/Usage:NoneExample:None
 API-2270  BoundingBox
5.19.2.4  BoundingBox
BoundingBox
( Box )
Description:This method returns the coordinates of a rectangular box that encloses a connector.
Input:NoneOutput:
REAL8 Box[0..5]The dimensions of the bounding box, in Global Rectangular coordi-
nates.
Box[0] - Minimum X,      Box[3] - Maximum X
Box[1] - Minimum Y ,      Box[4] - Maximum Y
Box[2] - Minimum Z,      Box[5] - Maximum Z
Return Code:FE_FAIL Unable to find a bounding box.Remarks/Usage:This method always re trieves a box that is aligned with Global  Rectangular coordinates, not an aligned 
box of minimum volume.
Example:None
BoundingBoxInCSys   API-2271
5.19.2.5  BoundingBoxInCSys
BoundingBoxInCSys
( nCSysID, Box )
Description:This method returns the coordinates of a rectangular box that encloses a connector, in coordinates of the 
selected coordinate system
Input:INT4 nCSysID ID of coordinate syst em to return minimum and maximum 
Output:
REAL8 Box[0..5]The dimensions of the bounding box, in Global Rectangular coordi-
nates.
Box[0] - Minimum X,      Box[3] - Maximum X
Box[1] - Minimum Y ,      Box[4] - Maximum Y
Box[2] - Minimum Z,      Box[5] - Maximum Z
Return Code:FE_FAIL Unable to find a bounding box.Remarks/Usage:This method always re trieves a box that is aligne d with the selected coordinate system, not an aligned 
box of minimum volume.
Example:None
 API-2272  ConnectionsByType
5.19.2.6  ConnectionsByType
ConnectionsByType
( bGlue, bAll, nConnectorSetID, bClear )
Description:Add the IDs of connector(s) to a user-created set object based on contact or glued types.
Input:
BOOL bGlueIf set to False, only connector(s) w ith a contact type property will be 
added to the nConnectorSet. If set to  True, only conn ector(s)  with a 
glued type property will be added to the set specif ied by nConnec-
torSetID.
BOOL bAllIf set to True, bGlue is ignored and all connector(s) of either type are 
added to the set specified by nConnectorSetID.
LONG nConnectorSetID The set ID of a FEMAP Set Object to be populated.
BOOL bClearIf set to True, the set specified by nConnectorSetID will be cleared 
before new connecto r ID(s) are added.
Output:NoneReturn Code:INT4 rc The number of IDs added to the set specified by nConnectorSetID.Remarks/Usage:See CombinationsByType  for similar example.
Example:None
CombinationsByType   API-2273
5.19.2.7  CombinationsByType
CombinationsByType
( bGlue, bAll, nConnectorSetID, bClear )
Description:Add the IDs of connector combinatio n(s) (referenced) to a user-created  set object based on contact or 
glued types.
Input:
BOOL bGlueIf set to False, only connector comb ination(s) that have referenced 
connectors with a contact type prop erty will be adde d to the nCon-
nectorSet. If set to True, only conn ector combination(s) that have ref-
erenced connectors with a glued ty pe property will be added to the 
set specified by nConnectorSetID.
BOOL bAllIf set to True, bGlue is ignored an d all connector co mbinations of 
either type are added to the set  specified by nConnectorSetID.
LONG nConnectorSetID The set ID of a FEMAP Set Object to be populated.
BOOL bClearIf set to True, the set specified by nConnectorSetID will be cleared 
before new connector comb ination ID(s) are added.
Output:NoneReturn Code:INT4 rc The number of IDs added to the set specified by nConnectorSetID.Remarks/Usage: In the example below, “rc” would equal “cSet.Count()” because cSet starts empty.Example:
 API-2274  CombinationsByType
' ===============================================
' ** Need existing Connectors and Connector Sets before using
' ===============================================Sub Main
    Dim App As femap.model
    Set App = feFemap()    Dim connectionObj As femap.Connection
    Dim cSet As femap.Set
    Dim rc As femap.zReturnCode    Set connectionObj = App.feConnection
    Set cSet = App.feSet
' ===============================================' cSet is an empty FEMAP Set Object that will be populated with
' the ID(s) of glued connection combinations
' ===============================================
rc = connectionObj.CombinationsByType(True,False,cSet.ID,True)
End SubCombinationsByType
( bGlue, bAll, nConnectorSetID, bClear )
IsGlueConnector   API-2275
5.19.2.8  IsGlueConntor
IsGlueConnector
( nConnectorID )
Description:Determines if connector has a glued property type or not.Input:INT4 nConnectorID The ID of the connector to check.Output:NoneReturn Code:BOOL True if connector has a glue property type.Remarks/Usage:NoneExample:None
 API-2276  GetCombinations
5.19.2.9  GetCombinations
GetCombinations
( nCombinationsSetID )
Description:Populates a set object with the IDs of all connector combinations (referenced set) that use one particular 
connector.
Input:
INT4 nCombinationsSetIDThe ID of a set to populate with the ID(s) of all connector combina-
tions (connector referenced sets) the connector exists in.
Output:NoneReturn Code:
INT4 rcThe number of IDs added to the set specified by nCombinations-
SetID.
Remarks/Usage:This call must be proceeded by a “.Get” on any va lid connector object. The set specified by nCombina-
tionSetID is always cleared before populating.
Example:None
   API-2277
5.20  CSys Objects
CSys objects correspond to  the coordinate systems in your model. They are derived from Entity 
objects, so in addition to the properties and methods  described here, all of the properties and meth-
ods defined for Entity objects are also available for CSys objects.  For more information, see Sec-
tion 5.1, "Common Entity Properties and Methods".
Use the feCSys method of the FEMAP App lication object to create CSys objects.
5.20.1  CSys Object Properties
CSys are always stored with a SetID=1, and the ID equal to the coordinate system ID. 
The predefined global coordinate systems cannot be accessed or modified using this object. There-
fore you must always specify an ID > 2.
Property Description
REAL8 x
The coordinates of the origin of the coordinate system. They are 
always specified in global  rectangular coordinates.REAL8 y
REAL8 zREAL8 rotx The rotations, in degrees, of  the coordinate system axes, from 
the global coordinate axes. These are ordered rotations about X, 
then the rotated Y axis, then the doubly-rotated Z. No matter 
what definition coordinate system  is used, these are always rel-
ative to global coordinates.REAL8 roty
REAL8 rotz
INT4 layer The ID of the layer associated with the coordinate system.
INT4 color The coordinate system color.
INT4 typeThe coordinate system type: 0=Rectangular, 1=Cylindrical, 
2=Spherical.
INT4 defCSys The ID of the definition coordinate system.STRING title Coordinate system title  (maximum 79 characters).
Additional Properties
REAL8 origin[0..2]Accesses all three coordinates of the origin as a Variant. Same 
as using x, y, and z independently.
REAL8 rotation[0..2]Accesses all three components of the rotations as a Variant. 
Same as using rotx, roty, and rotz independently.
REAL8 matrix[0..8]The 3 x 3 direction cosine matrix that corresponds to the orien-
tation of the coordinate system in global rectangular. The rows 
of the array are stored sequentially.
 API-2278  XYPoints
5.20.2  CSys Object Methods
5.20.2.1  XYPoints
XYPoints
( origin, xaxis, xyplane )
Description:This method automatic ally updates the origin and rotations of a coordinate system based on three loca-
tions that you specify
Input:
REAL8 origin[0..2]The origin of the coordinate syst em. This, and all other locations, 
must be specified in global rectangular coordinates.
REAL8 xaxis[0..2] The coordinates of a point along the X Axis of the coordinate system.
REAL8 xyplane[0..2]The coordinates of a point in the XY  Plane of the coordinate system. 
This point does not need to lie along any of the coordinate axes.
Output:
NoneReturn Code:
FE_FAILThe operation failed. You probably did not correctly specify one of 
the coordinate locations
Remarks/Usage:NoneExample:None
Axis   API-2279
5.20.2.2  Axis
Axis
( nCSysType, nAxisDir, origin, Axis )
Description:This method creates or updates a coordinate syst em by specifying a location on the X, Y , or Z Axis
Input:INT4 nCSysType Coordinate system type. 0= Rectangular, 1=Cylin drical, 2=Spherical
INT4 nAxisDirSpecifies which axis of the coordi nate system will be aligned with 
the location specified in Axis
0 - X Axis
1 - Y Axis2 - Z Axis
REAL8 origin[0..2]The origin of the coordinate syst em. Must be specified in Global 
Rectangular coordinates. Must be specified in Global Rectangular 
coordinates.
REAL8 Axis[0..2]The XYZ coordinates of a point along the Axis of the coordinate sys-
tem specified by nAxisDir
Output:NoneReturn Code:FE_BAD_TYPE Invalid value for coor dinate system type specified
FE_BAD_DATA Invalid value for ax is direction (nAxisDir) specified
Remarks/Usage:When specifying a point on the X, Y or Z axes, a corresponding point on the XY , YZ, or ZX plane, 
respectively, is automatically determined by finding th e closest orthogonal global axis. This method is 
best used when only the direction of  the specified axis is of conseque nce. For additional control over the 
direction of the normal axis, use ei ther or XYPoints (Section 5.20.2.1, "XYPoints") or TwoAxes (Sec-
tion 5.20.2.3, "TwoAxes").
Example:None
 API-2280  TwoAxes
5.20.2.3  TwoAxes
TwoAxes
( nCSysType, nNormalAxisDir, origin, axis1, axis2 )
Description:This method creates or updates a coordinate syst em by specifying two vectors which are used in a 
defined manner based on an op tion specified by the user.
Input:INT4 nCSysType Coordinate system type. 0= Rectangular, 1=Cylin drical, 2=Spherical
INT4 nNormalAxisDirSpecifies the normal axis and ho w axis1 and axis2 will be used 
0 - X = normal, axis1 = Y , axis2 = YZ plane
1 - Y = normal, axis1 = X, axis2 = XZ plane2 - Z = normal, axis1 = X, axis2 = XY plane
REAL8 origin[0..2]The origin of the coordinate syst em. Must be specified in Global 
Rectangular coordinates.
REAL8 axis1[0..2]The XYZ components of the vector of Axis 1. Must be specified in 
Global Rectangular coordinates.
REAL8 axis2[0..2]The XYZ components of the vector of Axis 2. Must be specified in 
Global Rectangular coordinates.
Output:NoneReturn Code:FE_BAD_TYPE Invalid value for coor dinate system type specified
FE_BAD_DATA Invalid value for no rmal axis direction specified
Remarks/Usage:NoneExample:None
   API-2281
5.21  Curve Objects
Curve objects correspond to the curv es in your model. They are deri ved from Entity objects, so in 
addition to the properties and methods described here, all of the properties and methods defined 
for Entity objects are also available for curve objects. For more information, see Section 5.1, 
"Common Entity Properties and Methods".
Use the feCurve method of the FEMAP App lication object to create Curve objects.
5.21.1  Curve Object Properties
Curves are always stored with a SetID= 1, and the ID equal to the Curve ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
INT4 layer The ID of the laye r associated with the curve.
INT4 color The curve color.
INT4 typeThe curve type: 0=Line, 1= Arc, 2=Circle, 3=Spline, 
4=BSpline, 5=Solid, 6=Combined.
INT4 StdPoint[0..4]
or 
V ARIANT vStdPointThe IDs of the points referenced  by lines, arcs, circles, splines 
and solid lines.
INT4 attrPID The Property ID of the meshing attribute.
REAL8 attrOrient[0..2]
or 
V ARIANT vattrOrientThe orientation vector meshing a ttribute. Either a location or 
vector (based on attrOffsetType), specified in global rectangu-
lar coordinates.
REAL8 attrOffset[0..1][0..2]
orV ARIANT vattrOffsetThe meshing attribute defining th e offset to be applied to ele-
ments. attrOffset[0][0..2] is at  the beginning of the curve, 
attrOffset[1][0..2] is at the end. Specified in global rectangular 
coordinates. If doing radial offs ets, attrOffset[0][0..2] contains 
the radial origin, attrOffset[1][0] contains the radial offset dis-tance.
INT4 attrOrientTypeType of orientation for property attribute: 0=Orient By Vector, 
1=Orient By Location, 2=Orient By Vector, Reversed Element 
Direction, 3=Orient By Location, Reversed Element Direction. 
INT4 attrOffsetTypeType of offset for property attribute: 0=Offset by Vector, 
1=Offset Radial, 2=Offset by Location.
INT4 attrTopology To pology parameter.
INT4 attrRelease[0..1][0..5]
or
V ARIANT vattrReleaseThe release flags for the start and end of the curve. Nonzero if 
the associated degree of freedom is released.
 API-2282  
INT4 EngineThe ID of the solid modeling en gine used with this curve: 
0=None, 1=Parasolid, 2=ACIS.
INT4 Address The solid modeling engine geometry address.BOOL Suppressed True if this curve is suppressed (will not be meshed).
INT4 InternalToBoundaryIf this curve is internal to a multi-surface boundary, this prop-
erty contains the ID of the boundary, otherwise 0.
INT4 InCombinedCurveIf this curve is used to define a combined curve, this property 
contains the ID of the combined curve, otherwise 0
REAL8 ScaleFactor The Solid Geometry Scale FactorMesh SizingINT4 MeshElem[0..159]
or 
V ARIANT vMeshElemThe number of elements associate d with the curve or this seg-
ment of a custom mesh size.
REAL8 MeshBias[0..159]
or 
V ARIANT vMeshBiasThe bias factor for these elements.
REAL8 MeshMaxParam[0..159]
or 
V ARIANT vMeshMaxParamThe s parametric value along the cu rve at the end of this seg-
ment. If you do not use a custom mesh size, this will always 
have MeshMaxParam[0] = 1.0.
BOOL LengthSpacing[0..159]
or V ARIANT vLengthSpacingTrue if elements are sized with equal length spacing. False if 
parametric spacing is used.
BOOL CenterBias[0..159]
or 
V ARIANT vCenterBiasTrue if center biasing is used. False if end biasing is used.
BOOL GeometricBias[0..159]
or 
V ARIANT vGeometricBiasTrue if geometric biasing is used . False if linear biasing is used.
BOOL HasCustomMesh True if this is a custom mesh size, False otherwise.
INT4 MeshPointID[0..1224]
or V ARIANT vMeshPointIDThere is a maximum 1225 hard points on curves.
For BSplines only
INT4 BSplineOrder The order of the BSpline.
INT4 BSplineNumPoints The number of ke ypoints used to define the BSpline.Property Description
   API-2283
INT4 BSplinePoint[0..109]
or 
V ARIANT vBSplinePointThe IDs of the points used  to define the Bspline.
REAL8 BSplineKnot[0..120]
or V ARIANT vBSplineKnotThe knot values associated with the BSpline.
REAL8 BSplineWeight[0..120]
or 
V ARIANT vBSplineWeightThe weight values associated w ith the control points of the 
BSpline.
REAL8 BSplineT0
REAL8 BSplineT1BOOL BSplinePlanar True if the BSpline is planar.BOOL BSplineClosed True if the BSpline is closed.BOOL BSplineRational True if the BSpline is rational.BOOL BSplinePeriodic True if the BSpline is periodic.Property Description
 API-2284  
5.21.1.1  The Curve Types
If you look at the curve Type property, you will see a list of seve n available types. In fact, these 
seven types really comprise three categories: St andard Curves, BSplines and Solid Curves. Each 
category stores its point definitions differently. The following table shows the point definition for 
each curve type.
Curve Type Point Location Description
Line StdPoint [0]=start, [1]=endArc StdPoint [0]=center, [1 ]=start, [2]=along in direction from start to 
end, [3]=end
Circle StdPoint [0]=center, [1]=star t/end, [2]=90 deg., [3]=180 deg., 
[4]=270 deg.
Spline StdPoint [0]=start, [1]=first keypoint, [2]=second keypoint, 
[3]=end
BSpline BSplinePoint [0]=start, ... [BSplineNumPoints-1]=end
Solid Points are not defined, unless this is a solid curve that rep-
resents a line, in which case [0]=start,[1]=end.
Combined StdPoint [0]=start, [1]=end
Reverse   API-2285
5.21.2  Curve Object Methods
5.21.2.1  Reverse
Reverse
( void )
Description:This method reverses the direction of a curve.Input:NoneOutput:NoneReturn Code:
FE_FAIL Unable to reverse the cu rve, probably a solid curve.
Remarks/Usage:This method will not wo rk for solid curves.
Example:None
 API-2286  EndPoints
5.21.2.2  EndPoints
EndPoints
( startPt, endPt )
Description:This method retrieves the IDs of the endpoints of the current curve.
Input:NoneOutput:INT4 startPt
The IDs of the starting and ending points on the curve.
INT4 endPt
Return Code:
FE_FAILUnable to get the endp oints. Possibly curve has not been loaded, or 
not stored.
Remarks/Usage:This method works for any stored curve. You must fi rst call Get to load the cu rve from the database. It 
will not work with data you have loaded into a curve object but not yet stored.
Example:None
PointsAsSet   API-2287
5.21.2.3  PointsAsSet
PointsAsSet
( SetID, bClear)
Description:This method adds the end points of a curve into the specified Set object  with the option to clear the set 
before adding the end points
Input:INT4 SetID ID of Set object to add end points
BOOL bClearIf True, the Set object will be cl eared before the end points are 
added. If False, the end points are simply added to the specified Set 
object.
Output:NoneReturn Code:FE_FAIL End Points could not be determinedRemarks/Usage:NoneExample:None
 API-2288  ArcCircleInfo
5.21.2.4  ArcCircleInfo
ArcCircleInfo
( center, normal, startPt, endPt, angle, radius )
Description:This method retrieves information about arcs and circles.Input:NoneOutput:REAL8 center[0..2] The coordinates of the center of the circle.REAL8 normal[0..2] The vector components  of the arc/circle normal direction.
REAL8 startPt[0..2] The coordinates of the starting point of the curve.
REAL8 endPt[0..2] The coordinates of the ending point of the curve.REAL8 angle The subtended angle of the curve.REAL8 radius The radius of the curve.Return Code:
FE_FAILUnable to get the information. Possibly the curve has not been 
loaded, or is not the correct type.
Remarks/Usage:This method will only work for ar c and circle curve types - not for solids that represent those types.
Example:None
ParamToXYZ   API-2289
5.21.2.5  ParamToXYZ
ParamToXYZ
( s, xyz )
Description:This method retrieves the coordinates along the curve of a specified parametric location.
Input:REAL8 s The parametric value (0<=s<=1) along the curve. 0=Start, 1=End.Output:REAL8 xyz[0..2] The coordinates of th e parametric value along the curve.
Return Code:
FE_FAILUnable to get the information. Possibly the curve has not been 
loaded.
Remarks/Usage:This method will only wo rk for any curve type.
Example:None
 API-2290  XYZToParam
5.21.2.6  XYZToParam
XYZToParam
( xyz, s )
Description:This method retrieves the parame tric location along a curve closest to the specified coordinates.
Input:REAL8 xyz[0..2] The coordinates of the location of interest.
Output:REAL8 s The parametric value (0<=s<=1) along the curve. 0=Start, 1=End.Return Code:
FE_FAILUnable to get the information. Possibly the curve has not been 
loaded.
Remarks/Usage:This method will only wo rk for any curve type.
Example:None
Project   API-2291
5.21.2.7  Project
Project
( fromXYZ, toXYZ )
Description:This method projects a locatio n onto a curve (This method is  OBSOLETE, use ProjectToClosest 
method for access to all functionality of the “Modify, Project...” commands)
Input:REAL8 fromXYZ[0..2] The coordinates of the initial location.Output:REAL8 toXYZ[0..2] The coordinates of the projected location.Return Code:
FE_FAILUnable to get the information. Possibly the curve has not been 
loaded.
Remarks/Usage:This method will only wo rk for any curve type.
Example:None
 API-2292  ProjectToClosest
5.21.2.8  ProjectToClosest
ProjectToClosest
( bExtendCurve, vOrig, vProj )
Description:This method projects a location to the closest loca tion that lies on a curve (i.e., FEMAP determines vec-
tor used for projection)
Input:
BOOL bExtendCurveIf True, a straight curve will be extend ed infinitely in both directions 
and a circular curve will be extend ed a full 360 degrees. The closest 
location will then be de termined using the “extended curve” (i.e., the 
projected location could lie outside the end points of the curve). If 
False, the location will be forced onto the curve itself and in some 
cases this will result in the location being coincident with one of the curve’s end points.
REAL8 vOrig[0..2] The coordinates of the initial location.Output:REAL8vProj[0..2] The coordinates of the projected location.Return Code:
FE_FAILUnable to get the information. Possibly the curve has not been 
loaded.
Remarks/Usage:This method will only wo rk for any curve type.
Example:None
ProjectAlongVector   API-2293
5.21.2.9  ProjectAlongVector
ProjectAlongVector
( vAlong, vOrig, vProj )
Description:This method projects a loca tion along a specified vector to a locatio n that lies on a curve (i.e., user sup-
plies vector used for projection)
Input:REAL8 vAlong [0..2] The vector supplied by the user to project along.REAL8 vOrig [0..2] The coordina tes of the initial location.
Output:REAL8 vProj [0..2] The coordinates of the projected location, on the curve
Return Code:
FE_FAILUnable to get the information. Possibly the curve has not been 
loaded.
Remarks/Usage:NoneExample:None
 API-2294  Tangent
5.21.2.10  Tangent
Tangent
( outward, fromXYZ, tangent )
Description:This method finds the tangent to  a curve at a specified location.
Input:
BOOL outwardIf True, the tangent along the first “h alf” of the curve (s<0.5) is com-
puted in the opposite direction from the curve. If False, all tangents 
are computed in the curve direction from start to end.
REAL8 fromXYZ[0..2] The coordinates of the initial location.Output:REAL8 tangent[0..2] The vector components of the tangent.
Return Code:
FE_FAILUnable to get the information. Possibly the curve has not been 
loaded.
Remarks/Usage:This method will only wo rk for any curve type.
Example:None
Length   API-2295
5.21.2.11  Length
Length
( void )
Description:This method returns the length of a curve.Input:NoneOutput:NoneReturn Code:Length The length of the curv e. 0.0 for any invalid curve.
Remarks/Usage:This method will only wo rk for any curve type.
Example:None
 API-2296  PartialLength
5.21.2.12  PartialLength
PartialLength
( s0, s1 )
Description:This method returns the length of a curve between two parametric locations.
Input:REAL8 s0 The starting parametric location.REAL8 s1 The ending parametric location.Output:NoneReturn Code:Length The length of the curv e. 0.0 for any invalid curve.
Remarks/Usage:This method will only work for any curve type. The values for s0 and s1 must be between 0.0 and 1.0. s1 
must be greater than s0.
Example:None
ParamAtLength   API-2297
5.21.2.13  ParamAtLength
ParamAtLength
( fromstart, length )
Description:This method returns the para meter value at a specified distance from the end of a curve.
Input:
BOOL fromstartIf True, length is measured from the st art of the curve. If False, it is 
measured from the end.
REAL8 lengthThe distance along the curve where the parameter value is deter-
mined.
Output:None
Return Code:
S The parametric value correspondin g to the location along the curve.
Remarks/Usage:This method will only work  for any curve type. The length  must be less than th e total length of the 
curve.
Example:None
 API-2298  MeshParam
5.21.2.14  MeshParam
MeshParam
( numParam, meshParam )
Description:This method returns an array of pa rametric locations along the curve that are currently established as 
mesh locations, based on  the mesh size specifications that are defined.
Input:INT4 numParam The number of para metric locations in meshParam.
REAL8 meshParam[0..numP-
aram-1]The parametric locations along the curve where nodes will be 
meshed.
Output:None
Return Code:
FE_FAILUnable to determine the mesh lo cations. Possibly the curve has not 
been loaded or saved.
Remarks/Usage:This method will only work for an y curve type. The curve must however  be Put to the database after any 
changes have been made to mesh sizing or th is command may not return  the proper locations.
Example:
MeshParam   API-2299
Sub Main() 
' This function creates nodes at mesh locations 
' on all curves in the model

Dim App As femap.model 
Set App = feFemap()

Dim cu As femap.Curve 
Set cu = App.feCurve

Dim nd As femap.Node 
Set nd = App.feNode

Dim rc As Long 
Dim n As Long 
Dim meshloc As Variant 
Dim ndloc As Variant 

' Loop over all curves 
While cu.Next 
    ' Get the mesh locations on the curves 
    rc = cu.MeshParam(n, meshloc) 
    If rc Then 
        For i = 0 To n - 1 
            ' Find the nodal location and create a node 
            rc = cu.ParamToXYZ(meshloc(i), ndloc) 
            nd.xyz = ndloc 
            nd.Put (nd.NextEmptyID) 
        Next i 
    End If 
Wend
App.feViewRegenerate(0)
End SubMeshParam
( numParam, meshParam )
 API-2300  AddMeshLoc
5.21.2.15  AddMeshLoc
AddMeshLoc
( s, numElem, spacing, biasMethod, bias, biasLoc )
Description:This method adds a custom mesh size lo cation at the specified  parametric location.
Input:
REAL8 sThe parametric location along the curve - must be between 0.0 and 
1.0 - where the mesh location will be added.
INT4 numElemThe number of elements between th is location and the preceding one 
(at the next lower “s” value).
INT4 spacingIf 0, then parametric sp acing is used; otherwise,  constant length spac-
ing is used.
INT4 biasMethod 0=Equal length spacing, 1=Linear Bias, 2=Geometric Bias.
REAL8 biasThe bias value - greater than or equa l to 1.0. A value of 1.0 is not 
biased. A value of 2.0 means that the largest element is approxi-mately 2.0 times the le ngth of the smallest.
INT4 biasLoc0=Small elements at start of curve, 1=Small elements at end of 
curve, 2=Small elements at center of curve, 3=Small elements at 
both ends of curve.
Output:NoneReturn Code:
FE_FAILUnable to add the mesh location.  Possibly the curve has not been 
loaded or saved. Possibly ther e are already too many locations 
defined.
Remarks/Usage:The curve should be loaded prior to  using this method. This will alwa ys result in a custom mesh size 
being defined for the curve. You must always Put the curve to the database afte r finishing for the mesh 
locations to be saved. To redefine a mesh location, si mply call this method agai n with the same value for 
s.
Example:None
AddMeshLocXYZ   API-2301
5.21.2.16  AddMeshLocXYZ
AddMeshLocXYZ
( xyz, numElem, spacing, biasMethod, bias, biasLoc )
Description:This method adds a custom mesh size lo cation at the specified coordinate location.
Input:
REAL8 xyz[0..2]The coordinates of the location for the mesh location. Must be in 
global rectangular. These coordinate s are projected onto the curve to 
determine the correspondin g parametric location.
INT4 numElemThe number of elements between th is location and the preceding one 
(at the next lower s value).
INT4 spacingIf 0, then parametric spacing is used. Otherwise, constant length 
spacing is used.
INT4 biasMethod 0=Equal length spacing, 1=Linear Bias, 2=Geometric Bias.
REAL8 biasThe bias value - greater than or equa l to 1.0. A value of 1.0 is not 
biased. A value of 2.0 means that the largest element is approxi-
mately 2.0 times the le ngth of the smallest.
INT4 biasLoc0=Small elements at start of curve, 1=Small elements at end of 
curve, 2=Small elements at center of curve, 3=Small elements at 
both ends of curve.
Output:NoneReturn Code:
FE_FAILUnable to add the mesh location.  Possibly the curve has not been 
loaded or saved. Possibly ther e are already too many locations 
defined.
Remarks/Usage:This method is essentially the same as AddMeshLoc, ex cept that it uses a coordinate location instead of 
a parametric location.
Example:None
 API-2302  Nodes
5.21.2.17  Nodes
Nodes
( getBoundary, getInterior, numNodes, nodeID )
Description:This method returns the nodes th at are attached to this curve
Input:BOOL getBoundary If True, the nodes attach ed to the curve endpoints are selected
BOOL getInteriorIf True, the nodes attached to the in terior of the curve (not the end-
points) are selected
Output:INT4 numNodes The number of nodes returned.INT4 nodeID[0..numNodes-1] The ID s of the selected nodes which are attached to the curve.
Return Code:FE_FAIL Unable to return nodes, possibly none exist.FE_NOT_EXIST No nodes were attached to the curve in the manner you selected.
FE_NO_MEMORY Insufficient memory to  allocate list of attached nodes.
Remarks/Usage:NoneExample:
Nodes   API-2303
The following codes modifies the color of all nodes on Curve 4. 
 Sub Main

Dim App As femap.model 
Set App = feFemap() 
Dim cu As femap.Curve 
Set cu = App.feCurve

Dim nd As femap.Node 
Set nd = App.feNode

Dim rc As Long 
Dim Count As Long 
Dim Nodes As Variant 
Dim i As Long 
rc = cu.Get (4) 
rc = cu.Nodes(True, True, Count, Nodes) 
For i = 0 To Count - 1 
  nd.Get (Nodes(i)) 
  nd.color = 4 
  nd.Put (0) 
Next i
App.feViewRegenerate(0)
End SubNodes
( getBoundary, getInterior, numNodes, nodeID )
 API-2304  NodesAsSet
5.21.2.18  NodesAsSet
NodesAsSet
( getBoundary, getInterior, nSetID, bClear )
Description:This method returns the nodes that are attached to this curve in a Set Object
Input:BOOL getBoundary If True, the nodes attach ed to the curve endpoints are selected
BOOL getInteriorIf True, the nodes attached to the in terior of the curve (not the end-
points) are selected
INT4 nSetID The ID of a Set Object to receive the Node IDsBOOL bClear If True, the Set is cleared prior to loading the Node IDsOutput:NoneReturn Code:FE_FAIL Unable to return nodes, possibly none exist.Remarks/Usage:Same as Nodes, except that the IDs are retu rned in a Set Object rather than an array.
Example:None
Elements   API-2305
5.21.2.19  Elements
Elements
( numElems, elemID )
Description:This method returns the elements that are attached to this curve
Input:NoneOutput:INT4 numElems The number of elements returned.
INT4 elemID[0..numElems-1] The IDs of the select ed elements which are attached to the curve.
Return Code:FE_FAIL Unable to return elem ents, possibly none exist.
FE_NOT_EXIST No elements were attached to the curve in the manner you selected.
FE_NO_MEMORY Insufficient memory to allocate list of attached elements.
Remarks/Usage:Only elements that have all of their nodes on the cu rve will be returned by th is method. Elements that 
simply touch the curve at  one edge or one node will not be returned.
Example:None
 API-2306  ElementsAsSet
5.21.2.20  ElementsAsSet
ElementsAsSet
( nSetID, bClear )
Description:This method returns the elements that ar e attached to this curve in a Set Object
Input:INT4 nSetID The ID of the Set Object that receives the Element IDsBOOL bClear If True, the Set is cleared be fore it is loaded with Element IDs.
Output:NoneReturn Code:FE_FAIL Unable to return elem ents, possibly none exist.
Remarks/Usage:Only elements that have all of their nodes on the cu rve will be returned by th is method. Elements that 
simply touch the curve at one edge  or one node will not be returned . Same as Elements method except 
that IDs are returned in a Set rather than an array.
Example:None
ElementsWithFaces   API-2307
5.21.2.21  ElementsWithFaces
ElementsWithFaces
( numElems, elemID )
Description:This method returns the elements that have  faces which are attached to this curve
Input:NoneOutput:INT4 numElems The number of elements returned.
INT4 elemID[0..numElems-1]The IDs of the selected elements which have faces attached to the 
curve.
Return Code:FE_FAIL Unable to return elem ents, possibly none exist.
FE_NOT_EXIST No elements were attached to the curve in the manner you selected.
FE_NO_MEMORY Insufficient memory to allocate list of attached elements.
Remarks/Usage:This will return elements that have  any face on the curve - including pl anar elements that have one edge 
along the curve. Planar elements that simply touch the curve at on e corner/node will not be returned.
Example:None
 API-2308  BoundingBox
5.21.2.22  BoundingBox
BoundingBox
( Box )
Description:This method returns the coordinates of a rectangular box the encloses this geometry.
Input:NoneOutput:
REAL8 Box[0..5]The dimensions of the bounding box, in Global Rectangular coordi-
nates.
Box[0] - Minimum X,      Box[3] - Maximum X
Box[1] - Minimum Y ,      Box[4] - Maximum Y
Box[2] - Minimum Z,      Box[5] - Maximum Z
Return Code:FE_FAIL Unable to find a bounding box.
FE_INV ALIDObject does not contain valid geomet ry. Curve type is not a Solid or 
Composite curve. Other types are not supported
Remarks/Usage:This method always re trieves a box that is aligned with Global  Rectangular coordinates, not an aligned 
box of minimum volume.
Example:None
BoundingBoxInCSys   API-2309
5.21.2.23  BoundingBoxInCSys
BoundingBoxInCSys
( nCSysID, Box )
Description:This method returns the coordinates of a rectangula r box the encloses this geometry, in coordinates of 
the selected coordinate system.
Input:INT4 nCSysID ID of coordinate syst em to return minimum and maximum 
Output:
REAL8 Box[0..5]The dimensions of the bounding box, in “coordinate system specified 
with nCSysID” coordinates.
Box[0] - Minimum X,      Box[3] - Maximum X
Box[1] - Minimum Y ,      Box[4] - Maximum Y
Box[2] - Minimum Z,      Box[5] - Maximum Z
Return Code:
FE_FAIL Unable to find a bounding box.
FE_INV ALIDObject does not contain valid geomet ry. Curve type is not a Solid or 
Composite curve. Other types are not supported
Remarks/Usage:This method always re trieves a box that is aligne d with the selected coordinate system, not an aligned 
box of minimum volume.
Example:None
 API-2310  GetMeshLoc
5.21.2.24  GetMeshLoc
GetMeshLoc
( numLoc, meshParam )
Description:Retrieves the parametric values alon g the curve of th e mesh locations.
Input:NoneOutput:INT4 numLoc The number of mesh locations on the curveREAL8 meshParam[0..num-
Loc-1]The parametric locations
Return Code:
FE_FAIL Unable to find mesh locationsRemarks/Usage:NoneExample:None
GetMeshLocXYZ   API-2311
5.21.2.25  GetMeshLocXYZ
GetMeshLocXYZ
( numLoc, meshXYZ )
Description:Retrieves the global coordinates of the mesh locations  along the curve.
Input:NoneOutput:INT4 numLoc The number of mesh locations on the curveREAL8 
meshXYZ[0..numLoc-1]The global coordinates of the mesh locations
Return Code:
FE_FAIL Unable to find mesh locationsRemarks/Usage:Similar to GetMeshLoc, but this  method returns coordinate ra ther than parametric values.
Example:None
 API-2312  IsSmoothEdge
5.21.2.26  IsSmoothEdge
IsSmoothEdge
( dAngle, nConvexityType )
Description:Determines whether the adjacent surfaces of  a solid meet smoothly at this curve
Input:REAL8 dAngle The maximum angle that  will be consid ered as smooth
Output:
INT4 nConvexityType0=Smooth and Flat, 1=Smooth and Convex, 2=Smooth and Concave, 
3=Smooth with Inflection, 4=Smooth and Variable Convex/Concave
Return Code:FE_FAIL Unable to test smoothness and convexityFE_INV ALID Not smoothFE_NOT_A V AILABLE Curve is not a curve on a solidRemarks/Usage:NoneExample:None
Surfaces   API-2313
5.21.2.27  Surfaces
Surfaces
( nCombinedMode, numSurfaces, surfaceID )
Description:Returns an array of surfaces that reference this curve
Input:
INT4 nCombinedMode0=List contains the basic surfaces that are adjacent to the curve, 
1=Any surfaces that are adjacent th at are in a Combined Surface are 
replaced by the ID of the Combined Surface, 2=List contains both 
the underlying and combined surfaces.
Output:INT4 numSurfaces The number of surfaces in the returned array
INT4 surfaceID[0..numSur-
faces-1]The IDs of the surfaces.
Return Code:
FE_FAIL Unable to get surfacesRemarks/Usage:This function only works for So lid or Composite Curves that are defined on Solids. Same as Surface-
sAsSet except IDs are returned in an Array rather than in a Set.
Example:None
 API-2314  SurfacesAsSet
5.21.2.28  SurfacesAsSet
SurfacesAsSet
( nCombinedMode, nSetID, bClear )
Description:Returns surfaces that reference this curve in a Set ObjectInput:
INT4 nCombinedMode0=List contains the basic surfaces that are adjacent to the curve, 
1=Any surfaces that are adjacent th at are in a Combined Surface are 
replaced by the ID of the Combined Surface, 2=List contains both 
the underlying and combined surfaces.
INT4 nSetID ID of the Set Object to receive the Surface IDsBOOL bClear If True, the Set is cl eared before load ing the surfaces
Output:NoneReturn Code:FE_FAIL Unable to get surfacesRemarks/Usage:This function only works for Soli d or Composite Curves that are defined on Solids. Same as Surfaces, 
except that IDs are returned in th e Set rather than in an array.
Example:None
Normal   API-2315
5.21.2.29  Normal
Normal
( xyz, vNormal )
Description:Returns the average of the surface normals at a specifi ed location along the curve
Input:
REAL8 xyz[0..2]The Global Rectangular coordinates of a location along the curve 
where you want to find the normal
Output:REAL8 vNormal[0..2] The average surface normal at that locationReturn Code:FE_FAIL Unable to get surfacesRemarks/Usage:This function finds all of the surf aces adjoining the curve and computes a normal to each surface at the 
specified location. The returned normal is simply the average of  those surface normals.
Example:None
 API-2316  IsCombinedCurve
5.21.2.30  IsCombinedCurve
IsCombinedCurve
( void )
Description:Indicates whether or not the curve is a combined curveInput:NoneOutput:NoneReturn Code:FE_OK Curve is a combined curveFE_FAIL Curve is not a combined curveRemarks/Usage:You can also use the “type” proper ty of the curve to determine whet her a curve is a combined curve.
Example:None
GetCombinedCurves   API-2317
5.21.2.31  GetCombinedCurves
GetCombinedCurves
( nNumCurves, curveID )
Description:Returns the IDs of the curves us ed to define a combined curve
Input:NoneOutput:INT4 nNumCurves The number of curves returned in curveID
INT4 curveID[0..nNumCurves]The IDs of the curves used to define  a combined curve. The curves in 
this array are listed in the order they are used along the combined 
curve - starting at the beginning of  the curve. If the direction of the 
returned curve is opposite  that of the composite curve, then the ID in 
the array will be negative (i.e. if yo u see an entry in curveID like -7, 
that means that curve 7 is u sed in its reversed direction)
Return Code:FE_FAIL Not a combined curveFE_INV ALID Invalid number of curves defining the composite curveRemarks/Usage:NoneExample:None
 API-2318  CombinedCurvesAsSet
5.21.2.32  CombinedCurvesAsSet
CombinedCurvesAsSet
( nSetID, bClear )
Description:Returns the IDs of the curves us ed to define a combined curve
Input:INT4 nSetID The ID of a Set that will receive the curve IDsBOOL bClear If True, the Set is cleared prior to loading the curve IDsOutput:NoneReturn Code:FE_FAIL Not a combined curveFE_INV ALID Invalid number of curves defining the composite curveRemarks/Usage:This method is similar to GetCombinedCurves, howe ver there is no indication of forward/reverse direc-
tion when using this method . All IDs are positive and stored in the Set Object.
Example:None
CombineCurves   API-2319
5.21.2.33  CombineCurves
CombineCurves
( nNumCurves, curveID )
Description:Creates a combined curve from an  array of underlying curves. 
Input:INT4 nNumCurves The number of curves supplied in curveID
INT4 curveID[0..nNumCurves]The IDs of the curves used to define  a combined curve. The curves in 
this array must be listed in the or der they will be used along the com-
bined curve - starting at the beginn ing of the curve. If you need to 
reverse a curve, then you must su pply its ID as a negative number 
(i.e. -ID) - then the usage of the cu rve in the combined curve will be 
in the opposite directio n from the original curve.
Output:
None
Return Code:FE_FAIL Could not create combined curve.FE_INV ALID Too many curves specified.FE_NOT_EXIST A supplied curve does not exist.Remarks/Usage:The curves supplied to this method must be properly ordered, conn ected and able to create a combined 
curve.
Example:None
 API-2320  Facets
5.21.2.34  Facets
Facets
( numPoints, xyzPoint )
Description:Returns the global rectangular coor dinates of the locations along the curve that are used to draw the 
curve
Input:NoneOutput:INT4 numPoints The number of points returned in xyzPointREAL8 xyzPoint[0..(3*num-
Points)-1]The locations along the curve, stored [x0,y0,z0,x1,y1,z1,...]
Return Code:
FE_FAIL Could not retrieve facets.Remarks/Usage:The curve is drawn by simply conn ecting these locations sequentially.
Example:None
PartialLengthXYZ   API-2321
5.21.2.35  PartialLengthXYZ
PartialLengthXYZ
( xyz0, xyz1 )
Description:This method returns the length of  a curve between two XYZ locations.
Input:REAL8 xyz0[0..2] The coordinates of the location of interest.
REAL8 xyz1[0..2] The coordinates of the location of interest.
Output:NoneReturn Code:Length The length of the curv e. 0.0 for any invalid curve.
Remarks/Usage:This method will only wo rk for any curve type. 
Example:None
 API-2322  PartialLengthNode
5.21.2.36  PartialLengthNode
PartialLengthNode
( nID1, nID2 )
Description:This method returns the length of  a curve between the Node locations  that are closest to the curve.
Input:INT4 nID1 The ID of the first Node.INT4 nID2 The ID of the second NodeOutput:NoneReturn Code:Length The length of the curv e. 0.0 for any invalid curve.
Remarks/Usage:This method will work  for any curve type. 
Example:None
IsStraight   API-2323
5.21.2.37  IsStraight
IsStraight
( )
Description:Determines whether the cu rve is a straight line
Input:NoneOutput:NoneReturn Code:FE_OK Curve is a straight lineFE_FAIL Not a straight line.Remarks/Usage:NoneExample:None
 API-2324  IsArc
5.21.2.38  IsArc
IsArc
( )
Description:Determines whether the curve is an arcInput:NoneOutput:NoneReturn Code:FE_OK Curve is an arcFE_FAIL Not an arc.Remarks/Usage:NoneExample:None
IsNonManifold   API-2325
5.21.2.39  IsNonManifold
IsNonManifold
( )
Description:Determines whether the curve is nonmanifold
Input:NoneOutput:NoneReturn Code:FE_OK Manifold curveFE_FAIL Curve is nonmanifold
FE_BAD_TYPECurve is not a supported type for this method. This  method only 
works with Solid and Composite curves.
Remarks/Usage:Nonmanifold curves are ones that  bound more than 2 surfaces.
Example:None
 API-2326  IsGeneral
5.21.2.40  IsGeneral
IsGeneral
( )
Description:Determines whether the curve is nonmanifold (on a general body) by querying Parasolid
Input:NoneOutput:NoneReturn Code:FE_OK Manifold curveFE_FAIL Curve is nonmanifold
FE_BAD_TYPECurve is not a supported type for this method. This  method only 
works with Solid and Composite curves.
Remarks/Usage:Nonmanifold curves are ones that bound more than  2 surfaces. This comman d provides an alternate 
method to the IsNonManifold method.
Example:None
IsSmooth   API-2327
5.21.2.41  IsSmooth
IsSmooth
( dAngle )
Description:Determines whether the surfaces bounded by this cu rve are tangent within a specified angle along the 
curve
Input:
REAL8 dAngleThe maximum angle below which the curve is considered to be a 
smooth connection betwee n the adjoining surfaces.
Output:NoneReturn Code:
FE_OK Curve is smooth
FE_FAIL Not a smooth curveFE_BAD_TYPE This method only works with Solid and Composite curves.
Remarks/Usage:NoneExample:None
 API-2328  IsMergeable
5.21.2.42  IsMergeable
IsMergeable
( void )
Description:Determines whether a curve is mergeable, thus can be removed by geometry simplification and cleanup 
commands
Input:NoneOutput:NoneReturn Code:FE_OK Curve is mergeableFE_FAIL Not is not mergeableRemarks/Usage:NoneExample:None
IsFreeEdge   API-2329
5.21.2.43  IsFreeEdge
IsFreeEdge
( void )
Description:Determines whether a curve is a free edge.Input:NoneOutput:NoneReturn Code:FE_OK Curve is a Free EdgeFE_FAIL Curve is not a Free Edge
FE_BAD_TYPE Curve type must be 
5=Solid  or 6=Combined
Remarks/Usage:
NoneExample:None
 API-2330  IsOnSolidRegion
5.21.2.44  IsOnSolidRegion
IsOnSolidRegion
( void )
Description:Determines whether a curve is on a solid region.Input:NoneOutput:NoneReturn Code:FE_OK Curve is on a Solid Region.FE_FAIL Curve is not on a Solid Region.
FE_BAD_TYPE Curve type must be 
5=Solid  or 6=Combined
Remarks/Usage:
NoneExample:None
TangentAtEnds   API-2331
5.21.2.45  TangentAtEnds
TangentAtEnds
( outward, pvEnd1Tan, pvEnd2Tan )
Description:Determines whether the surfaces bounded by this cu rve are tangent within a specified angle along the 
curve
Input:
BOOL outwardIf true, the outward pointing tangents  are computed at each end. If 
False, tangents along the curve in the parametric direction of the 
curve are computed.
Output:REAL8 pvEnd1Tan[0..2] The tangen t at the start of the curve
REAL8 pvEnd2Tan[0..2] The tangent at the end of the curveReturn Code:FE_BAD_TYPE Curve type is no t supported for this method
FE_FAIL Unable to compute tangentsRemarks/Usage:This method is only  supported for Solid and Composite Curves.
Example:None
 API-2332  CurvatureAcrossEdge
5.21.2.46  CurvatureAcrossEdge
CurvatureAcrossEdge
( pdMinVal, pdMaxVal, pdAngleBetweenNormals )
Description:Finds the minimum and maximum curvature along th e curve and the maximum angle between normals 
of the adjacent surfaces
Input:NoneOutput:REAL8 pdMinVal Minimum radius of curvatureREAL8 pdMaxVal Maximum radius of curvatureREAL8 pdAngleBetweenNor-
malsMaximum angle between the adjacent surface normals
Return Code:
FE_BAD_TYPE Curve type is no t supported for this method
FE_FAIL Unable to compute valuesRemarks/Usage:This method is only  supported for Solid and Composite Curves.
Example:None
ClosestPointToCurve   API-2333
5.21.2.47   ClosestPointToCurve
ClosestPointToCurve
( nCurveID, pdX, pdY, pdZ, pdDistance, pdAngleOfTangents )
Description:Finds the closest point on th e curve to a selected curve
Input:INT4 nCurveID The curve to test for closest approachOutput:REAL8 pdX
The coordinates of the closest loca tion on the curve to the selected 
curveREAL8 pdY
REAL8 pdZREAL8 pdDistance The distance from the point to the selected curve
REAL8 pdAngleOfTangentsThe Angle between the Curve Tangen t and the curve tangent of the 
selected curve at the location of closest approach
Return Code:FE_BAD_TYPE Curve type is no t supported for this method
FE_FAIL Unable to compute valuesFE_INV ALID Unable to find closest approach
FE_NOT_A V AILABLE Unable to locate selected curveRemarks/Usage:This method is only  supported for Solid and Composite Curves.
Example:None
 API-2334  ClosestPointToSurface
5.21.2.48  ClosestPointToSurface
ClosestPointToSurface
( nSurfaceID, pdX, pdY, pdZ, pdDistance, pdAngleOfTangentToSurfaceNormal )
Description:Finds the closest point on th e curve to a selected surface
Input:INT4 nSurfaceID The surface to test for closest approach
Output:REAL8 pdX
The coordinates of the closest lo cation on the curve to the surface REAL8 pdY
REAL8 pdZREAL8 pdDistance The distance from the point to the surfaceREAL8 pdAngleOfTangentTo-
SurfaceNormalThe Angle between the Curve Tangen t and the surface normal at the 
location of closest approach
Return Code:FE_BAD_TYPE Curve type is no t supported for this method
FE_FAIL Unable to compute valuesFE_INV ALID Unable to find closest approach
FE_NOT_A V AILABLE Unable to locate selected surfaceRemarks/Usage:This method is only  supported for Solid and Composite Curves.
Example:None
MinRadius   API-2335
5.21.2.49  MinRadius
MinRadius
( pdMinRadius)
Description:Finds the minimum radius of a So lid curve or a Composite curve.
Input:NoneOutput:REAL8 pdMinRadius Minimum radius of curveReturn Code:FE_BAD_TYPE Curve type is no t supported for this method
FE_FAIL Unable to compute valuesRemarks/Usage:This method is only  supported for Solid and Composite Curves.
Example:None
 API-2336  ParamOnCombinedCurve
5.21.2.50  ParamOnCombinedCurve
ParamOnCombinedCurve
( s, pnCurveID)
Description:This method returns the ID of the underlying curv e of a “composite” curve at a specified parametric 
location.
Input:REAL8 s Parametric location along “c omposite” curve from 0.0 to 1.0
Output:INT4 pnCurveID Curve ID of underlying curve at specified parametric location
Return Code:FE_BAD_TYPE Curve type is no t supported for this method
FE_FAIL Unable to determine underlying curve IDRemarks/Usage:This method is on ly supported for Composite Curves.
Example:None
IsSuppressed   API-2337
5.21.2.51  IsSuppressed
IsSuppressed
( void )
Description:Indicates whether or not the curve is suppressedInput:NoneOutput:NoneReturn Code:FE_OK Curve is suppressedFE_FAIL Curve is not suppressedRemarks/Usage:NoneExample:None
 API-2338  ClearMeshLoc
5.21.2.52  ClearMeshLoc
ClearMeshLoc
( void )
Description:Clears all previous mesh sizing on curveInput:NoneOutput:NoneReturn Code:FE_OK Mesh sizing has been removed from curveRemarks/Usage:The curve should be loaded  prior to using this method. You must always Put the curve to the database 
after finishing for removal of assigned mesh  sizing. Sets number of elements to 0. 
Example:None
HasMeshSize   API-2339
5.21.2.53  HasMeshSize
HasMeshSize
( void )
Description:Indicates if a curve has assigned mesh sizing.Input:NoneOutput:NoneReturn Code:FE_OK Curve has assigned mesh sizingFE_FAIL Curve does not have assigned mesh sizingRemarks/Usage:NoneExample:None
 API-2340  SetSimpleMeshLoc
5.21.2.54  SetSimpleMeshLoc
SetSimpleMeshLoc
( nNumElem, spacing, biasMethod, bias, biasLoc )
Description:This method sets mesh sizing on a curve using on ly Number of Elements and Node Spacing options. 
Similar to using Mesh, Mesh Contro l, Size Along Curve menu command.
Input:INT4 nNumElem The number of elements on the curve
INT4 spacingIf 0, then parametric sp acing is used; otherwise,  constant length spac-
ing is used.
INT4 biasMethod 0=Equal length spacing, 1=Linear Bias, 2=Geometric Bias.
REAL8 biasThe bias value - greater than or equa l to 1.0. A value of 1.0 is not 
biased. A value of 2.0 means that the largest element is approxi-mately 2.0 times the le ngth of the smallest.
INT4 biasLoc0=Small elements at start of curve, 1=Small elements at end of 
curve, 2=Small elements at center of curve, 3=Small elements at 
both ends of curve.
Output:NoneReturn Code:
FE_FAILUnable to set mesh loca tion. Possibly the curv e has not been loaded 
or saved.
Remarks/Usage:The curve should be loaded  prior to using this method. You must always Put the curve to the database 
after finishing for the mesh  locations to be saved.
Example:None
MeshCount   API-2341
5.21.2.55  MeshCount
MeshCount
( NumElem, CustomSize)
Description:This method returns the number of elements specifie d via mesh sizing on a cu rve and if custom mesh 
sizing has been assigned.
Input:NoneOutput:INT4 NumElem Number of elements assigned via mesh sizing on curve
BOOL CustomSizeIf True, the curve has custom mesh si zing assigned. If False, standard 
mesh sizing has been assigned.
Return Code:
NoneRemarks/Usage:NoneExample:None
 API-2342  CommonPoint
5.21.2.56  CommonPoint
CommonPoint
( OtherCurveID, CommonPoint, MultipleCommon )
Description:The method returns the ID of a common point found between the curve currently  loaded in the object 
and another specified curve.  In addition, it can also be used to determine if multiple points are common 
between the curves.
Input:INT4 OtherCurveID ID of curved used to determine if there ar e any common points
Output:
INT4 CommonPointID of point common between curve currently loaded in object and 
OtherCurveID
BOOL MultipleCommonIf True, more than one point is co mmon between the curve currently 
loaded in the object and OtherCur veID. If False, then only ID of 
CommonPoint is common  between the curves.
Return Code:FE_FAIL No points are common between the curvesRemarks/Usage:NoneExample:None
Solid   API-2343
5.21.2.57  Solid
Solid
( nSolidID )
Description:This method returns the ID of the So lid that contains the current Curve
Input:NoneOutput:INT4 nSolidID The ID of the Solid that references the current Curve
Return Code:FE_FAIL Unable to get the solidRemarks/Usage:This method will only work with a Curve and Combined Cu rve that is defined on a Solid.
Example:None
 API-2344  Midpoint
5.21.2.58  Midpoint
Midpoint
( Mipoint )
Description:This method returns the coordinates of the midpoint of a curve or combined curveInput:NoneOutput:
REAL8 midpoint[0..2]The coordinates of the midpoint of the current curve or combined 
curve. Always returned  in the global rectangular coordinate system
Return Code:
Remarks/Usage:Example:
None
Center   API-2345
5.21.2.59  Center
Center
( center)
Description:This method returns the coordinat es of the center point of a circular  arc (curve or combined curve)
Input:NoneOutput:
REAL8 center[0..2]The coordinates of the center point of the current curve or combined 
curve. Always returned  in the global rectangular coordinate system
Return Code:FE_FAIL Curve or combined curve is not a circular arc or does not exist
Remarks/Usage:
Example:
None
 API-2346  GetPrecision
5.21.2.60  GetPrecision
GetPrecision
( void )
Description:This method returns the current Parasolid precision of a curve
Input:NoneOutput:NoneReturn Code:
Current Parasolid precision of curve
Remarks/Usage:
Example:
None
ResetPrecision   API-2347
5.21.2.61  ResetPrecision
ResetPrecision
( void )
Description:This method resets th e Parasolid precision of a curve to a valu e equal to 5.0E-9*current Solid Geometry 
Scale Factor.
Input:NoneOutput:NoneReturn Code:
Remarks/Usage:
If Solid Geometry Scale Factor is equal to 39 .37 (Inches), then this value will be 1.9685E-7
If Solid Geometry Scale Factor is equal to 1.0 (Meters), then this value will be 5.0E-9
If Solid Geometry Scale Factor is equal to 1000 .0 (Millimeters), then this value will be 5.0E-6
Example:None
 API-2348  InitMeshAttributes
5.21.2.62  InitMeshAttributes
InitMeshAttributes
( nPropID )
Description:Initialize Mesh Attributes on the curve.Input:INT4 nPropID Property ID used for mesh attributes on curve.
Output:NoneReturn Code:
Remarks/Usage:
This method sets the defau lt attrTopology = FTO_LINE2.
Example:None
ManifoldType   API-2349
5.21.2.63  ManifoldType
ManifoldType
( pnType )
Description:This method is used to dete rmine the type of surface connectivity for a curve. Types are:
Free - “EdgeCurve” not shared  with any other surface)
Manifold - “Edge Curve” shar ed by two different surfaces
NonManifold - “Edge Curve” is shared by more th an two surfaces OR “Edge Curve” of one surface is 
shared with “Interior Curve” of another surface
Wirebody - Indicates a Parasolid wirebody (very un common, as they can only be imported, not created 
within FEMAP)Unknown - Curve connectivity cannot be determined, su ch as a curve not attached to a surface and is 
also not a Parasolid wirebody
Input:None
Output:
INT4 pnTypeType of Curve Connectivity. Use enum zCurveManifoldType
Unknown = FCMT_UNKNOWN (-1)
Wirebody = FCMT_WIREEDGE (0)Free = FCMT_FREEEDGE (1)
Manifold = FCMT_MANIFOLD (2)
NonManifold = FCMT_NONMANIFOLD (3)
Return Code:
Remarks/Usage:
NoneExample:None
 API-2350  IsFacet
5.21.2.64  IsFacet
IsFacet
( void )
Description:Indicates whether or not the curve is a curve on a faceted surfaceInput:NoneOutput:NoneReturn Code:FE_OK Curve is a curve on a faceted surfaceFE_FAIL Curve is not a curve on a faceted surfaceFE_INV ALID The current object does not contain a valid Parasolid curve
Remarks/Usage:NoneExample:None
   API-2351
5.22  Data Surface Objects
Data Surface objects correspond to Femap Data Su rfaces which are used to create spatial and 
entity based variations. 
They are derived from Entity object s, so in addition to the proper ties and methods described here, 
all of the properties and methods defined for Entity  objects are also available for Data Surface 
objects. For more informatio n, see Section 5.1, "Common En tity Properties and Methods". 
Use the feDataSurf method of th e FEMAP Application object to create Data Surface objects.
5.22.1  Data Surface Object Properties
Data Surfaces are always stored with a SetI D=1, and the ID equa l to the surface ID.
Property Description
STRING title Data Surface title (maximum 79 characters).
INT4 csysCoordinate System in which th e Data Surface should be evalu-
ated in.
BOOL vector Flag indicating that this data surface contains vector data.
INT4 AlongCoordProjectID(Along Coordinates) Surface ID  in which to project Along 
Curve Data surface drive spline.
INT4 ParamCurveSurfID(Between, Tabular) Curve ID or Surface ID that defines the 
parametric space.
BOOL ExtendEdgeValues(Between) When True, enables Extend Edge Values Outside 
Data Surface
REAL8 InterpPercent(Arbituary 3D) Percent of variation locations to include in inter-
polation. 
INT4 InterpMin(Arbitrary 3D) Minimum  number of variation locations to include 
in interpolation. 
INT4 TabularUdefOption (Tabular XYZ) 0 = In terpolate from closest, 1 = Constant value.
REAL8 TabularUdefVal (Tabular XYZ)Value for TabularUdefOpt 
INT4 OutMapOption(Output Map)Method used to de termine values for target loca-
tions that fall outside of source mesh: 0=FMO_ZERO; 1=FMO_V ALUE; 
2=FMO_EXTEND; 3=FMO_ INTERP; 4=FMO_NONE
REAL8 DefOutMapValue1(Output Map)‘X’ value used if ta rget mapping falls outside of 
source mesh and MapOption is set to 1 (FMO_V ALUE)
REAL8 DefOutMapValue2(Output Map)‘Y’ value used if ta rget mapping falls outside of 
source mesh and MapOption is set to 1 (FMO_V ALUE)
 API-2352  
REAL8 DefOutMapValue3(Output Map)‘Z’ value used if target mapping falls outside of 
source mesh and MapOption is set to 1 (FMO_V ALUE)
REAL8 MapOffsetTolerance Specifies the Mapping Tolerance value
enum DataConversionData Conversion method for output: 
0=FMDC_VU (From View)1=FMDC_A VG (Average)
2=FMDC_MAX (Maximum)
3=FMDC_MIN (Minimum)4=FMDC_A VG_SKIP_CORNER (Average, Centroid Only)
5=FMDC_MAX_SKIP_CORNER (Max, Centroid Only)
6=FMDC_MIN_SKIP_CORNER (Min, Centroid Only)Property Description
GetDataSurf   API-2353
5.22.2  Data Surface Methods
The following methods are av ailable in addition to th e standard entity methods.
5.22.2.1  GetDataSurf
GetDataSurf
(EntID)
Description:This method retrieves the Data Surface ID Input:INT4 EntID ID of the Data Surface to retrieve.Output:NoneReturn Code:FE_FAIL Unable to get the data surface.Remarks/Usage:
Example:
 API-2354  PutDataSurf
5.22.2.2  PutDataSurf
PutDataSurf
(EntID)
Description:This method stores the Data Surface in the model database with the specified ID.
Input:INT4 EntID ID of the Data Surface to store.Output:NoneReturn Code:FE_FAIL Unable to store the data surface.Remarks/Usage:
Example:
VarAlongCoord   API-2355
5.22.2.3  VarAlongCoord
VarAlongCoord
(numEntries, xyz, val_xyz)
Description:This method creates a Along Coordinates Data Surface.Input:INT4 numEntries Number of variation locations used to create Data Surface
REAL8 xyz[0..(3*numEntries)-
1]
or
V ARIANT vxyzxyz is an array of the variation coor dinates. In the array, there must 
be 3 entries for each location, follo wed by the 3 for the next location.
REAL8 val_xyz[0..(3*numEn-
tries )-1]
or
V ARIANT vval_xyzval_xyz is an array of the variation values. In the array, there must be 
3 entries for the variation location,  followed by the 3 variation values 
for the next location. If Data Surface is a Scalar then just define the 
y,z values as zero.
Output:NoneReturn Code:FE_FAIL Unable to create the Data Surface.Remarks/Usage:The following Data Su rface Object properties that are valid:
1) AlongCoordProjectID 
Example:
 API-2356  VarBetween2Pts
5.22.2.4  VarBetween2Pts
VarBetween2Pts
(xyz, val_xyz)
Description:This method creates a Between Coordinates Data Surface with the 2 Point Linear Variation Type.
Input:REAL8 xyz[0..(3*2)-1]
or
V ARIANT vxyzxyz is an array of the variation coor dinates. In the array, there must 
be 3 entries for each location, follo wed by the 3 for the next location.
REAL8 val_xyz[0..(3*2)-1]
or
V ARIANT vval_xyzval_xyz is an array of the variation values. In the array, there must be 
3 entries for the variation location,  followed by the 3 variation values 
for the next location. If Data Surface is a Scalar then just define the 
y,z values as zero.
Output:
None
Return Code:FE_FAIL Unable to create the Data Surface.Remarks/Usage:The following Data Su rface Object properties that are valid:
1) csys
VarBetween2Pts   API-2357
Example:
Sub Main 
Dim App As femap.model 
Set App = feFemap 

Dim ds As femap.DataSurf 
Set ds = App.feDataSurf 

Dim xyz(6) As Double 
Dim xyzVal(6) As Double 

For j = 0 To 2-1 
    xyz(j*3+0) =  j*2 
    xyz(j*3+1) =  0 
    xyz(j*3+2) =  0 
    xyzVal(j*3+0) =  j*1 
    xyzVal(j*3+1) =  j*2 
    xyzVal(j*3+2) =  0 
Next j

ds.vector=True 

rc = ds.VarBetween2Pts( xyz, xyzVal ) 
rc =ds.PutDataSurf( App.Info_NextID(FT_DATA_SURF) ) 

End SubVarBetween2Pts
(xyz, val_xyz)
 API-2358  VarBetween4Pts
5.22.2.5  VarBetween4Pts
VarBetween4Pts
(xyz, val_xyz)
Description:This method creates a Between Coordinates Data Surface with the 4 Point Bilinear Variation Type.
Input:REAL8 xyz[0..(3*4)-1]
or
V ARIANT vxyzxyz is an array of the variation coor dinates. In the array, there must 
be 3 entries for each location, follo wed by the 3 for the next location.
REAL8 val_xyz[0..(3*4)-1]
or
V ARIANT vval_xyzval_xyz is an array of the variation values. In the array, there must be 
3 entries for the variation location,  followed by the 3 variation values 
for the next location. If Data Surface is a Scalar then just define the 
y,z values as zero.
Output:
None
Return Code:FE_FAIL Unable to create the Data Surface.Remarks/Usage:Data Surface Object properties that are valid:   
1) csys 
Example:
VarBetween8Pts   API-2359
5.22.2.6  VarBetween8Pts
VarBetween8Pts
(xyz, val_xyz)
Description:This method creates a Between Coordinates Data Surface with the 8 Point Trilinear Variation Type.
Input:REAL8 xyz[0..(3*8)-1]
or
V ARIANT vxyzxyz is an array of the variation coor dinates. In the array, there must 
be 3 entries for each location, follo wed by the 3 for the next location.
REAL8 val_xyz[0..(3*8)-1]
or
V ARIANT vval_xyzval_xyz is an array of the variation values. In the array, there must be 
3 entries for the variation location,  followed by the 3 variation values 
for the next location. If Data Surface is a Scalar then just define the 
y,z values as zero.
Output:
None
Return Code:FE_FAIL Unable to create the Data Surface.Remarks/Usage:Data Surface Object properties that are valid:   
1) csys   
Example:
 API-2360  VarParametric2Pt
5.22.2.7  VarParametric2Pt
VarParametric2Pt
(xyz, val_xyz)
Description:This method creates a Between Coordinates Data Su rface with the 2 Point Parametric Variation Type.
Input:REAL8 xyz[0..(3*2)-1]
or
V ARIANT vxyzxyz is an array of the variation coor dinates. In the array, there must 
be 3 entries for each location, follo wed by the 3 for the next location.
REAL8 val_xyz[0..(3*2)-1]
or
V ARIANT vval_xyzval_xyz is an array of the variation values. In the array, there must be 
3 entries for the variation location,  followed by the 3 variation values 
for the next location. If Data Surface is a Scalar then just define the 
y,z values as zero.
Output:
None
Return Code:FE_FAIL Unable to create the Data Surface.Remarks/Usage:The following Data Surfa ce Object properties that are valid:   
1) csys 
2) ParamCurveSurfID
Example:
VarParametric4Pt   API-2361
5.22.2.8  VarParametric4Pt
VarParametric4Pt
(xyz, val_xyz)
Description:This method creates a Between Coordinates Data Su rface with the 4 Point Parametric Variation Type.
Input:REAL8 xyz[0..(3*4)-1]
or
V ARIANT vxyzxyz is an array of the variation coor dinates. In the array, there must 
be 3 entries for each location, follo wed by the 3 for the next location.
REAL8 val_xyz[0..(3*4)-1]
or
V ARIANT vval_xyzval_xyz is an array of the variation values. In the array, there must be 
3 entries for the variation location,  followed by the 3 variation values 
for the next location. If Data Surface is a Scalar then just define the 
y,z values as zero.
Output:
None
Return Code:FE_FAIL Unable to create the Data Surface.Remarks/Usage:The following Data Surfa ce Object properties that are valid:   
1) csys 
2) ParamCurveSurfID
Example:
 API-2362  VarOutputMap2
5.22.2.9  VarOutputMapV2
VarOutputMap2
(nModelID, groupID, outSetID, outVecID)
Description:This method creates a Output Map Da ta Surface. This method replaces (insert method name without V2 
here). For more information see, Section 2.4, "Working with Output in FEMAP 2020.1 and above".
Input:INT8 nModelID ID of the source model containing output to be mapped.INT4 groupID ID of group of entities in source model from whic h to map output.
INT4 outSetID ID of output set containing data from which to map output.INT4 outVecID ID of output vector containing data from which to map output.Output:NoneReturn Code:FE_FAIL Unable to create the Data Surface.Remarks/Usage:The following Data Surfa ce Object properties that are valid:   
1) csys 
2) OutMapOption
3) DefOutMapValue14) DefOutMapValue2
5) DefOutMapValue3
Example:
VarMeshSurface   API-2363
5.22.2.10  VarMeshSurface
VarMeshSurface
(setID, eDataType, sX, sY, sZ)
Description:This method creates a Ou tput Map Data Surface.
Input:INT4 setID ID of the femap set co ntaining the Data Surface entities.
INT4 eDataType Type of entity in Data Su rface. For more inform ation, see Section 
3.3.5, "Entity Types". Only No de and Element types are valid. 
STRING sX String containing value or expression for x cell in Data Surface.
STRING sY String containing value or expression for y cell in Data Surface.
STRING sZ String containing value or ex pression for z cell in Data Surface.
Output:NoneReturn Code:FE_FAIL Unable to create the Data Surface.Remarks/Usage:The following Data Surfa ce Object properties that are valid:   
1) csys 
Example:
 API-2364  VarSpatialUVtable
5.22.2.11  VarSpatialUVtable
VarSpatialUVtable
(uDivisions, vDivisions)
Description:This method creates a Tabular Parametric uv Data Surface.
Input:INT4 uDivisions Number of divisions in the u direction.INT4 vDivisions Number of divisions in the v direction.Output:NoneReturn Code:FE_FAIL Unable to create the Data Surface.Remarks/Usage:The following Data Surfa ce Object properties that are valid:   
1) TabularUdefOption2) TabularUdefVal
Example:
VarSpatialXYZTable   API-2365
5.22.2.12  VarSpatialXYZTable
VarSpatialXYZTable
(xDivisions, yDivisions, zDivisions)
Description:This method creates a Ou tput Map Data Surface.
Input:INT4 xDivisions Number of divisions in the 1st dimension.INT4 yDivisions Number of divisions in the 2st dimension.INT4 zDivisions Number of di visions in the 3st dimension.
Output:NoneReturn Code:FE_FAIL Unable to create the Data Surface.Remarks/Usage:The following Data Surfa ce Object properties that are valid:   
1) csys 2) TabularUdefOption
3) TabularUdefVal
Example:
 API-2366  VarArbitrary3DCoord
5.22.2.13  VarArbitrary3DCoord
VarArbitrary3DCoord
(numEntries, xyz, val_xyz)
Description:This method creates a Ar bitrary 3D Data Surface.
Input:INT4 numEntries Number of variation locations in xyz, val_xyz arrays.
REAL8 xyz[0..(3*numEntries)-
1]
or
V ARIANT vxyzxyz is an array of the variation coor dinates. In the array, there must 
be 3 entries for each location, follo wed by the 3 for the next location.
REAL8 val_xyz[0..(3*numEn-
tries)-1]
or
V ARIANT vval_xyzval_xyz is an array of the variation values. In the array, there must be 
3 entries for the variation location,  followed by the 3 variation values 
for the next location. If Data Surface is a Scalar then just define the 
y,z values as zero.
Output:NoneReturn Code:FE_FAIL Unable to create the Data Surface.Remarks/Usage:The following Data Surfa ce Object properties that are valid:   
1) csys 2) InterpPercent
3) InterpMin
Example:
VarEquation   API-2367
5.22.2.14  VarEquation
VarEquation
(equation)
Description:This method creates a Ar bitrary 3D Data Surface.
Input:STRING String containing equation.Output:NoneReturn Code:FE_FAIL Unable to create the Data Surface.Remarks/Usage:The following Data Surfa ce Object properties that are valid:   
1) csys 
Example:
 API-2368  GetCellValue
5.22.2.15  GetCellValue
GetCellValue
(nPage, nRow, nCol, nComponent, dValue)
Description:This method retrieve s the value of a cell.
Input:INT4 nPage Page containing cell to retrieve value fromINT4 nRow Row containing cell to retrieve value from. INT4 nCol Column containing cell to retrieve value from
INT4 nComponentComponent of the value vector in which to re trieve value from. Com-
ponent: Scalar = 0, Vector = 0..3 
Output:REAL8 dValue Value of the cell.Return Code:FE_NOT_A V AILABLE Cell is BlankRemarks/Usage:
Example:
SetCellValue   API-2369
5.22.2.16  SetCellValue
SetCellValue
(nPage, nRow, nCol, nComponent, rVal)
Description:This method sets the value of a cell.Input:INT4 nPage Page containing cell to set value.INT4 nRow Row containing cell to set value. INT4 nCol Column containing cell to set value.
INT4 nComponentComponent of the value vector in which to set value for. Compo-
nents: Scalar = 0, Vector = 0..3 
REAL8 rVal Value to set.Output:NoneReturn Code:FE_NOT_A V AILABLE Cell does not existRemarks/Usage:
Example:
 API-2370  SetCellEquation
5.22.2.17  SetCellEquation
SetCellEquation
(nPage, nRow, nCol, nComponent, equation)
Description:This method sets th e equation of a cell.
Input:INT4 nPage Page containing cell to set.INT4 nRow Row containing cell to set. INT4 nCol Column containing cell to set.
INT4 nComponentComponent of the value vector in which to set. Components: Scalar 
= 0, Vector = 0..3 
STRING equation Equation to set the cell to.Output:NoneReturn Code:FE_NOT_A V AILABLE Cell does not existRemarks/Usage:
Example:
GetColumnTitle   API-2371
5.22.2.18  GetColumnTitle
GetColumnTitle
(nPage, nCol, title)
Description:This method retrieves the title of a column.
Input:INT4 nPage Page containing co lumn to retrieve title from
INT4 nCol Column re trieve title from. 
Output:STRING Title Title of column.Return Code:FE_FAIL Unable to get title.Remarks/Usage:
Example:
 API-2372  GetColumnValue
5.22.2.19  GetColumnValue
GetColumnValue
(nPage, nCol, rVal)
Description:This method retrieves the value of a column.
Input:INT4 nPage Page containing column to retrieve value fromINT4 nCol Column retrieve value from. Output:REAL8 rVal Value of column.Return Code:FE_NOT_A V AILABLE Column Value is blank.Remarks/Usage:
Example:
GetRowTitle   API-2373
5.22.2.20  GetRowTitle
GetRowTitle
(nPage, nRow, sTitle)
Description:This method retrieves the title of a row.Input:INT4 nPage Page containing row to retrieve title from
INT4 nRow Row to retrieve title from. Output:STRING sTitle Title of rowReturn Code:FE_FAIL Unable to get title.Remarks/Usage:
Example:
 API-2374  SetRowTitle
5.22.2.21  SetRowTitle
SetRowTitle
(nPage, nRow, sTitle)
Description:This method sets the title of a row.
Input:INT4 nPage Page containing row to set title forINT4 nRow Row to set title for. STRING sTitle Title of row. Output:NoneReturn Code:FE_FAIL Unable to get title.Remarks/Usage:
Example:
GetRowValue   API-2375
5.22.2.22  GetRowValue
GetRowValue
(nPage, nRow, rVal)
Description:This method retrieves the title of a row.Input:INT4 nPage Page containing row to retrieve value from
INT4 nRow Row to retrieve value from. Output:REAL8 rVal Value of rowReturn Code:FE_NOT_A V AILABLE Row is blank.Remarks/Usage:
Example:
 API-2376  SetRowValue
5.22.2.23  SetRowValue
SetRowValue
(nPage, nRow, sTitle)
Description:This method sets the value of a row.Input:INT4 nPage Page containing row to set value for.INT4 nRow Row to set value for. REAL8 rVal Value of row. Output:NoneReturn Code:FE_FAIL Unable to set value.Remarks/Usage:
Example:
GetPageTitle   API-2377
5.22.2.24  GetPageTitle
GetPageTitle
(nPage, sTitle)
Description:This method retrieves the title of a page.Input:INT4 nPage Page to retrieve title from.Output:STRING sTitle Title of page.Return Code:FE_FAIL Unable to get title.Remarks/Usage:
Example:
 API-2378  SetPageTitle
5.22.2.25  SetPageTitle
SetPageTitle
(nPage, sTitle)
Description:This method sets the title of a page.
Input:INT4 nPage Page to set title.STRING sTitle Title of page.Output:NoneReturn Code:FE_FAIL Unable to set page title.Remarks/Usage:
Example:
GetPageValue   API-2379
5.22.2.26  GetPageValue
GetPageValue
(nPage, rVal)
Description:This method retrieves the value of a page.
Input:INT4 nPage Page to retrieve value from.Output:REAL8 rVal Value of page.Return Code:FE_NOT_A V AILABLE Unable to get value.Remarks/Usage:
Example:
 API-2380  SetPageValue
5.22.2.27  SetPageValue
SetPageValue
(nPage, rval)
Description:This method sets the value of a page.Input:INT4 nPage Page to set value.REAL8 rVal Value of page.Output:NoneReturn Code:FE_FAIL Unable to set page value.Remarks/Usage:
Example:
SetColumTitle   API-2381
5.22.2.28  SetColumTitle
SetColumTitle
(nPage, nCol, sTitle)
Description:This method set th e title of a column.
Input:INT4 nPage Page that cont ains the column to set.
INT4 nCol Column to set.STRING sTitle Title to set. Output:NoneReturn Code:FE_FAIL Unable to set title.Remarks/Usage:
Example:
 API-2382  SetColumValue
5.22.2.29  SetColumValue
SetColumValue
(nPage, nCol, rVal)
Description:This method sets th e value of a column.
Input:INT4 nPage Page that cont ains the column to set.
INT4 nCol Column to set.REAL8 Value to set.Output:NoneReturn Code:FE_FAIL Unable to set value.Remarks/Usage:
Example:
SetCellBlank   API-2383
5.22.2.30  SetCellBlank
SetCellBlank
(nPage, nRow, nCol, nComponent)
Description:This method set a cell to blank.
Input:INT4 nPage Page that contains the cell to set.INT4 nRow Row containing cell to set.INT4 nCol Column containing cell to set.INT4 nComponent Component of value vector to set.Output:NoneReturn Code:FE_FAIL Unable to set cell to blank.Remarks/Usage:
Example:
 API-2384  GetDataSurfInfo
5.22.2.31  GetDataSurfInfo
GetDataSurfInfo
(nPages, nComponent, sTitle)
Description:This method retrieves Data Surface information.
Input:NoneOutput:INT4 nPages Number of Pages in Data SurfaceINT4 nComponent Number of components for Data SurfaceSTRING sTitle Title of Data SurfaceReturn Code:FE_FAIL Unable to get Data Surface info.Remarks/Usage:
Example:
GetPageInfo   API-2385
5.22.2.32  GetPageInfo
GetPageInfo
(nPage, nRows, nCols)
Description:This method retrieve s page information.
Input:INT4 nPage Page to retrieve info for.Output:INT4 nRows Number of Row in pageINT4 nCols Number of Columns in page.Return Code:FE_FAIL Unable to get page info.Remarks/Usage:
Example:
 API-2386  Resize
5.22.2.33  Resize
Resize
(nPage, nRow, nCol, bVector)
Description:This method resizes the Data Surface grid.Input:INT4 nPage Number of Pages.INT4 nRow Number of Rows.INT4 nCol Number of Columns.BOOL bVector Flag for vector Data Surface.Output:NoneReturn Code:FE_TOO_SMALL Grid size is invalid.Remarks/Usage:
Example:
Evaluate   API-2387
5.22.2.34  Evaluate
Evaluate
(geomID, eDataType, MapSetID, isElemental)
Description:This method Evaluates the Data Surface prior to calling GetData().
Input:
INT4 geomIDGeometry supplying parametric space.
Between 2 Point Parametric Data Surface: ID of Curve 
Between 4 Point Parametric Data Surface: ID of Surface
INT4 DataTypeType of entity Data Surface needs to be evaluated for.
Between 2 Point Parametric Data Surface Type = Curve 
Between 4 Point Parametric Data Surface Type = Surface 
Mesh Data Surface
Type = Node or ElementFor more information, see Section 3.3.5, "Entity Types". Only Node 
and Element types are valid. 
INT4 MapSetID(Output Map Data Surface) 
ID of the Femap Set containing en tities to map the Da ta Surface to.
BOOL isElemental (Output Map Data Surface) Flag for elemental output.
Output:NoneReturn Code:FE_FAIL Unable to evaluate Data Surface.Remarks/Usage:
Example:
 API-2388  GetData
5.22.2.35  GetData
GetData
(geomID, feaID, Coord, answer, valXYZ)
Description:This method gets the comp uted Data Surface value at the independent variable.
Input:
INT4 geomIDBetween 2,4 Point Parametric Data Surface: ID of curve/surface sup-
plying parametric space.
INT4 feaIDMesh, Output Map Data Surface: ID of mesh entity.
Equation Data Surface: ID of Mesh entity for id variable.
IREAL8 Coord[0..3]
orV ARIANT CoordAlong Coordinates, Between Coordinates, Tabular, Arbitrary 3D, 
Equation Data Surfaces: Location wh ere the Data Surface will be 
evaluated at.
Output:
REAL8 answerComputed value for Scalar Data Su rface. Magnitude for Vector Data 
Surface.
REAL8 valXYZ[0..3]
or
V ARIANT valXYZComputed vector components for Vector Data Surfaces.
Return Code:
NoneRemarks/Usage:Before calling GetData the Data Surface must first have been eval uated with Evaluate().
Example:Sub Main 
Dim App As femap.model 
Set App = feFemap 
Dim ds As femap.DataSurf 
Set ds = App.feDataSurf 
Dim Coord(3) As Double 
Dim ans As Double 
Dim entSet As femap.Set 
Set entSet = App.feSet
GetData   API-2389
Dim nd As femap.Node
Set nd = App.feNode
Dim RBO As femap.ResultsSet RBO = App.feResults
Dim LCol As Long
Dim setID As LongDim outset As femap.OutputSet
Set outset = App.feOutputSet
Dim ndIDV As VariantDim thicknessV As Variant
Dim ndLIST(100000) As Long
Dim thick(100000) As DoubleDim k As Long
Dim i As Long
' Create Output Set
setID = outset.NextEmptyID()outset.title = "Data Surface"
outset.value = 0
outset.analysis = 0outset.Put (setID)
rc = RBO.AddScalarAtNodeColumnV2( setID2, 2147000000, "Interpo-
lated  Data", FOT_TEMP, False, LCol )
k = i
' Get Nodes
entSet.Select( FT_NODE, True, "Select Nodes to Get Data Surface 
Data" )
' Get Data Surface and evaluate
rc =ds.GetDataSurf(1)
rc = ds.Evaluate( 0, 0, 0, False )
i = 0GetData
(geomID, feaID, Coord, answer, valXYZ)
 API-2390  GetData
feaID = entSet.First()
    While feaID > 0
        nd.Get(feaID)        Coord(0) = nd.x
        Coord(1) = nd.y
        Coord(2) = nd.z
        ' Get Data Surface value at nodal location
        rc = ds.GetData( 0, feaID, Coord, ans, vXYZVal )
        ndLIST(i) = feaID
        thick(i) = ans
        i = i +1
        feaID = entSet.Next
    Wend
k = entSet.count
ndIDV = ndLIST
thicknessV = thick
rc = RBO.SetScalarAtNodeColumnV2( LCol, i, ndIDV, thicknessV)
rc = RBO.Save()
End SubGetData
(geomID, feaID, Coord, answer, valXYZ)
GetDataArray   API-2391
5.22.2.36  GetDataArray
GetDataArray
(nCount, vGeomID, vfeaID, vCoord, sVal, cgXYZ)
Description:This method is similar to GetData (), but allows for retrieval of data  at multiple geometry/fea entities/
coordinates.
Input:
INT4 nCountNumber of entities being supplied in  vGeomID, vfeaID or 1/3 the 
number in vCoord. Note that the size  of arrays has to be consistent 
with this value
INT4 vGeomID [0..nCount-1]Between 2-Point or 4-Point Parame tric Data Surface: ID of curve/
surface(s) supplying parametric space.
INT4 vfeaID [0..nCount-1]Mesh or Output Map Data Surface: ID of mesh entity or entities.
Equation Data Surface: ID of Mesh entity for id variable.
REAL8 vCoord[0..3*nCount-1]Along Coordinates, Between Coordinates, Tabular, Arbitrary 3D, or 
Equation Data Surfaces: Location wh ere the Data Surface will be 
evaluated at in global rectangular coordinates.
Output:
V ARIANT sValComputed values for Scalar Data Surface. Magnitudes for Vector 
Data Surface.
V ARIANT cgXYZ Computed vector com ponents for Vector Data Surfaces.
Return Code:NoneRemarks/Usage:Before calling GetDataArray() the Data Surface must  first have been eval uated with Evaluate().
Example:
 API-2392  GetDataSurfType
5.22.2.37  GetDataSurfType
GetDataSurfType
(void)
Description:This method returns the Data Surface TypeInput:NoneOutput:NoneReturn Code:
typeThe ID of the Data Surface Type.
 0=Tabular Data Surface
 1=Equation Data Surface
 2=Nodes Data Surface 3=Elements Data Surface
 4=Parametric 2 Point Data Surface
 5=Parametric 4 Point Data Surface 6=Along Coordinates Data Surface
 7=4 Point Bilinear Data Surface
 8=8 Point Trilinear Data Surface 9=2 Point Linear Data Surface
 10=Arbitrary 3-D Location Data Surface
 11=Output Map Data Surface
Remarks/Usage:
Example:
GetDataSurfType   API-2393
 API-2394  
5.23  Direct Matrix Input Objects
Direct Matrix Input objects corre spond to Direct Matrix Input Si mulation Entities in the model, 
often known as DMIG in Nastran, which are found on the Model, Simulation Entities  menu. They 
are derived from Entity objects, so in addition to the properties an d methods described here, all of 
the properties and methods defined for Entity obj ects are also available for Direct Matrix Input 
objects. For more informatio n, see Section 5.1, "Common En tity Properties and Methods". 
Use the feMatrixInput method of the FEMAP Application object to  create Direct Matrix Input 
objects.
5.23.1  Direct Matrix Input Object Properties
Direct Matrix Input objects are always stored w ith a SetID=1, and the ID equal to the Direct 
Matrix Input ID.
Property Description
STRING title Direct Matrix Input Refere nce title (maximum 56 characters)
INT4 DataSourceData Source. Use enum zMatSrcForm:
Matrix using Internaliz ed Data = MAT_INT (0)
Matrix referencing Extern al File = MAT_EXT (1)
Matrix Combination = MAT_COMB (2)
INT4 FileInputFormOnly used when Source Data is set to External File. Use enum 
zMatFileForm:
0..NASTRAN Punch (*.pch) = MAT_PCH (0)1..NASTRAN OP2 (*.op2) = MAT_OP2 (1)
STRING matrixDir Path to external Sour ce Data file (.op2 of .pch file)
INT4 UnitIDFORTRAN Unit ID, which is only  used when Source Data is 
from an external .op2 file
INT4 AssignFormOnly used when Source Data is  from an external .op2 file
Form used for ASSIGN statements. Use enum zAnalysisAs-signForm
0..None = AAF_NONE
1..FORMATTED = AAF_FORMATTED2..UNFORMATTED = AAF_UNFORMATED
3..LITTLEENDIAM = AAF_LITTLEENDIAN
4..BIGENDIAN = AAF_BIGENDIAN
STRING Name Direct Matrix Input Reference Name (maximum 8 characters)
INT4 InputFormMatrix Form. Use enum zMatInputForm:
Square = MAT_SQUARE (0)
Symmetric = MAT_SYMMETRIC (1)
Rectangular Type 2 = MAT_RECT2 (2)Rectangular Type 9 = MAT_RECT9 (3)
   API-2395
INT4 InputPrecisionInput Format/Precision. Use enum zMatIOType:
Machine = MAT_MACHPRES (0)
Real Single = MAT_REAL_SINGLE (1)
Real Double = MAT_REAL_DOUBLE (2)Complex Single = MAT_CPLX_SINGLE (3)
Complex Double = MAT_CPLX_DOUBLE (4)
INT4 OutputPrecisionOutput Format/Precision . Use enum zMatIOType:
Machine = MAT_MACHPRES (0)Real Single = MAT_REAL_SINGLE (1)
Real Double = MAT_REAL_DOUBLE (2)
Complex Single = MAT_CPLX_SINGLE (3)Complex Double = MAT_CPLX_DOUBLE (4)
INT4 ComplexFormComplex Format. Use zMatCplxForm:
Real/Imaginary = MAT_REAL_IMAG (0)
Amplitude/Phase = MAT_AMP_PHASE (1)
INT4 colCount Number of ColumnsREAL8 ScaleFactor Scale Factor in Selection DataProperty Description
 API-2396  PutMatrixEntry
5.23.2  Direct Matrix  Input Object Methods
There following methods are available in addition to th e standard entity methods.
5.23.2.1  PutMatrixEntry
PutMatrixEntry
( nSetID, NodeColumnIndex, NodeColumnComponent, NodeRowIndex, NodeRowCom-
ponent, RealMatrixValue, ImagMatrixValue )
Description:This method is used to store a matrix en try in an internalized Matrix Input entity.
Input:INT4 nSetIDn The ID of the Matrix  Input entity to store the entry
INT4 NodeColumnIndex The ID fo r the node that represents the column index for the entry
INT4 NodeColumnComponentThe component number for the node  that represents the column 
index 
INT4 NodeRowIndex The ID for the no de that represents the row index 
INT4 NodeRowComponent The component number for the node that represents the row index REAL8 RealMatrixValue The real (or am plitude) part of a matrix element 
REAL8 ImagMatrixValue The imaginary (or phase) part of a matrix element
Output:NoneReturn Code:
FE_NOT_EXISTThe Matrix Input entity does not ex ist, or the node that represents 
the row or column index does not exist. 
FE_BAD_DATA The Matrix Input entity's  data source is not internal 
Remarks/Usage:NoneExample:None
GetMatrixEntry   API-2397
5.23.2.2  GetMatrixEntry
GetMatrixEntry
( nSetID, NodeColumnIndex, NodeColumnComponent, NodeRowIndex, NodeRowCom-
ponent, RealMatrixValue, ImagMatrixValue )
Description:This method is used to re trieve the real and imaginary matrix en try values from an internalized Matrix 
Input entity, given its row and column index. 
Input:INT4 nSetIDn The ID of the Matrix  Input entity to store the entry
INT4 NodeColumnIndex The ID fo r the node that represents the column index for the entry
INT4 NodeColumnComponentThe component number for the node  that represents the column 
index 
INT4 NodeRowIndex The ID for the no de that represents the row index 
INT4 NodeRowComponent The component number for the node that represents the row index Output:REAL8 RealMatrixValue The real (or am plitude) part of a matrix element 
REAL8 ImagMatrixValue The imaginary (or phase) part of a matrix element
Return Code:
FE_NOT_EXISTThe Matrix Input entity does not exis t, the node that represents the 
row or column index does  not exist, or a matrix  entry for that set of 
components does not exist
FE_BAD_DATA The Matrix Input entity's  data source is not internal 
Remarks/Usage:NoneExample:None
 API-2398  PutMatrixList
5.23.2.3  PutMatrixList
PutMatrixList
( listcount, NodeColumnIndex, NodeColumnComponent, NodeRowIndex, NodeRow-
Component, RealMatrixValue, ImagMatrixValue )
Description:This method stores inform ation to the matrix entr ies in a Matrix Input. 
Input:INT4 listcount The number of en tries in the other arrays.
INT4 NodeColumnIndex
[0..listcount -1]The ID for the node that represen ts the column index for the entry
INT4 NodeColumnComponent
[0..listcount -1]The component number for the node  that represents the column 
index 
INT4
NodeRowIndex[0..listcount-1]The ID for the node that represents the row index 
INT4 NodeRowComponent
[0..listcount-1]The component number for the node  that represents the row index 
INT4 RealMatrixValue
[0..listcount-1]The real (or amplitude) part of a matrix element 
INT4 ImagMatrixValue
[0..listcount-1]The imaginary (or phase) part of a matrix element
Output:
NoneReturn Code:FE_NOT_EXIST No matrix entries ex ist in the Matrix Input entity 
Remarks/Usage:This method stores informa tion into the list of the current object. Any previous list information in that 
object is lost. This method does not store that info rmation to the model databa se. After using this func-
tion, you must call Put if you want to store the updated lis t in the database.
Example:None
GetMatrixList   API-2399
5.23.2.4  GetMatrixList
GetMatrixList
( listcount, NodeColumnIndex, NodeColumnComponent, NodeRowIndex, NodeRow-
Component, RealMatrixValue, ImagMatrixValue )
Description:This method retrieves info rmation from the matrix entries in a Matrix Input.
Input:NoneOutput:INT4 listcount The number of en tries in the other arrays.
INT4 NodeColumnIndex
[0..listcount -1]The ID for the node that represen ts the column index for the entry
INT4 NodeColumnComponent
[0..listcount -1]The component number for the node  that represents the column 
index 
INT4
NodeRowIndex[0..listcount-1]The ID for the node that represents the row index 
INT4 NodeRowComponent
[0..listcount-1]The component number for the node  that represents the row index 
INT4 RealMatrixValue
[0..listcount-1]The real (or amplitude) part of a matrix element 
INT4 ImagMatrixValue
[0..listcount-1]The imaginary (or phase) part of a matrix element
Return Code:
FE_NOT_EXIST No matrix entries ex ist in the Matrix Input entity 
Remarks/Usage:This method simply retrieves the in formation about the matrix entries from the current object. You must 
first load that data, either by us ing the Get method or by loadin g it yourself with PutMatrixList.
Example:None
 API-2400  PutCombination
5.23.2.5  PutCombination
PutCombination
( nSetID, dScale, MatrixInputID, InputName )
Description:This method stores matrix  combinations in a comb ined Matrix Input entity.
Input:
INT4 nSetIDnThe ID of the combined Matrix Input entity where to store the 
combination
REAL8 dScale The scale fact or of the combination 
INT4 MatrixInputID The ID of the re ferenced Matrix Input (if it exists) 
STRING InputNameThe name of the matrix referenced  by the combination (if specified 
as direct name input) 
Output:
NoneReturn Code:FE_NOT_EXIST The specified Matrix  Input entity did not exist
FE_BAD_DATAIf a Matrix Input entity was not spec ified, the length of the direct 
name input was zero
Remarks/Usage:This method stores matrix combinations to a combined  Matrix Input. The IDs of the combination must 
first be loaded into a Set Object using GetCombinationSet
Example:None
GetCombination   API-2401
5.23.2.6  GetCombination
GetCombination
( nSetID, entID, dScale, MatrixInputID, InputName )
Description:This method retrieves informatio n from the matrix combinations in  a combined Matrix Input entity
Input:
INT4 nSetIDnThe ID of the combined Matrix In put entity from where to retrieve 
the combination
INT4 entIDThe ID of the combination (i.e., place in the list of Referenced 
Inputs)
Output:REAL8 dScale The scale fact or of the combination 
INT4 MatrixInputID The ID of the re ferenced Matrix Input (if it exists) 
STRING InputNameThe name of the matrix referenced  by the combination (if specified 
as direct name input) 
Return Code:
FE_NOT_EXISTThe specified combina tion did not exist in the specified matrix 
input or specified matrix input is not a combined Matrix Input 
entity.
Remarks/Usage:This method retrieves a single lin e from the Referenced Inputs sectio n from a combined Matrix Input. 
The IDs of the combination can first be loaded into a Set Ob ject using GetCombinationSet.
Example:None
 API-2402  PutCombinations
5.23.2.7  PutCombinations
PutCombinations
(  listcount, MatrixEntityIDs, DirectInputs, ScaleFactors )
Description:This method stores matrix  combinations in a comb ined Matrix Input entity.
Input:INT4 listcount The number of matrix input entities in the combination. 
INT4 MatrixEntityIDs[0..list-
count-1] The IDs of the matrix inpu t entities in the combination.
STRING DirectInputs[0..list-
count-1] The titles of the Direct Name Input.
REAL8 ScaleFactor[0..listcount-
1]The scale factors of the combinations. 
Output:
NoneReturn Code:FE_BAD_TYPE The Matrix Input is not a combined matrix input. 
Remarks/Usage:NoneExample:None
GetCombinations   API-2403
5.23.2.8  GetCombinations
GetCombinations
(  MatrixComboEntityID, listcount, MatrixEntityIDs, DirectInputs, ScaleFactors )
Description:This method retrieves informatio n from the matrix combinations in  a combined Matrix Input entity.
Input:
INT4 MatrixComboEntityID The ID of the combined Matrix Input entity where to store the 
combination
Output:INT4 listcount The number of matrix input entities in the combination. 
INT4 MatrixEntityIDs[0..list-
count-1] The IDs of the matrix inpu t entities in the combination.
STRING DirectInputs[0..list-
count-1] The titles of the Direct Name Input.
REAL8 ScaleFactor[0..listcount-
1]The scale factors of the combinations. 
Return Code:
FE_NOT_EXIST The combined Matrix entity does not contain matrix input entities.
FE_BAD_TYPE If a Matrix Combo Entity  ID is not a combined matrix.
FE_FAIL If a Matrix Combo Entity ID does not exist.Remarks/Usage:NoneExample:None
 API-2404  GetCombinationSet
5.23.2.9  GetCombinationSet
GetCombinationSet
( pCombinationSet )
Description:This method loads a Set Object with  the IDs of matrix input entries in  a combined Matrix Input entity 
currently loaded in the Matrix Input Object
Input:NoneOutput:OBJECT pCombinationSet The Set Object that will  receive the IDs of the matrix combinations
Return Code:FE_FAIL The set could not be loaded.Remarks/Usage:NoneExample:None
   API-2405
5.24  Discrete Value Set Object
The Discrete Value Set object is used to create a set  of “discrete values” which can then be plotted 
using the View, Advanced Post , Contour Model Data command.
API access for plotting discrete values is in two locations. This section details the creation and 
editing of a set of discrete values. The controls us ed to turn on/off a discr ete value plot, choose the 
type of plot to display and other options, as well as which discrete value set to use, are properties 
on the View Object. See the “Model Data Contou r and Discrete Value controls” portion of Section 
5.75.1, "View Object Properties", Section 5.75. 2.20, "SetModelDataContourType", and Section 
5.75.1.3, "Model Contour Data Ty pes" for information about sel ecting a model data item to use 
when plotting a set of discrete values.
Use the feDiscreteValueSet method of the FEMAP Application object to create DiscreteValueSet 
objects.
5.24.1  Discrete Value Set Object Properties
Discrete Value Sets are always stored with a SetI D=1, and the ID equal to the discrete value set 
ID. 
Property Description
BOOL IntegerTypeFlag to indicate if discrete va lue set contains Integer values 
(True) or Floating Point (i.e., Real Number) values (False)
BOOL RangeTypeFlag to indicate if discrete valu e set is made up of Ranges of 
values (True) or Individual values (False)
 API-2406  GetNumberLevels
5.24.2  Discrete Value Set Object Methods
5.24.2.1  GetNumberLevels
GetNumberLevels
( pnLevels )
Description:Returns the number of levels, ranges of values or in dividual values, in the discre te value set (i.e., rows 
shown in the Discrete Value Set dialog box)
Input:NoneOutput:INT4 pnLevels Number of levelsReturn Code:NoneRemarks/Usage:NoneExample:None
GetLevelInteger   API-2407
5.24.2.2  GetLevelInteger
GetLevelInteger
( iLevelID, iValue1, iValue2, iColor )
Description:Returns the integer value(s) and color ID for a given level in the discrete value set
Input:INT4 iLevelID Level IDOutput:
INT4 iValue1For a discrete value set with indivi dual values, retu rns the integer 
value for the specified level. For a discrete value set with ranges of 
values, returns the integer value which is the lower bound of the 
range for the specified level.
INT4 iValue2Only used when a discrete value set has ranges of values. Returns the 
integer value which is the upper bo und of the range for the specified 
level
INT4 iColor ID of the Color currently  assigned to the specified level.
Return Code:FE_FAIL Level does not contain Integer ValuesRemarks/Usage:NoneExample:None
 API-2408  SetLevelInteger
5.24.2.3  SetLevelInteger
SetLevelInteger
( iLevelID, iValue1, iValue2, iColor )
Description:Sets integer value(s) and color ID for th e specified level in the discrete value set
Input:INT4 iLevelID Level ID
INT4 iValue1For a discrete value set with individu al values, sets the integer value 
for the specified level. For a discrete value set with ranges of values, 
sets integer value which is the lowe r bound of the range for the spec-
ified level.
INT4 iValue2Only used when a discrete value set has ranges of values. Sets the 
integer value which is the upper bo und of the range for the specified 
level
INT4 iColor ID of the Color to assign the specified level.
Output:NoneReturn Code:FE_FAIL Level does not contain Integer ValuesRemarks/Usage:NoneExample:None
AddLevelInteger   API-2409
5.24.2.4  AddLevelInteger
AddLevelInteger
( iValue1, iValue2, iColor )
Description:Adds a new level to the bottom of the discrete value set containing the specif ied integer value(s) and 
assigns the specified color to the new level
Input:
INT4 iValue1For a discrete value set with individu al values, sets the integer value 
for the new level. For a discrete va lue set with ranges of values, sets 
integer value which is the lower bo und of the range for the new level.
INT4 iValue2Only used when a discrete value set has ranges of values. Sets the 
integer value which is the upper bo und of the range for the new level
INT4 iColor ID of the Color to assign the new level.Output:NoneReturn Code:FE_FAIL Level does not contain Integer ValuesRemarks/Usage:NoneExample:None
 API-2410  GetLevelFloat
5.24.2.5  GetLevelFloat
GetLevelFloat
( iLevelID, pdValue1, pdValue2, iColor )
Description:Returns the floating point (real nu mber) value(s) and color ID for a given level in the discrete value set
Input:INT4 iLevelID Level IDOutput:
REAL8 iValue1For a discrete value set with indivi dual values, returns the floating 
point value for the spec ified level. For a discrete value set with 
ranges of values, returns the floa ting point value which is the lower 
bound of the range fo r the specified level.
REAL8 iValue2Only used when a discrete value set has ranges of values. Returns the 
floating point value which is the upper bound of the range for the 
specified level
INT4 iColor ID of the Color currently  assigned to the specified level.
Return Code:FE_FAIL Level does not contain Floating Point ValuesRemarks/Usage:NoneExample:None
SetLevelFloat   API-2411
5.24.2.6  SetLevelFloat
SetLevelFloat
( iLevelID, pdValue1, pdValue2, iColor )
Description:Sets floating point (real number) value(s) and color ID for the specified level in the discrete value set
Input:INT4 iLevelID Level ID
REAL8 iValue1For a discrete value set with indivi dual values, sets the floating point 
value for the specified level. For a discrete value set with ranges of 
values, sets floating point value which is the lower bound of the 
range for the specified level.
REAL8 iValue2Only used when a discrete value set has ranges of values. Sets the 
floating point value which is the upper bound of the range for the 
specified level
INT4 iColor ID of the Color to assign the specified level.
Output:NoneReturn Code:FE_FAIL Level does not contain Floating Point ValuesRemarks/Usage:NoneExample:None
 API-2412  AddLevelFloat
5.24.2.7  AddLevelFloat
AddLevelFloat
( pdValue1, pdValue2, iColor )
Description:Adds a new level to the bottom of the discrete valu e set containing the spec ified floating point (real 
number) value(s) and assigns the specified color to the new level
Input:
REAL8 iValue1For a discrete value set with indivi dual values, sets the floating point 
value for the new level. For a discre te value set with  ranges of val-
ues, sets floating point value which is the lower bound of the range 
for the new level.
REAL8 iValue2Only used when a discrete value set has ranges of values. Sets the 
floating point value which is the upper bound of the range for the 
new level
INT4 iColor ID of the Color to assign the new level.Output:NoneReturn Code:FE_FAIL Level does not contain Floating Point ValuesRemarks/Usage:NoneExample:None
Sort   API-2413
5.24.2.8  Sort
Sort
( void )
Description:Sorts the entries in the discrete value set into asc ending order based on th e first and second values
Input:NoneOutput:NoneReturn Code:FE_FAILRemarks/Usage:A Sort is automatically called in the Pu t function for Discrete Value Set Objects
Example:None
 API-2414  GetTitle
5.24.2.9  GetTitle
GetTitle
( sTitle )
Description:Returns the title of the discrete value setInput:NoneOutput:STRING sTitle Title of discrete value setReturn Code:NoneRemarks/Usage:NoneExample:None
SetTitle   API-2415
5.24.2.10  SetTitle
SetTitle
( sTitle )
Description:Sets the title of the discrete value setInput:STRING sTitle Title of discrete value setOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-2416  CreateRangeInteger
5.24.2.11  CreateRangeInteger
CreateRangeInteger
( nRanges, iMinimum, iMaximum )
Description:Automatically create a sequential rang e of integer values in a discrete  value set based on the provided 
number of ranges and Maximum/Minimum values
Input:INT4 nRanges Number of ranges to createINT4 iMinimum Minimum integer valueINT4 iMaximum Maxi mum integer value
Output:NoneReturn Code:
FE_FAILThe maximum value is less than the minimum value or the value 
specified for nRanges is < 1.
Remarks/Usage:Colors are automatically  assigned to the levels
Example:None
CreateRangeFloat   API-2417
5.24.2.12  CreateRangeIFloat
CreateRangeFloat
( nRanges, dMinimum, dMaximum )
Description:Automatically create a sequential range of floating point (real number) values in a discrete value set 
based on the provided number of ranges and Maximum/Minimum values
Input:INT4 nRanges Number of ranges to createREAL8 dMinimum Minimum floating point (real number) valueREAL8 dMaximum Maximum floating point (real number) valueOutput:NoneReturn Code:
FE_FAILThe maximum value is less than the minimum value or the value 
specified for nRanges is < 1.
Remarks/Usage:Colors are automatically  assigned to the levels
Example:None
 API-2418  AutoCreateLevels
5.24.2.13  AutoCreateLevels
AutoCreateLevels
( iVuID, iGroupID, sTitle, zMDCType, nLevels, iRangeOption, iLowestValue, 
dLowestValue, zElementType, zMaterialType, iLocation )
Description:Automatically creates a discrete va lue set using the specified model data item, which can be created 
using data from the whole model or a group
Input:INT4 iVuID ID of View is required to use 
INT4 iGroupIDID of Group to use to limit model data values and should correspond 
to the value specified for nMod elDataContourGroup on the View 
Object
STRING sTitleTitle of discrete value set. If not specified, a title will automatically 
be created based on the model data  item and other options specified.
enum zMDCTypeUsed to specify which model data it em to display as a contour, crite-
ria, beam diagram. See Section 5.75.1.3, "Model Contour Data 
Types" for more information abou t selecting the appropriate model 
data item. If using any option other than FVMDC_MATL_TABLE 
or FVMDC_PROP_TABLE, the zElementType, zMaterialType, and 
iLocation arguments in this method are ignored.
INT4 nLevels Specifies the number of leve ls to create in the Discrete Value Set.
INT4 iRangeOptionSpecifies the option to use for Range Type. 0=Individual Value, 
1=Range by equal value, 2=Range by equal number, 3=Range by 
largest gap.
INT4 iLowestValue Lowest value to use when , such as property ID or material ID
REAL8 dLowestValueLowest value to use when 
, such as plate thickness.
enum zElementTypeOnly used when zMDCType is set to FVMDC_PROP_TABLE. 
Indicates the element/property type to use for the index value speci-
fied in iLocation (See “Element Types” in Section 3.3.7, "FEMAP 
Constants")
enum zMaterialTypeOnly used when zMDCType is  set to FVMDC_MATL_TABLE. 
Indicates the material type to use for the index value specified in iLo-
cation (See “Material Types” in Section 3.3.7, "FEMAP Constants")
iLocationOnly used when zMDCType is  set to FVMDC_MATL_TABLE or 
FVMDC_PROP_TABLE. ID of the index in the Material Array Index (See Section 5.47.1.2, "Material Array Index Values") or Prop-
erty Array Index (See Section 5.60 .2.1, "Property Array Index Val-
ues") to use to create the plot.
AutoCreateLevels   API-2419
Output:
NoneReturn Code:NoneRemarks/Usage:Colors are automatically  assigned to the levels
Example:
Sub Main
   Dim App As femap.model
   Set App = feFemap()
   Dim dvs As femap.DiscreteValueSet
   Set dvs = App.feDiscreteValueSet
 ‘Creates a new Discrete Value Set with 17 individual
 ‘values For Property ID in the next empty ID rc = dvs.AutoCreateLevels (0, 0, "", FVMDC_PROP_ID, 17, 0, 0,_ 
0.0, 0, 0, 0)
    dvs.Put (dvs.NextEmptyID)
'Creates a new Discrete Value Set with 10 ranges of
'Plate Thickness in the next empty ID
rc = dvs.AutoCreateLevels (0, 0, "", FVMDC_PROP_TABLE, 10, 1,0,_ 
0.0, FET_L_PLATE, 0, 0)
    
 dvs.Put (dvs.NextEmptyID)
End SubAutoCreateLevels
( iVuID, iGroupID, sTitle, zMDCType, nLevels, iRangeOption, iLowestValue, 
dLowestValue, zElementType, zMaterialType, iLocation )
 API-2420  
5.25  Element Objects
Element objects correspond to the elements in your model. Th ey are derived from Entity objects, 
so, in addition to the properties and methods described here, all of the properties and methods 
defined for Entity objects are also available for Element objects. Fo r more information, see Section 
5.1, "Common Entity Pr operties and Methods". 
Use the feElem method of the FEMAP Appli cation object to create Element objects.
5.25.1  Element Object Properties
Elements are always stored with a SetID= 1, and the ID equal to the element ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
INT4 color The element color.INT4 layer The layer associated with the element.
INT4 typeType of element:
Rod=1, Bar=2, Tube=3, Link=4, Beam=(Lin=5 Para=37), 
Spring/Damper=6, DOF Spring=7, Curved Beam=8, Gap=9, 
Plot Only=10, Shear Panel (Lin=11 Para=12), Membrane (Lin=13 Para=14), Bending Only (Lin=15 Para=16), Plate 
(Lin=17 Para=18), Plane Strain  (Lin=19 Para=20), Laminate 
(Lin=21 Para=22), Axisymmetr ic (Lin=23 Para=24), Solid 
(Lin=25 Para=26), Mass=27, Mass Matrix=28, Rigid=29, Gen-
eral Matrix=30, Curved Tube=3 1, Plot Only Plate=32, Slide-
Line=33, Contact=34, Axisymme tric Shell (Lin=35 Para=36), 
Weld/Fastener=38, Solid Laminate (Lin=39, Para=40), Spring/
Damper to Ground=41, DOF Spring to Ground=42, Cohesive 
(Lin=43, Para=44)
INT4 propIDID of property referenced by th e element.This is  not required 
for certain property types, like plot-only and rigid elements. 
These elements have no properties or materials.
INT4 topologyThe shape of the element:
0=Line2, 1=Line3, 2=Tri3, 3=Tri6, 4=Quad4, 5=Quad8, 6=Tet-ra4, 7=Wedge6, 8=Brick8, 9=Point, 10=Tetra10, 11=Wedge15, 
12=Brick20, 13=Rigid, 14= Pyramid5, 15=MultiList, 16=Con-
tact, 17=Weld, 18=Rigid (RBE1 elements only), 19=Pyramid13
INT4 orientIDThe orientation node for elemen ts like bars and beams that 
require an orientation. This can be 0, in which case the orient 
property specifies an orientation vector.
BOOL MaterialAngleFlagIf True, the MaterialAngle property has been set using an 
Angle. This property has been superseded by the MaterialOri-
entType property
   API-2421
INT4 MaterialOrientTypeThe material orientation for th e element. 0=None, 1=Oriented 
using an Angle (MaterialAngle property), 2=Oriented using a 
Coordinate System (Material CSys property)
INT4 MaterialCSysThe ID of the coordinate system used for material orientation if 
the MaterialOrientType=2
INT4 geomIDThe ID of the geometry associated to this element. This is a cur-
veID for line elements, a surface ID for planar elements, and a 
solid/volume ID for solid elements.
INT4 formulation[0..2]
or V ARIANT vformulationAdditional flags defining the element type.
INT4 contact[0..1]
or 
V ARIANT vcontactArray of material IDs for each ply in a laminate.
INT4 node[0..19]
or V ARIANT vnodeNodes referenced by element. This array does not contain the 
nodes referenced by rigid or slide line elements, which store their nodes in a separate node list. Likewise, contact elements 
are handled separately.
REAL8 orient[0..2]
or V ARIANT vorientElement orientation vector for bar/beam. [0] contains material 
orientation angle for planar elements. In global rectangular coordinates.
REAL8 offset[0..1][0..2]
or
V ARIANT voffsetOffset vectors at ends of bar/b eam elements. In global rectangu-
lar coordinates. offset[0][...] is at the first end of the element, 
offset[1][...] is at the second end.
BOOL release[0..1][0..5]
or
V ARIANT vreleaseRelease flags at ends of bar/beam elements. release[0][...] is at 
the first end of the element, release[1][...] is at the second end. 
The 6 second indices correspond to the degrees of freedom.
This is also used for the DOFs of the independent node of Rigid Element using [0][...]
Additional Properties
INT4 nodes[0..19]Same as the node property but accesses the entire array as a 
Variant.
BOOL RigidInterpolateFlag specifying whether an elem ent with type=Rigid is really 
an interpolation element.
REAL8 RigidThermalExpansion Coefficient of thermal expansion for rigid elements
REAL8 RigidInterpolationFactor Scale factor for Rigid Interpolation elementsREAL8 PlateOffset Specifies the of fset value for plate elements.Property Description
 API-2422  
REAL8 MaterialAngleSpecifies the material orientatio n angle for planar elements if 
MaterialAngleFlag=True.
INT4 connectTYPE[0..1]
or
V ARIANT vconnectTYPEconnectTYPE[0] specifies type of weld element.
connectTYPE[1] Weld Loca tion by: Projection=0 Axis=1
INT4 connectSEG[0..1]
or
V ARIANT vconnectSEGNode, Element or Property ID for weld patch A and B, respec-
tively, for individual of weld types. 
INT4 warping[0..1]
orV ARIANT vwarpingID of warping node on beam element
warping(0)=End Awarping(1)=End B
BOOL SpringNoOrientSpring/Damper element has no orientation. Node, vector and 
CID are ignored during translation
BOOL SpringUseCID Use SpringCID for orientation
INT4 SpringCID Coordinate system  for spring/damper orientation
BOOL SpringUseLocation Use SpringLocation for location
REAL8 SpringLocation Spring/damper location, between 0.0 and 1.0 BOOL SpringUsePropCID Use spring/dam per coordinate system from property
BOOL SpringUsePropLocation Use sp ring/damper location from property
INT4 vkeyopt[0..11] Ansys Element keyopts.Property Description
   API-2423
5.25.1.1  Accessing Element Nodes
For most elements, the node  property will give you access to th e IDs of the nodes that define the 
element. Before you can use this data, however, you must know where to find the nodes in the 
node array. The following table defines the layout for the va rious element types:
Topology Array Entries
(optional/midside nodes in parentheses)
Point 0Line 0,1Tri3 0,1,2Tri6 0,1,2, (4,5,6)Quad4 0,1,2,3Quad8 0,1,2,3,(4,5,6,7)Tetra4 0,1,2, 4Pyramid5 0,1,2,3, 4Wedge6 0,1,2, 4,5,6Brick8 0,1,2,3,4,5,6,7Tetra10 0,1,2, 4 (8,9,10, 12,13,14)Pyramid13 0,1,2,3, 4 (8,9,10,11, 12,13,14,15)Wedge15 0,1,2, 4,5,6 (8,9,10, 12,13,14, 16,17,18)Brick20 0,1,2,3,4,5,6,7,(8,9,10 ,11,12,13,14,15,16,17,18,19)
RigidList 0=Independent, dependent node s use element lists, not array entries
MultiList Uses element lists, not array entriesContact References contact segments, not nodesWeld Weld Axis = 0,1 SegA= 4,5,6,( 7,8,9,10,11 ) SegB=12,13,14,( 15,16,17,18,19 )
 API-2424  GetAllArray
5.25.2  Element Object Methods
The following methods are av ailable in addition to th e standard entity methods.
5.25.2.1  GetAllArray
GetAllArray
( setID, numElem, entID, propID, elemTYPE, topology, layer, color, formulation, orient, 
offset, release, orientSET, orientID, Nodes, connectTYPE, connectSEG )
Description:This method retrieves arrays of  values for a set of elements.
Input:
INT4 setIDID of the set that contains the element IDs to retrieve. If 0, 
retrieve all elements in the model.
Output:INT4 numElem The number of elements for which data is being returned.
INT4 entID[0..numElem-1] Each entry is  the ID of the associated element.
INT4 propID[0..numElem-1] The property ID of the element.INT4 elemTYPE[0..numElem-1] The element type.INT4 topology[0..numElem-1] The element topology/shape.INT4 layer[0..numElem- 1] The ID of the layer for the element.
INT4 color[0..numElem-1] The color of the element.INT4 formulation[0..(2*numElem )-1] The element formulation. Th ere are 2 values per element.
REAL8 orient[0..(3*numElem)-1]The element orientation vector (3  values per line element) or 
Material Angle (1 value per elemen t, stored in the first of the 
three slots per element)
REAL8 offset[0..(6*numElem)-1]The element offset vectors, 6 values per element. The first 3 at 
end 1, the second 3 at end 2.
INT4 release[0..(12*numElem)-1]Flags indicating end releases. 12 values per element. The first 
6 correspond to the elemental degrees of freedom at the first 
end of the element. The fi nal 6 to the second end.
For spring/damper elements:
release(0)=True - Use Sp ringLocation for location 
release(1)=True - Use spring/d amper location from property 
release(2)=True - Use SpringCID for orientation
release(3)=True - Spring/Damper element has no orientation. 
Node, vector and CID are ignored during translationUse AddArray3 to return values for spring loca tions (sprin-
gLocation) and material coordinate systems (materialcsys).
GetAllArray   API-2425
INT4 orientSET[0..numElem-1]Flag indicating whether material orientation is on for this ele-
ment.
INT4 orientID[0..numEl em-1] The ID of the third/orie ntation node for the element.
INT4 Nodes[0..(20*numElem)-1]The node IDs used to define the element. Stored 20 values per 
element. Unused nodes are 0. El ement types that reference lists 
of nodes (like rigid, slide lines  or contact), will not have the 
nodes from their node lists in this array - you must use other 
methods to retrieve those nodes.
INT4 connectTYPE[0..(2*numElem)-
1]There are 2 values per element.
connectTYPE[0] specifies type of weld element( 0 thru 6 )connectTYPE[1] Weld 
Location by: Projection=0 Axis=1
INT4 connectSEG[0..(2*numElem)-
1]There are 2 values per element. Node, Element or Property ID 
for weld patch A and B respectively  for individual of weld 
types. 
Error Codes:FE_FAIL Unable to retrieve da ta from the selected elements.
Remarks/Usage:This method is the fastest way to retrieve information ab out a large number of elements. If a retrieved 
element ID does not exist, then all of the values for that element ID will be 0.
Example:GetAllArray
( setID, numElem, entID, propID, elemTYPE, topology, layer, color, formulation, orient, 
offset, release, orientSET, orientID, Nodes, connectTYPE, connectSEG )
 API-2426  GetAllArray
Sub Main 
Dim App As femap.model 
Set App = feFemap() 
Const MAX_NODES_PER_ELEM = 20 

Dim El As femap.Elem 
Set El = App.feElem

Dim elSet As femap.Set 
Set elSet = App.feSet

Dim numElem As Long 
Dim entID As Variant 
Dim propID As Variant 
Dim elemType As Variant 
Dim topology As Variant 
Dim Lyr As Variant 
Dim color As Variant 
Dim formulation As Variant 
Dim orient As Variant 
Dim offset As Variant 
Dim release As Variant 
Dim orientSET As Variant 
Dim orientID As Variant 
Dim nodes As Variant 
Dim connectTYPE As Variant 
Dim connectSEG As Variant 
 Dim Msg As StringGetAllArray
( setID, numElem, entID, propID, elemTYPE, topology, layer, color, formulation, orient, 
offset, release, orientSET, orientID, Nodes, connectTYPE, connectSEG )
GetAllArray   API-2427
Dim findElemType As Integer 
findElemType = 17 'Linear Plate 

rc = elSet.AddRule(findElemType, FGD_ELEM_BYTYPE) 
rc = El.GetAllArray(elSet.ID, numElem, entID, propID, _ 
 elemType, topology, Lyr, color, formulation,orient,offset, _ 
 release, orientSET, orientID, nodes, connectTYPE, connectSEG ) 

App.feAppMessage(FCL_NORMAL, _ 
 " Number of elements: " + Str$(numElem)) 
For i = 0 To numElem-1 
  ' Load ID, property, type, and nodes into String for display 
  Msg = Str$(entID(i)) + ", "+Str$(propID(i)) + ", "+ _ 
         Str$(elemType(i)) 
   For u = 0 To MAX_NODES_PER_ELEM-1 
    If nodes(i*MAX_NODES_PER_ELEM + u) <> 0 Then 
      Msg = Msg + ", "+ Str$(nodes(i*MAX_NODES_PER_ELEM + u)) 
    End If 
  Next u 
  App.feAppMessage(FCM_NORMAL, Msg) 
Next i
End SubGetAllArray
( setID, numElem, entID, propID, elemTYPE, topology, layer, color, formulation, orient, 
offset, release, orientSET, orientID, Nodes, connectTYPE, connectSEG )
 API-2428  GetAllArray2
5.25.2.2  GetAllArray2
GetAllArray2
( setID, numElem, entID, exist, propID, elemTYPE, topology, layer, color, formulation, 
orient, offset, release, orientSET, or ientID, Nodes, connectTYPE, connectSEG )
Description:This method retrieves arrays of va lues for a set of elements, includin g if an element exists in database
Input:
INT4 setIDID of the set that contains the element IDs to retrieve. If 0, 
retrieve all elements in the model.
Output:INT4 numElem The number of elements for which data is being returned.
INT4 entID[0..numElem-1] Each entry is  the ID of the associated element.
BOOL exist[0..numElem-1]Element existence, True=Element exists, False=Element does 
not exist
INT4 propID[0..numElem-1] The property ID of the element.INT4 elemTYPE[0..numElem-1] The element type.INT4 topology[0..numElem-1] The element topology/shape.INT4 layer[0..numElem- 1] The ID of the layer for the element.
INT4 color[0..numElem-1] The color of the element.INT4 formulation[0..(2*numElem )-1] The element formulation. Th ere are 2 values per element.
REAL8 orient[0..(3*numElem)-1]The element orientation vector (3  values per line element) or 
Material Angle (1 value per elemen t, stored in the first of the 
three slots per element)
REAL8 offset[0..(6*numElem)-1]The element offset vectors, 6 values per element. The first 3 at 
end 1, the second 3 at end 2.
INT4 release[0..(12*numElem)-1]Flags indicating end releases. 12 values per element. The first 
6 correspond to the elemental degrees of freedom at the first end of the element. The fi nal 6 to the second end.
For spring/damper elements:
release(0)=True - Use Sp ringLocation for location 
release(1)=True - Use spring/d amper location from property 
release(2)=True - Use SpringCID for orientation
release(3)=True - Spring/Damper element has no orientation. 
Node, vector and CID are ignored during translation
Use AddArray3 to return values for spring loca tions (sprin-
gLocation) and material coordinate systems (materialcsys).
GetAllArray2   API-2429
INT4 orientSET[0..numElem-1]Flag indicating whether material orientation is on for this ele-
ment.
INT4 orientID[0..numEl em-1] The ID of the third/orie ntation node for the element.
INT4 Nodes[0..(20*numElem)-1]The node IDs used to define the element. Stored 20 values per 
element. Unused nodes are 0. El ement types that reference lists 
of nodes (like rigid, slide lines  or contact), will not have the 
nodes from their node lists in this array - you must use other 
methods to retrieve those nodes.
INT4 
connectTYPE[0..(2*numElem)-1]There are 2 values per element.
connectTYPE[0] specifies type of weld element( 0 thru 6 )connectTYPE[1] Weld 
Location by: Projection=0 Axis=1
INT4 
connectSEG[0..(2*numElem)-1]There are 2 values per element. Node, Element or Property ID 
for weld patch A and B respectively  for individual of weld 
types. 
Error Codes:FE_FAIL Unable to retrieve da ta from the selected elements.
Remarks/Usage:This method is the fastest way to retrieve information ab out a large number of elements. If a retrieved 
element ID does not exist, then all of the values for that element ID will be 0. If it is known that all of the 
elements in the element set exist, use GetAllArray.
Example:NoneGetAllArray2
( setID, numElem, entID, exist, propID, elemTYPE, topology, layer, color, formulation, 
orient, offset, release, orientSET, or ientID, Nodes, connectTYPE, connectSEG )
 API-2430  GetAllArray3
5.25.2.3  GetAllArray3
GetAllArray3
( setID, numElem, entID, exist, propID, elemTYPE, topology, layer, color, formulation, 
orient, offset, release, orientSET, orientID, Nodes, connectTYPE, connectSEG, 
materialOrientType, materialCSys, warpingID, SpringLocation )
Description:This method retrieves arrays of va lues for a set of elements, includin g if an element exists in database
Input:
INT4 setIDID of the set that contains the element IDs to retrieve. If 0, 
retrieve all elements in the model.
Output:INT4 numElem The number of elements for which data is being returned.
INT4 entID[0..numElem-1] Each entry is  the ID of the associated element.
BOOL exist[0..numElem-1]Element existence, True=Element exists, False=Element does 
not exist
INT4 propID[0..numElem-1] The property ID of the element.INT4 elemTYPE[0..numElem-1] The element type.INT4 topology[0..numElem-1] The element topology/shape.INT4 layer[0..numElem- 1] The ID of the layer for the element.
INT4 color[0..numElem-1] The color of the element.INT4 formulation[0..(2*numElem )-1] The element formulation. Th ere are 2 values per element.
REAL8 orient[0..(3*numElem)-1]The element orientation vector (3  values per line element) or 
Material Angle (1 value per elemen t, stored in the first of the 
three slots per element)
REAL8 offset[0..(6*numElem)-1]The element offset vectors, 6 values per element. The first 3 at 
end 1, the second 3 at end 2.
INT4 release[0..(12*numElem)-1]Flags indicating end releases. 12 values per element. The first 
6 correspond to the elemental degrees of freedom at the first 
end of the element. The fi nal 6 to the second end.
For spring/damper elements:release(0)=True - Use Sp ringLocation for location 
release(1)=True - Use spring/d amper location from property 
release(2)=True - Use SpringCID for orientationrelease(3)=True - Spring/Damper element has no orientation. 
Node, vector and CID are ignored during translation
Use SpringLocation array for spring locations and materi-
alCsys array for spring/dam per coordinate system IDs.
GetAllArray3   API-2431
INT4 orientSET[0..numElem-1]Flag indicating whether material orientation is on for this ele-
ment.
INT4 orientID[0..numEl em-1] The ID of the third/orie ntation node for the element.
INT4 Nodes[0..(20*numElem)-1]The node IDs used to define the element. Stored 20 values per 
element. Unused nodes are 0. El ement types that reference lists 
of nodes (like rigid, slide lines  or contact), will not have the 
nodes from their node lists in this array - you must use other 
methods to retrieve those nodes.
INT4 
connectTYPE[0..(2*numElem)-1]There are 2 values per element.
connectTYPE[0] specifies type of weld element( 0 thru 6 )
connectTYPE[1] Weld Location by: Projection=0 Axis=1
INT4 
connectSEG[0..(2*numElem)-1]There are 2 values per element. Node, Element or Property ID 
for weld patch A and B respectively  for individual of weld 
types. 
INT4 
materialOrientType [0..numElem-1]The material orientation for th e element. 0=None, 1=Oriented 
using an Angle (MaterialAngle property), 2=Oriented using a 
Coordinate System (MaterialCSys property)
INT4 materialCSys [0..numElem-1]The ID of the coordinate system used for material orientation 
if the MaterialOrientType=2
INT4 warpingID [0..numElem-1] Th e ID of the node associated to beam elements for warping
REAL8 
SpringLocation[0..numElem-1]Spring/damper location, between 0.0 and 1.0.
Error Codes:
FE_FAIL Unable to retrieve da ta from the selected elements.
Remarks/Usage:This method is the fastest way to retrieve information ab out a large number of elements. If a retrieved 
element ID does not exist, then all of the values for that element ID will be 0. If it is known that all of the 
elements in the element set exist, use GetAllArray.
Example:NoneGetAllArray3
( setID, numElem, entID, exist, propID, elemTYPE, topology, layer, color, formulation, 
orient, offset, release, orientSET, orientID, Nodes, connectTYPE, connectSEG, 
materialOrientType, materialCSys, warpingID, SpringLocation )
 API-2432  PutAllArray
5.25.2.4  PutAllArray
PutAllArray
( numElem, entID, propID, elemTYPE, topology, layer, color, formulation, orient, offset, 
release, orientSET, orientID , Nodes, connectTYPE, connectSEG )
Description:This method stores/creates multiple elements ba sed on the values pass ed in various arrays.
Input:
INT4 numElemThe number of elements to create - the number of entries in 
the arrays
INT4 entID[0..numElem-1] Each entry is the ID  of the associated element to be created
INT4 propID[0..numElem-1] The property ID of the element.INT4 elemTYPE[0..numElem-1] The element type.
INT4 topology[0..numElem-1] The element topology/shape.
INT4 layer[0..numElem- 1] The ID of the layer for the element.
INT4 color[0..numElem-1] The color of the element.INT4 formulation[0..(2*numElem )-1] The element formulation. Th ere are 2 values per element.
REAL8 orient[0..(3*numElem)-1] The element orientation vector, 3 values per element.
REAL8 offset[0..(6*numElem)-1]The element offset vectors, 6 values per element. The first 3 
at end 1, the second 3 at end 2.
INT4 release[0..(12*numElem)-1]Flags indicating end releases. 12 values per element. The 
first 6 correspond to the elemental degrees of freedom at the first end of the element. The final 6 to the second end.
INT4 orientSET[0..numElem-1]Flag indicating whether material  orientation is on for this 
element.
INT4 orientID[0..numEl em-1] The ID of the third/orie ntation node for the element.
INT4 Nodes[0..(20*numElem)-1]The node IDs used to define th e element. Stored 20 values 
per element. Unused nodes are 0. Element types that refer-
ence lists of nodes (like rigid, slide lines or contact), can not 
be created using this method - you must use Put to create 
those element types.
INT4 connectTYPE[0..(2*numElem)-
1]There are 2 values per element.
connectTYPE[0] specifies type of weld element( 0 thru 6 )
connectTYPE[1] Weld 
Location by: Projection=0 Axis=1
PutAllArray   API-2433
INT4 connectSEG[0..(2*numElem)-
1]There are 2 values per element.  Node, Element or Property 
ID for weld patch A and B respectively  for individual of weld 
types. 
Output:Error Codes:FE_FAIL Unable to create the specified elements.Remarks/Usage:This method is the fastest way to create a large number of elements. Example:NonePutAllArray
( numElem, entID, propID, elemTYPE, topology, layer, color, formulation, orient, offset, 
release, orientSET, orientID , Nodes, connectTYPE, connectSEG )
 API-2434  GetGeomPropArray
5.25.2.5  GetGeomPropArray
GetGeomPropArray
(setID, numElem, entID, propID, matlID, elemTYPE, topology, vCG, length, area, volume)
Description:This method returns various geometric pr operties for a selected set of elements.
Input:
INT4 setIDID of the set that contains the element IDs to retrieve. If 0, 
retrieve all elements in the model.
Output:INT4 numElem The number of elements for which data is being returned.
INT4 entID[0..numElem-1] Each entry is  the ID of the associated element.
INT4 propID[0..numElem-1] The property ID of the element.INT4 matlID[0..numElem-1] The material ID of the element.
INT4 elemTYPE[0..numElem-1] The element type.INT4 topology[0..numElem-1] The element topology/shape.
REAL8 vCG[0..(3*numElem)-1]The coordinates of the centroid of the element. Always 
reported in Global Re ctangular coordinates
REAL8 length[0..numElem-1] The length of each  element. Only nonzero for line elements.
REAL8 area[0..numElem-1] The  area of each element.
REAL8 volume[0..numElem-1] The volume of each element.Error Codes:FE_NOT_EXIST No Geometric proper ties found for selected elements
FE_NO_MEMORY Unable to allocate suff icient memory to return properties
FE_INV ALID No Elements selectedRemarks/Usage:This method is the fastest way to retrieve information ab out a large number of elements. If a retrieved 
element ID does not exist, then all of the values for that element ID will be 0.
Example:
GetNodeList   API-2435
5.25.2.6  GetNodeList
GetNodeList
(  listINDEX, nodecount, node, face, weight, dof )
Description:This method retrieves inform ation from the node lists on rigid and slide line elements.
Input:
INT4 listINDEXThe ID of the list to retrieve. For ri gid elements, only list 0 is avail-
able. For slide lines, lists 0 and 1 are available.
Output:
INT4 nodecountThe number of entries in the other arrays (except dof, which has 
6*nodecount entries).
INT4 node[0..N] The IDs of  the nodes in the list.
INT4 face[0..N] The face numbers of any elements (not used).
REAL8 weight[0..N]The weighting factors associated with  the nodes for interpolation ele-
ments.
INT4 dof[0..6N]The degree of freedom flags associ ated with the nodes. This array 
has six sequential entries for each node. For example, node[0] has 
entries dof[0]..dof[5] as its degree  of freedom flags. node[1] has 
dof[6]..dof[11], and so on.
Return Code:FE_NOT_EXIST There are no entries in the list.FE_NOT_A V AILABLE You have requested  an invalid list, check listINDEX.
Remarks/Usage:This method simply retrieves the in formation about the node  lists from the current object. You must first 
load that data - either using the Get( ) method , or by loading it yourself with PutNodeList( ).
Example:None
 API-2436  PutNodeList
5.25.2.7  PutNodeList
PutNodeList
(  listINDEX, nodecount, node, face, weight, dof )
Description:This method loads informatio n into the node lists on ri gid and slide line elements.
Input:
INT4 listINDEXThe ID of the list to retrieve. For ri gid elements, only list 0 is avail-
able. For slide lines, lists 0 and 1 are available.
INT4 nodecountThe number of entries in the other arrays (except dof, which has 
6*nodecount entries).
INT4 node[0..N] The IDs of  the nodes in the list.
INT4 face[0..N] The face numbers of any elements (not used - must be NULL)
REAL8 weight[0..N]The weighting factors associated with  the nodes for interpolation ele-
ments.
INT4 dof[0..6N]The degree of freedom flags associ ated with the nodes. This array 
has six sequential entries for each node. For example, node[0] has 
entries dof[0]..dof[5] as its degree  of freedom flags. node[1] has 
dof[6]..dof[11], and so on.
Output:NoneReturn Code:FE_NOT_A V AILABLE You have requested  an invalid list, check listINDEX.
Remarks/Usage:This method stores informa tion into the lists of the current object . Any previous list information in that 
object is lost. This method does not store that info rmation to the model databa se. After using this func-
tion, you must call Put( ) if you want to  store the updated lists in the database.
Example:None
ClearNodeList   API-2437
5.25.2.8  ClearNodeList
ClearNodeList
(  listINDEX )
Description:This method clears no de lists on rigid and slide line elements.
Input:
INT4 listINDEXThe ID of the list to retrieve. For ri gid elements, only list 0 is avail-
able. For slide lines, lists 0 and 1 ar e available. You may specify -1 to 
clear all lists in one call.
Output:NoneReturn Code:
None
Remarks/Usage:If there are node lists in the obje ct, either because you added them with PutNodeList(), or because you 
called Get() on an element that had lists, this method will simply erase the selected list. You can use this 
if you want to clear the lists because you want to reuse the object for a different element type.
Example:None
 API-2438  GetSpringOrient
5.25.2.9  GetSpringOrient
GetSpringOrient
(  enOrient, nOrient, dVec1, dVec2, dVec3 )
Description:Returns the orientation for the spring/damper element
Input:
Output:
INT4 enOrientSpring/damper orientation. 0=None (FESO_NONE), 1=Node 
(FESO_NODE), 2=Vector (FESO_VECTOR), 3=Coordinate System 
on Element (FESO_ELCID), 4=Coor dinate System on Property 
(FESO_PRCID)
INT4 nOrientOrientation entity for FESO_NODE (node ID), FESO_ELCID (CSys 
ID), FESO_PRCID (CSys ID from property)
REAL8 dVec1 Vector X orientation in global coordinate system (FESO_VECTOR)REAL8 dVec2 Vector Y orientation in global coordinate system (FESO_VECTOR)REAL8 dVec3 Vector Z orientation in gl obal coordinate system (FESO_VECTOR)
Return Code:FE_FAIL Element is not a spring/damper FE_INV ALID Property does not have coordinate system flag enabled
Remarks/Usage:
Example:
None
SetSpringOrient   API-2439
5.25.2.10  SetSpringOrient
SetSpringOrient
(  enOrient, nOrient, dVec1, dVec2, dVec3 )
Description:Set orientation for spring/damper elementInput:
INT4 enOrientSpring/damper orientation. 0=None (FESO_NONE), 1=Node 
(FESO_NODE), 2=Vector (FESO_VECTOR), 3=Coordinate System 
on Element (FESO_ELCID), 4=Coor dinate System on Property 
(FESO_PRCID)
INT4 nOrientOrientation entity for FESO_NODE (node ID), FESO_ELCID (CSys 
ID), FESO_PRCID (CSys ID from property)
REAL8 dVec1 Vector X orientation in global coordinate system (FESO_VECTOR)REAL8 dVec2 Vector Y orientation in global coordinate system (FESO_VECTOR)REAL8 dVec3 Vector Z orientation in gl obal coordinate system (FESO_VECTOR)
Output:
Return Code:
FE_FAILElement is not a spring/damper or invalid orientation method speci-
fied
FE_INV ALID FESO_PRCID specified and pr operty doesn't have CSys enabled
FE_NOT_EXISTNode doesn't exist (FESO_NODE) or CSys doesn't exist 
(FESO_ELCID)
Remarks/Usage:Use of this method is re commended over settin g individual spring orientation properties on the element 
object as it ensures all the correct flag s will be set for the selected orientation
Example:None
 API-2440  GetSpringOffset
5.25.2.11  GetSpringOffset
GetSpringOffset
(  enOffset, dVec1, dVec2, dVec3 )
Description:Returns the offset for spring/damper elementInput:
Output:
INT4 enOffsetSpring/damper orientation. 0=Default (FESL_DEFAULT), 1=Loca-
tion (FESL_ELLOC), 2=From Proper ty (FESL_PRLOC), 3=Vector 
(FESL_OFFSET)
REAL8 dVec1Offset vector X component in global rectangular (FESL_OFFSET). 
Location for FESL_ELLOC or FESL_PRLOC
REAL8 dVec2 Offset vector Y componen t in global rectangular (FESL_OFFSET)
REAL8 dVec3 Offset vector Z component in global rectangular (FESL_OFFSET)
Return Code:FE_FAIL Element is not a spring/damper FE_INV ALID Property does not have coordinate system flag enabled
Remarks/Usage:
Example:
None
SetSpringOffset   API-2441
5.25.2.12  SetSpringOffset
SetSpringOffset
(  enOffset, dVec1, dVec2, dVec3 )
Description:Set offset for spring/damper elementInput:
INT4 enOffsetSpring/damper orientation. 0=Default (FESL_DEFAULT), 1=Loca-
tion (FESL_ELLOC), 2=From Proper ty (FESL_PRLOC), 3=Vector 
(FESL_OFFSET)
REAL8 dVec1Offset vector X component in global rectangular (FESL_OFFSET). 
Location for FESL_ELLOC or FESL_PRLOC
REAL8 dVec2 Offset vector Y componen t in global rectangular (FESL_OFFSET)
REAL8 dVec3 Offset vector Z component in global rectangular (FESL_OFFSET)
Output:
Return Code:
FE_FAIL Element is not a spring/damper or invalid offset method specified
FE_INV ALIDProperty does not have loca tion enabled when FESL_PRLOC is 
specified
Remarks/Usage:Use of this method is re commended over setting individual spring /damper offset properties on the ele-
ment object as it ensures all the correct  flags will be set for the selected offset
Example:None
 API-2442  Prop
5.25.2.13  Prop
Prop
( void )
Description:This method creates and returns a Prop erty object that is loaded with the property data referenced by an 
element.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:
Example:
This method must be  used with a Set statement to  define the Property object.
Sub Main 
Dim App As femap.model 
Set App = feFemap() 

Dim pr As femap.Prop 
Dim el As femap.Elem

Set el = App.feElem 

el.Get(83) 
Set pr = el.Prop 

App.feAppMessage(FCM_NORMAL, "Property: " + Str$(pr.ID)+ _ 
     " "+pr.title) 
End Sub

This sequence creates the “pr” Property object with th e property data that is referenced by element 83.
Matl   API-2443
5.25.2.14  Matl
Matl
( void )
Description:This method creates and returns a Material object that is loaded with the material  data referenced by an 
element.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:
Example:
This method must be used  with a Set statement to define the Material object.
Sub Main() 
Dim App As femap.model 
   Set App = feFemap() 

Dim el As femap.Elem 
Dim mt As femap.Matl 
Set el = App.feElem 
el.Get(83) 
Set mt = el.Matl 
App.feAppMessage(FCM_NORMAL, "Material: " + Str$(mt.ID)+ _ 
        " "+mt.title) 
End Sub 
This sequence creates the “mt” Material object with th e property data that is referenced by element 83.
 API-2444  GetCentroid
5.25.2.15  GetCentroid
GetCentroid
( cgXYZ )
Description:This method returns the cent roid of the current element
Input:NoneOutput:
REAL8 cgXYZ[0..2]The coordinates of the centroid of the element. Alwa ys reported in 
Global Rectangular coordinates.
Return Code:NoneRemarks/Usage:NoneExample:None
GetCentroidArray   API-2445
5.25.2.16  GetCentroidArray
GetCentroidArray
( setID, numElem, entID, vCG )
Description:This method retrieves arrays of centroid values for a set of elements.Input:
INT4 setIDID of the set that contains the element IDs to retrieve. If 0, 
retrieve all elements in the model.
Output:INT4 numElem The number of elements for which data is being returned.
INT4 entID[0..numElem-1] Each entry is  the ID of the associated element.
REAL8 vCG[0..(3*numElem)-1]The coordinates of the centroid of the element. Always 
reported in Global Rectangular coordinates.
Error Codes:FE_FAIL Unable to retrieve da ta from the selected elements.
Remarks/Usage:This method is the fastest way to retrieve centroid  information about a large number of elements. If a 
retrieved element ID does not exist, then all of the values for that element ID will be 0.
Example:None
 API-2446  GetFaceCentroid
5.25.2.17  GetFaceCentroid
GetFaceCentroid
( nFace, cgXYZ )
Description:This method returns the centro id of a selected element face.
Input:INT4 nFace The identifier of the face that you want to select.
Output:
REAL8 cgXYZ[0..2]The coordinates of the centroid of the element face. Always reported 
in Global Rectangular coordinates.
Return Code:NoneRemarks/Usage:The face identifiers are the same as the face number s used when applying el emental loads. These are 
shown in the Element Reference in the User Manual. On ly planar or solid elemen ts can be used, but the 
edges of planar elements are valid.
Example:None
GetFaceNormal   API-2447
5.25.2.18  GetFaceNormal
GetFaceNormal
( nFace, normalXYZ )
Description:This method returns the normal ve ctor of a selected element face.
Input:INT4 nFace The identifier of the face that you want to select.
Output:
REAL8 normalXYZ[0..2]The vector components of the normal of the element face. Always 
reported in Global Rectangular coordinates. Thes e vector compo-
nents are always normalized.
Return Code:
None
Remarks/Usage:The face identifiers are the same as the face number s used when applying el emental loads. These are 
shown in the Element Reference in the User Manual. On ly planar or solid elemen ts can be used, but the 
edges of planar elements are valid.
For nonplanar faces, an approximate normal is comp uted as an average normal of the normals at the 
face corners.
Example:None
 API-2448  GetFaceArea
5.25.2.19  GetFaceArea
GetFaceArea
( nFace, dArea )
Description:This method returns the area  of a selected element face.
Input:INT4 nFace The identifier of the face that you want to select.
Output:REAL8 dArea The area of the element face. Return Code:NoneRemarks/Usage:The face identifiers are the same as the face number s used when applying el emental loads. These are 
shown in the Element Reference in the User Manual. On ly planar or solid elemen ts can be used, but the 
edges of planar elements are valid . If the element has thickness, its av erage thickness is used along with 
the edge length to compute edge area. For axis ymmetric elements, a thickness of 1.0 is used.
Example:None
GetSingleFaceInfoArray   API-2449
5.25.2.20  GetSingleFaceInfoArray
GetSingleFaceInfoArray
( setID, nFace, numElem, entID, cgXYZ, normalXYZ, dArea )
Description:This method returns arrays of centroid, normal, and area values  of an identical element face 
for a set of elements.
Input:
INT4 setIDID of the set that contains the elem ent IDs to retrieve. If 0, retrieve 
all elements in the model.
INT4 nFaceThe identifier of the face that you wa nt to select. Information on this 
face is returned for all elements.
Output:INT4 numElem The number of element faces  for which data is  being returned.
INT4 entID[0..numElem-1] Each entry is  the ID of the associated element.
REAL8 
cgXYZ[0..(3*numElem)-1]The coordinates of the centroid of the element faces, 3 values per 
element. Always reported in Global Rectangular coordinates.
REAL8 
normalXYZ[0..(3*numElem)-1]The vector components of the normal of the element faces, 3 values 
per element. Always reported in Global Rectangular coordinates. 
These vector components are always normalized.
REAL8 
dArea[0..numElem-1]The areas of the element faces. 
Return Code:
FE_OK Success.FE_BAD_DATA Unable to retrieve face inform ation. Ensure nFace is a valid face ID.
FE_INV ALID Element set was empty or th ere are no elements in the model.
Remarks/Usage:The face identifiers are the same as the face number s used when applying el emental loads. These are 
shown in the Element Reference in th e User Manual. Only planar or so lid elements can be used, but the 
edges of planar elements are valid.
For nonplanar faces, an approximate normal is comp uted as an average normal of the normals at the 
face corners.
Example:
 API-2450  GetSingleFaceInfoArray
Sub Main
    Dim App as femap.model    Set App = feFemap()
    Dim e As femap.Elem
    Set e = App.feElem
    Dim eSet As femap.Set
    Set eSet = App.feSet
    rc = eSet.Select( FT_ELEM, True, "Select Element(s)" )
    If rc <> FE_OK Then End
Dim nFace, numElem As Long
Dim vID, vCGXYZ, vNormalXYZ, vArea As Variant
nFace = 1
rc = e.GetSingleFaceInfoArray(eSet.ID, nFace,  numElem, vID, vCGXYZ, vNormalXYZ, vArea )
If rc <> FE_OK Then End
msg = "ID, Centroid X,Y ,Z"
App.feAppMessage(FCM_WARNING, msg )
For i = 0 To numElem-1
eID = vID( i )x = vCGXYZ(3*i )
y = vCGXYZ(3*i +1)z = vCGXYZ(3*i +2)
msg = Format(eID)+",  "+vbTa b+Format(x)+",  "+vbTab+Form at(y)+",  "+vbTab+Format(z)
App.feAppMessage(FCM_NORMAL, msg )
NextEnd SubGetSingleFaceInfoArray
( setID, nFace, numElem, entID, cgXYZ, normalXYZ, dArea )
GetMultiFaceInfoArray   API-2451
5.25.2.21  GetMultiFaceInfoArray
GetMultiFaceInfoArray
( nNumFaces, nElemID, nFaceIDs, faceOK, cgXYZ, normalXYZ,dArea )
Description:This method returns arrays of centroid, normal, and area values on different faces specified in an array 
for a set of elements.
Input:
INT4 nNumFaces
The number of face entries in the nFaceIDs array.
INT4 nElemIDs Each entry is the ID of the associated element.
INT4 nFaceIDs Each entry is the ID of the face to query.Output:BOOL 
faceOK[0..nNumFaces-1]Returns an array of True or False values if valid element ID and face 
ID are provided as input.
REAL8 
cgXYZ[0..(3*numElem)-1]The coordinates of the centroid of the element faces, 3 values per 
element. Always reported in Global Rectangular coordinates.
REAL8 
normalXYZ[0..(3*numElem)-1]The vector components of the normal of the element faces, 3 values 
per element. Always reported in Global Rectangular coordinates. 
These vector components are always normalized.
REAL8 
dArea[0..numElem-1]The areas of the element faces. 
Return Code:
FE_OK Success.
FE_BAD_DATAUnable to retrieve f ace information. Ensure  valid element IDs and 
valid Face IDs are popula ted in the input arrays.
FE_INV ALID nNumFaces must be greater than zero.Remarks/Usage:The face identifiers are the same as the face number s used when applying el emental loads. These are 
shown in the Element Reference in th e User Manual. Only planar or so lid elements can be used, but the 
edges of planar elements are valid.
For nonplanar faces, an approximate normal is comp uted as an average normal of the normals at the 
face corners.
Example:
 API-2452  GetMultiFaceInfoArray
Sub Main
    Dim App as femap.model    Set App = feFemap()
    Dim e As femap.Elem
    Set e = App.feElem
    Dim nNumFaces As Long
    Dim vID, vFaceID As Variant
    Dim vFaceOk, vCGXYZ, vNormalxyz, vArea As Variant
    rc = App.feGetElementFaces("Select Element Face(s)", 0, 0, 0, _
nNumFaces&, vID, vFaceID )
    rc = e.GetMultiFaceInfoArra y(  nNumFaces, vID, vFaceID, _
vFaceOk, vCGXYZ,  vNormalxyz, vArea )
msg = "[ID], [Face], ( Centroid X,Y ,Z )..."
rc = App.feAppMessage(FCM_WARNING, msg )
For i = 0 To nNumFaces-1eID = vID( i )
fID = vFaceID( i )
x = vCGXYZ(3*i )
y = vCGXYZ(3*i +1)z = vCGXYZ(3*i +2)
msg = "["+Format(eID)+"],"+" ["+Format(fID)+"], "
msg += "("+Format(x)+",   "+Fo rmat(y)+",   "+Format(z)+")"
rc = App.feAppMessage(FCM_NORMAL, msg )
Next
End SubGetMultiFaceInfoArray
( nNumFaces, nElemID, nFaceIDs, faceOK, cgXYZ, normalXYZ,dArea )
GetFaceNodes   API-2453
5.25.2.22  GetFaceNodes
GetFaceNodes
( nFace, nodes )
Description:This method returns the nodes whic h define the selected element face.
Input:INT4 nFace The identifier of the face that you want to select.
Output:
INT4 nodes[0..7]The nodes used to define the sele cted face. Corner nodes always 
come first, followed by midside no des. Most faces use less than 8 
nodes, and the final node IDs will all be 0.
Return Code:
None
Remarks/Usage:This method only desinged for Plan ar (Tria3, Tria6, Quad4 and Quad8)  and Solid (Tetra4, Tetra10, Pyr-
amid5, Pyramid13, Wedge6, Wedge15, Br ick8 and Brick20) shaped elements.
The face identifiers are the same as the face number s used when applying el emental loads. These are 
shown in the Element Reference in the User Manual. On ly planar or solid elemen ts can be used, but the 
edges of planar elements are valid.
Node order for Face 1 on planar elements follows the Right Hand Rule, while node order for Face 2 is 
opposite. For solid elements, node order always follows the Right hand Rule around an inward facing 
normal.
Example:None
 API-2454  GetFaceNodes2
5.25.2.23  GetFaceNodes2
GetFaceNodes2
( bCornerPressureOrder, nFace, nodes )
Description:Similar to GetFaceNodes, this meth od returns the nodes which define the selected element face, which 
can optionally be returned in the order used to apply pressure loads on element corners.
Input:
BOOL bCornerPressureOrderIf False, nodes are returned in the same order as GetFaceNodes, and 
is described in the Remarks/Usage section. If True, Planar element 
node order follows the right-hand ru le around the element normal for 
both Face 1 and Face2. For Solid Elements, node order always fol-
lows the right-hand rule around an outward facing normal.
INT4 nFace The identifier of the face that you want to select.
Output:
INT4 nodes[0..7]The nodes used to define the sele cted face. Corner nodes always 
come first, followed by midside no des. Most faces use less than 8 
nodes, and the final node IDs will all be 0.
Return Code:NoneRemarks/Usage:This method is only designed for Planar (Tria3, Tria6, Quad4 and Quad8) and Solid (Tetra4, Tetra10, 
Pyramid5, Pyramid13, Wedge6, Wedge15, Brick8 and Brick20) shaped elements.
The face identifiers are the same as the face number s used when applying el emental loads. These are 
shown in the Element Reference in the User Manual. On ly planar or solid elemen ts can be used, but the 
edges of planar elements are valid.
Node order for Face 1 on planar elements follows the Right Hand Rule, while node order for Face 2 is 
opposite. For solid elements, node order always follows the Right hand Rule around an inward facing 
normal.
Example:None
GetEdgeNodes   API-2455
5.25.2.24  GetEdgeNodes
GetEdgeNodes
( nEdge, n1, n2, nmid )
Description:This method returns the nodes on the selected edge of the element.
Input:INT4 nEdge The identifier of the edge that you want to select.
Output:INT4 n1 The first node used to define the edgeINT4 n2 The last node used to define the edgeINT4 nmid The midside node on the edge (0 if edge has no midside node)Return Code:NoneRemarks/Usage:This method only works for Line (Line2 and Line3), Planar (Tria3, Tria6, Quad4 and Quad8) and Solid 
(Tetra4, Tetra10, Pyramid5, Pyramid13, Wedge6, Wedge15, Brick8 and Brick20) shaped elements.
For Line elements, only edge 1 is  available. For Planar elements, edge 1 connects the first and second 
nodes on the element, and proceed in order around the element connectivity. For Solid elements, the first 
edges are around the bottom face, followed by th e edges connecting the bo ttom and top faces, and 
finally the top face edges.
Example:None
 API-2456  IsParabolic
5.25.2.25  IsParabolic
IsParabolic
( void )
Description:This method indicates if the load ed element is parabolic or not
Input:NoneOutput:NoneReturn Code:FE_OK Element is ParabolicFE_FAIL Element is not ParabolicRemarks/Usage:NoneExample:None
Thickness   API-2457
5.25.2.26  Thickness
Thickness
( dAvg, dAtC1, dAtC2, dAtC3, dAtC4 )
Description:This method returns the thickness of the element.
Input:NoneOutput:REAL8 dAvg The average thickness of the element. REAL8 dAtC1 The element thickness at corner 1. REAL8 dAtC2 The element thickness at corner 2.REAL8 dAtC3 The element thickness at corner 3.REAL8 dAtC4 The element thickness at corner 4.Return Code:FE_OKFE_BAD_TYPE Element type does not have thickness.FE_NOT_A V AILABLE Element does not reference a property.Remarks/Usage:NoneExample:None
 API-2458  Length
5.25.2.27  Length
Length
( dLength )
Description:This method returns the length of a Line Element.Input:NoneOutput:REAL8 dLength The element LengthReturn Code:FE_BAD_TYPE Element is not correct type.Remarks/Usage:NoneExample:None
Area   API-2459
5.25.2.28  Area
Area
( dAreaA, dAreaB )
Description:This method returns the area at EndA and EndB of Line Element.Input:NoneOutput:REAL8 dAreaA The element area at EndA.REAL8 dAreaB The element area at EndB.Return Code:FE_OKFE_BAD_TYPE Element is not correct type.FE_NOT_A V AILABLE Element does not reference a property.Remarks/Usage:NoneExample:None
 API-2460  Inertia
5.25.2.29  Inertia
Inertia
( dI1A, dI2A, dI12A, dJA, dI1B, dI2B, dI12B, dJB )
Description:This method returns line elemen t properties at EndA and EndB.
Input:NoneOutput:REAL8 dI1A Area Moment of Inertia for plane 1 EndAREAL8 dI2A Area Moment of Inertia for plane 2 EndAREAL8 dI12A Cross product of inertia at EndAREAL8 dIJA Torsional constant EndAREAL8 dI1B Area Moment of Inertia for plane 1 EndBREAL8 dI2B Area Moment of Inertia for plane 2 EndBREAL8 dI12B Cross product of inertia at EndBREAL8 dIJB Torsional constant EndBReturn Code:FE_OKFE_BAD_TYPE Element is not a line type.FE_NOT_A V AILABLE Element does not reference a property.Remarks/Usage:NoneExample:None
GetMinMaxEdgeLength   API-2461
5.25.2.30  GetMinMaxEdgeLength
GetMinMaxEdgeLength
( dMinLen, dMaxLen )
Description:Finds the minimum and maximum le ngth of edges in the element
Input:NoneOutput:REAL8 dMinLen The minimum edge lengthREAL8 dMaxLen The maximum edge lengthReturn Code:FE_OK
FE_INV ALIDElement is not a supported type - on ly line, planar and solid elements 
are supported
Remarks/Usage:NoneExample:None
 API-2462  ElementHasThickness
5.25.2.31  ElementHasThickness
ElementHasThickness
( void )
Description:This method indicates if the loaded element ha s corner thickness values defined on the element.
Input:NoneOutput:NoneReturn Code:FE_OK Element has corner thicknes s values defined on the element
FE_FAILElement does not have corner th ickness values defined on the ele-
ment
Remarks/Usage:It may be beneficial to use this call before using th e Thickness method to dete rmine if the corner thick-
ness values being returned are coming from the elem ent or the property referenced by the element.
Example:None
SetPlateThickness   API-2463
5.25.2.32  SetPlateThickness
SetPlateThickness
( dAtC1, dAtC2, dAtC3, dAtC4 )
Description:Sets the element corner thickness on Plate elementsInput:REAL8 dAtC1 The element thickness at corner 1REAL8 dAtC2 The element thickness at corner 2REAL8 dAtC3 The element thickness at corner 3REAL8 dAtC4 The element thickness at corner 4Output:NoneReturn Code:
FE_BAD_TYPEElement is not a supported type - on ly plate and plane strain elements 
are supported
Remarks/Usage:NoneExample:None
 API-2464  GetAnsysFormulationArray
5.25.2.33  GetAnsysFormulationArray
GetAnsysFormulationArray
( setID, numElem, entID, exist, formulation )
Description:Gets the ANSYS formulations of a given set of elements. Input:INT4 setID The ID of the set object containing the elements. Output:INT4 numElem The number of elements returned. INT4 entID[0..numElem-1] An array of the IDs of the el ements returned. 
INT4 exist[0..numElem-1] An array of the elemen ts that indicated if the formulation exists. 
INT4 formulation[0..numElem-
1]An array of the element formulation values.
Return Code:
Remarks/Usage:
NoneExample:None
PutAnsysFormula tionArray   API-2465
5.25.2.34  PutAnsysFormulationArray
PutAnsysFormulationArray
( numElem, entID, exist, formulation )
Description:Sets the ANSYS formul ations for a given array of elements.
Input:INT4 numElem The number of elements to put.INT4 entID[0..numElem-1] An arra y with the element IDs to put.
INT4 formulation[0..numElem-
1]An array with the ANSY S formulations to put.
Output:
None  Return Code:
Remarks/Usage:
NoneExample:None
 API-2466  GetAnsysKeyoptArray
5.25.2.35  GetAnsysKeyoptArray
GetAnsysKeyoptArray
( numElem, entID, exist, keyopt )
Description:Gets the ANSYS keyopts for a given set of elements.
Input:INT4 setID The ID of the set object containing the elements. Output:INT4 numElem The number of elements returned. INT4 entID[0..numElem-1] An array of the IDs of the el ements returned. 
INT4 exist[0..numElem-1] An array of the elemen ts that indicated if the formulation exists. 
INT4 keyopt[0..12*numElem-
1]An array of the element formulation values.
Return Code:
Remarks/Usage:
NoneExample:None
PutAnsysKeyoptArray   API-2467
5.25.2.36  PutAnsysKeyoptArray
PutAnsysKeyoptArray
( numElem, entID, keyopt )
Description:Sets the ANSYS keyopts for a given array of elements.Input:INT4 numElem The number of elements to put.INT4 entID[0..numElem-1] An arra y with the element IDs to put.
INT4 keyopt[0..12*numElem-
1]An array with the ANSYS keyopts to put.
Output:
None  Return Code:
Remarks/Usage:
NoneExample:None
 API-2468  HasProp
5.25.2.37  HasProp
HasProp
( )
Description:Returns if the element has an associated property. Input:NoneOutput:None  Return Code:FE_OK Element has a property. FE_FAIL Element does not have a property. Remarks/Usage:NoneExample:None
HasMatl   API-2469
5.25.2.38  HasMatl
HasMatl
( )
Description:Return if the element has an associated material. Input:NoneOutput:None  Return Code:FE_OK Element has a material. FE_FAIL Element does not have a material. Remarks/Usage:NoneExample:None
 API-2470  GetMatlOrientVec (vMatOrientVec)
5.25.2.39  GetMatlOrientVec
GetMatlOrientVec (vMatOrientVec)
Description:
This method returns the vector that is  the material orientation direction. 
Input:NoneOutput:
REAL8 vMatOrientVec[0..2] The vector components of the material orientation vector. For            
laminate elements, this is th e 0 degree reference direction.
Return Code:FE_OK The element has a material orientation. FE_FAIL The element does not have a material orientation. Remarks/Usage:NoneExample:None
ElementalCSys (bCreateCSys, nCSysType, bUsePlat eMatlDirection, nCSysID, vOrigin, vRotation) 
5.25.2.40  ElementalCSys
ElementalCSys (bCreateCSys, nCSysType,  bUsePlateMatlDirection, nCSysID, 
vOrigin, vRotation)
Description:
This method creates a coordinate system along the el ement axis or material di rection. This method can 
also return element orientation values.
Input:
BOOL bCreateCSys If True, a Coordinate System will be created and its ID will be 
returned in nCSysID. If False, no Coordinate System will be created and only element orientatio n values will be returned.
INT4 nCSysTypeType of Coordinate System:
Rectangular=0, Cylindrical=1, Spherical=2.
BOOL bUsePlateMatlDirection If False, the Coordinate System represents the elemental axes. If 
True, the Coordinate System Z axis  is aligned with the elemental 
axes, but the Coordinate System X ax is is in the material orientation 
direction. This option is only used for Planar elements and is ignored 
for Solid elements.
Output:
INT4 nCSysIDIf bCreateCSys=True, this is the ID of the Coordinate System that 
was created.
REAL8 vOrigin[0..2]The coordinates in Global Rect angular of the origin of the 
Coordinate System.
REAL8 vRotation[0..2]The triple rotation angles used to  define the orientation of the 
Coordinate System.
Return Code:FE_OK Coordinate System was create d and/or values were returned. 
FE_FAIL Can not determine the elemental Coordinate System. FE_NOT_EXIST Can not retrieve the nodes that define the element. 
FE_BAD_TYPE Element Type is not supported.Remarks/Usage:NoneExample:
 API-2472  ElementalCSys (bCreateCSys, nCSysType,  bUsePlateMatlDirection, nCSysID, 
Sub Main
    Dim App as femap.model
    Set App = feFemap()
    Dim e As femap.Elem
    Set e = App.feElem
    Dim rc As femap.zReturnCode
    Dim bCreateCSys, bUsePlateMatDir As Boolean
    Dim nCSysID As Long 'returned    Dim vOrigin, vRotation As Variant 'returned
    bCreateCSys = True
    bUsePlateMatDir = True
    If e.SelectID("") <> FE_OK Then End
    rc = e.ElementalCSys( bCreateCSys, FCS_RECTANGULAR,  bUsePlateMatDir, _
nCSysID, vOrigin, vRotation )
End SubElementalCSys (bCreateCSys, nCSysType,  bUsePlateMatlDirection, nCSysID, 
vOrigin, vRotation)
   API-2473
5.26  Freebody Objects
Freebody Objects refer to Freebody Entities in the model, which are used to create freebody dia-
grams in the model for post-pro cessing. For more information, see Section 5.1, "Common Entity 
Properties and Methods". 
Use the feFreebody method of the FEMAP App lication object to crea te Freebody objects.
5.26.1  Freebody Object Properties
Freebody entities are always stored with a SetI D=1, and the ID equa l to the Freebody ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
STRING title Freebody title (m aximum 79 characters)
INT4 CSys ID of coordinate system used by the Freebody
BOOL UseNodalOutputCSUse nodal output coordinate system for freebody nodal vectors. 
Freebody coordinate system is used when FALSE
INT4 Layer ID of the layer containing the Freebody
INT4 DisplayModeThe Display Mode of the Freebody (0=Freebody, 1=Interface 
Load, 2=Section Cut). Use enum zFbdDisplayMode
INT4 GroupSets the Entity Selection Mo de of the Freebody (-1=Group 
Select: use Active Group, 0=Entity Select, 1+ = Group Select: 
use value to specify Group ID) 
INT4 SectionModeSection Cut Entity Selectio n Mode. 0=plane/normal, 
1=plane/vector, 2=vector, 3=curve. 
Use enum zFbdSectionMode
REAL8 SectionPlaneBase[0..2]
orV ARIANT vSectionPlaneBaseCoordinates, in Global Rectangular Coordinate System, of sec-
tion cut plane base. Only used  when section cu t mode (Section-
Mode) is 0 (plane/normal) or 1 (plane/vector) 
REAL8 SectionPlaneNormal[0..2]
or
V ARIANT vSectionPlaneNormalUnit vector for section cut plane normal. Only used when section 
cut mode (SectionMode) is 0 (pla ne/normal) or 1 (plane/vector)
REAL8 SectionVectorBase[0..2]
or
V ARIANT vSectionVectorBaseCoordinates, in Global Rectangular Coordinate System, of sec-
tion cut vector base. Only used  when section cu t mode (Section-
Mode) is 1 (plane/vector) or 2 (vector)
REAL8 SectionVectorTip[0..2]
orV ARIANT vSectionVectorTipUnit vector for section cut vect or normal. Only used when
section cut mode (SectionMode) is 1 (plane/vector) or 2 (vector)
INT4 SectionCurveID of curve, only used when se ction cut mode (SectionMode) is 
3 (curve)
 API-2474  
REAL8 SectionTolerance Entity search tole rance for section cut plane. Value > 0.0
BOOL SectionReverseRevere the normal direction of  the section cut plane when 
searching for entities. Does not modi fy the normal values in the 
object, only the search direction used internally to determine 
freebody entities
REAL8 SectionRadiusSearch radius for freebody section  cut entities. Entities must be 
less than this distance from the cu tting plane base to be included 
in the freebody (centroidal locatio n is used for element location). 
Value > 0.0
BOOL SectionLimitToGroupLimit entities for freebody section cut to those contained within 
a specified group. Both nodes a nd elements must  exist in the 
specified group to be considered
INT4 SectionGroup ID of group to  limit freebody section cut entities
BOOL SectionIncludeClippedElemInclude elements clipped by cu tting plane in as freebody ele-
ments
BOOL SectionRotateSumsRotate nodal sums and total summ ation to tangent vector at sec-
tion cut plane/path intersection
INT4 SectionSumLocationLocation of total summation vect or when in section cut mode. 
0=plane/path intersection, 1=cent roid, 2=static location (defined 
x, y, z). Use enum zFbdSectionSumLoc
REAL8 SectionLocation Location, alon g section cut path, of cutting plane
INT4 NodeMarkerColorSets the color of the Node Marke r(s) for the Freebody. Only used 
when the Color Mode for the Node  Makers is set to “Freebody 
Entity Color”.
INT4 TotalVectorMode[0..1]
or
V ARIANT vTotalVectorModeArray of Total Summation Vector display mode.
TotalVectorMode[0] = Force Vector Display mode
TotalVectorMode[1] = Moment Vector Display mode
Set value to 0 = Off, 1 = Di splay Components, 2 = Display 
Resultants 
BOOL ShowTotalVec[0..5]
or
V ARIANT vShowTotalVecArray of on/off flags for Di splayed Forces and Displayed 
Moments for Total Summation Vector
ShowTotalVec[0] = FX (FBC_FX)
ShowTotalVec[1] = FY (FBC_FY)ShowTotalVec[2] = FZ (FBC_FZ)
ShowTotalVec[3] = MX (FBC_MX)
ShowTotalVec[4] = MY (FBC_MY)ShowTotalVec[5] = MZ (FBC_MZ)Property Description
   API-2475
BOOL SumComponents[0..5]
or
V ARIANT vSumComponentsArray of on/off flags for Summ ed Components for Total Sum-
mation Vector:
SumComponents[0] = Forces X (FBC_FX)
SumComponents[1] = Forces Y (FBC_FY)SumComponents[2] = Forces Z (FBC_FZ)
SumComponents[3] = Moments X (FBC_MX)
SumComponents[4] = Moments Y (FBC_MY)SumComponents[5] = Moments Z (FBC_MZ)
INT4 TotalVecColor[0..1]
or
V ARIANT vTotalVecColorArray of Freebody Entity Colors  for Total Summation Vector.
TotalVecColor[0] = Total Force Vector Freebody Color
TotalVecColor[1] = Total Moment Vector Freebody Color
Only used when the Color Mode for the Total Force Vector and/
or Total Moment Vector is set to “Freebody Entity Color”
REAL8 xX coordinate of freebody total summation vector in coordinate 
system 0. Only used when Display Mode = Interface Load.
REAL8 yY coordinate of freebody total summation vector in coordinate 
system 0. Only used when Display Mode = Interface Load.
REAL8 zZ coordinate of freebody total su mmation vector in coordinate 
system 0. Only used when Display Mode = Interface Load.
INT4 NodalVectorMode[0..1]
orV ARIANT vNodalVectorModeArray of Nodal Vector(s) display mode.
NodalVectorMode[0] = Force Vector Display modeNodalVectorMode[1] = Moment Vector Display mode
Set value to 0 = Off, 1 = Di splay Components, 2 = Display 
Resultants 
BOOL ShowNodalVec[0..5]
orV ARIANT vShowNodalVecArray of on/off flags for Di splayed Forces and Displayed 
Moments for Nodal Vector(s):
ShowNodalVec[0] = FX (FBC_FX)ShowNodalVec[1] = FY (FBC_FZ)
ShowNodalVec[2] = FZ (FBC_FZ)
ShowNodalVec[3] = MX (FBC_MX)ShowNodalVec[4] = MY (FBC_MY)
ShowNodalVec[5] = MZ (FBC_MZ)
INT4 NodalVecColor[0..1]
or
V ARIANT vNodalVecColorArray of Freebody Entity Colors  for Total Summation Vector.
NodalVecColor[0] = Nodal For ce Vector(s) Freebody Color
NodalVecColor[1] = Nodal Moment  Vector(s) Freebody Color
Only used when the Color Mode  for the Nodal Force Vector(s) 
and/or Nodal Moment Vector(s ) is set to “Freebody Entity 
Color”Property Description
 API-2476  
BOOL SumContributions[0..5]
or
V ARIANT vSumContributionsArray of on/off flags for Freebody Contributions From:
SumContributions[0] = Applied (FBL_APPLIED)
SumContributions[1] = Reaction (FBL_SPC)
SumContributions[2] = MultiPoint Reaction (FBL_MPC)SumContributions[3] = Free body Elements (FBL_EL_FB)
SumContributions[4] = Peripheral Elements (FBL_EL_PER)
SumContributions[5] = Noda l Summation (FBL_TOTAL)
SumContributions[6] = Contact (FBL_CONTACT)
SumContributions[7] = Glue (FBL_GLUE)
BOOL AlternateAppliedAllow use of alternate vector for load contribution component 
for Applied.
BOOL AlternateSPCAllow use of alternate vector for load contribution component 
for Reaction.
BOOL AlternateMPCAllow use of alternate vector for load contribution component 
for MultiPoint Reaction.
BOOL ReverseTotalValues Reverse values for freebody nodal summation contributionProperty Description
GetElements   API-2477
5.26.2  Freebody Object Methods
The following methods are av ailable in addition to th e standard entity methods.
5.26.2.1  GetElements
GetElements
( numElem, elemID )
Description:This method retrieves the number of elements and an array of element IDs selected by the Freebody.
Output:INT4 numElem The number of elements  for which IDs are being returned.
INT4 elemID[0..num Elem-1] The IDs of the elements
Error Codes:FE_FAIL Unable to retrieve elements from freebody.FE_INV ALID Freebody is not set to en tity select mode (group is not 0)
Remarks/Usage:The method only works when the freeb ody is set to entity select mode (group is set to 0), otherwise 
FE_INV ALID is returned.
Example:None
 API-2478  SetElements
5.26.2.2  SetElements
SetElements
( bClear, setID )
Description:Sets the elements stored  in the freebody object.
Input:BOOL bClear Clear any existing elements from the freebodyINT4 setID Set ID containing el ements to add to the freebody
Output:NoneError Codes:FE_FAIL Unable to store elements in Freebody entityFE_INV ALID Freebody is not set to en tity select mode (group is not 0)
Remarks/Usage:The method only works when the freeb ody is set to entity select mode (group is set to 0), otherwise 
FE_INV ALID is returned. 
Example:None
ClearElements   API-2479
5.26.2.3  ClearElements
ClearElements
( void )
Description:Resets elements stored in the freebody object.Input:NoneOutput:NoneError Codes:FE_FAIL No elements in Freebody entityFE_INV ALID Freebody is not set to en tity select mode (group is not 0)
Remarks/Usage:The method only works when the freeb ody is set to entity select mode (group is set to 0), otherwise 
FE_INV ALID is returned. 
Example:None
 API-2480  GetNodes
5.26.2.4  GetNodes
GetNodes
( numNode, NodeID )
Description:This method retrieves the number of nodes and an array of node IDs selected by the Freebody.
Output:INT4 numElem The number of nodes for which IDs are being returned.INT4 elemID[0..numElem-1 ] The IDs of the nodes
Error Codes:FE_FAIL Unable to retrieve nodes from freebody.FE_INV ALID Freebody is not set to en tity select mode (group is not 0)
Remarks/Usage:The method only works when the freeb ody is set to entity select mode (group is set to 0), otherwise 
FE_INV ALID is returned.
Example:None
SetNodes   API-2481
5.26.2.5  SetNodes
SetNodes
( bClear, setID )
Description:Sets the elements stored  in the freebody object..
Input:BOOL bClear Clear any existing nodes from the freebodyINT4 setID Set ID containing nodes to add to the freebody
Output:NoneError Codes:FE_FAIL Unable to store nodes in Freebody entityFE_INV ALID Freebody is not set to en tity select mode (group is not 0)
Remarks/Usage:The method only works when the freeb ody is set to entity select mode (group is set to 0), otherwise 
FE_INV ALID is returned. 
Example:None
 API-2482  ClearNodes
5.26.2.6  ClearNodes
ClearNodes
( void )
Description:Resets nodes stored in the freebody object.Input:NoneOutput:NoneError Codes:FE_FAIL No nodes stored in the freebody objectFE_INV ALID Freebody is not set to en tity select mode (group is not 0)
Remarks/Usage:The method only works when the freeb ody is set to entity select mode (group is set to 0), otherwise 
FE_INV ALID is returned. 
Example:None
CalculateNodalCenter   API-2483
5.26.2.7  CalculateNodalCenter
CalculateNodalCenter
( bUpdate, xyz)
Description:Calculates the center of the node s stored in the freebody object and optionally updates the summation 
location.
Input:BOOL bUpdate Update the location of the summation vectorOutput:
V ARIANT xyzCenter of nodes in freebody in  global rectangular coordinate 
system
Error Codes:
FE_FAIL No nodes stored in freebody 
FE_INV ALID Freebody is not set to en tity select mode (group is not 0)
FE_NOT_A V AILABLEFreebody contains nodes that are not available in the data-
base
Remarks/Usage:The method only works when the freeb ody is set to entity select mode (group is set to 0), otherwise 
FE_INV ALID is returned. 
Example:None
 API-2484  CalculateSummation
5.26.2.8  CalculateSummation
CalculateSummation
( outsetID, calculations)
Description:This method is obsolete. For new applications, you sh ould use CalculateSummation2
Calculates the total summation vector based on th e settings in the freebody for the given output set.
Input:INT4 outSetID Output set ID for calculationOutput:V ARIANT calculations Calculated summed forces and momentsError Codes:
FE_FAILFreebody summation has been calculated with potential 
errors (ie missing contributions of load, missing elements, 
etc.) The values need to be verified
FE_NOT_EXIST Specified outp ut set does not exist
FE_INV ALID Freebody is not set to interface modeRemarks/Usage:The method only works when the freeb ody is set to entity select mode (group is set to 0), otherwise 
FE_INV ALID is returned. 
Example:None
CalculateSummation2   API-2485
5.26.2.9  CalculateSummation2
CalculateSummation2
( nSetID, bUseFBCSys, nNumSets, OutSetIDs, calculations)
Description:Calculates the total summation vector based on the settings in the freebody for one or more output sets 
in either the freebody coordinate system, or the global coordinate system
Input:
INT4 nSetIDThe ID of a Set object containing a list of output sets. Alter-
natively, specify a negative num ber to specify the ID of a 
single output set
BOOL bUseFBCSysUse the freebody coordinate sy stem to return the calcula-
tions. If FALSE, calculations are returned in the global coor-
dinate system
Output:
INT4 nNumSets Number of output sets returned
V ARIANT outsetIDs[0..nNumSets- 1] IDs of output sets returned
V ARIANT 
calculations[0..6*(nNumSets)-1]Calculated total summation v ectors Fx, Fy, Fz, Mx, My, Mz, 
for each output set returned in either the global or freebody 
coordinate system.
Error Codes:
FE_FAILFreebody summation has been calculated with potential 
errors (ie missing contributions of load, missing elements, 
etc.). The values may n eed to be verified.
FE_NOT_EXIST One or more of the sp ecified output sets do not exist
FE_INV ALID Freebody is not set to interface modeRemarks/Usage:This method only works when th e freebody is set to interface load  mode, otherwise FE_INV ALID is 
returned.
Example:None
 API-2486  GetNodalSums
5.26.2.10  GetNodalSums
GetNodalSums
( nSetID, nNumNodes, nNodeIDs, dVals )
Description:This method Returns values for su mmations calculated at nodes for a ll freebody nodes for one or more 
output sets.
Input:
INT4 nSetIDThe ID of a Set object containing a list of output sets. Alterna-
tively, specify a negative number to specify the ID of a single 
output set
Output:INT4 nNumNodes Number of nodes in freebodyINT4 nNodeIDs[0..nNumNodes-1] The IDs of the nodes
INT4 dVals[(0..(6*numElem)-1) 
*Number of Output Sets]Each node returns six values (Fx,  Fy, Fz, Mx, My, Mz), so the 
data in the array is stored as 6 * nNumNodeThis is repeated for each output set requested
Error Codes:
FE_NOT_EXISTOne or more of the specified ou tput sets does not exist in the 
database
FE_FAIL The current freebody contains no nodesRemarks/Usage:This method returns the values that  Femap calculates as a sum at a node, dependent on the selected com-
ponents and contributions. It does not return th e solver-calculated nodal imbalance at a node.
Example:None
GetSumAtNode   API-2487
5.26.2.11  GetSumAtNode
GetSumAtNode
( nNodeID, nSetID, dVals  )
Description:Returns the calculated summation at a sing le node for one or more output sets.
Input:INT4 nNodeID Node ID
INT4 nSetIDThe ID of a Set object containing a list of output sets. Alterna-
tively, specify a negative number to specify the ID of a single 
output set
Output:INT4 dVals[0..6*Number of Output 
Sets-1]Six values (Fx, Fy, Fz, Mx, My, Mz) for each output set
Error Codes:
FE_NOT_EXIST Specified node does not exist in the freebody
FE_FAILOne or more of the specified ou tput sets does not exist in the 
database
Remarks/Usage:This method returns the values that  Femap calculates as a sum at a node, dependent on the selected com-
ponents and contributions. It does not return th e solver-calculated nodal imbalance at a node.
Example:None
 API-2488  GetSectionCutSums
5.26.2.12  GetSectionCutSums
GetSectionCutSums
( nOutSetSetID, nCuts, pnNumCuts, pCutLocs, pSumLocs, pSums )
Description:Calculates the total summation fo r a freebody in section cut mode across one or more output sets
Input:
INT4 nOutSetSetIDThe ID of a Set that contains output set IDs to use for calculat-
ing total summation. Alternativ ely, if you specify a negative 
value, this is simply the ID of a single output set.
INT4 nCutsPositive value: number of equally spaced cuts to make
Negative value: ID of Along Coordinates Data Surface to use 
for locating section cuts. When  section cut (SectionMode) is 0 
(plane/normal), 1 (plane/vecto r) or 2 (vector), specify XYZ 
values in the coordinate system  specified for the total summa-
tion vector. When section cut is (SectionMode) is 3 (curve), 
specify a value between 0 and 1 representing the distance 
along the curve for the X value in the Data Surface.
Output:INT4 pnNumCuts Number of section cuts returnedREAL8 pCutLocs[0..3*Number of 
Output Sets-1]Section cut locations in coordina te system specified for total 
summation. Three values (X, Y , Z) for each section cut
REAL8 pSumLocs[0..3*Number of 
Output Sets-1]Total summation location in coor dinate system specified for 
total summation. Three values (X ,Y , Z) for each section cut
REAL8 pSums[0..6*Number of Out-
put Sets-1]Total summation for each section cut. Six values (Fx, Fy, Fz, 
Mx, My, Mz) for each section cut
Error Codes:FE_FAIL Unable to calculate section cut summationsFE_INV ALID Freebody is no t in section cut mode
FE_BAD_DATAData surface is specified and is not along coordinates, or data 
surface contains invalid data
Remarks/Usage:Only valid for use with fre ebodies in section cut mode
Example:None
SetLocationFromCoord   API-2489
5.26.2.13  SetLocationFromCoord
SetLocationFromCoord
( x, y, z, pLoc )
Description:Set the section cut location by specifying x, y, z coordinates
Input:REAL8 x
Coordinates in global rectangular coordinate system REAL8 y
REAL8 zOutput:REAL8 pLoc Calculated locationReturn Code:FE_FAIL Freebody is no t in section cut mode
FE_INV ALIDFreebody section cut is not defined by plane/normal, plane/vector or 
vector
Remarks/Usage:Only valid for use with freebody entities in section cut mode with sec tion cut (SectionMode) defined by 
plane/normal (0), plane/ve ctor (1), or vector (2).
Example:None
 API-2490  Show
5.26.2.14  Show
Show
( void )
Description:Highlights both the nodes an d elements of the freebody entity curre ntly loaded in th e Freebody Object
Input:NoneOutput:NoneReturn Code:FE_FAIL Unable to show entitiesRemarks/Usage:To insure a particular “Show Mode” and options are used for highlighting, set  any combination of the 
available Info_ViewShow... optio ns before calling this method.
Example:None
Show   API-2491
 API-2492  
5.27  Frequency Objects
Frequency objects correspond to lists of solutio n frequencies that are used in the frequency 
response analysis of NX NASTRAN. The lists  are input as FREQ, FREQ1, FREQ2, FREQ3, 
FREQ4 and FREQ5. They Frequency objects are derived from Entity objects, so in addition to the 
properties and methods described he re, all of the properties and me thods defined for Entity objects 
are also available for Frequency objects, see Section 5.1, "Common En tity Properties and Meth-
ods". These lists of solution frequencies can also be used by the Model, Output, Forced Response  
command.
Use the feFreq method of the FEMAP Applic ation object to create Frequency objects.
5.27.1  Frequency Object Properties
 Frequency input is always stored with a SetI D=1, and an ID automatically incremented from 1.
Property Description
INT4 typeThis must be FREQ, FREQ1, FREQ2, FREQ3, FREQ4 or 
FREQ5.
REAL8 F1 F1 in FREQ1-5 of NX NASTRANREAL8 F2 F2 in FREQ2-5 of NX NASTRANREAL8 DF DF in FREQ1 of NX NASTRANREAL8 FSPD FSPD in FREQ4 of NX NASTRANREAL8 CLUSTER CLUSTER in FREQ3
INT4 NFNDF in FREQ1, NF in FREQ2, NEF in FREQ3 or NFM in 
FREQ4
BOOL LOGLOG=TRUE sets TYPE=LOG in FREQ3, otherwise 
TYPE=LINEAR
INT4 NDF NDF in FREQ1 or Number of Increments.INT4 NEF NEF in FREQ3 or Number of Frequencies.
INT4 NFM NFM in FREQ4 or  Number of Frequencies.
AddFreq   API-2493
5.27.2  Frequency Object Methods
There following methods are available in addition to th e standard entity methods.
5.27.2.1  AddFreq
AddFreq
( NF, Fi, asetID, on )
Description:This method adds a FREQ  list of solution frequencies, with NF  frequency values stored in Fi. If 
on=TRUE, it means the FREQ list of so lution frequencies is used in the analysis set specified by asetID.
Input:INT4 NF The number of fre quency values in Fi
REAL8 Fi[0..NF-1] Frequency values (F1,F2,…) of FREQ
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ is used in the analy-
sis set specified by asetID.
Output:NoneReturn Code:FE_FAIL Unable to add FREQ Frequency object.Remarks/Usage:The ID of the newly added list of solution frequencies is the unused maximum ID counting from 0.Example:None
 API-2494  AddFreqByFuncID
5.27.2.2  AddFreqByFuncID
AddFreqByFuncID
( funcID, asetID, on )
Description:This method adds a FREQ list of solution frequencies, with the frequency values defined by a function 
specified by funcID. If on=TRUE, it means the FREQ input is used in the an alysis set specified by 
asetID.
Input:INT4 funcID The ID of the function
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ is used in the analy-
sis set specified by asetID.
Output:NoneReturn Code:FE_OK The current FREQ Frequency object is updated successfully.FE_FAIL Unable to add FREQ Frequency object.Remarks/Usage:The ID of the newly added list of solution frequencies is the unused maximum ID counting from 0. 
Refer to Section 5.28 , "Function Objects". 
In this usage, x values of the function is not relevant.
Example:None
UpdFreq   API-2495
5.27.2.3  UpdFreq
UpdFreq
( NF, Fi, asetID, on )
Description:This method updates the current list of solution frequencies to FREQ type, with NF frequency values 
stored in Fi. If on=TRUE, it means the FREQ input is  used in the analysis set specified by asetID.
Input:INT4 NF The number of fre quency values in Fi
REAL8 Fi[0..NF-1] Frequency values (F1,F2,…) of FREQ
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ is used in the analy-
sis set specified by asetID.
Output:NoneReturn Code:FE_FAIL Unable to update FREQ Frequency objectRemarks/Usage:The current list of solution frequencies is selected by the Get method of the Entity  object. It needs to call 
the Put method of the Entity object to update.
Example:None
 API-2496  UpdFreqByFuncID
5.27.2.4  UpdFreqByFuncID
UpdFreqByFuncID
( funcID, asetID, on )
Description:This method updates the current list of solution frequen cies to a FREQ  list of solution frequencies, with 
the frequency values defined by a function specified by funcID. If on=TRUE, it means the FREQ input 
is used in the analysis  set specified by asetID.
Input:INT4 NF The ID of the function
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ is used in the analy-
sis set specified by asetID.
Output:NoneReturn Code:FE_OK The current FREQ Frequency object is updated successfully.FE_FAIL Unable to add FREQ Frequency objectRemarks/Usage:The current list of solution frequenci es is selected by the Get() method  of the Entity object. It needs to 
call the Put() method of the Entity object to up date. Refer to Section 5.28, "Function Objects".
In this usage, x values of the function is not relevant. 
Example:None
AddFreq1   API-2497
5.27.2.5  AddFreq1
AddFreq1
( F1, DF, NDF, asetID, on )
Description:This method adds a FREQ1 list of solution frequen cies. If on=TRUE, it means the FREQ1 input is used 
in the analysis set specified by asetID.
Input:REAL8 F1 F1 in FREQ1 of NX NASTRANREAL8 DF DF in FREQ1 of NX NASTRANINT4 NDF NDF in FREQ1 of NX NASTRAN
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ1 is used in the anal-
ysis set specified by asetID.
Output:NoneReturn Code:FE_FAIL Unable to add FREQ1 Frequency object.Remarks/Usage:The ID of the newly added list of solution frequencies is the unused maximum ID counting from 0.Example:None
 API-2498  UpdFreq1
5.27.2.6  UpdFreq1
UpdFreq1
( F1, DF, NDF, asetID, on )
Description:This method updates the cu rrent list of solution frequencies to a FR EQ1  list of solution frequencies. If 
on=TRUE, it means the FREQ1 input is used in the analysis set specified by asetID.
Input:REAL8 F1 F1 in FREQ1 of NX NASTRANREAL8 DF DF in FREQ1 of NX NASTRANINT4 NDF NDF in FREQ1 of NX NASTRAN
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ1 is used in the anal-
ysis set specified by asetID.
Output:NoneReturn Code:FE_FAIL Unable to add FREQ1 Frequency object.Remarks/Usage:The current list of solution frequencies is selected by the Get method of the Entity  object. It needs to call 
the Put method of the Entity object to update.
Example:None
AddFreq2   API-2499
5.27.2.7  AddFreq2
AddFreq2
( F1, F2, NF, asetID, on )
Description:This method adds a FREQ2 list of solution frequen cies. If on=TRUE, it means the FREQ2 input is used 
in the analysis set specified by asetID.
Input:REAL8 F1 F1 in FREQ2 of NX NASTRANREAL8 F2 F2 in FREQ2 of NX NASTRANINT4 NF NF in FREQ2 of NX NASTRAN
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ2 is used in the anal-
ysis set specified by asetID.
Output:NoneReturn Code:FE_FAIL Unable to add FREQ2 Frequency object.Remarks/Usage:The ID of the newly added list of solution frequencies is the unused maximum ID counting from 0.Example:None
 API-2500  UpdFreq2
5.27.2.8  UpdFreq2
UpdFreq2
( F1, DF, NDF, asetID, on )
Description:This method updates the current list of solution frequencies to a FREQ2 list of solution frequencies. If 
on=TRUE, it means the FREQ2 input is used in the analysis set specified by asetID.
Input:REAL8 F1 F1 in FREQ2 of NX NASTRANREAL8 F2 F2 in FREQ2 of NX NASTRANINT4 NF NF in FREQ2 of NX NASTRAN
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ2 is used in the anal-
ysis set specified by asetID.
Output:NoneReturn Code:FE_FAIL Unable to add FREQ2 Frequency object.Remarks/Usage:The current list of solution frequencies is selected by the Get method of the Entity  object. It needs to call 
the Put method of the Entity object to update.
Example:None
AddFreq3   API-2501
5.27.2.9  AddFreq3
AddFreq3
( F1, F2, NEF, LOG, CLUSTER, asetID, on )
Description:This method adds a FREQ3 list of solution frequen cies. If on=TRUE, it means the FREQ3 input is used 
in the analysis set specified by asetID.
Input:REAL8 F1 F1 in FREQ3 of NX NASTRANREAL8 F2 F2 in FREQ3 of NX NASTRANINT4 NEF NEF in FREQ3 of NX NASTRAN
BOOL LOGIf LOG=TRUE, it sets TYPE=LOG in FREQ3. Otherwise it sets 
TYPE=LINEAR.
REAL8 CLUSTER CLUSTER in FREQ3 of NX NASTRAN
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ3 is used in the anal-
ysis set specified by asetID.
Output:NoneReturn Code:FE_FAIL Unable to add FREQ3 Frequency object.Remarks/Usage:The ID of the newly added list of solution frequencies is the unused maximum ID counting from 0.Example:None
 API-2502  UpdFreq3
5.27.2.10  UpdFreq3
UpdFreq3
( F1, F2, NEF, LOG, CLUSTER, asetID, on )
Description:This method updates the current list of solution frequencies to a FREQ3 list of solution frequencies. If 
on=TRUE, it means the FREQ3 input is used in the analysis set specified by asetID.
Input:REAL8 F1 F1 in FREQ3 of NX NASTRANREAL8 F2 F2 in FREQ3 of NX NASTRANINT4 NEF NEF in FREQ3 of NX NASTRAN
BOOL LOGIf LOG=TRUE, it sets TYPE=LOG in FREQ3. Otherwise it sets 
TYPE=LINEAR.
REAL8 CLUSTER CLUSTER in FREQ3 of NX NASTRAN
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ3 is used in the anal-
ysis set specified by asetID.
Output:NoneReturn Code:FE_FAIL Unable to add FREQ3 Frequency objectRemarks/Usage:The current list of solution frequencies is selected by the Get method of the Entity  object. It needs to call 
the Put method of the Entity object to update.
Example:None
AddFreq4   API-2503
5.27.2.11  AddFreq4
AddFreq4
( F1, F2, NFM, FPSD, asetID, on )
Description:This method adds a FREQ4 list of solution frequen cies. If on=TRUE, it means the FREQ4 input is used 
in the analysis set specified by asetID.
Input:REAL8 F1 F1 in FREQ4 of NX NASTRANREAL8 F2 F2 in FREQ4 of NX NASTRANINT4 NFM NFM in FREQ4 of NX NASTRANREAL8 FPSD FPSD in FREQ4 of NX NASTRAN
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ4 is used in the anal-
ysis set specified by asetID.
Output:NoneReturn Code:FE_FAIL Unable to add FREQ4 Frequency object.Remarks/Usage:The ID of the newly added list of solution frequencies is the unused maximum ID counting from 0.Example:None
 API-2504  UpdFreq4
5.27.2.12  UpdFreq4
UpdFreq4
( F1, F2, NFM, FPSD, asetID, on )
Description:This method updates the cu rrent list of solution frequencies to a FR EQ4  list of solution frequencies. If 
on=TRUE, it means the FREQ4 input is used in the analysis set specified by asetID.
Input:REAL8 F1 F1 in FREQ4 of NX NASTRANREAL8 F2 F2 in FREQ4 of NX NASTRANINT4 NFM NFM in FREQ4 of NX NASTRANREAL8 FPSD FPSD in FREQ3 of NX NASTRAN
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ4 is used in the anal-
ysis set specified by asetID.
Output:NoneReturn Code:FE_FAIL Unable to add FREQ4 Frequency object.Remarks/Usage:The current list of solution frequencies is selected by the Get method of the Entity  object. It needs to call 
the Put method of the Entity object to update.
Example:None
AddFreq5   API-2505
5.27.2.13  AddFreq5
AddFreq5
( F1, F2, NFR, FRi, asetID, on )
Description:This method adds a FREQ5 list of solution frequencies, with NFR frequ ency values stored in FRi. If 
on=TRUE, it means the FREQ5 input is used in the analysis set specified by asetID.
Input:REAL8 F1 F1 in FREQ5 of NX NASTRANREAL8 F2 F2 in FREQ5 of NX NASTRANINT4 NFR The number of fre quency values in FRi
REAL8 FRi[0..NFR-1] Frequency values (F1,F2,…) of FREQ5 in the range of F1 and F2
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ5 is used in the anal-
ysis set specified by asetID.
Output:NoneReturn Code:FE_FAIL Unable to add FREQ5 Frequency object.Remarks/Usage:The ID of the newly added list of solution frequencies is the unused maximum ID counting from 0.Example:None
 API-2506  AddFreq5ByFuncID
5.27.2.14  AddFreq5ByFuncID
AddFreq5ByFuncID
( F1, F2, funcID, asetID, on )
Description:This method adds a FREQ5 list of solution frequenci es, with the frequency values defined by a function 
specified by funcID. If on=TRUE, it means the FREQ5 input is used in the analysis set specified by 
asetID.
Input:REAL8 F1 F1 in FREQ5 of NX NASTRANREAL8 F2 F2 in FREQ5 of NX NASTRANINT4 funcID The ID of the function
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ5 is used in the anal-
ysis set specified by asetID.
Output:NoneReturn Code:FE_OK The current FREQ5 Frequency object is updated successfully.FE_FAIL Unable to add FREQ5 Frequency object.Remarks/Usage:The ID of the newly added list of solution frequencies is the unused maximum ID counting from 0. 
Refer to Section 5.28 , "Function Objects". 
In this usage, x values of the function is not relevant.
Example:None
UpdFreq5   API-2507
5.27.2.15  UpdFreq5
UpdFreq5
( F1, F2, NFR, FRi, asetID, on )
Description:This method updates the current list of solution frequencies to FREQ5 type, with NFR frequency values 
stored in FRi. If on=TRUE, it means the FREQ5 input is used in the analysis set specified by asetID.
Input:REAL8 F1 F1 in FREQ5 of NX NASTRANREAL8 F2 F2 in FREQ5 of NX NASTRANINT4 NFR The number of fre quency values in FRi
REAL8 FRi[0..NFR-1] Frequency values (F1,F2,…) of FREQ5 in the range of F1 and F2
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ5 is used in the anal-
ysis set specified by asetID.
Output:NoneReturn Code:FE_FAIL Unable to update FREQ5 Frequency objectRemarks/Usage:The current list of solution frequencies is selected by the Get method of the Entity  object. It needs to call 
the Put method of the Entity object to update.
Example:None
 API-2508  UpdFreq5ByFuncID
5.27.2.16  UpdFreq5ByFuncID
UpdFreq5ByFuncID
( F1, F2, funcID, asetID, on )
Description:This method updates the current list of solution frequencies to a FREQ5 list of solution frequencies, 
with the frequency values defined by a function sp ecified by funcID. If on=TRUE, it means the FREQ5 
input is used in the analysis set specified by asetID.
Input:REAL8 F1 F1 in FREQ5 of NX NASTRANREAL8 F2 F2 in FREQ5 of NX NASTRANINT4 funcID The ID of the function
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
BOOL onIf on=TRUE, it sets the flag that th e input FREQ5 is used in the anal-
ysis set specified by asetID.
Output:NoneReturn Code:FE_OK The current FREQ5 Frequency object is updated successfully.FE_FAIL Unable to add FREQ5 Frequency object.Remarks/Usage:The current list of solution frequencies is selected by the Get method of the Entity  object. It needs to call 
the Put method of the Entity object to updat e. Refer to Section 5. 28, "Function Objects".
In this usage, x values of the function is not relevant. 
Example:None
AllOn   API-2509
5.27.2.17  AllOn
AllOn
( asetID )
Description:This method sets the flag to True for all solution frequencies list(s) defi ned in the model, in the analysis 
set(s) specified by asetID.
Input:
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
Output:NoneReturn Code:FE_FAIL Unable to set flagsRemarks/Usage:Opposite operation to AllOffExample:None
 API-2510  AllOff
5.27.2.18  AllOff
AllOff
( asetID )
Description:This method sets the flag to False fo r all solution frequencies list(s) defi ned in the model, in the analysis 
set(s) specified by asetID.
Input:
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
Output:NoneReturn Code:FE_FAIL Unable to set flagsRemarks/Usage:Opposite operation to AllOnExample:None
TurnOn   API-2511
5.27.2.19  TurnOn
TurnOn
( asetID, freqID )
Description:This method sets the flag to True for the solution frequencies list(s ) specified by freqID, in the analysis 
set(s) specified by asetID.
Input:
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
INT4 freqIDThe ID of a set that contains IDs of lists of solution frequencies. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single list of solution frequenci es, while a value of 0 selects all 
available lists of solution frequenci es. Refer to Section 4.6, "Set 
Objects"
Output:NoneReturn Code:FE_FAIL Unable to set flagsRemarks/Usage:Opposite operation to TurnOffExample:None
 API-2512  TurnOff
5.27.2.20  TurnOff
TurnOff
( asetID, freqID )
Description:This method sets the flag to False for the solution fr equencies list(s) specified by freqID, in the analysis 
set(s) specified by asetID.
Input:
INT4 asetIDThe ID of a set that contains analysis set IDs. Alternatively, if you 
specify a negative value, this is simp ly the ID of the single analysis 
set, while a value of 0 indicates all an alysis sets. Refer to Section 4.6, 
"Set Objects"
INT4 freqIDThe ID of a set that contains IDs of lists of solution frequencies. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single list of solution frequenci es, while a value of 0 selects all 
available lists of solution frequenci es. Refer to Section 4.6, "Set 
Objects"
Output:NoneReturn Code:FE_FAIL Unable to set flagsRemarks/Usage:Opposite operation to TurnOnExample:None
GetFREQType   API-2513
5.27.2.21  GetFREQType
GetFREQType
( FREQ_Type)
Description:This method returns the FREQ type.Input:NoneOutput:
INT4 FREQ_TypeThe Freq type - FREQ, FREQ1,  FREQ2, FREQ3, FREQ4 or 
FREQ5.
Return Code:FE_FAIL Unable to get FREQ typeRemarks/Usage:This method simply retrieves the in formation about the Freq from the cu rrent object. You must first load 
that data by using the Get( ) method.
Example:None
 API-2514  GetFREQData
5.27.2.22  GetFREQData
GetFREQData
( NF, Fi, funcID)
Description:This method returns the FREQ data.Input:NoneOutput:NF The number of frequency values in Fi.Fi Frequency values (F1,F2,…) of FREQ.funcID The ID of the function.Return Code:FE_FAIL Unable to get FREQ typeRemarks/Usage:This method simply retrieves the in formation about the Freq from the cu rrent object. You must first load 
that data by using the Get( ) method.
Example:None
GetFREQ1Data   API-2515
5.27.2.23  GetFREQ1Data
GetFREQ1Data
( F1, DF, NDF)
Description:This method returns the FREQ1 data.Input:NoneOutput:REAL8 F1 Value of First Frequency (F1)INT4 DF Value of Frequency Increment (DF)INT4 NDF Value of Number of Increments (NDF)Return Code:FE_FAIL Unable to get FREQ type.Remarks/Usage:This method simply retrieves the in formation about the Freq from the cu rrent object. You must first load 
that data by using the Get( ) method.
Example:None
 API-2516  GetFREQ2Data
5.27.2.24  GetFREQ2Data
GetFREQ2Data
( F1, F2, NF)
Description:This method returns the FREQ2 data.Input:NoneOutput:REAL8 F1 Value of First Frequency (F1)REAL8 F2 Value of Last Frequency (F2)INT4 NF Value for the Numb er of Log Interval (NF)
Return Code:FE_FAIL Unable to get FREQ type.Remarks/Usage:This method simply retrieves the in formation about the Freq from the cu rrent object. You must first load 
that data by using the Get( ) method.
Example:None
GetFREQ3Data   API-2517
5.27.2.25  GetFREQ3Data
GetFREQ3Data
( F1, F2, NEF, LOG, CLUSTER)
Description:This method returns the FREQ3 data.Input:NoneOutput:REAL8 F1 Value of First Frequency (F1)REAL8 F2 Value of Last Frequency (F2)INT4 NEF Value of Number of Frequencies (NEF)BOOL LOG If True, Logarithmic option is checkedREAL8 CLUSTER Value of ClusterReturn Code:FE_FAIL Unable to get FREQ type.Remarks/Usage:This method simply retrieves the in formation about the Freq from the cu rrent object. You must first load 
that data by using the Get( ) method.
Example:None
 API-2518  GetFREQ4Data
5.27.2.26  GetFREQ4Data
GetFREQ4Data
( F1, F2, NFM, FPSD)
Description:This method returns the FREQ4 data.Input:NoneOutput:REAL8 F1 Value of First Frequency (F1)REAL8 F2 Value of Last Frequency (F2)INT4 NFM Value of Number of Frequencies (NFM)REAL8 FPSD Value of Spread (FSPD, +/- %)Return Code:FE_FAIL Unable to get FREQ type.Remarks/Usage:This method simply retrieves the in formation about the Freq from the cu rrent object. You must first load 
that data by using the Get( ) method.
Example:None
GetFREQ5Data   API-2519
5.27.2.27  GetFREQ5Data
GetFREQ5Data
( F1, F2, NFR, FRi, funcID )
Description:This method returns the FREQ5 data.Input:NoneOutput:REAL8 F1 Value of First Frequency (F1)REAL8 F2 Value of Last Frequency (F2)INT4 NFR Value of Number of Frequencies (NFR)REAL8 FRi[0..NFR-1] Frequency values (F1,F2,…) of FREQ5 in the range of F1 and F2.INT4 funcID ID of FEMAP function specified in Function ID drop-downReturn Code:FE_FAIL Unable to get FREQ type.Remarks/Usage:This method simply retrieves the in formation about the Freq from the cu rrent object. You must first load 
that data by using the Get( ) method.
Example:None
 API-2520  SetFREQData
5.27.2.28  SetFREQData
SetFREQData
( NF, Fi, funcID)
Description:This method sets  the FREQ data.
Input:NF The number of frequency values in Fi.Fi Frequency values (F1,F2,…) of FREQ.funcID The ID of the function.Output:NoneReturn Code:FE_FAIL Unable to set FREQ.Remarks/Usage:This method does not store that in formation to the model database. Af ter using this function, you must 
call Put() if you want to stor e the lists in the database.
Example:None
SetFREQ1Data   API-2521
5.27.2.29  SetFREQ1Data
SetFREQ1Data
( F1, DF, NDF)
Description:This method sets  the FREQ1 data.
Input:REAL8 F1 Value of First Frequency (F1)INT4 DF Value of Frequency Increment (DF)INT4 NDF Value of Number of Increments (NDF)Output:NoneReturn Code:FE_FAIL Unable to set FREQ 1.Remarks/Usage:This method does not store that in formation to the model database. Af ter using this function, you must 
call Put() if you want to stor e the lists in the database.
Example:None
 API-2522  SetFREQ2Data
5.27.2.30  SetFREQ2Data
SetFREQ2Data
( F1, F2, NF)
Description:This method sets  the FREQ2 data.
Input:REAL8 F1 Value of First Frequency (F1)REAL8 F2 Value of Last Frequency (F2)INT4 NF Value for the Numb er of Log Interval (NF)
Output:None.Return Code:FE_FAIL Unable to set FREQ2. Remarks/Usage:This method does not store that in formation to the model database. Af ter using this function, you must 
call Put() if you want to stor e the lists in the database.
Example:None
GetFREQ3Data   API-2523
5.27.2.31  SetFREQ3Data
GetFREQ3Data
( F1, F2, NEF, LOG, CLUSTER)
Description:This method sets  the FREQ3 data.
Input:REAL8 F1 Value of First Frequency (F1)REAL8 F2 Value of Last Frequency (F2)INT4 NEF Value of Number of Frequencies (NEF)BOOL LOG If True, checks Logarithmic optionREAL8 CLUSTER Value of ClusterOutput:None.Return Code:FE_FAIL Unable to set FREQ3.Remarks/Usage:This method does not store that in formation to the model database. Af ter using this function, you must 
call Put() if you want to stor e the lists in the database.
Example:None
 API-2524  SetFREQ4Data
5.27.2.32  SetFREQ4Data
SetFREQ4Data
( F1, F2, NFM, FPSD)
Description:This method sets  the FREQ4 data.
Input:REAL8 F1 Value of First Frequency (F1)REAL8 F2 Value of Last Frequency (F2)INT4 NFM Value of Number of Frequencies (NFM)REAL8 FPSD Value of Spread (FSPD, +/- %)Output:None.Return Code:FE_FAIL Unable to set FREQ4.Remarks/Usage:This method does not store that in formation to the model database. Af ter using this function, you must 
call Put() if you want to stor e the lists in the database.
Example:None
SetFREQ5Data   API-2525
5.27.2.33  SetFREQ5Data
SetFREQ5Data
(  F1, F2, NFR, FRi, funcID )
Description:This method sets  the FREQ5 data.
Input:REAL8 F1 Value of First Frequency (F1)REAL8 F2 Value of Last Frequency (F2)INT4 NFR Value of Number of Frequencies (NFR)REAL8 FRi[0..NFR-1] Frequency values (F1,F2,…) of FREQ5 in the range of F1 and F2.INT4 funcID ID of FEMAP function specified in Function ID drop-downOutput:None.Return Code:FE_FAIL Unable to set FREQ5.Remarks/Usage:This method does not store that in formation to the model database. Af ter using this function, you must 
call Put() if you want to stor e the lists in the database.
Example:None
 API-2526  
5.28  Function Objects
Function objects correspond to the functions in yo ur model. They are derived from Entity objects, 
so, in addition to the properties and methods described here, all of the properties and methods 
defined for Entity objects are also available for Fu nction objects. For more  information, see Sec-
tion 5.1, "Common Entity Properties and Methods". 
Use the feFunction method of the FEMAP Appl ication object to create Function objects.
5.28.1  Function Object Properties
Functions are always stored with a SetID= 1, and the ID equal to the function ID.
Property Description
STRING title The function title (maximum 79 characters).
INT4 typeType of function: 0=Dimensionless, 1=vs. Time, 2=vs. Temp, 
3=vs. Freq, 4=vs. Stress, 5=Func  vs. Temp, 6=Struct Damp vs. 
Freq, 7=Crit Damp vs. Freq, 8=Q Damp vs. Freq, 9=vs. Strain 
Rate, 10=Func vs. Strain Rate, 11=vs. Curve Length, 12=vs. 
Curve Param, 13=Stress vs. Strain, 14=Stress vs. Plastic Strain, 15=Function vs Value, 16=Fu nction vs. Critical Damping, 
17=vs. Angle of Incidence, 18 =vs. Direction of Incidence, 
19=vs. Temp (TABLEM1 Linear,Linear), 20=vs. Temp 
(TABLEM1 Log,Linear), 21 =vs. Temp (TABLEM1 Lin-
ear,Log), 22=vs. Temp (TABLEM1 Log,Log), 23=vs. Mode, 
24=Displacement vs. Freq, 25=Rotation vs. Frequency, 
26=Velocity vs. Freq, 27=Angular Vel vs. Freq, 28=Accelera-tion vs. Freq, 29=Angular Acc vs. Freq, 30=Force vs. Freq, 
31=Moment vs. Freq, 32=Stress vs. Freq, 33=Strain vs.Freq, 
34=Mach Number vs. Freq, 35=vs. Aerodynamic Factor, 36=Acceleration vs. Location
GetFunctionList   API-2527
5.28.2  Function Object Methods
There following methods are available in addition to th e standard entity methods.
5.28.2.1  GetFunctionList
GetFunctionList
(  listcount, x, y )
Description:This method retrieves f unction pair information.
Input:NoneOutput:INT4 listcount The number of en tries in the other arrays.
REAL8 x[0..N]
The x and y values for the function..
REAL8 y[0..N]
Return Code:FE_NOT_EXIST There are no entries in the list.Remarks/Usage:This method simply retrieves the information about the function pairs from the current object. You must 
first load that data - either using the Get( ) method , or by loading it yourself with PutFunctionList( ). 
Data retrieved from the database  using Get, will always be in order of ascending X values.
Example:None
 API-2528  PutFunctionList
5.28.2.2  PutFunctionList
PutFunctionList
(  listcount, x, y )
Description:This method saves func tion pair information.
Input:INT4 listcount The number of en tries in the other arrays.
REAL8 x[0..N]
The x and y values for the function.
REAL8 y[0..N]
Output:Return Code:NoneRemarks/Usage:This method stores informa tion into the list of the current object. Any previous list information in that 
object is lost. This method does not store that info rmation to the model databa se. After using this func-
tion, you must call Put( ) if you want to store the upda ted list in the database. Data to be stored in the 
database will be sorted into  order of increasing x values. It is not required, howeve r, Put performance 
will be improved if you provide the x,y pairs in sorted order.
Example:None
GetValue   API-2529
5.28.2.3  GetValue
GetValue
(  nMethod, x, y )
Description:This method evaluates the function to find a y value given an x value.Input:
INT4 nMethodThe method to be used  to find the y value.
0=Before (return the y value of the function at the x value before the 
specified “x”)
1=After (return the y value of the function at the xvalue after the 
specified “x” )
2=Closest (return the y value of the function at the x value closest to 
the specified “x”)3=Interpolate, Linear-Linear (return the y value at the specified "x" 
location by linearly in terpolating the function x values and the func-
tion y values).4=Interpolate, Log-Log (return the y value at the specified "x" loca-
tion by linearly interpolating the lo g of the function x values and the 
log of the func tion y values).
5=Interpolate, Linear-Log (return the y value at the specified "x" location by linearly in terpolating the function x values and the log of 
the function y values).
6=Interpolate, Log-Linear (return the y value at the specified "x" 
location by linearly in terpolating the log of the function x values and 
the function y values).
REAL8 x The location where the function is evaluated
Output:REAL8 y The function value at the specified x locationReturn Code:
FE_NOT_A V AILABLEIf you use nMethod=0 then x must be above the lowest x value in the 
function, or for nMethod=1 x must be below the highest x value, or else the function can not be evaluated with this method.
FE_FAILEvaluation failed. Probably because in sufficient (or no) points have 
been defined in the function.
Remarks/Usage:The Closest method returns one of the endpoints of the function if you specify an  x value that is outside 
the defined range of the function. The Interpolate method uses the first/last two po ints in the function 
and linearly extrapolates to find values beyond the de fined range of the function.  If you attempt to inter-
polate on a function with only on e defined value, you will simply get that value for every location.
 API-2530  
5.29  GFXArrow Objects
GFXArrow objects correspond to user-creatable grap hics arrows in your model. They are derived 
from Entity objects so, in addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are also available for no des. For more information, see 
Section 5.1, "Common Entity  Properties and Methods".
Simply creating user-graphics objects will not make them visible in your model. You must also 
use the methods described in Section 3.17, "User Gr aphics Methods", to select the data/set to dis-
play and the views where you want to display your graphics. 
Use the feGFXArrow method of the FEMAP Appl ication object to create GFXArrow objects.
5.29.1  GFXArrow Object Properties
User graphics data can be stored in any Set, but only one set can be selected for display at a time.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
REAL8 x
These are the coordinates of th e end of an arrow. They are 
always specified in global  rectangular coordinates.REAL8 y
REAL8 zREAL8 dx
These are the direction components of the arrow. They are 
always specified in global  rectangular coordinates.REAL8 dy
REAL8 dzREAL8 length The length of the arrow
REAL8 lengthmode0=Absolute (length is a fixed size in model units), 1=Scaled 
(length is scaled to view vector size)
INT4 layer The ID of the laye r associated with the arrow.
INT4 color The arrow color.
INT4 styleThe arrow/arrowhead style (0=Line, 1=Solid, 2=Double-
headed line, 3=Double-heade d Solid, 4=Reversed Double-
headed line, 5=Reversed  Double-headed Solid)
REAL8 xyz[0..3]
or
V ARIANT vxyzAccesses the coordinates of the end of an arrow as an array or 
Variant.
REAL8 dxyz[0..3]
or
V ARIANT vdxyzAccesses the direction components of the end of an arrow as an 
array or Variant.
REAL8 locationControls location of arrowhead. 0.0=base of arrow at “end of 
arrow” location, 1.0=tip of arrow at “end of arrow”. Must be set 
and Put after using PutAll, Pu tAllArray, or PutCoordArray.
PutAll   API-2531
5.29.2  GFXArrow Object Methods
5.29.2.1  PutAll
PutAll
( entID, x, y, z, dx, dy, dz, length, lengthmode, layer, color, style )
Description:This method stores an entit y with the specified ID.
Input:INT4 entID The ID of the entity to store.REAL8 x
Refer to the property descrip tions for each of these items. REAL8 y
REAL8 z
REAL8 dx
REAL8 dyREAL8 dzREAL8 lengthINT4 lengthmodeINT4 layerINT4 colorINT4 styleOutput:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:Unlike the standard Put method, th is function loads all of the properties as arguments. If you are updat-
ing all of the properties before stor ing an entity, this function will be f aster than multiple  calls to load 
each property individually.
If attempting to use the “location” property of the GFXArrow object in conjunc tion with PutAll, it must 
be done afterwards by setting the “loc ation” value, then using Put again.
Example:None
 API-2532  PutAllArray
5.29.2.2  PutAllArray
PutAllArray
( numAr, entID, xyz, dxyz, length, lengthmode, layer, color, style )
Description:This method stores multiple GFXArro w entities with the specified data.
Input:
INT4 numArThe number of GFXArrows to create (i.e. the number of entries in 
the arrays)
INT4 entID[0..numAr-1] The ID s of the GFXArrows to store.
REAL8 xyz[0..(3*numar)-1]
Refer to the property d escriptions for each of these items. xyz is an 
array of the entity coordinates. In the array, there must be 3 entries 
for a entity, followed by the 3 for the next entity, ... .The dxyz array is 
stored similarly. The other arrays have just one entry per arrow. All 
must be in global rectangular coordinates.REAL8 dxyz[0..(3*numar)-1]
REAL8 length[0..numAr-1]INT4 lengthmode[0..numAr-1]INT4 layer[0..numAr-1]INT4 color[0..numAr-1]INT4 style[0..numAr-1]Output:NoneReturn Code:
FE_FAILUnable to store the entity with th e specified ID. Probably unable to 
allocate memory for all of the arrays.
Remarks/Usage:This is the fastest “Put” method if you have a large number of items to create, but still need full control 
over all options. All data can be accumulated in arrays and then transferred in one call.
If attempting to use the “location” property of the GFXArrow object in conjunction with PutAllArray, it 
must be done afterwards by using Ge t for each individual arrow, setting the “location” value, then using 
Put again for each arrow.
Example:None
PutCoordArray   API-2533
5.29.2.3  PutCoordArray
PutCoordArray
( numAr, xyz, dxyz, length, lengthmode, layer, color, style )
Description:This is a simpler version of PutAllArray th at allows multiple entities to be stored.
Input:
INT4 numArThe number of GFXArrows to create (i.e. the number of entries in 
the arrays)
REAL8 xyz[0..(3*numar)-1]
Refer to the property d escriptions for each of these items. xyz is an 
array of the entity coordinates. In the array, there must be 3 entries 
for a entity, followed by the 3 for the next entity, ... .The dxyz array is 
stored similarly. The other arrays have just one entry per arrow. All 
must be in global rectangular coordinates.REAL8 dxyz[0..(3*numar)-1]
REAL8 length[0..numAr-1]INT4 lengthmodeINT4 layerINT4 colorINT4 styleOutput:NoneReturn Code:
FE_FAILUnable to store the entity with th e specified ID. Probably unable to 
allocate memory for all of the arrays.
Remarks/Usage:This method is even faster than  PutAllArray, and requires less memo ry, it does not however give you 
full control. Entities are simply stored in the next available ID, and the same la yer, color... are used for 
every entity - only the coordi nates are input as an array.
If attempting to use the “location” property of the GFXArrow object in conjunction with PutCoordAr-
ray, it must be done afterwards by using Get for each individual arrow, setting th e “location” value, then 
using Put again for each arrow.
Example:None
 API-2534  DeleteAll
5.29.2.4  DeleteAll
DeleteAll
( bAllSets, nSetID )
Description:Deletes all GFXArrows in one or more setsInput:
BOOL bAllSetsIf True, all entities, in all sets are de leted. If False, then all entities in 
Set nSetID are deleted
INT4 nSetID The setID to delete if bAllSets=FalseOutput:NoneReturn Code:FE_FAIL Unable to delete entitiesRemarks/Usage:NoneExample:None
   API-2535
5.30  GFXLine Objects
GFXLine objects correspond to user-creatable grap hics lines in your model. They are derived from 
Entity objects so, in addition to the properties and methods described here, all of the properties and 
methods defined for Entity objects are also availa ble for nodes. For more information, see Section 
5.1, "Common Entity Pr operties and Methods".
Simply creating user-graphics objects will not make them visible in your model. You must also 
use the methods described in Section 3.17, "User Gr aphics Methods", to select the data/set to dis-
play and the views where you want to display your graphics. 
Use the feGFXLine method of the FEMAP App lication object to create GFXLine objects.
5.30.1  GFXLine Object Properties
User graphics data can be stored in any Set, bu t only one set can be selected for display at any 
time.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
REAL8 x1
These are the coordinates of the first end of a line. They are 
always specified in global  rectangular coordinates.REAL8 y1
REAL8 z1REAL8 x2
These are the coordinates of the second end of a line. They are 
always specified in global  rectangular coordinates.REAL8 y2
REAL8 z2INT4 layer The ID of the la yer associated with the line.
INT4 color The line color.REAL8 xyz[0..5]
or
V ARIANT vxyzAccesses the coordinates of a line as an array or Variant. End 1 
is store first, followed by end 2.
 API-2536  PutAll
5.30.2  GFXLine Object Methods
5.30.2.1  PutAll
PutAll
( entID,  x1, y1, z1, x2, y2, z2, layer, color )
Description:This method stores an entit y with the specified ID.
Input:INT4 entID The ID of the entity to store.REAL8 x1
Refer to the property descrip tions for each of these items. REAL8 y1
REAL8 z1
REAL8 x2
REAL8 y2REAL8 z2INT4 layerINT4 colorOutput:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:Unlike the standard Put method, th is function loads all of the properties as arguments. If you are updat-
ing all of the properties before stor ing an entity, this function will be f aster than multiple  calls to load 
each property individually.
Example:None
PutAllArray   API-2537
5.30.2.2  PutAllArray
PutAllArray
( numLn, entID, xyz, layer, color )
Description:This method stores multiple GFXLin e entities with the specified data.
Input:
INT4 numLnThe number of GFXLines to create (i .e. the number of entries in the 
arrays)
INT4 entID[0..numLn-1] The IDs of the GFXLines to store.REAL8 xyz[0..(2*3*numLn)-1] Refer to the property d escriptions for each of these items. xyz is an 
array of the entity coordinates. In the array, there must be 6 entries 
for a entity (3 for the first end then  3 for the second end), followed by 
the 6 for the next entity, ... . All mu st be in global rectangular coordi-
nates.INT4 layer[0..numLn-1]
INT4 color[0..numLn-1]
Output:
NoneReturn Code:
FE_FAILUnable to store the entity with th e specified ID. Probably unable to 
allocate memory for all of the arrays.
Remarks/Usage:This is the fastest “Put” method if you have a large number of items to create, but still need full control 
over all options. All data can be accumulated in arrays and then transferred in one call.
Example:None
 API-2538  PutCoordArray
5.30.2.3  PutCoordArray
PutCoordArray
( numLn, xyz, layer, color )
Description:This is a simpler version of PutAllArray th at allows multiple entities to be stored.
Input:
INT4 numLnThe number of GFXLines to create (i .e. the number of entries in the 
arrays)
REAL8 xyz[0..(2*3*numLn)-1] Refer to the property d escriptions for each of these items. xyz is an 
array of the entity coordinates. In the array, there must be 6 entries 
for a entity (3 for the first end then  3 for the second end), followed by 
the 6 for the next entity, ... . All mu st be in global rectangular coordi-
nates.INT4 layer
INT4 colorOutput:
None
Return Code:
FE_FAILUnable to store the entity with th e specified ID. Probably unable to 
allocate memory for all of the arrays.
Remarks/Usage:This method is even faster than  PutAllArray, and requires less memo ry, it does not however give you 
full control. Entities are simply stored in the next available ID, and the same la yer, color... are used for 
every entity - only the coordi nates are input as an array.
Example:None
DeleteAll   API-2539
5.30.2.4  DeleteAll
DeleteAll
( bAllSets, nSetID )
Description:Deletes all GFXLines in one or more setsInput:
BOOL bAllSetsIf True, all entities, in all sets are de leted. If False, then all entities in 
Set nSetID are deleted
INT4 nSetID The setID to delete if bAllSets=FalseOutput:NoneReturn Code:FE_FAIL Unable to delete entitiesRemarks/Usage:NoneExample:None
 API-2540  
5.31  GFXPoint Objects
GFXPoint objects correspond to user-creatable gr aphics points in your model. They are derived 
from Entity objects so, in addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are also available for no des. For more information, see 
Section 5.1, "Common Entity  Properties and Methods".
Simply creating user-graphics objects will not make them visible in your model. You must also 
use the methods described in Section 3.17, "User Gr aphics Methods", to select the data/set to dis-
play and the views where you want to display your graphics. 
Use the feGFXPoint method of the FEMAP App lication object to create GFXPoint objects.
5.31.1  GFXPoint Object Properties
User graphics data can be stored in any Set, bu t only one set can be selected for display at any 
time.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
REAL8 x
These are the coordinates of the point. They are always speci-
fied in global rectangular coordinates.REAL8 y
REAL8 zINT4 layer The ID of the laye r associated with the point.
INT4 color The point color.
INT4 symbolThe symbol to be used to displa y the point. (0=Point, 1=Square, 
2=Filled Square, 3=Diamond, 4= X, 5=Triangle, 6=Small Trian-
gle, 7=Cross, 8=Circle, 9=Filled Circle, 10=Blank)
REAL8 xyz[0..3]
or
V ARIANT vxyzAccesses all three coordinates of a point as an array or Variant. 
Same as using x, y, and z independently
PutAll   API-2541
5.31.2  GFXPoint Object Methods
5.31.2.1  PutAll
PutAll
( entID,  x, y, z, layer, color, symbol )
Description:This method stores an entit y with the specified ID.
Input:INT4 entID The ID of the entity to store.REAL8 x
Refer to the property descrip tions for each of these items. REAL8 y
REAL8 z
INT4 layer
INT4 colorINT4 symbolOutput:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:Unlike the standard Put method, th is function loads all of the properties as arguments. If you are updat-
ing all of the properties before stor ing an entity, this function will be f aster than multiple  calls to load 
each property individually.
Example:None
 API-2542  PutAllArray
5.31.2.2  PutAllArray
PutAllArray
( numPoint, entID,  xyz, layer, color, symbol )
Description:This method stores multiple GFXPoint  entities with the specified data.
Input:
INT4 numPointThe number of GFXPoints to create (i .e. the number of entries in the 
arrays)
INT4 entID[0..numPoint-1] The ID s of the GFXPoints to store.
REAL8 xyz[0..(3*numPoint)-
1]Refer to the property d escriptions for each of these items. xyz is an 
array of the entity coordinates. In the array, there must be 3 entries 
for a entity, followed by the 3 for th e next entity, ... . All must be in 
global rectangular coordinates.INT4 layer[0..numPoint-1]
INT4 color[0..numPoint-1]
INT4 symbol[0..numPoint-1]Output:NoneReturn Code:
FE_FAILUnable to store the entity with th e specified ID. Probably unable to 
allocate memory for all of the arrays.
Remarks/Usage:This is the fastest “Put” method if you have a large number of items to create, but still need full control 
over all options. All data can be accumulated in arrays and then transferred in one call.
Example:None
PutCoordArray   API-2543
5.31.2.3  PutCoordArray
PutCoordArray
( numPt, xyz, layer, color, symbol )
Description:This is a simpler version of PutAllArray th at allows multiple entities to be stored.
Input:
INT4 numPointThe number of GFXPoints to create (i .e. the number of entries in the 
arrays)
REAL8 xyz[0..(3*numPoint)-
1]Refer to the property d escriptions for each of these items. xyz is an 
array of the entity coordinates. In the array, there must be 3 entries 
for a entity, followed by the 3 for th e next entity, ... . All must be in 
global rectangular coordinates.INT4 layer
INT4 color
INT4 symbol
Output:NoneReturn Code:
FE_FAILUnable to store the entity with th e specified ID. Probably unable to 
allocate memory for all of the arrays.
Remarks/Usage:This method is even faster than  PutAllArray, and requires less memo ry, it does not however give you 
full control. Entities are simply stored in the next available ID, and the same la yer, color... are used for 
every entity - only the coordi nates are input as an array.
Example:None
 API-2544  DeleteAll
5.31.2.4  DeleteAll
DeleteAll
( bAllSets, nSetID )
Description:Deletes all GFXPoints in one or more setsInput:
BOOL bAllSetsIf True, all entities, in all sets are de leted. If False, then all entities in 
Set nSetID are deleted
INT4 nSetID The setID to delete if bAllSets=FalseOutput:NoneReturn Code:FE_FAIL Unable to delete entitiesRemarks/Usage:NoneExample:None
   API-2545
5.32  GFXQuad4 Objects
GFXQuad4 objects correspond to user-creatable grap hics quads in your model. They are derived 
from Entity objects so, in addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are also available for no des. For more information, see 
Section 5.1, "Common Entity  Properties and Methods".
Simply creating user-graphics objects will not make them visible in your model. You must also 
use the methods described in Section 3.17, "User Gr aphics Methods", to select the data/set to dis-
play and the views where you want to display your graphics. 
Use the feGFXQuad4 method of the FEMAP App lication object to create GFXQuad4 objects.
5.32.1  GFXQuad4 Object Properties
User graphics data can be stored in any Set, bu t only one set can be selected for display at any 
time.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
REAL8 xyz[0..11]
or
V ARIANT vxyzThe coordinates of the corners of a quad. Values are stored in 
the order (x1,y1,z1,x2,y2,z2,...) . All values are specified in 
global rectangular coordinates.
REAL8 normal[0..11]
or
V ARIANT vnormalThe components of the normal ve ctor to the quad at each cor-
ner. Stored in thes same order as the coordinates. These values 
are used for smooth shading an d are only used if autonor-
mal=False. All values are specified in global rectangular coor-dinates.
INT4 layer The ID of the la yer associated with the quad.
INT4 fillcolor The color used to fill the interior of the quad.
INT4 edgecolor The color used for the edge lines of the quad.
INT4 edgeflagsAny combination of the followi ng (0=No Edges, 0x0F=All 
Edges Shown, 0x01=Edge 1 On, 0x02=Edge 2 On, 0x04=Edge 
3 On, 0x08=Edge 4 On - for quads). These are used to control which edges of the quad are draw n. By turning off edges, multi-
ple quads (and quads) can be comb ined to appear as one larger 
shape. 
BOOL autonormalIf True, a single normal is comp uted for the quad and used for 
shading. If False, you must su pply normals in the “normal” 
property for shading.
 API-2546  PutAll
5.32.2  GFXQuad4 Object Methods
5.32.2.1  PutAll
PutAll
( entID, xyz, edgeflags, normal, autonormal, layer, fillcolor, edgecolor )
Description:This method stores an entit y with the specified ID.
Input:INT4 entID The ID of the entity to store.REAL8 xyz[0..11]
Refer to the property descrip tions for each of these items. INT4 edgeflags
REAL8 normal[0..11]
BOOL autonormal
INT4 layerINT4 fillcolorINT4 edgecolorOutput:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:Unlike the standard Put method, th is function loads all of the properties as arguments. If you are updat-
ing all of the properties before stor ing an entity, this function will be f aster than multiple  calls to load 
each property individually.
Example:None
PutAllArray   API-2547
5.32.2.2  PutAllArray
PutAllArray
( numQuad, entID, xyz, edgeflags, normal, autonormal, layer, fillcolor, edgecolor )
Description:This method stores multip le GFXQuad4 entities with  the specified data.
Input:
INT4 numQuadThe number of GFXQuad4s to create (i.e. the number of entries in 
the arrays)
INT4 entID[0..numQuad-1] The IDs of the GFXQuad4s to store.REAL8 xyz[0..(4*3*num-
Quad)-1]
Refer to the property d escriptions for each of these items. xyz is an 
array of the entity coordinates. In the array, there must be 12 entries 
for a entity (3 for the first corner, 3 for the 2nd, ...), followed by the 
12 for the next entity, ... . The normal array is stored similarly, but contains the components of the normal vectors. All other arrays con-
tain one entry per quad. All must be in global rectangular coordi-
nates.INT4 edgeflags[0..numQuad-1]
REAL8 normal [0..(4*3*num-
Quad)-1]
BOOL autonormal[0..num-
Quad-1]
INT4 layer[0..numQuad-1]INT4 fillcolor[0..numQuad-1]INT4 edgecolor[0..numQuad-1]Output:NoneReturn Code:
FE_FAILUnable to store the entity with th e specified ID. Probably unable to 
allocate memory for all of the arrays.
Remarks/Usage:This is the fastest “Put” method if you have a large number of items to create, but still need full control 
over all options. All data can be accumulated in arrays and then transferred in one call.
Example:None
 API-2548  PutCoordNormalArray
5.32.2.3  PutCoordNormalArray
PutCoordNormalArray
( numQuad, xyz, edgeflags, normal, autonormal, layer, fillcolor, edgecolor )
Description:This is a simpler version of PutAll Array that allows multiple entities to  be stored, and still allows you to 
specify the quad normal vectors.
Input:
INT4 numQuadThe number of GFXQuad4s to create (i.e. the number of entries in 
the arrays)
REAL8 xyz[0..(4*3*num-
Quad)-1]
Refer to the property d escriptions for each of these items. xyz is an 
array of the entity coordinates. In the array, there must be 12 entries 
for a entity (3 for the first corner, 3 for the 2nd, ...), followed by the 
12 for the next entity, ... . The normal array is stored similarly, but contains the components of the normal vectors. All other arrays con-
tain one entry per quad. All must be in global rectangular coordi-
nates.INT4 edgeflags[0..numQuad-1]
REAL8 normal [0..(4*3*num-
Quad)-1]
BOOL autonormalINT4 layerINT4 fillcolorINT4 edgecolorOutput:NoneReturn Code:
FE_FAILUnable to store the entity with th e specified ID. Probably unable to 
allocate memory for all of the arrays.
Remarks/Usage:This method is even faster than  PutAllArray, and requires less memo ry, it does not however give you 
full control. Entities are simply stored in the next available ID, and the same la yer, color... are used for 
every entity - only the coordinates, ed geflags and normals are input as arrays.
Example:None
PutCoordArray   API-2549
5.32.2.4  PutCoordArray
PutCoordArray
( numQuad, xyz, layer, fillcolor, edgecolor )
Description:This is a simpler version of PutAllArray th at allows multiple entities to be stored.
Input:
INT4 numQuadThe number of GFXQuad4s to create (i.e. the number of entries in 
the arrays)
REAL8 xyz[0..(4*3*num-
Quad)-1] Refer to the property d escriptions for each of these items. xyz is an 
array of the entity coordinates. In the array, there must be 12 entries 
for a entity (3 for the first corner, 3 for the 2nd, ...), followed by the 
12 for the next entity, ... . All must  be in global rectangular coordi-
nates.INT4 layer
INT4 fillcolor
INT4 edgecolor
Output:NoneReturn Code:
FE_FAILUnable to store the entity with th e specified ID. Probably unable to 
allocate memory for all of the arrays.
Remarks/Usage:This method is even faster than  PutAllArray, and requires less memo ry, it does not however give you 
full control. Entities are simply stored in the next available ID, and the same la yer, color... are used for 
every entity - only the coordi nates are input as an array.
Example:None
 API-2550  DeleteAll
5.32.2.5  DeleteAll
DeleteAll
( bAllSets, nSetID )
Description:Deletes all GFXQuad4s in one or more setsInput:
BOOL bAllSetsIf True, all entities, in all sets are de leted. If False, then all entities in 
Set nSetID are deleted
INT4 nSetID The setID to delete if bAllSets=FalseOutput:NoneReturn Code:FE_FAIL Unable to delete entitiesRemarks/Usage:NoneExample:None
   API-2551
5.33  GFXTria3 Objects
GFXTria3 objects correspon d to user-creatable graphics triangle s in your model. They are derived 
from Entity objects so, in addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are also available for no des. For more information, see 
Section 5.1, "Common Entity  Properties and Methods".
Simply creating user-graphics objects will not make them visible in your model. You must also 
use the methods described in Section 3.17, "User Gr aphics Methods", to select the data/set to dis-
play and the views where you want to display your graphics. 
Use the feGFXTria3 method of the FEMAP App lication object to create GFXTria3 objects.
5.33.1  GFXTria3 Ob ject Properties
User graphics data can be stored in any Set, bu t only one set can be selected for display at any 
time.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
REAL8 xyz[0..8]
or
V ARIANT vxyzThe coordinates of the corners of a triangle. Values are stored in 
the order (x1,y1,z1,x2,y2,z2,...) . All values are specified in 
global rectangular coordinates.
REAL8 normal[0..8]
or
V ARIANT vnormalThe components of the normal vector to the triangle at each 
corner. Stored in thes same orde r as the coordinates. These val-
ues are used for smooth shading and are only used if autonor-
mal=False. All values are specified in global rectangular coordinates.
INT4 layer The ID of the layer associated with the triangle.
INT4 fillcolor The color used to f ill the interior of the triangle.
INT4 edgecolor The color used fo r the edge lines of the triangle.
INT4 edgeflagsAny combination of the followi ng (0=No Edges, 0x0F=All 
Edges Shown, 0x01=Edge 1 On, 0x02=Edge 2 On, 0x04=Edge 
3 On, 0x08=Edge 4 On - for quads). These are used to control which edges of the triangle are drawn. By turning off edges, 
multiple triangles (and quads) can  be combined to appear as 
one larger shape. 
BOOL autonormalIf True, a single normal is comp uted for the triangle and used 
for shading. If False, you must supply normals in the “normal” 
property for shading.
 API-2552  PutAll
5.33.2  GFXTria3 Object Methods
5.33.2.1  PutAll
PutAll
( entID, xyz, edgeflags, normal, autonormal, layer, fillcolor, edgecolor )
Description:This method stores an entit y with the specified ID.
Input:INT4 entID The ID of the entity to store.REAL8 xyz[0..8]
Refer to the property descrip tions for each of these items. INT4 edgeflags
REAL8 normal[0..8]
BOOL autonormal
INT4 layerINT4 fillcolorINT4 edgecolorOutput:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:Unlike the standard Put method, th is function loads all of the properties as arguments. If you are updat-
ing all of the properties before stor ing an entity, this function will be f aster than multiple  calls to load 
each property individually.
Example:None
PutAllArray   API-2553
5.33.2.2  PutAllArray
PutAllArray
( numTria, entID, xyz, edgeflags, normal, autonormal, layer, fillcolor, edgecolor )
Description:This method stores multiple GFXTria3  entities with the specified data.
Input:
INT4 numTriaThe number of GFXTria3s to create (i .e. the number of entries in the 
arrays)
INT4 entID[0..numTria-1] The IDs of the GFXTria3s to store.REAL8 xyz[0..(3*3*numTria)-
1]
Refer to the property d escriptions for each of these items. xyz is an 
array of the entity coordinates. In the array, there must be 9 entries 
for a entity (3 for the first corner, 3 for the 2nd, ...), followed by the 9 
for the next entity, ... . The normal array is stored similarly, but con-
tains the components of the normal vectors. All other arrays contain 
one entry per triangle. All must be in global rectangular coordinates.INT4 edgeflags[0..numTria-1]
REAL8 normal [0..(3*3*num-
Tria)-1]
BOOL autonormal[0..numTria-
1]
INT4 layer[0..numTria-1]INT4 fillcolo r[0..numTria-1]
INT4 edgecolor[0..numTria-1]Output:NoneReturn Code:
FE_FAILUnable to store the entity with th e specified ID. Probably unable to 
allocate memory for all of the arrays.
Remarks/Usage:This is the fastest “Put” method if you have a large number of items to create, but still need full control 
over all options. All data can be accumulated in arrays and then transferred in one call.
Example:None
 API-2554  PutCoordNormalArray
5.33.2.3  PutCoordNormalArray
PutCoordNormalArray
( numTria, xyz, edgeflags, normal, autonormal, layer, fillcolor, edgecolor )
Description:This is a simpler version of PutAll Array that allows multiple entities to  be stored, and still allows you to 
specify the triangle normal vectors.
Input:
INT4 numTriaThe number of GFXTria3s to create (i .e. the number of entries in the 
arrays)
REAL8 xyz[0..(3*3*numTria)-
1]
Refer to the property d escriptions for each of these items. xyz is an 
array of the entity coordinates. In the array, there must be 9 entries 
for a entity (3 for the first corner, 3 for the 2nd, ...), followed by the 9 
for the next entity, ... . The normal array is stored similarly, but con-
tains the components of the normal vectors. All other arrays contain 
one entry per triangle. All must be in global rectangular coordinates.INT4 edgeflags[0..numTria-1]
REAL8 normal [0..(3*3*num-
Tria)-1]
BOOL autonormalINT4 layerINT4 fillcolorINT4 edgecolorOutput:NoneReturn Code:
FE_FAILUnable to store the entity with th e specified ID. Probably unable to 
allocate memory for all of the arrays.
Remarks/Usage:This method is even faster than  PutAllArray, and requires less memo ry, it does not however give you 
full control. Entities are simply stored in the next available ID, and the same la yer, color... are used for 
every entity - only the coordinates, ed geflags and normals are input as arrays.
Example:None
PutCoordArray   API-2555
5.33.2.4  PutCoordArray
PutCoordArray
( numTria, xyz, layer, fillcolor, edgecolor )
Description:This is a simpler version of PutAllArray th at allows multiple entities to be stored.
Input:
INT4 numTriaThe number of GFXTria3s to create (i .e. the number of entries in the 
arrays)
REAL8 xyz[0..(3*3*numTria)-
1]Refer to the property d escriptions for each of these items. xyz is an 
array of the entity coordinates. In the array, there must be 9 entries 
for a entity (3 for the first corner, 3 for the 2nd, ...), followed by the 9 
for the next entity, ... . All must be  in global rectangular coordinates.INT4 layer
INT4 fillcolor
INT4 edgecolor
Output:NoneReturn Code:
FE_FAILUnable to store the entity with th e specified ID. Probably unable to 
allocate memory for all of the arrays.
Remarks/Usage:This method is even faster than  PutAllArray, and requires less memo ry, it does not however give you 
full control. Entities are simply stored in the next available ID, and the same la yer, color... are used for 
every entity - only the coordi nates are input as an array.
Example:None
 API-2556  DeleteAll
5.33.2.5  DeleteAll
DeleteAll
( bAllSets, nSetID )
Description:Deletes all GFXTria3s in one or more setsInput:
BOOL bAllSetsIf True, all entities, in all sets are de leted. If False, then all entities in 
Set nSetID are deleted
INT4 nSetID The setID to delete if bAllSets=FalseOutput:NoneReturn Code:FE_FAIL Unable to delete entitiesRemarks/Usage:NoneExample:None
   API-2557
5.34  GlobalPly Objects
Global Ply objects correspond to the global plys in your mode l. They are derived from Entity 
objects so, in addition to the properties and methods  described here, all of the properties and meth-
ods defined for Entity objects ar e also available for GlobalPly ob jects. For more information, see 
Section 5.1, "Common Entity  Properties and Methods". 
Use the feGlobalPly method of the FEMAP App lication object to create GlobalPly objects.
5.34.1  GlobalPly Object Properties
GlobalPlys are always stored with a SetID= 1, and the ID equal to the global ply ID.
5.34.2  GlobalPly Object Methods
There are no GlobalPly object-sp ecific methods. Only the standa rd entity methods are available.Property Description
STRING title Global Ply title.REAL8 thickness The global ply thicknessINT4 matlID The ID of the materi al referenced by the global ply
INT4 failuretheoryFailure Theory for global ply. 0=From Property, 1=Hill, 
2=Hoffman, 3=Tsai-Wu, 4=Max Strain
 API-2558  
   API-2559
5.35  GlobalStep Objects
GlobalStep objects correspond to the global step en tities which can be referenced by analysis steps 
within subcases which are within  analysis sets in your mode l. They are derived from Entity 
objects, so in addition to the properties and methods  described here, all of the properties and meth-
ods defined for Entity objects are also available for GlobalStep obj ects. For more information, see 
Section 5.1, "Common Entity  Properties and Methods". 
Use the feGlobalStep method of the FEMAP Applic ation object to create GlobalStep objects. 
Currently, GlobalStep objects are only used for MSC Nastran Implicit Nonlinear Analysis (SOL 
400), which is the only analysis ty pe that used AnalysisStep Objects
5.35.1  GlobalStep Object Properties
GlobalStep Objects are stored with their globalstepID equal to the analysis step that you are trying 
to access.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
Global Step Options - GeneralSTRING GlobalStepTitle[80] Title of analysis  Global step (maxim um 80 characters).
STRING GlobalStepLabel[80] Label of anal ysis step (maximum 80 characters).
INT4 globalstepID ID of Global Step
enum GlobalStepAnalysisTypeAnalysis Type for Global Step (only used by certain solvers 
for certain analysis types). See “Analysis Types” in Section 
3.3.7, "FEMAP Constants" for available enumerations.
INT4 BCSet[0..20]
or
V ARIANT vBCSetSetIDs of load and constraint  sets for this step: [0]=Con-
straints, [1]=Constraint Equa tions, [2]=Loads, [3]=Initial 
Conditions, [4]=Master DOF, [5]=Base/Support DOF, 
[6]=Omit DOF, [7]=QSET DOF, [8]=CSET DOF, [9]=BSET 
DOF, [10]=Bolt Preloads, [11]=SUPORT1 DOF, [12]=Tem-peratures, [13]=Connection Group (MSC Only), [14]=Loads 
(Time), [15]=Temperatures (Init) , [16]=Glue Set, [17]=Con-
tact Set, others not currently used.
 API-2560  
INT4 Output[0..30]
or
V ARIANT vOutputOutput requests for this step: 0=off,-1=full model, 
>0=groupID,  [0]=Nodal App lied Load, [1]= Nodal Reaction 
Force, [2]=Nodal Displace ment, [3]=Nodal Velocity, 
[4]=Nodal Acceleration, [5]=No dal Temperature, [6]=Nodal 
Heat Flux, [7]=Nodal Constraint Equation Forces, [8]=Nodal 
Force Balance, [9]=Nodal Ki netic Energy, [15]=Element 
Force, [16]=Element Stress, [1 7]=Element Strain, [18]=Ele-
ment Plastic Strain, [19]=Element Strain Energy, [20]=Ele-
ment Heat Flux, [21]=Element Enthalpy, [22]=Element 
Enthalpy Rate, [23]=Element Contact, [24]=Element Tem-perature, [25]=Kinetic Energy, [26]=Energy Loss, [27]=Fluid 
Pressure, others not currently used.
STRING Echo[80] String for ECHO op tion (maximum 80 characters).
BOOL SkipStandard Flag to skip standard output for this step.
BOOL 
NasGlobalAlternateTextLocationFlag to use Start Text Inside the Global Step option.
INT4 StartText ID of starting text.
INT4 EndText ID of ending text.
INT4 DestinationOutput destination: 0=De fault, 1=Print, 2=Post, 
3=Print+Post, 4=Punc h, 5=Punch+Post.
INT4 ImaginaryFormat for complex output: 0=Magnitude/Phase, 1=Real/
Imaginary.
INT4 CornerOutput Flag to requ est output at element corners.
INT4 IntegrationOutput Flag to request output at element integration points.
BOOL NasCurvatureStrainFlag to request Curvature Strain Results. True = Curvature, 
False = Fiber
NASTRAN Global Step OptionsAnalysis Step Options - NASTRAN SpecificBOOL NasOmodesOn Flag indicating an  OMODES request has been defined.
STRING NasOmodes[160] Expression used to select OMODES outputNASTRAN Modal Analysis - Global Step options
BOOL NasModeOnFlag indicating NASTRAN Mo dal Options have been 
defined for subcase
INT4 NasModeEigrSet SetID to be used for EIGR. Property Description
   API-2561
INT4 NasModeMethodModal Solution method: 0=Gi vens,1=Modified Givens, 
2=Inverse Power, 3=Inverse Po wer/Strum, 4=Householder, 
5=Modified Householder, 6=Lanczos, 7=Hessenberg, 
8=Complex Inverse Power, 9=Complex Lanczos
BOOL NasModeSolutionType Solution type: False=Direct, True=ModalREAL8 NasModeFreqRange[2]
or
V ARIANT vNasModeFreqRangeFrequency range of interest, [0]=Min, [1]=Max.
INT4 NasModeEstRoots Estimat ed number of eigenvalues.
INT4 NasModeDesiredRoots Number of desired eigenvalues/modes.INT4 NasModeNormOpt Normalizatio n method: 0=Mass,1=Max, 2=Point.
INT4 NasModeNormNode Node ID for u se with point normalization method.
INT4 NasModeNormDOF Nodal DOF for u se with point normalization method.
INT4 NasModeMassForm Mass matrix formula tion: 0=Default, 1= Lumped, 2=Coupled.
BOOL NasModesSkipEigrIf True, skips writing the EIGR card for specifying modal 
analysis options
REAL8 NasModeImagFreqRange[2]
orV ARIANT vNasModeImagFreqRangeFor Complex Modes analysis, spec ifies the imaginary part of 
the Frequency Range of interest.
REAL8 NasModesComplexConverge Specifie s Complex Modes convergence value
REAL8 NasModesComplexRegion-
WidthSpecifies Region Width for Complex Modes analysis.
REAL8 NasModeDampOverall Specifies PARAM,G
MSC NASTRAN Implicit Nonlinear (SOL 400) - Control Parameters
BOOL NasInlStepOptOnFlag indicating Control Parame ters for Implicit Nonlinear 
Analysis have been defined for the subcase
BOOL NasInlStepOptSkipNLSTEP Flag to disab le writing of NLSTEP for this subcase
INT4 NasInlStepOptID ID of NLSTEP for this subcaseControl Parameters - Step ParametersREAL8 NasInlStepOptTOTTIM Total Time (TOTTIM) value
INT4 NasInlStepOptCTRLDEFSpecifies Nonlinearity (CTRLDEF) option:
0=Default
1=Linear
2=Mildly Nonlinear3=Severely NonlinearProperty Description
 API-2562  
Control Parameters - General Parameters
INT4 NasInlStepOptMAXITER Max Iter ations/Increment (MAXITER) value
INT4 NasInlStepOptMINITER Min Iter ations/Increment (MINITER) value
INT4 NasInlStepOptMAXBIS Max Bise ctions for Step (MAXBIS) value
BOOL NasInlStepOptCREEP Flag to enable Include Creep (CREEP) optionControl Parameters - Analysis Parameter
INT4 NasInlStepOptLoadSteppingSpecifies Increment Type option:
0=Fixed
1=Adaptive
2=Arc-Length
Control Parameters - Analysis Parameters - Fixed Time Stepping ParametersINT4 NasInlStepOptNINC Number of Increments (NINC) value
INT4 NasInlStepOptNO Outpu t Interval (NO) value
Control Parameters - Analysis Parameters - Adaptive Load Stepping ParametersREAL8 NasInlStepOptDTINITF Initial Fraction (DTINITF) valueREAL8 NasInlStepOptDTMINF Min Fraction (DTMINF) valueREAL8 NasInlStepOptDTMAXF Max Fraction (DTMAXF) valueREAL8 NasInlStepOptSFACT Increase Factor (SFACT) valueINT4 NasInlStepOptADJUST Auto Skip Factor (ADJUST) valueINT4 NasInlStepOptMSTEP Dominant Pe riod Resp. Steps (MSTEP) value
REAL8 NasInlStepOptRB Adaptive Time Step Bound (RB) valueINT4 NasInlStepOptNDESIR Desired Iterations/Increments (NDESIR) valueINT4 NasInlStepOptNSMAX Max Increments (NSMAX) value
REAL8 NasInlStepOptUTOL Displacement Tolerance (UTOL) value
INT4 NasInlStepOptIDAMPSpecifies Static Damping (IDMAP) option:
0=No Added Damping4=Time Step Control Using Damping
5=Damping-based Time Step Control with No Damping
6=Add Damping when Minimum Time Step is Reached
REAL8 NasInlStepOptDAMP Damping Ratio (DAMP) valueProperty Description
   API-2563
INT4 NasInlStepOptINTOUTSpecifies Output Flag (INTOUT) option:
-1=Last Increment
0=Every Load Increment
>0=Equally Spaced Intervals (value is used to specify value for Output Every Nth Step) 
Adaptive Load Stepping Parameters - CriteriaBOOL NasInlStepOptEnableCriteria Flag to enable the Enable User Criteria option
INT4 NasInlStepOptIPHYSSpecifies Physical Criteria (IPHYS) option:
-2=No Auto Physical Criteria; Continue When User Criteria 
Exceeded-1=Add Auto Physical Criteria; Continue When User Criteria 
Exceeded
1=1..No Auto Physical Criteria; Stop When User Criteria Exceeded
2=2..Add Auto Physical Criteria; Stop When User Criteria 
Exceeded
INT4 NasInlStepOptLIMTARSpecifies Definition (LIMTAR) option:
0=Criteria as Limits1=Criteria as Targets
REAL8 NasInlStepOptRSMALL Min. Ratio (RSMALL) valueREAL8 NasInlStepOptRBIG Max Ration (RBIG) value
BOOL NasInlStepOptIncrements[0..9]Flag in Status column of row specified by zero-based index 
value in list of Criteria. When  True, Criterion is enabled.
0=Elem. Strain1=Elem. Plastic Strain
2=Elem. Creep Strain
3=Elem. Normalized Creep Strain4=Elem. Strain Energy
5=Elem. Stress
6=Elem. Normalized Stress7=Nodal Temperature
8=Nodal Displacement
9=Nodal Rotation
INT4 NasInlStepOptGroupIDs[0..9]ID of existing Group in Group column of row specified by 
zero-based index value in list of Criteria. For description of 
each row, See NasInlStepOptIncrements.
REAL8 NasInlStepOptYT1_i[0..9]Value in Y1 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.Property Description
 API-2564  
REAL8 NasInlStepOptMT1_i[0..9]Value in M1 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptYT2_i[0..9]Value in Y2 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT2_i[0..9]Value in M2 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptYT3_i[0..9]Value in Y3 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT3_i[0..9]Value in M3 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptYT4_i[0..9]Value in Y4 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
REAL8 NasInlStepOptMT4_i[0..9]Value in M4 column of row specified by zero-based index 
value in list of Criteria. For description of each row, See 
NasInlStepOptIncrements.
Control Parameters - Analysis Parameters - Arc-Length Load Stepping Parameters
INT4 NasInlStepOptTYPESpecifies Constraint Type option:
0=Crisfield
1=Riks2=Modifed Riks
REAL8 NasInlStepOptDTINITFA Initial Time Step Fraction (DTINITFA) valueREAL8 NasInlStepOptMINALR Min ArcL enAdjust Ratio (MINALR) value
REAL8 NasInlStepOptMAXALR Max ArcLenAdjust Ratio (MAXALR) valueREAL8 NasInlStepOptSCALEA Scale Factor (SCALEA) valueINT4 NasInlStepOptNDESIRA Desired Iterations (NDESIRA) valueINT4 NasInlStepOptNSMAXA Max Increments (NSMAXA) valueControl Parameters - Analysis Parameters - Mechanical Analysis ParametersBOOL NasInlStepOptMECH Flag to enable the Enable MECH option
INT4 NasInlStepOptKMETHODSpecifies Method (KMETHOD) option:
0=Full Newton-Raphson
1=Quasi Newton-RaphsonProperty Description
   API-2565
INT4 NasInlStepOptKSTEP Iter ation Interval (KSTEP) value
INT4 NasInlStepOptMAXQN QN Vectors (MAXQN) valueINT4 NasInlStepOptMAXLS Max Line Searches (MAXLS) valueREAL8 NasInlStepOptLSTOL Line Search Tol (LSTOL) valueREAL8 NasInlStepOptFSTRESS Fraction Limit (FTRESS) valueBOOL NasInlStepOptConvU Flag to enable Displacement optionREAL8 NasInlStepOptEPSU Displacement valueBOOL NasInlStepOptConvP Flag  to enable Load option
REAL8 NasInlStepOptEPSP Load valueBOOL NasInlStepOptConvW Flag  to enable Work option
REAL8 NasInlStepOptEPSW Work valueBOOL NasInlStepOptConvV Flag to enable Vector optionBOOL NasInlStepOptConvN Flag  to enable Length option
BOOL NasInlStepOptConvA Flag to enable Automatic Switching option
INT4 NasInlStepOptMRCONVSpecifies Checking (MRCONV) option:
0=Forces, Moments, Displacements, and Rotations1=Forces, Moments, and Displacements
2=Forces, Displacements, and Rotations
3=Forces and Displacements
MSC Nastran Boundary Conditions
INT4 ContactOptionBoundary Conditions dialog bo x for MSC Nastran Only. Sets 
BCONTACT Option (0=Default, 1=Inital Contact, 2=All 
Body, 3=Auto) 
INT4 ContactSetTypeBoundary Conditions dialog bo x for MSC Nastran Only. Sets 
Contact/Glue Sets option (0=A ll Connectors, 1=Connection 
Group, 2=All Body). ID of group for Connection Group set 
using BCSet[13]Property Description
 API-2566  InitGlobalStep
5.35.2  GlobalStep Object Methods
In addition to the standard methods, th e following methods are also available.
5.35.2.1   InitGlobalStep
InitGlobalStep
( nCaseID )
Description:This method initializes the de fault values for a global step
Input:INT4 nCaseID The Global Step to be initializedOutput:NoneReturn ValueFE_FAILRemarks/Usage:NoneExample:None
DeleteGlobalStep   API-2567
5.35.2.2  DeleteGlobalStep
DeleteGlobalStep
( nCaseID )
Description:Use this method to delete a global step.Input:INT4 nCaseID The Global Step to be deletedOutput:NoneReturn ValueFE_FAILRemarks/Usage:
Example:
None
 API-2568  ActiveContactEntities
5.35.2.3  ActiveContactEntities
ActiveContactEntities
( bContact, nConnectorSetID, nRegionSetID, nConPropSetID )
Description:This method is used to populate Set Objects with the Connectors, Connection Regions, and Connection 
Properties that will be exported fo r Contact or Glue Contact by an analysis step which references this 
global step. This meth od takes into consideration the settings in th e Contact Sets or Gl ue Sets section of 
the Boundary Conditions di alog box for Simcenter SOL 401/402 or  setting for Contact/Glue Sets of the 
Boundary Conditions dialog box for MSC Nastran.
Input:
BOOL bContactIf True, populates sets with connecti on entities for Contact. If False, 
populates sets with connectio n entities for Glued Contact
INT4 nConnectorSetIDSet ID of Set Object to popula te with Connectors which will be 
exported by this analysis step wh ich references this global step
INT4 nRegionSetIDSet ID of Set Object to populate  with Connection Regions which will 
be exported by this analysis step  which references this global step
INT4 nConPropSetIDSet ID of Set Object to populate  with Connection Properties which 
will be exported by this analysis step which references this global 
step
Output:NoneReturn ValueFE_FAIL No Connection Re gions were detected.
Remarks/Usage:It is important to use three unique s Set Objects when usin g this method, otherwise the IDs of different 
entity types may contaminate a Set. Also, it is recommend to  use “empty sets” to insure that only the 
Connection entities from a single analysis step which references this global step populate the three sets.
Example:None
   API-2569
5.36  Group Objects
Group objects correspond to the gro ups in your model. They are de rived from Entity objects, so in 
addition to the properties and methods described here, all of the properties and methods defined 
for Entity objects are also available for Group ob jects. For more information, see Section 5.1, 
"Common Entity Proper ties and Methods". .
Use the feGroup method of the FEMAP App lication object to create Group objects.
5.36.1  Group Object Properties
Groups are always stored with a SetID= 1, and the ID equal to the group ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
INT4 LayerModeThe mode to use layers to lim it group contents: 0=All Layers, 
1=Equal or Above Max, 2=Equal or Below Min, 3=Between, 
4=Outside, 5=Single Layer.
INT4 LayerMinThe minimum layer ID used to limit layer selection in certain 
LayerModes.
INT4 LayerMaxThe maximum layer ID used to limit layer selection in certain 
LayerModes.
INT4 CoordClipOn Flag used to indicate th at coordinate clipping is being used.
INT4 CoordClipModeThe mode used for coordinate clipping: 0=Greater, 1=Less, 
2=Between, 3=Outside.
REAL8 CoordClipMinThe minimum coordinate location,  used to limit coordinate 
clipping in certain CoordClipModes.
REAL8 CoordClipMaxThe maximum coordinate locatio n, used to limit coordinate 
clipping in certain CoordClipModes.
INT4 CoordClipCSysThe coordinate system in which coordinate clipping is being 
performed. The CoordClipMin and CoordClipMax values refer 
to coordinates in this coordinate system.
INT4 CoordClipDirThe coordinate axis along which coordinate clipping occurs: 
0=X (or R), 1=Y (or theta), 2=Z (or phi).
INT4 PlaneClipModeThe mode used for plane clipping: 0=Off, 1=Screen, 2=Plane, 
3=V olume.
BOOL PlaneClipInsideFlag indicating whether to retain  the inside or outside of the 
clipping region.
INT4 PlaneClipOn[0..5]
or 
V ARIANT vPlaneClipOnFlag used to indicate whether eac h clipping plane is being used.
 API-2570  
BOOL PlaneClipNeg[0..5]
or 
V ARIANT vPlaneClipNegFlags indicating whether to use the negative sides of the planes 
for clipping.
REAL8 PlaneClipBase[0..5][0..2]
or
V ARIANT vPlaneClipBaseThe coordinate locations defini ng a point on each of the clip-
ping planes. The first index indi cates the clipping plane. The 
second index chooses the x, y, or z coordinates. In global rect-
angular.
REAL8 PlaneClipDir[0..5][0..2]
orV ARIANT vPlaneClipDirThe components of vectors normal  to each of the clipping 
planes. The first index indicates the clipping plane. The second index chooses the x,y or z compon ents. In global rectangular.
STRING title The group title (maximum 79 characters).
BOOL RenumberFlag indicating whether this group should be renumbered when 
other entities are renumbered.
BOOL NeedEvalFlag indicating that the current  group needs to be evaluated 
before use. This is automatically  set to True every time you Put 
the group to the database. Ev aluation computes the list of 
objects selected into a group by rules, clipping, or any other 
selection approach.
BOOL EvalAlwaysIf you set this to True, then wh en you Put a group, it will be 
marked so that it will be automatically evaluated every time it is 
used. With this set to False, th e default, the group will be evalu-
ated once, and then never again until it is modified.
BOOL CondenseSet this to True if you want the group to be condensed when 
you Put it back into the databa se. Condensing means converting 
all possible selection methods into equivalent, by ID  rules. To 
see the effect of this opera tion, you must Put the group.Property Description
   API-2571
5.36.1.1  Group Range Types
All of the Group methods that access ranges requ ire you to specify whic h range you want to 
access. The following table provides the rangeType values th at you should use.
Group Range Types
0 CSys_ID 26 Matl_ID 52 Text_byColor1 CSys_byDefCSys 27 Matl_ onProp 53 Point_byColor
2 CSys_byType 28 Matl_onElem 54 Curve_byColor3 Point_ID 29 Matl_byType 55 Surface_byColor4 Point_byDefCSys 30 Prop_ID 56 V olume_byColor5 Point_onCurve 31 Prop_onElem 57 Solid_byColor6 Curve_ID 32 Prop_byMatl 58 CSys_byColor7 Curve_byPoint 33 Prop_byType 59 Node_byColor8 Curve_onSurface 34 Load_byNode 60 Elem_byColor9 Surface_ID 35 Load_byElem 61 Prop_byColor10 Surface_byCurve 36 BCo_ID 62 Matl_byColor11 Surface_onV olume 37 BEq_byNode 63 Text_byLayer12 V olume_ID 38 Node_atPoint 64 Point_byLayer13 V olume_bySurface 39 Node _atCurve 65 Curve_byLayer
14 Text_ID 40 Node_atSurface 66 Surface_byLayer15 Not Used 41 Node_atSolid 67 V olume_byLayer16 Not Used 42 Elem_atPoint 68 Solid_byLayer17 Node_ID 43 Elem_atCurve 69 CSys_byLayer18 Node_byDefCSys 44 Elem_atSurface 70 Node_byLayer19 Node_byOutCSys 45 Elem_atSolid 71 Elem_byLayer20 Node_onElem 46 Load_byPoint 72 Prop_byLayer21 Elem_ID 47 Load_byCurve 73 Matl_byLayer22 Elem_byMatl 48 Load_bySurface 74 Solid_ID23 Elem_byProp 49 BCo_byPoint 75 Solid_byCurve24 Elem_byType 50 BCo_byCurve 76 Solid_bySurface25 Elem_byNode 51 BCo_bySurface 77 Curve_onSolid
 API-2572  
78 Surface_onSolid 102 Layup_byMatl 126AEROSPLINE
_BYPANEL
79 Point_byProp 103 Layup_byProp 127 AEROCTRLSURF_ID 
80 Curve_byProp 104 Elem_byLayup 128AEROCTRLSURF
_BYCOLOR 
81 Surface_byProp 105 Prop_byLayup 129AEROCTRLSURF
_BYLAYER
82 V olume_byProp 106 Node_bySuperelement 130 CSYS_ONPROP83 Solid_byProp 107 Load_byRegion 131 CSYS_ONCSYS
84 Contact_ID 108 Contact_byElem 132SURFACE
_ONREGION
85 Contact_byColor 109 Contact_byNode 133 CURVE_ONREGION86 Contact_byLayer 110 Contact_byCurve 134 ELEM_ONREGION87 CSys_onNode 111 Contact_bySurface 135 NODE_ONREGION88 CSys_onPoint 112 Contact_byProp 136 PROP_ONREGION89 Elem_byShape 113 Elem_byAllNodes 137 PROP_ONPOINT90 Node_onElemAsOrient 114 Elem_byGlobalPly 138 PROP_ONCURVE91 ConnectionProp_ID 115 Layup_byGlobalPly 139 PROP_ONSURFACE
92ConnectionProp_
byColor116 AEROPROP_ID 140 PROP_ONSOLID
93ConnectionProp_
byLayer117 AEROPROP_BYCOLOR 141 SOLID_BYTYPE
94 Connector_ID 118 AEROPROP_BYLAYER 142 NODE_BYTYPE
95 Connector_byColor 119 AEROP ANEL_ID 143 POINT_ONSURFACE
96 Connector_byLayer 120 AEROPANEL_BYCOLOR 144 POINT_ONSOLID97 Connector_byProp 121 AEROPANEL_BYLAYER 145 CSYS_ONELEM98 Contact_onConnector 122 AEROP ANEL_BYPROP 146 CONTACT_ONSOLID
99ConnectionProp_
onConnector123 AEROSPLINE_ID 147 MESHPOINT_ID
100 Connector_byContact 124AEROSPLINE
_BYCOLOR148MESHPOINT
_BYCOLOR
101 Layup_ID 125AEROSPLINE
_BYLAYER149MESHPOINT
_BYLAYERGroup Range Types
   API-2573
Note: Any reference to “Contact ” in the above table refers to  Regions, usually Connection 
Regions, but some may also be used for Flui d Regions, NonStructural Mass Regions, Bolt 
Regions, and Rotor Regions.
5.36.1.2  Group List Types
The Group List method returns a set of sel ected entities. You must, ho wever, specify which list 
you want to access. The following table provid es the listType values that you should use.150MESHPOINT
_BYPOINT151MESHPOINT
_BYCURVE152MESHPOINT
_BYSURFACE
153MESHPOINT
_BYSOLID
Group Entity List Types
0 CSys 10 Property 20 Surface Const.
1 Point 11 Nodal Load 21 Solids
2 Curve 12 Elem Load 22 Connection Regions3 Surface 13 Constraint 23 Connectors4 V olume 14 Constraint Equations 24 Connection Properties5 Text 15 Point Loads 25 Layups6 Unused 16 Curve Loads 26 Region Loads (Bolt)7 Node 17 Surface Loads 27 Mesh Point8 Elem 18 Point Constraints9 Material 19 Curve ConstraintsGroup Range Types
 API-2574  List
5.36.2  Group Object Methods
There following methods are available in addition to th e standard entity methods.
5.36.2.1  List
List
( listType )
Description:This method returns a Set object th at contains all of the entities curre ntly in the selected group list.
Input:
INT4 listTypeThe type of group list that you wa nt to retrieve. Refer to Section 
5.36.1.2, "Group List Types" for allowable list types.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:
List   API-2575
This method must be used  with a Set statement to  define the Set object.
Sub Main 
Dim App As femap.model 
Set App = feFemap() 

Const  DELIM = " " 
Dim gr As Group 
Dim grID As Long 
grID = 14 
Dim s As Set 
Set gr = App.feGroup 

gr.Get(grID) 
Set s = gr.List(FGR_NODE) 

'Print out IDs in set 
Dim msg As String 
Dim ndID As Long 

msg = "Nodes in group " +  Str$(gr.ID) 
App.feAppMessage(FCM_NORMAL, msg) 
msg = "" 
'Get first in set 
ndID = s.First 
msg = Str$(ndID) + DELIM 

' prints out 10 ids per line 
For i =0 To s.count-1 
  If ( (i+1) Mod 10 = 0)  Or i=s.count-1 Then 
    App.feAppMessage(FCM_NORMAL, msg) 
    'get next in set 
     ndID = s.Next 
     msg = "" 
     msg = msg +  Str$(ndID)+ DELIM 
  Else
    'get next in set 
    ndID = s.Next 
    msg = msg +  Str$(ndID)+ DELIM 
  End If 
Next i
End Sub

This sequence creates the “s” Set object with the list of nodes (listType=7) that are selected in Group 14.List
( listType )
 API-2576  GetList
5.36.2.2  GetList
GetList
( listType, setID )
Description:This method is similar to the “List” method, but instead of return ing a new Set object, it simply adds the 
contents of the list into a Se t object that already exists
Input:
INT4 listTypeThe type of group list that you wa nt to retrieve. Refer to Section 
5.36.1.2, "Group List Types" for allowable list types.
INT4 setID The ID of the Set object to fill.Output:None
Return Code:
NoneRemarks/Usage:NoneExample:
HasList   API-2577
5.36.2.3  HasList
HasList
( listType )
Description:This method is used to determine if a list is pr esent in the current Group
Input:
INT4 listTypeThe type of group list that you wa nt to retrieve. Refer to Section 
5.36.1.2, "Group List Types" for allowable list types.
Output:NoneReturn Code:FE_FAIL The specified list does not exist in the current Group
FE_OK The specified list does exist in the current GroupRemarks/Usage:NoneExample:
 API-2578  CountList
5.36.2.4  CountList
CountList
( listType )
Description:This method returns the nu mber of entities selected in the specified Group list.
Input:
INT4 listTypeThe type of group list that you wa nt to retrieve. Refer to Section 
5.36.1.2, "Group List Types" for allowable list types.
Output:NoneReturn Code:
countThe number of entities selected in the Group List (0 if the list does 
not exist)
Remarks/Usage:NoneExample:
Range   API-2579
5.36.2.5  Range
Range
( rangeType )
Description:This method returns a Set object th at contains all of the entities curre ntly selected by the specified ran-
geType.
Input:
INT4 rangeTypeThe type of group range list that you  want to retrieve. Refer to Sec-
tion 5.36.1.1, "Group Range Types" for allowable rangeTypes
Output:NoneReturn Code:
None
Remarks/Usage:NoneExample:
 API-2580  Range
This method must be used  with a Set statement to  define the Set object.
Sub Main 
Const  DELIM = " " 
Dim App As femap.model 
Set App = feFemap()

Dim gr As Group 
Dim grID As Long 
grID = 14 
Dim s As Set 
Set gr = App.feGroup 
gr.Get(grID) 
Set s = gr.Range(FGD_ELEM_BYMATL) 
'Print out IDs in set 
Dim msg As String 
Dim ndID As Long 
msg = "Materials in group " +  Str$(gr.ID) 
App.feAppMessage(FCM_NORMAL, msg) 
msg = "" 
'Get first in set 
ndID = s.First 
msg = Str$(ndID) + DELIM 

' print out 10 ids per line 
For i =0 To s.count-1 
  If ( (i+1) Mod 10 = 0) Or i=s.count-1 Then 
    App.feAppMessage(FCM_NORMAL, msg) 
    ndID = s.Next  'get next in set 
    msg = "" 
    msg = msg +  Str$(ndID)+ DELIM 

  Else
    'get next in set 
    ndID = s.Next 
    msg = msg +  Str$(ndID)+ DELIM 
  End If 
Next i
End Sub 
This sequence creates the “s” Set object with the lis t of materials used to select elements (range-
Type=22) that are selected in Group 14.Range
( rangeType )
RangeReset   API-2581
5.36.2.6  RangeReset
RangeReset
( void )
Description:This method resets the next pointer so that the next call to Range Next will return the first (lowest ID) 
range.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method does not change the next pointer for the Group object, just  for the ranges within the group. 
The next method will still return  the next group.
Example:None
 API-2582  RangeGetAll
5.36.2.7  RangeGetAll
RangeGetAll
( rangeType, rangeCount, startID, stopID, increment, include )
Description:This method returns all of the ranges of a specific type in the form of arrays.
Input:INT4 rangeType This is the type of  range that you are retrieving.
Output:
INT4 rangeCountThe number of entries in each of th e other arrays. That is, the number 
of ranges that are returned.
INT4 startID[0..N] The starting ID in the range.INT4 stopID[0..N] The ending ID in the range. This will be 0 for single entry ranges.
INT4 increment[0..N] The increment to  count by between startID and stopID
INT4 include[0..N] The include fl ag 0=Remove, 1=Add, Exclude=-1.
Return Code:FE_NOT_A V AILABLE The rangeType that you specified is invalid.FE_FAIL Unable to retrieve the data for ranges.Remarks/Usage:Use the Reset method to go to th e beginning of the lists of ranges , then keep calling RangeNext to 
retrieve entries from a list of rang es one-by-one. Alternatively, you can call RangeGetAll to get all of 
the entries in one call.
Example:None
RangeNext   API-2583
5.36.2.8  RangeNext
RangeNext
( rangeType,  startID, stopID, increment, include )
Description:This method returns the values from the next range of a specific type.
Input:INT4 rangeType This is the type of  range that you are retrieving.
Output:INT4 startID The starting ID in the range.INT4 stopID The ending ID in the range. This will be  0 for single entry ranges.
INT4 increment The increment to co unt by between startID and stopID.
INT4 include The include flag: 0=Remove, 1=Add, Exclude=-1.Return Code:FE_NOT_A V AILABLE The rangeType that you specified is invalid.FE_FAIL Unable to retrieve the data for ra nges, or you are at the end of the list.
Remarks/Usage:Use the Reset method to go to th e beginning of the lists of ranges , then keep calling RangeNext to 
retrieve entries from a list of rang es one-by-one. Alternatively, you can call RangeGetAll to get all of 
the entries in one call.
Example:None
 API-2584  RangeAdd
5.36.2.9  RangeAdd
RangeAdd
( rangeType,  startID, stopID, increment, include )
Description:This method adds a range selectio n to the end of a selected list.
Input:INT4 rangeType This is the type of range that you are creating.INT4 startID The starting ID in the range.INT4 stopID The ending ID in  the range. This should be  0 for single entry ranges.
INT4 increment The incremen t to count by between startID and stopID, usually 1.
INT4 include The include flag :0=Remove, 1=Add, Exclude=-1.
Output:NoneReturn Code:FE_NOT_A V AILABLE The rangeType that you specified is invalid.FE_FAIL Unable to save the data for range.Remarks/Usage:If the entities that you want to add to the grou p are in a set, you can use the SetAdd method.
Example:None
RangeDelete   API-2585
5.36.2.10  RangeDelete
RangeDelete
( rangeType )
Description:This method deletes a single  range from the selected list.
Input:INT4 rangeType This is the type of range that you are deleting.
Output:NoneReturn Code:FE_NOT_A V AILABLE The rangeType that you specified is invalid.Remarks/Usage:This function deletes the range at th e current location. To use this fu nction, you must use the RangeNext 
function to retrieve ranges until you re trieve the one you want to delete , then call RangeDelete and that 
range will be removed.
Example:None
 API-2586  RangeDeleteAll
5.36.2.11  RangeDeleteAll
RangeDeleteAll
( rangeType )
Description:This method deletes all ra nges from the selected list.
Input:
INT4 rangeTypeThis is the type of range that you ar e deleting. Specify -1 to delete all 
ranges of all types.
Output:NoneReturn Code:FE_NOT_A V AILABLE The rangeType that you specified is invali.Remarks/Usage:Deleting all ranges of all types (ra ngeType=-1) is equivalent to the Group, Operations, Reset Rules 
command.
Example:None
SetAdd   API-2587
5.36.2.12  SetAdd
SetAdd
( entityTYPE, SetID )
Description:This method adds all en tities in a set to a group.
Input:
INT4 entityTYPEType of entity in the selected set. For more information, see Section 
3.3.6, "Entity Types". 
INT4 SetID The ID of the set contai ning the entities to add to the group
Output:NoneReturn Code:FE_FAIL Invalid entityTYPE to add to a groupRemarks/Usage:This method creates one or more “entity ID” range type rules to select the entities into the group.
Example:None
 API-2588  SetAdd2
5.36.2.13  SetAdd2
SetAdd2
( entityTYPE, SetID )
Description:This method adds all entities in a set to a group, based on the specified Group Data Type.
Input:enum entityTYPE
(zGroupDataType)Type of entity in the selected set  specified by zGroupDataType. For 
more information, see “Group Data Types”. 
INT4 SetID The ID of the set contai ning the entities to add to the group
Output:NoneReturn Code:FE_FAIL Invalid GroupDataType to add to a groupRemarks/Usage:This method creates one or more “entity ID” range type rules to select the entities into the group.
Example:None
SetAddOpt   API-2589
5.36.2.14  SetAddOpt
SetAddOpt
( entityTYPE, SetID, addOpt )
Description:This method adds (or removes) all entities in a set to a group.
Input:
INT4 entityTYPEType of entity in the selected set. For more information, see Section 
3.3.6, "Entity Types". 
INT4 SetIDThe ID of the set containing the en tities to add to, remove from, or 
exclude from the group
INT4 addOpt 0=Remove, 1=Add, -1= ExcludeOutput:
None
Return Code:FE_FAIL Invalid entityTYPE to add to, remove from, or ex clude from a group
Remarks/Usage:This method works just like the Ra ngeAdd method except that all entiti es in the set are either added or 
removed.
Example:None
 API-2590  SetAddOpt2
5.36.2.15  SetAddOpt2
SetAddOpt2
( entityTYPE, SetID, addOpt )
Description:This method adds (or removes) all entities in a set to a group,  based on the specified Group Data Type.
Input:enum entityTYPE
(zGroupDataType)Type of entity in the selected set  specified by zGroupDataType. For 
more information, see “Group Data Types”. 
INT4 SetIDThe ID of the set containing the en tities to add to, remove from, or 
exclude from the group
INT4 addOpt 0=Remove, 1=Add, -1= ExcludeOutput:
None
Return Code:FE_FAIL Invalid entityTYPE to add to, remove from, or ex clude from a group
Remarks/Usage:This method works just like the Ra ngeAdd method except that all entiti es in the set are either added or 
removed.
Example:None
Add   API-2591
5.36.2.16  Add
Add
( entityTYPE, nEntityID )
Description:This method adds a si ngle entity to a group.
Input:
INT4 entityTYPEType of entity in the selected set. For more information, see Section 
3.3.6, "Entity Types". 
INT4 nEntityID The ID of the entity to add to the group.
Output:NoneReturn Code:FE_FAIL Invalid entityTYPE to add to a groupRemarks/Usage:NoneExample:None
 API-2592  Add2
5.36.2.17  Add2
Add2
( entityTYPE, nEntityID )
Description:This method adds a single  entity of a specific Group Data Type to a group.
Input:enum entityTYPE
(zGroupDataType)Type of entity in the selected set  specified by zGroupDataType. For 
more information, see “Group Data Types” in 
INT4 nEntityID The ID of the entity to add to the group.
Output:NoneReturn Code:FE_FAIL Invalid GroupDataType to add to a groupRemarks/Usage:NoneExample:None
AddOpt   API-2593
5.36.2.18  AddOpt
AddOpt
( entityTYPE, nEntityID, addOpt )
Description:This method adds (o r removes) an entity to a gr oup using a user-defined option.
Input:
INT4 entityTYPEType of entity in the selected set. For more information, see Section 
3.3.6, "Entity Types". 
INT4 nEntityIDThe ID of the entity to add to, remove from, or exclude from the 
group.
INT4 addOpt 0=Remove, 1=Add, -1= ExcludeOutput:
None
Return Code:FE_FAIL Invalid entityTYPE to add to, remove from, or ex clude from a group
Remarks/Usage:This method works just like the Ad d method except that you can ch oose to Add, Remove, or Exclude 
instead of only being able to Add.
Example:None
 API-2594  AddOpt2
5.36.2.19  AddOpt2
AddOpt2
( entityTYPE, nEntityID, addOpt )
Description:This method adds (or removes) all entities in a set to a group,  based on the specified Group Data Type.
Input:enum entityTYPE
(zGroupDataType)Type of entity in the selected set  specified by zGroupDataType. For 
more information, see “Group Data Types”. 
INT4 nEntityIDThe ID of the entity to add to, remove from, or exclude from the 
group.
INT4 addOpt 0=Remove, 1=Add, -1= ExcludeOutput:
None
Return Code:FE_FAIL Invalid entityTYPE to add to, remove from, or ex clude from a group
Remarks/Usage:This method works just like the Ad d method except that you can ch oose to Add, Remove, or Exclude 
instead of only being able to Add.
Example:None
AddRelated   API-2595
5.36.2.20  AddRelated
AddRelated
( void )
Description:This method adds entitie s related to the entities already in the group currently in the object.
Input:NoneOutput:NoneReturn Code:FE_FAILRemarks/Usage:Performs the same function as the “Group, Operations, Add Related Entities” command.
Example:None
 API-2596  SelectModel
5.36.2.21  SelectModel
SelectModel
( void )
Description:This method creates rules that sel ect all possible entities in a model.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method is like the Group, Operations, Select Model  command. The group must be Put to the data-
base before these selections will take effect.
Example:None
SelectMesh   API-2597
5.36.2.22  SelectMesh
SelectMesh
( elemSET )
Description:This method creates a group that co ntains all of the nodes, properties, materials, coordinate systems, 
loads, and constraints that are referenced by the selected elements.
Input:
INT4 elemSETThe set of elements to use to co mpute the desired subset of the 
model.
Output:NoneReturn Code:
None
Remarks/Usage:This is like the Group, Operations, Select Mesh  command. The group must be Put to the database before 
these selections will take effect.
Example:None
 API-2598  SelectContact
5.36.2.23  SelectContact
SelectContact
( contactSET )
Description:This method creates a group that co ntains all of the entities referenced by a selected set of contact seg-
ments/surfaces.
Input:INT4 contactSET The set of contact segments/surfaces used to generate the group.Output:NoneReturn Code:NoneRemarks/Usage:This is like the Group, Operations, Contact Segment/Surface  command. The group must be Put to the 
database before these selections will take effect.
Example:None
SelectAllOnLayer   API-2599
5.36.2.24  SelectAllOnLayer
SelectAllOnLayer
( startLayer, endLayer )
Description:This method selects all of the entiti es in the current model that are on layers “startLayer” thru “end-
Layer.
Input:INT4 startLayer The ID of the lowest layer to select.
INT4 endLayerThe ID of the highest layer to sel ect (If 0, then just entities on start-
Layer are selected)
Output:None
Return Code:
NoneRemarks/Usage:This is like the Group, Operations, Generate Entities On Layer  command, except  the entities are 
selected into the current Group object.
Example:None
 API-2600  ReferencedGroups
5.36.2.25  ReferencedGroups
ReferencedGroups
( void )
Description:This method creates and returns a Set object that cont ains the IDs of all sub-groups that are referenced 
by this group. 
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:The Set object is returned in  place of the return code. 
Example:None
Clear   API-2601
5.36.2.26  Clear
Clear
( void )
Description:This function simply removes all ru les and entities from the Group object
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-2602  
5.37  Layer Objects
Layer objects correspond to the layer definitions in your model.  They are derived from Entity 
objects, so, in addition to the properties and methods described here, all of the properties and 
methods defined for Entity objects are also availa ble for Layer objects. For more information, see 
Section 5.1, "Common Entity  Properties and Methods".
Use the feLayer method of the FEMAP Appl ication object to create Layer Objects.
5.37.1  Layer Object Properties
Layers are always stored with their SetID equal to the setID of the load set,  and the ID equal to the 
Layer ID.
Property Description
INT4 color The layer color.STRING title The layer title (maximum 79 characters).
InitAllLayerInfo   API-2603
5.37.2  Layer Object Methods
There following methods are available in addition to th e standard entity methods.
5.37.2.1  InitAllLayerInfo
InitAllLayerInfo
( bContents, bGroupReference, bViewReference )
Description:This method scans the model and bu ilds the data structure for the Co ntents, Group References, and/or 
View References for a layer,  then loads this data into  the Layer Object. This meth od is the same as using 
a combination of the InitLayerCon tentsInfo, InitLayerGroupReferen ceInfo, and/or InitLayerViewRef-
erenceInfo methods with some  specific values specified.
Input:
BOOL bContentsWhen True, builds the data structur e for contents (entities) of the 
layer
BOOL bGroupReference When True, builds the data  structure for group references of the layer
BOOL bViewReference When True, builds the data  structure for view references of the layer
Output:NoneReturn Code:NoneRemarks/Usage:This method or a combination of the InitLayerCont entsInfo, InitLayerGroupReferences, and/or InitLay-
erViewReferenceInfo methods set to the following values:
InitLayerContentsInfo(0, 0, NULL, 0)
InitLayerGroupReferenceInfo (0, 0)
InitLayerViewReferenceInfo (0, 0)
...and this method or one of the individual method s MUST be called in order for the other methods of 
the Layer Object to function properly, otherwise th ey will return FE_INV ALID.  For more information 
of the individual methods, see Section 5.37.2.2, "InitLayerContentsInfo", Section 5.37.2.3, "InitLayer-GroupReferenceInfo", and/or Section 5.37.2.4, "InitLayerViewReferenceInfo".
Example:None
 API-2604  InitLayerContentsInfo
5.37.2.2  InitLayerContentsInfo
InitLayerContentsInfo
( nLayerSetID, nNumEntityTypes, EntityTypes, nSetSetID )
Description:This method scans the mode l and builds the data structure for Conten ts (entities) for a layer, then loads 
this data into the Layer Object
Input:
INT4 nLayerSetIDID of a Set Object containing IDs of  layers. Entering a value of 0 will 
consider all layers. Alternatively,  entering a negative value will only 
consider a single layer.
INT4 nNumEntityTypesNumber of entity types in EntityTy pes. Entering a value of 0 will 
consider all entity types.
V ARIANT EntityTypesArray of entity type IDs. If a valu e of 0 has been entered for nNu-
mEntityTypes, this argume nt can be set to NULL.
INT4 nSetSetIDID of a Set Object containing IDs of Load/Constraint Sets. Entering a 
value of 0 will consider all Load /Constraint Sets. Alternatively, 
entering a negative value will only consider a single Load/Constraint 
Set.
Output:NoneReturn Code:NoneRemarks/Usage:This method, when us ed with these values:
InitLayerContentsInfo(0, 0, NULL, 0)...is equivalent to using InitAllLay erInfo with True for the bContents argument and either of these meth-
ods MUST be called in order for the other methods of  the Layer Object to fu nction properly, otherwise 
they will return FE_INV ALID. For more information abou t the combined method for initializing and 
populating layer information, see Se ction 5.37.2.1, "InitAllLayerInfo".
Example:None
InitLayerGroupReferenceInfo   API-2605
5.37.2.3  InitLaye rGroupReferenceInfo
InitLayerGroupReferenceInfo
( nLayerSetID, nGroupSetID )
Description:This method scans the model and bu ilds the data structure for groups that reference the layers, then 
loads this data into the Layer Object
Input:
INT4 nLayerSetIDID of a Set Object containing IDs of  layers. Entering a value of 0 will 
consider all layers. Alternatively,  entering a negative value will only 
consider a single layer.
INT4 nGroupSetIDID of a Set Object containing IDs of groups. Entering a value of 0 
will consider all groups. Alternativel y, entering a negative value will 
only consider a single group.
Output:
None
Return Code:NoneRemarks/Usage:This method, when us ed with these values:
InitLayerGroupReferenceInfo(0, 0)...is equivalent to using InitAllLay erInfo with True for the bGroupRe ference argument and either of 
these methods MUST be called in orde r for the other methods of the Layer Object to function properly, 
otherwise they will return FE_INV ALID. For more information about the comb ined method for initial-
izing and populating layer in formation, see Section 5. 37.2.1, "InitAllLayerInfo".
Example:None
 API-2606  InitLayerViewReferenceInfo
5.37.2.4  InitLayerViewReferenceInfo
InitLayerViewReferenceInfo
( nLayerSetID, nViewSetID )
Description:This method scans the model and builds the data structure for layers disp layed on views, then loads this 
data into the Layer Object
Input:
INT4 nLayerSetIDID of a Set Object containing IDs of  layers. Entering a value of 0 will 
consider all layers. Alternatively,  entering a negative value will only 
consider a single layer.
INT4 nViewSetIDID of a Set Object containing IDs of views. Entering a value of 0 will 
consider all views. Alternatively, entering a negative value will only 
consider a single view.
Output:
None
Return Code:NoneRemarks/Usage:This method, when us ed with these values:
InitLayerViewReferenceInfo(0, 0)...is equivalent to using InitAllLaye rInfo with True for the bViewRefer ence argument and either of these 
methods MUST be called in order for the other method s of the Layer Object to function properly, other-
wise they will return FE_INV ALID. For more information ab out the combined method for initializing 
and populating layer information, see Section 5.37.2.1, "InitAllLayerInfo".
Example:None
ClearLayerInfo   API-2607
5.37.2.5  ClearLayerInfo
ClearLayerInfo
( void )
Description:This method clears the layer information from a Layer Object.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method only ne eds to be used to clear information from the Layer Object which was placed there 
by the InitAllLayerInfo method (Sec tion 5.37.2.1, "InitAllLayerInfo") or any combination of the indi-
vidual InitLayerContentsInfo (Sec tion 5.37.2.2, "InitLayerContentsIn fo"), InitLayerG roupReferences 
(Section 5.37.2.3, "InitLayerGrou pReferenceInfo"), and/or InitLayerViewReferenceInfo (Section 
5.37.2.4, "InitLayerViewReferenceInfo") methods.
Example:None
 API-2608  ResetNextLayerInfo
5.37.2.6  ResetNextLayerInfo
ResetNextLayerInfo
( void )
Description:This method resets the data structure with the informatio n and contents of a layer. 
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:None.Example:None
NextLayerInfo   API-2609
5.37.2.7  NextLayerInfo
NextLayerInfo
( nDesiredLayerID, nEntitySetID, nDataType, nInSetID, nOnType )
Description:This method fills a Set Object with  the next type of entity in the da ta structure of the desired layer. 
Input:INT4 nDesiredLayerID The ID of the layer to retrieve  information on.
INT4 nEntitySetID The ID of the Set Object to fill. Output:
INT4 nDataTypeThe enum of the data type the Set Object was filled with. For all data 
types, see Section 3.3.6, "Entity Types".
INT4 nInSetIDThe ID of the load or constraint set associated to nDataType. All data 
types other than loads or constraints nInSetID = 1. 
INT4 nOnTypeThe enum of the data type the enti ties in nEntitySet are associated to. 
For example, nInSetID would be th e ID of the load/constraint set, 
and nOnType would be the data type  the load or constraint is on, 
FT_NODE, FT_ELEM, FT_CURVE, etc. All data types other than 
loads or constraints nOnType = nType.
Return Code:
FE_INV ALIDInformation about the “co ntents” layers (entities) , layers referenced 
by groups, and/or views where the layer is visible has not been prop-erly added to the Layer Object. See Remarks/Usage section.
Remarks/Usage:This method requires information to  be loaded into the Layer Object  by the InitAllLayerInfo method 
(Section 5.37.2.1, "InitAllL ayerInfo") or any combin ation of the individual InitLayerContentsInfo (Sec-
tion 5.37.2.2, "InitLayerContents Info"), InitLayerGroupReferences (Section 5.37.2.3, "InitLayer-
GroupReferenceInfo"), and/or InitLayer ViewReferenceInfo (Section 5.37.2.4, 
"InitLayerViewReferenceInfo") methods If this is not done, prior to using this method, a return code of  
FE_INV ALID will be returned.
Example:None
 API-2610  FindLayerInfo
5.37.2.8  FindLayerInfo
FindLayerInfo
( nLayerID, nDataType, nInSetID, nOnType, nEntitySetID, bClearEntitySet )
Description:This method fills a Set Object with the entities in a load or constraint on a specify layer. 
Input:INT4 nLayerID The ID of the laye r to retrieve information on.
INT4 nDataTypeThe enum of the data ty pe the Set Object was filled with. 13 = FT_-
SURF_LOAD, 14 = FT_GEOM_LOAD, 15 = FT_NTHERM_-
LOAD, 16 = FT_ETHERM_LOAD, 18 = FT_BCO, 19 = 
FT_BC_GEOM, 20 = FT_BEQ.
INT4 nInSetID The ID of the Set Object to fill. 
INT4 nOnTypeThe enum of the data type the enti ties in nEntitySet are associated to. 
For example, nInSetID would be th e ID of the load/constraint set, 
and nOnType would be the data type  the load or constraint is on, 
FT_NODE, FT_ELEM, FT_CURVE, etc. 
INT4 nEntitySetID The ID of the Set Object to fill. BOOL bClearEntitySet If True, nEntitySet w ill be cleared of all entities beforehand.
Output:NoneReturn Code:
FE_INV ALIDInformation about the “co ntents” layers (entities) , layers referenced 
by groups, and/or views where the layer is visible has not been prop-erly added to the Layer Object. See Remarks/Usage section.
Remarks/Usage:This method requires information to  be loaded into the Layer Object  by the InitAllLayerInfo method 
(Section 5.37.2.1, "InitAllL ayerInfo") or any combin ation of the individual InitLayerContentsInfo (Sec-
tion 5.37.2.2, "InitLayerContents Info"), InitLayerGroupReferences (Section 5.37.2.3, "InitLayer-
GroupReferenceInfo"), and/or InitLayer ViewReferenceInfo (Section 5.37.2.4, 
"InitLayerViewReferenceInfo") methods If this is not done, prior to using this method, a return code of  
FE_INV ALID will be returned.
Example:None
FindAllReferencedLayers   API-2611
5.37.2.9   FindAlIReferencedLayers
FindAllReferencedLayers
( nLayerSetID )
Description:This method fills the Set Object of the specified ID with all th e layers which refere nce any information 
currently loaded in the Layer Object.
Input:
INT4 nLayerSetIDID of an existing set object to fill w ith the IDs of all the layers which 
currently have information load ed into the Layer Object. See 
Remarks/Usage section.
Output:NoneReturn Code:
FE_INV ALIDInformation about the “co ntents” layers (entities) , layers referenced 
by groups, and/or views where the layer is visible has not been prop-erly added to the Layer Object. See Remarks/Usage section.
Remarks/Usage:This method requires information to  be loaded into the Layer Object  by the InitAllLayerInfo method 
(Section 5.37.2.1, "InitAllL ayerInfo") or any combin ation of the individual InitLayerContentsInfo (Sec-
tion 5.37.2.2, "InitLayerContents Info"), InitLayerGroupReferences (Section 5.37.2.3, "InitLayer-
GroupReferenceInfo"), and/or InitLayer ViewReferenceInfo (Section 5.37.2.4, 
"InitLayerViewReferenceInfo") methods. If this is not done, prior to using this method, a return code of  
FE_INV ALID will be returned.
Example:None
 API-2612  FindEmptyLayers
5.37.2.10  FindEmptyLayers
FindEmptyLayers
( nLayerSetID )
Description:This method fills the Set Object of the specified ID with all th e layers in the model which are currently 
empty, based on the information curre ntly loaded in the Layer Object.
Input:
INT4 nLayerSetIDID of an existing set object to fill with the IDs of the layers which are 
currently empty based on the informa tion currently loaded into in the 
Layer Object by the “Init” met hods. See Remarks/Usage section.
Output:NoneReturn Code:
FE_INV ALIDInformation about the “co ntents” layers (entities) , layers referenced 
by groups, and/or views where the layer is visible has not been prop-erly added to the Layer Object. See Remarks/Usage section.
Remarks/Usage:This method requires information to  be loaded into the Layer Object  by the InitAllLayerInfo method 
(Section 5.37.2.1, "InitAllL ayerInfo") or any combin ation of the individual InitLayerContentsInfo (Sec-
tion 5.37.2.2, "InitLayerContents Info"), InitLayerGroupReferences (Section 5.37.2.3, "InitLayer-
GroupReferenceInfo"), and/or InitLayer ViewReferenceInfo (Section 5.37.2.4, 
"InitLayerViewReferenceInfo") methods If this is not done, prior to using this method, a return code of  
FE_INV ALID will be returned.
Example:None
FindMissingLayers   API-2613
5.37.2.11  FindMissingLayers
FindMissingLayers
( nLayerSetID )
Description:This method fills the Set Object of the specified ID with all th e layers in the model which have entities 
assigned to them, but do not currently exist in the model.
Input:
INT4 nLayerSetIDID of an existing set object to f ill with the IDs of the layers which 
have entities assigned to them, ba sed on the information currently 
loaded into in the Layer Object by  the “Init” methods, but do not cur-
rently exist in the model. See Remarks/Usage section.
Output:NoneReturn Code:
FE_INV ALIDInformation about the “co ntents” layers (entities) , layers referenced 
by groups, and/or views where the layer is visible has not been prop-
erly added to the Layer Object. See Remarks/Usage section.
Remarks/Usage:This method requires information to  be loaded into the Layer Object  by the InitAllLayerInfo method 
(Section 5.37.2.1, "InitAllL ayerInfo") or any combin ation of the individual InitLayerContentsInfo (Sec-
tion 5.37.2.2, "InitLayerContents Info"), InitLayerGroupReferences (Section 5.37.2.3, "InitLayer-
GroupReferenceInfo"), and/or InitLayer ViewReferenceInfo (Section 5.37.2.4, 
"InitLayerViewReferenceInfo") methods If this is not done, prior to using this method, a return code of  
FE_INV ALID will be returned.
Example:None
 API-2614  
5.38  Layup Objects
Layup objects correspond to the la yups in your model. They are derived from Entity objects so, in 
addition to the properties and methods described here, all of the properties and methods defined 
for Entity objects are also available for Layup ob jects. For more information, see Section 5.1, 
"Common Entity Proper ties and Methods". 
Use the feLayup method of the FE MAP Application object, or the Layup method of the Property 
object to create Layup objects.
5.38.1  Layup Object Properties
Layups are always stored with a SetID= 1, and the ID equal to the layup ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Prop erties"  for more  information. 
The ply information is stored as an array - with gl obalply, matlID, thickness and angle for each ply. 
Property Description
STRING title Layup title.INT4 NumberOfPlys The number of  plys in the layup definition
REAL8 LayupThicknessThe overall layup thickness (sum of all the ply thick-
nesses). Read-only.
INT4 globalply[0..NumberOfPlys-1]
or
V ARIANT vglobalplyArray of global ply IDs referenced by each ply. The 
V ARIANT form can only be used with layups of 500 
plies or less. To set ply data using the V ARIANT form, 
you must first set  NumberOfPlys to the number of plies you want to load from the V ARIANT.
INT4 matlID[0..NumberOfPlys-1]
orV ARIANT vmatlIDArray of material IDs refere nced by each ply. The V ARI-
ANT form can only be used with layups of 500 plies or 
less. To set ply data using the V ARIANT form, you must first set  NumberOfPlys to the number of plies you want 
to load from the V ARIANT.
REAL8 thickness[0..NumberOfPlys-1]
or
V ARIANT vthicknessArray of thicknesses referenced by each ply. The V ARI-
ANT form can only be used with layups of 500 plies or less. To set ply data using the V ARIANT form, you must 
first set  NumberOfPlys to the number of plies you want 
to load from the V ARIANT.
REAL8 angle[0..NumberOfPlys-1]
or
V ARIANT vangleArray of orientation angles referenced by each ply. The 
V ARIANT form can only be used with layups of 500 
plies or less. To set ply data using the V ARIANT form, 
you must first set  NumberOfPlys to the number of plies you want to load from the V ARIANT.
   API-2615
REAL8 failuretheory[0..NumberOfPlys-1]
or
V ARIANT vfailuretheoryArray of failure theory met hods referenced by each ply. 
The V ARIANT form can only be used with layups of 500 
plies or less. To set ply data using the V ARIANT form, 
you must first set NumberOfPlys to the number of plies you want to load from the V ARIANT.
REAL8 AMatrix[0..2,0..2]
or
V ARIANT vAMatrixComputed Value - [A] Matrix
REAL8 BMatrix[0..2,0..2]
or
V ARIANT vBMatrixComputed Value - [B] Matrix
REAL8 DMatrix[0..2,0..2]
orV ARIANT vDMatrixComputed Value - [D] Matrix
REAL8 AInvMatrix[0..2,0..2]
or
V ARIANT vAInvMatrixComputed Value - [A]
-1 Matrix
REAL8 BInvMatrix[0..2,0..2]
orV ARIANT vBInvMatrixComputed Value - [B]
-1 Matrix
REAL8 DInvMatrix[0..2,0..2]
or
V ARIANT vDInvMatrixComputed Value - [D]-1 Matrix
REAL8 InPlaneProp[0..7]
or
V ARIANT vInPlanePropIn-Plane Properties (Ex, Ey, Gxy, NUxy, NUyx, Alphax, 
Alphay, Alphaxy). The method “.Compute2” should be 
called beforehand to return real values.
REAL8 InPlanePropExcMemBend[0..4]
or
V ARIANT vInPlanePropExcMemBendFor informational purposes only . Excluded In-Plane Prop-
erties (Ex, Ey, Gxy, NUxy, NUyx, Alphax, Alphay, Alphaxy). The method “.Compute2” should be called 
beforehand to return real values.
REAL8 BendingProp[0..7]
orV ARIANT vBendingPropBending Properties (Exb, Eyb, Gxyb, NUxyb, NUyxb, 
Alphaxb, Alphayb, Alphaxyb)
REAL8 BendingPropExcMemBend[0..7]
or
V ARIANT vBendingPropExcMemBendFor informational purposes only. Excluded Bending Prop-
erties (Exb, Eyb, Gxyb, NUxyb, NUyxb, Alphaxb, 
Alphayb, Alphaxyb).Property Description
 API-2616  AddPly
5.38.2  Layup Object Methods
There following methods are available in addition to th e standard entity methods.
5.38.2.1  AddPly
AddPly
( nMatlID, dThickness, dAngle, nGlobalPly )
Description:This method adds a ply to the layup. If you need to  specify a different Failure Theory for each ply, see, 
Section 5.38.2.2, "AddPly2"
Input:INT4 nMatlID The ID of a mate rial referenced by the ply
REAL8 dThickness The thickness of the plyREAL8 dAngle The orientation angle of the plyINT4 nGlobalPly The ID of a Global Pl y referenced by this ply, if any.
Output:NoneReturn Code:NoneRemarks/Usage:This function simply adds a ply to the top of th e layup. Same as calling InsertPly with nPlyID = 
NumberOfPlys+1
Example:
AddPly2   API-2617
5.38.2.2  AddPly2
AddPly2
( nMatlID, dThickness, dAngle, nGlobalPly, nFailureTheory )
Description:This method adds a ply to the layup.
Input:INT4 nMatlID The ID of a mate rial referenced by the ply
REAL8 dThickness The thickness of the plyREAL8 dAngle The orientation angle of the plyINT4 nGlobalPly The ID of a Global Pl y referenced by this ply, if any.
INT4 nFailureTheory The ID of a Failure Th eory referenced by this ply, if any.
Output:NoneReturn Code:NoneRemarks/Usage:This function simply adds a ply to the top of th e layup. Same as calling InsertPly2 with nPlyID = 
NumberOfPlys+1
Example:
 API-2618  InsertPly
5.38.2.3  InsertPly
InsertPly
( nPlyID, nMatlID, dThickness, dAngle, nGlobalPly )
Description:This method inserts a ply into the layup. If you need to specify a diff erent Failure Theory for each ply, 
see, Section 5.38.2.4, "InsertPly2"
Input:
INT4 nPlyIDThe index of the ply to insert. Ply 1 is at the bottom. The IDs of all 
plys at and above this number are increased by one.
INT4 nMatlID The ID of a mate rial referenced by the ply
REAL8 dThickness The thickness of the plyREAL8 dAngle The orientation angle of the ply
INT4 nGlobalPly The ID of a Global Pl y referenced by this ply, if any.
Output:NoneReturn Code:NoneRemarks/Usage:
Example:
InsertPly2   API-2619
5.38.2.4  InsertPly2
InsertPly2
( nPlyID, nMatlID, dThickness, dAngle, nGlobalPly, nFailureTheory )
Description:This method inserts a ply into the layup.
Input:
INT4 nPlyIDThe index of the ply to insert. Ply 1 is at the bottom. The IDs of all 
plys at and above this number are increased by one.
INT4 nMatlID The ID of a mate rial referenced by the ply
REAL8 dThickness The thickness of the plyREAL8 dAngle The orientation angle of the plyINT4 nGlobalPly The ID of a Global Pl y referenced by this ply, if any.
INT4 nFailureTheory The ID of a Failure Th eory referenced by this ply, if any.
Output:NoneReturn Code:NoneRemarks/Usage:
Example:
 API-2620  SetPly
5.38.2.5  SetPly
SetPly
( nPlyID, nMatlID, dThickness, dAngle, nGlobalPly )
Description:This method replaces the data for a ply in the layup. If you need to sp ecify a different Failure Theory for 
each ply, see Section 5.38.2.6, "SetPly2"
Input:INT4 nPlyID The index of the ply to replace/set. Ply 1 is at the bottom. 
INT4 nMatlID The ID of a mate rial referenced by the ply
REAL8 dThickness The thickness of the plyREAL8 dAngle The orientation angle of the plyINT4 nGlobalPly The ID of a Global Pl y referenced by this ply, if any.
Output:NoneReturn Code:
FE_NOT_A V AILABLEnPlyID does not specify a ply that cu rrently exists in the layup. Use 
AddPly2 or InsertPly2 to create a new ply.
Remarks/Usage:
Example:
SetPly2   API-2621
5.38.2.6  SetPly2
SetPly2
( nPlyID, nMatlID, dThickness, dAngle, nGlobalPly, nFailureTheory )
Description:This method replaces the da ta for a ply in the layup.
Input:INT4 nPlyID The index of the ply to replace/set. Ply 1 is at the bottom. 
INT4 nMatlID The ID of a mate rial referenced by the ply
REAL8 dThickness The thickness of the plyREAL8 dAngle The orientation angle of the plyINT4 nGlobalPly The ID of a Global Pl y referenced by this ply, if any.
INT4 nFailureTheory The ID of a Failure Th eory referenced by this ply, if any.
Output:NoneReturn Code:
FE_NOT_A V AILABLEnPlyID does not specify a ply that cu rrently exists in the layup. Use 
AddPly2 or InsertPly2 to create a new ply.
Remarks/Usage:
Example:
 API-2622  SetAllPly
5.38.2.7  SetAllPly
SetAllPly
( nNumPly, nMatlID, dThickness, dAngle, nGlobalPly )
Description:This method replaces the data for a ll plys in the layup. If you need to  specify different Failure Theories 
for each ply, see Section 5.38.2.8, "SetAllPly2"
Input:INT4 nNumPly The number of plys being specified.INT4 nMatlID[0..nNumPly-1 ] The IDs of materials referenced by the plys
REAL8 dThickness[0..nNumPly-1 ] The thicknesses of the plys
REAL8 dAngle[0..nNumPly-1] The orientation angles of the plysINT4 nGlobalPly[0..nNumPly-1] T he IDs of Global Plys referenced by the plys, if any.
Output:NoneReturn Code:FE_FAIL Unable to set the ply data.Remarks/Usage:Unlike SetPly, this method simply clears all previo us ply definitions and repl aces the entire layup with 
the definition supplied in the arrays. The first en try in the arrays becom es the bottom of the layup.
Example:
SetAllPly2   API-2623
5.38.2.8  SetAllPly2
SetAllPly2
( nNumPly, nMatlID, dThickness, dAngle, nGlobalPly, nFailureTheory )
Description:This method replaces the data  for all plys in the layup.
Input:INT4 nNumPly The number of plys being specified.INT4 nMatlID[0..nNumPly-1] The IDs of  materials referenced by the plys
REAL8 dThickness[0..nNumPly-1 ] The thicknesses of the plys
REAL8 dAngle[0..nNumPly-1] The orientation angles of the plysINT4 nGlobalPly[0..nNumPly-1] The IDs of Glob al Plys referenced by the plys, if any.
INT4 nFailureTheory[0..nNumPly-1] The IDs of Failure Theories referenced by the plys, if any.
Output:NoneReturn Code:FE_FAIL Unable to set the ply data.Remarks/Usage:Unlike SetPly2, this method simply  clears all previous ply definitions  and replaces the entire layup with 
the definition supplied in the arrays. The first en try in the arrays becom es the bottom of the layup.
Example:
 API-2624  GetPly
5.38.2.9  GetPly
GetPly
( nPlyID, nMatlID, dThickness, dAngle, nGlobalPly )
Description:Returns all of the data for a selected ply. If you need  to retrieve a different Failure Theory for each ply, 
see, Section 5.38.2.10, "GetPly2"
Input:INT4 nPlyID The index of the ply to retrieve. Ply 1 is at the bottom. 
Output:INT4 nMatlID The ID of a mate rial referenced by the ply
REAL8 dThickness The thickness of the plyREAL8 dAngle The orientation angle of the plyINT4 nGlobalPly The ID of a Global Pl y referenced by this ply, if any.
Return Code:
FE_NOT_A V AILABLEThe ply ID that you specified did not exist. It must be between 1 and 
the number of plys in the layup.
Remarks/Usage:
Example:
GetPly2   API-2625
5.38.2.10  GetPly2
GetPly2
( nPlyID, nMatlID, dThickness, dAngle, nGlobalPly, nFailureTheory )
Description:Returns all of the data for a selected ply.Input:INT4 nPlyID The index of the ply to retrieve. Ply 1 is at the bottom. 
Output:INT4 nMatlID The ID of a mate rial referenced by the ply
REAL8 dThickness The thickness of the plyREAL8 dAngle The orientation angle of the plyINT4 nGlobalPly The ID of a Global Pl y referenced by this ply, if any.
INT4 nFailureTheory The ID of a Failure Th eory referenced by this ply, if any.
Return Code:
FE_NOT_A V AILABLEThe ply ID that you specified did not exist. It must be between 1 and 
the number of plys in the layup.
Remarks/Usage:
Example:
 API-2626  GetAllPly
5.38.2.11  GetAllPly
GetAllPly
( nPlyID, nMatlID, dThickness, dAngle, nGlobalPly )
Description:Returns all of the data for all plys. If you need to sp ecify a different Failure Theory for each ply see, Sec-
tion 5.38.2.12, "GetAllPly2"
Input:NoneOutput:
INT4 nNumPlyThe number of plys, and the number of entries in each of the 
arrays
INT4 nMatlID[0..nNumPly-1] The IDs of  materials referenced by each ply
REAL8 dThickness[0..nNumPly-1] T he thicknesses of each ply
REAL8 dAngle[0..nNumPly-1] The orientation angles of each plyINT4 nGlobalPly[0..nNumPly-1] The IDs of Glob al Plys referenced by each ply, if any.
Return Code:FE_FAIL Unable to retrieve ply data.Remarks/Usage:
Example:
GetAllPly2   API-2627
5.38.2.12  GetAllPly2
GetAllPly2
( nPlyID, nMatlID, dThickness, dAngle, nGlobalPly, nFailureTheory )
Description:Returns all of the data for all plys.Input:NoneOutput:
INT4 nNumPlyThe number of plys, and the numb er of entries in each of the 
arrays
INT4 nMatlID[0..nNumPly-1] The IDs of  materials referenced by each ply
REAL8 dThickness[0..nNumPly-1] T he thicknesses of each ply
REAL8 dAngle[0..nNumPly-1] The orientation angles of each plyINT4 nGlobalPly[0..nNumPly-1] The  IDs of Global Plys refere nced by each ply, if any.
INT4 nFailureTheory[0..nNumPly-1] The IDs of Fa ilure Theory referenced  by each ply, if any.
Return Code:FE_FAIL Unable to retrieve ply data.Remarks/Usage:
Example:
 API-2628  DeletePly
5.38.2.13  DeletePly
DeletePly
( nPlyID )
Description:This method removes a ply from the layup.Input:
INT4 nPlyIDThe index of the ply to delete. Ply 1 is at the bottom. The IDs of all 
plys at and above this nu mber are decreased by one.
Output:NoneReturn Code:
FE_NOT_A V AILABLEThe ply ID that you specified did not exist. It must be between 1 and 
the number of plys in the layup.
Remarks/Usage:
Example:
Clear   API-2629
5.38.2.14  Clear
Clear
( void )
Description:This method removes a ll plys from the layup.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:
Example:
 API-2630  Compute
5.38.2.15  Compute
Compute
( dynamic )
Description:This method computes overall layup properties.Input:
BOOL dynamicIf True, the results will be immediately sent to the Entity Info win-
dow (if it is open). If False, the results will be sent to the message 
window.
Output:NoneReturn Code:
None
Remarks/Usage:See Compute2( ) for more optionsExample:
Compute2   API-2631
5.38.2.16  Compute2
Compute2
( nOption )
Description:This method computes overall layup properties.Input:
INT4 nOption0=No Echo, just compute. 1=Compute and Echo to Entity Info. 
2=Compute and Echo to Message Window.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:
 API-2632  HasGlobalPly
5.38.2.17  HasGlobalPly
HasGlobalPly
( nGlobalPlyID, nPlyNum )
Description:This method indicates whether or not a selected global ply is used in a layup.
Input:INT4 nGlobalPlyID The ID of the Global Ply that you want to search for.
BOOL bIndexIf True, nPlyNum will be the value of a zero-based index in which 
the actual ply IDs are stored (i.e., ply 1 will return a value of 0, ply 2 
will return a value of 1, etc). If False, nPlyNum is the actual ply ID.
Output:
INT4 nPlyNumDepending on the value set for bIndex , is either the index (0 is the 
bottom ply) or ID (1 is the bottom ply) of the ply that references nGlobalPlyID - if any.
Return Code:FE_NOT_A V AILABLE The layup has no plys to searchFE_FAIL The selected global ply was not used.Remarks/Usage:This method was changed for FEMAP 2019.1, as previous versions did not include the second argu-
ment, bIndex. This was changed because the call actu ally returned a zero-base d index value for nPly-
Num, not the actual ply number. The bIndex argument now allows the user  to choose to return the zero-
based index or the actual ply number.
Example:
HasMaterial   API-2633
5.38.2.18  HasMaterial
HasMaterial
( nMatlID )
Description:This method indicates whether or not a selected material is used in a layup.
Input:INT4 nMatlID The ID of the Materi al that you want to search for.
Output:NoneReturn Code:FE_NOT_A V AILABLE The layup has no plys to searchFE_FAIL The selected material was not used.Remarks/Usage:
Example:
 API-2634  HasFullGlobalPly
5.38.2.19  HasFullGlobalPly
HasFullGlobalPly
(  )
Description:This method indicates whether or not every ply in a layup references a global plyInput:NoneOutput:NoneReturn Code:FE_OK Every ply references a global plyFE_FAIL At least one ply does not reference a global plyRemarks/Usage:
Example:
   API-2635
5.39  LoadBolt Object
LoadBolt objects correspond to bolt preloads in your model. Th ey are derived from Entity objects, 
so in addition to the propertie s and methods described here, a ll of the properties and methods 
defined for Entity objects are also available for LoadBolt objects. For mo re information, see Sec-
tion 5.1, "Common Entity Properties and Methods". 
Use the feLoadBolt method of the FEMAP App lication object to crea te LoadBolt objects.
5.39.1  LoadBolt Ob ject Properties
LoadBolts are always stored with their SetID equal to the setID of the load set, and the ID equal to 
the bolt region ID where they are applied.
When you create a new LoadBolt, it will always reference the activ e load set. You can change the 
set that it references simply by changing the setID  parameter.
Property Description
INT4 color The load color.INT4 layer The ID of the laye r associated with the load.
REAL8 preload The elemental temperature.
INT4 LoadDefinitionID The ID of the load de finition that contains this load (0=None)
INT4 PreloadType The Type of Bolt Prel oad. 0=Force, 1=Strain, 2=Displacement
 API-2636  AddArray
5.39.2  LoadBolt Object Methods
5.39.2.1  AddArray
AddArray
( count,  RegionID, Values )
Description:This method creates multiple  Bolt Preloads. This method is obsole te and should be replaced by PutAr-
ray.
Input:
INT4 countThe number of bolt preloads to cr eate, and the number of IDs in 
RegionID
INT4 RegionID[0..count-1]The Bolt Region IDs where preloads  will be created. One preload is 
created on each ID.
REAL8 Values[0..count-1] Bolt Preload Va lues. Refer to “preload” property.
Output:
NoneReturn Code:FE_FAIL The Loads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, you must properly specify the other parameters in the object - such as, color 
and setID, and any other types required for your load s. This method simply us es the data you specify 
here to overwrite specific values in the LoadBolt object, and create a new preload for each entry in the 
arrays.
Example:None
PutArray   API-2637
5.39.2.2  PutArray
PutArray
( count,  RegionID, Values )
Description:This method creates multiple Bolt PreloadsInput:
INT4 countThe number of bolt preloads to cr eate, and the number of IDs in 
RegionID
INT4 RegionID[0..count-1]The Bolt Region IDs where preloads  will be created. One preload is 
created on each ID.
REAL8 Values[0..count-1] Bolt Preload Va lues. Refer to “preload” property.
Output:
None
Return Code:FE_FAIL The Loads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, you must properly specify the other parameters in the object - such as, color 
and setID, and any other types required for your load s. This method simply us es the data you specify 
here to overwrite specific values in the LoadBolt object, and create a new preload for each entry in the 
arrays. For more informat ion on how to create loads, see Sectio n 2.8, "Working with Loads and Con-
straints".
Example:None
 API-2638  GetAllArray
5.39.2.3  GetAllArray
GetAllArray
( count,  RegionID, Layer, Color, LoadDefinitionID, BoltType, BoltPreload, BoltLength )
Description:This method returns informa tion on multiple Bolt Preloads
Input:NoneOutput:
INT4 countThe number of bolt preloads to cr eate, and the number of IDs in 
RegionID
INT4 RegionID[0..count-1]The Bolt Region IDs where preloads  will be created. One preload is 
created on each ID.
INT4 Layer[0..count-1] The IDs of the layers the loads are on.
INT4 Color[0..coun t-1] The IDs of the load color.
INT4 LoadDefini-
tionID[0..count-1]The IDs of the Load Definitions.
INT4 BoltType[0..count-1]The type of bolt.
[0] = Load_bp[1] = Strain_bp
[2] = Disp_bp.
REAL8 BoltPreload[0..count-
1]The Preload Values.
REAL8 BoltLength[0..count-1] The Length Values.
Return Code:FE_NOT_A V AILABLE No bolt preloads on  the mesh exist in the Load Set.
FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, y ou must properly specify the setID parameter in the object.
Example:None
PutAllArray   API-2639
5.39.2.4  PutAllArray
PutAllArray
( count,  RegionID, Layer, Color, LoadDefinitionID, BoltType, BoltPreload, BoltLength )
Description:This method creates multiple Bolt PreloadsInput:
INT4 countThe number of bolt preloads to cr eate, and the number of IDs in 
RegionID
INT4 RegionID[0..count-1]The Bolt Region IDs where preloads  will be created. One preload is 
created on each ID.
INT4 Layer[0..count-1] The IDs of the layers the loads are on.
INT4 Color[0..coun t-1] The IDs of the load color.
INT4 LoadDefini-
tionID[0..count-1]The IDs of the Load Definitions.
INT4 BoltType[0..count-1]The type of bolt.
[0] = Load_bp[1] = Strain_bp
[2] = Disp_bp.
REAL8 BoltPreload[0..count-
1]The Preload Values.
REAL8 BoltLength[0..count-1] The Length Values.
Output:NoneReturn Code:FE_FAIL The bolt preloads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method , you must properly specify the setID pa rameter in the object. For more infor-
mation on how to create loads, see Section 2.8, "Working with Loads and Constraints".
Example:None
 API-2640  Property
5.40  LoadDefinition Objects
LoadDefinition objects corre spond to the load definitions in yo ur model. They group individual 
loads into related sets and provid e a title for the set. They are de rived from Entity objects, so in 
addition to the properties and methods described here, all of the properties and methods defined 
for Entity objects are also available for Load Defi nition objects. For more information, see Section 
5.1, "Common Entity Pr operties and Methods". 
Use the feLoadDefinition method  of the FEMAP Application ob ject to create LoadDefinition 
objects.
5.40.1  LoadDefiniti on Object Properties
LoadDefinition objects are always stored with their SetID equal to  the setID of the load set; how-
ever, their IDs simply go from 1 to N. To find a par ticular object, you must retrieve each object in 
the set and check the loads it contains.
Property Description
STRING title Load Definition title.
INT4 LoadTypeThe type of load that is refere nced by this load definition. 
For more information on Load Types refer to the table in 
Section 3.3.7, "FEMAP Constants"
INT4 DataTypeThe type of entities that are refe renced by this load defini-
tion. For more information on  Entity Types refer to the 
table in Section 3.3.6, "En tity Types". Can be FT_SURF_-
LOAD, FT_GEOM_LOAD, FT_NTHERM_LOAD, or 
FT_ETHERM_LOAD
PutAll   API-2641
5.40.2  LoadDefinit ion Object Methods
5.40.2.1  PutAll
PutAll
( entID, enDataType, enLoadType, sTitle  )
Description:This method stores a Load Definition with the sp ecified ID along with all the available options.
Input:INT4 entID The ID of the Load Definition to store.INT4 DataType
Refer to the property descrip tions for each of these items. INT4 LoadType
STRING Title
Output:
NoneReturn Code:FE_FAIL Unable to store the entity with the specified IDRemarks/Usage:Unlike the standard Put method, th is function loads all of the properties as arguments. If you are updat-
ing all of the properties before stor ing an entity, this function will be f aster than multiple  calls to load 
each property individually.
Example:None
 API-2642  ResetNextLoad
5.40.2.2  ResetNextLoad
ResetNextLoad
( void )
Description:This method initializes all options prior to calling the “NextLoad” method below
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:This method is used prior to callin g NextLoad to specify wh ich loads will be retrieve d. It simply resets 
this  object so that the next call to NextLoad will return the first load  available in the object.
Example:
NextLoad   API-2643
5.40.2.3  NextLoad
NextLoad
( pDISPATCH )
Description:This method returns the next available load that is cont ained in the Load Definition
Input:NoneOutput:
OBJECT pDISPATCHThe next load object. Depending on the type of the load definition 
this could be a LoadGeom, LoadMesh, LoadNTemp or LoadGeom 
object
Return Code:
FE_FAILThere are no more loads of the specified type to retrieve. Call Reset-
NextLoad to go back to  the first load, if you want to retrieve the 
loads again.
Remarks/Usage:This method, coupled with ResetNextLoad provides an easy way to retrieve all loads from a Load Defi-
nition.
For any method where API obje cts are returned as parameters, such as this one, it is your responsibility 
to free that object when you are finished using the object. Some pr ogramming languages like Basic will 
do this automatically, but others lik e C++, require you to do this manu ally. The objects are only created 
or returned when the Return Code is FE_OK.
Example:
 API-2644  CountLoads
5.40.2.4  CountLoads
CountLoads
( void )
Description:This method returns the number of loads referenced by a load definition, as a return code.
Input:NoneOutput:NoneReturn Code:INT4 numLoads The number of loads re ferenced by this load definition.
Remarks/Usage:This method relies on the current Load De finition ID to count the referenced loads
Example:
IsTotalLoad   API-2645
5.40.2.5  IsTotalLoad
IsTotalLoad
(  )
Description:This method indicates whether the current load definition represents a total load applied to geometry.
Input:NoneOutput:NoneReturn Code:FE_OK Load Definition represents a total loadFE_FAIL Not a total loadFE_INV ALID Load is not a applied to geometry.Remarks/Usage:NoneExample:
 API-2646  SetTotalLoad
5.40.2.6  SetTotalLoad
SetTotalLoad
( bTotalLoad )
Description:This method sets whether the cu rrent load definition is a total load applied on the geometry.
Input:BOOL bTotalLoad If TRUE, load is set to total load. Output:NoneReturn Code:FE_OK Load Definition is set to a total loadFE_INV ALID Load is not a applied to geometry.Remarks/Usage:NoneExample:
   API-2647
5.41  LoadETemp Objects
LoadETemp objects correspond to the elemental temperatures in yo ur model. They are derived 
from Entity objects, so in  addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are also available for LoadETemps objects. For more 
information, see Section 5.1, "Com mon Entity Properties and Methods". 
Use the feLoadETemp method of the FEMAP App lication object to create LoadETemp objects.
5.41.1  LoadETemp Object Properties
LoadETemps are always stored with their SetID equa l to the setID of the load set, and the ID equal 
to the element ID where they are applied.
When you create a new LoadETemp,  it will always reference the ac tive load set. You can change 
the set that it references simply by changing the setID  parameter.
Property Description
INT4 color The load color.INT4 layer The ID of the laye r associated with the load.
BOOL expanded True if this is a lo ad from an expanded geometric load.
REAL8 temp The elemental temperature.REAL8 phase The phase value associ ated with the temperature. 
INT4 functionThe ID of a function that defi nes time dependency of the tem-
perature.
INT4 LoadDefinitionID The ID of the load de finition that contains this load (0=None)
REAL8 gradient The elemental 
linear thermal gradient .
 API-2648  AddArray
5.41.2  LoadETemp Object Methods
5.41.2.1  AddArray
AddArray
( count, doValues, doFunctions, ElemID, Values, FunctionID )
Description:This method creates multiple elemen tal temperatures. This method is obsolete and should be replaced 
by PutArray.
Input:
INT4 countThe number of temperatures to create, and the number of IDs in Ele-
mID
BOOL doValuesIf True, then the Values array must co ntain load values to be used. If 
False, then whatever is specified in the current object is used and 
Values is ignored
BOOL doFunctionsIf True, then the FunctionID array must contain Function IDs to be 
used. If False, then whatever is spec ified in the current object is used 
and FunctionID is ignored.
INT4 ElemID[0..count-1]The Element IDs where temperatures will be created. One tempera-
ture is created on each ID.
REAL8 Values[0..count-1] Temperature Values. Refer to “temp” property.
INT4 FunctionID[0..count-1]IDs of functions associated with each temperature. Specify 0 for con-
stant values.  Refer to “function” property.
Output:NoneReturn Code:FE_FAIL The Loads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, you must properly specify the other parameters in the object - such as, color 
and setID, and any other types required for your load s. This method simply us es the data you specify 
here to overwrite specific values  in the LoadETemp object, and create a new temperature for each entry 
in the arrays. This method puts data  directly into the database, so ther e is no need to call Put after using 
this method.
Example:None
PutArray   API-2649
5.41.2.2  PutArray
PutArray
( count, doValues, doFunctions, ElemID, Values, FunctionID )
Description:This method creates multip le elemental temperatures
Input:
INT4 countThe number of temperatures to create, and the number of IDs in Ele-
mID
BOOL doValuesIf True, then the Values array must co ntain load values to be used. If 
False, then whatever is specified in the current object is used and 
Values is ignored
BOOL doFunctionsIf True, then the FunctionID array must contain Function IDs to be 
used. If False, then whatever is spec ified in the current object is used 
and FunctionID is ignored.
INT4 ElemID[0..count-1]The Element IDs where temperatures will be created. One tempera-
ture is created on each ID.
REAL8 Values[0..count-1] Temperature Values. Refer to “temp” property.
INT4 FunctionID[0..count-1]IDs of functions associated with each temperature. Specify 0 for con-
stant values.  Refer to “function” property.
Output:NoneReturn Code:FE_FAIL The Loads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, you must properly specify the other parameters in the object - such as, color 
and setID, and any other types required for your load s. This method simply us es the data you specify 
here to overwrite specific values  in the LoadETemp object, and create a new temperature for each entry 
in the arrays. This method puts data  directly into the database, so ther e is no need to call Put after using 
this method. For more  information on how to create loads, see  Section 2.8, "Working with Loads and 
Constraints".
Example:None
 API-2650  GetAllArray
5.41.2.3  GetAllArray
GetAllArray
( count, doValues, doFunctions, ElemID, Layer, Color, LoadDefinitionID, Temperature, 
TempGradient, FunctionID )
Description:This method creates returns elemental temperaturesInput:NoneOutput:
INT4 countThe number of temperatures to create, and the number of IDs in Ele-
mID
BOOL ExpandedGeom-
Load[0..count-1]If True, the load was expanded from geometry. 
INT4 ElemID[0..count-1] The IDs of the nodes found.
INT4 Layer[0..count-1] The IDs of the layers the loads are on.
INT4 Color[0..coun t-1] The IDs of the load color.
INT4 LoadDefini-
tionID[0..count-1]The IDs of the Load Definitions.
REAL8 Temperature[0..count-
1]The elemental temperature.
REAL8 TempGradi-
ent[0..count-1]The elemental 
linear thermal gradient .
INT4 FunctionID[0..count-1]The ID of a function that defines time dependency of the tempera-
ture.
Return Code:FE_NOT_A V AILABLE No temperature load s on mesh exist in the Load Set.
FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, y ou must properly specify the setID parameter in the object.
Example:None
PutArray   API-2651
5.41.2.4  PutAllArray
PutArray
( count, doValues, doFunctions, ElemID, Layer, Color, LoadDefinitionID, Temperature, 
TempGradient, FunctionID )
Description:This method creates multip le elemental temperatures
Input:
INT4 countThe number of temperatures to create, and the number of IDs in Ele-
mID
BOOL ExpandedGeom-
Load[0..count-1]If True, the load was expanded from geometry. 
INT4 ElemID[0..count-1] The IDs of the nodes found.
INT4 Layer[0..count-1] The IDs of the layers the loads are on.
INT4 Color[0..coun t-1] The IDs of the load color.
INT4 LoadDefini-
tionID[0..count-1]The IDs of the Load Definitions.
REAL8 Temperature[0..count-
1]The elemental temperature.
REAL8 TempGradi-
ent[0..count-1]The elemental 
linear thermal gradient .
INT4 FunctionID[0..count-1]The ID of a function that defines time dependency of the tempera-
ture.
Output:NoneReturn Code:FE_FAIL The temperature loads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method , you must properly specify the setID pa rameter in the object. For more infor-
mation on how to create loads, see Section 2.8, "Working with Loads and Constraints".
Example:None
 API-2652  
5.42  LoadGeom Objects
LoadGeom objects correspond to the geometry-based  loads in your model. They are derived from 
Entity objects, so in addition to the properties an d methods described here, all of the properties and 
methods defined for Entity objects are also ava ilable for LoadGeom obje cts. For more informa-
tion, see Section 5.1, "Common Entity Properties and Methods".
Use the feLoadGeom method of the FEMAP App lication object to crea te LoadGeom objects.
5.42.1  LoadGeom Object Properties
LoadGeom objects are always stored with their Se tID equal to the setID of the load set; however, 
their IDs simply go from 1 to N. To  find a particular object you must  retrieve each object in the set 
and check its type and geomID.
When you create a new LoadGeom, it will always reference the active load  set. You can change 
the set that it references simply by changing the setID parameter.
All of the data in a LoadGeom object can be ac cessed through the first se t of properties listed 
below. The “Additional Properties” simply provide  other names, which ma y be more convenient 
or descriptive, to access the sa me information. You will notice that the primary properties for 
LoadGeom records are the same as those for LoadMesh objects.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
INT4 geomID ID of the point, cu rve or surface that is loaded.
INT4 addlID[0..1]
or 
V ARIANT vaddlIDAdditional IDs. These are not used for most loads. They contain the addi-
tional nodes for nonlinear force loads.
INT4 csysThe ID of the coordinate system used to define the load. Regardless of this 
value, all loads that are vector-based ar e stored in global rectangular coordi-
nates.
INT4 function[0..4]
or V ARIANT vfunctionThe IDs of functions associated with the various load values: 
[0]=Load func, Emissivity func[1]=Absorbtivity vs. Temp
[2]=Temp vs Temp
[3]=View Factor vs Time[4]=Phase vs. Freq
INT4 dof[0..2]
or 
V ARIANT vdofArray containing the face number (0) for face-based loads, or flags indicat-
ing which components are enabled for vector loads.
BOOL flag[0..2]
or 
V ARIANT vflagFlags specifying va rious load options.
   API-2653
INT4 typeThe type of load being defined. For values, see Section 5.42.3, "LoadGeom 
Load Types".
INT4 subtypeAn additional flag specifying more info rmation about the type of load. Used 
for nonlinear tran sient force loads.
INT4 geomtypeThe type of geometric entity that this load is applied to. For more informa-
tion on Entity Types refer to the table in Section 3.3.6, "Entity Types". Can 
be FT_SURFACE, FT_CURVE, or FT_POINT. This property is Read-Only.
INT4 layer The layer asso ciated with the load.
REAL8 load[0..4]
or 
V ARIANT vloadThe load values. The location of specific  values varies for each type of load, 
but generally follows the order of the values in the load creation dialog box.
For loads with a single value, it is lo cated in load[0]. X, Y ,Z components are 
located in load[0 ],load[1],load[2].
REAL8 fluxdir[0..2]
or 
V ARIANT vfluxdirThe components of the direction for certain elemental loads. For vector 
fluxes, the initial direction. This does not contain the direction for nodal vec-
tor loads like force or displacement. Those values are in the "load" values.
INT4 DataSurface[0..2]
orV ARIANT 
vDataSurfaceThe IDs of Data Surfaces referenced  by the various “load” values.
INT4 color The load color.
BOOL expanded True if this is an expanded geometric load.INT4 
LoadDefinitionIDThe ID of the load definition th at contains this load (0=None)
Geometry Load Specific PropertiesINT4 dirmodeThe direction setting for the load: 0=None, 1=Vector, 2=AlongCurve, 3= 
Normal to Plane, 4=Normal to Surface.
REAL8 dirbase[0..2]
or 
V ARIANT vdirbaseThe location of the base of the direction vector, if dirmode=1 or 3.
REAL8 direction[0..2]
or 
V ARIANT vdirectionThe components of the direction vector, if dirmode = 1 or 3.
INT4 dirID The curve or surface  ID if dirmode = 2 or 4.
INT4 variationThe load variation mode: 0=None/Constant, 1=Equation, 2=Function, 
3=Interpolation.
STRING varname The variable na me used for load variation.
STRING vareqn The equation defining the load variation if variation=1.Property Description
 API-2654  
INT4 varfunction The ID of the function u sed for load variation if variation=2.
REAL8 varlocate 
[0..3][0..2]
or
V ARIANT vvarlocateThe coordinates of the locations used fo r interpolation if variation=3. The x, 
y and z coordinates of a single point are stored in varlocate(i,0), varlo-
cate(i,1) and varlocate(i,2) respectively.
REAL8 varvalue[0..3]
or 
V ARIANT vvarvalueThe values corresponding to each of the varlocate locations.
BOOL midsideIf True, then loads at midside nodes ar e adjusted during load expansion to 
provide uniform loading. If False, mids ide nodes are treated just like other 
nodes during expansion.
Additional PropertiesINT4 FaceNumber The element face number  for face-based loads, like pressure.
BOOL XOnTrue if the X component of a nodal load , like force or displacement is active. 
This refers to the X compone nt in the definition CSys.
BOOL YOnTrue if the Y component of a nodal load , like force or displacement is active. 
This refers to the Y compone nt in the definition CSys.
BOOL ZOnTrue if the Z component of a nodal load, like force or displacement is active. 
This refers to th e Z component in th e definition CSys.
REAL8 XThe X component of a nodal load, like force or displacement. In global rect-
angular coordinates.
REAL8 YThe Y component of a nodal load, like force or displacement. In global rect-
angular coordinates.
REAL8 ZThe Z component of a nodal load, like fo rce or displacement. In global rect-
angular coordinates.
REAL8 Temp The temperature associated with the load.REAL8 Phase The phase associated with the load.INT4 LoadFunction The ID of  the function associated with the primary load value.
INT4 TempVsTime The ID of the function specifying the time dependence of temperature.INT4 PhaseVsFreq The ID of the function spec ifying the frequency dependence of phase.
REAL8 LoadValue The primary load value.
BOOL CornerPressureFlag specifying whether a pressure load  has corner values, or a single con-
stant value.
REAL8 Pressure The pressure value for a pressure load.REAL8 HeatGen The heat generation value for a heat generation load.Property Description
   API-2655
REAL8 HeatFlux The heat flux value for a heat flux load.
REAL8 Absorptivity The absorpti vity for a radiation load.
INT4 
AbsorptivityVsTempThe ID of a function specifying temp erature dependence of absorptivity.
BOOL VectorFlux Flag specifying that an elemental flux load is a vector flux.
REAL8 FluidValue Primary load value for a fluid load.BOOL PeriodicMaster Flag specifying a periodic condition load as Master.
BOOL 
PeriodicDirectionFlag specifying the peri odic conditio n direction.
REAL8 
ConvectionCoeffThe convection coefficient for a convection load.
BOOL 
ForcedConvectionFlag specifying that a convectio n load defines forced convection.
BOOL 
FCDisableAdvectionFlag specifying that a forced co nvection load is disabling advection.
BOOL 
FCDisableConvectionFlag specifying that a forced co nvection load is disabling convection.
REAL8 FlowRate The flow rate for forced convection.
REAL8 FlowDiameter The flow di ameter for forced convection.
REAL8 
FlowAreaFactorThe flow area factor for forced convection.
REAL8 Emissivity The emissivity for a radiation load.
INT4 EmissivityFunc The ID of function specifying the variation of emissivity.
REAL8 ViewFactor The radiation view factor.INT4 
ViewFactorVsTimeID of the function specifying the time dependence of the view factor.
BOOL 
EnclosureRadiationFlag specifying a radiation load as enclosure radiation.
BOOL CanShade Flag specifying a radi ation load as shading other regions.
BOOL CanBeShaded Flag specifying a radiation load as being shaded by other regions.INT4 CavityNumber The cavity number for enclosure radiation.INT4 addl_ptID[0..3]
or V ARIANT vaddl_ptIDAdditional Point IDs. These are not used  for most loads. They contain the 
additional points for follower force and follower moment. By default, there 
are 2 points, but can be 4 points when the Normal to Plane option is enabled.Property Description
 API-2656  GetSearch
5.42.2  LoadGeom Object Methods
5.42.2.1  GetSearch
GetSearch
( loadType, geomID )
Description:This method searches for and re trieves an entity that is load ing a specified geometric entity. 
Input:
INT4 loadTypeType of load being applied. For values, see Section 5.42.3, "Load-
Geom Load Types". 
INT4 geomIDID of geometry loaded. The loadType determines whether this 
should be a point, curve or surface ID.
Output:
None
Return Code:FE_FAIL The specified entity does  not exist or is not loaded.
Remarks/Usage:Since LoadGeom objects are not stored  by a specified ID, but rather in  sequential order, the normal Get 
method may not be useful if you are trying to find the loads on a specific curv e or surface. The only way 
to do that would be to Get every load and check for the references that you want. This method does that 
for you. You specify the load type  and point/curve/surface you want to  search for, and it returns the 
loads on that entity. Be aware that this method does still search the entir e set. If you are going to retrieve 
loads on a large number of geometry  entities, it could be faster to retr ieve them all using Get, and dis-
card the ones you do not want.
Example:None
NextOnEntity   API-2657
5.42.2.2  NextOnEntity
NextOnEntity
( geomTYPE, geomSET )
Description:Gets the next load that is defined on a selected set of geometric entities.
Input:
INT4 geomTYPEThe type of geometry where the lo ads are defined. Must be Point, 
Curve, or Surface. For entity inform ation, see Section 3.3.6, "Entity 
Types".
INT4 geomIDThe ID of a Set object that contai ns the IDs of the entities to be 
searched. Alternatively, if you specif y a negative value, this is simply 
the ID of the single entity to search.
Output:
None
Return Code:FE_BAD_TYPE geomTYPE is not one of the available entity typesFE_FAIL No additional loads can be found in this Load Set
Remarks/Usage:Before calling this method, the setID property of the object must be de fined to search the desired Load 
Set. Also, you should call R eset before the first call to this method  so it will retrieve the first available 
load.
Example:Retrieve all of the loads in Load Set 7, defined on Surfaces 1 and 2:
    Dim l As femap.LoadGeom
    Set l = App.feLoadGeom
    Dim s As femap.Set    Set s = App.feSet
    s.AddRange(  1, 2, 1 )    l.SetID = 7
    l.Reset()    While l.NextOnEntity( FT_SURFACE, s.ID ) = FE_OK
        ...
    Wend
 API-2658  NextOnEntity
5.42.3  LoadGeom Load Types
The following table provides the list of  available load types on geometry.
Geometry Load Types (p = Point ; c = Curve ; s = Surface, n=on Node, e=on Element)
81 pnForce 130 cnRotVelocity 167 snDisp82 pnMoment 131 cnAccel 168 snRotDisp83 pnDisp 132 cnRotAccel 169 snVelocity84 pnRotDisp 133 cnTemp 170 snRotVelocity85 pnVelocity 134 cnHeatFlux 171 snAccel86 pnRotVelocity 135 cnHeatFluxPerLength 172 snRotAccel87 pnAccel 136 cnHeatFluxAtNode 173 snTemp88 pnRotAccel 137 cnHeatGen 174 snHeatFlux
89 pnTemp 138 cePressure 175 snHeatFluxPerArea
90 pnHeatFlux 139 ceTemp 176 snHeatFluxAtNode91 pnHeatGen 140 ceHeatFlux 177 snHeatGen92 pnPressure 141 ceConvection 178 sePressure93 pnTotalPressure 142 ceRadiation 179 seTemp94 pnScalar 143 ceHeatGen 180 seHeatFlux95 pnSteamQuality 144 cnPr essure 181 seConvection
96 pnHumidity 145 cnTotalPressure 182 seRadiation97 pnFluidHeight 146 cnScalar 183 seHeatGen98 pnUnknownCondition 147 cn SteamQuality 184 snPressure
99 pnSlipCondition 148 cnHu midity 185 snTotalPressure
100 pnFanCurve 149 cnFluidHeight 186 snScalar101 pnPeriodic 150 cnUnknownCondition 187 snSteamQuality121 cnForce 151 cnSlipCondition 188 snHumidity122 cnForcePerLength 152 cnFanCurve 189 snFluidHeight123 cnForceAtNode 153 cnPeriodic 190 snUnknownCondition124 cnMoment 161 snForc e 191 snSlipCondition
125 cnMomentPerLength 162 snForcePerArea 192 snFanCurve126 cnMomentAtNode 163 snForceAtNode 193 snPeriodic
NextOnEntity   API-2659
127 cnDisp 164 snMoment 194 snTorque
128 cnRotDisp 165 snMomentPerArea 195 snBearing129 cnVelocity 166 snMomentAtNodeGeometry Load Types (p = Point ; c = Curve ; s = Surface, n=on Node, e=on Element)
 API-2660  
5.43  LoadMesh Objects
LoadMesh objects correspond to the nodal and elem ental loads (other than temperatures) in your 
model. They are derived from Entity objects, so in addition to the properties and methods 
described here, all of the properties and methods defined for Entity objects are also available for 
LoadMesh objects. For more in formation, see Section 5.1, "Com mon Entity Properties and Meth-
ods". 
Use the feLoadMesh method of the FEMAP Appl ication object to create LoadMesh objects.
5.43.1  LoadMesh Object Properties
LoadMesh objects are always stored with their Se tID equal to the setID of the load set; however, 
their IDs simply go from 1 to  N. To find a particular object, you must retrieve each object in the set 
and check its type and meshID.
When you create a new Lo adMesh, it will always re ference the active load set. You can change the 
set that it references simply by changing the setID  parameter.
All of the data in a LoadMesh object can be accessed through the first set of properties listed 
below. The “Additional Properties” simply provide  other names, which ma y be more convenient 
or descriptive, to acce ss the same information.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
INT4 meshID ID of the node or element that is loaded.
INT4 addlID[0..3]
or 
V ARIANT vaddlIDAdditional IDs. These are not used for most loads. They contain the addi-
tional nodes for nonlinear force lo ads, follower forces, and follower 
moments
INT4 csysThe ID of the coordinate system used to define the load. Regardless of this 
value, all loads that are vector-based ar e stored in global rectangular coordi-
nates.
INT4 function[0..7]
or V ARIANT vfunctionThe IDs of functions associated with the various load values: 
[0]=Load func, Emissivity func[1]=Absorbtivity vs. Temp
[2]=Temp vs Temp
[3]=View Factor vs Time[4]=Phase vs. Freq
[5]=X component time fu nction for Heat Flux.
[6]=Y component time fu nction for Heat Flux.
[7]=Z component time fu nction for Heat Flux.
INT4 dof[0..2]
or V ARIANT vdofArray containing the face number (0) for face based loads, or flags indicat-
ing which components are enabled for ve ctor loads. Also, dof[0] is used to 
specify the “Distributed Load Directio n” for a “Distributed Load” on a line 
element (type = 41, eLineLoad): 1 = Element X, 2 = Element Y , 3 = Element 
Z, 4 = Global X, 5 = Global Y , 6 = Global Z
   API-2661
BOOL flag[0..2]
or 
V ARIANT vflagFlags specifying va rious load options.
INT4 type The type of load being defined. Refer to the load type table for values.
INT4 subtypeAn additional flag specifying more info rmation about the type of load. Used 
for nonlinear tran sient force loads.
INT4 layer The layer asso ciated with the load.
REAL8 load[0..]
or V ARIANT vloadThe load values. The location of specific  values varies for each type of load, 
but generally follows the order of the values in the load creation dialog box.
For loads with a single value, it is lo cated in load[0]. X, Y ,Z components are 
located in load[0 ],load[1],load[2].
REAL8 fluxdir[0..2]
or 
V ARIANT vfluxdirThe components of the direction for certain elemental loads. For vector 
fluxes, the initial direction. This does not contain the direction for nodal vec-
tor loads like force or displacement. Those values are in the "load" values.
INT4 color The load color.
BOOL expanded True if this is an expanded geometric load.INT4 LoadDefini-
tionIDThe ID of the load definition th at contains this load (0=None)
Additional Properties
INT4 FaceNumber The element face number  for face-based loads, like pressure.
BOOL XOnTrue if the X component of a nodal lo ad, like force or displacement, is 
active. This refers to the X co mponent in the definition CSys.
BOOL YOnTrue if the Y component of a nodal lo ad, like force or displacement, is 
active. This refers to the Y co mponent in the definition CSys.
BOOL ZOnTrue if the Z component of a nodal load, like force or displacement, is 
active. This refers to the Z co mponent in the definition CSys.
REAL8 XThe X component of a nodal load, like force or displacement. In global rect-
angular coordinates.
REAL8 YThe Y component of a nodal load, like force or displacement. In global rect-
angular coordinates.
REAL8 ZThe Z component of a nodal load, like fo rce or displacement. In global rect-
angular coordinates.
REAL8 Temp The temperature associated with the load.REAL8 Phase The phase associated with the load.INT4 LoadFunction The ID of  the function associated with the primary load value.Property Description
 API-2662  
INT4 TempVsTime The ID of the function specifying the time dependence of temperature.
INT4 PhaseVsFreq The ID of the function spec ifying the frequency dependence of phase.
REAL8 LoadValue The primary load value.
BOOL CornerPressureFlag specifying whether a pressure load  has corner values, or a single con-
stant value.
REAL8 Pressure The pressure value for a pressure load.REAL8 HeatGen The heat generation value for a heat generation load.REAL8 HeatFlux The heat flux value for a heat flux load.
REAL8 Absorptivity The absorpti vity for a radiation load.
INT4 AbsorptivityVs-
TempThe ID of a function specifying temp erature dependence of absorptivity.
BOOL VectorFlux Flag specifying that an elemental flux load is a vector flux.
REAL8 FluidValue Primary load value for a fluid load.
BOOL PeriodicMaster Flag specifying a periodic condition load as Master.
BOOL PeriodicDirec-
tionFlag specifying the peri odic conditio n direction.
REAL8 ConvectionCo-
effThe convection coefficient for a convection load.
BOOL ForcedConvec-
tionFlag specifying that a convectio n load defines forced convection.
BOOL FCDisableAd-
vectionFlag specifying that a forced co nvection load is disabling advection
BOOL FCDisableCon-
vectionFlag specifying that a forced co nvection load is disabling convection
REAL8 FlowRate The flow rate for forced convection.
REAL8 FlowDiameter The flow di ameter for forced convection.
REAL8 FlowAreaFac-
torThe flow area factor for forced convection.
REAL8 Emissivity The emissivity for a radiation load.
INT4 EmissivityFunc The ID of function specifying the variation of emissivity.
REAL8 ViewFactor The radiation view factor.INT4 ViewFactorVs-
TimeID of the function specifying the time dependence of the view factor.Property Description
   API-2663
BOOL EnclosureRadi-
ationFlag specifying a radiation load as enclosure radiation. 
BOOL CanShade Flag specifying a radi ation load as shading other regions.
BOOL CanBeShaded Flag specifying a radiation load as being shaded by other regions.INT4 CavityNumber The cavity number for enclosure radiation.Property Description
 API-2664  GetSearch
5.43.2  LoadMesh Object Methods
5.43.2.1  GetSearch
GetSearch
( loadType, meshID, faceID )
Description:This method searches for and retrie ves an entity that is loading a sp ecified node or element entity and 
loads the LoadMesh Obje ct with that entity.
Input:
INT4 loadTypeType of load being applied. For values, see Section 5.43.3, "Load-
Mesh Load Types".
INT4 meshIDID of node or element being loaded. The “loadType”  determines 
whether this should be a node ID or an element ID.
INT4 faceIDFor certain face-based elemental load s (pressure, flux, etc.) you must 
also specify the element face that is  being loaded. For all other load 
types, this option is ignored.
Output:NoneReturn Code:FE_FAIL The specified entity does  not exist or is not loaded.
Remarks/Usage:Since LoadMesh objects are not stored by a specified ID, but rather in sequential order, the normal Get 
method may not be useful if you are trying to find the loads on a specific node or element. The only way 
to do that would be to Get every load and check for the references that you want. This method does that 
for you. You specify the load type and node/element you want to search  for, and it returns the loads on 
that entity. Be aware that this method does still sear ch the entire set. If you are going to retrieve loads on 
a large number of mesh entities, it could be faster to  retrieve them all using Get, and discard the ones 
you do not want.
Example:None
Add   API-2665
5.43.2.2  Add
Add
( setID, loadType, nCSys, DOF, Values, FunctionID )
Description:This method creates multiple  nodal or elemental loads
Input:
INT4 setIDThe ID of a Set object that contains the nodes or elements where 
loads will be applied. A lternatively, if you specify a negative value, 
this is simply the ID of the si ngle node or el ement to load.
INT4 loadType The type of load being defined. Refer to “type” property.
INT4 nCSysThe ID of the Coordinate System where load values are being 
defined.
INT4 DOF[0..2]Degree of Freedom flags for forc es (True=On, False=Off). For Pres-
sures and other face-based loads the first DOF for each element is the 
faceID (1-6) for the load. Refer to “dof” property.
REAL8 Values[0..4] Load Values, 5 per load. Refer to “load” property.
INT4 FunctionID[0..4]IDs of functions associated with e ach load value. Specify 0 for con-
stant values. 5 per load. Refer to “function” property.
Output:NoneReturn Code:FE_FAIL The Loads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, you must properly specify the other parameters  in the object - such as, color, 
setID, and any other types required for your loads. This  method simply uses the data you specify here to 
overwrite specific values in the lo admesh object, and create a new load for each entry in the set.
Example:None
 API-2666  AddArray
5.43.2.3  AddArray
AddArray
( count, doDOF, doValues, doFunctions, NodeElemID, DOF, Values, FunctionID )
Description:This method creates multiple nodal or  elemental loads. This method is  obsolete and should be replaced 
by PutArray.
Input:
INT4 countThe number of loads to create, and the number of IDs in NodeEle-
mID
BOOL doDOFIf True, then the DOF array must contain the DOF flags/Face IDs to 
be used. If False, then whatever is  specified in the current object is 
used, and DOF is ignored.
BOOL doValuesIf True, then the Values array must co ntain load values to be used. If 
False, then whatever is specified in the current object is used and 
Values is ignored
BOOL doFunctionsIf True, then the FunctionID array must contain Function IDs to be 
used. If False, then whatever is spec ified in the current object is used 
and FunctionID is ignored.
INT4 NodeElemID[0..count-1]The Node or Element IDs where load s will be created. One load is 
created on each ID.
INT4 DOF[0..(3*count)-1]Degree of Freedom flags for forc es (True=On, False=Off). For Pres-
sures and other face-based loads the first DOF for each element is the 
faceID (1-6) for the load. There ar e three entries per load. Refer to 
“dof” property.
REAL8 Values[0..(5*count)-1] Load Values, 5 per load. Refer to “load” property.INT4 FunctionID[0..(5*count)-
1]IDs of functions associated with e ach load value. Specify 0 for con-
stant values. 5 per load. Refer to “function” property.
Output:NoneReturn Code:FE_FAIL The Loads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:
AddArray   API-2667
Prior to using this method, you must properly specify the other para meters in the object - such as, load 
type, color, setID, and any other types required for your loads. This method simply uses the data you specify here to overwrite specific values in the load mesh object, and create a new load for each entry in 
the arrays.
Example:NoneAddArray
( count, doDOF, doValues, doFunctions, NodeElemID, DOF, Values, FunctionID )
 API-2668  GetAllArray
5.43.2.4  GetAllArray
GetAllArray
( count, ExpandedGeomLoad, loadType, loadSubType, NodeElemID, Layer, Color, Load-
DefinitionID, nCSysID, DOFFace, Values, FunctionID, NodeElemAddID, flag, Direction )
Description:This method fills informa tion about all of the LoadM esh objects in a Load Set.
Input:NoneOutput:
INT4 countThe number of loads to create, and the number of IDs in NodeEle-
mID
BOOL ExpandedGeom-
Load[0..count-1]If True, the load was expanded from geometry. 
INT4 loadType[0..count-1]The type of load being defined. Re fer to the load type table for val-
ues. For all load types, see Sec tion 5.43.3, "LoadMesh Load Types".
INT4 loadSubType[0..count-1]An additional flag specifying more  information abou t the type of 
load. Used for nonlinea r transient force loads.
INT4 NodeElemID[0..count-1] The IDs of the nodes or elements found.INT4 Layer[0..count-1] The IDs of the layers the loads are on.
INT4 Color[0..coun t-1] The IDs of the load color.
INT4 
LoadDefinitionI D[0..count-1]The IDs of the Load Definitions.
INT4 nCSysID[0..count-1]The ID of the coordinate system u sed to define the load. Regardless 
of this value, all loads that are vect or-based are stored in global rect-
angular coordinates.
INT4 DOFFace[0..(3*count)-1]Array containing the face number (0) for face based loads, or flags 
indicating which compon ents are enabled for vector loads. Also, 
dof[0] is used to specify the “Distr ibuted Load Direction” for a “Dis-
tributed Load” on a line element (type = 41, eLineLoad): 1 = Ele-
ment X, 2 = Element Y , 3 = Element Z, 4 = Global X, 5 = Global Y , 6 
= Global Z
REAL8 Values[0..(5*count)-1]The load values. The location of sp ecific values varies for each type 
of load, but generally follows the or der of the values in the load cre-
ation dialog box.
For loads with a single value, it is located in load[0]. X,Y ,Z compo-
nents are located in lo ad[0],load[1],load[2].
GetAllArray   API-2669
INT4 
FunctionID[0..(8*count)-1]The IDs of functions associated  with the various load values: 
[0]=Load func, Emissivity func
[1]=Absorbtivity vs. Temp
[2]=Temp vs Temp[3]=View Factor vs Time
[4]=Phase vs. Freq
[5]=X component time function for Heat Flux.[6]=Y component time function for Heat Flux.
[7]=Z component time fu nction for Heat Flux.
INT4 NodeElemAddID
[0..count-1]Additional IDs. These are not used for most loads. They contain the 
additional nodes for nonlinear force loads.
BOOL flag[0..(3*count)-1] Flags specifying various load options.
REAL8 
Direction[0..(3*count)-1]The components of the direction fo r certain elemental loads. For vec-
tor fluxes, the initial direction. Th is does not contain the direction for 
nodal vector loads like force or di splacement. Those values are in the 
"load" values.
Return Code:FE_NOT_A V AILABLE No loads on mesh exist in the Load Set.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, y ou must properly specify the setID parameter in the object. 
Example:NoneGetAllArray
( count, ExpandedGeomLoad, loadType, loadSubType, NodeElemID, Layer, Color, Load-
DefinitionID, nCSysID, DOFFace, Values, FunctionID, NodeElemAddID, flag, Direction )
 API-2670  PutArray
5.43.2.5  PutArray
PutArray
( count, doDOF doValues, doFunctions, NodeElemID, DOF, Values, FunctionID )
Description:This method creates multiple  nodal or elemental loads
Input:
INT4 countThe number of loads to create, and the number of IDs in NodeEle-
mID
BOOL doDOFIf True, then the DOF array must contain the DOF flags/Face IDs to 
be used. If False, then whatever is  specified in the current object is 
used, and DOF is ignored.
BOOL doValuesIf True, then the Values array must co ntain load values to be used. If 
False, then whatever is specified in the current object is used and 
Values is ignored
BOOL doFunctionsIf True, then the FunctionID array must contain Function IDs to be 
used. If False, then whatever is spec ified in the current object is used 
and FunctionID is ignored.
INT4 NodeElemID[0..count-1]The Node or Element IDs where load s will be created. One load is 
created on each ID.
INT4 DOF[0..(3*count)-1]Degree of Freedom flags for forc es (True=On, False=Off). For Pres-
sures and other face-based loads the first DOF for each element is the 
faceID (1-6) for the load. There ar e three entries per load. Refer to 
“dof” property.
REAL8 Values[0..(5*count)-1] Load Values, 5 per load. Refer to “load” property.INT4 FunctionID[0..(5*count)-
1]IDs of functions associated with e ach load value. Specify 0 for con-
stant values. 5 per load. Refer to “function” property.
Output:NoneReturn Code:FE_FAIL The Loads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:
PutArray   API-2671
Prior to using this method, you must properly specify the other para meters in the object - such as, load 
type, color, setID, and any other types required for your loads. This method simply uses the data you specify here to overwrite specific values in the load mesh object, and create a new load for each entry in 
the arrays. For more inform ation on how to create loads, see Sec tion 2.8, "Working with Loads and Con-
straints".
Example:NonePutArray
( count, doDOF doValues, doFunctions, NodeElemID, DOF, Values, FunctionID )
 API-2672  PutAllArray
5.43.2.6  PutAllArray
PutAllArray
( bDeleteAllExistingLoads, count, ExpandedGeomLoad, loadType, loadSubType, 
NodeElemID, Layer, Color, LoadDefinitionID, nCSysID, DOFFace, Values, FunctionID, 
NodeElemAddID, flag, Direction )
Description:This method creates multiple  nodal or elemental loads
Input:BOOL 
bDeleteAllExistingLoadsIf True, all loads in the setID  will be deleted beforehand. 
INT4 countThe number of loads to create, and the number of IDs in NodeEle-
mID
BOOL ExpandedGeom-
Load[0..count-1]If True, the load was expanded from geometry. 
INT4 loadType[0..count-1]The type of load being defined. Re fer to the load type table for val-
ues. For all load types, see Sec tion 5.43.3, "LoadMesh Load Types".
INT4 loadSubType[0..count-1]An additional flag specifying more  information abou t the type of 
load. Used for nonlinea r transient force loads.
INT4 NodeElemID[0..count-1] The IDs of the nodes or elements found.INT4 Layer[0..count-1] The IDs of the layers the loads are on.
INT4 Color[0..coun t-1] The IDs of the load color.
INT4 
LoadDefinitionI D[0..count-1]The IDs of the Load Definitions.
INT4 nCSysID[0..count-1]The ID of the coordinate system u sed to define the load. Regardless 
of this value, all loads that are vect or-based are stored in global rect-
angular coordinates.
INT4 DOFFace[0..(3*count)-1]Array containing the face number (0) for face based loads, or flags 
indicating which compon ents are enabled for vector loads. Also, 
dof[0] is used to specify the “Distr ibuted Load Direction” for a “Dis-
tributed Load” on a line element (type = 41, eLineLoad): 1 = Ele-
ment X, 2 = Element Y , 3 = Element Z, 4 = Global X, 5 = Global Y , 6 
= Global Z
REAL8 Values[0..(5*count)-1]The load values. The location of sp ecific values varies for each type 
of load, but generally follows the or der of the values in the load cre-
ation dialog box.
For loads with a single value, it is located in load[0]. X,Y ,Z compo-
nents are located in lo ad[0],load[1],load[2].
PutAllArray   API-2673
INT4 
FunctionID[0..(8*count)-1]The IDs of functions associated  with the various load values: 
[0]=Load func, Emissivity func
[1]=Absorbtivity vs. Temp[2]=Temp vs Temp
[3]=View Factor vs Time
[4]=Phase vs. Freq[5]=X component time function for Heat Flux.
[6]=Y component time function for Heat Flux.
[7]=Z component time fu nction for Heat Flux.
INT4 NodeElemAd-
dID[0..(2*count)-1]Additional IDs. These are not used for most loads. They contain the 
additional nodes for nonlinear force loads.
BOOL flag[0..(3*count)-1] Flags specifying various load options.
REAL8 
Direction[0..(3*count)-1]The components of the direction fo r certain elemental loads. For vec-
tor fluxes, the initial direction. Th is does not contain the direction for 
nodal vector loads like force or di splacement. Those values are in the 
"load" values.
Output:NoneReturn Code:FE_FAIL The Loads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method , you must properly specify the setID pa rameter in the object. For more infor-
mation on how to create loads, see Section 2.8, "Working with Loads and Constraints".
Example:NonePutAllArray
( bDeleteAllExistingLoads, count, ExpandedGeomLoad, loadType, loadSubType, 
NodeElemID, Layer, Color, LoadDefinitionID, nCSysID, DOFFace, Values, FunctionID, NodeElemAddID, flag, Direction )
 API-2674  NextOnEntity
5.43.2.7  NextOnEntity
NextOnEntity
( entityTYPE, meshSET )
Description:Gets the next load that is defined on a selected set of nodes or elementsInput:
INT4 entityTYPEThe type of geometry where the loads are defined. Must be Node or 
Element. For entity information, see Section 3.3.6, "Entity Types".
INT4 geomIDThe ID of a Set object that contai ns the IDs of the entities to be 
searched. Alternatively, if you specif y a negative value, this is simply 
the ID of the single entity to search.
Output:NoneReturn Code:FE_BAD_TYPE entityTYPE is not on e of the available entity types
FE_FAIL No additional loads can be found in this Load Set
Remarks/Usage:Before calling this method, the setID property of the object must be de fined to search the desired Load 
Set. Also, you should call R eset before the first call to this method  so it will retrieve the first available 
load.
Example:Retrieve all of the loads in Load Set 7, defined on Surfaces 1 and 2:
    Dim l As femap.LoadMesh
    Set l = App.feLoadMesh    Dim s As femap.Set
    Set s = App.feSet
    s.AddRange(  1, 2, 1 )
    l.SetID = 7
    l.Reset()
    While l.NextOnEntity( FT_ELEM, s.ID ) = FE_OK
        . . .    Wend
NextOnEntity   API-2675
5.43.3  LoadMesh Load Types
The following table provides the list of av ailable load types on nodes and elements.
Mesh Load Types (n = Nodal; e = Elemental)
1 nForce 11 nHeatGen 20 nSlipCondition2 nMoment 12 Transient 21 nFanCurve3 nDisplacement 13 nPressure 22 nPeriodic4 nRotDisplacement 14 nTotalPressure 41 eLineLoad5 nVelocity 15 nScalar 42 ePressure6 nRotVelocity 16 nSteamQuality 44 eHeatFlux7 nAcceleration 17 nHumidity 45 eConvection8 nRotAcceleration 18 nFluidHeight 46 eRadiation
10 nHeatFlux 19 nUnknown Condition 47 eHeatGen
 API-2676  
5.44  LoadNTemp Objects
LoadNTemp objects correspond to the nodal temperat ures in your model. They are derived from 
Entity objects, so in addition to the properties an d methods described here, all of the properties and 
methods defined for Entity objects are also availa ble for LoadNTemps objects. For more informa-
tion, see Section 5.1, "Common Entity Properties and Methods".
Use the feLoadNTemp method of the FEMAP Application object to create LoadNTemp objects.
5.44.1  LoadNTemp Object Properties
LoadNTemps are always stored with their SetID equa l to the setID of the load set, and the ID equal 
to the node ID where they are applied.
When you create a new LoadNTemp, it will always  reference the active lo ad set. You can change 
the set that it references simply by changing the setID  parameter.
Property Description
INT4 color The load color.INT4 layer The ID of the laye r associated with the load.
BOOL expanded True if this is a lo ad from an expanded geometric load.
REAL8 temp The nodal temperature.REAL8 phase The phase value associ ated with the temperature. 
INT4 functionThe ID of a function that defi nes time dependency of the tem-
perature.
INT4 LoadDefinitionID The ID of the load de finition that contains this load (0=None)
AddArray   API-2677
5.44.2  LoadNTemp Object Methods
5.44.2.1  AddArray
AddArray
( count, doValues, doFunctions, NodeID, Values, FunctionID )
Description:This method creates multiple nodal temperatures. This method is obso lete and should be replaced by 
PutArray. 
Input:
INT4 countThe number of temperatures to create, and the number of IDs in 
NodeID
BOOL doValuesIf True, then the Values array must co ntain load values to be used. If 
False, then whatever is specified in the current object is used and 
Values is ignored
BOOL doFunctionsIf True, then the FunctionID array must contain Function IDs to be 
used. If False, then whatever is spec ified in the current object is used 
and FunctionID is ignored.
INT4 NodeID[0..count-1]The Node IDs where temperatures will be created. One temperature 
is created on each ID.
REAL8 Values[0..count-1] Temperature Values. Refer to “temp” property.
INT4 FunctionID[0..count-1]IDs of functions associated with each temperature. Specify 0 for con-
stant values.  Refer to “function” property.
Output:NoneReturn Code:FE_FAIL The Loads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, you must properly specify the other parameters in the object - such as, color 
and setID, and any other types required for your load s. This method simply us es the data you specify 
here to overwrite specific values in the LoadNTemp object, and create a new temperature for each entry 
in the arrays. This method puts data  directly into the database, so ther e is no need to call Put after using 
this method.
Example:None
 API-2678  PutArray
5.44.2.2  PutArray
PutArray
( count, doValues, doFunctions, NodeID, Values, FunctionID )
Description:This method creates multiple nodal temperaturesInput:
INT4 countThe number of temperatures to create, and the number of IDs in 
NodeID
BOOL doValuesIf True, then the Values array must co ntain load values to be used. If 
False, then whatever is specified in the current object is used and 
Values is ignored
BOOL doFunctionsIf True, then the FunctionID array must contain Function IDs to be 
used. If False, then whatever is spec ified in the current object is used 
and FunctionID is ignored.
INT4 NodeID[0..count-1]The Node IDs where temperatures will be created. One temperature 
is created on each ID.
REAL8 Values[0..count-1] Temperature Values. Refer to “temp” property.
INT4 FunctionID[0..count-1]IDs of functions associated with each temperature. Specify 0 for con-
stant values.  Refer to “function” property.
Output:NoneReturn Code:FE_FAIL The Loads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, you must properly specify the other parameters in the object - such as, color 
and setID, and any other types required for your load s. This method simply us es the data you specify 
here to overwrite specific values in the LoadNTemp object, and create a new temperature for each entry 
in the arrays. This method puts data  directly into the database, so ther e is no need to call Put after using 
this method. For more  information on how to create loads, see  Section 2.8, "Working with Loads and 
Constraints".
Example:None
GetAllArray   API-2679
5.44.2.3  GetAllArray
GetAllArray
( count, ExpandedGeomLoad, NodeID, Layer, Color, LoadDefinitionID, Temperature, 
FunctionID )
Description:This method finds al l nodal temperatures
Input:NoneOutput:INT4 count The number of temperatures, and the number of IDs in NodeIDBOOL ExpandedGeom-
Load[0..count-1]If True, the load was expanded from geometry. 
INT4 NodeID[0..count-1] The IDs of the nodes found.
INT4 Layer[0..count-1] The IDs of the layers the loads are on.
INT4 Color[0..coun t-1] The IDs of the load color.
INT4 LoadDefini-
tionID[0..count-1]The IDs of the Load Definitions.
REAL8 Temperature[0..count-
1]The nodal temperature.
INT4 FunctionID[0..count-1]The ID of a function that defines time dependency of the tempera-
ture.
Return Code:FE_NOT_A V AILABLE No temperature load s on mesh exist in the Load Set.
FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method, y ou must properly specify the setID parameter in the object.
Example:None
 API-2680  PutAllArray
5.44.2.4  PutAllArray
PutAllArray
( count, ExpandedGeomLoad, NodeID, Layer, Color, LoadDefinitionID, Temperature, 
FunctionID )
Description:This method creates multiple nodal temperaturesInput:
INT4 countThe number of temperatures to create, and the number of IDs in 
NodeID
BOOL ExpandedGeom-
Load[0..count-1]If True, the load was expanded from geometry. 
INT4 NodeID[0..count-1] The IDs of the nodes found.
INT4 Layer[0..count-1] The IDs of the layers the loads are on.
INT4 Color[0..coun t-1] The IDs of the load color.
INT4 LoadDefinitionID
[0..count-1]The ID of the coordinate system u sed to define the load. Regardless 
of this value, all loads that are vect or-based are stored in global rect-
angular coordinates.
REAL8 Temperature[0..count-
1]The nodal temperature.
INT4 FunctionID[0..count-1]The ID of a function that defines time dependency of the tempera-
ture.
Output:NoneReturn Code:FE_FAIL The temperature loads could not be created.FE_NO_MEMORY Unable to allocate me mory to store arrays of data.
Remarks/Usage:Prior to using this method , you must properly specify the setID pa rameter in the object. For more infor-
mation on how to create loads, see Section 2.8, "Working with Loads and Constraints".
Example:None
Property   API-2681
5.45  LoadSet Objects
LoadSet objects correspond to the load sets in your model. They are derived from Entity objects, 
so in addition to the propertie s and methods described here, a ll of the properties and methods 
defined for Entity objects are also available for Lo ad Set objects. For more information, see Sec-
tion 5.1, "Common Entity Properties and Methods". 
Use the feLoadSet method of the FEMAP App lication object to create LoadSet objects.
5.45.1  LoadSet Object Properties
LoadSets are always stored with a SetID= 1, and the ID equal to the load set ID. 
LoadSet objects are really simply placeholders for global data for the load set. The actual loads are 
defined in other objects.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
STRING title Set title (maximum 79 characters).BOOL IsCombination This is a Nastra n LOAD combination set if True.
REAL8 CombinedScaleFactor Overall scale factor for Nastran LOAD combination.
INT4 layer The layer associated with the set.BOOL BodyAccelOn Body Load - Ac celerations are active if True.
REAL8 BodyAccel[0..5]
orV ARIANT vBodyAccelBody Load - Translational an d rotational acceleration val-
ues
INT4 BodyAccelFunction[0..5]
or
V ARIANT vBodyAccelFunctionBody Load - IDs of functions associated with Translational 
and rotational acceleration values
BOOL BodyVaryingAccelOnBody Load - Varying Transl ational Accelerations are 
active if True.
REAL8 BodyVaryingAccel[0..2]
or
V ARIANT vBodyVaryingAccelBody Load - Varying Transl ational acceleration values
REAL8 BodyVaryingAccelAxisBody Load - Varying Transla tional acceleration axis to 
vary along (0=X, 1=Y , 2=Z)
INT4 BodyVaryingAccelFunctionBody Load - IDs of function associated with Varying 
Translational acceleration values
BOOL BodyVelocityOn Body Load - Rotatio nal Velocities are active if True.
 API-2682  Property
REAL8 BodyVelocity[0..2]
or
V ARIANT vBodyVelocityBody Load - Ro tational Velocity
INT4 BodyVelocityFunction[0..2]
orV ARIANT vBodyVelocityFunctionBody Load - IDs of functions associated with Rotational 
Velocity values
REAL8 BodyOrigin[0..2]
or
V ARIANT vBodyOriginBody Load - The center of rotation.
INT4 BodyLoadCSysThe ID of the coordinate system used to define the various 
body loads
BOOL BodyDefTempOn Body Load - Defa ult Temperature is active if True.
REAL8 BodyDefTemp Body Load - The default temperature.BOOL BodyRefTempOn Body Load - Reference Temperature is active if True.REAL8 BodyRefTemp Body Load - The reference temperatureREAL8 StefanBoltzmann Heat Transfer - Stefan-Boltzmann Constant
INT4 RadiationAmbientElemHeat Transfer - ID of elemen t used for ambi ent temp in 
enclosure radiation.
BOOL bRadViewFactorZTOLHeat Transfer - Flag to write specified ZTOL value Nastran 
input file (Not in FEMAP User Interface)
REAL8 RadViewFactorZTOLHeat Transfer - ZTOL value (Not in FEMAP User Inter-
face)
REAL8   TempOffset Heat Transfer - Offset of Temperatures from Absolute ZeroREAL8   FreeConvExponent Heat Transfer - Free Convection Exponent.
BOOL    FreeConvAlternateFormHeat Transfer - Flag for Alternate Free Convection Formu-
lation
REAL8   FCFluidConductivity Heat Transf er - Forced Convection Fluid Conductivity
REAL8   FCFluidHeatCapacity Heat Transfer - Forced Convection Fluid Heat CapacityREAL8   FCFluidViscosity Heat Transfer - Forced Convection Fluid ViscosityREAL8 FCFluidDensity Heat Transfer - Forced Convection Fluid Density
INT4 FCFluidConductivityFuncHeat Transfer - Forced Convection Fluid Conductivity 
Function
INT4 FCFluidHeatCapacityFuncHeat Transfer - Forced Convection Fluid Heat Capacity 
FunctionProperty Description
Property   API-2683
INT4 FCFluidViscosityFuncHeat Transfer - Forced Convection Fluid Viscosity Func-
tion
INT4 FCFluidDensityFunc Heat Transfer - Forced Convection Fluid Density Function
REAL8 FCConstantCoeffHeat Transfer - Forced Convection Equation Constant 
Coefficient
REAL8 FCReynoldsExp Heat Transfer - Forced Convection Reynolds Exponent
REAL8 FCPrandtlInHeat Transfer - Forced Convection Prandtl Exponent into 
Fluid
REAL8 FCPrandtlOutHeat Transfer - Forced Convection Prandtl Exponent out of 
Fluid
BOOL FCAlternateFormHeat Transfer - Flag for Alternate Forced Convection For-
mulation
BOOL FCExcludeConvectiveHeat Transfer - Flag to Exclude Forced Convection Con-
vective Energy Flow
INT4 NLOnFlag for Nonlinear Analysis: 0=Off, 1=Static, 2=Creep, 
3=Transient
INT4NLIncrements Nonlinear - Number of  Increments for Nonlinear Analysis
REAL8NLTimeIncrement Non linear - Time Increment
INT4 NLMaxIterPerStep Nonlinea r - Max Iterations per Step
BOOL NLConvergenceFlag[0..2]
or
V ARIANT vNLConvergenceFlagNonlinear - Convergence Fl ags for 0=Displacement, 
1=Load and 2=Work
REAL8 NLConvergenceVal[0..2]
orV ARIANT vNLConvergenceValNonlinear - Convergence Tolerances for Displacement, 
Load and Work
INT4 NLStiffnessMethod Nonlinea r - Stiffness Update Method
INT4 NLStiffnessIter Nonlinear - Iterations before Stiffness UpdateINT4  NLIntermediateOutput Nonlin ear - Intermediate Output Type
INT4 NLOutputInterval Non linear - Output Interval
INT4 NLArcLengthMethodNonlinear - Nonlinear Arc-Leng th Solution Strategy (Arc-
Length if nonzero)
INT4  NLSolutionOverrideNonlinear - Solution Strategy Overrides: 0=none/
advanced, 1=Full Newton Raphson, 2=Modified Newton RaphsonProperty Description
 API-2684  Property
BOOL NLNewtRaphLineSearchNonlinear - Modified Newton  Line Search Override 
(1=Skip)
BOOL NLNewtRaphQuasiNewtonNonlinear - Modified Newt on Quasi-Newton Override 
(1=Skip)
BOOL NLNewtRaphBisection Nonlinear - Modifi ed Newton Bisection Override (1=Skip)
REAL8 NLArcScaleConstLoad Nonlinear - Arc Length Method Constraint Load Scale
REAL8   NLArcMinAdjust Nonlin ear - Min Arc Length Adjust
REAL8  NLArcMaxAdjust Nonlinear - Max Arc Length AdjustINT4 NLArcConstraintType Nonlinear - Arc Length Constraint TypeINT4 NLArcDesiredIter Nonlinear - Arc Length Desired Iterations
INT4  NLArcMaxIncrement Nonlinear - Arc Length Max StepsINT4 NLMaxDivergeCond Nonlin ear - Max Diverging Conditions
INT4 NLQuasiNewtonVec Nonlinear - Number of Quasi-Newton Vectors
INT4 NLMaxLineSearch Nonlinear - Max Line Search per Iteration
REAL8 NLLineSearchTolerance Nonlinear - Line Search ToleranceINT4 NLMaxBisection Nonlinear - Max Bisections per IncrementREAL8 NLMaxRotation Nonlinear - Max Rotation per Bisection
REAL8 NLStressFraction Nonlinear - Stress Fraction LimitREAL8 NLMaxAdjusted Nonlinear - Max Adjusted vs. Initial Increment
INT4 NLTransStepSkipFactor Nonlinear - Transient Time Step Skip Factor
INT4 NLTransDominantSteps Nonlinear - Transient Steps for Dominant Period
REAL8 NLTransBoundsMaintain Nonlinear - Transient Bounds to Maintain Step
REAL8 NLTransStabilityTol Nonlinear - Tr ansient Minimum Stability Tolerance
REAL8 DYNStructDamp Dynamics - Overall Structural Damping Coefficient, G
REAL8 DYNSystemFreqDamp Dynamics - Frequency for System Damping, W3
REAL8 DYNElemFreqDamp Dynamics - Frequency for Element Damping, W4
INT4 DYNOnDynamics - Flag for Dynamic Analysis: 0=Off, 1=Direct, 
2=Modal
INT4 DYNTypeDynamics - Addl Flag for Dynamic Analysis: 0=Off, 
1=Transient, 2=FreqProperty Description
Property   API-2685
INT4 DYNMassFormulationDynamics - Dynamic Mass Formulation: 0=Default, 
1=Lumped, 2=Coupled
INT4 DYNDataRecoveryDynamics - Dynamic Data Re covery: 0=Mode Displace-
ment, 1=Mode Acceleration, 2=Matrix
INT4 DYNSolFreqType Dynamics - Solution Frequency Input TypeINT4 DYNPSDType Dynamics - PSD Data TypeINT4 DYNPSDInterp Dynamics - PSD Interpolation Method
REAL8 DYNSolFreqSpread Dynamics - Spread for frequency clusters
INT4 DYNSolFreqNumFreq Dynamics - Solution Frequencies per ModeREAL8 DYNSolFreqMin Dynamics - Minimum Frequency to ComputeREAL8 DYNSolFreqMax Dynamics - Maximum Frequency to ComputeBOOL DYNSolFreqLogInterp Dynamics - Frequency Logarithmic Interpolation
INT4  DYNTransTimeSteps Dynamics - Transient Analysis Number of Steps
REAL8 DYNTransTimePerStep Dynamics - Transient Analysis Time StepINT4  DYNTransOutputInterval Dynamics - Transient Analysis Output Interval
INT4 DYNFrequencyTable Dynamics - Fu nction ID of the Frequency Table
INT4  DYNDampingTable Dynamics - Function ID of the Damping Table
INT4  DYNRandomPSD Dynamics - Function ID of the PSD
INT4 DYNResponseModesDynamics - Number of Modes to use in Response Calcula-
tions
REAL8  DYNResponseMinFreqDynamics - Minimum Response Frequency to Keep for 
further analysis
REAL8 DYNResponseMaxFreqDynamics - Maximum Response Frequency to Keep for 
further analysisProperty Description
 API-2686  Expand
5.45.2  LoadSet Object Methods
5.45.2.1  Expand
Expand
( void )
Description:This method expands all of the geom etric loads in a selected load set. 
Input:NoneOutput:NoneReturn Code:
FE_FAIL The specified expansion did not work.
Remarks/Usage:This method takes the current load set object (uses the ID), and expands all of the geometric loads in 
that set, so that they may be retrieved as normal mesh-based loads.
Example:None
Compress   API-2687
5.45.2.2  Compress
Compress
( void )
Description:This method compresses all of the geometric loads in a selected load set. Input:NoneOutput:NoneReturn Code:FE_FAIL The specified compression did not work.Remarks/Usage:This method takes the cu rrent load set object (uses the ID),  and compresses (deletes) any expanded 
loads. You are left with th e unexpanded geometric loads.
Example:None
 API-2688  ResetNextLoad
5.45.2.3  ResetNextLoad
ResetNextLoad
( enDataType, bAllLoadTypes, enLoadType, bOtherLoadsOnly, bIncludeExpanded )
Description:This method initializes all options prior to calling the “NextLoad” method below
Input:
INT4 enDataTypeThe type of load entities to be re trieved. For entity information, see 
Section 3.3.6, "Entity Type s". Can be FT_SURF_LOAD, FT_-
GEOM_LOAD (default), FT_NTHERM_LOAD, or FT_ETHER-
M_LOAD
BOOL bAllLoadTypesUsed to limit the type of  loads to be retrieved. If True, all selected 
loads will be returned. If False, only  loads that match the type speci-
fied in enLoadType  will be returned.
INT4 enLoadTypeThe type of loads to return. Only used if bAllLoadTypes is False.  
Refer to the Load Types table in Section 3.3.7, "FEMAP Constants" 
for more information.
BOOL bOtherLoadsOnlyIf true, then only loads that are not part of a load definition will be 
retrieved. Otherwise all are available.
BOOL bIncludeExpandedIf True, expanded geomet ric loads (if any) will be returned along 
with normal loads. Ignored if enDataType=FT_GEOM_LOAD.
Output:NoneReturn Code:FE_OKRemarks/Usage:This method is used prior to calling NextLoad to specify which loads will be  retrieved. It also resets this  
object so that the next call to  NextLoad will return the first load available in the object.
Example:
NextLoad   API-2689
5.45.2.4  NextLoad
NextLoad
( pDISPATCH )
Description:This method returns the next ava ilable load that matches the crite ria established by ResetNextLoad
Input:NoneOutput:
OBJECT pDISPATCHThe next load object. Depending on the options specified, this could 
be a LoadGeom, LoadMesh, LoadNTemp or LoadGeom object
Return Code:FE_BAD_DATA The data type that you are trying to retrieve is invalid.
FE_FAILThere are no more loads of the specified type to retrieve. Call Reset-
NextLoad to go back to  the first load, if you want to retrieve the 
loads again.
Remarks/Usage:This method, coupled with  ResetNextLoad provides an easy way to  retrieve all loads from a Load Set.
For any method where API obje cts are returned as parameters, such as this one, it is your responsibility 
to free that object when you are finished using the object. Some pr ogramming languages like Basic will 
do this automatically, but others lik e C++, require you to do this manu ally. The objects are only created 
or returned when the Return Code is FE_OK.
Example:
 API-2690  NextLoad
‘ This example loops through all load sets retrieving all 
‘ LoadMesh objects. For each it displays a message box.
Sub Main 
 Dim App As femap.model 
 Set App = feFemap()

 Dim ls As femap.LoadSet 
 Set ls = App.feLoadSet 
  Dim l As femap.LoadMesh 
 While ls.Next() 
  ls.ResetNextLoad( FT_SURF_LOAD, True, 0, False, False ) 
   While ls.NextLoad( l ) 
      MsgBox(Str$(l.setID)+""+Str$(l.meshID) )
    Wend 
  Wend
End SubNextLoad
( pDISPATCH )
ResetNextLoadDef   API-2691
5.45.2.5  ResetNextLoadDef
ResetNextLoadDef
( bAllDataTypes, enDataType, bAllLoadTypes, enLoadType )
Description:This method initializes all options prior to calling the “NextLoadDef” method below
Input:
BOOL bAllDataTypesUsed to limit the type of  load definitions to be retrieved. If True, all 
selected load definitions will be retu rned. If False, only load defini-
tions that contain loads of the type  specified in enDataType will be 
returned.
INT4 enDataTypeThe type of load entities to be re trieved. For entity information, see 
Section 3.3.6, "Entity Type s". Can be FT_SURF_LOAD, FT_-
GEOM_LOAD (default), FT_NTHERM_LOAD, or FT_ETHER-
M_LOAD
BOOL bAllLoadTypesUsed to limit the type of  load definitions to be retrieved. If True, all 
selected load definitions will be retu rned. If False, only load defini-
tions that contain loads of the type  specified in enLoadType will be 
returned.
INT4 enLoadTypeThe type of loads to return. Only used if bAllLoadTypes is False. 
Refer to the Load Types table in Section 3.3.7, "FEMAP Constants" 
for more information.
Output:NoneReturn Code:FE_OKRemarks/Usage:This method is used prior to callin g NextLoadDef to specify which load definitions will be retrieved. It 
also resets this object so that the next call to Next LoadDef will return the firs t load definition available 
in the object.
Example:
 API-2692  NextLoadDef
5.45.2.6  NextLoadDef
NextLoadDef
( pDISPATCH )
Description:This method returns the next available load defin ition that matches the criteri a established by ResetNex-
tLoadDef
Input:NoneOutput:
OBJECT pDISPATCHThe next load definition object. This is always a LoadDefinition 
object.
Return Code:
FE_FAILThere are no more load definitions of the specified type to retrieve. 
Call ResetNextLoadDef to go back to the first load definition, if you 
want to retrieve the loads again.
Remarks/Usage:This method, coupled with ResetNextLoadDef provides an easy way to retrieve all load definitions from 
a Load Set.
For any method where API obje cts are returned as parameters, such as this one, it is your responsibility 
to free that object when you are finished using the object. Some pr ogramming languages like Basic will 
do this automatically, but others lik e C++, require you to do this manu ally. The objects are only created 
or returned when the Return Code is FE_OK.
Example:
NextLoadDef   API-2693
 ‘ This example loops through all load sets retrieving all nodal 
‘ force LoadDefinition objects, then loops through each 
‘ LoadDefinition to retrieve the individual loads. For each it 
‘ displays a message box. 
Sub Main 
 Dim App As femap.model 
 Set App = feFemap()

 Dim ls As femap.LoadSet 
 Set ls = App.feLoadSet

 Dim ld As femap.LoadDefinition 
 Dim l As femap.LoadMesh

 While ls.Next() 
 ls.ResetNextLoadDef( False, FT_SURF_LOAD, False, FLT_NFORCE ) 
   While ls.NextLoadDef( ld ) 
      MsgBox( "Load Set"+Str$(ld.setID)+" Load Def"+Str$(ld.ID)) 
      While ld.NextLoad( l ) 
         MsgBox(  "Load On Node "+Str$(l.meshID) ) 
       Wend 
   Wend 
 Wend
End SubNextLoadDef
( pDISPATCH )
 API-2694  GetCombination
5.45.2.7  GetCombination
GetCombination
( dOverallScale, nCombo, dScale, nSetID )
Description:This method returns the data fo r a Nastran LOAD Combination Set. 
Input:NoneOutput:REAL8 dOverallScale Overall Scale Factor for Nastran LOAD Combination.INT4 nCombo Number of entr ies in the LOAD Combination.
REAL8 dScale[0..count-1] The Scale Factor for the load sets in the Combination.
INT4 nSetID[0..count-1] The IDs of the lo ad sets in the Nastran LOAD Combination.
Return Code:FE_BAD_TYPE This is not a LOAD Combination Set.FE_NOT_A V AILABLE No load set s are in the combination.
Remarks/Usage:
Example:
None
PutCombination   API-2695
5.45.2.8  PutCombination
PutCombination
( dOverallScale, nCombo, dScale, nSetID )
Description:This method sets the data in a Load Combination Set. 
Input:REAL8 dOverallScale Overall Scale Factor for Nastran LOAD Combination.INT4 nCombo Number of entr ies in the LOAD Combination.
REAL8 dScale[0..count-1] The Scale Factor for the load sets in the Combination.
INT4 nSetID[0..count-1] The IDs of the lo ad sets in the Nastran LOAD Combination.
Output:NoneReturn Code:FE_NOT_EXIST One or more Combined Load Sets specified do not exist.
Remarks/Usage:
Example:
None
 API-2696  NodesAsSet
5.45.2.9  NodesAsSet
NodesAsSet
( bExpandedGeomLoads, bNodeElemLoads, bTemperature, nNodeSetID, bClear )
Description:This method adds the IDs of nodes loaded in the Load Set curre ntly loaded in the LoadSet Object to a 
specified Set. There are options to include nodes wh ich are loaded after geometric loads are expanded, 
nodes which have non-temperature loads applied, an d/or nodes which have temperature loads applied.
Input:
BOOL bExpandedGeomLoadsWhen True, the IDs of any nodes which are loaded after geometric 
constraints are expanded will be added to the Set.
BOOL bNodeElemLoadsWhen True, the IDs of any individual nodes which have non-Tem-
perature loads applied will be adde d to the Set. If bExpandedGeom-
Loads is True, then this also cont rols if node IDs which are loaded 
with non-Temperature loads after geometric loads have been expanded will be added to the Set.
BOOL bTemperaturesWhen True, the IDs of any individual nodes which have Temperature 
loads applied will be added to th e Set. If bExpandedGeomLoads is 
True, then this also controls if node IDs which are loaded with Tem-
perature loads after geometric lo ads have been expanded will be 
added to the Set.
INT4 nNodeSetID ID of Set object to add node IDs
BOOL bClearWhen True, any IDs which are in the set are removed before adding 
the node IDs to the Set
Output:NoneReturn Code:NoneRemarks/Usage:If Temperature loads are applied as geometric loads an d bTemperature is set to  False, then those node 
IDs will NOT be added to the Set. If non-Temper ature loads are applied as geometric loads and 
bNodeElemLoads is set to False, then th ose node IDs will NOT be added to the Set.
Example:None
ElementsAsSet   API-2697
5.45.2.10  ElementsAsSet
ElementsAsSet
( bExpandedGeomLoads, bNodeElemLoads, bTemperature, nElemSetID, bClear )
Description:This method adds the IDs of elements loaded in the Load Set currently loaded in the LoadSet Object to 
a specified Set. There are options to include elem ents which are loaded after geometric loads are 
expanded, elements which have no n-temperature loads applied, and/ or elements which have tempera-
ture loads applied.
Input:
BOOL bExpandedGeomLoadsWhen True, the IDs of any elements  which are loaded after geomet-
ric constraints are expanded  will be added to the Set.
BOOL bNodeElemLoadsWhen True, the IDs of any individual elements which have non-Tem-
perature loads applied will be adde d to the Set. If bExpandedGeom-
Loads is True, then this also contro ls if element IDs which are loaded 
with non-Temperature loads after geometric loads have been expanded will be added to the Set.
BOOL bTemperaturesWhen True, the IDs of any individual elements which have Tempera-
ture loads applied will be added to  the Set. If bExpandedGeomLoads 
is True, then this also controls if  element IDs which are loaded with 
Temperature loads after geometric lo ads have been expanded will be 
added to the Set.
INT4 nElemSetID ID of Set object to add element IDs
BOOL bClearWhen True, any IDs which are in the set are removed before adding 
the element IDs to the Set
Output:NoneReturn Code:NoneRemarks/Usage:If Temperature loads are applied as geometric loads and bTemperature is set to Fa lse, then th ose element 
IDs will NOT be added to the Set. If non-Temper ature loads are applied as geometric loads and 
bNodeElemLoads is set to False, then thos e element IDs will NOT be added to the Set.
Example:None
 API-2698  
5.46  MapOutput Objects
MapOutput objects correspond to the process of mapping output from a different model as loads 
into your model. They are derive d from Entity objects, so in additio n to the properties and methods 
described here, all of the properties and methods defined for Entity objects are also available for 
solids.  For more information, see Sectio n 5.1, "Common Entity Properties and Methods"
Use the feMapOutput method of the FEMAP Ap plication object to create MapOutput objects
5.46.1  MapOutput Object Properties
MapOutput are always stored with a SetID= 1, and the ID equal to the entity ID.
Property Description
BOOL UseCriteria(12.0+)Flag to indicate if a Criteria approach (True) or Contour 
approach should be used for Data Conversion.
enum MapOptionMethod used to determine values for target locations that fall 
outside of source mesh: 0=FMO_ZERO1=FMO_V ALUE
2=FMO_EXTEND
3=FMO_INTERP4=FMO_NONE
Only used when UseCriteria is set to False
REAL8 DefaultMapValue1‘X’ value used if target mappin g falls outside of source mesh 
and MapOption is set to 1 (FMO_V ALUE). Only used when UseCriteria is set to False
REAL8 DefaultMapValue2‘Y’ value used if target mappin g falls outside of source mesh 
and MapOption is set to 1 (FMO_V ALUE). Only used when 
UseCriteria is set to False
REAL8 DefaultMapValue3‘Z’ value used if target mappin g falls outside of source mesh 
and MapOption is set to 1 (FMO_V ALUE). Only used when 
UseCriteria is set to False
enum DataConversionData Conversion method for source model: 
0=FMDC_VU (From View)1=FMDC_A VG (Average)
2=FMDC_MAX (Maximum)
3=FMDC_MIN (Minimum)4=FMDC_A VG_SKIP_CORNER (Average, Centroid Only)
5=FMDC_MAX_SKIP_CORNER (Max, Centroid Only)
6=FMDC_MIN_SKIP_CORNER (Min, Centroid Only)Only used when UseCriteria is set to False
INT4 TargetSet The ID of the target model’s set of nodes or elements.
   API-2699
enum LoadTypeTarget model mapped load type: 
0=FMLT_NTEMPERATURE
1=FMLT_NFORCE
2=FMLT_NDISPLACEMENT3=FMLT_NROTDISPLACEMENT
4=FMLT_NVELOCITY
5=FMLT_NROTVELOCITY6=FMLT_NACCELERATION
7=FMLT_NROTACCELERATION
8=FMLT_ETEMPERATURE9=FMLT_EHEATFLUX
10=FMLT_EHEATGEN
11=FMLT_EPRESSURE12=FMLT_NPRESSURE
Only elemental options available when UseCriteria set to True.
enum MapToTypeMapped (target load) entity ty pe applied to: 0=FMP_STAN-
DARD; 1=FMP_NODE; 2=FMP_ELEMENT
Note: Value used for cross-entity type mapping. If load will be 
applied to the same entity type as the output: e.g. source NODE 
to target NODE , use MapToType=FMP_STANDARD. (for “same type” mapping)
However, for source NODE ou tput mapping to tar’get ELE-
MENT load, use FMP_ELEMENT.
REAL8 MapOffsetTolerance
(10.3+)Maximum distance between Source  and Target data locations 
where locations are considered coincident and direct mapping 
without interpolation occurs.Property Description
 API-2700  MapFromModelToSetV2
5.46.2  MapOutput Object Methods
5.46.2.1  MapFromModelToSetV2
MapFromModelToSetV2
( SourceModel, Group ID, OutputSetID, OutputVector )
Description:This method replaces MapFromModel ToSet. For more information see, Section 2.4, "Working with 
Output in FEMAP 2020.1 and above". This method maps output data from a source model to loads on a target model. It performs the same function as Femap menu command Model->Load->Map Output 
From Model...
Input:INT8 SourceModel ID of the source model containing output to be mapped.INT4 GroupID ID of group of entities in source model from whic h to map output.
INT4 OutputSetIDID of output set in source model containing data from which to map 
output.
INT4 OutputVectorID of output vector in source model containing data from which to 
map output.
Output:NoneReturn Code:
FE_FAILUnable to get the map data. Possibl y data is not stored or source 
group does not exist in source model or required properties are set 
incorrectly.
Remarks/Usage:This method will work with any ou tput, but will only map to types specified in LoadType. All listed 
properties must be set on the MapOutpu t object before calling this method.
Example:
Sub Main
Dim App As femap.model
Set App = feFemap()    Dim ret As Integer
    Dim ret As Integer
    Set map = App.feMapOutput    Dim s As femap.Set
    Set s = App.feSet
MapFromModelToSetV2   API-2701
'1 Create target Set
      rc = s.Select(FT_NODE, True, "Nodes" )
      If s.count = 0 Then            Exit Sub
      End If
      map.TargetSet = s.ID
'2 Set No-map preference
   map.MapOption = femap.FMO_INTERP
'3 Set Default values
   map.DefaultMapValue1 = 0.0   map.DefaultMapValue2 = 0.0
   map.DefaultMapValue3 = 0.0
'4 Set element/Node conversion If any
      map.MapToType = femap.FMP_STANDARD
'5 Set output load Type
   map.loadTYPE = femap.FMLT_NDISPLACEMENT
'6 Get Model ID
      Dim modelID As Long      Dim vModelID As Variant
      Dim num As Long
      Dim modelName As String      modelName  =""
      rc = App.feAppGetAllModels(num, vModelID)
      For e=0 To num            rc = App.feAppGetModelName(vModelID(e), modelName)
            If modelName <> App.ModelName Then
                  modelID = vModelID(e)                  Debug.Print modelID;  " - "; modelName
                  Exit For
            End If      NextMapFromModelToSetV2
( SourceModel, Group ID, OutputSetID, OutputVector )
 API-2702  MapFromModelToSetV2
Dim srcGroup As Long
      Dim srcSet As Long
      Dim srcVector As Long      srcGroup =1
      srcSet = 1
      srcVector = 1      ret = map.MapFromModelToSet(modelID,  srcGroup, srcSet, 
srcVector)
End SubMapFromModelToSetV2
( SourceModel, Group ID, OutputSetID, OutputVector )
MapFromModelToSet2V2   API-2703
5.46.2.2  MapFromModelToSet2V2
MapFromModelToSet2V2
( SourceModel, Group ID, OutputSetID, OutputVector )
Description:This method replaces MapFromModel ToSet2. For more information see , Section 2.4, "Working with 
Output in FEMAP 2020.1 and above". This method maps output data from a source model to loads on a 
target model. It performs the same function as Femap menu command Model->Load->Map Output 
From Model... Similar to MapFromModelToSet, but a llows specification of Element or Node IDs, along 
with Element Face IDs, if needed, instead of sp ecifying the TargetSet in the MapOutput object.
Input:INT8 SourceModel ID of the source model containing output to be mapped.INT4 GroupID ID of group of entities in source model from whic h to map output.
INT4 OutputSetIDID of output set in source model containing data from which to map 
output.
INT4 OutputVectorID of output vector in source model containing data from which to 
map output.
V ARIANT vID Array of element or node IDs where data is to be mapped.V ARIANT vElFace Array of element faces where data is to be mapped.Output:NoneReturn Code:
FE_FAILUnable to get the map data. Possibl y data is not stored or source 
group does not exist in source model or required properties are set incorrectly.
Remarks/Usage:This method will work with any ou tput, but will only map to types specified in LoadType. All listed 
properties in the MapOutput object, except Target Set, must be set before calling this method.
Example:
 API-2704  MapFromModelToSet2V2
Sub Main
  Dim App As femap.model
  Set App = feFemap()
  Dim rc As Integer
  Dim Velems As Variant  Dim Vfaces As Variant
  Dim num As Long
  Dim map As femap.MapOutput
  Set map = App.feMapOutput
  Dim targElemSet As femap.Set
  Set targElemSet = App.feSet
  '1 Pick Target Elements and Faces
  App.feGetElementFaces(" Pick Faces", 0, , , num, Velems, Vfaces 
)
  '2 Set No-map preference
  map.MapOption = femap.FMO_INTERP
  '3 Set Default values
  map.DefaultMapValue1 = 0.0
  map.DefaultMapValue2 = 0.0  map.DefaultMapValue3 = 0.0
  '4 Set element/Node conversion If any
  map.MapToType = femap.FMP_STANDARD
'5 Set output load Type
  map.loadType = femap.FMLT_EPRESSUREMapFromModelToSet2V2
( SourceModel, Group ID, OutputSetID, OutputVector )
MapFromModelToSet2V2   API-2705
  '6 Get Model ID
  Dim modelID As Long
  Dim vModelID As Variant  Dim numM As Long
  Dim modelName As String
  modelName =""  rc = App.feAppGetAllModels(numM, vModelID)
  For e=0 To numM
    rc = App.feAppGetModelName(vModelID(e), modelName)      If modelName <> App.ModelName Then
        modelID = vModelID(e)
        Debug.Print modelID; " - "; modelName        Exit For
      End If
  Next
  '7 Output data to map from
  Dim srcGroup As Long
  Dim srcSet As Long
  Dim srcVector As Long  srcGroup = 1 
  srcSet = 2
  srcVector = 9000000
  ret = map.MapFromModelToSet2( modelID, srcGroup, srcSet,srcVec-
tor, Velems, Vfaces)
End SubMapFromModelToSet2V2
( SourceModel, Group ID, OutputSetID, OutputVector )
 API-2706  MapFromModelToLocationV2
5.46.2.3  MapFromModelToLocationV2
MapFromModelToLocationV2
( SourceModel, Group ID, OutputSetID, OutputVector, XLoc, YLoc, ZLoc, vMapVal, 
vUnitX, vUnitY, vUnitZ )
Description:This method replaces MapFromModelToLocation. For more information see, Section 2.4, "Working 
with Output in FEMAP 2020.1 and above". This method maps output  data from a source model to any 
locations in space.
Input:INT8 SourceModel ID of the source model containing output to be mapped.INT4 GroupID ID of group of entities in source model from whic h to map output.
INT4 OutputSetIDID of output set in source model containing data from which to map 
output.
INT4 OutputVectorID of output vector in source model containing data from which to 
map output.
REAL8 XLoc[0...N-1]
or
V ARIANT vXLocArray of global rectangular x-coordinates for locations where data is 
to be mapped.
N = number of locations for wh ich mapped values are returned.
REAL8 YLoc[0...N-1]
or
V ARIANT vYLocArray of  global rectangular y-coor dinates for locations where data is 
to be mapped.
N = number of locations for wh ich mapped values are returned.
REAL8 ZLoc[0...N-1]
orV ARIANT vZLocArray of global rectangular z-coordi nates for locations  where data is 
to be mapped.N = number of locations for wh ich mapped values are returned.
Output:
V ARIANT vMapValOutput value mapped to location. Values ordered 0..N-1 in V ARI-
ANT
V ARIANT vUnitXUnit x vector (global, rectangular) of corresponding mapped output 
value.
V ARIANT vUnitYUnit y vector (global, rectangular) of corresponding mapped output 
value.
V ARIANT vUnitZUnit z vector (global, rectangular) of corresponding mapped output 
value.
Return Code:
FE_FAILUnable to get the map da ta. Possibly data is not stored or group does 
not exist in model or required MapObject properties are set incor-
rectly.
MapFromModelToLocationV2   API-2707
Remarks/Usage:
This method will work with any ou tput, but will only map to types specified in LoadType. All listed 
properties must be set on the MapOutpu t object before calling this method.
Example: NoneMapFromModelToLocationV2
( SourceModel, Group ID, OutputSetID, OutputVector, XLoc, YLoc, ZLoc, vMapVal, 
vUnitX, vUnitY, vUnitZ )
 API-2708  GetOutputDataSurface
5.46.2.4  GetOutputDataSurface
GetOutputDataSurface
( dataSurfID )
Description:This method retrieves the Data Surface ID from  current model for use in the MapOutput Object.
Input:INT4 dataSurfaceID ID of output data surfaceOutput:NoneReturn Code:FE_FAIL Data Surface does not exist or is not an Output Map Data Surface.
Remarks/Usage:Used in conjunction with MapOutputDataToLocationExample: None
MapOutputDataToLocation   API-2709
5.46.2.5  MapOutputDataToLocation
MapOutputDataToLocation
( count, vXYZ, vValXYZ, qValid )
Description:This method maps values to locati ons specified in vXYZ using local Data Surfa ce retrieved with Get-
OutputDataSurface
Input:INT4 count The number of locations to map in vXYZ.
REAL8 vXYZ[0..(3*count)-1]Array of point coordinates in XYZ order where data is to be 
mapped.
Output:REAL8 vValXYZ[0..(3*count)-1] Array of output values mapped in valX, valY , valZ order.
BOOL qValid[0..(3*count)-1]Array of validation indicators. If qValid = FALSE (0), value was 
not mapped.
Return Code:FE_OK Mapping performed successfully.FE_FAIL Data Surface invalid or  not previously retrieved.
FE_NO_MEMORY Resources are not suffic ient to perform mapping operation
Remarks/Usage:Used for mapping locations to Data Surface in current model.
Example: 
    Sub Main
      Dim App As femap.model
      Set App = GetObject(,"femap.model")      Dim ret As Integer
      Dim map As MapOutput
      Set map = App.feMapOutput      Dim pt As Point
      Set pt = App.fePoint
      Dim s As Set      Set s = App.feSet
 API-2710  MapOutputDataToLocation
      Const  np As Integer = 8
      Dim locxyz(np*3) As Double
      Dim ptID(np) As Integer      Dim vLoc As Variant
      For i = 1 To 8
            pt.Get(i)
            ptID(i-1) = pt.ID
            locxyz(3*i-3) = pt.x            locxyz(3*i-2) = pt.y
            locxyz(3*i-1) = pt.z
      Next
      'test situation where no map exists
      locxyz(23) = 100.0
      locxyz(21) = 2.25
      vLoc = locxyz
      Dim vLoad As Variant
      Dim vIsValid As Variant
      
      ret = map.GetOutputDataSurface(1)
      'test situation where no map exists
      map.MapOption = FMO_NONE
     'test situation where set value if no map
      'map.MapOption = FMO_VALUE      map.DefaultMapValue1=999
      map.DefaultMapValue2=-999
      map.DefaultMapValue3 = 1000MapOutputDataToLocation
( count, vXYZ, vValXYZ, qValid )
MapOutputDataToLocation   API-2711
    map.MapOption = FMO_EXTEND
    'map.MapOption = FMO_INTERP
    If(ret = FE_OK) Then    ret = map.MapOutputDataToLocation(np, vLoc, vLoad, vIsValid)
    End If
    Dim msg As String
    Dim msg2 As String
    msg = "Pt   X     Y     Z     vX   vY    vZ    Valid"
    App.feAppMessage(FCL_BLACK, msg)
    For i=1 To np      msg2 = Str$(vIsValid(i-1))
      msg = Str$(ptID(i-1)) + "   " +Str$(vLoc(3*i-3))+ "   "+ _
      Str$(vLoc(3*i-2))+ "      "+Str$(vLoc(3*i-1))+ "  " + _
      Str$(vLoad(3*i-3)) + "    "+ Str$(vLoad(3*i-2)) + "     "+ _
      Str$(vLoad(3*i-1)) + "  "+ msg2     App.feAppMessage(FCL_BLACK, msg)
    Next
End SubMapOutputDataToLocation
( count, vXYZ, vValXYZ, qValid )
 API-2712  
5.47  Material Objects
Material objects correspond to th e materials in your model. They  are derived from Entity objects 
so, in addition to the properties and methods described here, all of the properties and methods 
defined for Entity objects are also available for ma terials. For more inform ation, see Section 5.1, 
"Common Entity Proper ties and Methods". 
Use the feMatl method of the FEM AP Application object, or the Matl method of the Element 
object to create Material objects.
5.47.1  Material Object Properties
Materials are always stored with a SetID= 1, and the ID equal to the material ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant.  Refer to Section 1.2.7, "Multiple Defin itions of Array Properties"   for more information.
Property Description
INT4 color The material color.
INT4 typeType of material: 0=Isotropic, 1=2D Orthotropic, 2=3D Ortho-
tropic, 3=2D Anisotropic, 4=3D Anisotropic, 5=Hyperelastic, 6=General, 7=Fluid
INT4 subtype Subtype for general materials.INT4 layer The ID of the layer associated with the material.
STRING title Material title (maximum 79 characters).BOOL bval[0..9]
or
V ARIANT vbvalArray of Boolean flags.
INT4 ival[0..24]
orV ARIANT vivalArray of integer values.
REAL8 mval[0..199]
or
V ARIANT vmvalArray of real values.
INT4 fval[0..49]
or
V ARIANT vfvalArray of function IDs.
INT4 tval[0..69]
orV ARIANT vtvalAdditional function IDs.
Additional Properties
REAL8 mmat[0..199] Same as mval, but retu rns/sets entire array as a V ARIANT.
INT4 imat[0..24] Same as ival but re turns/sets entire array as a V ARIANT.
   API-2713
INT4 fmat[0..49] Same as fval, but re turns/sets entire array as a V ARIANT.
INT4 tmat[0..69] Same as tval, but re turns/sets entire array as a V ARIANT
The following properties can be accessed directly from the value arrays, or by name using the following 
references.
REAL8 Ex
Young’s Modulus REAL8 Ey
REAL8 EzREAL8 Gx
Shear Modulus REAL8 Gy
REAL8 GzREAL8 Nuxy
Poisson’s Ratio REAL8 Nuyz
REAL8 NuxzREAL8 Alphaxx
Coefficient of Thermal ExpansionREAL8 Alphayy
REAL8 AlphazzREAL8 AlphaxyREAL8 AlphayzREAL8 AlphazxREAL8 Kxx
Thermal ConductivityREAL8 Kyy
REAL8 KzzREAL8 KxyREAL8 KyzREAL8 KzxREAL8 Cp Heat CapacityREAL8 Density DensityREAL8 Damping Damping CoefficientREAL8 RefTemp Reference TemperatureProperty Description
 API-2714  
5.47.1.1  Accessing Material Properties
You can access the individual properties for the Ma terial object by referencing the properties 
described above, and the data contained in the ta ble below. For example, to retrieve the Young’s 
Modulus for an Isotropic material, use:
E = mt.mval(0)
or 
rho = mt.mval(49)
for density. 
This method provides grea t flexibility, but can be slow if you are going to work with a large num-
ber of properties. In this case, it is best to a ccess the data using “Additional Properties”. These all 
set and return entire arrays of values in on e reference. For example, you could write:
Dim mt as Object 
Set mt = femap.feMatl 
Dim v  as Variant 
mt.Get(1) 
v = mt.mmat 
v(0)=30.0E6 
v(49)=0.1 
mt.mmat = v 
mt.Put(1)
This code loads Material 1, retrieves the entire a rray of real values into “v”, updates the Young’s 
modulus and density, puts the entir e array back, and saves the upda ted material definition. While 
the code is slightly longer than simply accessing  the individual properties, performance will be 
better using this approach.
5.47.1.2  Material Array Index Values
In general, most of the material data is simply stored in the va rious array properties. The location 
of the specific property data is defined in the following table. 
The IDs of the functions used for function depend ence of the standard properties (accessed in 
FEMAP by pressing the Function  button on the Material  dialog boxes) can be accessed by looking 
in the following table under the “Real Values” sec tion. There you should identify the property that 
you want, and call the tval property with the same index as the mval  property that you are looking 
for.REAL8 TensionLimit1
Limit Stress/Strain in Tension
REAL8 TensionLimit2
REAL8 CompressionLimit1
Limit Stress/Strain in Compression
REAL8 CompressionLimit2
REAL8 ShearLimit Limit Stress/Strain in ShearREAL8 TsaiWu Tsai-Wu Interaction FactorProperty Description
Value   API-2715
Value Description Locations
Integer Values
HYPER_POLYORD(i)Strain Energy Polyno mial Order for Hyper-
elasticival[0],ival[1]
NONLINEAR_TYPENonlinear Type (0=None/Linear, 1=Nonlinear 
Elastic, 2=Plastic, 3=Elasto-Plasticival[2]
HARDENING_TYPE Hardening Data Type ival[3]YIELD_TYPEYield Criterion (0=von Mises, 1=Tresca, 
2=Mohr-Coloumb, 3=Drucker-Prager)ival[4]
CREEP_TYPECreep Type (0=None, 1=Empirical, 2=Tabu-
lar)ival[5]
CREEP_EMPIRICAL_FORM(i) Empirical Creep Law Format Flags ival[6..9]
DP_HARDENING_DATA_TYPE Drucker-Prag er Hardening data type ival[10]
PLY_FAILURE_MODEPly/Bond Failure - Ply Failure Theory 
(0=None, 1=Hill, 2=Hoffman, 3=Tsai-Wu, 
4=Max Strain, 5=Max Stress, 6=Max Trans-verse Shear)ival[11]
BOND_FAILURE_MODEPly/Bond Failure - Bond Failure Theory 
(0=None, 1=Transverse Shear, 2=Normal 
Stress)ival[12]
Boolean Values
HAS_STRAIN_LIMITSFlag if material uses strain limits instead of 
stress limitsbval[0]
FLUID IS LIQUIDFlag if a fluid type material is a liquid vs. a 
gasbval[1]
OPT_FRONT_SIDE bval[2]
OPT_REV_SIDE bval[3]
DMATRIX_HYP_D1_ZEROFlag to write D1 in Nastran Hyperelastic 
material as Zerobval[4]
Real Values
E(i) Young's modulus mval[0..2]G(i) Shear modulus mval[3..5]NU(i) Poisson's ratio mval[6..8]
GMATRIX_3D(i)Upper triangle of 6x6 3D anisotropic elastic 
matrix.mval[9..29]
 API-2716  Locations
GMATRIX_2D(i)Upper triangle of 3x3 2D anisotropic elastic 
matrix.mval[30..35]
THERMAL_EXPANSION(i) Thermal expa nsion coefficients. mval[36..41]
THERMAL_CONDUCTIVITY(i) Thermal cond uctivity coefficients. mval[42..47]
THERMAL_CAPACITY Spec ific Heat mval[48]
DENSITY Material density mval[49]DAMPING Damping coefficient mval[50]TEMPERATURE Reference temperature mval[51]TENSION_LIMIT(i) Stress allowable in tension mval[52..53]COMPRESSION_LIMIT(i) Stress allowa ble in compression mval[54..55]
SHEAR_LIMIT Stress allowable in shear mval[56]
TSAI_WU_INTERACTION Tsai_wu interaction factor mval[57]
AMATRIX_HYP(i) Hyperelastic Amatrix values mval[58..78]DMATRIX_HYP(i) Hyperelastic Dmatrix values mval[79..83]HARDENING_SLOPE Plasticity Hardening Slope mval[84]
YIELD_LIMITS(i)Plasticity Yield Limits - Initial Yield Stress, 
Friction Angle, additional yield limitsmval[85..89]
CREEP_THRESHOLD_STRESS Creep Threshold Stress mval[90]
CREEP_REF_TEMP Creep Reference Temperature mval[91]CREEP_TEMP_DEP_RATE Temperature Dependent Creep Rate mval[92]
CREEP_EMPIRICAL_COEFF(i) Empirical Cr eep Law Coefficients mval[93..99]
HEAT GENERATION Heat Generation Valuemval[100], or 
tval[57]
REFERENCE ENTHALPY Enthalpy for Phase Change mval[101]PHASE CHANGE TEMP Temperature for Phase Change Onset mval[102]PHASE CHANGE TEMP RANGE Temperature Range for Phase Change mval[103]
LATENT HEAT OF FUSION Latent heat of Fusion mval[104]SPECIFIC HEAT ABOVE PHASE Specific heat above Phase Change Temp mval[105]OPT EMISSIVITY Optical - Emissivity mval[106]OPT EMISSIVITY REV Optical - Em issivity, Reverse Side mval[107]Value Description Locations
Locations   API-2717
OPT ABSORPTIVITY Optical - Absorptivity mval[108]
OPT ABSORPTIVITY REV Optical - Ab sorptivity, Reverse Side mval[109]
OPT TRANSMISSIVITY SOLAR Optical - Solar Transmissivity mval[110]
OPT TRANSMISSIVITY IR Optical - InfraRed Transmissivity mval[111]
OPT REFLECTIVITY SOLAR Optical - Solar Reflectivity mval[112]
OPT REFLECTIVITY SOLAR REV Optical - So lar Reflectivity, Reverse Side mval[113]
OPT REFLECTIVITY IR Optical - InfraRed Reflectivity mval[114]
OPT REFLECTIVITY IR REV Optical - InfraRed Reflectivity, Reverse mval[115]
GAS CONSTANT Fluid Gas Constantmval[116] or 
tval[58]
DYNAMIC VISCOSITY Fluid Dynamic Viscositymval[117] or 
tval[59]
PRANDTL NUMBER Prandtl Numbermval[118] or 
tval[60]
ELECTRICAL_RESISTIVITY Optical - El ectrical Resistivity mval[119]
VOL_SPECIFIC_HEAT Fluid Sp ecific Heat, Cv mval[120]
OPT_REFRACTION Optical - Index of Refraction mval[121]OPT_REFRACTION_REV Optical - Index of Refraction, Reverse mval[122]BULK_MODULUS Other Types - Bulk Modulus mval[123]
SPEED_OF_SOUNDOther Types - Speed of Sound - C on NX Nas-
tran Fluid Material (MAT10) and on MSC 
Nastran Fluid Material (MAT10)mval[124]
PLY_FAILURE_STRESS_XCPly/Bond Failure - Compressive Stress Limits 
Value 1mval[125]
PLY_FAILURE_STRESS_YCPly/Bond Failure - Compressive Stress Limits 
Value 2mval[126]
PLY_FAILURE_STRESS_ZCPly/Bond Failure - Compressive Stress Limits 
Value 3mval[127]
PLY_FAILURE_STRESS_XTPly/Bond Failure - Tensile Stress Limits 
Value 1mval[128]
PLY_FAILURE_STRESS_YTPly/Bond Failure - Tensile Stress Limits 
Value 2mval[129]
PLY_FAILURE_STRESS_ZTPly/Bond Failure - Tensile Stress Limits 
Value 3mval[130]Value Description Locations
 API-2718  Locations
PLY_FAILURE_STRESS_XYSHRPly/Bond Failure - Shea r Stress Limits Value 
12mval[131]
PLY_FAILURE_STRESS_YZSHRPly/Bond Failure - Shea r Stress Limits Value 
23mval[132]
PLY_FAILURE_STRESS_XZSHRPly/Bond Failure - Shea r Stress Limits Value 
13mval[133]
PLY_FAILURE_STRAIN_XCPly/Bond Failure - Comp ressive Strain Limits 
Value 1mval[134]
PLY_FAILURE_STRAIN_YCPly/Bond Failure - Comp ressive Strain Limits 
Value 2mval[135]
PLY_FAILURE_STRAIN_ZCPly/Bond Failure - Comp ressive Strain Limits 
Value 3mval[136]
PLY_FAILURE_STRAIN_XTPly/Bond Failure - Tensile Strain Limits 
Value 1mval[137]
PLY_FAILURE_STRAIN_YTPly/Bond Failure - Tensile Strain Limits 
Value 2mval[138]
PLY_FAILURE_STRAIN_ZTPly/Bond Failure - Tensile Strain Limits 
Value 3mval[139]
PLY_FAILURE_STRAIN_XYSHRPly/Bond Failure - Shear Strain Limits Value 
12mval[140]
PLY_FAILURE_STRAIN_YZSHRPly/Bond Failure - Shear Strain Limits Value 
23mval[141]
PLY_FAILURE_STRAIN_XZSHRPly/Bond Failure - Shear Strain Limits Value 
13mval[142]
PLY_FAILURE_TSAI_XYPly/Bond Failure - Tsai-Wu Interaction Value 
12mval[143]
PLY_FAILURE_TSAI_YZPly/Bond Failure - Tsai-Wu Interaction Value 
23mval[144]
PLY_FAILURE_TSAI_XZPly/Bond Failure - Tsai-Wu Interaction Value 
13mval[145]
BULK_MODULUS_RATIOOther Types - Bulk Mod Ratio - GAMMA on 
NX Nastran Fluid Material (MAT10)mval[170]
ADMITTANCE_COEFFICIENTOther Types - Admittance Coefficient - 
ALPHA on MSC Nastran Fluid Material 
(MAT10)mval[171]
Function ValuesValue Description Locations
Locations   API-2719
EXPERIMENTAL_FUNCTIONS(i)IDs of Hyperelastic Experimental Data Func-
tionsfval[0..4]
NONLINEAR_FUNCTION ID of function for Plasticity fval[5]
CREEP_FUNCTIONS(i) Tabular Model Creep Function IDs fval[6..8]DP_YIELD_FUNCTION ID of Drucker-Prager Yield Function fval[9]OPT EMISSIVITY FUNCTION ID of Op tical Emissivity Function fval[10]
OPT_EMISSIVITY REV FUNC-
TIONID of Optical Emissivity Rev Side Function fval[11]
OPT ABSORPTIVITY FUNCTION ID of Op tical Absorptivity Function fval[12]
OPT ABSORPTIVITY REV FUNC ID of Optical  Absorptivity Rev Side Function fval[13]
OPT TRANSMISSIVITY SOLAR 
FUNCID of Solar Transmissivity Function fval[14]
OPT TRANSMISSIVITY IR FUNC ID of In fraRed Transmissivity Function fval[15]
OPT REFLECTIVITY SOLAR 
FUNCID of Solar Reflectivity Function fval[16]
OPT REFLECTIVITY SOLAR REV 
FUNCID of Solar Reflectivity, Rev Side Function fval[17]
OPT REFLECTIVITY IR FUNC ID of In fraRed Reflectivity Function fval[18]
OPT REFLECTIVITY IR REV 
FUNCID of InfraRed Reflectivity Rev Side Function fval[19]
ELECTRICAL RESISTIVITY 
FUNCID of Electrical Resistivity Function fval[20]
OPT_REFRACTION_FUNC ID of Index of Refraction Function fval[21]
OPT_REFRACTION_REV_FUNC ID of Index of Refraction Rev Side Function fval[22]
BULK_MODULUS_FUNCID of Bulk Modulus Function - NX Nastran 
Fluid Material (MAT10)fval[39]
DAMPING_COEFFICIENT_FUNCID of Damping Coeff Function - NX Nastran 
Fluid Material (MAT10)fval[40]
BULK_MODULUS_RATIO_FUNCID of Bulk Mod Ration Function - NX Nas-
tran Fluid Material (MAT10)fval[41]
DENSITY_FUNCID of Density Function - NX Nastran Fluid 
Material (MAT10)fval[49]Value Description Locations
 API-2720  AutoComplete
5.47.2  Material Object Methods
5.47.2.1  AutoComplete
AutoComplete
( void )
Description:This method automatic ally fills out additional proper ties in the material object. 
Input:NoneOutput:NoneReturn Code:
None
Remarks/Usage:Often you want to define a material using a particular type - for example, orthotropic. In some cases 
however FEMAP will need to use that material as anot her type - for example, an isotropic. To do this 
successfully, all of the properties, not just the ones for the defined type need to be completed. This 
method will automatically compute, using the standard definitions in  FEMAP, the required properties. 
Only standard structural prop erties are supported - E, G, NU, GMATRIX_2D, GMATRIX_3D, THER-
MAL_EXPANSION, and THERMAL_CONDUCTIVITY , and the TENSION_LIMIT and COMPRES-SION_LIMIT are currently supported.
You should call this method afte r completing your material definitio n, and immediately before calling 
Put to store the material in the database.
Example:None
AreDuplicate   API-2721
5.47.2.2  AreDuplicate
AreDuplicate
( nMatl1, nMatl2, ignoretitle )
Description:This method determin es if two materials have identical values and includes an optio n to also consider 
the titles of the two materials
Input:INT4 nMatl1 ID of a materialINT4 nMatl2 ID of a material to compar e to the material specified in nMatl1
BOOL ignoretitleShould title be ignored when determ ining if the 2 materials are dupli-
cates (True=titles ignored, False=titles considered)
Output:
None
Return Code:FALSE / 0 Materials are not duplicates (i.e., different)TRUE / 1 Materials are duplicatesRemarks/Usage:Returns TRUE or FALSE instead of FEMAP Return Code.Example:None
 API-2722  GetLibraryOfType
5.47.2.3  GetLibraryOfType
GetLibraryOfType
( libINDEX, libTYPE, libFILE )
Description:This method retrieves a material of a specified type from the Material library.
Input:
INT4 libINDEXThe index of the entity stored in th e library. The first material of the 
specified type stored is libINDEX = 0, the second has libINDEX = 1, 
and so on. If you specify libINDEX = -1, a dialog box will be dis-
played showing all materials of the specified type in the library, and 
will allow the user to select the material to load.
INT4 or enum libTYPEUse zMaterialType enumeration. Alte rnatively, enter value for Type 
of material: 0=Isotropic, 1=2D Orthotropic, 2=3D Orthotropic, 3=2D 
Anisotropic, 4=3D Anisotropic, 5= Hyperelastic, 6=General, 7=Fluid
INT4 or enum libFILEUse zLibraryFile enumerat ion. Alternatively, en ter value for Type of 
library: 0=Open Dialog Box, 1=Personal, 2=Shared, 3=Femap Stan-dard Libraries
Output:NoneReturn Code:
FE_FAILNo Material was selected. Either th e library is empty or does not con-
tain any Materials of the matchi ng type (e.g. 3D Orthotropic)
FE_CANCEL User canceled the dialog box to select a Material from the library
FE_INV ALID Library file was opened but is n't a valid library of the correct type
FE_NOT_EXIST The selected index in the library was not found.
FE_NOT_A V AILABLEThe library file could not be accessed. Either the filename is speci-
fied incorrectly in FEMAP, or there is some other permission or cor-ruption problem with the file.
FE_BAD_TYPE libTYPE value does not corre spond to an available material type
Remarks/Usage:This method can be used instead of specifying the “Active Material Type” before using the GetLibrary 
method to load a material from the Material library.
Example:None
GetValueArray   API-2723
5.47.2.4  GetValueArray
GetValueArray
( numValue, nMatlID, nMatlIndex, dValue )
Description:This method returns an array of material property values using any combination of material IDs and 
material array index values.
Input:INT4 numValue The number of entries in nMatlID and nMatlIndexINT4 nMatlID[0..numValue-1] The IDs of the materialsINT4 nMatlIndex[0..numValue-1] The ID(s) of the material array index value(s). 
Output:REAL8 dValue[0..numvalue-1] The array of  all the material property values
Return Code:FE_BAD_DATA One or more nMatlIndex va lues are outside the allowable range
Remarks/Usage:See Section 5.47.1.1, "Accessing Material Properties"  and Section 5.47.1.2, "Material Array Index Val-
ues" for more information about acc essing material property values using the material array index val-
ues.
Example:
 API-2724  GetValueArray
Sub Main
    Dim App As femap.model
    Set App = feFemap()    Dim mt As femap.Matl
    Set mt = App.feMatl
    Dim mtset As femap.Set    Set mtset = App.feSet
    Dim Mats As Variant
    Dim MatInd As Variant    Dim MatVals As Variant
    Dim numMat As Long
    mtset.AddAll (FT_MATL)    numMat = mtset.Count
    MatCount = numMat*2-1
    ReDim MatInd(MatCount) As Long
    ReDim Mats(MatCount) As Long
    mtset.First    For i = 0 To numMat-1
MatInd(i*2) = 0
MatInd(i*2+1) = 6Mats(i*2) = mtset.CurrentID
Mats(i*2+1) = mtset.CurrentID
mtset.Next    Next
    rc = mt.GetValueArray (numMat*2, Mats, MatInd, MatVals)
    For i = 0 To numMat-1    rc = App.feAppMessage(FCM_NORMAL,"Material ID” _       
+Str$(Mats(i*2))+" E is"+ Str$(MatVals(i*2)))
    rc = App.feAppMessage(FCM_NORMAL,"Material ID" _
 +Str$(Mats(i*2+1))+" nu is" + Str$(MatVals(i*2+1)))
    NextEnd SubGetValueArray
( numValue, nMatlID, nMatlIndex, dValue )
PutValueArray   API-2725
5.47.2.5  PutValueArray
PutValueArray
( numValue, nMatlID, nMatlIndex, dValue )
Description:This method updates any number of material property values on any number of materials
Input:INT4 numValue The number of entries in nMatlID, nMatlIndex, and dValueINT4 nMatlID[0..numValue-1] The IDs of the materials
INT4 nMatlIndex[0..numValue-1] The IDs of  the material array index value(s). 
REAL8 dValue[0..numvalue-1] The material property valuesOutput:NoneReturn Code:FE_NOT_EXIST One or more Materials being updated do not existFE_BAD_DATA One or more nMatlIndex values are outside the allowable range
Remarks/Usage:See Section 5.47.1.1, "Accessing Material Properties"  and Section 5.47.1.2, "Material Array Index Val-
ues" for more information about acc essing material property values using the material array index val-
ues.
Example:
 API-2726  PutValueArray
Sub Main
    Dim App As femap.model
    Set App = feFemap()    Dim mt As femap.Matl
    Set mt = App.feMatl
    Dim mtset As femap.Set    Set mtset = App.feSet
    Dim Mats As Variant
    Dim MatInd As Variant    Dim MatVals As Variant
    Dim numMat As Long
    mtset.AddAll (FT_MATL)    numMat = mtset.Count
    MatCount = numMat*2-1
    ReDim MatInd(MatCount) As Long
    ReDim Mats(MatCount) As Long
    ReDim MatVals(MatCount) As Double    mtset.First
    For i = 0 To numMat-1
      MatInd(i*2) = 0      MatInd(i*2+1) = 6
      MatVals(i*2) = 500000
      MatVals(i*2+1) = .33      Mats(i*2) = mtset.CurrentID
      Mats(i*2+1) = mtset.CurrentID
mtset.Next    Next
    rc = mt.PutValueArray (numMat*2, Mats, MatInd, MatVals)
End SubPutValueArray
( numValue, nMatlID, nMatlIndex, dValue )
PutValue   API-2727
5.47.2.6  PutValue
PutValue
( nMatlSetID, nMatlIndex, dValue )
Description:This method updates a single material property value on any number of materialsInput:INT4 nMatlSetID The ID of set of material IDsINT4 nMatlIndex The ID of the material array index value. REAL8 dValue The material property valueOutput:NoneReturn Code:FE_BAD_DATA One or more nMatlIndex va lues are outside the allowable range
Remarks/Usage:See Section 5.47.1.1, "Accessing Material Propertie s" and Section 5.47.1.2, "Material Array Index 
Values" for more information about accessing material  property values using the material array index 
values.
Example:None
 API-2728  CopyArray
5.47.2.7  CopyArray
CopyArray
( bUpdateReferences, bCopyToStartID, nCopy ToStartID, numID, nOrigID, pnNewID )
Description:This method copies any number of materials and allo ws you to select a starting ID for the copies or 
provide all IDs for all copies. It also allows you to choose if the “new material” should replace the 
“original material” anywhere the original material was referenced (i.e., prop erty “n” would now refer-
ence copied material instead of original material)
Input:
BOOL bUpdateReferences Flag to indicate if “copied ma terial” should replace “original 
material” anywhere the “original material” was referenced. True 
= original material references are replaced with copied material.
BOOL bCopyToStartIDFlag controls IDs of “copied materials”. When True, uses value of 
nCopyToStartID as the first ID of  the copies. If a material ID 
already exists in the range where new materials will be created, that ID is skipped and the mate rial will be placed in the next 
empty ID. When False, then pnNewID becomes an input instead 
of an output and must be populated with the same number of entries as nOrigID and cannot contain any IDs of materials which 
already exist.
INT4 nCopyToStartID Starting ID for copied materialsINT4 numID Number of original material IDs in nOrig array
INT4 nOrigID[numID-1] The IDs of the original materialsOutput:
INT4 pnNewID[numID-1]The IDs of the newly created (copied) materials. If bCopyToStar-
tID is False, this is treated as an  input instead of an output, which 
contains the new IDs off all copied materials. It must have the 
same number of entries as nOrigID and cannot contain any IDs of 
existing materials.
Return Code:FE_NOT_A V AILABLE One or more of the materials to be created already existFE_NOT_EXIST One or more of the materials being copied do not existFE_NO_MEMORY Unable to allocate me mory to process this operation
Remarks/Usage:
Example:
CopyArray   API-2729
 API-2730  
5.48  Mesh Point Objects
Mesh Point (MeshHardPoint) obje cts correspond to the mesh points in your model. They are 
derived from Entity objects, so in addition to the properties and me thods described here, all of the 
properties and methods defined for Entity objects are also availabl e for point objects. For more 
information, see Section 5.1, "Com mon Entity Properties and Methods".
Use the feMeshHardPoint method of the FEMAP App lication object to create Mesh Point objects.
5.48.1  MeshHardPoint Object Properties
Mesh Points are always stored with a SetID= 1, and the ID equal to the Mesh Point ID.
Property Description
INT4 DefinitionIDID of mesh point definition associa ted with a mesh point. It is 
not required for a mesh point to reference a mesh point defini-tion.
INT PointID ID of mesh point’s underlying geometric point.INT4 layer The ID of the layer associated with the mesh point.
INT4 color The mesh point color
INT4 OnGeometryTypeType of geometric entity the me sh point is associated. 0=None, 
3=Point, 4=Curve, 5=Surface, 39=Solid
INT4 OnGeometryIDID of the geometric entity (i.e . point ID, curve ID, surface ID, 
or solid ID)
BOOL NodeOnGeometryFlag telling if the “Node on Ge ometry” option is enabled (True) 
disabled (False) for the mesh point
REAL8 DistanceToGeometryDistance from underlying point to mesh point location on the 
associated geometry
BOOL LockedFlag telling if the “Locked” op tion is enabled (True) disabled 
(False) for the mesh point
REAL8 LocationOnGeometry[0..2]
orV ARIANT vLocationOnGeometryThese are the coordinates of the mesh point on geometry, not 
the coordinates of the underlying point. They are always speci-fied in global rectangular coordinates.
Enable   API-2731
5.48.2  MeshHardPoint Object Methods
5.48.2.1  Enable
Enable
Description:
This method is used to enable or disable a Mesh PointInput:
BOOL bEnable Flag to set the state of the mesh point. 
Output:
NoneReturn Code:FE_FAIL Mesh point is not proper type.
Remarks/Usage:
None
Example:None( bEnable )
 API-2732  IsEnabled
5.48.2.2  IsEnabled
IsEnabled
( void )
Description:This method checks the state of the mesh point.Input:NoneOutput:NoneReturn Code:FE_FAIL Mesh point is disabled.FE_OK Mesh point is enabled.Remarks/Usage:NoneExample:None
OnPoint   API-2733
5.48.2.3  OnPoint
OnPoint
( pointID )
Description:This method sets the ID of the underlying point of a mesh pointInput:INT4 pointID ID of geometric point to use for underlying point of mesh pointOutput:NoneReturn Code:FE_NOT_EXIST Specified underlying geometric point does not existRemarks/Usage:NoneExample:None
 API-2734  AutoDistanceToGeometry
5.48.2.4  AutoDistanceToGeometry
AutoDistanceToGeometry
( void )
Description:This method automatically  calculates a distance, then sets the “Distance to Geometry” value for the 
mesh point object which is assoc iated with a geometric entity
Input:NoneOutput:NoneReturn Code:FE_FAIL Mesh point is not associ ated with any geometric entity
FE_OK Calculation of distance and setting of value successfulRemarks/Usage:NoneExample:None
UpdateMeshPoints   API-2735
5.48.2.5  UpdateMeshPoints
UpdateMeshPoints
( bDoAll, nMeshPointSetID, nDuplicatesOnSolidID )
Description:This method automatic ally determines which geometric entity all or the selected mesh point(s) should 
be associated
Input:
BOOL bDoAllFlag to have all mesh points be updated (True) or only the mesh 
points included in the set obj ect specified for nMeshPointSetID 
(False)
INT4 nMeshPointSetIDThe ID of a set that contains a li st of mesh point IDs that will be 
automatically associated with geom etric entities, if they are not 
already associated with a geometric entity. Alternatively, if you spec-
ify a negative value, this is simply the ID of the single mesh point to 
associate to a geometric entity
INT4 nDuplicatesOnSolidIDID of solid to automatically attach  Mesh Point(s) currently in set 
object specified for nMeshPointSetID . Mesh points in set will auto-
matically attach to points, curves , and/or surfaces of the specified 
solid, or the solid itself.  Setting this to a value of 0 will consider all 
solids.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-2736  UpdateMeshPointsOnGeometry
5.48.2.6  UpdateMeshPointsOnGeometry
UpdateMeshPointsOnGeometry
( nSolidSetID, nSurfaceSetID, nCurveSetID, nPointSetID, nDuplicatesOnSolidID, 
bUpdateUnassignedPoints, bUpdatePointsOnDeletedGeometry, bResizeCurves, 
bEnabledPointsOnly )
Description:This method updates mesh points associated with specific solids, surfaces, curves, and/or points while 
considering a number of additional options.
Input:
INT4 nSolidSetIDThe ID of a set that contains a lis t of solid IDs to consider when 
updating mesh points. Alternatively, if you specify a negative 
value, this is simply the ID of the single solid to consider when 
updating.
INT4 nSurfaceSetIDThe ID of a set that contains a lis t of surface IDs to consider when 
updating mesh points. Alternatively, if you specify a negative value, this is simply the ID of the single surface to consider when 
updating.
INT4 nCurveSetIDThe ID of a set that contains a lis t of curve IDs to consider when 
updating mesh points. Alternatively, if you specify a negative value, this is simply the ID of the single curve to consider when 
updating.
INT4 nPointSetIDThe ID of a set that contains a lis t of point IDs to consider when 
updating mesh points. Alternatively, if you specify a negative value, this is simply the ID of the single point to consider when 
updating.
INT4 nDuplicatesOnSolidIDID of solid to automatically a ttach Mesh Point(s). Only mesh 
points currently attached to the points, curves, surfaces and/or 
solids specified for nPointSet, nC urveSet, nSurfaceSet, and nSol-
idSet will be considered. Setting this  to a value of 0 will consider 
all solids.
BOOL bUpdateUnassignedPointsFlag to have unassigned mesh points be updated (True) or only 
mesh points which are currently  assigned to geometry (False)
BOOL bUpdatePointsOnDeleted-
GeometryFlag to have update points on geometric entities which have been 
deleted (True) or not (False)
BOOL bResizeCurvesFlag to have update mesh size on curves which now have a mesh 
point associated (True) or not (False)
BOOL bEnabledPointOnlyFlag to only consider mesh po ints which are currently enabled 
(True) or all mesh points (False)
Output:
UpdateMeshPointsOnGeometry   API-2737
None
Return Code:NoneRemarks/Usage:NoneExample:NoneUpdateMeshPointsOnGeometry
( nSolidSetID, nSurfaceSetID, nCurveSetID, nPointSetID, nDuplicatesOnSolidID, 
bUpdateUnassignedPoints, bUpdatePointsOnDeletedGeometry, bResizeCurves, bEnabledPointsOnly )
 API-2738  UpdateMeshPointsOnGeometry
   API-2739
5.49  Mesh Point De finition Objects
MeshPointDefinition (MeshHardPointD efinition) objects correspond to  the mesh point definitions 
in your model. They are derive d from Entity objects, so in additio n to the properties and methods 
described here, all of the properties and methods defined for Entity objects are also available for 
point objects. For more informa tion, see Section 5.1, "Common Entity Properties and Methods".
Use the feMeshHardPointDefinition method of th e FEMAP Application object to create Mesh 
Point Definition objects.
5.49.1  MeshHardPointDefin ition Object Properties
MeshPointDefinition objects are always stored with  their ID equal to the ID of the Mesh Point 
Definition; however, the IDs of the Mesh Points which reference a Mesh Point Definition can have 
any ID. To find a particular Mesh Point which references, use the NextM eshPoint to get a fully 
populated MeshPoint object and check what it contains.
Property Description
STRING title Title of Mesh Point Definition
 API-2740  ResetNextMeshPoint
5.49.2  MeshHardPointDef inition Object Methods
5.49.2.1  ResetNextMeshPoint
ResetNextMeshPoint
( void )
Description:This method initializes all op tions prior to calling the “N extMeshPoint” method below
Input:NoneOutput:NoneReturn Code:
FE_OK
Remarks/Usage:This method is used prior to ca lling NextMeshPoint to specify which MeshPoint will be retrieved. It 
simply resets this object so that the next call to NextMeshPoint will return th e first MeshPoint available 
in the object.
Example:
NextMeshPoint   API-2741
5.49.2.2  NextMeshPoint
NextMeshPoint
( pDISPATCH )
Description:This method returns the next ava ilable mesh point that is contai ned in the Mesh Point Definition
Input:NoneOutput:OBJECT pDISPATCH The next mesh point object.Return Code:
FE_FAILThere are no more mesh points to  retrieve. Call ResetNextMeshPoint 
to go back to the first mesh point, if you want to retrieve the mesh points again.
Remarks/Usage:This method, coupled with ResetNex tMeshPoint provides an easy way to retrieve all mesh points from a 
Mesh Point Definition.
For any method where API obje cts are returned as parameters, such as this one, it is your responsibility 
to free that object when you are finished using the object. Some pr ogramming languages like Basic will 
do this automatically, but others lik e C++, require you to do this manu ally. The objects are only created 
or returned when the Return Code is FE_OK.
Example:
 API-2742  CountMeshPoints
5.49.2.3  CountMeshPoints
CountMeshPoints
( void )
Description:This method returns the number of mesh points referenced by a mesh point definition, as a return code.
Input:NoneOutput:NoneReturn Code:INT4 numMeshPoints The number of  mesh points referenced by  this mesh point definition.
Remarks/Usage:This method relies on the curre nt Mesh Point Definition ID to count the referenc ed mesh points
Example:
CountMeshPoints   API-2743
 API-2744  
5.50  Monitor Point Objects
Monitor Point objects correspond to Monitor Points in the m odel, which are found on the Model, 
Simulation Entities  menu. They are derived from Entity obj ects, so in addition to the properties 
and methods described here, all of the properties and methods defined for Entity objects are also 
available for Monitor Point object s. For more information, see Section 5.1, "Common Entity Prop-
erties and Methods". 
Use the feMonitorPoint method of the FEMAP App lication object to create Monitor Point objects.
5.50.1  Monitor Poin t Object Properties
Monitor Points are always stored with a SetID= 1, and the ID equal to  the monitor point ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
INT4 color The monitor point color.INT4 layer The layer associat ed with the monitor point.
STRING title Monitor Point title (maximum 56 characters)
STRING Name Monitor Point Na me (maximum 8 characters)
INT4 typeMonitor Point type = enum zMptType:
Aerodynamic Contro l Monitor Point:
Component - 0..Aero Panel = MPT_1_AEROPANEL (0)Component - 1..Aero Mesh = MPT_1_AEROMESH (1)
Component - 2..Nodes = MPT_1_STRUCT (2)
Integrated Load Monitor Point = MPT_3 (3)
INT4 SumContributions[0..3]
orV ARIANT vSumContributionsOnly used when type = MONPNT3
Array of on/off flags for Mon itor Point Contributions (enum 
zMptContribution):
SumComponents[0] = Reaction (MPT_SPC)SumComponents[1] = MultiP oint Reaction (MPT_MPC)
SumComponents[2] = App lied Loads (MPT_APPLIED)
SumComponents[3] = DMIG (MPT_DMIG)
INT4 ElemGroupOnly used when type = MONPNT3
ID of Group of Included Elements. 0 = None, therefore look for 
List of Included Elements (see HasElemList and ElemSetID)
BOOL HasElemListOnly used when type = MONPNT3
When True, a List of Included Elements has been defined. See 
ElemSetID. When False, either  a ElemGroup has been defined 
or there are no Included Elements
INT4 ElemSetIDOnly used when type = MONPNT3
ID of Set Object containing IDs of Included Elements
STRING CompTitle Monitor Point List  Name (maximum 8 characters)
   API-2745
INT4 NodeGroupUsed when type = MONPNT1_STRUCT or MONPNT3
ID of Group of Included Nodes. 0 = None, therefore look for 
List of Included Nodes (see  HasNodeList and NodeSetID)
BOOL HasNodeListUsed when type = MONPNT1_STRUCT or MONPNT3
When True, a List of Included  Nodes has been defined. See 
NodeSetID. When False, either a NodeGroup has been defined 
or there are no Included Nodes
INT4 NodeSetIDUsed when type = MONPNT1_STRUCT or MONPNT3
ID of Set Object containing IDs of Included Nodes
BOOL HasPanelListOnly used when type = MONPNT1_AEROPANEL
When True, a List of Aero Panels has been defined. See Panel-
SetID. When False, there are no Included Aero Panels
INT4 PanelSetIDOnly used when type = MONPNT1_AEROPANEL
ID of Set Object containing IDs of Included Aero Panels
BOOL HasAeroMeshListOnly used when type = MONPNT1_AEROMESH
When True, a List of Aero Mesh has been defined. See AeroMeshSetID. When False, ther e are no Included Aero Mesh 
entities
INT4 AeroMeshSetIDOnly used when type = MONPNT1_AEROMESH
ID of Set Object containing IDs of Included Aero Mesh entities
INT4 SumComponents[0..5]
or
V ARIANT vSumComponentsArray of on/off flags for Su mmation Axes (enum zMptCompo-
nent):
SumComponents[0] = FX (MPT_FX)
SumComponents[1] = FY (MPT_FY)SumComponents[2] = FZ (MPT_FZ)
SumComponents[3] = MX (MPT_MX)
SumComponents[4] = MY (MPT_MY)SumComponents[5] = MZ (MPT_MZ)
REAL8 x
These are the individual coordi nates of the Summation Point. 
They are always specified in global rectangular coordinates.REAL8 y
REAL8 zREAL8 xyz[0..2]
or
V ARIANT vxyzThe coordinates of the Summatio n Point as an Array/Variant
INT4 defCSys ID of Coordinate System used for Summation Point
INT4 outCSysID of Output Coordinate Syst em for Summation Axes Results 
(-1 = Use Same CSys as Summation Point)Property Description
 API-2746  PutComponentSet
5.50.2  Monitor Point Object Methods
There following methods are available in addition to th e standard entity methods.
5.50.2.1  PutComponentSet
PutComponentSet
( entityTYPE, pSelectedComponentSet )
Description:This method loads Node IDs into  the Node List (type = MPT_1_STR UCT or MPT_3), Element IDs into 
the Element List (type = MPT_3), or Aero Panels  into the Aero Panel Li st (type = MPT_1_AERO-
PANEL) from a Set Object
Input:
INT4 entityTYPEThe entity type:
7=Node (FT_NODE), 8=Elem ent (FT_ELEMENT), 95=Aero 
Panel/Body (FT_AERO_PANEL)
OBJECT pSelectedComponentSet Set Object  containing the IDs of the entities 
Output:NoneReturn Code:
FE_BAD_TYPEThe data type for the component did not match the type of Moni-
tor Point 
Remarks/Usage:Cannot be used when type = MPT_1_AEROMESH. Use PutAeroMeshSet instea d. For more informa-
tion, see Section 5.50.2.2, "PutAeroMeshSet"
Example:None
PutAeroMeshSet   API-2747
5.50.2.2  PutAeroMeshSet
PutAeroMeshSet
( nSetID )
Description:This method loads a set of Aero Mesh  entity IDs into the Aero Mesh List
Input:
INT4 nSetIDThe ID of the Set Object that will  contain the IDs of the aero mesh 
entities. 
Output:NoneReturn Code:NoneRemarks/Usage:Only valid when type = MPT_1_AEROMESH. For all other types, use PutComponentSet. For more 
information, see Section 5. 50.2.1, "PutComponentSet".
Example:None
 API-2748  GetComponentSet
5.50.2.3  GetComponentSet
GetComponentSet
( entityTYPE, pSelectedComponentSet )
Description:This method loads a Set object that  contains the IDs of the Nodes in  the Node List (type = MPT_1_-
STRUCT or MPT_3), Elements in th e Element List (type = MPT_3), or Aero Panels in the Aero Panel 
List (type = MPT_1_AEROPANEL)
Input:
INT4 entityTYPEThe entity type:
7=Node (FT_NODE), 8=Elem ent (FT_ELEMENT), 95=Aero 
Panel/Body (FT_AERO_PANEL)
Output:
OBJECT pSelectedCompenentSetSet object that contains the IDs of the Nodes in the Node Lis, 
Elements in the Element List, or Aero Panels in the Aero Panel 
List
Return Code:
FE_BAD_TYPEThe data type for the component did not match the type of Moni-
tor Point 
Remarks/Usage:Cannot be used when type = MPT_1_AEROME SH. Use GetAeroMeshSet instead. See Section 
5.50.2.4, "GetAeroMeshSet"
Example:None
GetAeroMeshSet   API-2749
5.50.2.4  GetAeroMeshSet
GetAeroMeshSet
( pAeroMeshSet )
Description:This method Loads a Set object that  contains the IDs of the Aero M esh entities in the Aero Mesh List.
Input:NoneOutput:
OBJECT pAeroMeshSetSet object that contains the IDs of the Aero Mesh entities in the 
Aero Mesh list
Return Code:
FE_BAD_TYPEThe data type for the component di d not match the type of Monitor 
Point 
Remarks/Usage:Only valid when type = MPT_1_AEROMESH. For all other types, use GetComponentSet. See Section 
5.50.2.3, "GetComponentSet"
Example:None
 API-2750  ClearComponentSet
5.50.2.5  ClearComponentSet
ClearComponentSet
( entityTYPE )
Description:This method clears the array that co ntains the array that contains the IDs of the Nodes in the Node List 
(type = MPT_1_STRUCT or MPT_3), Elements in the El ement List (type = MPT_3), or Aero Panels in 
the Aero Panel List (type = MPT_1_AEROPANEL)
Input:
INT4 entityTYPEThe entity type:
7=Node (FT_NODE), 8=Elem ent (FT_ELEMENT), 95=Aero 
Panel/Body (FT_AERO_PANEL)
Output:NoneReturn Code:
FE_BAD_TYPEThe data type for the component di d not match the type of Monitor 
Point 
Remarks/Usage:Cannot be used when type = MPT_1_AEROMESH . Use ClearAeroMeshSet instead. Se e Section 
5.50.2.6, "ClearAeroMeshSet"
Example:None
ClearAeroMeshSet   API-2751
5.50.2.6  ClearAeroMeshSet
ClearAeroMeshSet
( void )
Description:This method clears the array that contains the array th at contains the IDs of the Aero Mesh entities in the 
Aero Mesh List
Input:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:Cannot be used when type = MPT_1_AEROMESH . Use ClearComponentSet instead. See Section 
5.50.2.5, "ClearComponentSet"
Example:None
 API-2752  
5.51  Node Objects
Node objects correspond to  the nodes in your model. They are derived from Entity objects so, in 
addition to the properties and methods described here, all of the properties and methods defined 
for Entity objects are also available for nodes.  For more information, see Section 5.1, "Common 
Entity Properties and Methods".
Use the feNode method of the FEMAP App lication object to create Node objects.
5.51.1  Node Object Properties
Nodes are always stored with a SetID=1, and the ID equal to the node ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
REAL8 x
These are the coordinates of th e node. They are always speci-
fied in global rectangular coordinates.REAL8 y
REAL8 z
V ARIANT xyz The coordinates of the node as a Variant
INT4 layer The ID of the la yer associated with the node.
INT4 color The node color.BOOL permBC[0..5]
or
V ARIANT vpermBCAn array of flags telling whether the corresponding degrees of 
freedom are constrained (True) or free (False) as permanent 
constraints.
INT4 type The node type (0=Node, 1=Scalar, 2=Extra).INT4 defCSys The ID of the definition coordinate system.INT4 outCSys The ID of the output coordinate system.
INT4 superelementIDThe ID of the superelement that contains this node (0=None/
Residual)
INT4 NumberOfElements Number of elements using the node.INT4 NumberOfLoads Total number of noda l loads using the node from all load sets
INT4 NumberOfConstraintsTotal number of nodal constraints and/or constraint equations 
using the node from all constraint sets
INT4 NumberOfMatricesTotal number of Direct Matrix  Input entities which reference 
the node.
Additional Properties
REAL8 xyz[0..2]Accesses all three coordinates of a node as a Variant. Same as 
using x, y, and z independently
GetAll   API-2753
5.51.2  Node Object Methods
5.51.2.1  GetAll
GetAll
( entID,  x, y, z, layer, color, type, defCSys, outCSys, permBC )
Description:This method retrieves an en tity with the specified ID. 
Input:INT4 entID ID of the entity to retrieve.Output:REAL8 x
Refer to the property descriptions fo r each of these items. permBC is 
returned in an integer array, even  though it contains only True/False 
values.REAL8 y
REAL8 z
INT4 layerINT4 colorINT4 typeINT4 defCSysINT4 outCSysINT4 permBC[0..5]Return Code:FE_FAIL The specified entity does not exist.
Remarks/Usage:Unlike the standard Get method, this  function returns all of the properties as arguments. If you need to 
get all of the property data anyway, calling this will be  faster than multiple calls to retrieve each property 
individually.
Example:None
 API-2754  GetAllArray
5.51.2.2  GetAllArray
GetAllArray
( setID, numNode, entID, xyz, layer, color, type, defCSys, outCSys, permBC )
Description:This method retrieve s arrays of values for a set of nodes.
Input:
INT4 setIDID of the set that contains the no de IDs to retrieve. If 0, retrieve 
all nodes in the model.
Output:INT4 numNode The number of nodes for which data is being returned.INT4 entID[0..numNode-1] Each entry is the ID of the associated node.
REAL8 xyz[0..(3*numNode)-1]The coordinates of the node. There are 3 entries, x, y, z for each 
node.
INT4 layer[0..numNod e-1] The ID of the layer for the node.
INT4 color[0..numNode-1] T he color of the node.
INT4 type[0..numNode-1] The type of the node.INT4 defCSys[0..numNode-1] The defin ition coordinate system of the node.
INT4 outCSys[0..numNode-1] The output coordinate system of the node.
INT4 permBC[0..(6*numNode)-1]Flags indicating the permanent co nstraints on the node. 0=off, 
1=on. There are 6 entries, corres ponding to the degrees of free-
dom for each node.
Return Code:FE_FAIL Unable to retrieve data from the selected nodes.Remarks/Usage:This method is the fastest way to re trieve information about a large numb er of nodes. If a retrieved node 
ID does not exist, then all of the values for that node ID will be 0.
Example:None
GetAllArray2   API-2755
5.51.2.3  GetAllArray2
GetAllArray2
( setID, numNode, entID, exist, xyz, layer, color, type, defCSys, outCSys, permBC )
Description:This method retrieves arrays of va lues for a set of nodes, including if a node exists in the database
Input:
INT4 setIDID of the set that contains the no de IDs to retrieve. If 0, retrieve 
all nodes in the model.
Output:INT4 numNode The number of nodes for which data is being returned.INT4 entID[0..numNode-1] Each entry is the ID of the associated node.
BOOL exist[0..numNode-1] Node existence, True=Node exists, False=Node does not exist
REAL8 xyz[0..(3*numNode)-1]The coordinates of the node. There are 3 entries, x, y, z for each 
node.
INT4 layer[0..numNod e-1] The ID of the layer for the node.
INT4 color[0..numNode-1] T he color of the node.
INT4 type[0..numNode-1] The type of the node.INT4 defCSys[0..numNode-1] The defin ition coordinate system of the node.
INT4 outCSys[0..numNode-1] The output coordinate system of the node.
INT4 permBC[0..(6*numNode)-1]Flags indicating the permanent co nstraints on the node. 0=off, 
1=on. There are 6 entries, corres ponding to the degrees of free-
dom for each node.
Return Code:FE_FAIL Unable to retrieve data from the selected nodes.Remarks/Usage:This method is the fastest way to re trieve information about a large numb er of nodes. If a retrieved node 
ID does not exist, then all of the va lues for that node ID will be 0. If it  is known that all of the nodes in 
the node set exist, use GetAllArray.
Example:None
 API-2756  GetCoordArray
5.51.2.4  GetCoordArray
GetCoordArray
( setID, numNode, entID, xyz )
Description:This method retrieves arrays of coordinates for a set of Nodes Input:
INT4 setIDID of the set that contains the node IDs to retrieve. If 0, retrieve all 
nodes in the model
Output:INT4 numNode The number of nodes for which data is being returned.INT4 entID[0..numNode-1] Each entry is the ID of the associated node
REAL8 xyz[0..(3*numNode)-1]The coordinates of the node. There are 3 entries, x, y, z for each 
node.
Return Code:FE_FAIL Unable to retrieve data from the selected nodes.Remarks/Usage:This is a simpler form of GetAllArray, if you simply  need the nodal coordinates. If a retrieved node ID 
does not exist, then all of the va lues for that node ID will be 0.
Example:None
GetCoordArray2   API-2757
5.51.2.5  GetCoordArray2
GetCoordArray2
( setID, numNode, entID, exist, xyz )
Description:This method retrieves arrays of coordinates for a set of Nodes and an additional array designating if a 
node exists in the database
Input:
INT4 setIDID of the set that contains the node IDs to retrieve. If 0, retrieve all 
nodes in the model
Output:INT4 numNode The number of nodes for which data is being returned.INT4 entID[0..numNode-1] Each entry is the ID of the associated node
BOOL exist[0..numNode-1] Node existence, True=Node exists, False=Node does not exist
REAL8 xyz[0..(3*numNode)-1]The coordinates of the node. There are 3 entries, x, y, z for each 
node.
Return Code:FE_FAIL Unable to retrieve data from the selected nodes.Remarks/Usage:This is a simpler form of GetAllA rray2, if you simply need the nodal coordinates and also want to know 
if a node exists in the database. If a retrieved node ID  does not exist, then all of the values for that node 
ID will be 0.
Example:None
 API-2758  PutAll
5.51.2.6  PutAll
PutAll
( entID,  x, y, z, layer, color, type, defCSys, outCSys, permBC )
Description:This method stores an entit y with the specified ID.
Input:INT4 entID The ID of the entity to store.REAL8 x
Refer to the property descriptions fo r each of these items. permBC is 
loaded in an integer array, even though it contains only True/False 
values.REAL8 y
REAL8 zINT4 layerINT4 colorINT4 typeINT4 defCSysINT4 outCSysINT4 permBC[0..5]Output:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:Unlike the standard Put method, th is function loads all of the properties as arguments. If you are updat-
ing all of the properties before stor ing an entity, this function will be f aster than multiple  calls to load 
each property individually.
Example:None
PutAllArray   API-2759
5.51.2.7  PutAllArray
PutAllArray
( numNode, entID,  xyz, layer, color, type, defCSys, outCSys, permBC )
Description:This method stores multiple node entities with the specified data.
Input:
INT4 numNodeThe number of nodes to create (i.e. the number of entries in the 
arrays)
INT4 entID[0..numNode-1] The IDs of the nodes to store.REAL8 xyz[0..(3*numNode)-1]
Refer to the property descriptions for each of these items. xyz is 
an array of the nodal coordinates, there are 3 entries for each node (must be in global rectan gular coordinates). permBC is 
loaded in an integer array, ev en though it contains only True/
False values. It contains six values per node.INT4 layer[0..numNode-1]
INT4 color[0..numNode-1]INT4 type[0..numNode-1]INT4 defCSys[0..numNode-1]INT4 outCSys[0..numNode-1]INT4 permBC[0..(6*numNode)-1]Output:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:This is the fastest “Put” method if you have a larg e number of nodes to create. All data can be accumu-
lated in arrays and then transferred in one call.
Example:None
 API-2760  PutCoordArray
5.51.2.8  PutCoordArray
PutCoordArray
( numNode, entID,  xyz )
Description:This is a simpler version of PutAllA rray that allows multiple node entiti es to be stored with the specified 
data.
Input:
INT4 numNodeThe number of nodes to create (i.e. the number of entries in the 
arrays)
INT4 entID[0..numNode-1] The IDs of the nodes to store.REAL8 xyz[0..(3*numNode)-1] The coordinates of the nodes to store.Output:
None
Return Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:This method is even faster than  PutAllArray, and requires less memo ry, it does not however give you 
full control. The same layer, color... are used for ev ery entity - only the coordinates are input as an array.
Example:None
GetClosest   API-2761
5.51.2.9  GetClosest
GetClosest
( xyz )
Description:This method finds the Node clos est to the desired location and loads it into the current object
Input:REAL8 xyz[0..2] The coordinates of the location of interest.
Output:NoneReturn Code:FE_NOT_EXIST Unable to  find closest Node.
Remarks/Usage:NoneExample:None
 API-2762  IsMidsideNode
5.51.2.10  IsMidsideNode
IsMidsideNode
( elemSET )
Description:This method determines if the current Node  is used as a midside node on any elements
Input:
INT4 elemSETThe ID of a Set Object used to lim it the elements to consider when 
determining if the current Node is a midside node. Set this to 0 if you 
simply want to consider all elements.
Output:NoneReturn Code:
FE_OK Current node is used as a midside node on one or more elements
FE_FAIL Current node is not used as a midside node.Remarks/Usage:If you are going to call this meth od repeatedly for multiple nodes performance may not be as good as 
using the AddMidsideNodes() method on  the Set Object to find all midsid e nodes and then testing if this 
node is in the Set.
Example:None
   API-2763
5.52  Optim Objects
NOTE: THIS OBJECT AND ALL PROPERTI ES AND METHODS ARE OBSOLETE AND 
SHOULD NOT BE USED IN VERSIONS OF FEMAP AFTER 11.4.2!!! 
Please see Section 5.54, "Optimi zation Relationship (Variable) Ob jects", Section 5.55, "Optimiza-
tion Response (Limits) Objects", and Section 5. 53, "Optimization Manufacturing Constraints 
Objects" for more information ab out the appropriate Objects to use to create Optimization entities 
in FEMAP. In addition, see Sectio n 5.7, "AnalysisMgr Objects" and Section 5.6, "AnalysisCase 
Objects" for more information about setting up an Optimization analysis for Nastran using the 
Analysis Set Manager.
Optim objects correspond to  the Design Optimization definitions in your model. They are derived 
from Entity objects, so in  addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are also available for Op tim objects. For more informa-
tion, see Section 5.1, "Common Entity Properties and Methods". 
Use the feOptim method of the FEMAP Appl ication object to cr eate Optim objects.
5.52.1  Optim Object Properties
Optim are always stored with their SetID = 1, and the ID varying from 1 to N, depending on the 
order in which the item was created.  Each object contains a specific ty pe of information: goal, vary 
or limit. You must look at the total collection of  Optim objects to assemble the full design optimi-
zation definition.
Property Description
INT4 type The Optim object ty pe: 1=Goal, 2=Vary, 3=Limit.
INT4 goalGoal of optimization (only if type=1):
0=None,1=MinWeight
INT4 varyOptimization variable:
0=None,1=RodArea,2=RodTorsion, 3=BarArea, 4=BarI1, 
5=BarI2, 6=BarTorsion, 7=PlateThickness
INT4 limitOptimization limit:
0=None, 1=NodXDisp, 2=NodYDisp,3=NodZDisp, 4=NodX-RDisp, 5=NodYRDisp,6=NodZRDisp, 7=RodAxi-
alStress,8=RodTorsionStress, 9=RodAxialStrain, 
10=RodTorsionStrain, 11=BarAxialStress, 12=BarMaxStress, 13=BarMinStress, 14=BarAxialStrain, 15=BarMaxStrain, 
16=BarMinStrain, 17=PltXNormalStress, 18=PltYNor-
malStress, 19=PltXYShearStress, 20=PltMaxPrinStress, 21=PltMinPrinStress, 22=PltV onMisesStress, 23=PltXNor-
malStrain, 24=PltYNormalStrain, 25=PltXYShearStrain, 
26=PltMaxPrinStrain, 27=PltM inPrinStrain, 28=PltV onMi-
sesStrain
INT4 cycles The number of design cycles.INT4 varyType The type of data to vary. 11=Property
 API-2764  
5.52.2  Optim Object Methods
There are no Optim object-specific methods. On ly the standard entity methods are available.INT4 varyID Property ID to vary.
INT4 varyExtraID Not used.BOOL varyPct If True, max/min specified as %, otherwise as values.REAL8 varyMin Minimum allo wable value for variable.
REAL8 varyMax Maximum allowable value for variable.REAL8 varyDelta Maximum change in variab le before new analysis is required.
INT4 respType Response on: Node=7 or Property=11.INT4 respID ID of node or property for response.REAL8 respMin Minimum allowable response.
REAL8 respMax Maximum allowable response.Property Description
   API-2765
 API-2766  
5.53  Optimization Manufact uring Constraints Objects
Optimization Manufacturing Constraint objects correspond to Optimization Manufacturing Con-
straints in the model. They ar e derived from Entity objects, so in addition to the properties and 
methods described here, all of the properties and methods defined for Entity objects are also avail-
able for Optimization Manufacturin g Constraint objects. For more information, see Section 5.1, 
"Common Entity Properties and Me thods". While Optimization Manu facturing Constraints can be 
setup by individually setting the appropriate proper ties, however using the pre-defined Set* / Get* 
methods is recommended.
Use the feOptMC method of the FEMAP Applicatio n object to create Optimization Manufacturing 
Constraint objects.
5.53.1  Optimization Manufacturi ng Constraint Ob ject Properties
Optimization Manufacturing Constraints are always st ored with a SetID=1, an d the ID equal to the 
manufacturing constraint ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
STRING title Title of Manufacturing Constraint
INT4 ManConTypeManufacturing constraint type. Use enum zOptMnConType:
Additive Manufacturing = FOPMC_ADDM (0)Casting Die Direction = FOPMC_CAST (1)
Checkerboarding Control = FOPMC_CHECK (2)
Cyclic Symmetry = FOPMC_CSYM (3)Extrusion = FOPMC_EXTR (4)
Minimum Size = FOPMC_MINS (5)
Maximum Size = FOPMC_MAXS (6)Planar Symmetry = FOPMC_PSYM (7)
REAL8 Vec1[0..2]
or
V ARIANT Vec1
The XYZ components of the various vectors used by some of 
the manufacturing constraints. In addition, all planes are stored 
in terms of vectors. Must be specified in Global Rectangular 
coordinates.
Used when ManConTyp = FOPMC_ADDM, FOPMC_CAST, 
FOPMC_CSYM, FOPMC_EXTR, or FOPMC_PSYMREAL8 Vec2[0..2]
or
V ARIANT Vec2
REAL8 Vec3[0..2]
orV ARIANT Vec3
REAL8 Vec4[0..2]
or
V ARIANT Vec4
INT4 nField1Integer value 1. When ManConTyp = FOPMC_CSYM, used to 
set Number of Sectors.
   API-2767
REAL8 dField1Real value 1, which is used when ManConTyp = FOP-
MC_ADDM, FOPMC_MINS, or FOPMC_MAXS. Specify 0.0 
to turn off check box for fields where a real values is entered.
REAL8 dField2Real value 2, which can poten tially be used when ManConTyp 
= FOPMC_ADDM. Specify 0.0 to tu rn off check box for fields 
where a real value are entered.Property Description
 API-2768  SetAddm
5.53.2  Optimization Manufactur ing Constraints Object Methods
There following methods are available in addition to th e standard entity methods.
5.53.2.1  SetAddm
SetAddm
( dAngle, dMin, vBase, vDir )
Description:Sets up an additive manufacturing constraintInput:REAL8 dAngle Maximum overhang angle. Specify 0.0 for no constraintREAL8 dMin Minimum allowed size. Specify 0.0 for no constraint
V ARIANT vBase[0..2]Coordinates of a point on a plane fo r the base plate. Must be speci-
fied in Global Rectangular coordinates.
V ARIANT vDir[0..2]Components of a vector normal to the base plate in the direction of 
material addition.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
GetAddm   API-2769
5.53.2.2  GetAddm
GetAddm
( pdAngle, pdMin, pvBase, pvDir )
Description:Retrieves an additive ma nufacturing constraint
Input:NoneOutput:REAL8 pdAngle Maximum overhang angle. Specify 0.0 for no constraintREAL8 pdMin Minimum allowed size. Specify 0.0 for no constraint
V ARIANT pvBaseCoordinates of a point on a plane fo r the base plate in Global Rectan-
gular coordinates.
V ARIANT pvDirComponents of a vector normal to the base plate in the direction of 
material addition.
Return Code:FE_INV ALID Invalid manufacturing constraint typeRemarks/Usage:NoneExample:None
 API-2770  SetCast
5.53.2.3  SetCast
SetCast
( vCastBase, vCastDir, vMoldDir, vMoldDir2 )
Description:Sets up a casting die direction manufacturing constraintInput:V ARIANT vCastBase[0..2] Coordinates of a poin t on the casting plane, in Global Rectangular
V ARIANT vCastDir[0..2] Components of a vector normal to the casting plane.
V ARIANT vMoldDir[0..2]Components of a vector that defi nes the first direction of mold 
removal
V ARIANT vMoldDir2[0..2]Components of an optional secondary mold removal vector. 
Specify 0., 0., 0. to disable
Output:
NoneReturn Code:NoneRemarks/Usage:NoneExample:None
GetCast   API-2771
5.53.2.4  GetCast
GetCast
( pvCastBase, pvCastDir, pvMoldDir, pvMoldDir2 )
Description:Retrieves a casting die direc tion manufacturing constraint
Input:NoneOutput:V ARIANT pvCastBase Coordinates of a point on  the casting plane, in Global Rectangular
V ARIANT pvCastDir Components of a vector normal to the casting plane.
V ARIANT pvMoldDirComponents of a vector that defi nes the first direction of mold 
removal
V ARIANT pvMoldDir2 Components of an optional secondary mold removal vector. Return Code:FE_INV ALID Invalid manufacturing constraint typeRemarks/Usage:NoneExample:None
 API-2772  SetCheckerboard
5.53.2.5  SetCheckerboard
SetCheckerboard
( bEnable )
Description:Sets up a checkerboarding manufacturing constraintInput:BOOL bEnable Enable checkerboarding control (True)Output:NoneReturn Code:NoneRemarks/Usage:Checkerboarding is on by default and a manufacturing constraint does not need to be created to enableExample:None
GetCheckerboard   API-2773
5.53.2.6  GetCheckerboard
GetCheckerboard
( pbEnable )
Description:Retrieves a checkerboarding manufacturing constraintInput:NoneOutput:BOOL pbEnable Checkerboarding control is enabled (True)Return Code:FE_INV ALID Invalid manufacturing constraint typeRemarks/Usage:NoneExample:None
 API-2774  SetCycSym
5.53.2.7  SetCycSym
SetCycSym
( vBase, vRot, vNorm, nSect )
Description:Sets up a cyclic symmetry manufacturing constraintInput:
V ARIANT vBase[0..2]Coordinate of a point on a cyclic symmetry plane, in global rectangu-
lar
V ARIANT vRot[0..2] Components of a vector defining the axis of rotationV ARIANT vNorm[0..2] Components of vector perpendicular to the axis of rotationINT4 nSect Number of sectors Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
GetCycSym   API-2775
5.53.2.8  GetCycSym
GetCycSym
( pvBase, pvRot, pvNorm, pnSect  )
Description:Retrieves a cyclic symmetry  manufacturing constraint
Input:NoneOutput:
V ARIANT vBaseCoordinate of a point on a cyclic symmetry plane, in global rectangu-
lar
V ARIANT vRot Components of a vector defining the axis of rotationV ARIANT vNorm Components of vector perpendicular to the axis of rotationINT4 nSect Number of sectors Return Code:FE_INV ALID Invalid manufacturing constraint typeRemarks/Usage:NoneExample:None
 API-2776  SetExtrusion
5.53.2.9  SetExtrusion
SetExtrusion
( vDir )
Description:Sets up a extrusion manufacturing constraintInput:V ARIANT vDir Components of a vector defining the extrusion directionOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
GetExtrusion   API-2777
5.53.2.10  GetExtrusion
GetExtrusion
( pvDir )
Description:Retrieves a casting die direction constraintInput:NoneOutput:V ARIANT vDir Components of a vector defining the extrusion directionReturn Code:FE_INV ALID Invalid manufacturing constraint typeRemarks/Usage:NoneExample:None
 API-2778  SetMinSize
5.53.2.11  SetMinSize
SetMinSize
( dSize )
Description:Sets up a minimum size manufacturing constraintInput:REAL8 dSize Minimum Size valueOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
GetMinSize   API-2779
5.53.2.12  GetMinSize
GetMinSize
( pdSize )
Description:Retrieves a minimum size manufacturing constraintInput:NoneOutput:REAL8 pdSize Minimum Size valueReturn Code:FE_INV ALID Invalid manufacturing constraint typeRemarks/Usage:NoneExample:None
 API-2780  SetMaxSize
5.53.2.13  SetMaxSize
SetMaxSize
( dSize )
Description:Sets up a maximum size manufacturing constraintInput:REAL8 dSize Maximum Size valueOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
GetMaxSize   API-2781
5.53.2.14  GetMaxSize
GetMaxSize
( pdSize )
Description:Retrieves a maximum size manufacturing constraintInput:NoneOutput:REAL8 pdSize Maximum Size valueReturn Code:FE_INV ALID Invalid manufacturing constraint typeRemarks/Usage:NoneExample:None
 API-2782  SetPlSym
5.53.2.15  SetPlSym
SetPlSym
( vBase, vDir )
Description:Sets up a planar symmetry  manufacturing constraint
Input:V ARIENT vBase[0..2] Coordinate of a point on a symmetry plane, in  global rectangular
V ARIENT vDir[0..2] Components of a ve ctor normal to the symmetry plane
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
GetPlSym   API-2783
5.53.2.16  GetPlSym
GetPlSym
( vBase, vDir )
Description:Retrieves a planar symmetry manufacturing constraintInput:NoneOutput:V ARIENT vBase[0..2] Coordinate of a point on a symmetry plane, in  global rectangular
V ARIENT vDir[0..2] Components of a ve ctor normal to the symmetry plane
Return Code:FE_INV ALID Invalid manufacturing constraint typeRemarks/Usage:NoneExample:None
 API-2784  
5.54  Optimization Relation ship (Variable) Objects
Optimization Relationship objects correspond to Op timization Variables in the model, including 
Material, Property and Element relations and To pology Optimization regions. They are derived 
from Entity objects, so in  addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are also available for Op timization Relationship 
objects. For more informatio n, see Section 5.1, "Common En tity Properties and Methods". 
Use the feOptRel method of the FEMAP Applica tion object to create Optimization Relationship 
objects.
5.54.1  Optimization Relati onship Object Properties
Optimization Relationships (Variables) are always st ored with a SetID=1, and the ID equal to the 
optimization relationship ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
STRING title Title of Optimization Relationship
INT4 RelationshipTypeOptimization relationship ty pe. Use enum zOptRelType:
Property = FOPRT_PROPERTY(0)
Material = FOPRT_MATERIAL(1)
Topology = FOPRT_TOPOLOGY(2)Element = FOPRT_ELEM(3)
INT4 RelationshipIDMaterial ID or Property ID fo r Material and Property relation-
ship types
STRING TypeFieldOptimization relationship type na me for Material and Property 
relationship types
STRING NameFieldOptimization relationship name fi eld for Material and Property 
relationship types. Either fiel d names or numbers may be speci-
fied, however numbers must be specified using string values
BOOL TopologyActiveDefines if topology regions are active or frozen. Only used for 
Topology relationship type
REAL8 Bounds[0..1]
or
V ARIANT vBoundsOptimization bounds:
[0]=Lower Bound value
[1]=Upper Bound value
INT4 BoundTypeBound type. Only valid for Mate rial and Property relationship 
types. Use enum zOptBoundType:Values = FOPBT_V ALUES (0)
Offset = FOPBT_RELATIVE (1)
Percentage = FOPBT_PCT (2)
SetupTopology   API-2785
5.54.2  Optimization Rela tionship Object Methods
There following methods are available in addition to th e standard entity methods.
5.54.2.1  SetupTopology
SetupTopology
( nSetID, bActive) 
Description:Sets up the Optimization Relationship as a t opology optimization region in a single call
Input:INT4 nSetID ID of a Set object containi ng elements for to pology optimization
BOOL bActive Specifies if elements are active (True) or frozen (False)
Output:NoneReturn Code:FE_FAIL No elements specified
FE_INV ALIDElements have been specified that  are not valid for topology optimi-
zation
Remarks/Usage:NoneExample:None
 API-2786  GetTopology
5.54.2.2  GetTopology
GetTopology
( nSetID, bClear, bActive )
Description:Sets up the Optimization Relationship as a t opology optimization region in a single call
Input:INT4 nSetID ID of a Set object to be po pulated with topology optimization entities
BOOL bClear Clear any existing IDs from the SetOutput:BOOL bActive Entities are active (True) or frozen (False)Return Code:
FE_BAD_TYPEOptimization relationship object is  not setup as topology optimiza-
tion region
Remarks/Usage:NoneExample:None
SetupShellT   API-2787
5.54.2.3  SetupShellT
SetupShellT
( nSetID, dLower, dUpper )
Description:Sets up a shell thickness re lationship in a single call
Input:INT4 nSetID ID of Set object containi ng elements to optimize for thickness
REAL8 dLower Shell thickness lower boundREAL8 dUpper Shell thickness upper boundOutput:NoneReturn Code:FE_FAIL No elements specifiedFE_INV ALID Invalid bounds specified for thicknessRemarks/Usage:NoneExample:None
 API-2788  GetShellT
5.54.2.4  GetShellT
GetShellT
( nSetID, bClear, pdLower, pdUpper )
Description:Get shell thickness re lationship parameters
Input:INT4 nSetID ID of a Set object to be po pulated with topology optimization entities
BOOL bClear Clear any existing IDs from the SetOutput:REAL8 pdLower Shell thickness lower boundREAL8 pdUpper Shell thickness upper boundReturn Code:
FE_BAD_TYPEOptimization relationship object is not setup as a shell thickness rela-
tionship
Remarks/Usage:NoneExample:None
SetupProp   API-2789
5.54.2.5  SetupProp
SetupProp
( nPropID, sType, sName, eBoundType, dMin, dMax )
Description:Sets property relationship pa rameters in a single call
Input:INT4 nPropID Property IDSTRING sType Property typeSTRING sName Property field name
INT4 eBoundTypeBound type. Use enum zBoundType:
Values = FOPBT_V ALUES (0)
Offset = FOPBT_RELATIVE (1)
Percentage = FOPBT_PCT (2)
REAL8 dMin Property value lower boundREAL8 dMax Property value upper boundOutput:NoneReturn Code:FE_INV ALID Invalid values for boundsFE_NOT_EXIST Specified property does not existRemarks/Usage:When specifying property types or names that are no t natively supported by FEMAP, these will show up 
as “Custom” optimizatio n variables in the FEMAP User Interface.
Field IDs may be specified for the field name para meter, however they must be passed in as strings
Example:None
 API-2790  GetProp
5.54.2.6  GetProp
GetProp
( pnPropID, sType, sName, peBoundType, pdMin, pdMax )
Description:Get property relationship parametersInput:NoneOutput:INT4 pnPropID Property IDSTRING sType Property typeSTRING sName Property field name
INT4 peBoundTypeBound type. Use enum zBoundType
Values = FOPBT_V ALUES (0)Offset = FOPBT_RELATIVE (1)
Percentage = FOPBT_PCT (2)
REAL8 pdMin Property value lower boundREAL8 pdMax Property value upper boundReturn Code:
FE_BAD_TYPEOptimization relationship object is  not setup as a property relation-
ship
Remarks/Usage:NoneExample:None
SetupMatl   API-2791
5.54.2.7  SetupMatl
SetupMatl
( nMatlID, sType, sName, eBoundType, dMin, dMax )
Description:Sets material relationship parameters in a single callInput:INT4 nMatlID Material IDSTRING sType Material typeSTRING sName Material field name
INT4 eBoundTypeBound type. Use enum zBoundType:
Values = FOPBT_V ALUES (0)
Offset = FOPBT_RELATIVE (1)
Percentage = FOPBT_PCT (2)
REAL8 dMin Material value lower boundREAL8 dMax Material value upper boundOutput:NoneReturn Code:FE_INV ALID Invalid values for boundsFE_NOT_EXIST Specified ma terial does not exist
Remarks/Usage:When specifying material types or names that are not natively supported by FE MAP, these will show up 
as “Custom” optimizatio n variables in the FEMAP User Interface.
Field IDs may be specified for the field name para meter, however they must be passed in as strings
Example:None
 API-2792  GetMatl
5.54.2.8  GetMatl
GetMatl
( pnMatlID, sType, sName, peBoundType, pdMin, pdMax )
Description:Get material relationship parametersInput:NoneOutput:INT4 pnMatlID Material IDSTRING sType Material typeSTRING sName Material field name
INT4 peBoundTypeBound type. Use enum zBoundType
Values = FOPBT_V ALUES (0)Offset = FOPBT_RELATIVE (1)
Percentage = FOPBT_PCT (2)
REAL8 pdMin Material value lower boundREAL8 pdMax Material value upper boundReturn Code:
FE_BAD_TYPEOptimization relationship object is not setup as a material relation-
ship
Remarks/Usage:NoneExample:None
CalculateBounds   API-2793
5.54.2.9  CalculateBounds
CalculateBounds
( pdLower, pdUpper, pdInit )
Description:Returns the lower and upper bounds, as well as the initial value that will be written to the analysis deck. 
Note, this does not update any object properties
Input:NoneOutput:REAL8 pdLower Lower boundREAL8 pdUpper Upper boundREAL8 pdInit Initial valueReturn Code:FE_INV ALID Invalid optimization relationship  type or unable to calculate bounds
Remarks/Usage:NoneExample:None
 API-2794  
5.55  Optimization Res ponse (Limits) Objects
Optimization Response objects corr espond to Optimization Limits in  the model. They are derived 
from Entity objects, so in  addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are al so available for Optimiz ation Response objects. 
For more information, see Sec tion 5.1, "Common Entity Proper ties and Methods" . While Optimi-
zation Responses can be set  up by setting the individual prop erty values, use of the individual 
setup methods is recommended.
Use the feOptResp method of the FEMAP Applic ation object to create Optimization Response 
objects.
5.55.1  Optimization Response (Limits) Object Properties
Optimization Responses (limits) are always stored with a SetID=1, and the ID equal to the optimi-
zation response ID.
Property Description
STRING title Title of Optimization Response
INT4 ResponseCategoryOptimization response type. This is differ ent than the response 
type field. Use enum zOptRespType:User-Defined = FOPRSP_CUSTOM(0)
Nodal Displacement = FOPRSP_NDISP (1)
SPC Forces = FOPRSP_SPCFORCE (2)Element Force, Stress, Strain = FOPRSP_ELEM (3)
Strain Energy = FOPRSP_ESE (4)
Frequency = FOPRSP_FREQ (5)Eigenvalue = FOPRSP_EIGEN (6)
Buckling = FOPRSP_BUCKLE (7)
Compliance = FOPRSP_COMPL (8)V olume = FOPRSP_VOL (9)
Weight = FOPRSP_WEIGHT (10)
STRING rtype Response type fieldSTRING ptype Response property name or element flagINT32 atta Response attribute ABOOL attaBlank Flag indi cating atta should be written as a blank field
STRING attbResponse attribute B. Data type  is defined using the attbField-
Type property, however must always be specified as a string value
INT4 attbFieldTypeattb field data type. Use enum zOptRespAttType:
Blank Field = FOPATT_BLANK (0)
Text Field = FOPATT_CHAR (1)Integer Field = FOPATT_INT (2)
Real Number Field = FOPATT_REAL (3)
   API-2795
INT4 attiDataTypeData type for selected entities. Use enum zDataType. See Sec-
tion 3.3.6, "Entity Types"
INT4 VectorIDV2This property replaces VectorID. For more information see, 
Section 2.4, "Working with Output in FEMAP 2020.1 and 
above". Output vector ID for element optimization responsesProperty Description
 API-2796  SetEntities
5.55.2  Optimization Respon se (Limits) Object Methods
There following methods are available in addition to th e standard entity methods.
5.55.2.1  SetEntities
SetEntities
( nSetID, bClear, enDataType )
Description:Sets the entities for opt imization responses
Input:INT4 nSetID ID of Set object contai ning entities for optimization responses
BOOL bClear Clear existing entities from Set Object
INT4 enDataTypeData type of entities.  Use enDataType. See Section 3.3.6, "Entity 
Types"
Output:NoneReturn Code:FE_FAIL No entities specifiedFE_NOT_EXIST One or more of the specified entities does not exist
Remarks/Usage:This method can be used to specify entities for optimization respon ses, however it is recommended to 
use the setup methods instead
Example:None
GetEntities   API-2797
5.55.2.2  GetEntities
GetEntities
( nSetID, bClear, penDataType )
Description:Gets the specified optimization response entitiesInput:INT4 nSetID ID of Set object to receive entity IDsBOOL bClear Clear the Set object before populatingOutput:
INT4 penDataTypeData type of optimization respon se entities. Use enDataType. See 
Section 3.3.6, "Entity Types"
Return Code:FE_FAIL No entities have been specifiedFE_NOT_EXIST One or more of the specified entities does not exist
Remarks/Usage:This method can be used to specify entities for optimization respon ses, however it is recommended to 
use the setup methods instead
Example:None
 API-2798  SetupDisplacement
5.55.2.3  SetupDisplacement
SetupDisplacement
( nSetID, nDof )
Description:Sets up a displacement optimiz ation response in a single call
Input:
INT4 nSetIDThe ID of a set that contains a list of node IDs. Alternatively, if you 
specify a negative value, this is si mply the ID of the single node. 
INT4 nDofDisplacement degree of freedom. 
Tx = 1, Ty = 2, Tz = 3,
Rx = 4, Ry = 5, Rz = 6
Output:NoneReturn Code:FE_FAIL No entities specifiedRemarks/Usage:Optimization response constraints are specified  separately using the SetConstraints method
Example:None
GetDisplacement   API-2799
5.55.2.4  GetDisplacement
GetDisplacement
( nSetID, bClear, nDof )
Description:Retrieves attributes for displace ment response in a single call
Input:INT4 nSetID ID of Set object to be po pulated with displacement response nodes 
BOOL bClear Clear Set Object of entities prior to populatingOutput:
INT4 nDofDisplacement degree of freedom. 
Tx = 1, Ty = 2, Tz = 3,
Rx = 4, Ry = 5, Rz = 6
Return Code:
FE_FAIL Invalid response typeRemarks/Usage:Optimization response constraints are retrie ved separately using the GetConstraints method
Example:None
 API-2800  SetupSPCForce
5.55.2.5  SetupSPCForce
SetupSPCForce
( nSetID, bValidate, nDof )
Description:Sets up an SPC force / moment optimization response in a single callInput:
INT4 nSetIDThe ID of a set that contains a list of node IDs. Alternatively, if you 
specify a negative value, this is si mply the ID of the single node. 
BOOL bValidate Validate node set 
INT4 nDofForce/Moment Component. 
Fx = 1, Fy = 2, Fz = 3,
Mx = 4, My = 5, Mz = 6
Output:NoneReturn Code:FE_FAIL No entities specifiedFE_BAD_DATA One or more unconstrained nodes has been specifiedRemarks/Usage:Optimization response constraints are specified  separately using the SetConstraints method
Example:None
GetSPCForce   API-2801
5.55.2.6  GetSPCForce
GetSPCForce
( nSetID, bClear, nDof )
Description:Retrieves attributes for SPC response in a single callInput:INT4 nSetID ID of Set object to be populated with response nodes 
BOOL bClear Clear Set Object of entities prior to populatingOutput:
INT4 nDofForce/Moment Component. 
Fx = 1, Fy = 2, Fz = 3,
Mx = 4, My = 5, Mz = 6
Return Code:
FE_FAIL Invalid response typeRemarks/Usage:Optimization response constraints are retrie ved separately using the GetConstraints method
Example:None
 API-2802  SetupElemV2
5.55.2.7  SetupElemV2
SetupElemV2
( nSetID, bValidate, nVecID, enDataType )
Description:This method replaces SetupElem. For more information see, Section 2.4, "Working with Output in 
FEMAP 2020.1 and above". Sets up an elemental force / stress / strain optimization response in a single 
call
Input:
INT4 nSetIDThe ID of a set that contains a list  of element IDs or property IDs. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single element or property 
BOOL bValidate Validate entities INT4 nVecID Output Vector IDINT4 enDataType Data type for sp ecified entities. FET_ELEM or FET_PROP
Output:NoneReturn Code:FE_FAIL No entities specifiedFE_INV ALID Invalid data type specified, or unsupported output vector specified
FE_BAD_DATA One or more unconstrained nodes has been specifiedRemarks/Usage:Optimization response constraints are specified  separately using the SetConstraints method
Example:None
GetElemV2   API-2803
5.55.2.8  GetElemV2
GetElemV2
( nSetID, bClear, pnVecID, penDataType)
Description:This method replaces GetElem. Fo r more information see, Section 2.4, "Working with Output in 
FEMAP 2020.1 and above". Retrieves attributes for elem ental force / stress / strain response in a single 
call.
Input:INT4 nSetID ID of Set object to be populated with response entities 
BOOL bClear Clear Set Object of entities prior to populatingOutput:INT4 pnVecID Output Vector ID
INT4 penDataType Data type for sp ecified entities. FET_ELEM or FET_PROP
Return Code:FE_FAIL Invalid response typeRemarks/Usage:Optimization response constraints are retrie ved separately using the GetConstraints method
Example:None
 API-2804  SetupESE
5.55.2.9  SetupESE
SetupESE
( nSetID, bValidate, bDensity, enDataType )
Description:Sets up an elemental strain energy optimization response in a single call
Input:
INT4 nSetIDThe ID of a set that contains a list  of element IDs or property IDs. 
Alternatively, if you specify a negative  value, this is simply the ID of 
the single element or property 
BOOL bValidate Validate entitiesINT4 bDensity Strain energy density responseINT4 enDataType Data type for sp ecified entities. FET_ELEM or FET_PROP
Output:
NoneReturn Code:FE_FAIL No entities specifiedFE_INV ALID Invalid data type specified, or unsupported output vector specified
Remarks/Usage:Optimization response constraints are specified  separately using the SetConstraints method
Example:None
GetESE   API-2805
5.55.2.10  GetESE
GetESE
( nSetID, bClear, pbDensity, penDataType)
Description:Retrieves attributes for elemental stra in energy response in a single call
Input:INT4 nSetID ID of Set object to be populated with response entities 
BOOL bClear Clear Set Object of entities prior to populatingOutput:INT4 pbDensity Strain energy densityINT4 penDataType Data type for sp ecified entities. FET_ELEM or FET_PROP
Return Code:FE_FAIL Invalid response typeRemarks/Usage:Optimization response constraints are retrie ved separately using the GetConstraints method
Example:None
 API-2806  SetupFreq
5.55.2.11  SetupFreq
SetupFreq
( nModeNum, nApproxCode )
Description:Sets up an frequency optimiza tion response in a single call
Input:INT4 nModeNum Mode NumberINT4 nApproxCode Approximation code. 0 = Default, 1 = Direct, 2 = InverseOutput:NoneReturn Code:FE_INV ALID Invalid Mode NumberFE_BAD_TYPE Invalid Approximation CodeRemarks/Usage:Optimization response constraints are specified  separately using the SetConstraints method
Example:None
GetFreq   API-2807
5.55.2.12  GetFreq
GetFreq
( pnModeNum, pnApproxCode )
Description:Retrieves attributes for frequen cy response in a single call
Input:NoneOutput:INT4 pnModeNum Mode NumberINT4 pnApproxCode Approximation code. 0 = Default, 1 = Direct, 2 = InverseReturn Code:FE_FAIL Invalid response typeRemarks/Usage:Optimization response constraints are retrie ved separately using the GetConstraints method
Example:None
 API-2808  SetupEign
5.55.2.13  SetupEign
SetupEign
( nModeNum, nApproxCode )
Description:Sets up an normal modes optimization response in a single callInput:INT4 nModeNum Mode NumberINT4 nApproxCode Approximation code. 0 = Default, 1 = Direct, 2 = InverseOutput:NoneReturn Code:FE_INV ALID Invalid Mode NumberFE_BAD_TYPE Invalid Approximation CodeRemarks/Usage:Optimization response constraints are specified  separately using the SetConstraints method
Example:None
GetEign   API-2809
5.55.2.14  GetEign
GetEign
( pnModeNum, pnApproxCode )
Description:Retrieves attributes for normal modes response in a single call
Input:NoneOutput:INT4 pnModeNum Mode NumberINT4 pnApproxCode Approximation code. 0 = Default, 1 = Direct, 2 = InverseReturn Code:FE_FAIL Invalid response typeRemarks/Usage:Optimization response constraints are retrie ved separately using the GetConstraints method
Example:None
 API-2810  SetupBuckle
5.55.2.15  SetupBuckle
SetupBuckle
( nModeNum, nApproxCode )
Description:Sets up an buckling optimiza tion response in a single call
Input:INT4 nModeNum Mode NumberINT4 nApproxCode Approximation code. 0 = Default, 1 = Direct, 2 = InverseOutput:NoneReturn Code:FE_INV ALID Invalid Mode NumberFE_BAD_TYPE Invalid Approximation CodeRemarks/Usage:Optimization response constraints are specified  separately using the SetConstraints method
Example:None
GetBuckle   API-2811
5.55.2.16  GetBuckle
GetBuckle
( pnModeNum, pnApproxCode )
Description:Retrieves attributes for buckling response in a single callInput:NoneOutput:INT4 pnModeNum Mode NumberINT4 pnApproxCode Approximation code. 0 = Default, 1 = Direct, 2 = InverseReturn Code:FE_FAIL Invalid response typeRemarks/Usage:Optimization response constraints are retrie ved separately using the GetConstraints method
Example:None
 API-2812  SetConstraints
5.55.2.17  SetConstraints
SetConstraints
( dLowerBound, dUpperBound )
Description:Sets optimizatio n response bounds
Input:REAL8 dLowerBound Lower BoundREAL8 dUpperBound Upper BoundOutput:NoneReturn Code:FE_FAIL Upper bound is less than lower bound
Remarks/Usage:SetConstraints is used in conj unction with the Setup* methods
Example:None
GetConstraints   API-2813
5.55.2.18  GetConstraints
GetConstraints
( pdLowerBound, pdUpperBound )
Description:Retrieves optimization response boundsInput:NoneOutput:REAL8 pdLowerBound Lower BoundREAL8 pdUpperBound Upper BoundReturn Code:NoneRemarks/Usage:NoneExample:None
 API-2814  
5.56  Output Objects (OBSOLETE)
NOTE: Starting with FEMAP 2020.1, the entire Output Object has been deprecated and the 
Results Browsing Object MUST be used in plac e of the Output Object. The Results Browsing 
Object provides more capability when review ing existing results and methods were added 
for FEMAP 2020.1 to provide superior functionality to the Output Object.
Output objects correspond to the Output data in your model. They  are derived from Entity objects, 
so in addition to the propertie s and methods described here, a ll of the properties and methods 
defined for Entity objects are also available for Ou tput objects. For more information, see Section 
5.1, "Common Entity Pr operties and Methods". 
Use the feOutput method of the FEMAP App lication object to create Output objects.
5.56.1  Output Object  Properties (OBSOLETE)
Output objects are always stored with their SetID equal to the ID of the ou tput set/step that they 
reference, and the ID equal to the output vector ID of the type of data stored in the vector. Output 
vector IDs can vary from versio n to version of FEMAP. The best  way to determine the standard 
IDs used is to simply read results into  FEMAP and see what vectors are created. 
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
STRING title Output vector title (maximum 79 characters).INT4 component[0..19]
orV ARIANT vcomponentComponent vectors. Either zero , or the IDs of the X,Y ,Z com-
ponents, or the IDs of the corresponding elemental corner out-put. See below.
INT4 categoryGeneral category of output: 0=Any, 1=Disp, 2=Accel, 3=Force, 
4=Stress, 5=Strain, 6=Temp, others=User.
INT4 locationThe location where the output is  computed and stored. Nodal = 
7, Elemental Centroid or Element Corner = 8.
BOOL nonlinear If True, this re sult cannot be linearly combined.
INT4 hascomponentIf 1, component[0..2] are the X, Y ,Z component values for nodal 
output. If 1, for centroidal plat e and centroidal solid element 
data, this indicates that the co mponent property contains the 
IDs of Output Vectors that contain the associated element cor-ner data. If 2, component[0..1] cont ain the vector IDs of data at 
end of beams. If 3, component[0..1] contain the vector IDs of 
data at end of beams, but the da ta at the second end of beam is 
reversed in sign.
BOOL centroidtotal If True, this vect or has centroidal or nodal output.
BOOL InitAsInteger If True, this vector is initialized to store integer values
REAL8 maxval (Read Only) The maximum value in the output vector.REAL8 minval (Read Only) The minimum value in the output vector.
   API-2815
REAL8 absmaxval (Read Only) The maximum absolute  value of any value in the output vector.
INT4 maxvalID (Read Only) The ID of th e node/element where the maxval occurs.
INT4 minvalID (Read Only) The ID of the node/element where the minval occurs.
REAL8 Value[1..N]The output values. The index must  be the ID of the node/ele-
ment where the output value is stored. The value for any node 
or element where no output exists  will be 0.0. This property can 
be used to manipulate results on e value at a time. In general, 
however, it will be faster to use one or more of the output meth-
ods that manipulate entire output vectors.Property Description
 API-2816  
5.56.1.1  Output Components (OBSOLETE)
The components are 20 vector IDs of other vector s that are “components” of the current vector. 
There are several possible ways these components are used:
1. The current vector contains the vector magnitude of 3 other vectors that are in the global 
X, Y, and Z components of similar data:
In this case, Components 0, 1, and 2 are the vector IDs of the X, Y , and Z component vectors, 
respectively. An example of this type of usag e is Vector 1 (TOTAL TRANSLATION), which has 
Component 0=2(X TRANSLATION), Component 1=3(Y TRANSLATION) and Component 
2=4(Z TRANSLATION). These compon ents MUST be defined for de formed/animated plotting to 
work correctly. Components 3 thro ugh 19 must be 0 for this case.
2. The current vector contains data which should be plotted in a specific global direction: 
In this case, if plotting should occur in Global X,  then Component 0 must equal the current Vector 
ID. If Global Y , then Component 1 = current Vector ID, and if Global Z then Component 2 = cur-
rent Vector ID. All other components must equal 0 (i.e. only 1 nonzero component and it is equal 
to the current Vector ID).
3. The current vector contains elemental centroidal data for elements which also have 
related data at the element corners: 
In this case, the number of no nzero components depends upon th e number of nodes on this ele-
ment type (for example, output for linear plates has 4 components-4 nodes/corners). The nonzero 
components must equal the Vector IDs of the same type of data at the corn ers of the elements. For 
example, if the current vector is 7033 (C ENTROIDAL VON MISES STRESS) then component 0 
may be 20133 (CORNE R1 VON MISES STRESS) and component 1 may be 30133 (CORNER2 
VON MISES STRESS) etc. If you do not have corner data, all components mu st be 0. If the com-
ponents are defined, FEMAP will use the corner data  (not the data in the current vector) when cal-
culating data at nodes (like for contouring). If  no components are defined, FEMAP will assign the 
centroidal value to each node when doing the calculation.
4. The current vector contains line element data at one end of the element: 
This is just like the previous case. The first comp onent is the vector ID of the End A data, the sec-
ond component is the vector ID of the End B data. This type of output also requires special settings 
in the comp_dir variable. Se t comp_dir to 2 if you want FEMAP to  use the data as it is specified. 
Set comp_dir to 3 if you want FEMAP to reverse the sign of all End B data when doing a beam 
diagram. This adjusts for differ ences in sign conventions betwee n the various analysis programs. 
5. All other cases:
All components should be 0. This will force the data in the current vector to be used for every case. 
The current setting of the View Option Deformed Style - Deformed Direction  option will control 
the deformed plotting direction.
   API-2817
5.56.1.2  Output Vector IDs (OBSOLETE) 
If you are writing your own Neutral files, you can choose any vector IDs that you want, but the 
normal conventions used by FEMAP are as follows:
Standard Output Vectors
Category Vector Range Type
1 to 9,999,999 (magnitude, 
or non-complex)1 to 2,999 Nodal output
3,000 to 5,999 Line element output6,000 to 59,999 Plate element output60,000 to 79,999 Solid element output80,000 to 89,999 Output on any element type90,000 to 99,999 PATRAN elemental output100,000 to 299,999 Plate corner output1,000,000 to 6,000,000 Laminate Ply output
9,000,000 to 9,999,999 User Defined output
10,000,001 to 20,000,000 
(complex, phase)Same definition as magnitude data , just add 10,000,000 to IDs.
20,000,001 to 30,000,000 
(complex, real)Same definition as magnitude data , just add 20,000,000 to IDs.
30,000,001 to 40,000,000 
(complex, imaginary)Same definition as magnitude data , just add 30,000,000 to IDs.
 API-2818  GetFromSet
5.56.2  Output Object  Methods (OBSOLETE)
There following methods are available in addition to th e standard entity methods.
5.56.2.1  GetFromSet (OBSOLETE)
GetFromSet
( setID, entID )
Description:This method retrieves data from a specif ied output vector, in a specified set.
Input:INT4 setID The Output Set containi ng the output vector to retrieve
INT4 entID The Output Vector to retrieveOutput:NoneReturn Code:NoneRemarks/Usage:This method is simply a shortcut to replace the standard Get () method. Assuming “Out” is an Output 
object, the following two sequences are identical...

Out.GetFromSet( s, v ) 
and

   Out.setID = s 
   Out.Get( v ) 
Example:
None
GetOutputList   API-2819
5.56.2.2  GetOutputList (OBSOLETE)
GetOutputList
(  listcount, ID, value )
Description:This method retrieve s an output vector.
Input:NoneOutput:INT4 listcount The number of entri es in the ID and value arrays.
INT4 ID[0..N] The IDs of  the nodes/elements wher e output is available..
REAL8 value[0..N]The output values associated with the corresponding node/element in 
the ID array.
Return Code:FE_NOT_EXIST There are no entries in the list.Remarks/Usage:This method simply retrie ves the information about the output fro m the current object. You must first 
load that data - either using the Ge t( ) method, or by creating it yourself.
Example:None
 API-2820  GetOutputListAtID
5.56.2.3  GetOutputListAtID (OBSOLETE)
GetOutputListAtID
(  ID, defaultVal, value )
Description:This method retrieves data from an output vector at specified IDs.Input:INT4 ID[0..N] The IDs of the nodes/elements where output is being requested
REAL8 defaultVal[0..N]The default values to be returned if no output is found for a specified 
ID. This can be specified as NULL,  in which case all default values 
will be 0.0.
Output:
REAL8 value[0..N]The output values associated with the corresponding node/element in 
the ID array.
Return Code:
FE_FAILUnable to retrieve IDs from the lis t or allocate memory for process-
ing.
Remarks/Usage:This method simply retrie ves the information about the output fro m the current object. You must first 
load that data - either using the Ge t( ) method, or by creating it yourself.
Example:None
GetOutputListAtSet   API-2821
5.56.2.4  GetOutputListAtSet (OBSOLETE)
GetOutputListAtSet
(  idSET, defaultVal, value )
Description:This method retrieves data from an output vector at IDs selected in a Set.Input:INT4 idSET The ID of a Set object that co ntains the IDs of the entities to retrieve.
REAL8 defaultVal[0..N]The default values to be returned if no output is found for a specified 
ID. This can be specified as NULL,  in which case all default values 
will be 0.0.
Output:
REAL8 value[0..N]The output values associated with the corresponding node/element in 
the ID array.
Return Code:
FE_FAILUnable to retrieve IDs from the lis t or allocate memory for process-
ing.
Remarks/Usage:This method simply retrie ves the information about the output fro m the current object. You must first 
load that data - either using the Ge t( ) method, or by creating it yourself.
Example:None
 API-2822  GetModel
5.56.2.5  GetModel (OBSOLETE)
GetModel
( nModelID )
Description:This method returns the identifier of the model being used by the object.
Input:NoneOutput:INT8 nModelID Model identifierReturn Code:NoneRemarks/Usage:When the object is created, nModelID  is set to the current/active model.
Example:
SetModel   API-2823
5.56.2.6  SetModel (OBSOLETE)
SetModel
( nModelID )
Description:This method chooses th e model to be used fo r all further operations.
Input:INT8 nModelID Model identifierOutput:NoneReturn Code:NoneRemarks/Usage:When the object is created, nModelID  is set to the current/active model.
Example:
 API-2824  SetComplexOptions
5.56.2.7  SetComplexOptions (OBSOLETE)
SetComplexOptions
( bExpandComplex, dComplexPhase )
Description:This method sets a phase angle to  use for any complex output vector  (magnitude, phase, real or imagi-
nary) which will cause the output to  be returned as the ex panded complex magnitude at the specified 
phase angle.
Input:BOOL bExpandComplex When True, complex expansion will occurREAL8 dComplexPhase Value of phase an gle to use for complex expansion
Output:None
Return Code:
NoneRemarks/Usage:This method MUST be called before a ny Get call in order for the expanded  complex output to be loaded 
into the output object
Example:
Sub Main
    Dim App As femap.model
    Set App = feFemap()
    Dim out As femap.Output
    Set out = App.feOutput
    out.setID = 11
    out.SetComplexOptions (True, 15.0)    out.Get(10000024)
    For i = 0 To 1000
    outval = out.Value(i)
    Next
End Sub
Clear   API-2825
5.56.2.8  Clear (OBSOLETE)
Clear
(  )
Description:This method clears all data from the object and re initializes it to a default state.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:
 API-2826  PutOutputList
5.56.2.9  PutOutputList (OBSOLETE)
PutOutputList
(  listcount, ID, value )
Description:This method stores data to an output vector.
Input:INT4 listcount The number of entries in both the ID and value arrays.
INT4 ID[0..N] The IDs of the nodes/element s where output is being created.
REAL8 value[0..N]The output values associated with the corresponding node/element in 
the ID array.
Output:NoneReturn Code:FE_NOT_EXIST There are no entries in the list - you specified listcount = 0.
Remarks/Usage:This method stores informa tion into the current object. Any previous output information in that object is 
lost. You cannot use this method to  add to an existing output vector . This method does not store that 
information to the model database. Af ter using this function, you must ca ll Put( ) if you want to store the 
updated lists in the database.
Example:None
InitScalarAtNode   API-2827
5.56.2.10  InitScalarAtNode (OBSOLETE)
InitScalarAtNode
( outputSET, vec, title, category, nonlinear )
Description:This method initializes the current ob ject to prepare it for creating an output vector containing a single 
scalar value at each node.
Input:INT4 outputSET The ID of the output se t where this vector will be stored.
INT4 vec The ID of the output  vector which will be created.
STRING title The Output vector title (maximum 79 characters).
INT4 categoryGeneral category of output: 0=Any, 1=Disp, 2=Accel, 3=Force, 
4=Stress, 5=Strain, 6=Temp, others=User.
BOOL nonlinear If True, this r esult cannot be linearly combined.
Output:NoneReturn Code:NoneRemarks/Usage:This method simply sets up  the various properties in a convenient manner for this style of output. You 
can override the parameters that are created automa tically by directly manipul ating the properties after 
the object has been initialized. Calling this method destroys any output that was previously loaded into 
the object.
Example:None
 API-2828  GetScalarAtNode
5.56.2.11  GetScalarAtNode (OBSOLETE)
GetScalarAtNode
( listcount, ID, value )
Description:This method is identical to GetOutpu tList. It is simply an alias availa ble for use with objects initialized 
with InitScalarAtNode.
GetScalarAtNodeSet   API-2829
5.56.2.12  GetScalarAtNodeSet (OBSOLETE)
GetScalarAtNodeSet
( idSET, value )
Description:This method is identical to GetOutputListAtSet - ex cept that the default values  are not specified, and are 
always just 0.0. It is simply an  alias available for use with obje cts initialized with InitScalarAtNode.
 API-2830  PutScalarAtNode
5.56.2.13  PutScalarAtNode (OBSOLETE)
PutScalarAtNode
( listcount, ID, value )
Description:This method is identical to  PutOutputList. It is simply an alias available for use with objects initialized 
with InitScalarAtNode.
InitVectorAtNode   API-2831
5.56.2.14  InitVectorAtNode (OBSOLETE)
InitVectorAtNode
( outputSET, vec, vecX, vecY, vecZ, title, category, nonlinear )
Description:This method initializes the current object to prepare it  for creating output containing vector data at each 
node. Actually four output values are created for each node, the magnitude, and the X, Y and Z compo-
nents.
Input:INT4 outputSET The ID of the output se t where this vector will be stored.
INT4 vecThe ID of the output vector which will be created to contain the mag-
nitude of the output vectors.
INT4 vecXThe ID of the output vector whic h will be created to contain the X 
components of output.
INT4 vecYThe ID of the output vector whic h will be created to contain the Y 
components of output.
INT4 vecZThe ID of the output vector whic h will be created to contain the Z 
components of output.
STRING title The output vector title (maximum 79 characters).
INT4 categoryGeneral category of output: 0=Any, 1=Disp, 2=Accel, 3=Force, 
4=Stress, 5=Strain, 6=Temp, others=User.
BOOL nonlinearIf True, the components of this re sult cannot be linearly combined. 
The magnitude can never be linearly combined.
Output:NoneReturn Code:NoneRemarks/Usage:This method initializes the current object to contain the magnitude r esults, and creates three additional 
objects which are the X, Y and Z components of the vector results. All of the “component” properties 
are properly initialized to indicate that this is nodal vector data.
Example:None
 API-2832  GetVectorAtSingleNode
5.56.2.15  GetVectorAtSingleNode (OBSOLETE)
GetVectorAtSingleNode
( ID, x, y, z )
Description:This method retrieves the components of the results stored in an object  that contains nodal vector data.
Input:INT4 ID The ID of the no de to retrieve output
Output:REAL8 x The X component of the resultsREAL8 y The Y component of the resultsREAL8 z The Z component of the resultsReturn Code:NoneRemarks/Usage:This method simply retrie ves the information about the output fro m the current object. You must first 
load that data - either using the Get( ) method, or by creating it yourself. The object must contain nodal 
vector data for this method to wo rk properly. Only the X,Y ,Z componen ts are returned. If you want to 
retrieve the magnitude da ta, you can do that by calling GetScala rAtNode - even though the object con-
tains vector data.
All results are returned in the coor dinate system in which they were stored. Results must be stored in 
global rectangular coordinates to be us eful in other post-processing functions.
Example:None
GetVectorAtNode   API-2833
5.56.2.16  GetVectorAtNode (OBSOLETE)
GetVectorAtNode
( listcount, ID, x, y, z )
Description:This method retrieves the components of the results stored in an object  that contains nodal vector data.
Input:NoneOutput:INT4 listcount The number of entri es in the ID and x,y,z arrays.
INT4 ID[0..N] The IDs of  the nodes/elements wher e output is available.
REAL8 x[0..N]The X component of the values a ssociated with the corresponding 
node/element in the ID array.
REAL8 y[0..N]The Y component of the values a ssociated with the corresponding 
node/element in the ID array.
REAL8 z[0..N]The Z component of the values associated with the corresponding 
node/element in the ID array.
Return Code:NoneRemarks/Usage:This method simply retrie ves the information about the output fro m the current object. You must first 
load that data - either using the Get( ) method, or by creating it yourself. The object must contain nodal 
vector data for this method to wo rk properly. Only the X,Y ,Z componen ts are returned. If you want to 
retrieve the magnitude da ta, you can do that by calling GetScala rAtNode - even though the object con-
tains vector data.
All results are returned in the coor dinate system in which they were stored. Results must be stored in 
global rectangular coordinates to be us eful in other post-processing functions.
Example:None
 API-2834  GetVectorAtNodeSet
5.56.2.17  GetVectorAtNodeSet (OBSOLETE)
GetVectorAtNodeSet
( idSET, x, y, z )
Description:This method retrieves the components of the results stored in an object  that contains nodal vector data 
for all IDs stored in the specifed Set.
Input:INT4 idSET The ID of a Set object that co ntains the IDs of the entities to retrieve.
Output:
REAL8 x[0..N]The X component of the values a ssociated with the corresponding 
node/element in the Set.
REAL8 y[0..N]The Y component of the values a ssociated with the corresponding 
node/element in the Set.
REAL8 z[0..N]The Z component of the values associated with the corresponding 
node/element in the Set.
Return Code:NoneRemarks/Usage:This method simply retrie ves the information about the output fro m the current object. You must first 
load that data - either using the Get( ) method, or by creating it yourself. The object must contain nodal 
vector data for this method to wo rk properly. Only the X,Y ,Z componen ts are returned. If you want to 
retrieve the magnitude da ta, you can do that by calling GetScala rAtNodeSet - even though the object 
contains vector data.
All results are returned in the coor dinate system in which they were stored. Results must be stored in 
global rectangular coordinates to be us eful in other post-processing functions.
Example:None
PutVectorAtNode   API-2835
5.56.2.18  PutVectorAtNode (OBSOLETE)
PutVectorAtNode
( listcount, ID, x, y, z )
Description:This method loads nodal vector data  into an object. The object must first be initialized with InitVec-
torAtNode.
Input:INT4 listcount The number of entri es in the ID and x,y,z arrays.
INT4 ID[0..N] The IDs of the nodes/element s where output is being created.
REAL8 x[0..N]The X component of the values a ssociated with the corresponding 
node/element in the ID array.
REAL8 y[0..N]The Y component of the values a ssociated with the corresponding 
node/element in the ID array.
REAL8 z[0..N]The Z component of the values associated with the corresponding 
node/element in the ID array.
Output:NoneReturn Code:NoneRemarks/Usage:This method stores informa tion into the current object. Any previous output information in that object is 
lost. You cannot use this method to  add to an existing output vector . This method does not store that 
information to the model database. Af ter using this function, you must ca ll Put( ) if you want to store the 
updated lists in the database.
You do not have to specify the vector magnitudes w ith this method - they are computed and created 
automatically from the components.
All results are stored in the coordinate system in wh ich they were supplied. R esults must be stored in 
global rectangular coordinates to be us eful in other post-processing functions.
Example:None
 API-2836  InitScalarAtElem
5.56.2.19  InitScalarAtElem (OBSOLETE)
InitScalarAtElem
( outputSET, vec, title, category, nonlinear )
Description:This method initializes the current ob ject to prepare it for creating an output vector containing a single 
scalar value at each element.
Input:INT4 outputSET The ID of the output se t where this vector will be stored.
INT4 vec The ID of the output  vector which will be created.
STRING title The output vector title (maximum 79 characters).
INT4 categoryGeneral category of output: 0=Any, 1=Disp, 2=Accel, 3=Force, 
4=Stress, 5=Strain, 6=Temp, others=User.
BOOL nonlinear If True, this r esult cannot be linearly combined.
Output:NoneReturn Code:NoneRemarks/Usage:This method simply sets up  the various properties in a convenient manner for this style of output. You 
can override the parameters that are created automa tically by directly manipul ating the properties after 
the object has been initialized. Calling this method destroys any output that was previously loaded into 
the object.
Example:None
GetScalarAtElem   API-2837
5.56.2.20  GetScalarAtElem (OBSOLETE)
GetScalarAtElem
( listcount, ID, value )
Description:This method is identical to GetOutpu tList. It is simply an alias availa ble for use with objects initialized 
with InitScalarAtElem.
 API-2838  GetScalarAtElemSet
5.56.2.21  GetScalarAtElemSet (OBSOLETE)
GetScalarAtElemSet
( idSET, value )
Description:This method is identical to GetOutputListAtSet - ex cept that the default values  are not specified, and are 
always just 0.0. It is simply an  alias available for use with obje cts initialized with InitScalarAtElem.
PutScalarAtElem   API-2839
5.56.2.22  PutScalarAtElem (OBSOLETE)
PutScalarAtElem
( listcount, ID, value )
Description:This method is identical to  PutOutputList. It is simply an alias available for use with objects initialized 
with InitScalarAtElem.
 API-2840  InitElemWithCorner
5.56.2.23  InitElemWithCorner (OBSOLETE)
InitElemWithCorner
( outputSET, vec, vec1, vec2, vec3, vec4, vec5, vec6, vec7, vec8, title, category, nonlin-
ear )
Description:This method initializes the current ob ject to prepare it for creating output containing a scalar value at the 
element centroid, and a scalar value at each element corner.
Input:INT4 outputSET The ID of the output se t where this vector will be stored.
INT4 vecThe ID of the output vector which will be created to contain the cen-
troidal results.
INT4 vec1
The ID of the output vector whic h will be created to contain the 
results at the corresponding element corners.INT4 vec2
INT4 vec3INT4 vec4INT4 vec5INT4 vec6INT4 vec7INT4 vec8STRING title The output vector title (maximum 79 characters).
INT4 categoryGeneral category of output: 0=Any, 1=Disp, 2=Accel, 3=Force, 
4=Stress, 5=Strain, 6=Temp, others=User.
BOOL nonlinear If True, the components of this result cannot be linearly combined. 
Output:NoneReturn Code:NoneRemarks/Usage:This method initializes the current object to contain the centroid r esults, and creates additional objects 
which are the corner results. All of the “component”  properties are properly initialized to indicate that 
this is elemental data with corner values.
Example:
InitElemWithCorner   API-2841
NoneInitElemWithCorner
( outputSET, vec, vec1, vec2, vec3, vec4, vec5, vec6, vec7, vec8, title, category, nonlin-
ear )
 API-2842  GetElemWithCorner
5.56.2.24  GetElemWithCorner (OBSOLETE)
GetElemWithCorner
( listcount, maxcorner, ID, centroid, c1, c2, c3, c4, c5, c6, c7, c8 )
Description:This method retrieves the centroid and corner results stored in an object that contains elemental data  
with corners.
Input:NoneOutput:INT4 listcount The number of entri es in the ID and results arrays.
INT4 maxcornerThe ID of the maximum corner ava ilable for this object. For exam-
ple, if this object contains resu lts on quadrilateral plates, maxcorner 
will typically equal 4, since results  are only available for corners 
1,2,3, and 4.
INT4 ID[0..N] The IDs of  the nodes/elements wher e output is available.
REAL8 centroid[0..N]The results at the element centroid  associated with the corresponding 
node/element in the ID array.
REAL8 c1[0..N]
The results at the element corners associated with the corresponding 
node/element in the ID array. Some  elements have missing corners. 
For example, Tetrahedral results ar e stored on corners 1,2,3 and 5. 
Wedge results are stored on 1,2,3 and 5,6,7.REAL8 c2[0..N]
REAL8 c3[0..N]REAL8 c4[0..N]REAL8 c5[0..N]REAL8 c6[0..N]REAL8 c7[0..N]REAL8 c8[0..N]Return Code:NoneRemarks/Usage:
GetElemWithCorner   API-2843
This method simply retrie ves the information about the output fro m the current object. You must first 
load that data - either using the Get( ) method, or  by creating it yourself. The object must contain ele-
mental data with corners for this method to work properly. If you only  want to retrieve the centroidal 
data, you can do that by calling GetScalarAtElem - even though the object contains corner data.
For models where the output vectors may only contai n partial corner data - for example mixed quad/tri 
models where there is no corner output  for the triangles, or at least on e missing corner - this method will 
return the centroidal value for all missing corner data. This only app lies to corners where there are some 
results (below maxcorner). Corners that have no  output for all elements are still not returned.
Example:NoneGetElemWithCorner
( listcount, maxcorner, ID, centroid, c1, c2, c3, c4, c5, c6, c7, c8 )
 API-2844  GetElemWithCornerSet
5.56.2.25  GetElemWithCornerSet (OBSOLETE)
GetElemWithCornerSet
( idSET, maxcorner, centroid, c1, c2, c3, c4, c5, c6, c7, c8 )
Description:This method retrieves the centroid and corner results stored in an object that contains elemental data  
with corners. Results are retrieved fo r all elements specified in the Set
Input:INT4 idSET The ID of a Set object that co ntains the IDs of the entities to retrieve.
Output:
INT4 maxcornerThe ID of the maximum corner ava ilable for this object. For exam-
ple, if this object contains resu lts on quadrilateral plates, maxcorner 
will typically equal 4, since results  are only available for corners 
1,2,3, and 4.
REAL8 centroid[0..N]The results at the element centroid  associated with the corresponding 
node/element in the Set.
REAL8 c1[0..N]
The results at the element corners associated with the corresponding 
node/element in the Set. Some el ements have missing corners. For 
example, Tetrahedral results are stored on corners 1,2,3 and 5. 
Wedge results are stored on 1,2,3 and 5,6,7.REAL8 c2[0..N]
REAL8 c3[0..N]REAL8 c4[0..N]REAL8 c5[0..N]REAL8 c6[0..N]REAL8 c7[0..N]REAL8 c8[0..N]Return Code:NoneRemarks/Usage:This method simply retrie ves the information about the output fro m the current object. You must first 
load that data - either using the Get( ) method, or  by creating it yourself. The object must contain ele-
mental data with corners for this method to work properly. If you only  want to retrieve the centroidal 
data, you can do that by calling GetScalarAtElemSet  - even though the object contains corner data.
For models where the output vectors may only contai n partial corner data - for example mixed quad/tri 
models where there is no corner output  for the triangles, or at least on e missing corner - this method will 
return the centroidal value for all missing corner data. This only app lies to corners where there are some 
results (below maxcorner). Corners that have no  output for all elements are still not returned.
GetElemWithCornerSet   API-2845
Example:
NoneGetElemWithCornerSet
( idSET, maxcorner, centroid, c1, c2, c3, c4, c5, c6, c7, c8 )
 API-2846  PutElemWithCorner
5.56.2.26  PutElemWithCorner (OBSOLETE)
PutElemWithCorner
( listcount, maxcorner, ID, centroid, c1, c2, c3, c4, c5, c6, c7, c8 )
Description:This method loads elemental centroid al and corner data into an object . The object must first be initial-
ized with InitElemWithCorner.
Input:INT4 listcount The number of entri es in the ID and results arrays.
INT4 maxcornerThe ID of the maximum corner ava ilable for this object. For exam-
ple, if this object contains resu lts on quadrilateral plates, maxcorner 
will typically equal 4, since results  are only available for corners 
1,2,3, and 4. If you are trying to stor e results with less  than 8 corners, 
you must still specify all 8 corner values, but you can simply provide 
dummy values for all corners past maxcorner.
INT4 ID[0..N] The IDs of  the nodes/elements wher e output is available.
REAL8 centroid[0..N]The results at the element centroid  associated with the corresponding 
node/element in the ID array.
REAL8 c1[0..N]
The results at the element corners associated with the corresponding 
node/element in the ID array. Some  elements have missing corners. 
For example, Tetrahedral results ar e stored on corners 1,2,3 and 5. 
Wedge results are stored on 1,2,3 and 5,6,7.REAL8 c2[0..N]
REAL8 c3[0..N]REAL8 c4[0..N]REAL8 c5[0..N]REAL8 c6[0..N]REAL8 c7[0..N]REAL8 c8[0..N]Output:NoneReturn Code:NoneRemarks/Usage:This method stores informa tion into the current object. Any previous output information in that object is 
lost. You cannot use this method to  add to an existing output vector . This method does not store that 
information to the model database. Af ter using this function, you must ca ll Put( ) if you want to store the 
updated lists in the database.
PutElemWithCorner   API-2847
Example:
NonePutElemWithCorner
( listcount, maxcorner, ID, centroid, c1, c2, c3, c4, c5, c6, c7, c8 )
 API-2848  InitScalarAtBeam
5.56.2.27  InitScalar AtBeam (OBSOLETE)
InitScalarAtBeam
( outputSET, vec1, vec2, title, vecstyle, category, nonlinear, bAddEndTitles )
Description:This method initializes the current object to prepare it for creating Be am output vectors for EndA and 
EndB containing a single sca lar value at each element.
Input:INT4 outputSET The ID of the output se t where this vector will be stored.
INT4 vec1 The ID of the EndA outp ut vector which will be created.
INT4 vec2 The ID of the EndB outp ut vector which will be created.
STRING title The output vector title (maximum 79 characters).
INT4 vecstyleIf 1, component[0..2] are the X,Y ,Z component values. If 2, data at 
end of beams. If 3, reverse data at second end of beam 
INT4 categoryGeneral category of output: 0=Any, 1=Disp, 2=Accel, 3=Force, 
4=Stress, 5=Strain, 6=Temp, others=User.
BOOL nonlinear If True, this r esult cannot be linearly combined.
BOOL bAddEndTitles Flag to prepend “End A”, “End B“ to the title. Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
PutScalarAtBeam   API-2849
5.56.2.28  PutScalarAtBeam (OBSOLETE)
PutScalarAtBeam
( listcount, ID, v1, v2 )
Description:This method stores data  to an output vectors for beam elements.
Input:INT4 listcount The number of the elemen ts where output is being created.
INT4 ID[0..listcount-1 ] The IDs of the elements wh ere output is being created.
REAL8 v1[0..listcount-1]The EndA output values associated with the corresponding element 
in the ID array. 
REAL8 v2[0..listcount-1]The EndB output values associate d with the corresponding element 
in the ID array. 
Output:
NoneReturn Code:NoneRemarks/Usage:NoneExample:None
 API-2850  FindMaxMin
5.56.2.29  FindMaxMin (OBSOLETE)
FindMaxMin
( idSET, bUseCornersOrComponents, minID, minValue, maxID, maxValue )
Description:This method searches the data that has been  loaded to find minimum and maximum values
Input:INT4 idSET The ID of a Set object that contains the node or element IDs to search
BOOL bUseCornersOrCompo-
nentsIf True, and the object has corner or component data loaded, then 
those corners will also be search ed to find the max/min values. If 
False, then only the primary vector will be searched.
Output:INT4 minID The ID of node/element where the minimum value occurs
REAL8 minValue The minimum output value
INT4 maxID The ID of the node/element where the maximum value occursREAL8 maxValue The maximum output valueReturn Code:NoneRemarks/Usage:NoneExample:None
   API-2851
5.57  OutputSet Objects
OutputSet objects correspond to the output/results sets in your model. They are derived from 
Entity objects, so in addition to the properties an d methods described here, all of the properties and 
methods defined for Entity objects are also availa ble for OutputSet objects. For more information, 
see Section 5.1, "Common Entity Properties and Methods". .
Use the feOutputSet method of the FEMAP App lication object to create OutputSet objects.
5.57.1  OutputSet Object Properties
OutputSets are always stored with their SetID = 1, and the ID equal to the ou tput set or time step 
that you are trying to access. Output Set objects do not contain any of the actual results data; they 
simply contain the header information for the set.
Property Description
STRING title Output set title (maximum 79 characters).
INT4 programAnalysis program where output came from: 0=Unknown, 
1=FEMAP Generated, 2=PAL, 3=PAL 2, 4=MSC/NASTRAN, 5=ANSYS, 6=STARDYNE, 7=COSMOS, 8=PATRAN, 
9=FEMAP Neutral, 10=ALGOR, 11=SSS/NASTRAN, 
12=Comma Separated, 13=UAI/NASTRAN, 14=Cosmic NASTRAN, 15=STAAD, 16=ABAQUS, 17=WECAN, 
18=MTAB/SAP, 19=CDA/Sprint, 20=CAEFEM, 21=I-DEAS, 
22=ME/NASTRAN, 26=CSA/NASTRAN, 28=CFDesign, 31=LS-DYNA, 32=MARC, 33=SINDA, 38=NX Nastran.
INT4 analysisType of analysis: 0=Unknown, 1=Static, 2=Normal Modes/
Eigenvalue, 3=Transient Dynamic/Time History, 4=Fre-
quency/Harmonic Response, 5=Response Spectrum, 6=Ran-dom Response, 7=Buckling, 8=Design Opt, 9=Explicit 
Transient Dynamics, 10=Non linear Static, 11=Nonlinear 
Buckling, 12=Nonlinear Transi ent, 13=Implicit Transient 
Dynamics, 17=Fatigue, 19=Computational Fluid Dynamics, 
20=Steady-State Heat Transfer, 21=Transient Heat Transfer, 
22=Advanced Nonlinear Sta tic, 23=Advanced Nonlinear 
Transient, 24=Advanced Nonlin ear Explicit, 25=Static Aero-
elasticity, 26=Aerodynamic Flutter
REAL8 valueThe output set value. For mo dal analyses, the modal fre-
quency. For any transient or non linear analysis, the time value 
at this step. For Buckling, the ei genvalue. For static analysis = 
0.0
STRING notesOne or more lines of text. Maximum 256 characters. Each line 
is separated by a CR-LF (0x0D,  0x0A) character pair. The end 
of the string is terminated by a NULL character.
INT4 studyID of analysis study where the output set currently resides, 0 
indicates output set is not in an analysis study.
 API-2852  
INT4 nas_case Case ID for Nastran Output Sets
INT4 nas_revision Revision ID for Nastran Output Sets
INT4 combination_typeType of output processing operation used to create the output 
set: 0=None, 1=Linear Combination, 2=RSS Combination, 
3=Max Envelope, 4=Min Enve lope, 5=MaxAbs Envelope, 
6=SetID Max Envelope, 7=Se tID Min Envelope, 8=SetID 
MaxAbs EnvelopeProperty Description
VectorV2   API-2853
5.57.2  OutputSet Object Methods
5.57.2.1  VectorV2
VectorV2
( vectorID )
Description:This method replaces Vector. For more information se e, Section 2.4, "Working with Output in FEMAP 
2020.1 and above". This method creates and returns an Output object that is lo aded with the data for a 
specific output vector.
Input:INT4 caseID The ID of the output vector to load.Output:NoneReturn Code:NoneRemarks/Usage:The current OutputSet must be loaded with the Set da ta from the set where you wa nt to retrieve the vec-
tor prior to calling this method. The OutputSet ID property is used to define the set where the vector is 
retrieved.
Example:
 API-2854  OutputVectorsV2
5.57.2.2  OutputVectorsV2
OutputVectorsV2
( nVectorSetID )
Description:This method replaces OutputVectors. For more inform ation see, Section 2.4, "Working with Output in 
FEMAP 2020.1 and ab ove". This method fills  a Set object with the IDs of all Output vectors that are in 
the currently selected Output Set
Input:INT4 nVectorSetID The ID of a Set Object that  will receive the IDs of the Output vectors
Output:NoneReturn Code:NoneRemarks/Usage:You must set the “ID” property of the current object to match the Output Set wh ere you want to retrieve 
the vectors - this happens automatically  if you “Get” the Output Set object.
Example:
SetComplexOptions   API-2855
5.57.2.3  SetComplexOptions
SetComplexOptions
( bExpandComplex, dComplexPhase )
Description:Used to control the output return ed when using the OutputVectors me thod. This method sets a phase 
angle to use for any complex output  (magnitude, phase, real or imagin ary) which will cause the output 
to be returned in OutputVectors as the expand ed complex magnitude at the specified phase angle.
Input:BOOL bExpandComplex When True, complex expansion will occurREAL8 dComplexPhase Value of phase an gle to use for complex expansion
Output:None
Return Code:
NoneRemarks/Usage:This method MUST be called before the Get call in order for the expand ed complex output  to be loaded 
into the output set object
Example:
 API-2856  SetCombination
5.57.2.4  SetCombination
SetCombination
( enProcessType, nNumFactors, vnSetID, vdFactorArray )
Description:This method sets the outp ut processing operation, output set IDs, and scale factors to create a new pro-
cessed output set or for an existing output  set currently in the OutputSet object
Input:
enum zResultsProcessType 
enProcessTypeType of output processing opera tion, 1=Linear Combination, 
2=RSS Combination, 3=Max Envelope, 4=Min Envelope, 5=Max-Abs Envelope, 6=SetID Max Envelope, 7=SetID Min Envelope, 
8=SetID MaxAbs Envelope
INT4 nNumFactors Number of output set a nd scale factor pairs in the combination
INT4 vnSetID[0..numFactors- 1] The IDs of the output sets  used in the combination.
REAL8 xyz[0..numFactors-1] The scale factors fo r each output set used in the combination.
Output:NoneReturn Code:NoneRemarks/Usage:If using this method to create a new processed out put set, call ExpandCombination immediately after 
this method to create a new output  set (i.e. a Put is not needed).
If using this method to modify an  existing “Create All Immediately” processed output set, you will need 
to call ExpandCombination to up date the values in the output set (i.e., a Put is not needed).
If using this method to modify an  existing “As Needed/Temporary” pro cessed output set, you will not 
want to use ExpandCombination, but instead will need to use Put to update the processed output set. If 
you call ExpandCombin ation, it will change the processed ou tput set from “As Needed/Temporary” to 
“Create All Immediately”.
Example:
SetStudyCombination   API-2857
5.57.2.5  SetStudyCombination
SetStudyCombination
( enProcessType, nStudyID )
Description:This method sets the output processing operation for an analysis studyInput:
enum zResultsProcessType 
enProcessTypeType of output processing operatio n, 1=Linear Combination, 2=RSS 
Combination, 3=Max Envelope, 4=Min Envelope, 5=MaxAbs Enve-
lope, 6=SetID Max Envelope, 7= SetID Min Envelope, 8=SetID 
MaxAbs Envelope
INT4 nStudyID ID of Analysis StudyOutput:NoneReturn Code:NoneRemarks/Usage:
Example:
 API-2858  ExpandCombination
5.57.2.6  ExpandCombination
ExpandCombination
( bSetTitles )
Description:This method can be used in conjun ction with SetCombination to create a new processed output set in the 
next available output set ID. Also, it is used update the values in a “C reate All Immediately” type of pro-
cessed output set after using SetCombination.
Alternatively, it can be used convert an existing “As Needed/Temporary” type of processed output set to 
a “Create All Immediately” type of processed output set
Input:
BOOL bSetTitlesWhen True, an descrip tive title based on the process type and output 
sets used in the combination will be applied to th e new processed 
output set. When False, a default title will be created. If modifying an 
existing output set, this option do es nothing, as the title will not be 
changed.
Output:NoneReturn Code:NoneRemarks/Usage:This method deletes all ex isting output in an existing “Create A ll Immediately” processed output set, 
then recreates all of the output. Also, after using this  method, the output data for the “expanded” output 
set will be stored in the database.
Example:
ExpandCombination   API-2859
 API-2860  
5.58  Plane Objects
Plane objects correspond to defined planes which can be stored in the database for future use in 
commands. They are derived from Entity objects, so in addition to the properties and methods 
described here, all of the properties and methods defined for Entity objects are also available for 
Plane objects. For more informa tion, see Section 5.1, "Common Entity Properties and Methods". 
Use the fePlane method of the FEMAP App lication object to create Plane objects.
5.58.1  Plane Object Properties
Planes are always stored with a SetID=1, and the ID equal to the reference ID.
Property Description
STRING title Title of saved plan e (Maximum 79 Characters)
REAL8 base[0..2]
orV ARIANT vBasePlane base location in global rectangular coordinates
REAL8 norm[0..2]
or
V ARIANT vNormComponents of the vector normal to the plane
REAL8 axis[0..2]
orV ARIANT vAxisComponents of a vector  along the plane X axis
PutAll   API-2861
5.58.2  Plane Object Methods
5.58.2.1  PutAll
PutAll
( ID, sTitle, vBase, vNorm, vAxis  )
Description:This method saves a plane to the database with  all the available options using a single call
Input:INT4 ID ID of planeSTRING title Title of plane (Maximum 79 Characters)REAL8 vBase[0..2] Plane base location in global rectangular coordinatesREAL8 vNorm[0..2] Components of the vector normal to the plane
REAL8 vAxis[0..2] Components of a vector along the plane X axis
Output:NoneReturn Code:FE_FAIL Unable to save planeRemarks/Usage:None.Example:None
 API-2862  
5.59  Point Objects
Point objects correspond to the poin ts in your model. They are de rived from Entity objects, so in 
addition to the properties and methods described here, all of the properties and methods defined 
for Entity objects are also available for point ob jects. For more information, see Section 5.1, 
"Common Entity Properties and Methods".
Use the fePoint method of the FEMAP App lication object to create Point objects.
5.59.1  Point Object Properties
Points are always stored with a SetID= 1, and the ID equa l to the Point ID.
Property Description
REAL8 x
These are the coordinates of the point. They are always speci-
fied in global rectangular coordinates.REAL8 y
REAL8 zINT4 layer The ID of the laye r associated with the point.
INT4 color The point color.
INT4 type The point type: 0=Default, 1=Solid.INT4 defCSys The ID of the definition coordinate system.INT4 attrPID The Property ID of the meshing attribute.
INT4 engineThe ID of the solid modeling engi ne used with this point:  
0=None, 1=Parasolid, 2=ACIS.
INT4 address The solid modeling engine geometry address.
REAL8 meshsizeMeshSize at the point. 0.0, unle ss a point-based mesh size has 
been defined.
INT4 InCombinedCurveIf the point is internal to a co mbined curve, this propety con-
tains the ID of the combined curve, otherwise it is 0
REAL8 ScaleFactor The Solid Geometry Scale FactorAdditional Properties
REAL8 xyz[0..2]Accesses all three coordinates of a point as a Variant. Same as 
using x, y, and z independently.
Nodes   API-2863
5.59.2  Point Object Methods
5.59.2.1  Nodes
Nodes
( numNodes, nodeID )
Description:This method returns the nodes th at are attached to this point
Input:NoneOutput:INT4 numNodes The number of nodes returned.INT4 nodeID[0..numNodes-1] The ID s of the selected nodes which are attached to the point.
Return Code:
FE_FAIL Unable to return nodes, possibly none exist.FE_NOT_EXIST No nodes were attached to  the point in the manner you selected.
FE_NO_MEMORY Insufficient memory to  allocate list of attached nodes.
Remarks/Usage:NoneExample:
 API-2864  Nodes
The following codes modifies the color of all nodes on Point 4. 
 Sub Main
      Dim App As femap.model      Set App = feFemap()
      Dim pt As femap.Point
      Set pt = App.fePoint
      Dim nd As femap.Node
      Set nd = App.feNode
      Dim rc As Long
      Dim Count As Long
      Dim Nodes As Variant
      Dim i As Long
      rc = pt.Get (4)
      rc = pt.Nodes(Count, Nodes)
      For i = 0 To Count - 1
            nd.Get (Nodes(i))
            nd.color = 4
            nd.Put (0)      Next i 
      App.feViewRegenerate(0)
End SubNodes
( numNodes, nodeID )
NodesAsSet   API-2865
5.59.2.2  NodesAsSet
NodesAsSet
( nSetID, bClear )
Description:This method returns the nodes that are attached to this point in a Set Object
Input:INT4 nSetID The ID of the Set Object which receives the Node IDs.BOOL bClear If True, the Set is clea red before loading the Node IDs.
Output:NoneReturn Code:FE_FAIL Unable to return nodes, possibly none exist.Remarks/Usage:NoneExample:None
 API-2866  Curves
5.59.2.3  Curves
Curves
( nCombinedMode, numCurves, curveID )
Description:This method returns the curves th at are attached to this point
Input:
INT4 nCombinedMode0=List contains the basic curves that are adjacent to the point, 1=Any 
curves that are adjacent that are in  a Combined Curve are replaced by 
the ID of the Combined Curve, 2=List contains both the underlying 
and combined curves.
Output:INT4 numCurves The number of cu rves in the returned array
INT4 curveID[0..numCurves -1] The IDs of the curves.
Return Code:FE_FAIL Unable to return cu rves, possibly none exist.
Remarks/Usage:Only points that are on Solids/Sheet Solids can be used with this method.
Example:None
CurvesAsSet   API-2867
5.59.2.4  CurvesAsSet
CurvesAsSet
( nCombinedMode, nSetID, bClear )
Description:This method returns the curves that are attached to this point in a Set Object
Input:
INT4 nCombinedMode0=List contains the basic curves that are adjacent to the point, 1=Any 
curves that are adjacent that are in  a Combined Curve are replaced by 
the ID of the Combined Curve, 2=List contains both the underlying 
and combined curves.
INT4 nSetID ID of the Set Object to receive the Curve IDsBOOL bClear If True, the Set is cleared before loading the curvesOutput:NoneReturn Code:FE_FAIL Unable to return cu rves, possibly none exist.
Remarks/Usage:Similar to Curves, except that the attached curves are returned in a Set Object instead of an array. Only 
points that are on Solids/Sheet Solid s can be used with this method.
Example:None
 API-2868  SurfacesAsSet
5.59.2.5  SurfacesAsSet
SurfacesAsSet
( nCombinedMode, nSetID, bClear )
Description:This method returns the surfaces that are attached to this point in a Set Object
Input:
INT4 nCombinedMode0=List contains the basic surfaces that are adjacent to the curve, 
1=Any surfaces that are adjacent th at are in a Combined Surface are 
replaced by the ID of the Combined Surface, 2=List contains both 
the underlying and combined surfaces.
INT4 nSetID ID of the Set Object to receive the Surface IDsBOOL bClear If True, the Set is cl eared before load ing the surfaces
Output:NoneReturn Code:FE_FAIL Unable to return su rfaces, possibly none exist.
Remarks/Usage:Only points that are on Solids/Sheet Solids can be used with this method.
Example:None
Solid   API-2869
5.59.2.6  Solid
Solid
( nSolidID )
Description:This method returns the ID of the So lid that contains the current point
Input:NoneOutput:INT4 nSolidID The ID of the Solid that references the current Point
Return Code:FE_FAIL Unable to get the solidRemarks/Usage:This method will only work with a point that is defined on a Solid.
Example:None
 API-2870  GetClosest
5.59.2.7  GetClosest
GetClosest
( xyz )
Description:This method finds the Point clos est to the desired location and loads it into the current object
Input:REAL8 xyz[0..2] The coordinates of the location of interest.
Output:NoneReturn Code:FE_NOT_EXIST Unable to  find closest Point.
Remarks/Usage:NoneExample:None
GetAllArray   API-2871
5.59.2.8  GetAllArray
GetAllArray
( SetID, numPoint, entID, Exist, xyz, layer, color, ptType, defCSys )
Description:This method retrieves arrays of va lues for a set of points, including if a point exists in the database
Input:
INT4 SetIDID of the set that contains the poin t IDs to retrieve. If 0, retrieve 
all points in the model.
Output:INT4 numPoint The number of points for which data is being returned.INT4 entID[0..numPoint-1] Each entry is the ID of the associated point.
BOOL Exist[0..numPoint-1] Point existence, Tr ue=Point exists, Fals e=Point does not exist
REAL8 xyz[0..(3*numPoint)-1]The coordinates of the point. There are 3 entries, x, y, z for each 
point.
INT4 layer[0..numPoint-1] The ID  of the layer for the point.
INT4 color[0..numPoint-1] The color of the point.
INT4 ptType[0..numPoint-1] The type of the point.INT4 defCSys[0..numPoint-1] The defin ition coordinate system of the point.
Return Code:FE_FAIL Unable to retrieve data from the selected points.Remarks/Usage:This method is the fastest way to retrieve information about a large nu mber of points. If a retrieved point 
ID does not exist, then all of the values for that point ID will be 0.
Example:None
 API-2872  GetCoordArray
5.59.2.9  GetCoordArray
GetCoordArray
( SetID, numPoint, entID, Exist, xyz )
Description:This method retrieves arrays of  coordinates for a set of Points
Input:
INT4 SetIDID of the set that contains the poin t IDs to retrieve. If 0, retrieve all 
points in the model
Output:INT4 numPoint The number of points for which data is being returned.INT4 entID[0..numPoint-1] Each entry is the ID of the associated point
BOOL Exist[0..numPoint-1] Point existence, Tr ue=Point exists, Fals e=Point does not exist
REAL8 xyz[0..(3*numPoint)-1]The coordinates of the point. There are 3 entries, x, y, z for each 
point.
Return Code:FE_FAIL Unable to retrieve data from the selected points.Remarks/Usage:This is a simpler form of GetAllArray, if you simply  need the point coordinates. If a retrieved point ID 
does not exist, then all of the va lues for that point ID will be 0.
Example:None
   API-2873
5.60  Property Objects
Property objects correspond to th e properties in your model. They  are derived from Entity objects 
so, in addition to the properties and methods described here, all of the properties and methods 
defined for Entity objects are also available for Pr operty objects. For more  information, see Sec-
tion 5.1, "Common Entity Properties and Methods". 
Use the feProp method of the FEMAP Application object, or th e Prop method of the Element 
object to create Property objects.
5.60.1  Property Object Properties
Properties are always stored with a SetID= 1, and the ID equal to the property ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
INT4 color The property color.INT4 layer The layer associated with the property.
INT4 typeType of property:
Rod=1, Bar=2, Tube=3, Link=4, Beam=5, Spring/Damper=6, 
DOFSpring=7, CurvedBeam=8, Gap=9, PlotOnly=10, Shear-Panel (Lin=11 Para=12), Membra ne (Lin=13 Para=14), Bend-
ingOnly (Lin=15 Para=16), Plate (Lin=17 Para=18), 
PlaneStrain (Lin=19 Para=20), Laminate (Lin=21 Para=22), Axisymmetric (Lin=23 Para=2 4), Solid (Lin=25 Para=26), 
Mass=27, MassMatrix=28, Rigid=29, StiffnessMatrix=30, 
CurvedTube=31, PlotOnlyPlate=32, SlideLine=33, Con-tact=34, Axisymmetr ic Shell (Lin=35, Para=36), Para 
Beam=37, Weld/Fastener=38, Solid Laminate (Lin=39, 
Para=40), Spring/Damper to Ground=41, DOF Spring to Ground=42
INT4 matlIDID of material referenced by prop erty. This is not used for cer-
tain property types, like masse s and laminates. These proper-
ties do not directly re ference mate rial data
INT4 layupIDID of the layup referenced by property. This is only used for 
laminates.
STRING title Property title (maximum 79 characters).
INT4 cbushFlag to indicate if Spring/Damper Property has Type set to 
CBUSH. 1=CBUSH, 0=Other (NASTRAN CROD/CVISC)
INT4 refCSReference coordinate system. Used to specify the coordinate 
system used on the Weld/Faste ner property in the “Fastener 
Property Values” section.
 API-2874  
BOOL flag[0..3]
or
V ARIANT vflagArray of property flags.
INT4 flagI[0..3]
orV ARIANT vflagIArray of property flags accessed  as an INT4. Most flags are 
simply true/false and can be accessed with flag( ). For bars, beams and curved beams,  where shapes are available, 
flagI(1) defines the type of shape selected must be accessed as 
an INT4. Beam/Bar Sections: 1 = Rectangular Bar, 2 = Rectangular 
Tube, 3 = Trapezoidal Bar, 4 = Trapezoidal Tube, 5 = Circular 
Bar, 6 = Circular Tube, 7 = Hex Bar, 8 = Hex Tube, 9 = I, 10 = Channel, 11 = Angle, 12 = T, 13 = Z, 14 = Hat, 15 = General
NASTRAN PBEAML/PBARL sections: 16 = ROD, 17 = 
TUBE, 18 = L, 19 = I, 20 = CHAN, 21 = T, 22 = BOX, 23 = BAR, 24 = CROSS, 25 = H, 26 = T1, 27 = I1, 28 = CHAN1, 
29 = Z, 30 = CHAN2, 31 = T2, 32 = BOX1, 33 = HEXA, 34 = 
HAT, 35 = HAT1For bars, beams and curved beam s, flagI(2) (End A) & flagI(3) 
(End B) define the Section Property Generation Method.
Beam/Bar Section Property Me thods: 1 = Original FEMAP, 2 
= Alternate FEMAP, 3 = NASTRAN PBARL/PBEAML For laminates...
Failure Theory: 0 = None, 1 = Hill, 2 = Hoffman, 3 = Tsai-Wu, 
4 = Max Strain NEi Only
(10.3+):( 5 = Max Stress, 6 = NASA 
LaRC (LARC02), 7 = Puck PCP (PUCK), 8 = Multicontinuum 
(MCT) )Options: 0 = As Specified, 1 = Symmetry, 2 = Membrane 
Only, 3 = Bending Only, 4 = Smear, 5 = Smear-core
REAL8 pval[0..188]
orV ARIANT vpvalArray of property values.Property Description
   API-2875
5.60.2  Accessing Property Properties
You can access the individual properties for the Pr operty object by referencing the properties 
described above, and the data contained in the tabl e below. For example, to retrieve the cross-sec-
tional area for a bar property, use:INT4 ExtraMatlID[0..9]
or
V ARIANT vExtraMatlIDArray of extra material IDs. 
For Plate elements... 
ExtraMatlID[0] = Bending Material Specification
ExtraMatlID[1] = Transverse Shear Material Specification
ExtraMatlID[2] = Membrane-B ending Coupling Specification
Link property...
ExtraMatlID[0] = Conduction Calculated Material IDExtraMatlID[1] = Convection Fluid Material ID
ExtraMatlID[2] = Advection Fluid Material ID
ExtraMatlID[3] = Radiation Coating Material ID“Advanced Thermal” Interface Style Only:
Mass property...
ExtraMatlID[0] = Mass Material
Array of Property Extension material IDs
For Rod, Bar, Beam, Plane Stra in, Axisymmetric, and Solid: 
ExtraMatlID[4] = Overrides - Material
For Membrane, Bending Only, Plate, and Laminate:
ExtraMatlID[4] = Material Overrides - MembraneExtraMatlID[5] = Material Overrides - Bending
Additional PropertiesINT4 extramat[0..9] Same as plyval, but returns/sets entire array as a V ARIANT.
INT4 pmat[0..74] Same as pval, but retu rns/sets entire array as a V ARIANT.
INT4 numOutlineThis is a read-only property that specifies the number of points 
available in the current outline. You can multiply this value by 
3 to get the number of real numbers that are available in “out-
line”.
INT4 outline[0..3N]Gets or sets the outline drawn fo r a general shape. The outline 
array consists of real numbers.  For each point in the outline, 
there are three consecutive entries in the array. The first two 
entries are the x,y coordinates (in the 2D coordinates of the outline) of the location on the outl ine. The third entry is a flag 
indicating the type of location being specified. Possible values 
include: 0=Off, 1=Normal, 2=Start of Loop, 3=End of Loop, 4=Stress Recovery, 5=No Draw (used by FEMAP to reduce 
complexity of beam elements di splayed with cross-sections in 
the graphics window, cannot be a Stress Recovery). Points on each loop in the outline must be  specified in consecutive order.Property Description
 API-2876  
A = pr.pval(0)
or 
bend = pr.pval(10)
for the bending stiffness parameter of a plate property. 
This approach provides great flexibility, but can be slow if you are going to work with a large 
number of properties. In this case it is best to  access the data using “Additional Properties”. These 
all set and return entire arrays of values in one reference. For example, you could write:
Dim pr as Object 
Set pr = femap.feProp 
Dim v  as Variant 
pr.Get(1) 
v = pr.pmat 
v(0)=10.5 
v(1)=14.5 
pr.pmat = v 
pr.Put(1)
This code loads Property 1, retrieves the entire a rray of real values into “v”, updates the area and 
first moment of inertia (assuming the property wa s a bar), puts the entire array back, and saves the 
updated Property definition. While the code is s lightly longer than simp ly accessing the individual 
properties, performance will be  better using this approach.
   API-2877
5.60.2.1  Property Array Index Values
In general, most of the property data is simply stored in the various array properties. The location 
of the specific property data is defined in the following table. 
For laminate properties, the ply information is stor ed on the layup referenced by the property.Prop-
erty values are listed in the following tables:
•Property Values for Rod, Bar, Tube, Link, Beam, and Spring Elements
•Property Values for DOF Spri ng, Curved Beam, Gap, Shear, Membrane, and Bending Elements
•Property Values for Plate, Plane Strain, Lamina te, Mass, Mass Matrix, and General Matrix Ele-
ments
Property Values for Rod, Bar, Tu be, Link, Beam, a nd Spring Elements
Property Values
ROD BAR TUBE LINK BEAM SPRING/
DAMPER
Typ
e12 3 4 5 6
Flags
0 cable pipe taperedBush orient. 
csys 
1compress. 
only gapsshape typeclosed 
endsshape typeaxial(1)/
torsion(0)
2 section method section method_ABush Spring/
Damper Loc.
3 section method_BCBUSH(1)/
Other (0)
Values0 Area Area Dout Ku_A Area_A Stiffness
1Cable - 
Area II1 Din Kv_A I1_A Damping
2 I2 Kw_A I2_ABush Struc. 
Damping
3 I12 Kthu_A I12_ABush Spring/
Damper Loc.
4J J K t h v _ AJ _ ABush Trans. 
Stress Coeff
5 Ctors K1,eff Kthw_A K1_A,effBush Rot. 
Stress Coeff
 API-2878  
6 K2,eff Ku_B K2_A,effBush Trans.
Strain Coeff
7 NSM NSM NSM Kv_B NSM_ABush Rot. 
Strain Coeff
8Initial 
TensionYf_A1Pipe 
Pres-
sureKw_B Yf_A1
9 Init. Slack Zf_A1 Kthu_B Zf_A1
10Allow. 
Ten. StressYf_A2 Kthv_B Yf_A2Bush DOF1 
Struct Damp
11 Zf_A2 Kthw_B Zf_A2Bush DOF2 
Struct Damp
12 Yf_A3 Yf_A3Bush DOF3 
Struct Damp
13 Zf_A3 Zf_A3Bush DOF4 
Struct Damp
14 Yf_A4 Yf_A4Bush DOF5 
Struct Damp
15 Zf_A4link type:
1 = Struct.
2 = Cond.
3 = Conv.4 = Advect.
5 = Rad.Zf_A4Bush DOF6 
Struct Damp
16 Yoff_A
17 Zoff_A18 Warp_A19 Perimeter Perimeter Perimeter_A
20cond. type
0 = Bulk1 = Calc.Area_B
21 Bulk cond. I1_B
22 Calc. Area I2_BProperty Values
ROD BAR TUBE LINK BEAM SPRING/
DAMPER
   API-2879
23Calc. 
LengthI12_BDamp Force 
vs Freq
24 Calc. Cond J_B
25Cond. 
Direct.K1_B,eff
26 K2_B,eff
27 NSM_B28 Yf_B129 Zf_B130 Conv. Area Yf_B2
31Conv. 
Coeff.Zf_B2
32 Yf_B3
33 Zf_B334 Yf_B4
35Adv. Mass 
FlowZf_B4
36Adv. Spec. 
HeatYoff_BBush DOF1 
Stiffness
37 Adv. Direct. Z_offBBush DOF2 
Stiffness
38 Warp_BBush DOF3 
Stiffness
39 Perimeter_BBush DOF4 
Stiffness
40Std Shape H or 
Radius (DIM1)Rad. View 
FactorStd Shape H or 
Radius (DIM1)Bush DOF5 
Stiffness
41Std Shape W1 
(DIM2)Rad. View 
Fac. Func.Std Shape W1 
(DIM2)Bush DOF6 
Stiffness
42Std Shape W2 
(DIM3)Rad. AreaStd Shape W2 
(DIM3)Bush DOF1 
DampingProperty Values
ROD BAR TUBE LINK BEAM SPRING/
DAMPER
 API-2880  
43Std Shape T1 
(DIM4)Rad. Emiss.Std Shape T1 
(DIM4)Bush DOF2 
Damping
44Std Shape T2 
(DIM5)Std Shape T2 
(DIM5)Bush DOF3 
Damping
45Std Shape T 
(DIM6)Std Shape T
(DIM6)Bush DOF4 
Damping
46 Std Shape SR1 Std Shape SR1Bush DOF5 
Damping
47 Std Shape SR2 Std Shape SR2Bush DOF6 
Damping
48 Std Shape SR3 Std Shape SR3Bush DOF1 K 
vs. FrequencyFunction
49 Std Shape SR4 Std Shape SR4Bush DOF2 K
vs. Frequency
Function
50Std Shape Ori-
entStd Shape OrientBush DOF3 K
vs. Frequency
Function
51Std Shape 
RefLocStd Shape RefLocBush DOF4 K
vs. FrequencyFunction
52 Shape RefY Shape RefYBush DOF5 K
vs. Frequency
Function
53 Shape RefZ Shape RefZBush DOF6 K
vs. Frequency
Function
54Bush DOF1 F/
V vs. Freq.Function
55End B_Std Shape 
H or Radius 
(DIM1)Bush DOF2 F/
V vs. Freq.
Function
56B_Std Shape W1 
(DIM2)Bush DOF3 F/
V vs. Freq.
FunctionProperty Values
ROD BAR TUBE LINK BEAM SPRING/
DAMPER
   API-2881
57B_Std Shape W2 
(DIM3)Bush DOF4 F/
V vs. Freq.
Function
58B_Std Shape T 
(DIM4)Bush DOF5 F/
V vs. Freq.
Function
59B_Std Shape T2 
(DIM5)Bush DOF6 F/
V vs. Freq.Function
60B_Std Shape T 
(DIM6)Bush DOF1 
F vs. Disp.
Function
61 B_Std Shape SR1Bush DOF2 
F vs. Disp.Function
62 B_Std Shape SR2Bush DOF3 
F vs. Disp.
Function
63 B_Std Shape SR3Bush DOF4 
F vs. Disp.
Function
64 B_Std Shape SR4Bush DOF5 
F vs. Disp.Function
65B_Std Shape Ori-
entBush DOF6 
F vs. Disp.
Function
66B_Std Shape 
RefLocBush DOF1 
Struc. Damp-
ing vs. Fre-
quency
67 B_Shape RefYBush DOF2 
Struc. Damp-
ing vs. Fre-
quencyProperty Values
ROD BAR TUBE LINK BEAM SPRING/
DAMPER
 API-2882  
PE. Signifies these options/values are found in the Property Extensions dialog box68 B_Shape RefZBush DOF3 
Struc. Damp-
ing vs. Fre-quency
69 (PE)Large 
Strain Flag(PE)Large 
Strain Flag(PE)Large Strain 
FlagBush DOF4 
Struc. Damp-
ing vs. Fre-quency
70 (PE)Integration 
Type(PE)Integration 
TypeBush DOF5 
Struc. Damp-
ing vs. Fre-quency
71
(PE)Section(PE)SectionBush DOF6 
Struc. Damp-
ing vs. Fre-
quency
727374757677Property Values
ROD BAR TUBE LINK BEAM SPRING/
DAMPER
   API-2883
Property Values for DOF Spring, Curved Beam , Gap, Shear, Membrane, and Bending Elements
Property Values (continued)
DOF
SPRINGCURVED
BEAMGAP SHEAR MEM-
BRANEBEND-
ING
Type 7 8 9 11/12 13/14 15/16Flags
0H a s  C S y sTop 
Fiber
1 shape typeABAQUS GAP 
CONDUCTANCE 
Active Bot 
Fiber
2 DOF_Asection 
methodABAQUS GAP 
CONDUCTANCE 
is Pressure based
3 DOF_BABAQUS GAP 
RADIATION Active 
Values0 Stiffness Area Gap,initial T T T1 Damping I1 Stiff,comp.2 I2 Stiff,tens.3 I12 Stiff,trans.4J M u , y5K 1 , e f f M u , z6 K2,eff PreloadT7 NSM Plane X NSM NSM NSM
8 Yf_A1 Plane Y F1,eff.fact.Top 
Fiber
9 Zf_A1 Plane Z F2,eff.fact.Bot 
Fiber
10 Yf_A2 Width/Area
(9.1+) 
F3,eff.fact.12I/T3
 API-2884  
11 Zf_A2MaxPenRat
(Set value to -1 to 
uncheck Adaptive box)(9.1+) 
F4,eff.fact.
12 Yf_A3 MaxAdjRat
13 Zf_A3 MinPenRat
14 Yf_A4ABAQUS GAP 
CONDUCTANCE 
Function defining Conductance, 
Gap Clearance, 
Temperature relationship 
15 Zf_A4ABAQUS GAP 
RADIATION 
Emissivity A
16ABAQUS GAP 
RADIATION Emissivity B
17 R, bend radABAQUS GAP 
RADIATION 
Function defining Effective 
View Factor, 
Gap Clearance relationship
18..3920=Force vs. 
Freq.
function21=Damping 
vs. Frequency 
function22 = Force vs. 
Disp. function
40Std Shape H 
or R (DIM1)
41Std Shape 
W1 (DIM2)Property Values (continued)
DOF
SPRINGCURVED
BEAMGAP SHEAR MEM-
BRANEBEND-
ING
   API-2885
42Std Shape 
W2 (DIM3)
43Std Shape T1 
(DIM4)
44Std Shape T2 
(DIM5)
45Std Shape T 
(DIM6)
46Std Shape 
SR1
47Std Shape 
SR2
48Std Shape 
SR3
49Std Shape 
SR4
50Std Shape 
Orient
51Std Shape 
RefLoc
52 Shape RefY53 Shape RefZ54..58
59
(PE)
Tria3 
Behavior
Type(PE)
Tria3 
Behavior
Type
60(PE)
Tria6 
Behavior
Type(PE)
Tria6 
Behavior
Type
61(PE)
Quad4 
BehaviorType(PE)
Quad4 BehaviorTypeProperty Values (continued)
DOF
SPRINGCURVED
BEAMGAP SHEAR MEM-
BRANEBEND-
ING
 API-2886  
PE. Signifies these options/values are found in the Property Extensions dialog box62  (PE)
Quad8 
Behavior
Type(PE)
Quad8 
Behavior
Type
63..68
69(PE)
Large 
Strain 
Flag(PE)
Large 
Strain 
Flag
70(PE)
Tria3 Int.
Type(PE)
Tria3 Int.Type
71 (PE)
Tria6 Int.
Type(PE)
Tria6 Int.Type
72(PE)
Quad4 
Int.
Type(PE)
Quad4 
Int.
Type
73(PE)
Quad8 
Int.Type(PE)
Quad8 Int.Type
74757677Property Values (continued)
DOF
SPRINGCURVED
BEAMGAP SHEAR MEM-
BRANEBEND-
ING
   API-2887
Property Values for Plate, Plane Strain, Lamina te, Mass, Mass Matrix, and General Matrix Ele-
ments
Property Values (continued)
PLATE PLANE
STRAINLAMINATE MASS MASS
MATRIXGENERAL
MATRIX
Type 17/18 19/20 21/22 27 28 30Flags
0 Top Fiber Top Fiber failure theoryMatrix 
Type (0 = Stiff, 
1 = Damp, 
2 = Mass)
1 Bot Fiber Bot Fiber options
2offset bottom 
surface
Values0 Tavg,T1 T Bottom Fiber M11 K1,11T 2 N S M I x x M 1 2 K 1 , 22 T3 Bond Shear Ixy M13 K1,3
3T 4 Ref Temp Iyy M14 K1,4
4 Damping Izx M15 K1,5
5 Iyz M16 K1,66 Izz K11,12
7N S M N S M
(2)Mx M22 K2,2
8 Top Fiber Top Fiber Xoff,refCS M23 K2,3
9 Bot Fiber Bot Fiber Yoff,refCS M24 K2,4
10 12I/T3 Zoff,refCS M25 K2,5
11 Ts/T My M26 K2,6
12(PE)Comp. 
DirectionMz K10,11
13(PE)Copress 
AllowableK10,12
14(PE)X Fact. M33 K3,3
 API-2888  
15(PE)Y Fact. M34 K3,4
16(PE)Type M35 K3,5
17(PE)F1, eff. M36 K3,6
18(PE)F2, eff. K9,10
19(PE)F3, eff.Effective 
DiameterK9,11
20(PE)F4, eff.(1)Mass 
FunctonK9,12
21 M44 K4,4
22 M45 K4,523 M46 K4,624 K8,9
25 K8,10
26 K8,11
27 K8,12
28 M55 K5,529 M56 K5,630 K7,8
31 K7,9
32 K7,10
33 K7,11
34 K7,12
35 M66 K6,636 K7,7
37 K8,8
38 K9,9
39 K10,10
40 K11,11Property Values (continued)
PLATE PLANE
STRAINLAMINATE MASS MASS
MATRIXGENERAL
MATRIX
   API-2889
41 K12,12
42 K1,7
43 K1,8
44 K1,9
45 K1,10
46 K1,11
47 K1,12
48 K2,7
49 K2,8
50 K2,9
51 K2,10
52 K2,11
53 K2,12
54 K3,7
55 K3,8
56 K3,9
57 K3,10
58 K3,11
59(PE)
Tria3 Behav-
ior Type(PE)
Tria3 Behav-ior Type(PE)
Tria3 Behav-ior TypeK3,12
60 (PE)
Tria6 Behav-
ior Type(PE)
Tria6 Behav-ior Type(PE)
Tria6 Behav-ior TypeK4,7
61 (PE)
Quad4 Behav-
ior Type(PE)
Quad4
BehaviorType(PE)
Quad4 Behav-
ior TypeK4,8
62(PE)
Quad8 Behav-
ior Type(PE)
Quad8 
Behavior
Type(PE)
Quad8 Behav-ior TypeK4,9Property Values (continued)
PLATE PLANE
STRAINLAMINATE MASS MASS
MATRIXGENERAL
MATRIX
 API-2890  
1. Signifies value only available in GUI when  using the Advanced Thermal Interface Style.
2. To create a mass with the same va lues in all directions, Mx, My, and Mz must ALL be set, not only Mx, as 
can be done in GUI.PE. Signifies these options/values are found in the Property Extensions dialog boxFor Laminate Properties, the follwing valu es specify the Failure Theory options:
flagI(0): 0 = None, 1 = Hill, 2 = Hoffman, 3 = Tsai-Wu, 4 = Max Stran, 5 = NEi Nastran/STRESS, 6 = NEi Nastran/LARC02, 7 = NEi Nastran/PUCK, and 8 = NEi Nastran/MCT63 K4,10
64 K4,11
65 K4,12
66 K5,7
67 K5,8
68 K5,9
69(PE)
Large Strain 
Flag(PE)
Large Strain Flag(PE)
Large Strain FlagK5,10
70 (PE)
Tria3 Int.
Type(PE)
Tria3 Int.Type(PE)
Tria3 Int.TypeK5,11
71 (PE)
Tria6 Int.
Type(PE)
Tria6 Int.Type(PE)
Tria6 Int.TypeK5,12
72 (PE)
Quad4 Int.
Type(PE)
Quad4 Int.Type(PE)
Quad4 Int.TypeK6,7
73 (PE)
Quad8 Int.
Type(PE)
Quad8 Int.Type(PE)
Quad8 Int.TypeK6,8
74 K6,9
75(PE)
LayerK6,10
76(PE)
ThicknessK6,11
77 K6,12Property Values (continued)
PLATE PLANE
STRAINLAMINATE MASS MASS
MATRIXGENERAL
MATRIX
   API-2891
Property Values for Curved Tube, Slide Line, Axisymmetric Shell, and Weld/Fastener Elements
Property Values (continued)
CURVED 
TUBESLIDE LINE AXISYM 
SHELLWELD/FASTENER Solid Laminate
Type 31 33 35/36 38 39/40
Flags
0Penetration 
(Unsym = 1, 
Sym = 0)(9.1+)M-Set DOF 
(CWELD)
1(9.1+)Spot Weld 
(CWELD)
2(10+)Absolute 
(CFAST)
3(10+)Use Material 
CSys (CFAST)
Values
0 Dout Stiffness Scale(8.2+)T(10+)Diameter for 
both CWELD and 
CFAST
1D i nNonsliding 
Friction(10+)Mass
2(10+)Struct Damping(11+)Bond Shear Stress 
Allowable
3(10+)KTX(11+)Reference Tem-
perature
4 Static Friction(10+)KTY(11+)Damping Coeffi-
cient
5(10+)KTZ(11+)Bond Normal 
Stress Allowable
6(10+)KRX(11+)Ply/Stack Direc-
tion. 0=Default, 1=XY(12), 2=XZ(13), 
3=YX(21), 4=YZ(23), 
5=ZX(31), 6=ZY(32)
7N S M
(10+)KRY
 API-2892  
When two types are listed, the first number corresp onds to a linear type, the second to a parabolic 
type. The following types are also available: Plot  Only (10), Plot Plate (32), Axisymmetric (23/
24), Solid (25/26), and Rigid (29) and Contact (34 - Obsolete and should not be used).
For Solid Laminate Properties (39/40):
layupID property: Lamina te Definition - Layup8(10+)KRZ
9(10+)CWELD/CFAST 
toggle (0 = CWELD, 
1 = CFAST)
10 Master Width11 Slave Width121314151617 R, bend rad18..68
69
(PE)
Large Strain Flag
70(PE)
Brick8 Integration
Type
71(PE)
Brick20 Integration
Type
72..77Property Values (continued)
CURVED 
TUBESLIDE LINE AXISYM 
SHELLWELD/FASTENER Solid Laminate
   API-2893
For Solid Properties (25/26):
flag(0): False = Align to CSys, True = Align to Element
Integration Network (must be a value from 0 to 3) = pval(0)
Property Extensions for Solid Properties:
Large Strain Flag = pval(69)
Tetra4 Elements: Integration Type = pval(70); Behavior Type = pval(59)
Tetra10 Elements: Integration Type = pval(71); Behavior Type = pval(60)
Pyram5 Elements: Integration Type = pval(72); Behavior Type = pval(61)
Pyram13 Elements: Integration Type = pval(73); Behavior Type = pval(62)
Wedge6 Elements: Integration Type = pval(74); Behavior Type = pval(63)Wedge15 Elements: Integration Type = pval(75); Behavior Type = pval(64)
Brick8 Elements: Integration Type = pval(76); Behavior Type = pval(65)
Brick20 Elements: Integration Type = pval(68); Behavior Type = pval(66)Material Override = pval(77)
For Solid Cohesive Properties (43/44):
flag(0): False = Align to CSys, True = Align to ElementThickness = pval(0)
Property Extensions for Solid Cohesive Properties:
Integration Type = pval(70)Output Type = pval(76)
Matrix Scheme = pval(77)
 API-2894  ComputeShape
5.60.3  Property Object Methods
There following methods are available in addition to th e standard entity methods.
5.60.3.1  ComputeShape
ComputeShape
( shear_center_offset, Warping, stress_recovery )
Description:NOTE: This method is obsolete - for new applications you should use either ComputeStdShape() or 
ComputeGeneralShape(). If values for End B of a tape red beam must be calcul ated, then ComputeStd-
Shape2() or ComputeGeneral Shape2() must be used.
This method computes the prop erties for a standard shape.
Input:BOOL shear_center_offset If True, the shear center offset is computed.
BOOL Warping If True, the warping constants are computed.
BOOL stress_recoveryIf True, the stress recovery locations and cross section orientation 
that are currently defined in the ob ject are used for the computation. 
If False, default stress recovery locations and orientation are used.
Output:NoneReturn Code:NoneRemarks/Usage:To use this method, the property must be a type that  uses a shape - Bar, Beam ... Prior to using this 
method, you must load the appropriate properties (as shown in the table above) to define the type of 
shape and its dimensions. This method  will not work with general shapes.
For bars, beams and curved beams, where shapes ar e available, flagI(1) defines the type of shape 
selected. Available values are: 1 = Rectangular Bar, 2 = Rectangular Tube, 3 = Trapezoidal Bar, 4 = Trapezoidal Tube, 5 = Circular 
Bar, 6 = Circular Tube, 7 = Hex Bar, 8 = Hex Tube, 9 = I, 10 = Channel, 11 = Angle, 12 = T, 13 = Z, 14 
= Hat, 15 = General
Example:None
ComputeStdShape   API-2895
5.60.3.2  ComputeStdShape
ComputeStdShape
( shapeID, dimensions, sOrient, EvalMethod, shear_center_offset, Warping, stress_re-
covery )
Description:This method computes the prop erties for a standard shape.
Input:
INT4 shapeIDID of one of the...
Standard Shapes ( 1 = Rectangular Bar, 2 = Rectangular Tube, 3 = 
Trapezoidal Bar, 4 = Trapezoidal Tu be, 5 = Circular Bar, 6 = Circu-
lar Tube, 7 = Hex Bar, 8 = Hex Tube, 9 = I, 10 = Channel, 11 = 
Angle, 12 = T, 13 = Z, 14 = Hat ), or ...
Nastran Shapes (16=Rod, 17=Tube, 18=L, 19=I, 20 = Channel, 21=T, 22=Box, 23=Bar, 24=Cross, 25=H, 26=T1, 27=I1, 28=Chan1, 
29=Z, 30=Chan2, 31=T2, 32=Box1, 33=Hexa, 34=Hat, 35=Hat1). 
REAL8 dimensions[0..5]The dimensions that define the shap e. Values are in the same order 
that they are shown in the shape dialog box.
INT4 sOrientThe orientation direction (0=Right, 1=Up, 2=Left, 3=Down). 
Ignored for the Nastran shapes - fo r these orientation is always 
“Right”
INT4 EvalMethodThe method used to ev aluate the section properties (0=Auto, 1=Orig-
inal, 2=Alternate, 3=Nastran PBEAML)
BOOL shear_center_offset If True, the shear center offset is computed.
BOOL Warping If True, the warping constants are computed.
BOOL stress_recoveryIf True, the stress recovery locations and cross section orientation 
that are currently defined in the ob ject are used for the computation. 
If False, default stress recovery locations and orientation are used.
Output:NoneReturn Code:FE_BAD_TYPE Property type not set to a type that uses a shape
 API-2896  ComputeStdShape
Remarks/Usage:
•The General shape is not availa ble with this method. Use Co mputeGeneralShape() instead. 
•The Nastran PBEAML evaluator assumes thin-wa lled theory. If your shape is not “thin” it 
will produce an inaccurate representation of the shape.
•To use this method, the object must first be se t to a type that uses shapes - for example a Bar 
or Beam. ( for example  p.type = FET_L_BEAM )
•If you use the “Alternate” eval_method, you should first set the Poisson’s Ratio to be used in 
the computation (for example  p.pval(70) = 0.3)
•Only End A properties can be computed with this method. Tapered beams are not supported.
Example:
Sub Main 
    Dim App As femap.model 
    Set App = feFemap() 
    Dim p As femap.Prop 
    Set p = App.feProp 

    Dim d(5) As Double 

    d(0) = 2.0 
    d(1) = 1.0 
    d(2) = 0.2 
    d(3) = 0.1 
    p.type = FET_L_BEAM 
    p.ComputeStdShape( FSHP_NAS_L, d, FSOR_RIGHT,
     FSEV_PBEAML, True, True, True ) 
    p.Put(1) 
End Sub ComputeStdShape
( shapeID, dimensions, sOrient, EvalMethod, shear_center_offset, Warping, stress_re-
covery )
ComputeStdShape2   API-2897
5.60.3.3  ComputeStdShape2
ComputeStdShape2
( bAtEndAOrOverall, shapeID, dimensions, sOrient, EvalMethod, shear_center_offset, 
Warping, stress_recovery )
Description:This method computes the properties for a standard  shape at either End A or End B of a beam.
Input:
BOOL bAtEndAOrOverallIf True, only computes End A values. If False, only computes End B 
values and sets the Tapered flag.
INT4 shapeIDID of one of the...
Standard Shapes ( 1 = Rectangular Bar, 2 = Rectangular Tube, 3 = Trapezoidal Bar, 4 = Trapezoidal Tu be, 5 = Circular Bar, 6 = Circu-
lar Tube, 7 = Hex Bar, 8 = Hex Tube, 9 = I, 10 = Channel, 11 = 
Angle, 12 = T, 13 = Z, 14 = Hat ), or ...Nastran Shapes (16=Rod, 17=Tube, 18=L, 19=I, 20 = Channel, 21=T, 22=Box, 23=Bar, 24=Cross, 25=H, 26=T1, 27=I1, 28=Chan1, 
29=Z, 30=Chan2, 31=T2, 32=Box1, 33=Hexa, 34=Hat, 35=Hat1). 
REAL8 dimensions[0..5]The dimensions that define the shap e. Values are in the same order 
that they are shown in the shape dialog box.
INT4 sOrientThe orientation direction (0=Right, 1=Up, 2=Left, 3=Down). 
Ignored for the Nastran shapes - fo r these orientation is always 
“Right” 
INT4 EvalMethodThe method used to ev aluate the section properties (0=Auto, 1=Orig-
inal, 2=Alternate, 3=Nastran PBEAML)
BOOL shear_center_offset If True, the shear center offset is computed.
BOOL Warping If True, the warping constants are computed.
BOOL stress_recoveryIf True, the stress recovery locations and cross section orientation 
that are currently defined in the ob ject are used for the computation. 
If False, default stress recovery locations and orientation are used.
Output:NoneReturn Code:FE_BAD_TYPE Property type is not L_BEAM(5) or P_BEAM(37)
 API-2898  ComputeStdShape2
Remarks/Usage:
•The General shape is not ava ilable with this method. Use ComputeGeneralShape() or Com-
puteGeneralShape2(), if End B values are needed, instead. 
•The Nastran PBEAML evaluator assumes thin-wa lled theory. If your shape is not “thin” it 
will produce an inaccurate representation of the shape.
•To use this method, the object must first be set to a type L_BEAM(5) or P_BEAM(37)
•If you use the “Alternate” EvalMethod, you should first set the Poisson’s Ratio to be used in 
the computation (for example p.pval(70) = 0.3).
Example:
Sub Main 
    Dim App As femap.model 
    Set App = feFemap()

    Dim p As femap.Prop 
    Set p = App.feProp 
    Dim d(5) As Double 

    d(0) = 1.8 
    d(1) = 0.9 
    d(2) = 0.18 
    d(3) = 0.09 

    p.type = FET_L_BEAM 
    p.ComputeStdShape2( False, FSHP_NAS_L, d, FSOR_RIGHT,
     FSEV_PBEAML, True, True, True ) 
    p.Put(1) 
End Sub ComputeStdShape2
( bAtEndAOrOverall, shapeID, dimensions, sOrient, EvalMethod, shear_center_offset, 
Warping, stress_recovery )
ComputeGeneralShape   API-2899
5.60.3.4  ComputeGeneralShape
ComputeGeneralShape
( surfaceID, vecDIR, sOrient, EvalMethod, shear_center_offset, Warping, stress_recov-
ery )
Description:This method comput es the properties for a general shape.
Input:INT4 surfaceID ID of a surface to be  used to compute the general shape
REAL8 vecDIR[0..2] A vector that de fines the original surface Y axis
INT4 shape_orientThe orientation direction (0=Right, 1=Up, 2=Left, 3=Down). 
Ignored for the Nastran shapes - for these orientation is always “Up”
INT4 eval_methodThe method used to ev aluate the section properties (0=Auto, 1=Orig-
inal, 2=Alternate)
BOOL shear_center_offset If True, the shear center offset is computed.
BOOL warping If True, the warping constants are computed.
BOOL stress_recoveryIf True, the stress recovery locations and cross section orientation 
that are currently defined in the ob ject are used for the computation. 
If False, default stress recovery locations and orientation are used.
Output:NoneReturn Code:FE_BAD_TYPE Property type not set to a type that uses a shapeRemarks/Usage:
•The Nastran PBEAML evaluator is not available for the general section
•To use this method, the object must first be se t to a type that uses shapes - for example a Bar 
or Beam. ( for example  p.type = FET_L_BEAM )
•If you use the “Alternate” eval_method, you should first set the Poisson’s Ratio to be used in 
the computation (for example  p.pval(70) = 0.3)
•Only End A properties can be computed with this method. Tapered beams are not supported.
Example:None
 API-2900  ComputeGeneralShape2
5.60.3.5  ComputeGeneralShape2
ComputeGeneralShape2
( bAtEndAOrOverall, surfaceID, vecDIR, sOrient, EvalMethod, shear_center_offset, 
Warping, stress_recovery )
Description:This method computes the proper ties for a general shape at either End A or End B of a beam.
Input:
BOOL bAtEndAOrOverallIf True, only computes End A values. If False, only computes End B 
values and sets the Tapered flag.
INT4 surfaceID ID of a surface to be  used to compute the general shape
REAL8 vecDIR[0..2] A vector that de fines the original surface Y axis
INT4 sOrientThe orientation direction (0=Right, 1=Up, 2=Left, 3=Down). 
Ignored for the Nastran shapes - for these orientation is always “Up”
INT4 EvalMethodThe method used to ev aluate the section properties (0=Auto, 1=Orig-
inal, 2=Alternate)
BOOL shear_center_offset If True, the shear center offset is computed.
BOOL Warping If True, the warping constants are computed.
BOOL stress_recoveryIf True, the stress recovery locations and cross section orientation 
that are currently defined in the ob ject are used for the computation. 
If False, default stress recovery locations and orientation are used.
Output:NoneReturn Code:FE_BAD_TYPE Property type not set to a type that uses a shapeRemarks/Usage:
•The Nastran PBEAML evaluator is not available for the general section
•To use this method, the object must first be se t to a type that uses shapes - for example a Bar 
or Beam. ( for example  p.type = FET_L_BEAM )
•If you use the “Alternate” eval_method, you should first set the Poisson’s Ratio to be used in 
the computation (for example  p.pval(70) = 0.3)
Example:None
Matl   API-2901
5.60.3.6  Matl
Matl
( void )
Description:
Input:
NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method loads the material that is referenced by the cu rrently loaded property object.
Example:This method must be used  with a Set statement to define the Material object.
Sub Main() 
Dim App As femap.model 
Set App = feFemap()

Dim mt As Matl 
Dim pr As Prop 

Dim prID as Long 
prID = 83 

Set pr = App.feProp 
pr.Get(prID) 
Set mt = pr.Matl() 
App.feAppMessage(FCM_NORMAL, "Material: " _ 
      + Str$(mt.ID)+ " "+mt.title) 
End Sub 
This sequence creates the “mt” Material object with th e material data that is referenced by property 83.
 API-2902  Layup
5.60.3.7  Layup
Layup
( void )
Description:
Input:
NoneOutput:NoneReturn Code:NoneRemarks/Usage:This method loads the layup th at is referenced by the currently loaded property object.
Example:
Thickness   API-2903
5.60.3.8  Thickness
Thickness
( dAvgOrC1, dAtC2, dAtC3, dAtC4 )
Description:This method returns the thickness of the property.Input:NoneOutput:REAL8 dAvgOrC1 The thickness or 
alternately the thickness at corner 1. 
REAL8 dAtC2 The thickness at corner 2.REAL8 dAtC3 The thickness at corner 3.REAL8 dAtC4 The thickness at corner 4.Return Code:FE_OKFE_BAD_TYPE Property type does not have thickness.FE_NOT_A V AILABLE Laminate property does not reference a Layup.Remarks/Usage:NoneExample:None
 API-2904  Area
5.60.3.9  Area
Area
( dAreaA, dAreaB )
Description:This method returns the area at EndA and EndB of the line element property.
Input:NoneOutput:REAL8 dAreaA The area at EndA.REAL8 dAreaB The area at EndB.Return Code:FE_OKFE_BAD_TYPE Property is not correct type.Remarks/Usage:NoneExample:None
Inertia   API-2905
5.60.3.10  Inertia
Inertia
( dI1A, dI2A, dI12A, dJA, dI1B, dI2B, dI12B, dJB )
Description:This function returns the Inertia properties of the line property.
Input:NoneOutput:REAL8 dI1A Area Moment of Inertia for plane 1 EndAREAL8 dI2A Area Moment of Inertia for plane 2 EndAREAL8 dI12A Cross product of inertia at EndAREAL8 dIJA Torsional constant EndAREAL8 dI1B Area Moment of Inertia for plane 1 EndBREAL8 dI2B Area Moment of Inertia for plane 2 EndBREAL8 dI12B Cross product of inertia at EndBREAL8 dIJB Torsional constant EndBReturn Code:FE_OKFE_BAD_TYPE Property is not a line type.Remarks/Usage:NoneExample:None
 API-2906  AreDuplicate
5.60.3.11  AreDuplicate
AreDuplicate
( nProp1, nProp2, ignoretitle )
Description:This function determines if two prop erties have identical values and incl udes an option to also consider 
the titles of the two properties
Input:INT4 nProp1 ID of a propertyINT4 nProp2 ID of a property to compar e to the property specified in nProp1
BOOL ignoretitleShould title be ignored when de termining if the 2 properties are 
duplicates (True=titles ignore d, False=titles considered)
Output:
None
Return Code:FE_OK Properties are duplicatesFE_FAIL Properties are not duplicates (i.e., different)FE_NOT_EXIST At least one of the specifie d properties does not exist in the model
Remarks/Usage:
Example:
None
GetLibraryOfType   API-2907
5.60.3.12  GetLibraryOfType
GetLibraryOfType
( libINDEX, libTYPE, LibFILE )
Description:This function retrieves a property of a specified type from the Property library.
Input:
INT4 libINDEXThe index of the entity stored in th e library. The first property of the 
specified type stored is libINDEX = 0, the second has libINDEX = 1, 
and so on. If you specify libINDEX = -1, a dialog box will be dis-
played showing all properties of the specified type in  the library, and 
will allow the user to select the property to load.
INT4 or enum libTYPEUse zElementType enumeration. 
 
Alternatively, enter value for Type of property:Rod=1, Bar=2, Tube=3, Link=4, Beam=5, Spring/Damper=6, DOFSpring=7, CurvedBeam=8, Gap= 9, PlotOnly=10, ShearPanel 
(Lin=11 Para=12), Membrane (L in=13 Para=14), BendingOnly 
(Lin=15 Para=16), Plate (Lin=17 Para=18), PlaneStrain (Lin=19 
Para=20), Laminate (Lin=21 Pa ra=22), Axisymme tric (Lin=23 
Para=24), Solid (Lin=25 Para=26), Mass=27, MassMatrix=28, 
Rigid=29, StiffnessMatrix=30, CurvedTube=31, PlotOnlyPlate=32, SlideLine=33, Contact=34, Axisymme tric Shell (Lin=35, Para=36), 
Para Beam=37, Weld/Fastener=3 8, Solid Laminate (Lin=39, 
Para=40)
INT4 or enum libFILEUse zLibraryFile enumerat ion. Alternatively, en ter value for Type of 
library: 0=Open Dialog Box, 1=Personal, 2=Shared, 3=Femap Stan-
dard Libraries
Output:NoneReturn Code:
FE_FAILNo Property was selected. Either the library is empty or does not 
contain any Properties of the matc hing type (e.g. Beam Properties)
FE_CANCEL User canceled the dialog box to select a Property from the library
FE_INV ALID Library file was opened but is n't a valid library of the correct type
FE_NOT_EXIST The selected index in the library was not found.
FE_NOT_A V AILABLEThe library file could not be accessed. Either the filename is speci-
fied incorrectly in FEMAP, or there is some other permission or cor-
ruption problem with the file.
 API-2908  GetLibraryOfType
FE_BAD_TYPE libTYPE value does not corre spond to an available property type
Remarks/Usage:This method can be used instead of specifying th e “Active Element Type” befo re using the GetLibrary 
method to load a property from the Property library.
Example:NoneGetLibraryOfType
( libINDEX, libTYPE, LibFILE )
GetValueArray   API-2909
5.60.3.13  GetValueArray
GetValueArray
( numValue, nPropID, nPropIndex, dValue )
Description:This function returns an array of property values using any combination of property IDs and property 
array index values.
Input:INT4 numValue The number of entries in nPropID and nPropIndexINT4 nMatlID[0..numValue-1] The IDs of the propertiesINT4 nMatlIndex[0..numValue-1] The ID(s) of the property array index value(s). 
Output:REAL8 dValue[0..numvalue-1] The array of all the property valuesReturn Code:FE_BAD_DATA One or more nPropIndex va lues are outside the allowable range
Remarks/Usage:See Section 5.60.2, "Accessing Property Properties"and Section 5.60.2.1, "Property Array Index Val-
ues"for more information about accessing property values using the property array index values.
Example:See Section 5.47.2.4, "GetValueArray"  for an example using materials.
 API-2910  PutValueArray
5.60.3.14  PutValueArray
PutValueArray
( numValue, nPropID, nPropIndex, dValue )
Description:This function updates any number of property values on any number of propertiesInput:INT4 numValue The number of entries in nPropID, nPropIndex, and dValueINT4 nPropID[0..numValue-1] The IDs of the propertiesINT4 nPropIndex[0..numValue-1] The IDs of  the property array index value(s). 
REAL8 dValue[0..numvalue-1] The property valuesOutput:NoneReturn Code:FE_NOT_EXIST One or more Properties being updated do not existFE_BAD_DATA One or more nPropIndex values are outside the allowable rangeRemarks/Usage:See Section 5.60.2, "Accessing Property Properties"and Section 5.60.2.1, "Property Array Index Val-
ues"for more information about accessing property values using the property array index values.
Example:See Section 5.47.2.5, "PutValueArray"  for an example using materials.
PutValue   API-2911
5.60.3.15  PutValue
PutValue
( nPropSetID, nPropIndex, dValue )
Description:This function updates a single proper ty value on any number of properties
Input:INT4 nPropSetID The ID of set of property IDs
INT4 nPropIndex The ID of the property array index value. REAL8 dValue The property valueOutput:NoneReturn Code:FE_BAD_DATA One or more nPropIndex va lues are outside the allowable range
Remarks/Usage:See Section 5.60.2, "Accessing Property Properties"and Section 5.60.2.1, "Property Array Index Val-
ues"for more information about accessing property values using the property array index values.
Example:None
 API-2912  CopyArray
5.60.3.16  CopyArray
CopyArray
( bUpdateReferences, bCopyToStartID, nCopy ToStartID, numID, nOrigID, pnNewID )
Description:This function copies any number of properties and allo ws you to select a starting ID for the copies or 
provide all IDs for all copies. It also allows you to choose if the “new prop erty” should replace the 
“original property” anywhere the original property  was referenced (i.e., el ement “n” would now refer-
ence copied property instead  of original property)
Input:
BOOL bUpdateReferences Flag to indicate if “copied pr operty” should replace “original 
property” anywhere the “original property” was referenced. True 
= original property references are replaced with copied property.
BOOL bCopyToStartIDFlag controls IDs of “copied pr operties”. When True, uses value 
of nCopyToStartID as the first ID of the copies. If a property ID already exists in the range where new properties will be created, that ID is skipped and the prope rty will be place d in the next 
empty ID. When False, then pnNewID becomes an input instead 
of an output and must be populated with the same number of entries as nOrigID and cannot contain any IDs of properties 
which already exist.
INT4 nCopyToStartID Starting ID for copied propertiesINT4 numID Number of original property IDs in nOrig arrayINT4 nOrigID[numID-1] The IDs of the original propertiesOutput:
INT4 pnNewID[numID-1]The IDs of the newly created (copied) properties. If bCopyTo-
StartID is False, this is treated as an input instead of an output, 
which contains the new IDs off all copied properties. It must have 
the same number of entries as nOrigID and cannot contain any 
IDs of existing properties.
Return Code:FE_NOT_A V AILABLE One or more of the properties to be created already existFE_NOT_EXIST One or more of the properties being copied do not existFE_NO_MEMORY Unable to allocate me mory to process this operation
Remarks/Usage:
Example:
HasMatl   API-2913
5.60.3.17  HasMatl 
HasMatl
(  )
Description:This function returns wh ether the property has an  associated material.
Input:None Output:NoneReturn Code:FE_OK The property has an associated material.FE_FAIL The property does not have an associated material.Remarks/Usage:
Example:
 API-2914  
5.61  Reference Objects
Reference objects correspond to th e references created for import ed Geometry, Analysis Model, 
and/or Analysis Results files. Th ey are derived from Entity objects, so in addition to the properties 
and methods described here, all of the properties and methods defined for Entity objects are also 
available for Reference objects.  For more information, see Sect ion 5.1, "Common Entity Proper-
ties and Methods". 
Use the feReference method of the FEMAP Appl ication object to create Reference objects.
5.61.1  Reference Object Properties
Reports are always stored with a SetID=1,  and the ID equal to the reference ID.
Property Description
STRING FileName[260]Full directory path and file name of Geometry, Analysis 
Model, or Analysis Results file (Maximum 260 Characters)
STRING ParentFileName[260]Full directory path and file name of “parent” Geometry, Anal-
ysis Model, or Analysis Resu lts file (Maximum 260 Charac-
ters)
INT4 ReadTypeType of file being referenced : 1=Geometry file, 2=Analysis 
Model file, 3=Analysis Results file
INT4 ReadFromProgram or translator which created the imported file:
-1=None, 0=MSC NASTRAN, 1=PC NASTRAN, 2=PAL 2, 
3=STARDYNE, 4=ANSYS, 5=ANSYS PC LINEAR, 
6=ALGOR, 7=COSMOS, 8=PATRAN, 9=FEMAP Neutral, 10=DXF, 11=IGES, 12=CSV File, 13=UAI NASTRAN, 
14=COSMIC NASTRAN, 15=STAAD, 16=ABAQUS, 
17=WECAN (EMDAC), 18=SAP, 19=CDA SPRINT, 20=CAEFEM, 21=IDEAS, 22=ME NASTRAN, 23=ADINA, 
24=GENESIS, 25=ODBC, 26=CSA NASTRAN, 27=SLA, 
28=CFDESIGN, 29=ACIS, 30=PARASOLID, 31=LS-DYNA, 32=MARC, 33=SINDA, 34=STEP, 35=NEi NASTRAN, 
36=MODEL SOLUTION, 37=NCODE (NOT USED), 
38=CATIA, 39=PRO/ENGINEER, 40=VDA, 41=SOLID EDGE, 42=TMG, 43=NX (UNIGRAPHICS), 
44=VR NASTRAN, 45=NX NASTRAN, 46=CATIA V5, 
47=SOLIDWORKS, 48=TOSCA, 49=JT
INT4 ReadTime Time the file was im ported into FEMAP (in “Unix Time”)
INT4 ReadFileTimeTime the imported file was originally created (in “Unix 
Time”)
DeleteAll   API-2915
5.61.2  Reference Object Methods
5.61.2.1  DeleteAll
DeleteAll
( void )
Description:This method deletes all References curre ntly in the model.
Input:NoneOutput:NoneReturn Code:
None
Remarks/Usage:This method does the same thing as clicking the “R emove All” button in the Reference Manager dialog 
box, which is accessed using the File, References command.
Example:None
 API-2916  
5.62  Report Objects
Report objects correspond to the report formats in your model. They are derived from Entity 
objects, so in addition to the properties and methods  described here, all of the properties and meth-
ods defined for Entity objects are al so available for Report objects.  For more information, see Sec-
tion 5.1, "Common Entity Properties and Methods". 
Use the feReport method of the FEMAP App lication object to create Report objects.
5.62.1  Report Object Properties
Reports are always stored with a SetID= 1, and the ID equal to the report ID.
5.62.2  Report Object Methods
There are no Report object-specific methods. On ly the standard entity methods are available.Property Description
STRING title Report Format title (maximum 79 characters).
INT4 DataTypeThe type of data included in this report: 7=Nodal Results, 
8=Elemental Results.
BOOL CenterHeader1
Set to True to center the associated header.
BOOL CenterHeader2
BOOL DbSpHeader1
Set to True to double-space the associated header.
BOOL DbSpHeader2
STRING Header1
The formats associated with the various lines of the report. 
Refer to the List, Output, Use Format  command for more infor-
mation about how to define each of these formats. Maximum 
size is 130 characters.STRING Header2
STRING ColumnHeaderSTRING Data1STRING Data2STRING Data3STRING Data4
   API-2917
5.63  Superelement Reference Objects
Superelement references work in conjunction wi th Nastran AnalysisMgr objects and are used to 
create references to external superelements in an  analysis set. Note that superelement references 
are ignored in an analysis set if the NasExtSEOutO n property is set to TRUE in the analysis set.
Use the feSEReference method of the FEMAP Applic ation object to create superelement reference 
objects.
5.63.1  Superelement Refe rence Object Properties
Superelement references are stored with the se tID value equal to the ID of the analysis set.
In this table, you may see some properties that list two names - one of which is an array, the other 
a Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
STRING ReferenceFile External Superelement file
INT4 ReferenceTypeType of Superelement Reference. 0 = OP2, 1=OP4, 
2=PCH
INT4 ReferenceID Superelement ID
STRING ASMFileASM file. Only used when Reference Type is set to OP2 
or OP4.
BOOL StiffnessOnly used when ReferenceType = PCH. Stiffness Matrix 
(K2GG)
BOOL MassOnly used when ReferenceType = PCH. Mass Matrix 
(M2GG)
BOOL ViscousDampingOnly used when ReferenceType = PCH. Viscous Damping 
Matrix (B4GG)
BOOL StructuralDampingOnly used when ReferenceType = PCH. Structural Damp-
ing Matrix (K42GG)
BOOL LoadsMatrixOnly used when ReferenceType = PCH. Loads Matrix 
(P2G)
enum zAnalysisAssignForm 
AssignFormForm used for ASSIGN statements
0..None = AAF_NONE
1..FORMATTED = AAF_FORMATTED2..UNFORMATTED = AAF_UNFORMATED
3..LITTLEENDIAM = AAF_LITTLEENDIAN
4..BIGENDIAN = AAF_BIGENDIAN
 API-2918  
5.64  Solid Objects
Solid objects correspond to the solids and volumes in your model. They are derived from Entity 
objects, so in addition to the properties and methods  described here, all of the properties and meth-
ods defined for Entity objects are also available for solids. For more  information, see Section 5.1, 
"Common Entity Properties and Methods".
Use the feSolid method of the FEMAP App lication object to create Solid objects.
5.64.1  Solid Object Properties
Surfaces are always stored with a SetID=1, an d the ID equal to the Solid (or V olume) ID.
Property Description
INT4 Type The solid/volume type: 6=V olume, 39=Solid.
INT4 attrPID The Property ID of the meshing attribute.For Volumes OnlyINT4 V olSurface[0..5]
orV ARIANT vV olSurfaceThe IDs of the surfaces used to define the volume.
BOOL V olReverse[0..5][0..2]
or
V ARIANT vV olReverseFlags used to indicate how the surface parametric directions are 
reversed when defining the volume. True=Reversed
INT4 V olColor The color of the volume.
INT4 V olLayer The layer associated with the volume.
INT4 V olTypeThe type/shape of the volume: 0=Brick,1=Wedge,2=Pyra-
mid,3=Tetra.
For Solids OnlyINT4 color The color of the solid.INT4 layer The layer associated with the solid.
INT4 EngineThe ID of the solid modeling en gine used with this solid: 
0=None, 1=Parasolid, 2=ACIS.
INT4 Address The solid modeling engine geometry address.STRING title The title of the solid (maximum 79 characters).
ENUM attrTopologyType of solid element:
6 = FTO_TETRA4, 7 = FTO_WEDGE6, 8 = FTO_BRICK8, 
10 = FTO_TETRA10, 11 = FTO_WEDGE15, 12 = FTO_BRICK20, 14 = FTO_PYRA MID5, 19 = FTO_PYRA-
MID13
BOOL attrMidsideOnGeometry True or Fa lse for if elements are parabolic. 
   API-2919
REAL8 attrMaxMidsideAngle The max angle for midside nodes. Property Description
 API-2920  Points
5.64.2  Solid Object Methods
5.64.2.1  Points
Points
( numPoints, pointID )
Description:This method returns a list of all of th e points used to define this solid/volume.
Input:NoneOutput:INT4 numPoints The number of points in the pointID list.INT4 pointID[0..numPoints-1] The IDs of the points on the solid.
Return Code:
FE_FAILUnable to get the point list. Possibly data is not stored or ID is not set 
correctly.
Remarks/Usage:This method will work w ith any solid/volume, but it uses the da ta stored in the database, not any 
changes made in the current object (until it is Put to the database). Th e ID field must be properly speci-
fied.
Example:None
PointsAsSet   API-2921
5.64.2.2  PointsAsSet
PointsAsSet
( nSetID, bClear )
Description:This method returns all of th e points used to define this  solid/volume in a Set object.
Input:INT4 nSetID The ID of the Set Object th at will contain the IDs of the Points
BOOL bClear If True, the Set is clea red prior to loading the Point IDs
Output:NoneReturn Code:
FE_FAILUnable to get the point list. Possibly data is not stored or ID is not set 
correctly.
Remarks/Usage:This method will work w ith any solid/volume, but it uses the da ta stored in the database, not any 
changes made in the current object (until it is Put to the database). Th e ID field must be properly speci-
fied.
Example:None
 API-2922  Curves
5.64.2.3  Curves
Curves
( nCombinedMode, numCurves, curveID )
Description:This method returns a list of all of th e curves used to defi ne this solid/volume.
Input:
INT4 nCombinedMode0=List contains the basic curves th at are on the solid, 1=Any curves 
that are on the solid that are in a Combined Curve are replaced by the 
ID of the Combined Curve, 2=List contains both the underlying and 
combined curves.
Output:INT4 numCurves The number of curves in the curveID list.INT4 curveID[0..numCurves-1] The IDs of the curves on the solid.
Return Code:
FE_FAILUnable to get the curve lis t. Possibly data is not stored or ID is not set 
correctly.
Remarks/Usage:This method will work w ith any solid/volume, but it uses the da ta stored in the database, not any 
changes made in the current object (until it is Put to the database). Th e ID field must be properly speci-
fied.
Example:None
CurvesAsSet   API-2923
5.64.2.4  CurvesAsSet
CurvesAsSet
( nCombinedMode, nSetID, bClear )
Description:This method returns all of th e curves used to define this solid/volume in a Set object.
Input:
INT4 nCombinedMode0=List contains the basic curves th at are on the solid, 1=Any curves 
that are on the solid that are in a Combined Curve are replaced by the 
ID of the Combined Curve, 2=List contains both the underlying and 
combined curves.
INT4 nSetID The ID of the Set Object th at will contain the IDs of the Curves
BOOL bClear If True, the Set is cleared prior to loading the Curve IDsOutput:NoneReturn Code:
FE_FAILUnable to get the curve lis t. Possibly data is not stored or ID is not set 
correctly.
Remarks/Usage:This method will work w ith any solid/volume, but it uses the da ta stored in the database, not any 
changes made in the current object (until it is Put to the database). Th e ID field must be properly speci-
fied.
Example:None
 API-2924  FreeCurvesAsSet
5.64.2.5  FreeCurvesAsSet
FreeCurvesAsSet
( nCombinedMode, nSetID, bClear )
Description:This method returns all of the free curves used to define this Solid in a Set object.  Free curves are 
curves on a sheet solid that are only attached  to one surface - the free edges of the sheet
Input:
INT4 nCombinedMode0=List contains the basic curves th at are on the solid, 1=Any curves 
that are on the solid that are in a Combined Curve are replaced by the 
ID of the Combined Curve, 2=List contains both the underlying and combined curves.
INT4 nSetID The ID of the Set Object th at will contain the IDs of the Curves
BOOL bClear If True, the Set is cleared prior to loading the Curve IDsOutput:NoneReturn Code:
FE_FAILUnable to get the curve lis t. Possibly data is not stored or ID is not set 
correctly.
Remarks/Usage:This method will work w ith any solid/volume, but it uses the da ta stored in the database, not any 
changes made in the current object (until it is Put to the database). Th e ID field must be properly speci-
fied.
Example:None
Surfaces   API-2925
5.64.2.6  Surfaces
Surfaces
( nCombinedMode, numSurfs, surfaceID )
Description:This method returns a list of all of the surfaces used to defi ne this solid/volume.
Input:
INT4 nCombinedMode0=List contains the basic surfaces that are on the solid, 1=Any sur-
faces that are on the solid that are in a Combined Surface are 
replaced by the ID of the Combined Surface, 2=List contains both 
the underlying and combined surfaces.
Output:INT4 numSurfs The number of su rfaces in the surfaceID list.
INT4 surfaceID[0..numSurfs-1] The IDs of the surfaces on the solid.
Return Code:
FE_FAILUnable to get the surface list. Possibly  data is not stored or ID is not 
set correctly.
Remarks/Usage:This method will work w ith any solid/volume, but it uses the da ta stored in the database, not any 
changes made in the current object (until it is Put to the database). Th e ID field must be properly speci-
fied.
Example:None
 API-2926  SurfacesAsSet
5.64.2.7  SurfacesAsSet
SurfacesAsSet
( nCombinedMode, nSetID, bClear )
Description:This method returns a list of all of the surfaces used to defi ne this solid/volume.
Input:
INT4 nCombinedMode0=List contains the basic surfaces that are on the solid, 1=Any sur-
faces that are on the solid that are in a Combined Surface are 
replaced by the ID of the Combined Surface, 2=List contains both 
the underlying and combined surfaces.
INT4 nSetID The ID of the Set Object th at will contain the IDs of the Surfaces
BOOL bClear If True, the Set is cleare d prior to loading the Surface IDs
Output:NoneReturn Code:
FE_FAILUnable to get the surface list. Possibly  data is not stored or ID is not 
set correctly.
Remarks/Usage:This method will work w ith any solid/volume, but it uses the da ta stored in the database, not any 
changes made in the current object (until it is Put to the database). Th e ID field must be properly speci-
fied.
Example:None
SheetFacesAsSet   API-2927
5.64.2.8  SheetFacesAsSet
SheetFacesAsSet
( nSetID, nInsideSolidSetID )
Description:This method returns a list of all of the surfaces which are “sheet faces” on a sheet solid or general body 
and also returns a list of all of the surfaces which are “sheet faces” inside a general body.
Input:
INT4 nSetIDThe ID of the Set Object that will contain the IDs of the Surfaces 
which are “sheet faces” of a sheet solid or general body
INT4 nInsideSolidSetIDThe ID of the Set Object that will contain the IDs of the Surfaces 
which are “sheet faces” found on the interior (inside) of a general 
body
Output:NoneReturn Code:
FE_FAILUnable to get the surface list. Possibly  data is not stored or ID is not 
set correctly.
Remarks/Usage:
Example:
None
 API-2928  WireCurvesAsSet
5.64.2.9  WireCurvesAsSet
WireCurvesAsSet
( nSetID, nInsideSolidSetID )
Description:This method returns a list of all of the curves which are “wire so lids” on a general body and also returns 
a list of all of the curves which are “wire solids” inside a general body.
Input:
INT4 nSetIDThe ID of the Set Object that will contain the IDs of the Curves 
which are “wire solids” of a general body
INT4 nInsideSolidSetIDThe ID of the Set Object that will contain the IDs of the Curves 
which are “wire solids” found inside a general body
Output:NoneReturn Code:
FE_FAILUnable to get the surface list. Possibly  data is not stored or ID is not 
set correctly.
Remarks/Usage:
Example:
None
MassProp   API-2929
5.64.2.10  MassProp
MassProp
( area, volume, cg, inertia )
Description:This function computes the mass properties of a solid.
Input:NoneOutput:REAL8 area The total surface area of the solid.REAL8 volume The volume of the solid (if closed).REAL8 cg[0..2] The location of the center of gravity of the solid.
REAL8 inertia[0..9]The 3x3 inertia matrix stored in row order [0][0], [0][1], [0][2], 
[1][0]...[2][2].
Return Code:FE_NOT_EXIST The solid that you have selected does not exist.Remarks/Usage:The cg and inertia terms are in global rectangular coordinates.
This method will only work with so lids. Furthermore, it uses the data  stored in the database, not any 
changes made in the current object (until it is Put to the database). Th e ID field must be properly speci-
fied.
Example:None
 API-2930  Export
5.64.2.11  Export
Export
( fName )
Description:This function writes the current solid to an export (SAT or X_T) file.
Input:STRING fName The name of the file to create.Output:NoneReturn Code:
FE_FAILThe current object does not contai n a solid (must be a solid, not a 
volume).
Remarks/Usage:
This method will only work with so lids. Furthermore, it uses the data  stored in the database, not any 
changes made in the current object (until it is Put to the database). Th e ID field must be properly speci-
fied.
Example:None
IsSolid   API-2931
5.64.2.12  IsSolid
IsSolid
( void )
Description:This function indicates whether a solid is a true, valid solid. 
Input:NoneOutput:NoneReturn Code:FE_FAIL The solid is not a true solid - could be a sheet or wire.
FE_INV ALIDThe current object does not contai n a valid solid - volumes are not 
supported.
Remarks/Usage:This method will only work with  solids, not volumes. Returns FE_OK if current object is a solid.
Example:None
 API-2932  IsSheet
5.64.2.13  IsSheet
IsSheet
( void )
Description:This function indicates whether a solid is a sheet solid.Input:NoneOutput:NoneReturn Code:FE_FAIL The solid is not a sheet solid  - could be a solid body or wire.
FE_INV ALIDThe current object does not contai n a valid solid - volumes are not 
supported
Remarks/Usage:This method will only work with so lids, not volumes. Returns FE_OK if current object is a sheet solid. 
A sheet solid is a collection of surfaces, possibly stitched, but which do not enclose a closed volume.
Example:None
IsWire   API-2933
5.64.2.14  IsWire
IsWire
( void )
Description:This function indicates whet her a solid is a wire solid.
Input:NoneOutput:NoneReturn Code:FE_FAIL The solid is not a wire solid  - could be a solid body or sheet.
FE_INV ALIDThe current object does not contai n a valid solid - volumes are not 
supported.
Remarks/Usage:This method will only work with so lids, not volumes. Returns FE_OK if current object is a wire solid. A 
wire solid is a collection of curves, without surfaces.
Example:None
 API-2934  IsGeneral
5.64.2.15  IsGeneral
IsGeneral
( void )
Description:This function indicates whether a solid is a general body.Input:NoneOutput:NoneReturn Code:FE_FAIL The solid is not a general body.
FE_INV ALIDThe current object does not contai n a valid solid - volumes are not 
supported.
Remarks/Usage:This method will only work with solids, not volumes. Returns FE_OK if current object is a general 
body.
Example:None
Inside   API-2935
5.64.2.16  Inside
Inside
( vXYZ, nInsideCode )
Description:This method finds if a coordinate lo cation lies “inside”, “outside”, or “o n” a point, curve, or surface of 
the specified solid.
Input:REAL8 xyz[0..2] The Global Rectangular co ordinates of the location to be tested.
Output:
INT4 nInsideCode0=Location is outside, 1=Location is inside, 2=Location is on a 
point, curve, or surface of the specified solid.
Return Code:
Remarks/Usage:
To check if locations are in multip le solids being considered as a “si ngle combined solid”, see Section 
3.6.10.38, "feSolidInsideMulti".
Example:None
 API-2936  Facets
5.64.2.17  Facets
Facets
( numFacets, xyzFacet )
Description:This method returns the triangular facets used for display of solids.
Input:NoneOutput:INT4 numFacets The number of facets returned.
REAL8 xyzFacet[0..9*numFac-
ets-1]The coordinates of the corners of th e facets. Each facet is a triangle, 
and therefore has 9 coordinates. Th ey are arranged in xyzFacet as 
[X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3....] for the first facet, followed by 
the second and so on.
Return Code:FE_FAIL Not a solid, or unable to retrieve facets.Remarks/Usage:This method will only work with solid faces that have facetting information.  The surface information 
must be in the database . Only the ID from the current object is used.
Example:None
Nodes   API-2937
5.64.2.18  Nodes
Nodes
( getBoundary, getInterior, numNodes, nodeID )
Description:This method returns the nodes th at are attached to this solid
Input:
BOOL getBoundaryIf True, the nodes attached to the so lid boundary (the surfaces, curves 
and points) are selected
BOOL getInteriorIf True, the nodes attached to the inte rior of the solid (not on the sur-
faces, curves or points) are selected
Output:INT4 numNodes The number of nodes returned.
INT4 nodeID[0..numNodes-1] The ID s of the selected nodes whic h are attached to the solid.
Return Code:FE_FAIL Unable to return nodes, possibly none exist.FE_NOT_EXIST No nodes were attached to  the solid in the manner you selected.
FE_NO_MEMORY Insufficient memory to  allocate list of attached nodes.
Remarks/Usage:NoneExample:
 API-2938  Nodes
The following codes modifies the color of all nodes on Solid 4. 
Sub Main 
 Dim App As femap.model 
 Set App = GetObject(,"femap.model") 

 Dim so As Object 
 Set so = App.feSolid 
 Dim nd As Object 
 Set nd = App.feNode 
 Dim rc As Long 
 Dim Count As Long 
 Dim Nodes As Variant 
 Dim i As Long 
 
 solidID = 4 
 rc = so.Get (solidID) 
 rc = so.Nodes(True, True, Count, Nodes) 
 For i = 0 To Count - 1 
    nd.Get (Nodes(i)) 
    nd.Color = 4 
    nd.Put (0) 
 Next i 

App.feViewRegenerate(0)
End SubNodes
( getBoundary, getInterior, numNodes, nodeID )
NodesAsSet   API-2939
5.64.2.19  NodesAsSet
NodesAsSet
( getBoundary, getInterior, nSetID, bClear )
Description:This method returns the nodes that ar e attached to this solid in a Set
Input:
BOOL getBoundaryIf True, the nodes attached to the so lid boundary (the surfaces, curves 
and points) are selected
BOOL getInteriorIf True, the nodes attached to the inte rior of the solid (not on the sur-
faces, curves or points) are selected
INT4 nSetID The ID of the Set Object th at will contain the IDs of the Nodes
BOOL bClear If True, the Set is cleared prior to loading the Node IDs
Output:
NoneReturn Code:FE_FAIL Unable to return nodes, possibly none exist.FE_NOT_EXIST No nodes were attached to  the solid in the manner you selected.
FE_NO_MEMORY Insufficient memory to  allocate list of attached nodes.
Remarks/Usage:NoneExample:None
 API-2940  Elements
5.64.2.20  Elements
Elements
( numElems, elemID )
Description:This method returns the elements that are attached to this solid
Input:NoneOutput:INT4 numElems The number of elements returned.
INT4 elemID[0..numElems-1] The IDs of the select ed elements which are attached to the solid.
Return Code:FE_FAIL Unable to return elem ents, possibly none exist.
FE_NOT_EXIST No elements were attached to the solid in the manner you selected.
FE_NO_MEMORY Insufficient memory to allocate list of attached elements.
Remarks/Usage:Only elements that have all of th eir nodes in the solid will be return ed by this method. Elements that 
simply touch the solid at one edge or one node will not be returned.
Example:None
ElementsAsSet   API-2941
5.64.2.21  ElementsAsSet
ElementsAsSet
( nSetID, bClear )
Description:This method returns the elements that are attached to this solid in a Set
Input:INT4 nSetID The ID of the Set Object th at will contain the IDs of the Elements
BOOL bClear If True, the Set is cleare d prior to loading the Element IDs
Output:NoneReturn Code:FE_FAIL Unable to return elem ents, possibly none exist.
FE_NOT_EXIST No elements were attached to the solid in the manner you selected.
FE_NO_MEMORY Insufficient memory to allocate list of attached elements.
Remarks/Usage:Only elements that have all of th eir nodes in the solid will be return ed by this method. Elements that 
simply touch the solid at one edge or one node will not be returned.
Example:None
 API-2942  BoundingBox
5.64.2.22  BoundingBox
BoundingBox
( Box )
Description:This method returns the coordinates of a rectangular box the encloses this geometry.
Input:NoneOutput:
REAL8 Box[0..5]The dimensions of the bounding box, in Global Rectangular coordi-
nates.
Box[0] - Minimum X,      Box[3] - Maximum X
Box[1] - Minimum Y ,      Box[4] - Maximum Y
Box[2] - Minimum Z,      Box[5] - Maximum Z
Return Code:FE_FAIL Unable to find a bounding box.
FE_INV ALIDObject does not contain valid geometry. This method only works for 
Parasolid-based geometry.
Remarks/Usage:This method always re trieves a box that is aligned with Global  Rectangular coordinates, not an aligned 
box of minimum volume.
Example:None
InitializeAttributes   API-2943
5.64.2.23  InitializeAttributes
InitializeAttributes
( nPropID )
Description:This method initializes a m esh attribute of a solid to a specific property. 
Input:INT4 nPropID The ID of the proper ty to initialize mesh attribute to.
Output:NoneReturn Code:FE_FAIL Unable to initialize. Remarks/Usage:
Example:
None
 API-2944  Volume
5.64.2.24  Volume
Volume
( volume)
Description:This method returns the volume of the solid. Input:NoneOutput:REAL8 volume The volume of the solid.Return Code:NoneRemarks/Usage:
Example:
None
IsFacet   API-2945
5.64.2.25  IsFacet
IsFacet
( void )
Description:This method indicates if the solid has any facet-based surfaces
Input:NoneOutput:NoneReturn Code:FE_OK Solid contains one or more facet-based surfacesFE_FAIL Solid is a “classic” Parasolid body containing no facet-based surfaces
FE_INV ALIDThe current object does not contain a valid Parasolid Body - volumes 
are not supported.
Remarks/Usage:This method will only work with  Parasolid solids, not volumes.
Example:
 API-2946  IsFacet
The following code determines if any surfaces on a solid are facet-based:
Sub Main    Dim App as femap.model
    Set App = feFemap()
    Dim Sol As femap.Solid
    Set Sol = App.feSolid
    Dim Su As femap.Surface
    Set Su = App.feSurface
    Dim suSet As femap.Set
    Set suSet = App.feSet
    Dim showSet As femap.Set
    Set showSet = App.feSet
    'Does solid have any facet surfaces
    If Sol.SelectID("Pick Solid to Check") = FE_OK Then
        If Sol.IsFacet() = FE_OK Then 
            'If the solid is all facet surfaces, put them in showSet            If Sol.IsAllFacet() = FE_OK Then 
                showSet.AddRule( Sol.ID, FGD_SURFACE_ONSOLID
            'If not, walk surfaces of solid and see which ones are            Else 
                suSet.AddRule( Sol.ID, FGD_SURFACE_ONSOLID)
                While Su.NextInSet( suSet.ID ) = FE_OK                    If Su.IsFacet() Then
                        showSet.Add( Su.ID )
                    End If                                                      Wend
            End If
        End If    End If
    'if there are any faceted surfaces, show them
    If Not showSet.IsEmpty() Then
        showSet.Show(FT_SURFACE)
    End IfEnd SubIsFacet
( void )
IsAllFacet   API-2947
5.64.2.26  IsAllFacet
IsAllFacet
( void )
Description:This method indicates if all the surface s of the solid are facet-based surfaces
Input:NoneOutput:NoneReturn Code:FE_OK All surfaces of this solid are facet-basedFE_FAIL Not all of the surface of the solid are facet-based
FE_INV ALIDThe current object does not contain a valid Parasolid Body - volumes 
are not supported.
Remarks/Usage:This method will only work with  Parasolid solids, not volumes.
Example:None
 API-2948  IsFacet
5.64.2.27  IsFacet
IsFacet
( void )
Description:This method indicates if the solid has any facet-based surfaces
Input:NoneOutput:NoneReturn Code:FE_OK Solid contains one or more facet-based surfacesFE_FAIL Solid is a “classic” Parasolid body containing no facet-based surfaces
FE_INV ALIDThe current object does not contain a valid Parasolid Body - volumes 
are not supported.
Remarks/Usage:This method will only work with  Parasolid solids, not volumes.
Example:
   API-2949
5.65  Surface Objects
Surface objects correspond to the surfaces (including  boundary surfaces) in your model. They are 
derived from Entity objects, so in addition to the properties and me thods described here, all of the 
properties and methods defined for Entity objects are also availabl e for Surface objects. For more 
information, see Section 5.1, "Com mon Entity Properties and Methods"..
Use the feSurface method of the FEMAP App lication object to create Surface objects.
5.65.1  Surface Ob ject Properties
Surfaces are always stored with a SetID= 1, and the ID equal to the Surface ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
INT4 layer The ID of the layer associated with the surface.INT4 color The surface color.
INT4 typeThe surface type: 0=Bilinear,  1=Ruled, 2=Revolution, 
3=Coons, 4=Bezier, 5=Solid, 6=Not Used, 7=Boundary.
INT4 StdCurve[0..5]
or
V ARIANT vStdCurveThe IDs of the curves referenced  by Bilinear, Ruled, Revolu-
tion, Coons and Bezier surfaces.
BOOL StdCurveReverse[0..5]
or
V ARIANT vStdCurveReverseIf True, the surface uses the corresponding StdCurve in a 
reversed orientation.
INT4 Divisions[0..1]
orV ARIANT vDivisionsThe number of divisions in the u and v parametric directions for 
display purposes.
INT4 EngineThe ID of the solid modeling en gine used with this surface: 
0=None, 1=Parasolid.
INT4 Address The solid modeling engine geometry addressBOOL Suppressed True if this surface  is suppressed (w ill not be meshed).
INT4 InternalToBoundaryIf this surface is used to define  a Combined Surface, then this 
property contains the ID of th e Combined Surface, otherwise it 
is 0.
REAL8 ScaleFactor The Solid Geometry Scale FactorMesh AttributesINT4 attrPID The Property ID of the meshing attribute.
INT4 attrTopologyThe shape of elements that w ill be meshed onto the surface 
(2=Tri3, 3=Tri6, 4=Quad4, 5=Quad8)
 API-2950  
BOOL attrMaxQuadsIf True, the Max Quads option w ill be turned on, which will 
attempt to minimize the amount  of triangles in a mesh.
INT4 attrMesherThe mesher that will be used (0=Auto,1=Subdivision, 2=Fast 
Tri, 3=3D Tri
INT4 attrMappedLevel Mapped Meshing Switch (0=Off,1=On)
BOOL attrMapSubdivisionsIf True and using subdivision mesher, then additional mapped 
meshing may be done at the subdivision level
BOOL attrMapEqualOnlyIf True, only surfaces with equal numbers of elements on oppo-
site sides will be mapped mesh
BOOL attrMapAltTriIf True, and Mapped Tri meshing, the triangle cuts will alter-
nate directions
BOOL attrMapRightBiasIf True and Mapped Tri meshing,  the first cut will be “right” 
oriented, otherwise “left”
BOOL attrMapSplitQuadsIf True and Mapped Tri meshing,  the map will be done with 
quads, then the quads will be split along the diagonal that 
makes the best triangles.
REAL8 attrMapAngleDeviationIf Mapped Meshing, this value is  the max angle deviation from 
90 deg to determine a co rner of the mapped mesh
REAL8 attrMapMinCornerAngleIf Mapped Meshing, prevents mapped meshing if a mapped 
corner angle is less than this value.
BOOL attrMidsideGeomIf True, Midside nodes will be mo ved to (or toward) the geome-
try. If False, Midside nodes are at the midpoint of the element 
edge. This has no effe ct on planar surfaces.
REAL8 attrMidsideAngleIf Nonzero, then this limits the angle that an edge can be dis-
torted as the midside node is  moved toward the geometry.
BOOL attrPostMeshCleanupIf True, for the v10 meshers, after meshing has completed the 
mesh is scanned for certain patte rns of elements that can be 
adjusted to improve the mesh.
INT4 QuadMeshLayers The number of quad mesh layers to pave around holes
REAL8 attrQuadCutAngleQuad elements with angles that  are further from 90 deg than 
this angle are split into triangles.
INT4 attrMinBetweenFor the Subdivision mesher, ensure s that there will be at least 
this number of elements along any cut between edges. Nor-
mally should be set to 1.
REAL8 attrMaxAspectFor the Subdivision mesher, th e divisions are adjusted to 
attempt to get a max element asp ect ratio less than this value.Property Description
   API-2951
INT4 attrQuickCutNodesFor the Subdivision mesher, surfa ces with more than this num-
ber of elements along its edges are subdivided without looking 
at every possibility. Not used with v10 Mesher.
BOOL attrVertexLoopsAsHardPoints If True, Use Intern al Points as Mesh Lo cations will be enabled.
BOOL attrSmoothLaplacian If True, use Laplacian smoothing. If False, Centroidal.INT4 attrSmoothIter Number of Smoothing Iterations
REAL8 attrSmoothToleranceTolerance value for smoothing. Sm oothing will stop prior to the 
specified number of iterations if no nodes are moving further than this value.
BOOL attrConnectEdgeNodesIf True, automatically uses nodes  on curves when meshing this 
surface (automatically connects to adjoining meshes)
REAL8 attrConnectEdgeNodeTolTolerance between nodal locations  and mesh locations on edge 
for finding existing edge nodes to connect.
INT4 attrOffsetFromLocation in element to offset from (0=Centerline, 1=Top Face, 
2=Bottom Face)
REAL8 attrOffsetThe meshing attribute defining th e offset to be applied to ele-
ments.
BOOL attrInitializedIf True, the attributes have been  initialized - probably because 
the surface has been meshed, or attributes have been defined.
Mesh Approach
INT4 approachThe meshing approach for th e surface: 0=Not Specified, 
1=Free-Parametric, 2=Free-Planar, 3=Mapped-Four Corner, 4=Mapped-Three Corner, 5=Mapped-Three Corner Fan,  
6=Link to Surface,  7=Fast Tri- Parametric, 8=Fast Tri-Planar.
INT4 approachData[0..3]
or
V ARIANT vapproachDataThe data for various approaches. For the mapped approaches, 
these are the point IDs defining the “corners” of the mapped mesh. For the Link to Surface approach, approachData[0] is the 
ID of the surface that this surface is linked to.
Mesh SizingREAL8 MeshSizeInterior Growth factor on interior of surface.REAL8 MeshSizeChord Factor fo r curvature-based meshing.
For Mesh Points on SurfaceINT4 MeshPoint[0..149]
orV ARIANT vMeshPointThe IDs of points used as mesh points on the surface.
For Boundary Surfaces onlyProperty Description
 API-2952  
INT4 BoundaryCurve[0..749]
or
V ARIANT vBoundaryCurveThe IDs of the curves used to define the boundary.
INT4 BoundaryFlag[0..749]
or
V ARIANT vBoundaryFlagAn identifier corresponding to ho w each curve is used in the 
boundary. This flag should be compared against the following 
values to see if the corr esponding conditions exist. 
0x00 - curve is used in  a forward orientation
0x01 - curve is used in a reverse orientation0x10 - curve is used as the start of a loop
0x20 - curve is used as the end of a loop
0x80 - curve is used in a loop that  is part of a “hole” in the sur-
face
The outer loop of the boundary always comes first, starts with a 
curve marked with 0x10 (start of  loop), and ends with a curve 
marked as 0x20 (end of loop). This is followed by any addi-
tional loops which define the ho les in the surface. There can 
only be one outer loop.
INT4 BoundaryModeThe mapping of the boundary for meshing: 0=Planar/Interpo-
late Curves, 3=Map to Surface.
INT4 BoundaryOnSurface The ID  for the surface to use for mapping if BoundaryMode=3.Property Description
Inside   API-2953
5.65.2  Surface Object Methods
5.65.2.1  Inside
Inside
( u, v )
Description:This method finds if a pa rametric location lies insi de the specified surface.
Input:REAL8 u
The parametric coordinates of  the location to be tested.
REAL8 v
Output:None
Return Code:
FE_FAIL The location lies outside of  the surface (or inside a hole).
Remarks/Usage:This method will work for any type of surface exce pt combined boun dary surfaces. Us e InsideXYZ for 
those surfaces.
Example:None
 API-2954  InsideXYZ
5.65.2.2  InsideXYZ
InsideXYZ
( xyz )
Description:This method finds if  a location lies inside  the specified surface.
Input:REAL8 xyz[0..2] The Global Rectangular co ordinates of the location to be tested. 
Output:NoneReturn Code:FE_FAIL The location lies outside of  the surface (or inside a hole).
Remarks/Usage:This method will work for an y type of surface including combined boundary surfaces.
Example:None
ParamToXYZ   API-2955
5.65.2.3  ParamToXYZ
ParamToXYZ
( u, v, xyz )
Description:This method converts a pa rametric location (u,v) to a coordinate location (xyz).
Input:REAL8 u
The parametric coordinates of  the location being specified.
REAL8 v
Output:REAL8 xyz[0..2] The coordinates of the location in global rectangular.
Return Code:FE_FAIL Unable to compute the location.Remarks/Usage:This method will work fo r any type of surface.
Example:None
 API-2956  XYZToParam
5.65.2.4  XYZToParam
XYZToParam
( xyz, u, v )
Description:This method converts a coordinate loca tion (xyz) to a parame tric location (u,v).
Input:REAL8 xyz[0..2] The coordinates of the location in global rectangular.
Output:REAL8 u
The parametric coordi nates of the location.
REAL8 v
Return Code:FE_FAIL Unable to compute the location.Remarks/Usage:This method will work fo r any type of surface.
Example:None
CG   API-2957
5.65.2.5  CG
CG
( xyz )
Description:This method finds the cente r of gravity of a surface.
Input:NoneOutput:REAL8 xyz[0..2] The coordinates of the center of gravity, in global rectangular.Return Code:
FE_FAILUnable to compute the location. Po ssibly wrong surface type, ID is 
not set, or data is not stored in database.
Remarks/Usage:This method will only work for so lid surfaces. Furthermore, the surface must be Put to the model. The 
data in the current object is not used.
Example:None
 API-2958  Area
5.65.2.6  Area
Area
( area )
Description:This method finds the area of a surface.Input:NoneOutput:REAL8 area The area of the surface.Return Code:
FE_FAILUnable to compute the location. Po ssibly wrong surface type, ID is 
not set, or data is not stored in database.
Remarks/Usage:This method will only work for so lid surfaces. Furthermore, the surface must be Put to the model. The 
data in the current object is not used.
Example:None
ApproximateArea   API-2959
5.65.2.7  ApproximateArea
ApproximateArea
( area )
Description:This method is similar to Area( ), however the area is not comput ed as precisely to improve perfor-
mance
Input:NoneOutput:REAL8 area The area of the surface.Return Code:
FE_FAILUnable to compute the location. Po ssibly wrong surface type, ID is 
not set, or data is not stored in database.
FE_BAD_TYPESurface type is not supported. This  method only works with Solid 
and Combined Surfaces
FE_NOT_EXIST The surface does not existRemarks/Usage:This method will only work for so lid surfaces. Furthermore, the surface must be Put to the model. The 
data in the current object is not used.
Example:None
 API-2960  Tangents
5.65.2.8  Tangents
Tangents
( u, v, uTangent, vTangent )
Description:This method finds unit vectors in the directions of  the tangents to the surface at a selected location.
Input:REAL8 u
The parametric coordinates of  the location being specified.
REAL8 v
Output:
REAL8 uTangent[0..2]The tangent vector in the direction of the u parametric space of the 
surface.
REAL8 vTangent[0..2]The tangent vector in the direction of the v parametric space of the 
surface.
Return Code:
FE_FAILUnable to compute the location. Po ssibly wrong surface type, ID is 
not set, or data is not stored in database.
Remarks/Usage:This method will wo rk for any surface.
Example:None
Normal   API-2961
5.65.2.9  Normal
Normal
( u, v, normal )
Description:This method finds a unit vector in the direc tion of the surface normal at a selected location.
Input:REAL8 u
The parametric coordinates of  the location being specified.
REAL8 v
Output:REAL8 normal[0..2] The vector in the direction of the surface normal.Return Code:
FE_FAILUnable to compute the normal. Possibly wrong surface type, ID is 
not set, or data is not stored in database.
Remarks/Usage:This method will wo rk for any surface.
Example: None
 API-2962  NormalAtXYZ
5.65.2.10  NormalAtXYZ
NormalAtXYZ
( nLocations, xyz, normal )
Description:This method finds a unit vector in the direction of the surface no rmal at one or more locations.
Input:INT4 nLocations Number of locations specified in the xyz array
REAL8 xyz[0..3*nLocations-1]The Global Rectangular coordinates of the locations where you want 
normals computed. This array is st ored [x0,y0,z0,x1,y1,z1...], and 
must contain 3*nLocations entries.
Output:
REAL8 normal[0..3*nLoca-
tions-1]The vectors in the direction of the surface normals. Each set of 3 
entries in this array correspond to  the matching entries in the xyz 
array, and are the x,y and z vector components of the normal.
Return Code:
FE_FAILUnable to compute the normals. Possibly wrong surface type, ID is 
not set, or data is not stored in database.
Remarks/Usage:This method will wo rk for any surface.
Example: None
ProjectOnto   API-2963
5.65.2.11  ProjectOnto
ProjectOnto
( initial, tolerance, projection )
Description:This method projects a lo cation to the closest locatio n that lies on a surface.
Input:REAL8 initial[0..2] The initial coordinate s to be projected onto the surface.
REAL8 toleranceThe tolerance within wh ich you will consider the projected location 
to be on the surface. The method stop s when it finds a point that is at 
least this close. This tolerance is only used for certa in standard sur-
face types.
Output:REAL8 projection[0..2] The projected location, on the surface.Return Code:
FE_FAILUnable to compute the location. Po ssibly wrong surface type, ID is 
not set, or data is not stored in database.
Remarks/Usage:This method will work for any su rface, but all boundary surfaces must  be Put to the database before 
using this method.
Example:None
 API-2964  ProjectToClosest
5.65.2.12  ProjectToClosest
ProjectToClosest
( vOrig, vProj )
Description:This method projects a location to the closest lo cation that lies on a surface (i.e., FEMAP determines 
vector used for projection)
Input:REAL8 vOrig [0..2] The initial coordinate s to be projected onto the surface.
Output:REAL8 vProj [0..2] The projected location, on the surface.Return Code:
FE_FAILUnable to compute the location. Po ssibly wrong surface type, ID is 
not set, or data is not stored in database.
Remarks/Usage:Does the same thing as the ProjectOnto method, but always uses a Tolerance value of 1.0E-8
Example:None
ProjectAlongVector   API-2965
5.65.2.13   ProjectAlongVector
ProjectAlongVector
( bBothDirections, vAlong, vOrig, vProj )
Description:This method projects a lo cation along a specified vector to a location that lies on a surface (i.e., user 
supplies vector used for projection)
Input:
BOOL bBothDirectionsWhen True, the location will be proj ected in both directions along 
the supplied vector to de termine the location to use (i.e., if a location 
was inside a cylindrical surface, it co uld actually find 2 locations on 
the surface, and the one closest to th e original location will be used). 
When False, the location will only be projected in the direction of the 
supplied vector.
REAL8 vAlong [0..2] The vector supplied by the user to project along.REAL8 vOrig [0..2] The initial coordinate s to be projected onto the surface.
Output:REAL8 vProj [0..2] The projected location, on the surface.Return Code:
FE_FAILUnable to compute the location. Po ssibly wrong surface type, ID is 
not set, or data is not stored in database. Additionally , if the supplied 
vector never intersects the surface, no projected location can be 
determined.
Remarks/Usage:NoneExample:None
 API-2966  Solid
5.65.2.14  Solid
Solid
( nSolidID )
Description:This method returns the ID of the So lid that contains the current Surface
Input:NoneOutput:INT4 nSolidID The ID of the Solid that references the current Surface
Return Code:FE_FAIL Unable to get the solidRemarks/Usage:This method will only work with  Solid surfaces and Combined Surfa ces that are defined on a Solid.
Example:None
BoundarySurfaces   API-2967
5.65.2.15  BoundarySurfaces
 
BoundarySurfaces
( numSurf, surfID )
Description:For a combined surface, this method  returns a list of all of the surfaces used to define this surface.
Input:NoneOutput:INT4 numSurf The number of su rfaces in the “surfID” list.
INT4 surfID[0..numSurf-1] The IDs of the su rfaces used to define the Combined Surface
Return Code:
FE_FAILUnable to get the surface list. Possibly data is not stored or this is not 
a Combined Surface
FE_NOT_A V AILABLE No surfaces available for this surface.Remarks/Usage:This method will only work  with Combined Surfaces.
Example:None
 API-2968  BoundarySurfacesAsSet
5.65.2.16  BoundarySurfacesAsSet
BoundarySurfacesAsSet
( nSetID, bClear )
Description:For a combined surface, this method returns a list of all of the surfaces used to define this surface in a 
Set object
Input:INT4 nSetID The ID of the Set Object th at will contain the IDs of the Surfaces
BOOL bClear If True, the Set is cleare d prior to loading the Surface IDs
Output:NoneReturn Code:
FE_FAILUnable to get the surface list. Possibly data is not stored or this is not 
a Combined Surface
FE_NOT_A V AILABLE No surfaces available for this surface.Remarks/Usage:This method will only work  with Combined Surfaces.
Example:None
AdjacentSurfaces   API-2969
5.65.2.17  AdjacentSurfaces
AdjacentSurfaces
( nCombinedMode, numSurf, surfID )
Description:This method returns a list of all of the surfaces that are adjacent to the current surface.
Input:
INT4 nCombinedMode0=List contains the basic surfaces that are adjacent (FCC_OFF), 
1=Any surfaces that are adjacent th at are in a Combined Surface are 
replaced by the ID of the Comb ined Surface (FCC_ON), 2=List con-
tains both the underlying and combined surfaces (FCC_BOTH).
Output:INT4 numSurf The number of su rfaces in the “surfID” list.
INT4 surfID[0..numSurf-1] The IDs of the adjacent surfaces 
Return Code:FE_FAIL Unable to find adjacent surfacesRemarks/Usage:This method will only work with Solid Surfaces or Combin ed Surfaces on Solids. It finds all of the 
curves on the current surface and th en finds and returns all of the othe r surfaces that use one or more of 
those curves.
Example:None
 API-2970  AdjacentSurfacesAsSet
5.65.2.18  AdjacentSurfacesAsSet
AdjacentSurfacesAsSet
( nCombinedMode, nSetID, bClear )
Description:This method returns a list of all of the surfaces that are adjacent to the current surface in a Set object.
Input:
INT4 nCombinedMode0=List contains the basic surfaces that are adjacent (FCC_OFF), 
1=Any surfaces that are adjacent th at are in a Combined Surface are 
replaced by the ID of the Comb ined Surface (FCC_ON), 2=List con-
tains both the underlying and combined surfaces (FCC_BOTH).
INT4 nSetID The ID of the Set Object th at will contain the IDs of the Surfaces
BOOL bClear If True, the Set is cleare d prior to loading the Surface IDs
Output:NoneReturn Code:FE_FAIL Unable to find adjacent surfacesRemarks/Usage:This method will only work with Solid Surfaces or Combin ed Surfaces on Solids. It finds all of the 
curves on the current surface and th en finds and returns all of the othe r surfaces that use one or more of 
those curves.
Example:None
Curves   API-2971
5.65.2.19  Curves
Curves
( nCombinedMode, numCurves, curveID )
Description:This method returns a list of all of the curves used to define this surface.
Input:
INT4 nCombinedMode0=List contains the basic curves th at are on the surface (FCC_OFF), 
1=Any curves that are on the surf ace that are in a Combined Curve 
are replaced by the ID of the Combined Curve (FCC_ON), 2=List 
contains both the underlying and combined curves (FCC_BOTH).
Output:INT4 numCurves The number of curves in the “curveID” list.INT4 curveID[0..numCurves-1] The IDs of the curves on the surface.
Return Code:
FE_FAILUnable to get the curve lis t. Possibly data is not stored or ID is not set 
correctly.
Remarks/Usage:This method will work with  any surface, but it uses the data stored in the database, not any changes 
made in the current object (until it is Put to the database). The ID field must be properly specified.
Example:None
 API-2972  CurveLoops
5.65.2.20  CurveLoops
CurveLoops
( nCombinedMode, numLoops, numCurves, curveID )
Description:This method returns a list of all of the curves used to define this surface. Unlike Curv es() this method 
returns the curves in their order around each surface loop.
Input:
INT4 nCombinedMode0=List contains the basic curves th at are on the surface (FCC_OFF), 
1=Any curves that are on the surf ace that are in a Combined Curve 
are replaced by the ID of the Combined Curve (FCC_ON), 2=List contains both the underlying and combined curves (FCC_BOTH).
Output:
INT4 numLoopsThe number of loops on the surface and in the “curveID” list. A loop 
is a connected set of curves. Any su rface with no interior holes or 
other features only has one loop. Each hole in the surface adds another loop.
INT4 numCurvesThe number of entries in the “curveID” list.  This is not the number 
of curves since there is an ex tra 0 at the end of each loop.
INT4 curveID[0..numCurves-1]The IDs of the curves on the surface. Each loop ends with a 0. If the 
ID is negative, this indicates that  the curve is used in the reverse 
direction.
Return Code:
FE_FAILUnable to get the curve lis t. Possibly data is not stored or ID is not set 
correctly.
Remarks/Usage:The ID list in curveID list looks like 
  outer c1, outer c2...outer cn, 0, inner1 c1...inner1 cn, 0, ... in nerN c1...innerN cn, 0
The 0 entries define the end of a loop. IDs are ne gative if a curve is used in reverse direction.
This method will work with  any surface, but it uses the data stored in the database, not any changes 
made in the current object (until it is Put to the database). The ID field must be properly specified.
Example:
CurveLoops   API-2973
Sub Main
    Dim App As femap.model
    Set App = feFemap()
    Dim feSurf As femap.Surface
    Set feSurf = App.feSurface
    Dim nLoops As Long    Dim nCurves As Long
    Dim curveIDs As Variant
    Dim bFirstLoop As Boolean    bFirstLoop = True
    Dim j As Long
    Dim cuSet As femap.Set    Set cuSet = App.feSet
    While feSurf.Next = femap.FE_OK
        cuSet.Clear()        bFirstLoop = True
    If feSurf.CurveLoops(FCC_ON, nLoops, nCurves, curveIDs ) = femap.FE_OK Then
            For j=0 To nCurves -1                If curveIDs(j) = 0 Then 'end of a loop
                    If bFirstLoop Then
                        Msg = "Outer Loop"                        App.feAppMessage( FCM_NORMAL, Msg )
                        bFirstLoop = False
                    Else                        Msg = "Inner Loop"
                        App.feAppMessage( FCM_NORMAL, Msg )
                    End If                    cuSet.Show( FT_CURVE )
                    cuSet.Clear()
                Else                    If curveIDs(j) > 0 Then
                        cuSet.Add( curveIDs(j) )
                    Else                        cuSet.Add( -curveIDs(j) )
                    End If
                End If            Next            
        End If
    Wend
End SubCurveLoops
( nCombinedMode, numLoops, numCurves, curveID )
 API-2974  CurvesAsSet
5.65.2.21  CurvesAsSet
CurvesAsSet
( nCombinedMode, nSetID, bClear )
Description:This method returns a list of all of the curves used to define  this surface in a Set object.
Input:
INT4 nCombinedMode0=List contains the basic curves th at are on the surface (FCC_OFF), 
1=Any curves that are on the surf ace that are in a Combined Curve 
are replaced by the ID of the Combined Curve (FCC_ON), 2=List 
contains both the underlying and combined curves (FCC_BOTH).
INT4 nSetID The ID of the Set Object th at will contain the IDs of the Curves
BOOL bClear If True, the Set is cleared prior to loading the Curve IDsOutput:NoneReturn Code:
FE_FAILUnable to get the curve lis t. Possibly data is not stored or ID is not set 
correctly.
Remarks/Usage:This method will work with  any surface, but it uses the data stored in the database, not any changes 
made in the current object (until it is Put to the database). The ID field must be properly specified.
Example:None
Points   API-2975
5.65.2.22  Points
Points
( nCombinedMode, numPoints, pointID )
Description:This method returns a list of all of  the points referenced by the surface.
Input:
INT4 nCombinedModeWhen finding the list of points, this method fi rst finds all curves on 
the surface, then poin ts on those curves. 
0=Uses the basic curves that ar e on the surface (FCC_OFF), 1=Any 
curves that are on the surface that  are in a Combined Curve are 
replaced by the ID of the Comb ined Curve (FCC_ON), 2=Uses both 
the underlying and combined curves (FCC_BOTH).
Output:INT4 numPoints The number of points in the pointID list.INT4 pointID[0..numPoints-1] The IDs of the points on the surface.
Return Code:
FE_FAILUnable to get the point list. Possibly data is not stored or ID is not set 
correctly.
Remarks/Usage:This method will work with  any surface, but it uses the data stored in the database, not any changes 
made in the current object (until it is Put to the database). The ID field must be properly specified.
Example:None
 API-2976  PointsAsSet
5.65.2.23  PointsAsSet
PointsAsSet
( nCombinedMode, nSetID, bClear )
Description:This method returns a list of all of the poi nts referenced by the surface in a Set object.
Input:
INT4 nCombinedModeWhen finding the list of points, this method fi rst finds all curves on 
the surface, then poin ts on those curves. 
0=Uses the basic curves that ar e on the surface (FCC_OFF), 1=Any 
curves that are on the surface that  are in a Combined Curve are 
replaced by the ID of the Comb ined Curve (FCC_ON), 2=Uses both 
the underlying and combined curves (FCC_BOTH).
INT4 nSetID The ID of the Set Object th at will contain the IDs of the Points
BOOL bClear If True, the Set is clea red prior to loading the Point IDs
Output:NoneReturn Code:
FE_FAILUnable to get the point list. Possibly data is not stored or ID is not set 
correctly.
Remarks/Usage:This method will work with  any surface, but it uses the data stored in the database, not any changes 
made in the current object (until it is Put to the database). The ID field must be properly specified.
Example:None
EndPoints   API-2977
5.65.2.24  EndPoints
EndPoints
( numPoints, pointID )
Description:This method returns a list of all of the points referenced by the surface at the ends of the defining curves.
Input:NoneOutput:INT4 numPoints The number of points in the pointID list.INT4 pointID[0..numPoints-1] The IDs of the points on the surface.
Return Code:
FE_FAILUnable to get the point list. Possibly data is not stored or ID is not set 
correctly.
Remarks/Usage:This method will work with  any surface, but it uses the data stored in the database, not any changes 
made in the current object (until it is Put to the database). The ID field must be properly specified.
This is just like the Points method, except that function will return other points like the points at the cen-
ter of an arc used to define the surface. This method will only return one pair of points (the endpoints) 
for each curve.
Example:None
 API-2978  EndPointsAsSet
5.65.2.25  EndPointsAsSet
EndPointsAsSet
( nSetID, bClear )
Description:This method returns a list of all of the points referenced by the surface at the ends of the defining curves 
in a Set object
Input:INT4 nSetID The ID of the Set Object th at will contain the IDs of the Points
BOOL bClear If True, the Set is clea red prior to loading the Point IDs
Output:NoneReturn Code:
FE_FAILUnable to get the point list. Possibly data is not stored or ID is not set 
correctly.
Remarks/Usage:This method will work with  any surface, but it uses the data stored in the database, not any changes 
made in the current object (until it is Put to the database). The ID field must be properly specified.
This is just like the Points method, except that function will return other points like the points at the cen-
ter of an arc used to define the surface. This method will only return one pair of points (the endpoints) 
for each curve.
Example:None
Planar   API-2979
5.65.2.26  Planar
Planar
( base, normal )
Description:This method returns inform ation about planar surfaces.
Input:NoneOutput:REAL8 base[0..2] The coordinates of a point on the surface REAL8 normal[0..2] The vector that is normal to the planeReturn Code:FE_FAIL Surface is not planar, or could not evaluate the surface.Remarks/Usage:This method will only work with  solid surfaces, not surfaces created  with the FEMAP Standard geome-
try engine. It uses the data stored in the database, not any changes made in the current object (until they 
are Put to the database). 
Note: This method has changed fo r consistency with other surface me thods. Prior to v9.2 it did not 
return information about th e plane. To access the old functionality, use IsPlane( ).
Example:None
 API-2980  Cylindrical
5.65.2.27  Cylindrical
Cylindrical
( radius, base, axis )
Description:This method returns informa tion about cylindrical surfaces
Input:NoneOutput:REAL8 radius The radius of the cylinder.REAL8 base[0..2] The coordinates of the center of the base of the cylinder.REAL8 axis[0..2] The components of the axis vector.Error Codes:FE_FAIL Surface is not cylindrical, or could not evaluate the surface.
Remarks/Usage:This method will only work with  solid surfaces, not surfaces created  with the FEMAP Standard geome-
try engine. It uses the data stored in the database, not any changes made in the current object (until it is 
Put to the database). 
Example:None
Spherical   API-2981
5.65.2.28  Spherical
Spherical
( radius, center )
Description:This method returns inform ation about spherical surfaces
Input:NoneOutput:REAL8 radius The radius of the sphere.REAL8 center[0..2] The coordinates of the center of the sphere.Error Codes:FE_FAIL Surface is not spherical, or  could not evaluate the surface.
Remarks/Usage:This method will only work with  solid surfaces, not surfaces created  with the FEMAP Standard geome-
try engine. It uses the data stored in the database, not any changes made in the current object (until it is 
Put to the database). 
Example:None
 API-2982  Conical
5.65.2.29  Conical
Conical
( radius, angle, base, axis )
Description:This method returns inform ation about conical surfaces
Input:NoneOutput:REAL8 radius The radius of the cone in the plane of the base location.
REAL8 angle The half angle of the coneREAL8 base[0..2] A location al ong the axis of the cone.
REAL8 axis[0..2] The vector along the axis of the coneError Codes:FE_FAIL Surface is not conical, or could not evaluate the surface.Remarks/Usage:This method will only work with  solid surfaces, not surfaces created  with the FEMAP Standard geome-
try engine. It uses the data stored in the database, not any changes made in the current object (until it is 
Put to the database). 
Example:None
Toroidal   API-2983
5.65.2.30  Toroidal
Toroidal
( radius1, radius2, base, axis )
Description:This method returns informa tion about toroidal surfaces
Input:NoneOutput:REAL8 radius1 The major radius of the toroid.REAL8 radius2 The minor radius of the toroidREAL8 base[0..2] A location alo ng the axis of the toroid.
REAL8 axis[0..2] The vector al ong the axis of the toroid
Error Codes:FE_FAIL Surface is not toroidal, or could not evaluate the surface.Remarks/Usage:This method will only work with  solid surfaces, not surfaces created  with the FEMAP Standard geome-
try engine. It uses the data stored in the database, not any changes made in the current object (until it is 
Put to the database). 
Example:None
 API-2984  IsPlane
5.65.2.31  IsPlane
IsPlane
( void )
Description:This method indicates whether a surface is planarInput:NoneOutput:NoneError Codes:FE_FAIL Surface is not planar, or could not evaluate the surface.FE_BAD_TYPE Surface is not a solid surfaceFE_NOT_A V AILABLE Surface object has not been loaded with valid da ta from the database
Remarks/Usage:This method will only work with  solid surfaces, not surfaces created  with the FEMAP Standard geome-
try engine. It uses the data stored in the database, not any changes made in the current object (until it is 
Put to the database). 
Example:None
IsCylinder   API-2985
5.65.2.32  IsCylinder
IsCylinder
( void )
Description:This method indicates whether a surface is cylindricalInput:NoneOutput:NoneError Codes:FE_FAIL Surface is not cylindrical, or could not evaluate the surface.
FE_BAD_TYPE Surface is not a solid surfaceFE_NOT_A V AILABLE Surface object has not been loaded with valid da ta from the database
Remarks/Usage:This method will only work with  solid surfaces, not surfaces created  with the FEMAP Standard geome-
try engine. It uses the data stored in the database, not any changes made in the current object (until it is 
Put to the database). 
Example:None
 API-2986  IsSphere
5.65.2.33  IsSphere
IsSphere
( void )
Description:This method indicates whether a surface is sphericalInput:NoneOutput:NoneError Codes:FE_FAIL Surface is not shperical, or  could not evaluate the surface.
FE_BAD_TYPE Surface is not a solid surfaceFE_NOT_A V AILABLE Surface object has not been loaded with valid da ta from the database
Remarks/Usage:This method will only work with  solid surfaces, not surfaces created  with the FEMAP Standard geome-
try engine. It uses the data stored in the database, not any changes made in the current object (until it is 
Put to the database). 
Example:None
IsCone   API-2987
5.65.2.34  IsCone
IsCone
( void )
Description:This method indicates whether a surface is conicalInput:NoneOutput:NoneError Codes:FE_FAIL Surface is not conical, or could not evaluate the surface.FE_BAD_TYPE Surface is not a solid surfaceFE_NOT_A V AILABLE Surface object has not been loaded with valid da ta from the database
Remarks/Usage:This method will only work with  solid surfaces, not surfaces created  with the FEMAP Standard geome-
try engine. It uses the data stored in the database, not any changes made in the current object (until it is 
Put to the database). 
Example:None
 API-2988  IsTorus
5.65.2.35  IsTorus
IsTorus
( void )
Description:This method indicates whether a surface is toroidalInput:NoneOutput:NoneError Codes:FE_FAIL Surface is not toroidal, or could not evaluate the surface.FE_BAD_TYPE Surface is not a solid surfaceFE_NOT_A V AILABLE Surface object has not been loaded with valid da ta from the database
Remarks/Usage:This method will only work with  solid surfaces, not surfaces created  with the FEMAP Standard geome-
try engine. It uses the data stored in the database, not any changes made in the current object (until it is 
Put to the database). 
Example:None
IsBlend   API-2989
5.65.2.36  IsBlend
IsBlend
( blendtype, dRadius)
Description:This method indicates whether a surface is a blendInput:NoneOutput:
INT4 blendtypeThe Type of blend. 4002=cylinder, 4003=cone, 4004=sphere, 
4005= torus, 4006=B-Surface, 4007=blend surface, 4009=swept, 
4010=spun
REAL8 dRadiusBlend Radius. For blends with two ra dii, it is always the smaller of 
the two. 
Error Codes:FE_FAIL Surface is not a blend, or could not evaluate the surface.FE_BAD_TYPE Surface is not a solid surfaceFE_NOT_A V AILABLE Surface object has not been loaded with valid da ta from the database
Remarks/Usage:This method will only work with  solid surfaces, not surfaces created  with the FEMAP Standard geome-
try engine. It uses the data stored in the database, not any changes made in the current object (until it is 
Put to the database). 
Example:None
 API-2990  IsBoundingSolidRegion
5.65.2.37  IsBoundingSolidRegion
IsBoundingSolidRegion
( void )
Description:This method indicates whether a surface is part of a solid body definition.
Input:NoneOutput:NoneError Codes:
FE_OKBounds a solid volume. This will also be returned for any surface 
which is embedded with in the “solid portion” of a general body.
FE_FAIL Does not bound a solid volumeFE_BAD_TYPE Not a solid surfaceRemarks/Usage:This method will only work with  solid surfaces, not surfaces created  with the FEMAP Standard geome-
try engine. It uses the data stored in the database, not any changes made in the current object (until it is 
Put to the database). 
Example:None
Facets   API-2991
5.65.2.38  Facets
Facets
( numFacets, xyzFacet )
Description:This method returns the triangular face ts used for display of solid surfaces.
Input:NoneOutput:INT4 numFacets The number of facets returned.
REAL8 xyzFacet[0..9*numFac-
ets-1]The coordinates of the corners of th e facets. Each facet is a triangle, 
and therefore has 9 coordinates. Th ey are arranged in xyzFacet as 
[X1,Y1,Z1,X2,Y2,Z2,X3,Y3,Z3....] for the first facet, followed by 
the second and so on.
Return Code:FE_FAIL Wrong type of surface, or  unable to retrieve facets.
Remarks/Usage:This method will only work with solid faces that have facetting information.  The surface information 
must be in the database . Only the ID from the current object is used.
Example:None
 API-2992  Nodes
5.65.2.39  Nodes
Nodes
( getBoundary, getInterior, numNodes, nodeID )
Description:This method returns the nodes th at are attached to this surface
Input:
BOOL getBoundaryIf True, the nodes attached to the surface boundary (the curves and 
points) are selected
BOOL getInteriorIf True, the nodes attached to the in terior of the surface (not on the 
curves or points) are selected
Output:INT4 numNodes The number of nodes returned.
INT4 nodeID[0..numNodes-1] The ID s of the selected nodes which are attached to the surface.
Return Code:FE_FAIL Unable to return nodes, possibly none exist.FE_NOT_EXIST No nodes were attached to the surface in the manner you selected.
FE_NO_MEMORY Insufficient memory to  allocate list of attached nodes.
Remarks/Usage:NoneExample:
Nodes   API-2993
The following code modifies the color of all nodes on Surface 4. 
Sub Main() 
 Dim App As femap.model 
 Set App = feFemap() 
 Dim su As Surface 
 Set su = App.feSurface

 Dim nd As Node 
 Set nd = App.feNode

 Dim rc As Long 
 Dim Count As Long 
 Dim Nodes As Variant 
 Dim i As Long 
 surfID = 4 

 rc = su.Get (surfID) 
 rc = su.Nodes(True, True, Count, Nodes)

 For i = 0 To Count - 1 
    nd.Get (Nodes(i)) 
    nd.Color = 4 
    nd.Put (0) 

 Next i 
 App.feViewRegenerate(0)
End SubNodes
( getBoundary, getInterior, numNodes, nodeID )
 API-2994  NodesAsSet
5.65.2.40  NodesAsSet
NodesAsSet
( getBoundary, getInterior, nSetID, bClear )
Description:This method returns the nodes that are a ttached to this surfa ce in a Set object
Input:
BOOL getBoundaryIf True, the nodes attached to the surface boundary (the curves and 
points) are selected
BOOL getInteriorIf True, the nodes attached to the in terior of the surface (not on the 
curves or points) are selected
INT4 nSetID The ID of the Set Object th at will contain the IDs of the Nodes
BOOL bClear If True, the Set is cleared prior to loading the Node IDs
Output:
NoneReturn Code:FE_FAIL Unable to return nodes, possibly none exist.FE_NOT_EXIST No nodes were attached to the surface in the manner you selected.
FE_NO_MEMORY Insufficient memory to  allocate list of attached nodes.
Remarks/Usage:NoneExample:None
Elements   API-2995
5.65.2.41  Elements
Elements
( numElems, elemID )
Description:This method returns the elements that are attached to this surface
Input:NoneOutput:INT4 numElems The number of elements returned.
INT4 elemID[0..numElems-1] The IDs of the selected  elements which are a ttached to the surface.
Return Code:FE_FAIL Unable to return elem ents, possibly none exist.
FE_NOT_EXIST No elements were attached to the surface in the manner you selected.
FE_NO_MEMORY Insufficient memory to allocate list of attached elements.
Remarks/Usage:Only elements that have all of thei r nodes on the surface will be return ed by this method. Elements that 
simply touch the surface at one edge or one node will  not be returned. Similarly,  solid elements with one 
face on the surface will not be returned.
Example:None
 API-2996  ElementsAsSet
5.65.2.42  ElementsAsSet
ElementsAsSet
( nSetID, bClear )
Description:This method returns the elements that are attached to this surface in a Set object
Input:INT4 nSetID The ID of the Set Object th at will contain the IDs of the Elements
BOOL bClear If True, the Set is cleare d prior to loading the Element IDs
Output:NoneReturn Code:FE_FAIL Unable to return elem ents, possibly none exist.
FE_NOT_EXIST No elements were attached to the surface in the manner you selected.
FE_NO_MEMORY Insufficient memory to allocate list of attached elements.
Remarks/Usage:Only elements that have all of thei r nodes on the surface will be return ed by this method. Elements that 
simply touch the surface at one edge or one node will  not be returned. Similarly,  solid elements with one 
face on the surface will not be returned.
Example:None
ElementsWithFaces   API-2997
5.65.2.43  ElementsWithFaces
ElementsWithFaces
( numElems, elemID )
Description:This method returns the elements that have  faces which are attached to this surface
Input:NoneOutput:INT4 numElems The number of elements returned.
INT4 elemID[0..numElems-1]The IDs of the selected elements which have faces that are attached 
to the surface.
Return Code:FE_FAIL Unable to return elem ents, possibly none exist.
FE_NOT_EXIST No elements were attached to the surface in the manner you selected.
FE_NO_MEMORY Insufficient memory to allocate list of attached elements.
Remarks/Usage:Only elements that have faces on the surface will be returned by this method. Solid elements with one 
face on the surface will be returned, as will planar elements  meshed on th e surface. Other elements that 
simply touch the surface at a corner , or solid elements touching just along an edge will not be returned.
Example:None
 API-2998  ElementFaces
5.65.2.44  ElementFaces
ElementFaces
( getPlaneElem, getSolidElem, requireElemAttach, numFaces, elemID, faceID )
Description:This method returns the element faces  that are attached to this surface
Input:BOOL getPlaneElem If True, planar elements w ith faces on the surfa ce will be returned.
BOOL getSolidElem If True, solid elements w ith faces on the surface will be returned.
BOOL requireElemAttachIf True, planar elements must actua lly have been meshed on the sur-
face, not just have all of  its nodes on the surface.
Output:INT4 numFaces The number of elements and faces returned.
INT4 elemID[0 ..numFaces-1]The IDs of the selected elements which have faces that are attached 
to the surface.
INT4 faceID[0..numFaces-1] The ID s of the faces of the elements which are on the surface.
Return Code:FE_FAIL Unable to return elemen t faces, possibly none exist.
FE_NOT_EXIST No faces were attached to the surface in the manner you selected.
FE_NO_MEMORY Insufficient memory to a llocate lists of attached elements/faces.
Remarks/Usage:The elemID and faceID arrays are stored in correspon ding order . . . elemID[i] and faceID[i] together 
represent the element face that is actually attached to the surface.
Example:None
BoundingBox   API-2999
5.65.2.45  BoundingBox
BoundingBox
( Box )
Description:This method returns the coordinates of a rectangular box the encloses this geometry.
Input:NoneOutput:
REAL8 Box[0..5]The dimensions of the bounding box, in Global Rectangular coordi-
nates.
Box[0] - Minimum X,      Box[3] - Maximum X
Box[1] - Minimum Y ,      Box[4] - Maximum Y
Box[2] - Minimum Z,      Box[5] - Maximum Z
Return Code:FE_FAIL Unable to find a bounding box.
FE_INV ALIDObject does not contain valid geometry. This method only works for 
Parasolid-based geometry.
Remarks/Usage:This method always re trieves a box that is aligned with Global  Rectangular coordinates, not an aligned 
box of minimum volume.
Example:None
 API-3000  BoundingBoxInCSys
5.65.2.46  BoundingBoxInCSys
BoundingBoxInCSys
( nCSysID, Box )
Description:This method returns the coordinates of a rectangula r box the encloses this geometry, in coordinates of 
the selected coordinate system.
Input:INT4 nCSysID ID of coordinate syst em to return minimum and maximum 
Output:
REAL8 Box[0..5]The dimensions of the bounding box, in “coordinate system specified 
with nCSysID” coordinates.
Box[0] - Minimum X,      Box[3] - Maximum X
Box[1] - Minimum Y ,      Box[4] - Maximum Y
Box[2] - Minimum Z,      Box[5] - Maximum Z
Return Code:
FE_FAIL Unable to find a bounding box.
FE_INV ALIDObject does not contain valid geometry. This method only works for 
Parasolid-based geometry.
Remarks/Usage:This method always re trieves a box that is aligne d with the selected coordinate system, not an aligned 
box of minimum volume.
Example:None
BoundingSize   API-3001
5.65.2.47  BoundingSize
BoundingSize
( pvDim, pvLongDir, pvNormalDir )
Description:This method finds the sizes of the smallest box that  encloses the surface and th e direction of the longest 
side and the shortest side
Input:NoneOutput:V ARIANT pvDim[0..2] The dimensions of the bounding boxV ARIANT pvLongDir[0..2] The direction along the longest side
V ARIANT pvNormalDir[0..2]The direction along the shortest side of the box (normal to a planar 
surface)
Return Code:
FE_FAILUnable to compute the size. Possibly wrong surface type, ID is not 
set, or data is not stored in database.
FE_INV ALIDInvalid surface type, th is method only works with Solid and Com-
bined surfaces.
Remarks/Usage:This method will only work for so lid surfaces. Furthermore, the surface must be Put to the model. The 
data in the current object is not used.
Example:None
 API-3002  NormalBox
5.65.2.48  NormalBox
NormalBox
( box )
Description:This method finds a bounding box around the unit normalsInput:NoneOutput:
REAL8 box[0..5]The values of the normal bounding box, in Global Rectangular coor-
dinates.
Box[0] - Minimum dX,      Box[3] - Maximum dX
Box[1] - Minimum dY ,      Box[4] - Maximum dY
Box[2] - Minimum dZ,      Box[5] - Maximum dZ
Return Code:
FE_FAILUnable to compute the normals. Possibly wrong surface type, ID is 
not set, or data is not stored in database.
Remarks/Usage:This method will wo rk for any surface.
Example: None
MaxNormalDeviation   API-3003
5.65.2.49  MaxNormalDeviation
MaxNormalDeviation
( dLimit, dAngle )
Description:This method the maximum angle between  the normal vectors on this surface
Input:
REAL8 dLimitA maximum angle that is acceptable. Normally set this to 0.0 - which 
means to return any angle variation. If you set this to some other pos-
itive number, then the method will fail if the angle is greater than the 
specified value.
Output:REAL8 dAngle The maximum angle between normal vectorsReturn Code:FE_FAIL The maximum angle exceeded th e limit you set. (dAngle is invalid)
FE_NOT_A V AILABLE Surface facetting information is not available to compute the normals
FE_NO_MEMORY Not enough memory to load all of the surface facets.
Remarks/Usage:This is an approximate method. It uses the normals at the corners of facets, therefore you are not guaran-
teed that the maximum deviation will not be  slightly larger than  the value computed.
Example:None
 API-3004  AngleAtPoint
5.65.2.50  AngleAtPoint
AngleAtPoint
( nPtID, dAngle, vBisector, vNormal )
Description:This method retrieves the internal angle, the surface  normal vector, and a surf ace tangent vector that 
bisects the angle at a point on a surface boundary
Input:INT4 nPtID The ID of the point to checkOutput:
REAL8 dAngleThe angle, in the surface, formed  by the edges meeting at the 
selected point
REAL8 vBisector[0..2] The surface tangent vector that bisects the angle
REAL8 vNormal[0..2] The surface normal at the point
Return Code:FE_FAIL Unable to determine the requested information.FE_NOT_A V AILABLE The selected point was not foundFE_NO_MEMORY Not enough memory to load all of the surface facets.
Remarks/Usage:NoneExample:None
HasPole   API-3005
5.65.2.51  HasPole
HasPole
( void )
Description:This method indicates whethe r a surface contains a pole.
Input:NoneOutput:NoneReturn Code:FE_FAIL Surface does not contain a pole , or could not evaluate the surface. 
FE_BAD_TYPE Surface is not a Parasolid surface FE_NOT_A V AILABLE Surface object has not been loaded with valid data from the database 
Remarks/Usage:
Example:
None
 API-3006  MinRadiiOfCurvature
5.65.2.52  MinRadiiOfCurvature
MinRadiiOfCurvature
( pdConcaveRadius, pdConvexRadius, pbIsPlanar )
Description:This method returns the minimum concave an d convex radii of curvature of a surface
Input:NoneOutput:REAL8 pdConcaveRadius The minimum radius of curvature on the concave side of the surface
REAL8 pdConvexRadius The minimum radius of cu rvature on the convex  side of the surface
BOOL pbIsPlanar True if the surface is planarReturn Code:NoneRemarks/Usage:Use this method to reset all parameters, then adjust individual properties to suit your needs.
Example:None
RationalParamToXYZ   API-3007
5.65.2.53  RationalParamToXYZ
RationalParamToXYZ
( u, v, XYZ )
Description:This method converts a pa rametric location (u,v) to a coordinate location (xyz ) using rational uv space.
Input:REAL8 uThe rational parametric coordinates of the location being specified. 
Parametric coordinates are between 0 and 1REAL8 v
Output:REAL8 XYZ[0..2] The coordinates of th e location in global rectangular. 
Return Code:FE_FAIL Unable to compute the location. Remarks/Usage:
Example:
None
 API-3008  ResetMeshAttr
5.65.2.54  ResetMeshAttr
ResetMeshAttr
( )
Description:This method resets the mesh attribute parameters to default values.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:Use this method to reset all parameters, then adjust individual properties to suit your needs.
Example:None
Mesh   API-3009
5.65.2.55  Mesh
Mesh
( propID, elemShape, bAllowMapped )
Description:This method meshes the surface us ing the current meshing attrib utes and the values specified.
Input:
INT4 propIDSpecifies the ID of the property to  use for elements as they are cre-
ated. If you want to use predefined  meshing attributes, set propID=0. 
In this case, all selected surfaces must have meshing attributes 
defined or they will no t be meshed. The propID property must be 
compatible with surface meshing. 
INT4 elemShapeThe shape of the elements to mesh. Must be 2=Tria3, 3=Tria6, 
4=Quad4, 5=Quad8  or set to 0 to u se the shape that is predefined on 
the meshing attributes.
BOOL bAllowMappedIf True, mapped meshing of the surfaces is allowed, otherwise it is 
not. This argument is ignored if elemShape=0
Output:NoneReturn Code:FE_FAIL Could not mesh surfaces.FE_INV ALID The value specified for elemShape is invalidFE_NOT_EXIST The property specified does not exist.FE_NOT_A V AILABLE No surface has been  loaded in the current object.
Remarks/Usage:This method simply calls  the application method feMeshSurface2( ) with the ID of the current surface 
and without resetting meshing attributes.  If you have made changes to the meshin g attributes in the cur-
rent surface object, you must call Put() prior to calling this method or those changes will not be used.
Example:
 API-3010  Mesh
This example meshes Surface 2 with Parabolic Quad elements that are offset by 0.1
Sub Main 
    Dim App As femap.model 
    Set App = feFemap() 
    Dim s As femap.Surface 
    Set s = App.feSurface 
    s.Get(2) 
    s.ResetMeshAttr() 
    s.attrOffset = 0.1 
    s.attrOffsetFrom = FMOF_TOP 
    s.Put(2) 
    s.Mesh(1,FTO_QUAD8,True) 
End SubMesh
( propID, elemShape, bAllowMapped )
CurvesAtPoint   API-3011
5.65.2.56  CurvesAtPoint
CurvesAtPoint
( nPtID, PrevCurveID, NextCurveID )
Description:This method retrieves the curve before and after a specified poin t on a surface boundary
Input:INT4 nPtID The ID of the point to checkOutput:
INT4 PrevCurveIDThe angle, in the surface, formed  by the edges meeting at the 
selected point
INT4 NextCurveID The surface tangent vector that bisects the angleReturn Code:FE_FAIL Point was not associated to surface currently loaded in object
FE_NOT_A V AILABLE The selected point was not foundRemarks/Usage:NoneExample:None
 API-3012  CommonCurvesAsSet
5.65.2.57  CommonCurvesAsSet
CommonCurvesAsSet
( nCombinedMode, nOtherCurveID, nSetID, bClear )
Description:This method adds all curves which are common betwee n the surface currently in the Surface object and 
another specified surface to a specified Set object. Th ere are options to clear the set before adding the 
common curves and whether or not regular curves, comb ined curves, or both types should be added to 
the Set object.
Input:
INT4 nCombinedModeWhen finding common curves, this  method limits which curves on 
the surfaces will be considered.
0=Uses the basic curves that ar e on the surface (FCC_OFF), 1=Any 
basic curves that are on the surface that are in a Combined Curve are 
replaced by the ID of the Comb ined Curve (FCC_ON), 2=Uses both 
the underlying and combined curves (FCC_BOTH).
INT4 nOtherSurfaceID ID of othe r surface used to determine if  there are any common curves
INT4 nSetID ID of set to add common curves
BOOL bClearIf True, the Set object will be clear ed before the co mmon curves are 
added. If False, the common curves are simply added to the specified 
Set object.
Output:NoneReturn Code:FE_FAIL No common curves were found between the surfacesRemarks/Usage:NoneExample:None
FindMappedMeshingCorners   API-3013
5.65.2.58  FindMappedMeshingCorners
FindMappedMeshingCorners
( nNumDesired, nNumFound, nCornerList)
Description:This method returns a list of corner points for used to specify a mapped meshing approach.
Input:
INT4 nNumDesiredNumber of corners to attempt to locate. Should be set to 0 (Auto-
matic), 3, or 4. 
Output:
INT4 nNumFoundNumber of corners found which ma y be used to set a mapped mesh-
ing approach
INT4 nCornerList [0..Num-
Found-1]The IDs of the appropriate corner points, in order, to properly set up 
a mapped mesh ing approach.
Return Code:NoneRemarks/Usage:NoneExample:None
 API-3014  IsSuppressed
5.65.2.59  IsSuppressed
IsSuppressed
( void )
Description:Indicates whether or not the surface is suppressedInput:NoneOutput:NoneReturn Code:FE_OK Surface is suppressedFE_FAIL Surface is not suppressedRemarks/Usage:NoneExample:None
Curvature   API-3015
5.65.2.60  Curvature
Curvature
( vXYZ, pdRadius1, vCurveDir1,  pdRadius2, vCurveDir2, vNormDir )
Description:Returns curvature of surface in 2 directions based on specified coordinatesInput:REAL8 XYZ[0..2] The coordinates of spec ified location in global rectangular.
Output:REAL pdRadius1 Radius of curvature in Direction 1REAL8 vCurveDir1[0..2] The vector in the direction of Direction 1.REAL pdRadius2 Radius of curvature in Direction 2REAL8 vCurveDir1[0..2] The vector in the direction of Direction 2.REAL8 XYZ[0..2] The vector in the direction of the surface normal.Return Code:FE_BAD_TYPE Surface type is no t supported for this method
FE_FAILRemarks/Usage:NoneExample:None
 API-3016  IsMappedApproach
5.65.2.61  IsMappedApproach
IsMappedApproach
( void )
Description:Indicates whether or not the surface h as a mapped meshing approach assigned
Input:NoneOutput:NoneReturn Code:FE_OK Surface has mapped meshing approach assigned
FE_FAIL Surface does not have mapped meshing approach assignedRemarks/Usage:NoneExample:None
IsMappable   API-3017
5.65.2.62  IsMappable
IsMappable
( bForceBlands, dMaxBlendRadius, dMergeAngle, pnNumEdges, pnCornerPoints, 
pdEdgeLength, pnNumEdgeCurves, pnEdgeCurves )
Description:This function attempts to determin e if a surface is appropriate for ma pped meshing. If so, it provides 
corners and edges whic h will be used to apply a mapped mesh. 
Input:
BOOL bForceBlendsIf True, the command will see if a “forced” mapped mesh would be 
possible for a blend (fillet) with a radius smaller than the dMaxBlen-
dRadius value. If False, only a blen d surface which fits other criteria 
for mapped meshing will return FE_OK.
REAL8 dMaxBlendRadius Maximum Radius of Blen d to consider for “forced” mapped meshing
REAL8 dMergeAngleMaximum Angle allowed between tw o curves for the curves to be 
considered one “edge” for mapped meshing purposes. 
Output:INT4 pnNumEdges Number of mapped edges, usually 4INT4 pnCornerPoints [0..pnNu-
mEdges - 1]Point IDs of the mapped corners, in  order, starting with the end point 
of the first edge.
REAL8 pdEdgeLength 
[0..pnNumEdges -1]Total length of each mapped edge
INT4 pnNumEdgeCurvesTotal number of curves on surface +1  to allow for 0 indicating last 
curve of last edge
INT4 pnEdgeCurves [0..pnNu-
mEdgeCurves-1]IDs of the curves making up the edges. +ID indicates more curves 
exist for current edge. -ID indicates last curve on an edge. 0 is returned after last curve of last edge
Return Code:FE_BAD_TYPE Surface type is no t supported for this method
FE_FAIL By default, surface is not appropriate for a mapped mesh.Remarks/Usage:If a surface has a mapped m eshing approach defined, this command will always return FE_OK for the 
surface.
Example:None
 API-3018  AddMeshPoint
5.65.2.63  AddMeshPoint
AddMeshPoint
( nPointID )
Description:Adds a “mesh point” to a surface using the ID of the pointInput:INT4 nPointID ID of point to add as a mesh point on surface.
Output:NoneReturn Code:
FE_INV ALIDMax number of available mesh points for the surface has been 
exceeded
FE_FAIL Point does not existRemarks/Usage:NoneExample:None
RemoveMeshPoint   API-3019
5.65.2.64  RemoveMeshPoint
RemoveMeshPoint
( nPointID )
Description:Removes a “mesh point” from a surfa ce using the ID of the point
Input:INT4 nPointID ID of point to remove as a mesh point on surface.Output:NoneReturn Code:FE_FAIL Point does not existRemarks/Usage:NoneExample:None
 API-3020  RemoveAllMeshPoints
5.65.2.65  RemoveAllMeshPoints
RemoveAllMeshPoints
( void )
Description:Removes all “mesh points” from a su rface using the ID of the point
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
CountMeshPoint   API-3021
5.65.2.66  CountMeshPoint
CountMeshPoint
( void )
Description:Returns the number of mesh points  currently specified on a surface
Input:NoneOutput:NoneReturn Code:count The number of mesh po ints specified on a surface
Remarks/Usage:NoneExample:None
 API-3022  IsMultiLoop
5.65.2.67  IsMultiLoop
IsMultiLoop
( void )
Description:Indicates if a surface has any interior loops (For example, interior holes, slots, etc.)
Input:NoneOutput:NoneReturn Code:FE_OK Surface has interior loopsFE_FAIL Surface does not have interior loopsFE_INV ALID Number of loops can not be properly calculated
Remarks/Usage:NoneExample:None
PointLoops   API-3023
5.65.2.68  PointLoops

PointLoops
( nCombinedMode, numLoops, numPoints, PointID)
Description:This method returns the number of loops on a surface along with the IDs of the points used for each 
loop.
Input:
INT4 nCombinedModeWhen finding loops, this method limits which curves on the surfaces 
will be considered.
0=Uses the basic curves that ar e on the surface (FCC_OFF), 1=Any 
basic curves that are on the surface that are in a Combined Curve are 
replaced by the ID of the Comb ined Curve (FCC_ON), 2=Uses both 
the underlying and combined curves (FCC_BOTH).
Output:INT4 numLoops Total number of surface loops INT4 numPoints Total number of points used by the loops + numLoops
V ARIANT PointIDIDs of the points making up each loop. 0 is returned after the last 
point of each loop as a separator
Return Code:NoneRemarks/Usage:NoneExample:None
 API-3024  InitMeshAttributes
5.65.2.69  InitMeshAttributes

InitMeshAttributes
( nPropID)
Description:This method initials the mesh attributes of a surface with a specified property.
Input:INT4 nPropID The ID of the property to initialize the mesh attr ibutes of the surface. 
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
IsFacet   API-3025
5.65.2.70  IsFacet
IsFacet
( void )
Description:Indicates whether or not the surface is faceted surfaceInput:NoneOutput:NoneReturn Code:FE_OK Surface is a faceted surfaceFE_FAIL Surface is not a faceted surfaceFE_INV ALID The current object does not contain a valid Parasolid surfaceRemarks/Usage:NoneExample:None
 API-3026  IsFacet
   API-3027
5.66  Table Data Objects
Table Data objects correspond to the Tables in yo ur model. They are derived from Entity objects 
so, in addition to the properties and methods described here, all of the properties and methods 
defined for Entity objects are also available for Ta ble Data objects. For mo re information, see Sec-
tion 5.1, "Common Entity Properties and Methods". 
Use the feTableData method of the FEMAP App lication object to create Table Data objects.
For an example of creating a new Table Data obje ct, then populating the Ta ble Data object with 
values, see Section 5.66.2 .17, "SetMultiCellDouble".
5.66.1  Table Data Object Properties
Table Data objects are always stored with a SetID= 1 and the ID equal to the Table Data object ID.
Property Description
STRING title The table title (maximum 79 characters).
INT4 typeThe Type of Data in the Table Data object (0=None, 1=Func-
tion, 2=Vector Function, 3=Lo ad Set Combination, 4=Result 
Set Processing)
INT4 subtype
All of these refer to the same pr operty and specify the type of 
Function or Vector Function in the Table Data objectINT4 FunctionType
INT4 VectorFunctionTypeINT4 Rows The number of Rows and Columns in the Table Data object. 
These values are read-only and may only be set using the Ini-
tialize and/or Resize methods. INT4 Columns
 API-3028  GetFunction
5.66.2  Table Data Object Methods
There following methods are available in addition to th e standard entity methods.
5.66.2.1  GetFunction
GetFunction
( nFunctionID )
Description:Loads a function into the current Table objectInput:INT4 nFunctionID The ID of the function to loadOutput:NoneReturn Code:FE_FAIL Unable to load the selected functionRemarks/Usage:NoneExample:None
PutFunction   API-3029
5.66.2.2  PutFunction
PutFunction
( nFunctionID )
Description:Saves the current Table object as a FunctionInput:INT4 nFunctionID The ID of the function to create/updateOutput:NoneReturn Code:
FE_BAD_TYPEEither the current Table does not contain a valid Function Type or it 
does not contain two columns
Remarks/Usage:NoneExample:None
 API-3030  CellRange
5.66.2.3  CellRange
CellRange
( nMinRow, nMaxRow, nMinCol, nMaxCol )
Description:Finds the range of valid cells in the Table currently loaded in the object
Input:NoneOutput:INT4 nMinRow
The max/min Row and Column indices of the valid cells in the table.INT4 nMaxRow
INT4 nMinColINT4 nMaxColReturn Code:FE_FAIL No valid cells foundRemarks/Usage:NoneExample:None
SaveToFile   API-3031
5.66.2.4  SaveToFile
SaveToFile
( sFileName, bAppend )
Description:Saves the current table to a comma-separated text fileInput:STRING sFileName The name of the file to create
BOOL bAppendOption to allow appending to an exis ting file. If False, the file will be 
overwritten.
Output:NoneReturn Code:FE_NO_FILENAME Unable to open the specified file
Remarks/Usage:NoneExample:None
 API-3032  Initialize
5.66.2.5  Initialize
Initialize
( nNumRow, nNumCol )
Description:Initializes the current Table object to  contain the specified range of cells
Input:INT4 nNumRow The number of Rows in the TableINT4 nNumCol The number of Columns in the TableOutput:NoneReturn Code:FE_OK Object is initializedRemarks/Usage:This method will clear any data/cell th at was previously in the Table object.
Example:See Section 5.66.2.17, "SetMultiCellDouble"
Resize   API-3033
5.66.2.6  Resize
Resize
( nNumRow, nNumCol )
Description:Resizes an already populated Table object to the newly specified sizes
Input:INT4 nNumRow The number of Rows in the TableINT4 nNumCol The number of Columns in the TableOutput:NoneReturn Code:FE_OK Object is resizedRemarks/Usage:Use this method to grow your tabl e beyond the sizes specified in th e Initialize method. Using the Resize 
method does not change the cont ents of already existing cells.
Example:None
 API-3034  Clear
5.66.2.7  Clear
Clear
( void )
Description:Clears the current objectInput:NoneOutput:NoneReturn Code:FE_OKRemarks/Usage:Calling this method removes a ll valid cells from the object
Example:None
SetCellDouble   API-3035
5.66.2.8  SetCellDouble
SetCellDouble
( nRow, nCol, dValue )
Description:Assign a Real, Double-precision value to a specified cellInput:INT4 nRow
The row and column of the cell to update.
INT4 nCol
REAL8 dValue The value assigned to that cellOutput:NoneReturn Code:FE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:NoneExample:None
 API-3036  SetCellInteger
5.66.2.9  SetCellinteger
SetCellInteger
( nRow, nCol, nValue )
Description:Assign an integer value to a specified cellInput:INT4 nRow
The row and column of the cell to update.
INT4 nCol
INT4 nValue The value assigned to that cellOutput:NoneReturn Code:FE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:NoneExample:None
SetCellText   API-3037
5.66.2.10  SetCellText
SetCellText
( nRow, nCol, sText )
Description:Assign a Text String value to a specified cellInput:INT4 nRow
The row and column of the cell to update.
INT4 nCol
STRING sText The text assigned to that cellOutput:NoneReturn Code:FE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:NoneExample:None
 API-3038  SetCellEquation
5.66.2.11  SetCellEquation
SetCellEquation
( nRow, nCol, sEqn )
Description:Specify a text string that contains an  equation to assign to a specified cell
Input:INT4 nRow
The row and column of the cell to update.
INT4 nCol
STRING sEqn The equation to assign to the cellOutput:NoneReturn Code:FE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:NoneExample:None
SetCellEntity   API-3039
5.66.2.12  SetCellEntity
SetCellEntity
( nRow, nCol, nType, nID )
Description:Specify an Entity to assi gn to a specified cell
Input:INT4 nRow
The row and column of the cell to update.
INT4 nCol
INT4 nTypeThe Entity Type to assign to the ce ll. For entity information, see Sec-
tion 3.3.6, "Entity Types".
INT4 nID The ID of the Entity to assign to the cellOutput:NoneReturn Code:FE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:NoneExample:None
 API-3040  GetCellDouble
5.66.2.13  GetCellDouble
GetCellDouble
( nRow, nCol, dValue )
Description:Retrieve a Real, Double-preci sion value from a specified cell
Input:INT4 nRow
The row and column of the cell to retrieve.
INT4 nCol
Output:REAL8 dValue The current value stored in the selected cellReturn Code:FE_FAIL The selected cell does not have a valueFE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:NoneExample:None
GetCellInteger   API-3041
5.66.2.14  GetCellinteger
GetCellInteger
( nRow, nCol, nValue )
Description:Retrieve an integer va lue from a specified cell
Input:INT4 nRow
The row and column of the cell to retrieve.
INT4 nCol
Output:INT4 nValue The current value stored in the selected cellReturn Code:FE_FAIL The selected cell does not have a valueFE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:NoneExample:None
 API-3042  GetCellText
5.66.2.15  GetCellText
GetCellText
( nRow, nCol, sText )
Description:Retrieve a Text String value from a specified cellInput:INT4 nRow
The row and column of the cell to retrieve.
INT4 nCol
Output:STRING sText The text string retrieved from that cellReturn Code:FE_FAIL The selected cell does not have a valueFE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:This method will return a text repr esentation of cells specified with in teger or real, double-precision val-
ues
Example:None
GetCellEntity   API-3043
5.66.2.16  GetCellEntity
GetCellEntity
( nRow, nCol, nType, nID )
Description:Retrieve an Entity from a specified cellInput:INT4 nRow
The row and column of the cell to retrieve.
INT4 nCol
Output:
INT4 nTypeThe Entity Type to stored in the specified cell. For entity informa-
tion, see Section 3.3.6, "Entity Types".
INT4 nID The ID of the Entity stored in the specified cellReturn Code:FE_FAIL The selected cell does not have a valueFE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:NoneExample:None
 API-3044  SetMultiCellDouble
5.66.2.17  SetMultiCellDouble
SetMultiCellDouble
( nFirstRow, nLastRow, nFirstCol, nLastCol, dValues )
Description:Assign Real, Double-precision values to a range of specified cellsInput:INT4 nFirstRow
The range of cells to assign values from the dValues array. 
nFirstRow must be less than or equal to nLastRow and nFirstCol 
mustbe less than or qual to nLastColINT4 nLastRow
INT4 nFirstColINT4 nLastCol
REAL8 dValues[0..N]The Values to assign to the cells in  the specified range. This array 
must contain: 
(nLastRow-nFirstRow+1)*(nLastCol-nFirstCol+1) values
Output:NoneReturn Code:FE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:NoneExample:
SetMultiCellDouble   API-3045
Sub Main
    Dim App As femap.model
    Set App = feFemap()
    Dim t As femap.TableData
    Set t = App.feTableData
    ' If creating a table, call this first to setup number of rows
    ' and columns    '   ...it will clear all other data
    t.Initialize( 3, 4 )
    ' Setup parameters after initializing
    t.type = FTBL_VECTORFUNCTION
    t.VectorFunctionType = FTBV_ACCELERATION
    t.title = "This is a Vector Function"
    ' Create some data...these are simply demo variables that
    ' would never be valid
    Dim v(11) As Double    For i=0 To 11
        v(i) = i
    Next
    ' Load data into table...array must contain data in the
    ' order...    ' (Row0,Col0), (Row0,Col1), (Row0,Col2)...
    ' (Row1,Col0),(Row1,Col1)......(RowN,ColN)
    rc = t.SetMultiCellDouble( 0, 2, 0, 3, v )
    'Save the Table
    t.Put(1)
End SubSetMultiCellDouble
( nFirstRow, nLastRow, nFirstCol, nLastCol, dValues )
 API-3046  SetMultiCellInteger
5.66.2.18  SetMultiCellInteger
SetMultiCellInteger
( nFirstRow, nLastRow, nFirstCol, nLastCol, nValues )
Description:Assign Integer values to a range of specified cellsInput:INT4 nFirstRow
The range of cells to assign values from the nValues array. 
nFirstRow must be less than or equal to nLastRow and nFirstCol 
mustbe less than or qual to nLastColINT4 nLastRow
INT4 nFirstColINT4 nLastCol
REAL8 nValues[0..N]The Values to assign to the cells in  the specified range. This array 
must contain: 
(nLastRow-nFirstRow+1)*(nLastCol-nFirstCol+1) values
Output:NoneReturn Code:FE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:NoneExample:None
SetMultiCellText   API-3047
5.66.2.19  SetMultiCellText
SetMultiCellText
( nFirstRow, nLastRow, nFirstCol, nLastCol, sTextValues )
Description:Assign text string values to a range of specified cellsInput:INT4 nFirstRow
The range of cells to assign va lues from the sTextValues array. 
nFirstRow must be less than or equal to nLastRow and nFirstCol 
mustbe less than or qual to nLastColINT4 nLastRow
INT4 nFirstColINT4 nLastCol
STRING sTextValues[0..N]The text string values to assign to  the cells in the specified range. 
This array must contain: 
(nLastRow-nFirstRow+1)*(nLastCol-nFirstCol+1) values
Output:NoneReturn Code:FE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:NoneExample:None
 API-3048  GetMultiCellDouble
5.66.2.20  GetMultiCellDouble
GetMultiCellDouble
( nFirstRow, nLastRow, nFirstCol, nLastCol, dValues )
Description:Retrieve Real, Double-precision va lues from a range of specified cells
Input:INT4 nFirstRow
The range of cells to retrieve valu es from to fill the dValues array. 
nFirstRow must be less than or equal to nLastRow and nFirstCol 
mustbe less than or qual to nLastColINT4 nLastRow
INT4 nFirstColINT4 nLastColOutput:
REAL8 dValues[0..N]The Values retrieved from the cells in  the specified range. This array 
will contain: 
(nLastRow-nFirstRow+1)*(nLastCol-nFirstCol+1) values
Return Code:FE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:Cells that are in the valid range, but do not have a specified value will return a value of 0.0. Querying 
these cells will not cause an error in the Return Code. 
Example:None
GetMultiCellInteger   API-3049
5.66.2.21  GetMultiCellInteger
GetMultiCellInteger
( nFirstRow, nLastRow, nFirstCol, nLastCol, dValues )
Description:Retrieve Integer values from a range of specified cells
Input:INT4 nFirstRow
The range of cells to retrieve valu es from to fill the nValues array. 
nFirstRow must be less than or equal to nLastRow and nFirstCol 
mustbe less than or qual to nLastColINT4 nLastRow
INT4 nFirstColINT4 nLastColOutput:
REAL8 nValues[0..N]The Values retrieved from the cells in  the specified range. This array 
will contain: 
(nLastRow-nFirstRow+1)*(nLastCol-nFirstCol+1) values
Return Code:FE_INV ALID The object has not been initializedFE_NOT_A V AILABLE An invalid ro w/column has been specified
Remarks/Usage:Cells that are in the valid range, but do not have a specified value will return a value of 0.0. Querying 
these cells will not cause an error in the Return Code. 
Example:None
 API-3050  
5.67  Text Objects
Text objects correspond to the text  entities in your model. They ar e derived from Entity objects, so 
in addition to the properties and methods described here, all of th e properties and methods defined 
for Entity objects are also available for text. For more information, se e Section 5.1, "Common 
Entity Properties and Methods".
Use the feText method of the FEMAP App lication object to cr eate Text objects.
5.67.1  Text Object Properties
Text entities are always stored with a SetI D=1, and the ID equal to the Text ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
BOOL ModelPosition Method for positioni ng text (True=Model, False=Screen)
BOOL AllViewsIndicates if the text is visible in all Views - if False, only visible 
in “VisibleView”
BOOL DrawPointer If True, a pointer is drawn in addition to the text
BOOL DrawBorder If True, a border is drawn around the text
INT4 VisibleViewThe ID of a view where the text is visible. Only used if All-
Views=False
INT4 layer The layer associated with the text.INT4 color The color of the text
INT4 BorderColorThe color of the border drawn ar ound the text. Only used if 
DrawBorder=True
INT4 BackColorThe background color of the te xt. Only used if the DrawBor-
der=True
REAL8 TextPosition[0..2]
or
V ARIANT vTextPositionThe coordinates of the text. If ModelPosition=True, these are 
model coordinates in the Global Rectangular CSys. If Model-Position=False, these are specified as a percent of the view 
location and TextPosition[2] is not used.
REAL8 PointerPosition[0..2]
orV ARIANT vPointerPositionThe location of the tip of the poin ter, specified in the same man-
ner as TextPosition. Only used if DrawPointer=True. 
INT4 HorzJustify The horizontal justification method
INT4 VertJustify The vertical justification methodINT4 FontNumber The ID of the font for the text
STRING textThe actual text string (limited to  511 characters). Contains car-
riage return and line-feed char acters between lines of text.
GetFontData   API-3051
5.67.2  Text Object Methods
5.67.2.1  GetFontData
GetFontData
( pdPointHeight, pbBold, pbItalic, ppcName )
Description:This function returns para meters from Text objects. Requires a “Get” before use.
Input:NoneOutput:REAL8 pdPointHeight The height of the textBOOL pbBold If True if text is Bold, otherwise returns False
BOOL pbItalic If True if text is Italicized, otherwise returns False
STRING ppcName Name of FontReturn Code:FE_OK Text object values retrieved
Remarks/Usage:NoneExample:None
 API-3052  SetFontData
5.67.2.2  SetFontData
SetFontData
( pdPointHeight, pbBold, pbItalic, ppcName )
Description:This function sets parameters fo r Text objects. Requires a “Put” after use to update Text object.
Input:REAL8 pdPointHeight The height of the textBOOL pbBold If True if text is Bold. If False text is not BoldBOOL pbItalic If True if text is Italic ized. If False, text is not Italicized
STRING ppcName Name of FontOutput:NoneReturn Code:FE_OK Text object values setRemarks/Usage:NoneExample:None
   API-3053
5.68  TMGBC Objects
TMGBC objects correspond to the TMG-defined boun dary condition data in your model. They are 
derived from Entity objects, so in addition to the properties and me thods described here, all of the 
properties and methods defined for Entity objects ar e also available for TmbBC Objects. For more 
information, see Section 5.1, "Com mon Entity Properties and Methods". 
Use the feTMGBC method of the FEMAP Appl ication object to create TMGBC objects.
5.68.1  TMGBC Object Properties
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
INT4 i[0..263]
or
V ARIANT viInteger array. 
REAL8 r[0..263]
orV ARIANT vrReal array.
BOOL b[0..532]
or
V ARIANT vbBoolean array
INT4 c[0..242]
or
V ARIANT vcCharacter array, each entry is returned and accessed via an 
INT4.
 API-3054  GetAll
5.68.2  TMGBC Object Methods
5.68.2.1  GetAll
GetAll
( entID,  i, r, c )
Description:This method is obsolete, th erefore, GetAll2 should be used instead . This method retrieves an entity with 
the specified ID. 
Input:INT4 entID ID of the entity to retrieve.Output:INT4 i[0..119]Notice, the size of the most of the arrays are smaller than in the prop-
erty definition. c is returned in an  integer array, even though it con-
tains only char values.REAL8 r[0..73]
INT4 c[0..242]Return Code:FE_FAIL The specified entity does not exist.
Remarks/Usage:Should no longer be usedExample:None
PutAll   API-3055
5.68.2.2  PutAll
PutAll
( entID,  i, r, c )
Description:This method is obsolete, therefore, PutAll2 should be used instead. This method stores an entity with the 
specified ID.
Input:INT4 entID The ID of the entity to store.INT4 i[0..119]Notice, the size of the most of the arrays are smaller than in the prop-
erty definition. c is loaded in an in teger array, even though it contains 
only char values.REAL8 r[0..73]
INT4 c[0..242]Output:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:Should no longer be usedExample:None
 API-3056  GetAll2
5.68.2.3  GetAll2
GetAll2
( entID,  i, r, b, c )
Description:This method retrieves an en tity with the specified ID. 
Input:INT4 entID ID of the entity to retrieve.Output:INT4 i
Refer to the property descriptions for each of these items. c is 
returned in an integer array, even though it contains only char values.REAL8 r
BOOL bINT4 cReturn Code:FE_FAIL The specified entity does not exist.
Remarks/Usage:
Example:
None
PutAll2   API-3057
5.68.2.4  PutAll2
PutAll2
( entID,  i, r, b, c )
Description:This method stores an entit y with the specified ID.
Input:INT4 entID The ID of the entity to store.INT4 i
Refer to the property descriptions fo r each of these items. c is loaded 
in an integer array, even thou gh it contains only char values.REAL8 r
BOOL bINT4 cOutput:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:
Example:
None
 API-3058  
5.69  TMGCtrl Objects
TMGCtrl objects correspond to the TMG-defined co ntrol data in your model. They are derived 
from Entity objects, so in  addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are also  available for TMGCtrl ob jects. For more infor-
mation, see Section 5.1, "Commo n Entity Properties and Methods".
Use the feTMGCtrl method of the FEMAP App lication object to crea te TMGCtrl objects.
5.69.1  TMGCtrl Ob ject Properties
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
INT4 i[0..167]
or
V ARIANT viInteger array. 
REAL8 r[0..63]
orV ARIANT vrReal array.
BOOL b[0..297]
or
V ARIANT vbBoolean array.
INT4 c[0..485]
orV ARIANT vcCharacter array, each entry is returned and accessed via an 
INT4.
GetAll   API-3059
5.69.2  TMGCtrl Object Methods
5.69.2.1  GetAll
GetAll
( entID,  i, r, b, c )
Description:This method is obsolete, th erefore, GetAll2 should be used instead . This method retrieves an entity with 
the specified ID. 
Input:INT4 entID ID of the entity to retrieve.Output:INT4 i[0..53]
Notice, the size of the most of the arrays are smaller than in the prop-
erty definition. c is returned in an  integer array, even though it con-
tains only char values.REAL8 r[0..19]
BOOL b[0..121]INT4 c[0..485]Return Code:FE_FAIL The specified entity does not exist.
Remarks/Usage:Should no longer be usedExample:None
 API-3060  PutAll
5.69.2.2  PutAll
PutAll
( entID,  i, r, b, c )
Description:This method is obsolete, therefore, PutAll2 should be used instead. This method stores an entity with the 
specified ID.
Input:INT4 entID The ID of the entity to store.INT4 i[0..53]
Notice, the size of the most of the arrays are smaller than in the prop-
erty definition.. c is loaded in an  integer array, even though it con-
tains only char values.REAL8 r[0..19]
BOOL b[0..121]INT4 c[0..485]Output:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:Should no longer be usedExample:None
GetAll2   API-3061
5.69.2.3  GetAll2
GetAll2
( entID,  i, r, b, c )
Description:This method retrieves an en tity with the specified ID. 
Input:INT4 entID ID of the entity to retrieve.Output:INT4 i
Refer to the property descriptions for each of these items. c is 
returned in an integer array, even though it contains only char values.REAL8 r
BOOL bINT4 cReturn Code:FE_FAIL The specified entity does not exist.
Remarks/Usage:
Example:
None
 API-3062  PutAll2
5.69.2.4  PutAll2
PutAll2
( entID,  i, r, b, c )
Description:This method stores an entit y with the specified ID.
Input:INT4 entID The ID of the entity to store.INT4 i
Refer to the property descriptions fo r each of these items. c is loaded 
in an integer array, even thou gh it contains only char values.REAL8 r
BOOL bINT4 cOutput:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:
Example:
None
   API-3063
5.70  TMGInt Objects
TMGInt objects correspond to the TMG-defined integer data in your model. They are derived 
from Entity objects, so in  addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are also available for Tm bInt objects. For more infor-
mation, see Section 5.1, "Commo n Entity Properties and Methods".
Use the feTMGInt method of the FEMAP App lication object to create TMGInt Objects.
5.70.1  TMGInt Object Properties
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant.  Refer to Section 1.2.7, "Multiple Defin itions of Array Properties"   for more information.
Property Description
INT4 i[0..49]
or
V ARIANT viInteger array. 
 API-3064  GetAll
5.70.2  TMGInt Object Methods
5.70.2.1  GetAll
GetAll
( entID,  i )
Description:This method retrieves an en tity with the specified ID. 
Input:INT4 entID ID of the entity to retrieve.Output:INT4 i Refer to the property desc riptions for each of these items. 
Return Code:
FE_FAIL The specified entity does not exist.
Remarks/Usage:
Example:
None
PutAll   API-3065
5.70.2.2  PutAll
PutAll
( entID,  i )
Description:This method stores an entit y with the specified ID.
Input:INT4 entID The ID of the entity to store.
INT4 iRefer to the property descriptions fo r each of these items. c is loaded 
in an integer array, even thou gh it contains only char values.
Output:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:
Example:
None
 API-3066  
5.71  TMGOpt Objects
TMGOpt objects correspond to the TMG-defined option data in your model. They are derived 
from Entity objects, so in  addition to the properties and methods  described here, all of the proper-
ties and methods defined for Entity objects are also available for TMGOpt objects. For more infor-
mation, see Section 5.1, "Commo n Entity Properties and Methods".
Use the feTMGOpt method of the FEMAP Appli cation object to create TMGOpt objects.
5.71.1  TMGOpt Object Properties
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7, "Multiple Definitions of Array Pr operties"  for mo re information.
Property Description
INT4 i[0..16]
or
V ARIANT viInteger array. 
REAL8 r[0..1]
orV ARIANT vrReal array.
INT4 c[0..84]
or
V ARIANT vcCharacter array, each entry is returned and accessed via an 
INT4.
GetAll   API-3067
5.71.2  TMGOpt Object Methods
5.71.2.1  GetAll
GetAll
( entID,  i, r, c )
Description:This method retrieves an en tity with the specified ID. 
Input:INT4 entID ID of the entity to retrieve.Output:INT4 i
Refer to the property descriptions for each of these items. c is 
returned in an integer array, even though it contains only char values.REAL8 r
INT4 c
Return Code:FE_FAIL The specified entity does not exist.
Remarks/Usage:
Example:
None
 API-3068  PutAll
5.71.2.2  PutAll
PutAll
( entID,  i, r, c )
Description:This method stores an entit y with the specified ID.
Input:INT4 entID The ID of the entity to store.INT4 i
Refer to the property descriptions fo r each of these items. c is loaded 
in an integer array, even thou gh it contains only char values.REAL8 r
INT4 cOutput:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:
Example:
None
   API-3069
5.72  TMGReal Objects
TMGReal objects correspond to the TMG-defined real data in your model. They are derived from 
Entity objects, so in addition to the properties an d methods described here, all of the properties and 
methods defined for Entity objects are also availa ble for TMGReal objects. For more information, 
see Section 5.1, "Common Entity Properties and Methods".
Use the feTMGReal method of the FEMAP App lication object to create TMGReal objects.
5.72.1  TMGReal Object Properties
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant.  Refer to Section 1.2.7, "Multiple Defin itions of Array Properties"   for more information.
Property Description
INT4 i[0..11]
or
V ARIANT viInteger array. 
REAL8 r[0..55]
orV ARIANT vrReal array.
 API-3070  GetAll
5.72.2  TMGReal Object Methods
5.72.2.1  GetAll
GetAll
( entID,  i, r )
Description:This method retrieves an en tity with the specified ID. 
Input:INT4 entID ID of the entity to retrieve.Output:INT4 i
Refer to the property descrip tions for each of these items. 
REAL8 r
Return Code:
FE_FAIL The specified entity does not exist.
Remarks/Usage:
Example:
None
PutAll   API-3071
5.72.2.2  PutAll
PutAll
( entID,  i, r )
Description:This method stores an entit y with the specified ID.
Input:INT4 entID The ID of the entity to store.INT4 i
Refer to the property descrip tions for each of these items. 
REAL8 r
Output:NoneReturn Code:FE_FAIL Unable to store the entity with the specified ID.Remarks/Usage:
Example:
None
 API-3072  
5.73  Variable Objects
Variable objects correspond to the variables in your model. They are derived from Entity objects, 
so in addition to the propertie s and methods described here, a ll of the properties and methods 
defined for Entity objects are also available for Variable objects. Fo r more information, see Section 
5.1, "Common Entity Pr operties and Methods". 
Use the feVar method of the FEMAP Application object to create Variable objects.
5.73.1  Variable Object Properties
Variables are always stored with a SetID=1, and th e ID equal to an encoded value that is derived 
from the variable name. You can use the GetVa rID method described below to find the ID.
If you use the properties to define a variable, it is  your responsibility to up date all of them in a 
compatible fashion. You cannot simply specify one or two of them and leave the rest blank. In 
addition, VarName must be defined to  match the ID that you pass to Put. It is often easier to use 
the Define method below to create  variables, and simply use the pr operties to retrieve their values.
Property Description
REAL8 Value The stored value of the variable.STRING VarName The name of the variable. Maximum 20 characters.
STRING EquationThe defining equation of the variable. Maximum 160 charac-
ters.
GetVarID   API-3073
5.73.2  Variable Object Methods
5.73.2.1  GetVarID
GetVarID
( varname )
Description:This method retrieves the encoded ID that is  associated with a specified variable name. 
Input:STRING varname The name of the variab le to compute the associated ID.
Output:NoneReturn Code:
INT4 ID The ID associated with the name.
Remarks/Usage:You do not need to have a variable with  the specified name to use this function.
Example:None
 API-3074  Evaluate
5.73.2.2  Evaluate
Evaluate
( void )
Description:This method evaluates the equation stored in the cu rrent Equation property. Th e result is returned, and 
used to update the Value property.
Input:NoneOutput:NoneReturn Values:REAL8 value The value of the equatio n property. Also stored in Value.
Remarks/Usage:NoneExample:None
Define   API-3075
5.73.2.3  Define
Define
( varname, equation )
Description:This method evaluates the equation stored in the cu rrent Equation property. Th e result is returned, and 
used to update the Value property.
Input:STRING varname The variable name to create or update. Maximum 20 characters.STRING equation The equation used to define the variable. Maximum 160 characters.Output:NoneReturn Code:NoneRemarks/Usage:This method automatic ally computes the value and sets all prop erties for the variable . In addition, the 
variable is Put to the database  so it is permanently retained.
Example:None
 API-3076  DefineReal
5.73.2.4  DefineReal
DefineReal
( varname, value )
Description:This method defines a variable and its associated real number.
Input:STRING varname The variable name to create or update. Maximum 20 characters.REAL8 value The value to as signed to the variable.
Output:NoneReturn Code:NoneRemarks/Usage:NoneExample:None
DefineReal   API-3077
 API-3078  
5.74  Vector Objects
Vector objects correspond to defined vectors which can  be stored in the database for future use in 
commands. They are derived from Entity objects, so in addition to the properties and methods 
described here, all of the properties and methods defined for Entity objects are also available for 
Vector objects. For more inform ation, see Section 5.1, "Common Entity Properties  and Methods". 
Use the feVector method of the FEMAP App lication object to create Vector objects.
5.74.1  Vector Object Properties
Vectors are always stored with a SetID=1, and the ID equal to the reference ID.
Property Description
STRING title Title of saved vector (Maximum 79 Characters)REAL8 base[0..2]
orV ARIANT vBaseVector base location in global rectangular coordinates
REAL8 dir[0..2]
or
V ARIANT vDirComponents of a vector defi ning the vector direction
REAL8 length Length of vector
PutAll   API-3079
5.74.2  Vector Object Methods
5.74.2.1  PutAll
PutAll
( ID, sTitle, vBase, vDir, dLen  )
Description:This method saves a vector to the database with  all the available options using a single call
Input:INT4 ID ID of vectorSTRING title Title of vector (Maximum 79 Characters)REAL8 vBase[0..2] Vector base location in global rectangular coordinatesREAL8 vDir[0..2] Components of a vector defining the vector direction
REAL8 dLen Length of vector
Output:NoneReturn Code:FE_FAIL Unable to save vectorRemarks/Usage:None.Example:None
 API-3080  
5.75  View Objects
View objects correspond to  the views in your model. They ar e derived from Entity objects, so in 
addition to the properties and methods described here, all of the properties and methods defined 
for Entity objects are also available for View objects. For more information, see Section 5.1, 
"Common Entity Proper ties and Methods". 
Use the feView method of the FEMAP App lication object to create View objects.
All model orientation in FEMAP 11.3 and above should be done using the View Orientation 
(ViewOrient) Object. For backwa rds compatibility, the orientation in the View Object may be 
used, as the Get function loads th e orientation from the ViewOrient Object into the View Object 
and the Put function saves the orientation from the View Object in to the ViewOrient object.
For FEMAP 2020.1 and above, control of the display of digits for real numbers in the graphics 
window is now controlled by properties with th is format: DO_(View Option)_(Digits Option).
There are some limitations:
First, rotations should be applie d using the Rotate meth od and not by direct access to the Rotation 
property data. Some access to the Rotation property data will work (for exampl e, the Snap to Clos-
est Orthogonal View API delivered with FE MAP, where all 3 values are set together).
Second, you should be careful when accessing a Vi ew Object and a ViewOrient object at the same 
time as the backwards comp atibility support in the Put function of  the View Object will override 
data in the ViewOrient Object. If accessing both, th e Put for the ViewOrient Object should always 
be done after the Put on the View Object.
5.75.1  View Ob ject Properties
Views are always stored with a SetID=1, and the ID equal to the view ID.
In this table, you will see some pr operties that list two names - one of  which is an array, the other a 
Variant. Refer to Section 1.2.7,  "Multiple Definitions of Array Properties" for more information.
Property Description
STRING title View title (maximum 79 characters).
INT4 ModeDrawing style: 0=Draw, 1=Feature, 2=Quick Hide, 
3=Hide, 4=Free Edge, 5=Free Face
Should only be used when Enable Legacy XY Plot-
ting option is enabled in the User Interface  tab of 
File, Preferences:
6=XYvsID, 7=XYvsSET, 8=XYvsV ALUE, 
9=XYvsPOSITION, 10=XY of Function.
REAL8 ViewLegendLocation[0..1]
or
V ARIANT vViewLegendLocationThe X and Y positions are the relative distances, as a 
percentage of overall screen size, from the upper left 
hand corner of the “view legend area” to the upper 
left hand corner of the view where the view legend is being displayed. For instance, a value of X = 0 and 
Y = 0 positions the view lege nd as far to the left and 
as close to the top of the view as possible, while X = 100 and Y = 100 positions the view legend as for to 
the right and as close to the bottom as possible. 
   API-3081
INT4 ViewLegendJustificationJustification option: 0=Left  Justification, 1=Right 
Justification, 2=Center Justification, 3=Single Line
BOOL ViewLegendLockJustificationJustification is locked (True) or free to change as the 
view legend is moved around the graphics window 
(False)
INT4 DeformedDeformed style: 0=Off, 1=Deformed, 2=Animate, 
3=Animate Multi-Case, 4=Arrow, 5=Trace, 
6=Streamline
INT4 ContourContour style: 0=Off, 1=Contour, 2=Criteria, 
3=Beam Diagram, 4=IsoS urface, 5=Section Cut, 
6=Contour Arrow.
BOOL UndefAnimation True if  undeformed animation.
INT4 BC Constraint SetID, or -1 for active.INT4 Load Load SetID, or -1 for active.
INT4 GroupGroup ID, -1 for active group, -2 for multiple 
groups, and 0 for all groups.
INT4 LabelGroupLabel Group ID, -1 for active group, and 0 for all 
groups.
INT4 ContourGroupID of Group containing Elements to be used for var-
ious contour style displays. -1 for active.
INT4 OutputSet Output Set ID for post.INT4 FinalOutputSet Final Output Set ID for multi-case animation.
INT4 OutputSetInc Output Set in crement for multi-case animation.
INT4 ContourVector1V2This property replaces ContourVector1. For more 
information see, Section 2. 4, "Working with Output 
in FEMAP 2020.1 and above". 
First Output Vector ID in  Select Multiple Contour 
Vectors dialog box (Same as ContourData).
INT4 ContourVector2V2This property replaces ContourVector2. For more 
information see, Section 2. 4, "Working with Output 
in FEMAP 2020.1 and above". Second Output Vector ID in Select Multiple Contour 
Vectors dialog box.
INT4 ContourVector3V2This property replaces ContourVector3. For more 
information see, Section 2. 4, "Working with Output 
in FEMAP 2020.1 and above". 
Third Output Vector ID in  Select Multiple Contour 
Vectors dialog box.Property Description
 API-3082  
INT4 ContourDataV2This property replaces Cont ourData. For more infor-
mation see, Section 2.4, "W orking with Output in 
FEMAP 2020.1 and above". 
Output Vector ID for contour.
INT4 ContourVecAddlV2This property replaces Co ntourVecAddl. For more 
information see, Section 2. 4, "Working with Output 
in FEMAP 2020.1 and above".
Additional contour vector output ID. Same as Con-tourVector2.
INT4 DeformDataV2This property replaces DeformData. For more infor-
mation see, Section 2.4, "W orking with Output in 
FEMAP 2020.1 and above". Output Vector ID for deformation.
REAL8 PostTitlesLocation[0..1]
or
V ARIANT vPostTitlesLocationThe X and Y positions are the relative distances, as a 
percentage of overall screen size, from the upper left 
hand corner of the “post titles area” to the upper left hand corner of the view where the post titles are being displayed. For instance, a value of X = 0 and 
Y = 0 positions the post titles as far to the left and as 
close to the top of the view as possible, while X = 100 and Y = 100 positions the post titles as for to the 
right and as close to the bottom as possible. 
INT4 PostTitlesJustificationJustification option: 0=Left  Justification, 1=Right 
Justification, 2=Center Justification, 3=Single Line
BOOL PostTitlesLockJustificationJustification is locked (True) or free to change as the 
post titles are moved around the graphics window 
(False)
REAL8 Rotation[0..2]
orV ARIANT vRotationRotation angles (See section Section 5.75, "View 
Objects" for more informa tion about specifying ori-
entation)
REAL8 PrevRotation[0..2]
or 
V ARIANT vPrevRotationPrevious rotation angles (See Section 5.75, "View 
Objects" for more informa tion about specifying ori-
entation)
REAL8 Center[0..2]
or
V ARIANT vCenterLocation of view center (See Section 5.75, "View 
Objects" for more informa tion about specifying ori-
entation).
REAL8 Magnification Magnification factor (1=AutoScale).REAL8 Aspect View aspect ratio.BOOL RotationCenterOn Flag to use rotation center for dynamic rotation.Property Description
   API-3083
REAL8 RotationCenter[0..2]
or
V ARIANT vRotationCenterCenter of rotation for dynamic rotation.
REAL8 RotationVector[0..2]
orV ARIANT vRotationVectorAxis of rotation for dynamic rotation.
REAL8 PrevCenter[0..2]
or
V ARIANT vPrevCenterPrevious center location.
REAL8 PrevMagnification Previous magnification factor.
BOOL ShowAllLayers Flag to display all layers.BOOL WindowTitleBar Flag to indicate title bar is on.INT4 WindowBorder Border mode.BOOL WindowEraseBack True if background should be erased.INT4 WindowBackColor B ackground Color ID.
BOOL WindowShadeBackTrue if background should be shaded using second 
background color.
INT4 WindowShadeBackOpt0=Vertical, 1=Horizontal, 2=Diagonal Up, 3=Diag-
onal Down, 4=Square Spot, 5=Circular Spot, 
6=Horizon, 7=Bitmap, 8=Stretched Bitmap
INT4 WindowBackColor2Second Background Color ID - only used in render 
with WindowShadeBack=True.
INT4 WindowBackColor3Third Background Color ID - only used in render 
with WindowShadeBack=True and WindowShade-
BackOpt=6
INT4 WindowShadeHorizonThe location of the background horizon in percent of 
screen height.
BOOL WindowLogoIf True, and a logo bitmap  is defined, it will be 
shown in this view
REAL8 LogoLocation[0..2]
or
V ARIANT vLogoLocationThe location of the logo bitm ap if it is shown in the 
view. In percent of screen.
BOOL Draw[0..121]
or
V ARIANT vDrawView Option Draw flags.Property Description
 API-3084  
INT4 Label[0..121]
or
V ARIANT vLabelView Option Labeling.
INT4 ColorMode[0..121]
orV ARIANT vColorModeView Option Color Modes.
INT4 ElementNoResultModeControls Elements with no  results option mode for 
Contour/Criteria Style. 0=Show, 1=Hide (additional 
options planned for future releases)
INT4 Color[0..121]
or
V ARIANT vColorView Option View Color.
(Obsolete) REAL8 PerspectiveDist Perspectiv e distance (Use PerspectiveAngle instead)
REAL8 PerspectiveAngleSpecifies the Perspectiv e Angle, which sets the 
value in the Angle  field for the Perspective  option of 
the View, Options  command
REAL8 InterOccularDist Perspective separation.REAL8 ShrinkFactor Element shrink factor.
REAL8 FeatureLineAngleAngle used to control where feature lines are dis-
played.
(Obsolete) REAL8 CurveError Use Global Info_FacetXXX properties
REAL8 AmbientLight Ambient light value.REAL8 Light[0..2]
or
V ARIANT vLightLocation of light source when Light Location/Type 
is set to Viewer, Viewer Spot, Model, or Model Spot
REAL8 SpotlightDist Spotlight distance.
REAL8 SpotlightDir[0..2]
or
V ARIANT vSpotlightDirLocation of Light in Screen  Coordinates when Light 
Location/Type is Scre en or Screen Spot 
REAL8 AxisLocation[0..1]
orV ARIANT vAxisLocationLocation of screen axes.
REAL8 ArrowsToLabel Percent of post arrows to label.
(Obsolete)  INT4 SurfaceDi visions Use surface faceting
REAL8 LoadVecLength Length of load vectors.REAL8 OtherVecLength Length of other vectorsProperty Description
   API-3085
REAL8 LoadVectorMinScale Load v ector minimum scale factor.
BOOL CurveConnectWirebodyIf True and Curve Connecti vity option is enabled, 
Wirebody entity curves w ill be displayed using the 
specified color by CurveConnectWirebodyColor
INT4 CurveConnectWirebodyColorDisplay color for Wirebody entity curves when 
Curve Connectivity option is enabled
BOOL CurveConnectFreeIf True and Curve Connecti vity option is enabled, 
Free curves on surfaces will be displayed using the 
specified color by CurveConnectFreeColor
INT4 CurveConnectFreeColorDisplay color for Free curves on surfaces when 
Curve Connectivity option is enabled
BOOL CurveConnectManifoldIf True and Curve Connecti vity option is enabled, 
Manifold curves on surfac es will be displayed using 
the specified color by Cu rveConnectManifoldColor
INT4 CurveConnectManifoldColorDisplay color for Manifold  curves on surface when 
Curve Connectivity option is enabled
BOOL CurveConnectNonManifoldIf True and Curve Connecti vity option is enabled, 
NonManifold curves on su rfaces will be displayed 
using the specified color by CurveConnectNonMan-
ifoldColor
INT4 CurveConnectNonManifoldColorDisplay color for NonManifold curves on surface 
when Curve Connectivity option is enabled
REAL8 RenderLogDepthOffsetControls Mesh Edit / Free Edge / Aero Entities / 
Contact / Element / Boundary / Surface Depth Offset 
(0.001 to 1000, default is 1)
REAL8 RenderPushForwardControls edge offset of filled entities such as sur-
faces and elements at an angle to the screen (0 to 
500, default is 50)
REAL8 RenderPushUnitControls edge offset of filled entities such as sur-
faces and elements perpendicular to normal (0 to 
500, default is 100)
REAL8 RenderPushUndeformedControls the screen normal offset of the undeformed 
model with respect to the deformed model (-100 to 
100, default is -100)
INT4 RenderPushLabelControls the screen normal offset of labels. The 
value is a multiple of the fo nt height (0 to 10, default 
is 1)
REAL8 DeformedRelScale Deformed relative scale factor.Property Description
 API-3086  
REAL8 DeformedAbsScale Deformed absolute scale factor.
INT4 AnimationFrames Number of animation frames.INT4 AnimationDelay Animation delay factor.INT4 UserContourLevel[0..11]
or
V ARIANT vUserContourLevelUse User Defined contours.
REAL8 UserContourValue[0..11]
orV ARIANT vUserContourValueContour level value.
INT4 UserContourCount Number of user defined levels.
INT4 ContourLabelFreq Contour labeling frequenc.y
INT4 ContourLabelDigits(OBSOLETE) For FEMAP 20 20.1 and above, use 
various Digits Control properties on the View 
Object to specify options for display of real numbers in the Graphics Window.Number of digits on contour labels (0 to 15)
INT4 ContourLegendFreq Contour legend labeling frequency.
INT4 ContourLegendDigits(OBSOLETE) For FEMAP 20 20.1 and above, use 
the various Digits Control properties on the View 
Object to specify options for display of real numbers in the Graphics Window.
Number of digits on contour legend (0 to 15)
BOOL ContourLegendHorizontalDisplay contour legend horizontally (True) or verti-
cally (False)
BOOL ContourLegendReversedDisplay contour legend with values reversed (True) 
or in typical order (False)
REAL8 ContourLegendShrinkPctContour legend is shrunk to this percentage to avoid 
overlap with view legend, post title and logo bitmap. 
Must be a value between 1.0 and 100.0
REAL8 ContourLegendWidthPctControls the thickness of only the color bar portion 
of the legend. This option can be used to make the 
overall width of the color bar thicker or thinner and 
must have a value between 10.0 and 200. (default is 
100.0).
BOOL ContourLegendTopLeftLabelAlways have labels appear to the left of a vertical 
legend/above a horizontal legend (True) or appear 
right of a vertical legend/below a horizontal legend (False)Property Description
   API-3087
BOOL ContourLegendLockOrientationOrientation is locked (True)  or free to change orien-
tation as the contour legend is moved around the 
graphics window (False)
REAL8 ContourLegendLocation[0..1]
or
V ARIANT vContourLegendLocationX and Y positions are the relative distances, as a per-
centage of overall screen size, from the upper left hand corner of the “legend area” (area encompassing 
the legend and values) to the upper left hand corner 
of the view where the legend  is being displayed. For 
instance, a value of X = 0 and Y = 0 positions the 
legend as far to the left and as close to the top of the 
view as possible, while X = 100 and Y = 100 posi-tions the legend as for to the right and as close to the 
bottom as possible. 
INT4 ContourColor[0..5]
orV ARIANT vContourColorContour Base Colors
REAL8 CriteriaMax Upper criteria limit.
REAL8 CriteriaMin Lower criteria limit.BOOL ContourElemUnaveraged Sho w unaveraged element contours.
BOOL ContourElemBreakLinearParabolic Don’t average across Linear/Parabolic boundary.
BOOL ContourElemBreakProp Do n’t average across properties.
BOOL ContourElemBreakMatl Don’t average across materials.BOOL ContourElemBreakLayer Don’t average across layers.BOOL ContourElemBreakColor Don’t average across colors.BOOL ContourElemBreakGeom Don’t aver age across discontinuous geometry.
REAL8 ContourElemBreakAngle Geometry break angle.
INT4 ContourDataSelectionSets Data Selection optio n in Contour Options. 0 = 
Contour Group, 1 = Visible Group(s), 2 = All Data/
Full Model
BOOL ContourCornerDataSets Use Corner Data op tion in Contour Options. 
True = On, False = Off.
INT4 ContourDataConversionSpecifies Data Conversion option in Contour 
Options. 
0 = Average, 1 = Max Value, 2 = Min Value
BOOL SectionPlaneModeThe mode for section disp lays - True for Multiple 
Section mode, false otherwise.Property Description
 API-3088  
BOOL Section1OnTrue if Section plane 1 is on in Multiple Section 
mode
BOOL Section2OnTrue if Section plane 2 is on in Multiple Section 
mode
BOOL Section3OnTrue if Section plane 3 is on in Multiple Section 
mode
REAL8 SectionBase[0..2]
or
V ARIANT vSectionBaseOrigin for first cut plane.
REAL8 SectionNormal[0..2]
orV ARIANT vSectionNormalVector normal for first cut plane.
REAL8 Section2Base[0..2]
or
V ARIANT vSection2BaseOrigin for second cut plane.
REAL8 Section2Normal[0..2]
orV ARIANT vSection2NormalVector normal for second cut plane.
REAL8 Section3Base[0..2]
or
V ARIANT vSection3BaseOrigin for third cut plane.
REAL8 Section3Normal[0..2]
or
V ARIANT vSection3NormalVector normal for third cut plane.
REAL8 SectionSpacing Spacing between cut planes.
INT4 SectionCount Number of Cutting Planes.BOOL SectionMode Section cut mode.
INT4 SectionCapModeOnly used when both SectionPlaneMode and Sec-
tionMode are both set to Fa lse. Sets the Cap Option 
for the Cut Plane. 0=Negative Cap, 1=Positive Cap
REAL8 IsosurfaceValue Single IsoSurface value.INT4 TraceOpt Trace option.
INT4 TraceIDV2This property replaces TraceID. For more informa-
tion see, Section 2.4, "Wor king with Output in 
FEMAP 2020.1 and above". ID of output vector for trace plots.Property Description
   API-3089
BOOL ContourVecHideTrue if contour vectors should be included in hidden 
line calculation.
INT4 ContourVecMode Contour vector output relative to mode.
BOOL ContourVecAutoVecAutomatically select contour arrow vectors from 
ContourVector1
BOOL ContourVecAutoOrientAutomatically orient contour arrows based on 
selected contour vector(s)
BOOL ContourVecMinVecOnOnly display contour arro ws above the value speci-
fied for ContourVecMinVec
REAL8 ContourVecMinVec Threshold value to display contour arrows
REAL8 ContourVecMinLenMinimum length between 0 and 100 for contour 
arrows. The minimum length specified represents 
the shortest arrow that will be drawn. Greater values will scale up from that length, to the maximum
INT4 ContourVecID1V2[0..2]
or
V ARIANT vContourVecID1V2These properties replace ContourVecID1 and vCon-
tourVecID1. For more inform ation see, Section 2.4, 
"Working with Output in FEMAP 2020.1 and 
above". IDs of output vectors for contour vector.
INT4 ContourVecID2V2[0..2]
orV ARIANT vContourVecID2V2These properties replace ContourVecID2 and vCon-
tourVecID2. For more inform ation see, Section 2.4, 
"Working with Output in FEMAP 2020.1 and above". 
IDs of output vectors for second contour vector.
INT4 ContourVecID3V2[0..2]
or
V ARIANT vContourVecID3V2These properties replace ContourVecID3 and vCon-
tourVecID3. For more inform ation see, Section 2.4, 
"Working with Output in FEMAP 2020.1 and 
above". 
IDs of output vectors for third contour vector.
BOOL ContourVecOn[0..2]
or
V ARIANT vContourVecOnVisibility flag for indi vidual contour arrow.  
ContourVecOn(0)=Arrow 1
ContourVecOn(1)=Arrow 2
ContourVecOn(2)=Arrow 3When True, contour arrow will be displayed.
INT4 ContourVecCSys Contour vector CSys.REAL8 ContourVecDir[0..2]
or
V ARIANT vContourVecDirComponents of contou r vector direction.Property Description
 API-3090  
INT4 ContourVecColor1Color of Contour Arrow 1 - Use enum for color for 
easier selection of color)
INT4 ContourVecColor2 Color for second contour vector.
INT4 ContourVecColor3 Color for third contour vector.
INT4 ContourVecDigits(OBSOLETE) For FEMAP 20 20.1 and above, use 
various Digits Control properties on the View 
Object to specify options for display of real numbers in the Graphics Window.
Number of digits in contour vector labels (0 to 15)
INT4 ContourVecLength Length of contour vectors
INT4 StreamLineOptDetermines what location(s)  are used to initiate 
streamlines (0 – uses vStreamLineLocation, 1 – uses StreamLineID as a point ID, 2 – uses StreamLineID 
as a group ID)
INT4 StreamLineIDID of a point or group of points used to initiate a 
streamline
INT4 StreamLineRungeKuttaOrderControls accuracy of streamline solution – the 
higher the value, the more accurate and slower the solution (1 to 4)
REAL8 StreamLineToleranceControls accuracy of stre amline solution – the lower 
the value, the more accura te and slower the solution 
(1e-15 to 1)
REAL8 StreamLineMaxLenFactorThis is a multiplier times the model “diameter” – if 
the streamline is too long, calculation is terminated 
(1e-15 upwards)
REAL8 StreamLineMinSpeedPctThis is a percentage of the maximum speed – if the 
speed gets too low, calcula tion is terminated (1e-15 
to 100)
REAL8 StreamLineMaxTime Not UsedREAL8 StreamLineLocation[0..2]
or
V ARIANT vStreamLineLocationXYZ location of start point of streamline if Stream-
LineOpt = 0
INT4 TransparencyPercentTransparency percentage applied to all entities 
(0=opaque,100=fully transparent)
BOOL RotateAroundModelAxesIf True, dynamic rotations are around the model 
axes. If False, screen axes. (used if RotateUseAxis is 
true)Property Description
   API-3091
BOOL RotateSingleAxisIf True, dynamic rotations are around a single axis 
based on the pred ominant direction.  (used if Rota-
teUseAxis is true)
BOOL RotateUseAxisIf True, single and model axis dynamic rotation is 
available.
INT4 RotateCSysThe ID of the Coordinate System used for rotations 
by the View Rotate command.
INT4 UserContourPalette[0..63]
or
V ARIANT vUserContourPaletteColors for user contour palette.
INT4 MaxUserContourPalette Number of co lors stored in UserContour Palette.
INT4 TransformDeformModeControls destination of transformed deformation 
data
0 = None
1 = Coordinate System given in TransformDe-formCSys2 = Nodal Output Coordinate System
INT4 TransformDeformCSysDestination coordinate system when 
TransformDeformMode = 1
BOOL TransformDeformX
Control which components of the transformed defor-
mation are displayedBOOL TransformDeformY
BOOL TransformDeformZBOOL TransformDeformXInput
Control which components of the transformed defor-
mation are used for transformation.BOOL TransformDeformYInput
BOOL TransformDeformZInput
INT4 TransformNodalModeControls contour/criteria d estination coordinate sys-
tem for transformed nodal output vectors0 = None
1 = Coordinate System given in TransformNod-
alCSys2 = Nodal Output Coordinate System
INT4 TransformNodalCSysDestination coordinate system when 
TransformNodalMode = 1Property Description
 API-3092  
INT4 TransformPlateModeControls contour/criteria destination for transformed 
plate element output vectors
0 = None
3 = Material Coordinate System4 = Vector defined by axis TransformPlateDOF of 
Coordinate System TransformPlateCSys projected 
onto plate5 = Vector defined by TransformPlateVector pro-
jected onto plate
INT4 TransformPlateCSysDestination coordinate system when Transform-
PlateMode = 4
INT4 TransformPlateDOFAxis of destination coordi nate system when Trans-
formPlateMode = 4
INT4 TransformPlateVector[0..2]
or
V ARIANT vTransformPlateVectorVector used when TransformPlateMode = 5
REAL8 TransformPlateToleranceTolerance Angle value used when transforming 
plate output
INT4 TransformSolidModeControls contour/criteria d estination coordinate sys-
tem for transformed solid element output vectors
0 = None
6 = Coordinate System given in Transform-SolidCSys
7 = Material Coordinate System
INT4 TransformSolidCSysDestination coordinate system when 
TransformSolidMode = 4
INT4 GlobalPlyLocationFor laminate results, the global ply location to dis-
play for contour/criteria displays: 0=Location of 
Selected Output Vector, -1=Top Ply, -2=Bottom Ply, 
any other positive number is the ID of the Global Ply to display. Not used unless laminate results are 
selected.
INT4 DeformRelativeToNodeThe NodeID to deform/animate around. You must 
also set the “label” value for this to be used.
REAL8 BeamDiagramScale The scale factor for beam diagrams 
INT4 ComplexSyncMethodComplex Results - Sets me thod for complex expan-
sion 
(-1=Use Model Settings, 0=Selected Results - 
Ignore Phase Differences in View Override section, 
1=Synchronize Phase in View Override section)Property Description
   API-3093
REAL8 ComplexSyncPhaseComplex Results - Static Display Phase Angle in 
View Override section
REAL8 ComplexSyncIncrementComplex Results - Anima tion Phase Increment in 
View Override section.
REAL8 ClipPlaneOrigin[0..2]
orV ARIANT vClipPlaneOriginThe coordinates of a poin t on the model clipping 
plane
REAL8 ClipPlaneNormal[0..2]
or
V ARIANT vClipPlaneNormalThe vector components of the normal to the model 
clipping plane
BOOL BlankNodesOffIf True, nodes associated with the blanked entity 
will not be blanked.
Digits Control - View Options - Load Vectors
INT4 DO_Loads_OptionSets the Method in Digit Options. 
1 = Exponent
2 = Significant Figures
3 = Decimal Places4 = Femap Classic
BOOL DO_Loads_RoundToZero Sets On/Off for Round To Zero.REAL8 
DO_Loads_RoundToZeroValueSets value for Round To Zero.
INT4
DO_Loads_BeforeDecimalSeparatorSets the before Exponent Style.
0 = .1231 = 0.123
2 = 1.123
INT4
DO_Loads_MinimumExponentSizeSets the minimum exponent size.
0 = No E+01 = e+1
2 = e+01
3 = e+001
INT4 DO_Loads_ExponentDigitsSets the number of digits for the Exponent method. 
Can be 2 to 15 digits.
INT4 DO_Loads_SigFigsSets the number of Significant Figures for the Sig-
nificant Figure Method. Can be 1 to 15
INT4 DO_Loads_LeadingZerosSets the Maximum Zeros after Decimal Separator 
for the Significant Figure Method. Can be 0 to 10.
INT4 DO_Loads_TrailingZerosSets the Maximum Zeros before Decimal Separator  
for the Significant Figure Method. Can be 0 to 10.Property Description
 API-3094  
INT4 DO_Loads_DecimalPlacesSets the Number of decimal places for the Decimal 
Place Method. Can be 1 to 15.
INT4 DO_Loads_MaxDigitsSets the Maximum number of digits for the Decimal 
Place Method. Can be 2 to 16. Must be greater than 
number of decimal places.
INT4 DO_Loads_BaseExponentSets the Base Exponent for the Decimal Place 
Method. Can be -30 to 30.
INT4 DO_Loads_OriginalDigitsSets the Number of Digits for the Femap Classic 
Method. Can be 0 to 15.
BOOL DO_Loads_ExponentSets the On/Off for Forc e Exponent in the Femap 
Classic Method.
Digits Control - View Options - Constraint
INT4 DO_BCs_OptionSets the Method in Digit Options.
1 = Exponent2 = Significant Figures
3 = Decimal Places
4 = Femap Classic
BOOL DO_BCs_RoundToZero Sets On/Off for Round To Zero.REAL8 
DO_BCs_RoundToZeroValueSets value for Round To Zero.
INT4
DO_BCs_BeforeDecimalSeparatorSets the before Exponent Style.
0 = .123
1 = 0.1232 = 1.123
INT4
DO_BCs_MinimumExponentSizeSets the minimum exponent size.
0 = No E+0
1 = e+12 = e+01
3 = e+001
INT4 DO_BCs_ExponentDigitsSets the number of digits for the Exponent method. 
Can be 2 to 15 digits.
INT4 DO_BCs_SigFigsSets the number of Significant Figures for the Sig-
nificant Figure Method. Can be 1 to 15
INT4 DO_BCs_LeadingZerosSets the Maximum Zeros after Decimal Separator 
for the Significant Figure Method. Can be 0 to 10.
INT4 DO_BCs_TrailingZerosSets the Maximum Zeros before Decimal Separator  
for the Significant Figure Method. Can be 0 to 10.Property Description
   API-3095
INT4 DO_BCs_DecimalPlacesSets the Number of decimal places for the Decimal 
Place Method. Can be 1 to 15.
INT4 DO_BCs_MaxDigitsSets the Maximum number of digits for the Decimal 
Place Method. Can be 2 to 16. Must be greater than 
number of decimal places.
INT4 DO_BCs_BaseExponentSets the Base Exponent for the Decimal Place 
Method. Can be -30 to 30.
INT4 DO_BCs_OriginalDigitsSets the Number of Digits for the Femap Classic 
Method. Can be 0 to 15.
BOOL DO_BCs_ExponentSets the On/Off for Forc e Exponent in the Femap 
Classic Method.
Digits Control - View Options - Deformed Model
INT4 DO_Deformed_OptionSets the Method in Digit Options.
1 = Exponent2 = Significant Figures
3 = Decimal Places
4 = Femap Classic
BOOL DO_Deformed_RoundToZero Sets  On/Off for Round To Zero.
REAL8 
DO_Deformed_RoundToZeroValueSets value for Round To Zero.
INT4
DO_Deformed_BeforeDecimalSeparatorSets the before Exponent Style.
0 = .123
1 = 0.1232 = 1.123
INT4
DO_Deformed_MinimumExponentSizeSets the minimum exponent size.
0 = No E+0
1 = e+12 = e+01
3 = e+001
INT4 DO_Deformed_ExponentDigitsSets the number of digits for the Exponent method. 
Can be 2 to 15 digits.
INT4 DO_Deformed_SigFigsSets the number of Significant Figures for the Sig-
nificant Figure Method. Can be 1 to 15
INT4 DO_Deformed_LeadingZerosSets the Maximum Zeros after Decimal Separator 
for the Significant Figure Method. Can be 0 to 10.
INT4 DO_Deformed_TrailingZerosSets the Maximum Zeros before Decimal Separator  
for the Significant Figure Method. Can be 0 to 10.Property Description
 API-3096  
INT4 DO_Deformed_DecimalPlacesSets the Number of decimal places for the Decimal 
Place Method. Can be 1 to 15.
INT4 DO_Deformed_MaxDigitsSets the Maximum number of digits for the Decimal 
Place Method. Can be 2 to 16. Must be greater than 
number of decimal places.
INT4 DO_Deformed_BaseExponentSets the Base Exponent for the Decimal Place 
Method. Can be -30 to 30.
INT4 DO_Deformed_OriginalDigitsSets the Number of Digits for the Femap Classic 
Method. Can be 0 to 15.
BOOL DO_Deformed_ExponentSets the On/Off for Forc e Exponent in the Femap 
Classic Method.
Digits Control - View Options - Contour/Criteria Style
INT4 DO_Criteria_OptionSets the Method in Digit Options.
1 = Exponent2 = Significant Figures
3 = Decimal Places
4 = Femap Classic
BOOL DO_Criteria_RoundToZero Set s On/Off for Round To Zero.
REAL8 
DO_Criteria_RoundToZeroValueSets value for Round To Zero.
INT4
DO_Criteria_BeforeDecimalSeparatorSets the before Exponent Style.
0 = .123
1 = 0.1232 = 1.123
INT4
DO_Criteria_MinimumExponentSizeSets the minimum exponent size.
0 = No E+0
1 = e+12 = e+01
3 = e+001
INT4 DO_Criteria_ExponentDigitsSets the number of digits for the Exponent method. 
Can be 2 to 15 digits.
INT4 DO_Criteria_SigFigsSets the number of Significant Figures for the Sig-
nificant Figure Method. Can be 1 to 15
INT4 DO_Criteria_LeadingZerosSets the Maximum Zeros after Decimal Separator 
for the Significant Figure Method. Can be 0 to 10.
INT4 DO_Criteria_TrailingZerosSets the Maximum Zeros before Decimal Separator  
for the Significant Figure Method. Can be 0 to 10.Property Description
   API-3097
INT4 DO_Criteria_DecimalPlacesSets the Number of decimal places for the Decimal 
Place Method. Can be 1 to 15.
INT4 DO_Criteria_MaxDigitsSets the Maximum number of digits for the Decimal 
Place Method. Can be 2 to 16. Must be greater than 
number of decimal places.
INT4 DO_Criteria_BaseExponentSets the Base Exponent for the Decimal Place 
Method. Can be -30 to 30.
INT4 DO_Criteria_OriginalDigitsSets the Number of Digits for the Femap Classic 
Method. Can be 0 to 15.
BOOL DO_Criteria_ExponentSets the On/Off for Forc e Exponent in the Femap 
Classic Method.
Digits Control - View Options - Contour/Criteria Legend
INT4 DO_ContourLegend_OptionSets the Method in Digit Options.
1 = Exponent2 = Significant Figures
3 = Decimal Places
4 = Femap Classic
BOOL 
DO_ContourLegend_RoundToZeroSets On/Off for Round To Zero.
REAL8 
DO_ContourLegend_RoundToZeroValueSets value for Round To Zero.
INT4
DO_ContourLegend_Befo reDecimalSeparatorSets the before Exponent Style.
0 = .1231 = 0.123
2 = 1.123
INT4
DO_ContourLegend_MinimumExponentSizeSets the minimum exponent size.
0 = No E+01 = e+1
2 = e+01
3 = e+001
INT4 
DO_ContourLegend_ExponentDigitsSets the number of digits for the Exponent method. 
Can be 2 to 15 digits.
INT4 DO_ContourLegend_SigFigsSets the number of Significant Figures for the Sig-
nificant Figure Method. Can be 1 to 15
INT4 DO_ContourLegend_LeadingZerosSets the Maximum Zeros after Decimal Separator 
for the Significant Figure Method. Can be 0 to 10.
INT4 DO_ContourLegend_TrailingZerosSets the Maximum Zeros before Decimal Separator  
for the Significant Figure Method. Can be 0 to 10.Property Description
 API-3098  
INT4 
DO_ContourLegend_DecimalPlacesSets the Number of decimal places for the Decimal 
Place Method. Can be 1 to 15.
INT4 DO_ContourLegend_MaxDigitsSets the Maximum number of digits for the Decimal 
Place Method. Can be 2 to 16. Must be greater than 
number of decimal places.
INT4 DO_ContourLegend_BaseExponentSets the Base Exponent for the Decimal Place 
Method. Can be -30 to 30.
INT4 DO_ContourLe gend_OriginalDigitsSets the Number of Digits for the Femap Classic 
Method. Can be 0 to 15.
BOOL DO_ContourLegend_ExponentSets the On/Off for Forc e Exponent in the Femap 
Classic Method.
Digits Control - View Options - Beam Diagram
INT4 DO_BeamDiagram_OptionSets the Method in Digit Options.
1 = Exponent2 = Significant Figures
3 = Decimal Places
4 = Femap Classic
BOOL 
DO_BeamDiagram_RoundToZeroSets On/Off for Round To Zero.
REAL8 
DO_BeamDiagram_RoundToZeroValueSets value for Round To Zero.
INT4
DO_BeamDiagram_BeforeDecimalSeparatorSets the before Exponent Style.
0 = .1231 = 0.123
2 = 1.123
INT4
DO_BeamDiagram_MinimumExponentSizeSets the minimum exponent size.
0 = No E+01 = e+1
2 = e+01
3 = e+001
INT4 
DO_BeamDiagram_ExponentDigitsSets the number of digits for the Exponent method. 
Can be 2 to 15 digits.
INT4 DO_BeamDiagram_SigFigsSets the number of Significant Figures for the Sig-
nificant Figure Method. Can be 1 to 15
INT4 DO_BeamDiagram_LeadingZerosSets the Maximum Zeros after Decimal Separator 
for the Significant Figure Method. Can be 0 to 10.
INT4 DO_BeamDiagram_TrailingZerosSets the Maximum Zeros before Decimal Separator  
for the Significant Figure Method. Can be 0 to 10.Property Description
   API-3099
INT4 DO_BeamDiagram_DecimalPlacesSets the Number of decimal places for the Decimal 
Place Method. Can be 1 to 15.
INT4 DO_BeamDiagram_MaxDigitsSets the Maximum number of digits for the Decimal 
Place Method. Can be 2 to 16. Must be greater than 
number of decimal places.
INT4 DO_BeamDiagram_BaseExponentSets the Base Exponent for the Decimal Place 
Method. Can be -30 to 30.
INT4 DO_BeamDiagram_OriginalDigitsSets the Number of Digits for the Femap Classic 
Method. Can be 0 to 15.
BOOL DO_BeamDiagram_ExponentSets the On/Off for Forc e Exponent in the Femap 
Classic Method.
Digits Control - View Options - Contour Arrow Options
INT4 DO_ContourArrow_OptionSets the Method in Digit Options.
1 = Exponent2 = Significant Figures
3 = Decimal Places
4 = Femap Classic
BOOL 
DO_ContourArrow_RoundToZeroSets On/Off for Round To Zero.
REAL8 
DO_ContourArrow_RoundToZeroValueSets value for Round To Zero.
INT4
DO_ContourArrow_Befo reDecimalSeparatorSets the before Exponent Style.
0 = .1231 = 0.123
2 = 1.123
INT4
DO_ContourArrow_MinimumExponentSizeSets the minimum exponent size.
0 = No E+01 = e+1
2 = e+01
3 = e+001
INT4 
DO_ContourArrow_ExponentDigitsSets the number of digits for the Exponent method. 
Can be 2 to 15 digits.
INT4 DO_ContourArrow_SigFigsSets the number of Significant Figures for the Sig-
nificant Figure Method. Can be 1 to 15
INT4 DO_ContourArrow_LeadingZerosSets the Maximum Zeros after Decimal Separator 
for the Significant Figure Method. Can be 0 to 10.
INT4 DO_ContourArrow_TrailingZerosSets the Maximum Zeros before Decimal Separator  
for the Significant Figure Method. Can be 0 to 10.Property Description
 API-3100  
INT4 
DO_ContourArrow_DecimalPlacesSets the Number of decimal places for the Decimal 
Place Method. Can be 1 to 15.
INT4 DO_ContourArrow_MaxDigitsSets the Maximum number of digits for the Decimal 
Place Method. Can be 2 to 16. Must be greater than 
number of decimal places.
INT4 DO_ContourArrow_BaseExponentSets the Base Exponent for the Decimal Place 
Method. Can be -30 to 30.
INT4 DO_ContourArrow_OriginalDigitsSets the Number of Digits for the Femap Classic 
Method. Can be 0 to 15.
BOOL DO_ContourArrow_ExponentSets the On/Off for Forc e Exponent in the Femap 
Classic Method.
Digits Control - View Options - Freebody Vectors
INT4 DO_FreeBody_OptionSets the Method in Digit Options.
1 = Exponent2 = Significant Figures
3 = Decimal Places
4 = Femap Classic
BOOL 
DO_FreeBody_RoundToZeroSets On/Off for Round To Zero.
REAL8 
DO_FreeBody_RoundToZeroValueSets value for Round To Zero.
INT4
DO_FreeBody_BeforeDecimalSeparatorSets the before Exponent Style.
0 = .1231 = 0.123
2 = 1.123
INT4
DO_FreeBody_MinimumExponentSizeSets the minimum exponent size.
0 = No E+01 = e+1
2 = e+01
3 = e+001
INT4 
DO_FreeBody_ExponentDigitsSets the number of digits for the Exponent method. 
Can be 2 to 15 digits.
INT4 DO_FreeBody_SigFigsSets the number of Significant Figures for the Sig-
nificant Figure Method. Can be 1 to 15
INT4 DO_FreeBody_LeadingZerosSets the Maximum Zeros after Decimal Separator 
for the Significant Figure Method. Can be 0 to 10.
INT4 DO_FreeBody_TrailingZerosSets the Maximum Zeros before Decimal Separator  
for the Significant Figure Method. Can be 0 to 10.Property Description
   API-3101
INT4 
DO_FreeBody_DecimalPlacesSets the Number of decimal places for the Decimal 
Place Method. Can be 1 to 15.
INT4 DO_FreeBody_MaxDigitsSets the Maximum number of digits for the Decimal 
Place Method. Can be 2 to 16. Must be greater than 
number of decimal places.
INT4 DO_FreeBody_BaseExponentSets the Base Exponent for the Decimal Place 
Method. Can be -30 to 30.
INT4 DO_FreeBody_OriginalDigitsSets the Number of Digits for the Femap Classic 
Method. Can be 0 to 15.
BOOL DO_FreeBody_ExponentSets the On/Off for Forc e Exponent in the Femap 
Classic Method.
Model Data Contour and Discrete Value controls
BOOL ModelDataContourOnIf True, enables Show Model Data Contour in the 
Contour Data From section of Contour Model Data dialog box. In addition, th is option must be set to 
True, along with DiscreteValueOn, for a Discrete 
Value plot to be displayed.
INT4 ModelDataContourGroupID of Group specified in Show On section of the 
Contour Model Data dialog box to limit display of 
selected model data. Specify 0 for all groups or -1 to 
use the active group. Also used for Discrete Value plots.
BOOL ModelDataContourLabelsIf True, enables the Allow Labels option in the 
Show As section of the Contour Model Data dialog 
box. Also used for Discrete Value plots.
BOOL DiscreteValueOnIf True, enables On in Di screte Values section of 
Contour Model Data dialog box. In addition, Model-
DataContourOn option must be set to True for Dis-
crete Value plot to be displayed.
INT4 DiscreteValueSetID ID of Discrete Value Set to display
Legacy XY Plot Options (Should not be used)INT4 XYOutputSet[0..8]
or
V ARIANT vXYOutputSetOutput Set IDs for each curve.
INT4 XYSetRange[0..1]
orV ARIANT vXYSetRangeOutput Set IDs for all XY curves.Property Description
 API-3102  
INT4 XYOutputDataV2[0..8]
or
V ARIANT vXYOutputDataV2These properties replace XYOutputData and 
vXYOutputData. For more information see, Section 
2.4, "Working with Output in FEMAP 2020.1 and 
above".Output Vector IDs for XY curves.
INT4 XYOutputEntity[0..8]
or
V ARIANT vXYOutputEntityEntity ID (node or elemen t) for each XY curve.
INT4 Function[0..8]
or
V ARIANT vFunctionFunction IDs for XY plot curves.
REAL8 XYXmin
XY X axis range.
REAL8 XYXmax
REAL8 XYymin
XY Y aAxis range.
REAL8 XYymax
REAL8 XYScale[0..8]
or
V ARIANT vXYScaleScale factor for associated XY curve.
STRING XYTitle
XY plot titles (maximum 79 characters).
STRING XYSubtitle
INT4 XYCSys CSys for XY vs Position. INT4 XYDirection Direction for XY vs Position.INT4 XYXTics Number of tics along X axis.INT4 XYYTics Number of tics along Y axis.REAL8 PrevWindowLeft
Previous sizing of XY plot in window.REAL8 PrevWindowTop
REAL8 PrevWindowRightREAL8 PrevWindowBottomREAL8 PrevWindowXminREAL8 PrevWindowXmaxREAL8 PrevWindowYminREAL8 PrevWindowYmaxProperty Description
   API-3103
5.75.1.1  View Object Freebody Interface
The following table shows properties that were part of the View Obje ct Freebody Interface prior to 
Version 10.3. With that release, the entire meth odology of Freebody Disp lay was changed necessi-
tating changes to the API. This table shows ho w to map the old API interface to the new one.
Property Description Now Controlled By
BOOL FreebodyOnFlag indicating free-
body is on.  View Object Draw[FVI_FREE-
BODY] Property
BOOL FreebodyLoad[0..5]
orV ARIANT vFreebodyLoadFlags for load types 
for freebody.Freebody Object SumContributions 
Property 
INT4 FreebodyGroupID of group to be used 
in freebody.Freebody Object Group Property
BOOL FreebodyForceMom[0..1]
orV ARIANT vFreebodyForceMomShow forces[0] and 
moments[1].Vector visibility: Freebody Object 
ShowTotalVec and ShowNodalVec Properties. Inclusion in summation vector calcula-
tion:  Freebody Object SumCompo-
nents Property
BOOL FreebodyShowInternalShow internal free-
body data.No longer used
BOOL FreebodyShowSumShow summed data at 
each node.Still Valid
BOOL FreebodyMinVecFlagShow vectors with a 
minimum length.Still Valid
BOOL FreebodyComponentsShow vector compo-
nents.Freebody Object TotalVectorMode 
and NodalVectorMode Properties
BOOL FreebodyXYZ[0..2]
or
V ARIANT vFreebodyXYZFlags for X,Y ,Z com-
ponents. Vector visibility: Freebody Object 
ShowTotalVec and ShowNodalVec 
Properties. Inclusion in summation vector calcula-
tion:  Freebody Object SumCompo-
nents Property
BOOL FreebodyScaleMagScale vectors based on 
their magnitude.View Object Draw[FVI_FREE-
BODY_VECTOR] Property
BOOL FreebodyShowResultantShow resultant of 
summed freebody 
info.Freebody Object TotalVectorMode 
Property
 API-3104  
The following table describes new View Object Prop erties that were added in Version 10.3 for 
controlling Freebody displays.BOOL FreebodyEntityColorShow freebody with 
entity colors.View Object 
ColorMode[FVI_NODAL_F] and 
ColorMode[FVI_NODAL_M] Proper-
ties. Set to 3 for Entity Colors
INT4 FreebodyShowCSysCSys ID for freebody 
display.Freebody Object CSys Property
REAL8 FreebodyShowMagMinimum magnitude 
vector to show.Still Valid
REAL8 FreebodyShowLength[0..1]
or
V ARIANT vFreebodyShowLengthMin/Max display 
length.View Object Freebody_Length, Free-
body_UnitsPerLength, Freebody_To-tal_Force_Factor, 
Freebody_Total_Moment_Factor, 
Freebody_Nodal_Force_Factor  and Freebody_Nodal_Moment_Factor 
Properties
REAL8 FreebodyResultant-
Loc[0..2]
orV ARIANT vFreebodyResultantLocLocation for resultant 
vector.Freebody Object X, Y and Z Properties
INT4 FreebodyResultantColorColor for resultant 
vector.Freebody Object TotalVecColor Prop-
erty when Total Vector Color Mode is 
set to Freebody in the Active View
Property Description
INT4 FreebodyLength Contro ls the baseline length fo r all Freebody Vectors
INT4 FreebodyUnitsPerLengthControls the number of units per baseline length when Free-
body Vector scaling is enabled.
REAL8 FreebodyTotalForceFactor Length Factor for Freebody Total Force VectorREAL8 FreebodyTotalMomentFactor Length Factor for Freebody Total Moment VectorREAL8 FreebodyNodalForceFactor Length Factor for Freebody Nodal Force VectorsREAL8 FreebodyNodalMomentFactor Length Factor for Freebody Nodal Moment Vectors
INT4 FreebodyDigitsControls the number of digits on Freebody value labels. This 
is an alias for the Colo rMode[FVI_FREEBODY_VECTOR] 
PropertyProperty Description Now Controlled By
   API-3105
5.75.1.2  View Option Types
All of the View Option properties (Draw, Label, Co lor, ColorMode) require an index to access the 
desired values. These properties and their relate d indices correspond to the options that you can 
control in the user interface View Options  command. The following figure shows how the API 
properties relate to the variou s controls in the dialog box.
So, for example, to set the View to use Double -Sided, Elemental Contou rs, as shown above, you 
would set
               View.Draw( FVI_CONTOUR_TYPE )  = True
               View.Label( FVI_CONTOUR_TYPE ) = 1
...and save the View object. Note that for FVI_CONTOUR_TYPE, the Color( ) property is not used and does not appear in the dialog box. You should not query or set these unused properties. 
Doing so will not cause any current problem, but it will also not be useful and if those properties 
are used in future releases, it could cause errors.
Index selects 
ColorMode( )Label( )
Color( )
Value 1 Value 2Draw( )
More Propertiesoption from 
this list
More Properties

 API-3106  
The View Options  dialog does have additional controls that are not linked to the Draw( ), Label( ), 
ColorMode( ) or Color( ) properties. In the figure above, they are labeled “Value 1”, “Value 2” and 
“More Properties”. Accessing these properties is descr ibed later, first however, the following table 
maps the index used by Draw( ), Label( ), ColorMode( ) and Color( ) to the names in the View 
Options  command.
Text in View Options Index Constant
Labels, Entities and ColorsLabel Parameters 0 FVI_LABELCoordinate System 1 FVI_CSYSPoint 2 FVI_POINTCurve 3 FVI_CURVECombined Curve 95 FVI_COMPOSITE_CURVECurve - Mesh Size 24 FVI_CURVE_MESHSIZECurve/Surface Direction 39 FVI_CURVE_ACCURACYSurface 4 FVI_SURFACEBoundary 27 FVI_BOUNDARYSolid 5 FVI_SOLIDMesh Point 119 FVI_MESH_POINTText 6 FVI_TEXTNode 7 FVI_NODENode - Perm Constraint 8 FVI_NODE_PERMCONSTRAINTElement 9 FVI_ELEMENTElement - Direction 10 FVI_ELEMENT_DIRECTIONElement - Offsets/Releases 11 FVI_ELEMENT_OFFSETElement - Orientation/Shape 12               FVI_ELEMENT_ORIENTElement - Beam Y-Axis 13 FVI_BEAM_YAXISElement - Coordinate System 96 FVI_ELEM_CSYSElement - Material Direction 115 FVI_ELEM_MATL_DIRElement - Weld 90 FVI_ELEMENT_WELDElement - Rigid 94 FVI_RIGIDElement - Cohesive 12 0 FVI_ELEMENT_COHESIVE
Element - Nastran General Matrix 125 FVI_NASTRAN_GENERAL_MATRIX
   API-3107
Element - Shell 121 FVI_ELEMENT_SHELL
Load Vectors 78 FVI_LOAD_VECTORSLoad - Body 100 FVI_LOAD_BODYLoad - Force and Bearing 14 FVI_LOAD_FORCELoad - Moment and Torque 15 FVI_LOAD_MOMENTLoad - Temperature 16 FVI_LOAD_THERMALLoad - Distributed Load 71 FVI_LOAD_DISTRIBUTEDLOADLoad - Pressure 17 FVI_LOAD_PRESSURELoad - Acceleration 18 FVI_LOAD_ACCELERATIONLoad - Velocity 72 FVI_LOAD_VELOCITYLoad - Enforced Displacemen t 19 FVI_LOAD_ENFORCEDDISP
Load - Nonlinear Force 73 FVI_LOAD_NONLINEARFORCELoad - Heat Generation 66 FVI_LOAD_HEATGENLoad - Heat Flux 67 FVI_LOAD_HEATFLUXLoad - Convection 68 FVI_LOAD_CONVECTIONLoad - Radiation 69 FVI_LOAD_RADIATIONLoad - Bolt Preload 93 FVI_BOLT_PRELOADLoad - Fluid Tracking 81 FVI_LOAD_FLUIDTRACKINGLoad - Unknown Condition 82 FVI_LOAD_UNKNOWNLoad - Slip Wall Conditio n 83 FVI_LOAD_SLIPWALL
Load - Fan Curve 84 FVI_LOAD_FANCURVELoad - Periodic Condi tion 85 FVI_LOAD_PERIODIC
Constraint 20 FVI_CONSTRAINTConstraint Equation 21 FVI_CONSTRAINT_EQUATIONConnector 79 FVI_CONNECTORConnection Region 91 FVI_CONNECTION_REGIONCombined - Eliminated Points 99 FVI_INTERIOR_POINTCombined - Eliminated Cu rves 97 FVI_INTERIOR_CURVE
Combined - Eliminated Surfa ces 98 FVI_INTERIOR_SURFACEText in View Options Index Constant
 API-3108  
Monitor Point 123 FVI_MONITOR_POINT
Aero Panel 102 FVI_AERO_PANELAero Mesh 103 FVI_AERO_MESHAero Interference 108 FVI_AERO_INTERFERENCEAero Spline 104 FVI_AERO_SPLINEAero Control Surface 105 FVI_AERO_SURFACETools and View StyleFree Edge and Face 22 FVI_FREE_EDGEShrink Elements 23 FVI_SHRINK_ELEMFill, Backfaces and Hidden 25 FVI_FILL_ELEMFilled Edges 26 FVI_FILLED_EDGESFeature Line 118 FVI_FEATURE_LINECurve Connectivity 124 FVI_CURVE_CONNECTIVITYGraphics Options 77 FVI_RENDER_OPTIONSPerformance Graphics 116 FVI_PERF_GRAPHICSTransparency 92 FVI_TRANSPARENCYShading 28 FVI_SHADINGPerspective 29 FVI_PERSPECTIVEAxisymmetric Axis 87 FVI_AXISYM_AXISView Legend 31 FVI_VIEW_LEGENDView Axes 32 FVI_VIEW_AXESOrigin 33 FVI_ORIGINWorkplane and Rule rs 34 FVI_WORKPLANE
Workplane Grid 35 FVI_WORKPLANE_GRIDGroup Clipping Planes 36 FVI_CLIPPING_PLANESymbols 37 FVI_SYMBOLPreview 109 FVI_PREVIEWView Aspect Ratio 38 FVI_ASPECT_RATIOModel Clipping Plane 101 FVI_CLIP_PLANEText in View Options Index Constant
   API-3109
PostProcessing
Post Titles 40 FVI_POST_TITLESDeformed Style 41 FVI_DEFORMED_STYLEVector Style 42 FVI_VECTOR_STYLEAnimated Style 43 FVI_ANIMATED_STYLEDeformed Model 44 FVI_DEFORMEDUndeformed Model 45 FVI_UNDEFORMEDTrace Style 74 FVI_TRACE_STYLEContour Type 80 FVI_CONTOUR_TYPEContour/Criteria Style 46 FVI_CONTOUR_STYLEContour/Criteria Levels 47 FVI_CONTOUR_LEVELSContour/Criteria Legend  48 FVI_CONTOUR_LEGEND
Criteria Limits 49 FVI_CRITERIA_LIMITSCriteria - Elements that Pass 50 FVI_CRITERIA_PASSCriteria - Elements that Fail 51 FVI_CRITERIA_FAILRegion - Post 122 FVI_REGION_POSTBeam Diagram 86 FVI_BEAM_DIAGRAMIsoSurface 76 FVI_ISOSURFACEIsoLine 88 FVI_ISOLINEStreamline 89 FVI_STREAMLINEContour Arrow Style 75 FVI_CONTOUR_VECTORContour Arrow Options 117 FVI_CONTOUR_ARROW_OPTFreebody 114 FVI_FREEBODYFreebody Node Markers 106 FVI_FREEBODY_NODEMARKERFreebody Vectors 113 FVI_FREEBODY_VECTORFreebody Total Force 107 FVI_FREEBODY_TOTALFFreebody Total Moment 110 FVI_FREEBODY_TOTALMFreebody Nodal Force 111 FVI_FREEBODY_NODAL_FFreebody Nodal Moment 112 FVI_FREEBODY_NODAL_MText in View Options Index Constant
 API-3110  
The following table describes how to access “extra  properties” used by some dialog options:
Text in View Options Control Property
Labels, Entities and ColorsLabel Parameters Value1, Text Depth Offset RenderPushLabel
Load Vectors Value1, Load Len LoadVecLength
Value2, Min Scale LoadVectorMinScale
Digits... buttonDigit Options Dialog...
See “Digits Control - View Options - Load 
Vectors” section for information
Constraint Digits... buttonDigit Options Dialog...
See “Digits Control - View Options - Con-
straint” section for information
Tools and View StyleShrink Elements Value1, Shrink To % ShrinkFactorFeature Line Value1, Angle FeatureLineAngle
Curve Connectivity More-Connectivity Colors Curve Connectivity Colors Dialog...
Wirebody toggle CurveConnectWirebody
Wirebody Color CurveConnectWirebodyColor
Free toggle CurveConnectFree
Free Color CurveConnectFreeColor
Manifold toggle CurveConnectManifold
Manifold Color CurveConnectManifoldColor
NonManifold toggle CurveConnectNonManifold
NonManifold Color CurveConnectNonManifoldColor
   API-3111
Graphics OptionsValue1, Offset Factor RenderPushForward
Value2, Offset Units RenderPushUnit
More - Advanced Depth 
Control buttonAdvanced Depth Control Dialog...
Mesh Edit / Free Edge / 
Aero Entities / Contact /
Element / Boundary / 
Surface Depth OffsetRenderLogDepthOffset
Filled Edge Depth Offset 
FactorRenderPushForward
Filled Edge Depth Offset 
UnitsRenderPushUnit
Text Depth Offset RenderPushLabel
Undeformed Depth Off set RenderPushUndeformed
Transparency Value1, Percent TransparencyPercent
Shading Value1, % Ambient AmbientLight
Value2, Distance SpotlightDist
More - Light...Light (when Light Location/Type is set to 
Viewer, Viewer Spot, Model, or Model Spot)
SpotlightDir (when Light Location/Type is 
set to Model or Model Spot)
Perspective Value1, Distance PerspectiveDist
View Legend More - Custom Position... Select Vi ew Position - View Legend Dialog...
X ViewLegendLocation(0)Y ViewLegendLocation(1)
Justification option ViewLegendJustification
Lock Justification toggle Vi ewLegendLockJustification
View Axes Value1, % Size
More - Position... Select View Po sition - View Axes Dialog...
X AxisLocation (0)Y AxisLocation (1)
Symbols Value1, Load Len LoadVecLength
Value2, Other Vec OtherVecLengthText in View Options Control Property
 API-3112  
View Aspect Ratio Valu e1, Aspect Ratio Aspect
Model Clipping PlaneMore - Clipping Plane Plane (Met hod) - Define Clipping Plane...
Origin for plane ClipPlaneOrigin
Normal direction of plane ClipPlaneNormal
PostProcessing
Post Titles More - Custom Position... Select Vi ew Position - Post Titles Dialog...
X PostTitlesLocation(0)Y PostTitlesLocation(1)
Justification option PostTitlesJustification
Lock Justification toggle PostTitlesLockJustification
Deformed Style Value1, Scale % DeformedRelScale
Value2, Scale Act DeformedAbsScale
Vector Style Value1, Top Percent ArrowsToLabel
Animated Style Value1, Frames AnimationFrames
Value2, Delay AnimationDelay
Deformed ModelValue1, Node ID DeformRelativeToNode
Digits... buttonDigit Options Dialog...
See “Digits Control - View Options - 
Deformed Model” sec tion for information
Undeformed Model Value1, Depth Offset % RenderPushUndeformedText in View Options Control Property
   API-3113
Contour TypeMore - Contour Options Select  Contour Options Dialog...
Contour Group ContourGroup
Contour Type Label( FVI_CONTOUR_TYPE  )
Data Conversion ColorMode( FVI_CONTOUR_STYLE  )
No Averaging ContourElemUnaveraged
Property ContourElemBreakProp
Material ContourElemBreakMatl
Layer ContourElemBreakLayer
Color ContourElemBreakColor
Angle Between Check C ontourElemBreakGeom
Angle Between Text ContourElemBreakAngle
Double-Sided Planar Draw( FVI_CONTOUR_TYPE  )
Additional Element Data ContourVecAddl
Rendered Contours ColorMode( FVI_CONTOUR_TYPE  )
Contour/Criteria Style Value1, Label Freq ContourLabelFreq
Digits... buttonDigit Options Dialog...
See “Digits Control - View Options - Con-
tour/Criteria Style” section for information
More - Contour OptionsSelect Contour Options Dialog... 
See “Contour Type” in this table for more 
information
Contour/Criteria Levels Value1, Minimum UserContourValue(11)
Value2, Maximum UserContourValue(0)
More - Set Levels Contour/Criteria Levels Dialog...
Specified LevelsUserContourLevel(1 ..10) for Level,
UserContourValue(1..10) for Values
Colors ContourColor
User PaletteMaxUserContourPalette,
UserContourPaletteText in View Options Control Property
 API-3114  
Contour/Criteria Legend Value1, Label Freq ContourLegendFreq
Digits... buttonDigit Options Dialog...
See “Digits Control - View Options - Con-
tour/Criteria Legend” se ction for information
More - Custom Position...Select View Position - Contour Legend 
Dialog...
X ContourLegendLocation(0)Y ContourLegendLocation(1)
Vertical/Horizontal optio n ContourLegendHorizontal
Lock Orientation toggle ContourLegendLockOrientation
Reversed toggle ContourLegendReversed
Label Top/Left toggle ContourLegendTopLeftLabel
More - Legend Size... Enter Contour Legend Size Dialog...
Length (%) ContourLegendShrinkPct
Width (%) ContourLegendWidthPct
Criteria LimitsValue1, Minimum CriteriaMin
Value2, Maximum CriteriaMax
Beam Diagram Value1, Scale % BeamDiagramScale
Digits... buttonDigit Options Dialog...
See “Digits Control - View Options - Beam 
Diagram” section for information
IsoSurface Value1, IsoSurface At IsosurfaceValueIsoLine Value1, IsoLine At IsosurfaceValue
StreamlineValue1, Max Length StreamLineMaxLenFactor
Value2, Min Speed StreamLineMinSpeedPct
More - Streamline Lo c StreamLineLocation
Contour Arrow Style Value1, Min Value ContourVecMinVec
Value2, Length ContourVecLength
Contour Arrow Options Value2, Min Length ContourVecMinLen
Digits... buttonDigit Options Dialog...
See “Digits Control - View Options - Contour 
Arrow Options” section for informationText in View Options Control Property
   API-3115
5.75.1.3  Model Contour Data Types
The View, Advanced Post, Model Contour Data comm and, which is used to create contour, crite-
ria, or beam diagram plots of model data, opens the Contour Model Data dialog box:
The types of properties and materials in the model determine which model data  items appear in the 
Contour Data From section and can be plotted. To  specify which model data item to display, use 
the SetContourModelDataType method (see Se ction 5.75.2.20, "SetModelDataContourType"). 
Some more commonly used items are available all the time, thus FEMA P provides descriptive 
enumerations (enums) which may make it easier to  select the desired item instead of needing to 
reference the table below to dete rmine the “index” value. These can  be specified by only specify-
ing the zMDCType argument for SetContourModelDataType.
For example, to select the “Pla ne Element Offset” item under “E lement/Property Data”, simply 
specify the zMDCType with a “enum” and enter 0 for the other 3 arguments:Freebody VectorsValue1, Units/Length Fre ebodyUnitsPerLength
Value2, Length FreebodyLength
Digits... buttonDigit Options Dialog...
See “Digits Control - View Options - Free-
body Vectors” section for information
Freebody Total Force Value2, Factor FreebodyTotalForceFactorFreebody Total Moment Value2, F actor FreebodyTotalMomentFactor
Freebody Nodal Force Value2, Factor FreebodyNodalForceFactor
Freebody Nodal Force Value2, Factor FreebodyNodalMomentFactorText in View Options Control Property

 API-3116  
      v.SetModelDataContourType(FVMDC_ELEM_PLATE_OFFSET,0,0,0)
For material items which are not as common, set zMDCType to FVMDC_MATL_TABLE, set the 
zMaterialType to a valid value (i.e.,  a type of material that exists in the model), then use the iLoca-
tion value to specify an array inde x location for the “mval” property  on the Material object (See 
Section 5.47.1.2, "Mater ial Array Index Values").
For example, to select “ISOTRIPIC Nu ” (Poisson’s Ratio), use the following:
 v.SetModelDataContourType(FVMDC_MATL_TABLE,0,FMT_ISOTROPIC,6)
For property items which are not as common, set zMDCType to FVMDC_PROP_TABLE, set the 
zElementType to a valid value (i.e., a type of prop erty that exists in the model), then use the iLoca-
tion value to specify an array in dex location for the “pval” proper ty on the Property object (See 
Section 5.60.2, "Accessing Property Properties").
For example, to select “PLATE NS Mass/Area”  (Nonstructural mass/ar ea), use the following:
 v.SetModelDataContourType(FVMDC_PROP_TABLE,FET_L_PLATE,0,7)
The following table contains the enums and inde x values for the “commonly used” items available 
when selecting model data to display with Vi ew, Advanced Post, Model Contour Data command.
Text in View Options Index Constant
None Selected 0 FVMDC_NONE_SELECTED
Element Quality - FEMAP ChecksAspect Ratio 8
FVMDC_ELEM_ASPECT_RATIO
Taper 9 FVMDC_ELEM_TAPER
Alt Taper 10 FVMDC_ELEM_ALT_TAPER
Internal Angles 11 FVMDC_ELEM_INTERNAL_ANGLE
Skew 12 FVMDC_ELEM_SKEW
Warping 13 FVMDC_ELEM_WARPING
Nastran Warping 14 FVMDC_ELEM_NASTRAN_WARPING
Tet Collapse 15 FVMDC_ELEM_TET_COLLAPSE
Jacobian 16 FVMDC_ELEM_JACOBIAN
Combined Quality 17 FVMDC_ELEM_COMBINED
Explicit Time Step 18 FVMDC_ELEM_EXPLICIT_TIME_STEP
Element Quality - NX Nastran Checks (Quads)
Quad Skew 19 FVMDC_ELEM_NQSKEW
Quad Taper 20 FVMDC_ELEM_NQTAPER
Quad Warp 21 FVMDC_ELEM_NQWARP
   API-3117
Quad IAMin 22 FVMDC_ELEM_NQIAMIN
Quad IAMax 23 FVMDC_ELEM_NQIAMAX
Quad AR (Aspect Ratio) 47 FVMDC_ELEM_NQAR
Element Quality - NX Nastran Checks (Triangles)
Tria Skew 24 FVMDC_ELEM_NTSKEW
Tria IA Max 25 FVMDC_ELEM_NTIAMAX
Tria AR (Aspect Ratio) 48 FVMDC_ELEM_NTAR
Tria EPLR 49 FVMDC_ELEM_NT6EPLR
Element Quality - NX Nastran Checks (Tetrahedrals)Tetra AR (Aspect Ratio) 26
FVMDC_ELEM_NTETAR
Tetra EPLR 27 FVMDC_ELEM_NTETEPLR
Tetra EPIA 50 FVMDC_ELEM_NTETEPIA
Tetra DetJ 28 FVMDC_ELEM_NTETDETJ
Element Quality - NX Nastran Checks (Hexahedrals/Bricks)Hex AR (Aspect Ratio) 29
FVMDC_ELEM_NHEXAR
Hex EPLR 30 FVMDC_ELEM_NHEXEPLR
Hex EPIA 51 FVMDC_ELEM_NHEXEPIA
Hex DetJ 31 FVMDC_ELEM_NHEXDETJ
Hex Warp 32 FVMDC_ELEM_NHEXWARP
Element Quality - NX Nastran Checks (Wedges)Penta AR 33
FVMDC_ELEM_NPENAR
Penta EPLR 34 FVMDC_ELEM_NPENEPLR
Penta EPIA 52 FVMDC_ELEM_NPENEPIA
Penta DetJ 35 FVMDC_ELEM_NPENDETJ
Penta Warp 36 FVMDC_ELEM_NPENWARP
Element Quality - NX Nastran Checks (Pyramids)
Pyr AR 37 FVMDC_ELEM_NPYRAR
Pyr EPLR 38 FVMDC_ELEM_NPYREPLRText in View Options Index Constant
 API-3118  
Pyr EPIA 53 FVMDC_ELEM_NPYREPIA
Pyr Warp 39 FVMDC_ELEM_NPYRWARP
Pyr DetJ 40 FVMDC_ELEM_NPYRDETJ
Material Data
Youngs Modulus, E 1 FVMDC_MATL_E
Items in Other Material Data (see above 
for explanation on how to use this constant 
with SetModelDataContourType to access these Material values)2
FVMDC_MATL_TABLE
Element/Property Data
Plane Element Thickness 3 FVMDC_PROP_PLATE_THICKNESS
Plane Element Offset 44 FVMDC_ELEM_PLATE_OFFSET
Bar/Beam/Rod Area 4 FVMDC_PROP_LINE_AREA
Bar/Beam I1 5 FVMDC_PROP_LINE_I1
Bar/Beam I2 6 FVMDC_PROP_LINE_I2
Items in Other Property Data (see above 
for explanation on how to use this constant with SetModelDataContourType to access 
these Material values)7
FVMDC_PROP_TABLE
Entity ID
Element (ID) 41 FVMDC_ELEM_ID
Material (ID) 42 FVMDC_MATL_ID
Property (ID) 43 FVMDC_PROP_IDText in View Options Index Constant
Initialize   API-3119
5.75.2  View Object Methods
5.75.2.1  Initialize
Initialize
( void )
Description:This initializes a view object to the default settings.Input:NoneOutput:NoneReturn Code:
None
Remarks/Usage:View Objects have many properties, and it is diff icult and time consuming to initialize them all individ-
ually. This method initializes the object just like creating a new view  in FEMAP with the default view 
settings. You can then selectively modify  just the propertie s that you need.
Example:None
 API-3120  GetMultiGroupList
5.75.2.2  GetMultiGroupList
GetMultiGroupList
( nGroups, nGroupID )
Description:This method retrieves the grou p ids used in the current view for the Multi Group Display.
Input:NoneOutput:INT4 nGroups Number of groups in nGroupID
INT4 nGroupID[0..nGroups-1] The group IDs that have been re ferenced in Mu lti Group display 
(Positive ID value = “Shown”, Negative ID value = “Hidden”)
Return Code:FE_NO_MEMORY Unable to allocate memory for group list.FE_NOT_A V AILABLE No groups have be referenced in the Multi Group Display.
Remarks/Usage:NoneExample:None
SetMultiGroupList   API-3121
5.75.2.3  SetMultiGroupList
SetMultiGroupList
( bClear, nGroups, nGroupID )
Description:This method sets the group id s to be used in the current view for the Multi Group Display.
Input:
INT4 bClearIf True then clear the list of groups  in the multi group display before 
adding groups in nGroupID.
INT4 nGroups Number of groups in nGroupID
INT4 nGroupID[0..nGroups-1] The group IDs used in the Multi Group display 
(Positive ID value = “Show”, Negative ID value = “Hide”)
Output:
None
Return Code:NoneRemarks/Usage:
Example:
None
 API-3122  ClearMultiGroupList
5.75.2.4  ClearMultiGroupList
ClearMultiGroupList
( void )
Description:This method clear the groups  in the Multi Group Display.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:
Example:
None
Visible   API-3123
5.75.2.5  Visible
Visible
( visible )
Description:This makes a view visible on the screen, or removes it from the screen.
Input:BOOL visible Set to True to make a view visible, False to remove it.
Output:NoneReturn Code:
FE_FAILThe operation failed. Either you aske d to make a view visible that 
was already visible, or to remo ve a view that was not visible.
Remarks/Usage:This method accomplishes the same task as the View, Activate  command.
Example:None
 API-3124  Redraw
5.75.2.6  Redraw
Redraw
( void )
Description:Redraws the current view.Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:The current object must be loaded with a view  that is visible on the screen. Same as the View, Redraw  
command.
Example:None
Regenerate   API-3125
5.75.2.7  Regenerate
Regenerate
( void )
Description:Regenerates the current view.Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:The current object must be loaded with a view  that is visible on the screen. Same as the View, Regener-
ate command.
Example:None
 API-3126  IsLayerVisible
5.75.2.8  IsLayerVisible
IsLayerVisible
( layerID )
Description:Indicates whether the selected layer is in the visible layer list.Input:INT4 layerID ID of layer to check.Output:NoneReturn Code:
FE_FAILSelected layer is not in  the visible layer list (FE_OK means layer is 
in the visible layer list).
Remarks/Usage:The current object must be loaded with  a view that is visible on the screen.
This command does not tell whether th e visible layer list is actually bein g used. If you are displaying all 
layers, layers that are not in the visible layer list will still be reported as not visi ble, even though they are 
because the list is not used.
Example:None
SetLayerVisible   API-3127
5.75.2.9  SetLayerVisible
SetLayerVisible
( layerID, visible )
Description:Adds or removes layers from the visible layer list.Input:INT4 layerID ID of layer to modify.
BOOL visibleSet to True to make th e layer visible, False to remove it from the vis-
ible list.
Output:NoneReturn Code:NoneRemarks/Usage:The current object must be loaded with  a view that is visible on the screen.
In addition to this command, you mu st also change the ShowAllLayers property to make sure that the 
visible layer list is being used (instead of all layers).
Example:None
 API-3128  Rotate
5.75.2.10  Rotate
Rotate
( oX, oY, oZ, dX, dY, dZ, angle )
Description:Rotates the current view ar ound the specified axis.
Input:REAL8 oX
The origin of the axis of rotation - in global rectangular coordinates. REAL8 oY
REAL8 oZREAL8 dX
The components of th e axis of rotation. REAL8 dY
REAL8 dZREAL8 angle The angle of rotation, in degrees.Output:NoneReturn Code:NoneRemarks/Usage:The current object must be loaded with a view from your model.
This command simply updates the view object. To update the display in FEMAP, the view must be Put 
to the database, and th en you must Redraw.
Example:None
AlignCSys   API-3129
5.75.2.11  AlignCSys
AlignCSys
( csysID )
Description:Rotates the current view to be aligned with th e XY plane of the selected coordinate system.
Input:INT4 csysID The ID of the coordi nate system used for alignment.
Output:NoneReturn Code:NoneRemarks/Usage:The current object must be loaded with a view from your model.
This command simply updates the view object. To update the display in FEMAP, the view must be Put 
to the database, and th en you must Redraw.
Example:None
 API-3130  AlignVector
5.75.2.12  AlignVector
AlignVector
( oX, oY, oZ, dX, dY, dZ )
Description:Rotates the current view to be aligne d looking along the specified vector.
Input:REAL8 oX
The origin of the alignm ent axis - in global rectangular coordinates. REAL8 oY
REAL8 oZREAL8 dX
The components of th e axis of alignment. REAL8 dY
REAL8 dZOutput:NoneReturn Code:NoneRemarks/Usage:The current object must be loaded with a view from your model.
This command simply updates the view object. To update the display in FEMAP, the view must be put 
to the database, and th en you must Redraw.
Example:None
Align2Vector   API-3131
5.75.2.13  Align2Vector
Align2Vector
( vZx, vZy, vZz, vXYx, vXYy, vXYz, bAutoXY )
Description:Rotates the current view to be aligne d looking along the specified vector.
Input:REAL8 vZx
The components of the axis of alignment (normal to the screen) REAL8 vZy
REAL8 vZzREAL8 vXYx The components of a vector used to determine the X and Y (in 
screen) axes. The normal vector (v Zx,vZy,vZz) is crossed with this 
vector to determine the Y vector, which is then crossed again to 
determine X.REAL8 vXYy
REAL8 vXYz
BOOL bAutoXYIf True, the X and Y vectors are swapped so that the model better fits 
into the window shape.
Output:NoneReturn Code:NoneRemarks/Usage:The current object must be loaded with a view from your model.
This command simply updates the view object. To update the display in FEMAP, the view must be put 
to the database, and th en you must Redraw.
Example:None
 API-3132  AlignWorkplane
5.75.2.14  AlignWorkplane
AlignWorkplane
( void )
Description:Rotates the current view to be aligne d with the normal to the workplane.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:The current object must be loaded with a view from your model.
This command simply updates the view object. To update the display in FEMAP , the View must be Put 
to the database, and th en you must Redraw.
Example:None
AutoscaleAll   API-3133
5.75.2.15  AutoscaleAll
AutoscaleAll
( redoBox )
Description:Changes the magnification so that the curre nt model is scaled to fit in the view.
Input:
BOOL redoBoxIf set to True, then the imaginary b ox around the model that is used 
for autoscaling is recomputed. If set  to False, the existing box is 
used.
Output:NoneReturn Code:
None
Remarks/Usage:The current object must be loaded with a view from your model.
This command simply updates the view object. To update the display in FEMAP , the View must be Put 
to the database, and th en you must Redraw.
Example:None
 API-3134  AutoscaleVisible
5.75.2.16  AutoscaleVisible
AutoscaleVisible
( redoBox )
Description:Changes the magnification so that the visible portions of the model are scaled to fit in the view.
Input:
BOOL redoBoxIf set to True, then the imaginary b ox around the model that is used 
for autoscaling is recomputed. If set  to False, the existing box is 
used.
Output:NoneReturn Code:
None
Remarks/Usage:The current object must be loaded with a view fro m your model that is currently visible in a window. 
This method differs from AutoscaleAll in that the curre nt group, layers and display options are consid-
ered when scaling the view.
This command simply updates the view object. To update the display in FEMAP , the View must be Put 
to the database, and th en you must Redraw.
Example:None
FitVisible   API-3135
5.75.2.17  FitVisible
FitVisible
( redoBox )
Description:Changes the magnification so that the visible portions of the model are sc aled to fit in the view, based on 
the model’s current orientation.
Input:
BOOL redoBoxIf set to True, then the imaginary b ox around the model that is used 
to fit the visible entities based on or ientation is recomputed. If set to 
False, the existi ng box is used.
Output:NoneReturn Code:NoneRemarks/Usage:The current object must be loaded with a view fro m your model that is currently visible in a window. 
This method differs from AutoscaleVisible in that th e model’s orientation is also taken into account.
This command simply updates the view object. To update the display in FEMAP , the View must be Put 
to the database, and th en you must Redraw.
Example:None
 API-3136  SetModelDataContourForm
5.75.2.18  SetModelDataContourForm
SetModelDataContourForm
( zContourFormat )
Description:Specifies the Show As option in th e Contour Model Data dialog box, which can be Contour, Criteria, or 
Beam Diagram.
Input:
enum zContourFormatSpecify an option for Show  As, from these options:
Contour = FCF_CONTOUR(1)
Criteria = FCF_CRITERIA(2)Beam Diagram = FCF_BEAM_DIAGRAM(3)
Output:NoneReturn Code:FE_FAIL Selected option for zContourFormat is not validRemarks/Usage:Used in conjunction with SetModelDataContourType to display the desired model data as a contour, cri-
teria, or beam diagram plot.
Example:None
GetModelDataContourForm   API-3137
5.75.2.19  GetModelDataContourForm
GetModelDataContourForm
( zContourFormat )
Description:Determines the current op tion specified for Show As  in the Contour Model Data dialog box, which can 
be Contour, Criteria, or Beam Diagram.
Input:NoneOutput:
enum zContourFormatOption currently set for Show As, wh ich will be one of these options:
Contour = FCF_CONTOUR(1)
Criteria = FCF_CRITERIA(2)Beam Diagram = FCF_BEAM_DIAGRAM(3)
Return Code:FE_FAIL Selected option for zContourFormat is not validRemarks/Usage:Used in conjunction with GetModelDataContourType to determine many of the options currently being 
used for a plot of model data or discrete values.
Example:None
 API-3138  SetModelDataContourType
5.75.2.20  SetModelDataContourType
SetModelDataContourType
( zMDCType, zElementType, zMaterialType, ilocation )
Description:Selects the type of model data to display from the “t ree structure” in the Contour Data From section of 
the Contour Model Data dialog box. This option can also be used for a Discrete Value plot.
Input:
enum zMDCTypeUsed to specify which model data item to display as a contour, crite-
ria, beam diagram. See Section 5.75.1.3, "Model Contour Data 
Types" for more information abou t selecting the appropriate model 
data item. If using any option other than FVMDC_MATL_TABLE 
or FVMDC_PROP_TABLE, all other arguments in this method are 
ignored.
enum zElementTypeOnly used when zMDCType is set to FVMDC_PROP_TABLE. 
Indicates the element/property type to use for the index value speci-
fied in iLocation (See “Element Types” in Section 3.3.7, "FEMAP 
Constants")
enum zMaterialTypeOnly used when zMDCType is  set to FVMDC_MATL_TABLE. 
Indicates the material type to us e for the index value specified in 
iLocation (See “Material Types” in Section 3.3.7, "FEMAP Con-
stants")
INT4 iLocationOnly used when zMDCType is  set to FVMDC_MATL_TABLE or 
FVMDC_PROP_TABLE. ID of the index in the Material Array Index (See Section 5.47.1.2, "Material Array Index Values") or 
Property Array Index (See Section 5.60.2.1, "Property Array Index 
Values") to use to create the plot.
Output:NoneReturn Code:FE_FAIL Selected zElemenType or zMater ialType does not exist in the model
Remarks/Usage:Used in conjunction with SetModelDataContourForm to display the desired model data as a contour, 
criteria, or beam diagram plot. To plot discrete values, set the ModelDataContourOn property on the 
View object to True and use ModelDataContourSe tID to select an appropriate discrete value set.
Example:None
GetModelDataContourType   API-3139
5.75.2.21  GetModelDataContourType
GetModelDataContourType
( zMDCType, zElementType, zMaterialType, ilocation )
Description:Determines the type of model data from the “tree st ructure” in the Contour Data From section of the 
Contour Model Data dialog box currently being displa yed. This option can also be used for a Discrete 
Value plot.
Input:NoneOutput:
enum zMDCTypeUsed to determine whic h model data item is cu rrently displayed as a 
contour, criteria, beam diagram. See Section 5.75.1.3, "Model Con-
tour Data Types" for more inform ation about selecting the appropri-
ate model data item. If any method other than 
FVMDC_MATL_TABLE or FVMDC_PROP_TABLE is returned, that is the only value needed to know what model data is plotted.
enum zElementTypeOnly used when zMDCType returns FVMDC_PROP_TABLE. 
Indicates the element/property type being used by the index value 
returned for in iLocation (See “Ele ment Types” in Section 3.3.7, 
"FEMAP Constants")
enum zMaterialTypeOnly used when zMDCType returns FVMDC_MATL_TABLE. 
Indicates the material type being used by the index value returned 
for in iLocation (See “Element Ty pes” in Section 3.3.7, "FEMAP 
Constants")
INT4 iLocationOnly used when zMDCType returns FVMDC_MATL_TABLE or 
FVMDC_PROP_TABLE. ID of the index in the Material Array 
Index (See Section 5.47.1.2, "Material Array Index Values") or 
Property Array Index (See Section 5.60.2.1, "Property Array Index Values") being used to create the plot.
Return Code:
Remarks/Usage:
Used in conjunction with  GetModelDataContourFrom to determ ine many of the options currently 
being used for a plot of model data or discrete values.
Example:None
 API-3140  GetFontData
5.75.2.22  GetFontData
GetFontData
( pdPointHeight, pbBold, pbItalic, ppcName )
Description:This function returns para meters from View objects. Requires a “Get” before use.
Input:NoneOutput:INT4 pdPointHeight The size of the textBOOL pbBold If True if text is Bold, otherwise returns FalseBOOL pbItalic If True if text is Italicized, otherwise returns False
STRING ppcName Name of FontReturn Code:FE_OK Values retrievedRemarks/Usage:NoneExample:None
SetFontData   API-3141
5.75.2.23  SetFontData
SetFontData
( pdPointHeight, pbBold, pbItalic, ppcName )
Description:This function sets parameters on  View objects. Requires a “Put” after use to update View object.
Input:INT4 pdPointHeight The size of the textBOOL pbBold If True if text is Bold, otherwise returns FalseBOOL pbItalic If True if text is Italicized, otherwise returns False
STRING ppcName Name of FontOutput:NoneReturn Code:FE_OK Values setRemarks/Usage:NoneExample:None
 API-3142  
5.76  ViewOrient Objects
As of FEMAP 11.3, the data and methods of the Vi ew Object which control orientation should no 
longer be used, as that data is  only used to provide backward s compatibility. Please see the overall 
description of the View Object (See Section 5.75 , "View Objects") for restrictions on using the 
data and methods.
The ViewOrient objects provide access to the vi ew orientation functiona lity using options set 
using various commands on the View  menu. More specifically, provides access to the options 
found in the View, Rotate, Advanced Rotate...  command. Many of the commands on the View, 
Rotate...  menu simply set a combin ation of options in the Advanced Rotation Options  dialog box 
to produce the desired behavior during dynamic ro tation. They are derived from Entity objects, so, 
in addition to the properties and methods described here, all of th e properties and methods defined 
for Entity objects are also available for ViewOrie nt objects, except the standard Get and Put. See 
Section 5.1, "Common Entity Properties and Methods" for more information.
The Get method and Put methods are slightly differ ent than standard, but require you use the ID of 
the View where you want to change the orienta tion options. Dynamic rotation for each View in 
your model is controlled by a corresponding Vi ewOrient object, which will have the same ID as 
the View (i.e., to manipulate the orientation options for View 1, use the Get method to load 
ViewOrient object with values from View 1, th en use the Put method to make changes to the 
view). 
Use the feViewOrient method of the FEMAP Ap plication object to access ViewOrient Objects.
5.76.1  ViewOrient Object Properties
Property Description
REAL8 Center[0..2]
orV ARIANT vCenterLocation of view center. This is set using the View, Center  
command in the User Interface.
REAL8 MagnificationMagnification factor (1=AutoScale). This is set using the 
View, Magnify  command in the User Interface.
BOOL ModelAlwaysInFrontWhen True, the Model Always in Front of Viewer  option in 
Rotation Axis section  of the Advanced Rotation Options  dia-
log box will be enabled.
BOOL AutoAspectRatioFlag to indicate if the Aspect Ratio of the view should be 
automatically calculated. When True, the AutoAspect  check 
box for the View Aspect Ration  option of the View, Options  
command will be checked. When False, it will use the value 
specified for AspectRatio.
REAL8 AspectRatioSpecifies the Aspect Ratio for the view, which sets the value 
in the Aspect Ratio  field for the View Aspect Ratio  option of 
the View, Options  command
BOOL PerspectiveFlag to indicate if Perspective mode is enabled. When True, 
the Option On  check box for the Perspective  option of the 
View, Options  command will be checked
   API-3143
REAL8 PerspectiveAngleSpecifies the Perspective Angle,  which sets the value in the 
Angle  field for the Perspective  option of the View, Options  
command
INT4 RotationAxisOptionSets the Rotation Axes option in the Advanced Rotation 
Options  dialog box:0=View Axes, 1=Model Axes, 2=Coordi-
nate System, 3=Vector
INT4 RotationCenterOptionSets the Rotation Center  option in the Advanced Rotation 
Options  dialog box:0=View Center, 1=Screen Center, 
2=Coordinate System, 3=Location
INT4 RotationCoordSysID of coordinate system to  rotate about. Set in the Rotation 
Axes section in the Advanced Rotation Options  dialog box. 
Only used when RotationAxisOp tion is set to 2 (Coordinate 
System)
BOOL SingleAxisWhen True, the Single Axis Rotation  option in Rotation Axis 
section  of the Advanced Rotation Options  dialog box will be 
enabled.
REAL8 RotationCenter[0..2]
orV ARIANT vRotationCenterCenter of rotation for dynamic rotation, which is set using the 
Location  button in the Rotation Center  section of the 
Advanced Ro tation Options  dialog box. Also, sets the base 
coordinates of the rotation v ector. Only used when Rotation-
CenterOption is set to 3 (Location)
REAL8 RotationVector[0..2]
orV ARIANT vRotationVectorAxis of rotation for dynamic ro tation, which is set using the 
Vector  button in the Rotation Center  section of the Advanced 
Rotation Options  dialog box.
INT4 SecondaryRotationAxesOptionSets the Rotate Around  option in the View, Rotate, Model  
command, which controls how pr ecise rotation to a particular 
orientation typically occurs . -1 (or any negative inte-
ger)=Screen Axis, 0=Basic Rectangular Coordinate System, 
1=Basic Cylindrical Coordinate  System, 2=Basic Spherical 
Coordinate System, 3 or above= ID of User-Defined Coordi-
nate System.Property Description
 API-3144  
5.76.2  ViewOrient Object Methods
5.76.2.1  SetEyeDirection
SetEyeDirection
( dEyeX, dEyeY, dEyeZ, dRightX, dRightY, dRightZ )
Description:Sets the coordinates of the “eye direction” vector and “right dire ction” vector to align the view
Input:REAL8 dEyeX X coordinate of Eye direction vectorREAL8 dEyeY Y coordinate of Eye direction vector REAL8 dEyeZ Z coordinate of Eye direction vectorREAL8 dRightX X coordinate of Right direction vectorREAL8 dRightY Y coordinate of Right direction vector REAL8 dRightZ Z coordinate of Right direction vectorOutput:NoneReturn Code:NoneRemarks/Usage:These values are set in the User Interface using the View, Align, Eye and Directions  command
Example:None
   API-3145
5.76.2.2  GetEyeDirection
GetEyeDirection
( dEyeX, dEyeY, dEyeZ, dRightX, dRightY, dRightZ )
Description:Returns the coordinates of “eye direction” vect or and “right direction” vector from the view
Input:NoneOutput:REAL8 dEyeX X coordinate of Eye direction vectorREAL8 dEyeY Y coordinate of Eye direction vector REAL8 dEyeZ Z coordinate of Eye direction vectorREAL8 dRightX X coordinate of Right direction vector
REAL8 dRightY Y coordinate of Right direction vector 
REAL8 dRightZ Z coordinate of Right direction vectorReturn Code:NoneRemarks/Usage:These values can be reviewed in the User Interface using the View, Align, Eye and Directions  command
Example:None
 API-3146  
5.76.2.3  SetRotationAngles
SetRotationAngles
( dX, dY, dZ )
Description:Set the orientation of the view curre ntly loaded in the ViewOrient obj ect by specifying Euler angles rel-
ative to the Basic Rectangular Coordinate System
Input:REAL8 dX X angle in degrees (-179.9999 to 180.0)REAL8 dY Y angle in degrees (-179.9999 to 180.0)REAL8 dZ Z angle in degr ees (-179.9999 to 180.0)
Output:NoneReturn Code:NoneRemarks/Usage:This function provides si milar functionality to the View, Rotate, Model  command when Rotate Around  
is set to “0..Basic Rectangula r” and values are entered for X, Y, and/or Z. Also, if values are entered out-
side the expected range, they will automatica lly be converted to va lues within the range.
Example:None
   API-3147
5.76.2.4  GetRotationAngles
GetRotationAngles
( dX, dY, dZ )
Description:Returns the orientation of the view currently loaded in the ViewOrient object in Euler angles relative to 
the Basic Rectangular Coordinate System
Input:NoneOutput:REAL8 dX X angle in degrees (-179.9999 to 180.0)REAL8 dY Y angle in degrees (-179.9999 to 180.0)REAL8 dZ Z angle in degr ees (-179.9999 to 180.0)
Return Code:NoneRemarks/Usage:This function  returns the X, Y, and/or Z values that are displayed when using the View, Rotate, Model  
command and Rotate Around  is set to “0..Basic Rectangular”.
Example:None
 API-3148  
5.76.2.5  SnapToAxes
SnapToAxes
( void )
Description:Automatically aligns the view to the closest orth ogonal axes relative to current model orientation.
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:
This call is used in the Custom Tools, Views, Snap to Closest Orthogonal View  command.
Example:None
   API-3149
5.76.2.6  ViewRotation
ViewRotation
( qUseCenter, dX, dY, dZ )
Description:Enables Model Always in Front of Viewer  option (ModelAlwaysInFront=True), sets  Rotation Axes  to 
View Axes (RotationAxisOption=0), and sets Rotation Center to View Center  (RotationCenterOp-
tion=0). When qUseCenter Boolean is set to True, sets Rotation Center to Location  (RotationCenterOp-
tion=3) and the additional arguments are used to provide X (Rot ationCenter[0]), Y (RotationCenter[1]), 
and Z (RotationCenter[2]) coordi nates for the rotation center.
Input:
BOOL qUseCenterWhen True, sets Rotation Center  to Location  in the Advanced Rota-
tion Options  dialog box and use the coordinates specified in dX, dY , 
and dZ as the location of the rotations center.
REAL8 dX X coordinate of Rotation Center (only used when qUseCenter=True)
REAL8 dY Y coordinate of Rotation Center (only used when qUseCenter=True)
REAL8 dZ Z coordinate of Rotation Center (only used when qUseCenter=True)Output:NoneReturn Code:NoneRemarks/Usage:This function provides si milar functionality to the View, Rotate, Rotate About View Center ; View, 
Rotate, Rotate Ab out Rotation Center ; and View, Rotate, Rotate Around View Axis  commands.
Example:None
 API-3150  
5.76.2.7  ModelRotation
ModelRotation
( qUseCenter, dX, dY, dZ )
Description:Enables Model Always in Front of Viewer  option (ModelAlwaysInFront=True), sets  Rotation Axes  to 
Model Axes (RotationAxisOption=1), and sets Rotation Center to View Center  (RotationCenterOp-
tion=0). When qUseCenter Boolean is set to True, sets Rotation Center to Location  (RotationCenterOp-
tion=3) and the additional arguments are used to provide X (Rot ationCenter[0]), Y (RotationCenter[1]), 
and Z (RotationCenter[2]) coordi nates for the rotation center.
Input:
BOOL qUseCenterWhen True, sets Rotation Center  to Location  in the Advanced Rota-
tion Options  dialog box and use the coordinates specified in dX, dY , 
and dZ as the location of the rotations center.
REAL8 dX X coordinate of Rotation Center (only used when qUseCenter=True)
REAL8 dY Y coordinate of Rotation Center (only used when qUseCenter=True)
REAL8 dZ Z coordinate of Rotation Center (only used when qUseCenter=True)Output:NoneReturn Code:NoneRemarks/Usage:This function provides si milar functionality to the View, Rotate, Rotate About View Center ; View, 
Rotate, Rotate Ab out Rotation Center ; and View, Rotate, Rotate  Around Model Axis  commands.
Example:None
   API-3151
5.76.2.8  CoordSysRotation
CoordSysRotation
( iCoordSys, qUseCenter, dX, dY, dZ )
Description:Enables Model Always in Front of Viewer  option (ModelAlwaysInFront=True), sets  Rotation Axes  to 
Coordinate System (RotationAxisOption=2), sets the specified  Coordinate System in the drop-down 
(RotationCoordSys=iCoordSys), and sets Rotation Center to Coordinate System (RotationCenterOp-
tion=2). When qUseCenter Boolean is set to True, sets Rotation Center to Location  (RotationCenterOp-
tion=3) and the additional arguments are used to provide X (Rot ationCenter[0]), Y (RotationCenter[1]), 
and Z (RotationCenter[2]) coordi nates for the rotation center.
Input:INT4 iCoordSys ID of Coordina te System to rotate around
BOOL qUseCenterWhen True, sets Rotation Center  to Location  in the Advanced Rota-
tion Options  dialog box and use the coordinates specified in dX, dY , 
and dZ as the location of the rotations center.
REAL8 dX X coordinate of Rotation Center (only used when qUseCenter=True)REAL8 dY Y coordinate of Rotation Center (only used when qUseCenter=True)REAL8 dZ Z coordinate of Rotation Center (only used when qUseCenter=True)Output:NoneReturn Code:NoneRemarks/Usage:This function provides similar functionality to the View, Rotate, Rotate Ar ound Coordinate System  com-
mand.
Example:None
 API-3152  
5.76.2.9  VectorRotation
VectorRotation
( dX, dY, dZ, dVX, dVY, dVZ )
Description:Enables Model Always in Front of Viewer  option (ModelAlwaysInFront=True), sets  Rotation Axes  to 
Vector  (RotationAxisOption=3), and sets Rotation Center to Location (RotationCenterOption=3). The 
arguments are used to provide X (RotationCenter[0 ]), Y (RotationCenter[1]), and Z (RotationCenter[2]) 
coordinates for the rotation center (base of vecto r) and X (RotationVector[0]), Y (RotationVector[1]), 
and Z (RotationVector[2]) coordinates of the tip of the vector.
Input:REAL8 dX X coordinate of Rotation CenterREAL8 dY Y coordinate of Rotation CenterREAL8 dZ Z coordinate of Rotation CenterREAL8 dVX X coordinate of Rotation VectorREAL8 dVY Y coordinate of Rotation VectorREAL8 dVZ Z coordinate of Rotation VectorOutput:NoneReturn Code:NoneRemarks/Usage:This function provides si milar functionality to the View, Rotate, Rotate Around Vector  command.
Example:None
   API-3153
5.76.2.10  RollThru
RollThru
( void )
Description:Disables Model Always in Front of Viewer  option (ModelAlways InFront=False), sets  Rotation Axes  to 
View Axis  (RotationAxisOption=0), and sets Rotation Center to Screen Center  (RotationCenterOp-
tion=1).
Input:NoneOutput:NoneReturn Code:NoneRemarks/Usage:This function provides si milar functionality to the View, Rotate, Roll-Thru  command.
Example:None
 API-3154  
5.76.2.11  GetFirstPathID
GetFirstPathID
( piPathID )
Description:Gets the first ID of the stored play backs. Input:NoneOutput:INT4 piPathID The ID of the first path. 
Return Code:NoneRemarks/Usage:
None
Example:None
   API-3155
5.76.2.12  GetNextPathID
GetNextPathID
( piPathID )
Description:Gets the next ID of the stored play backs. Input:NoneOutput:INT4 piPathID The ID of the next path. Return Code:NoneRemarks/Usage:
None
Example:None
 API-3156  
5.76.2.13  Spin
Spin
( nFrames, dX, dY, dZ, dVX, dVY, dVZ, pdFPS )
Description:This function measures the speed of dynami c rotation as well as spins the active model.
Input:
INT4 nFramesSets the number of Frames to spin . When nFrames=0 the model will 
remain spinning until you click anywhere in the interface or graphics window.
REAL8 dX X coordinate of Rotation CenterREAL8 dY Y coordinate of Rotation CenterREAL8 dZ Z coordinate of Rotation CenterREAL8 dVX X coordinate of Rotation vector REAL8 dVY Y coordinate of Rotation vectorREAL8 dVZ Z coordinate of Rotation vectorOutput:REAL8 pdFPS Frames per second.Return Code:NoneRemarks/Usage:A portion of these values are set in the User Interface using the View, Rotate, Spin Around Vector  com-
mand
Example:None
   API-3157
6. FEMAP Events
Events provide a way for your application to be notified when certain operations are happening in 
the FEMAP session. For example, by  processing events, you will be  notified when a new model is 
opened, a command is processed or FEMAP is sh ut down, and your program can then respond 
appropriately to that event.
6.1  Receiving and Processing Events
To receive and process events in your application, you must do the following:
1. Register your application with FEMAP as an ad d-in. You do this by calling the feAppRegis-
terAddInPane method (see Section 3.16.5.2, "feAppRegisterAddInPane"). Event messages are 
only sent to applications that are registered as add-ins. When calling th is method, you should 
specify the handle to the window that contains  the message loop that will process the events.
2. Call the Windows API function RegisterWindowMessage  to obtain the message identifier for 
the event message. The syntax of this call will be something like:
EventMessage = RegisterWindowMessage ( “FE_EVENT_MESSAGE” );
 You must register the FE_EVENT_MESSAGE  string to select the proper message.
3. Modify your window procedure to process the event messages that FEMAP sends. The format 
of these messages is described later in this secti on. You do not have to process any particular 
messages. Only process the messages th at you need for your application.
One important thing to note is that FEMAP simp ly sends the event messages to your application. 
FEMAP is not waiting for a response  from you; it will go on proces sing whatever other commands 
or actions are requested.
6.2  Alternate Method - Event Callbacks
As an alternative to handling event messages, if you can build your event functionality as a stand-
alone program file, basic script or executable, then  you can register an event callback to call that 
code. This approach is often simp ler if the code you want to execute can be stand-alone. Simply 
call feAppEventCallback ( Section 3.16.5.10, "feAppEventCallback" ) to hook your code to a par-
ticular event. After that every time the event occurs, your code will be called.
If the event that your callback processes uses the lParam value (like FEVENT_COMMAND), you 
can access it from your callback routine by using EventLParam described in Section 3.3.2, "Global 
Integer Properties"
 API-3158  
6.3  Format of Event Messages
All windows messages contain four parameters. 
In general, you will want to modify your message loop to  check to see if message is equal to the 
FEMAP event message value. If it is, you will th en check wParam, and possibly lParam, to see if 
this is an event that is important. If it is not import ant, simply ignore the mess age. If it is important, 
start the appropriate action in your application.
6.4  The FEMAP Events
The following events are cu rrently defined in FEMAP.
 Parameter Description
hWndThe handle to the window where the me ssage is being sent. Not really very 
important in this case.
messageThe message type. This parameter will al ways be equal to the return value 
from RegisterWindowMessage ( FE_EVENT_MESSAGE  ) for event mes-
sages. This is how you will be able  to distinguish a FEMAP event message 
from other windows messages coming to your window.
wParamFor FEMAP event messages, this paramete r indicates the type of event that 
has occurred. Refer to the variou s events for more information.
lParamFor FEMAP event messages, this parameter contains additional data for that 
event. Refer to the various ev ents for more information. 
wParam Event Description
1 FEVENT_INITIALIZEFEMAP is initializing for the first time. lParam is not 
used.
2 FEVENT_NEWMODELStarting a new model, or opening an existing model. 
Any previous model that was in use has now been 
closed. lParam is not used.
3 FEVENT_ENDMODELCurrent model has been closed. lParam is not used. 
To determine the identifier of the model about to be 
closed, use FEVENT_CLOSINGMODEL
4 FEVENT_SHUTDOWNFEMAP is being shut down. The model that was in 
use has been closed. lParam is not used.
5 FEVENT_COMMANDA command has been exec uted - either from the 
menu, or thru some other mechanism. lParam is the command number that was executed.
6 FEVENT_PROGSTARTIndicates that a program f ile is starting execution. 
lParam is not used.
7 FEVENT_PROGENDIndicates that a program file is ending execution. 
lParam is not used.
   API-3159
When processing the FEVENT_COMMAND event, you will need to know  the command number 
that you are looking for. Althou gh we do not publish these command numbers, it is easy to find 
them. Simply process the FEVENT_COMMAND even t, run your application, switch to FEMAP 
and execute the command that you want to pro cess. Remember the value of lParam that you 
receive with the FEVENT_COMMAND event that you receive. It will be the same each time you 
perform that command. Seve ral examples are as follows:8 FEVENT_DRAWSTARTIndicates that a redraw or regenerate is beginning. 
Neither this nor the FEVENT_DRAWEND event are 
issued every time a view is updated - they are only 
issued if a standard Redr aw or Regenerate command 
are selected from the menu or the API, or when some 
other action or command triggers a full redraw or 
regenerate.
9 FEVENT_DRAWEND Indicates  that a redraw or re generate is ending.
10 FEVENT_ANALYSISENDIndicates that an analysis that FEMAP was monitor-
ing has been completed
11 FEVENT_RESULTSENDIndicates that the automatic  loading of results after 
an analysis finishes has completed.
12 FEVENT_SWITCHMODELIndicates that the active mo del has been switched to a 
different model. lParam contains an identifier of the new active model -  the same value that is returned 
by feAppGetModel(). To determine which model is 
about to be left, use FEVENT_LEA VINGMODEL
13 FEVENT_SELECTORIndicates when anything happens to the Selector 
(Select Toolbar). The value of lParam lets you know what has occurred:
>0=An ID (lParam value) was selected in Single Pick 
mode-1=Selection was updated in Multiple Pick mode
-2=Related entities were added to the selection
-3=A group was loaded  into the selection
-4=Selection was “Grown”
-5=Selection was “Shrunk”
-999=Selection was cleared
14 FEVENT_UPDATEDSA VEDSET Indicates a “Sav edSet” Set Object has been updated.
15 FEVENT_LEA VINGMODELUsed in conjunction with FEVENT_SWITCH-
MODEL and indicates abou t to leave a model. 
lParam contains the identifier of the model being left
16 FEVENT_CLOSINGMODELUsed in conjunction with FEVENT_ENDMODEL 
and indicates closing a mode l. lParam contains the 
identifier of the model being closedwParam Event Description
 API-3160  
 
6.5  Using FEMAP Events
The program below shows an example of how FEMAP Events can be captured in your application. 
The code does not actually do anyt hing after watching the events, it provides a framework that you 
can use to get started.
Global Const FEVENT_INITIALIZE = 1
Global Const FEVENT_NEWMODEL   = 2
Global Const FEVENT_ENDMODEL   = 3
Global Const FEVENT_SHUTDOWN   = 4
Global Const FEVENT_COMMAND    = 5
Global Const FEVENT_PROGSTART  = 6
Global Const FEVENT_PROGEND    = 7
Dim WM_FEMAP_MESSAGE   As Long
Dim PreviousWindowProc As Long
Dim hMainForm As Long
Dim hMainWnd As Long
Public femap As Object
Const GWL_WNDPROC              = (-4&)
Const GWL_HWNDPARENT           = (-8)
Public Declare Function RegisterWindowMessage Lib "user32" _
     Alias "RegisterWindowMessageA" (ByVal lpString As String) As Long
        
Public Declare Function SetWindowLong Lib "user32" _
     Alias "SetWindowLongA" (ByVal hwnd As Long, _
     ByVal nIndex As Long, ByVal dwNewLong As Long) _
     As Long
        
Public Declare Function CallWindowProc Lib "user32" _Command lParam
View, Redraw 2001
View, Regenerate 2002
Tools, Undo 1101
Tools, Redo 1102
File, Save 1003
File, Open 1002
File, Exit 1025
   API-3161
     Alias "CallWindowProcA" _
(ByVal lpPrevWndFunc As Long, ByVal hwnd As Long, ByVal Msg As Long, _
     ByVal wParam As Long, ByVal lParam As Long) As Long
‘ This function is the Window procedure that you must supply to 
‘ override the default message handling
Public Function WindowProc(ByVal hwnd As Long, _ 
   ByVal uMsg As Long, ByVal wParam As Long, ByVal lParam As Long) _
   As Long
  
   Dim rc As Long
   
    If uMsg = WM_FEMAP_MESSAGE Then
        If wParam = FEVENT_SHUTDOWN Then
            Unload Form1
        End If
        If wParam = FEVENT_COMMAND Then
            'MsgBox ("Femap Command")
        End If
        If wParam = FEVENT_PROGSTART Then
            MsgBox ("Program Start")
        End If
        If wParam = FEVENT_PROGEND Then
            MsgBox ("Program End")
        End If
            
    Else
       WindowProc = CallWindowProc(PreviousWindowProc, hwnd, uMsg, _ 
                           wParam, lParam)
    End If
           
End Function
‘ This function is called to initialize capturing the events
Public Function InitApp()
 Dim rc As Long
    hMainForm = Form1.hwnd
    Set femap = GetObject(, "femap.model")
    ‘ For more control over window placement and style use
    ‘ feAppRegisterAddInPane( )
    rc = femap.feAppRegisterAddIn(True, hMainForm, hMainForm, True, 1)
    WM_FEMAP_MESSAGE = RegisterWindowMessage("FE_EVENT_MESSAGE")
    PreviousWindowProc = SetWindowLong(Form1.hwnd, GWL_WNDPROC, _
                                               AddressOf WindowProc)
End Function
‘ This function is called to terminate capture
 API-3162  
Public Function CloseApp()
    rc = SetWindowLong(hMainForm, GWL_WNDPROC, PreviousWindowProc)
    rc = femap.feAppRegisterAddIn(False, hMainForm, hMainForm, _
                                  True, 1)
End Function
Index 
Symbols
.NET 52, 55, 59
A
ABAQUS file 268, 275, 309
ACIS file 238, 240ACIS SAT file 300
ActiveContactEntities  1980, 2082, 2153, 2568
Add 1229, 1237, 1368, 2184, 2591, 2665, 3051, 3052, 3140, 3141
add
solid 511
Add2 2592
AddAll 1250, 1371
AddAllAnalysisCases 1349AddAllColor 1268
AddAllConnected Elements 1272
AddAllExcept 1251AddAllInRange 1252
AddAllInRangeInSetV2 1253
AddAllTitleV2 1267AddAroundPlane 1264, 1401
AddAroundPlane2 1265
AddAroundPoint 1260, 1399AddAroundPoint2 1261
AddAroundVector 1262, 1400
AddAroundVector2 1263AddArray 1257, 2185, 2636, 2648, 2666, 2677
AddChart 1841
AddColumn 1040, 1847AddColumnGroupTitle 1849
AddColumnV2 1488
AddCommon 1254AddComplexOutputVectorsV2 1282
AddComponentOutputVectorsV2 1280
AddConnectedElements 1271AddConnectedFillets 1274
AddConstrained 1276
AddContact 2244AddConversionColumnV2 1490
AddCoordinate 1258
AddCoordinate2 1259AddDataSeries 2209
AddDataTable 1837
AddElementChecks 1050AddElemWithCornerColumnsV2 1545
AddEmptyColumns 1489
AddEntitiesOnLayer 1239
AddEntityData 1047
AddEntityEditor 1839AddEnvelopeColumn 1491
AddFreq 2493
AddFreq1 2497AddFreq2 2499
AddFreq3 2501AddFreq4 2503
AddFreq5 2505
AddFreq5ByFuncID 2506AddFreqByFuncID 2494
AddFunctionTableEditor 1838
AddGroup 1055, 1256
AddInt 1370
AddLevelFloat 2412AddLevelInteger 2409
AddLoaded 1278
AddMassProperties 1049AddMeshAssociativity 1052
AddMeshLoc 2300
AddMeshLocXYZ 2301AddMeshPoint 3018
AddMessages 1840
AddMidsideNodes 1269AddNastranElementChecks 1051
AddNewRemoveCommonSet 1255
AddNodesOnFreeEdges 1284AddNodesOnFreeFaces 1285
AddNodesOnGeometry 1266
AddNonZero 2186AddOpt 2593
AddOutput 1043
AddOutput2 1048AddOutputSets 2158
AddParagraph 1833
AddPicture 1835AddRange 1238
AddReal 1369
AddRelated 1766, 2595AddRowNumbering 1850
AddRule 1242
AddScalarAtBeamColumnsV2 1546AddScalarAtElemColumnV2 1544
AddScalarAtNodeColumnV2 1542
AddSelection 1062AddSet 1230, 1240
AddSetFromModel 1350
AddSetRule 1241AddSetToSavedSet 1359
AddSimilarOutputVectorsV2 1281
AddSolid 1167AddSolidElementsAlongVector 1273
AddSort 1059
AddStyle 1832AddSurface 1168
AddTangentSurfaces 1275
AddToSavedSet 1358
AddVectorAtNodeColumnsV2 1543
AddView 1836AddVisible 1270
AdjcacentSurfaces 2969
AdjcacentSurfacesAsSet 2970Aero Panel/Body object 1916
methods 1917, 1918, 1940
properties 1916
Aero Property object 1926
methods 1927
properties 1926
Aero Spline object 1939
methods 1940
properties 1939
Aero Surface object 1942
methods 1943
properties 1942
AeroChordXYZ 1924
AeroSpanXYZ 1925
align
entities 706, 707
Align2Vector 3131
AlignCSys 3129AlignVector 3130
AlignWorkplane 3132
AllFreqOff 2073AllFreqOn 2072
AllOff 2510
AllOn 2509AllOtherEntities 1722, 1772
AlongVector 1723, 1739, 1773
AlternateTaper 1085AnalysisCase object 1949
methods 1978, 1992
properties 1949
AnalysisMgr object 2013
methods 2069
properties 2013
AnalysisSet object
methods 2155
AnalysisStep object 2143
methods 2151
properties 2143
AnalysisStudy object 2154Analyze 2086
AnalyzeMultiple 2087
AngleAtPoint 3004AnsSkipCSys 2127
AnsSkipElem 2129
AnsSkipGroup 2132AnsSkipMatl 2130
AnsSkipMisc 2133
AnsSkipNode 2128AnsSkipProp 2131
ANSYS file 269, 276, 310
application
register 951, 952, 953
application object 51, 104
methods 51
properties 51
Apply 1176ApproximateArea 2959
arc
create from point 421create with angle 416, 417
create with center 414, 420create with chord 418
create with points 419create with radius 415
ArcCircleInfo 2288
Area 2459, 2904, 2958AreDuplicate 2721, 2906
array 53, 56
AspectRatio 1081
Associate 1870
AtEOF 1181, 1423Attach 1710
attach
to geometry 719, 720, 721
attributes
meshing 495
AutoComplete 2720AutoCreateLevels 2418
AutoDistanceToGeometry 2734
AutoscaleAll 3133AutoscaleVisible 3134
Axis 2279
B
bar offsets
modify 745, 746
BCDefinition object 2162
methods 2163
properties 2162
BCEqn object 2167
methods 2168
properties 2167
BCGeom object 2171
methods 2173
properties 2171
BCNode object 2183
methods 2184
properties 2183
BCSet object 2191
methods 2192
properties 1735, 1749, 1821, 2191, 2405
Beam Calculator
CalculateStress 1610
CalculateStres sFromForces 1613
GetElementProperties 1608GetMeshInfo 1609
Beam Calculator object 1606
beam offsets
modify 745, 746
BetweenCSys 1725, 1741, 1775
BetweenPlanes 1727, 1743, 1777
BetweenVectors  1726, 1742, 1776
BitmapCreate 1688BitmapMarkForDeletion 1689
Blank 1634
BodyMesher Object 1863BodyMesher object
methods 1866
BoolField 1214
boundary conditions
modify 725
boundary surface
create 459, 460, 461, 462update 463
BoundarySurfaces 2967
BoundarySurfacesAsSet 2968
BoundingBox 2260, 2270, 2272, 2273, 2275, 2276, 2308, 
2942, 2999BoundingBoxInCSys 2261, 2271, 2309, 3000
BoundingSize 3001
BSpline curves
knots 727
modify 726
C
C,C++ 51C++ 56, 84
CalcStressLinearization 1823CalculateBounds 2793
CalculateDefaultMeshSize 1871
CalculateNodalCenter 2483CalculateSummation 2484
CalculateSummation2 2485
Case 2085CATIA file 241, 243
CATIAV5 file 245
CellRange 3030center 2345
CG 2957
chamfer
solid 510
chart
get displayed 401
Chart Data Series object 2214
Chart object 2203
charts
set displayed 402
CheckQuality 1078
circle
create concentric 426
create from center 424, 428
create from curve 429create from diameter 423
create from points 425, 427
create from radius 422create tangent 430
cleanup
solid 527, 528
Clear 1068, 1075, 1169, 1217, 1297, 1385, 1407, 1448, 1713, 
1736, 1751, 1827, 1866, 2256, 2601, 2629, 2825, 3034ClearAeroMeshSet 2751
ClearAll 1216
ClearComponentSet 2750ClearElements 2479
ClearGroup 1056ClearIbList 1932
ClearLayerInfo 2607ClearMeshLoc 2338
ClearMptSet 2103
ClearMultiGroupList 3122ClearNodeList 2437
ClearNodes 2482
ClearSbList 1931
ClearSearch 1201
ClearSelection 1063ClearSort 1060
ClearSurfaceSet1 1947
ClearSurfaceSet2 1948ClearTheta1List 1933
ClearTheta2List 1934
close
file 1182
close model 233
ClosestPointToCurve 2333ClosestPointToSurface 2334
coincident
curves 382elements 384
loads 394
nodes 374, 376, 377, 378points 380
colinear
coordinates 834
CollectorAddLineLocations 1682
CollectorAddMeshLineLocations 1684
CollectorAddMeshTr iangleLocations 1686
CollectorAddMeshTriangl eNormalLocations 1687
CollectorAddPointEn tityFaceLocations 1654
CollectorAddPointE ntityLocations 1653
CollectorAddPointLocations 1652
CollectorAddPolyLineLocations 1683
CollectorAddSymbolEntityEdgeAutoLocations 1662CollectorAddSymbolEn tityEdgeLocations 1661
CollectorAddSymbolEn tityFaceLocations 1657
CollectorAddSymbolEntityFa ceNormalAutoLocations 1659
CollectorAddSymbolEntity FaceNormalLocations 1658
CollectorAddSymbolEntityLocations 1656
CollectorAddSymbolLocations 1655CollectorAddSymbolREAL8Ent ityEdgeAutoLocations 1671
CollectorAddSymbolREAL 8EntityEdgeLocations 1670
CollectorAddSymbolREAL8E ntityFaceLocations 1666
CollectorAddSymbolREAL8E ntityFaceNormalAutoLoca-
tions 1668
CollectorAddSymbolREAL8Ent ityFaceNormalLocations 
1667
CollectorAddSymbolREAL 8EntityLocations 1665
CollectorAddSymbol REAL8Locations 1664
CollectorAddTextEntit yFaceLocations 1675
CollectorAddTextEn tityLocations 1674
CollectorAddTextINT4En tityFaceLocations 1678
CollectorAddTextINT4 EntityLocations 1677
CollectorAddTextINT4Locations 1676CollectorAddTextLocations 1673
CollectorAddTextREAL8E ntityFaceLocations 1681
CollectorAddTextREAL8EntityLocations 1680
CollectorAddTextREAL8Locations 1679CollectorAddTriangleLocations 1685
CollectorAppearance 1649
CollectorAppearanceSetFontData 1651CollectorBitmap 1636
CollectorBlank 1645
CollectorLabels 1647
CollectorLines 1643
CollectorMarkForDeletion 1648CollectorPoints 1635
CollectorSingleSymbol 1646
CollectorSymbol 1637CollectorSymbolREAL8 1638
CollectorText 1640
CollectorTextINT4 1641CollectorTextREAL8 1642
CollectorTriangles 1644
color
modify 710, 711
Color Palette 895
CombineCurves 2319Combined 1099
CombinedCurvesAsSet 2318
CommonCurvesAsSet 3012CommonPoint 2342
Complex 1817
Compress 2193, 2255, 2687Compute 2630
Compute2 2631
ComputeGeneralShape 2899ComputeGeneralShape2 2900
ComputeShape 2616, 2617, 2894
ComputeStdShape 2895ComputeStdShape2 2897
Conical 2982
Connection 565, 566Connection object 2266
methods 2267
properties 2266
Connection Property object 2223, 2766, 2784, 2794
access properties 2223
array index values 2225methods 2235, 2768, 2785, 2796
properties 2223
Connection Region object 2236constant
global 58
constraint
combine 571
constraints
check 393
modify 725
Contact object 2236
methods 2240
properties 2236
convert
coordinates 818, 819, 835
units 343, 344ConvertToAllCurves 1332
ConvertToAllSurfaces 1336ConvertToBoundarySurfaces 1337, 1398
ConvertToBoundarySurfacesOnly 1338
ConvertToCombinedCurves 1333ConvertToCombinedCurvesOnly 1334
ConvertToInternalCurves 1335
ConvertToInternalSurfaces 1339
coordinate system
modify 724move 701, 702
rotate 841, 842, 843
update 723
coordinates
along curve 823
at curve center
curve
coordinates 825
at intersection 828, 839, 840at line intersection 821
at midpoint 824
colinear 834convert 819, 835
curves 820
enter 816, 817in surface 827
node 830
point 829project 822, 826, 837, 838
rotate 836
transform 831, 832, 833
CoordSysRotation 3151
Copy 1066, 1233, 1325
copy 541
radial 545
CopyAray 2728
CopyArray 2912CopyToClipboard 2221
CopyTool Object 1711
CopyTool object
methods 1713
properties 1711
Count 1218, 1327, 1392, 1915CountBCs 2166
CountCommon 1328, 1329
CountList 2578CountLoads 2644
CountMeshPoint 3021
CountMeshPoints 2742CountOutputSets 2155
CountSavedSets 1365
CreatePattern 1733, 1782
CreateRangeInteger 2416, 2417
CSV file 280CSys object 2277
methods 2278
properties 2277
Current 1389
Curvature 3015
CurvatureAcrossEdge 2332
curve
break 454
chamfer 458
create by projection 441, 442create by slicing solid 444
create from intersection 440
create on surface 443
extend 453
fillet 457join 456
trim 452
types 2284
Curve object 2281
methods 2209, 2220, 2285
properties 2203, 2214, 2281, 2917
CurveLoops 2972
Curves 2866, 2922, 2971
curves
BSpline 726, 727
coincident 382
reverse direction 728, 729revolve 683
sweep 685
CurvesAsSet 2867, 2923, 2974CurvesAtPoint 3011
Cylindrical 2980
D
data
example storing 72
data type 52DataLocation 1509
DataNeeded 1494
DataTable object
methods 1019, 1023, 1035, 1055, 1059, 1062, 1065
properties 1017
Debug 1341Define 3075
DefineReal 3076
definition coordinate system 723Deletable 1418, 1895
Delete 1419, 1896, 2161
delete
constraints 764
entities 761
loads 763mesh 762
model 760
output 765
DeleteAll 1326, 1330, 2534,  2539, 2544, 2550, 2556, 2915
DeleteAllSavedSets 1356DeleteAnalysisCase 1979, 2104
DeleteAnalysisStep 2152
DeleteGlobalStep 2567DeleteLibrary 1897
DeleteOtherSavedSets 1357DeletePly 2628
DeleteRows 1069DeleteSaveSet 1355
DeleteStep 1991
DeleteTitle 1420Detach 1709
detach
nodes and elements 722
Dialog 1867, 1868
Direct Matrix Input object 2394
methods 2396
direction
curves 728, 729
directory
current 1009
DiscreteValueSet Object 2405distortion
elements 386, 388, 390, 391
DMIG 2394docking panes 919, 920
draw/erase object
Clear 1620ClearAll 1619
EraseSet 1627
GetErased 1628Grow 1623
HasErased 1625
HasErasedType 1626LoadGroup 1622
SaveGroup 1621
Shrink 1624
DXF file 247
DynSkipCSys 2136
DynSkipElem 2138DynSkipGroup 2141
DynSkipMatl 2139
DynSkipMisc 2142DynSkipNode 2137
DynSkipProp 2140
DynWriteGroup 2135
E
edit
modify 709
element
rigid 74
Element object 2420, 2473
access nodes 2423
methods 2424, 2477
properties 2420, 2473
Element Quality object 1072
methods 1075properties 1072
Elemental 1816
ElementalCSys 2471ElementFaces 2998
ElementHasThickness 2462
Elements 2305, 2940, 2995
elements
attach to geometry 719, 720
beam releases 740
coincident 384detach from geometry 722
distortion 386, 388, 390, 391
fixup 385
formulation 743
line 747modify direction 750, 751
modify type 748
move 703normals 392
reverse normals 738, 739
sweep 684update 741
update property 735
ElementsAsSet 2265, 2306, 2697, 2941, 2996ElementsWithFaces 2307, 2997
embed 954, 959
multiple solids 515solid 514, 526
EmptyBlock 1340
EmptySavedSet 1364Enable 2258, 2268, 2731
end of file 1181
EndPoints 2286, 2977EndPointsAsSet 2978
enter
coordinates 816, 817
entity
align 706, 707
rotate 704, 705scale 708
Entity object 1883
methods 1884properties 1883
Entity Tracking object 1597
entity types 176, 178EntityValueV2 1486
equation 348
Evaluate 2387, 3074event 960
messages 3158
receiving and processing 3157
example
using API 59
Excel
example using 59, 61, 77, 79
Exist 1417, 1894
exit
FEMAP 234
Expand 2192, 2254, 2686ExpandCombination 2858
ExplicitTimeStep 1101
explode
solid 476, 477, 480, 504
Export 2930export
ABAQUS 309ACIS 300
ANSYS 310
FEMAP Neutral 294, 295FEMAP Neutral Output 297, 298, 299
I-DEAS 312
IGES 301
JT 305
LS-DYNA 311MARC 313
NASTRAN 314
Parasolid 302STAAD 315
STEP 303
STL 306VRML 308
extend
surface 498
extrude
curves 681
elements 677solid 502
F
Facets 2320, 2936, 2991feAddToolbar 930
feAddToolbarCommand 941
feAddToolbarSubmenu 931feAddToolbarSubmenuCommand 942
feAddToolbarSubm enuSubmenu 932
feAddToolbarSubmenuUserCommand 944feAddToolbarUserCommand 943
feAddUserCommand 927
feAlignBetweenCSys 707feAlignTo 706
feAppBringToTop 955
feAppColorCreate 897feAppColorGetBaseColor 898
feAppColorGetLinestyle 900
feAppColorGetPattern 899feAppColorGetRGB 901, 903
feAppColorPalette 895
feAppCountModels 914feAppEmbed 954
feAppEmbedMessages 959
feAppEventCallback 960feAppGetAllModels 915
feAppGetModel 907
feAppGetModel32 908
feAppGetModelByName 910
feAppGetModelName 909feAppGetRunningA pplication 963
feAppLoadColor Palette 902
feAppLock 964feAppLockDraw 970
feAppLockExit 966
feAppLockModel 968
feAppManagePanes 919feAppManageStatusBar 921, 922
feAppManageToolbars 918
feAppMessage 975feAppMessageBox 894
feAppMessageClear 978
feAppMessageEndListing 977
feAppMessageStartListing 976
feAppModelContents 916feAppModelDefragment 917
feAppModelInfoShow 979
feAppRegisterAddIn 951feAppRegisterAddInPane 952
feAppRegisterAddInPaneWithFrame 953
feAppResetLocale 995feAppRunningApplicationInfo 961
feAppSetModel 911
feAppSetModel32 912feAppSetModelByName 913
feAppSetModelInfoShow 980
feAppShowWindow 957feAppStatusRedraw 972
feAppStatusShow 973
feAppStatusUpdate 974feAppUndoCheckpoint 992
feAppUndoClear 993
feAppUnlock 965feAppUnlockDraw 971
feAppUnlockExit 967
feAppUnlockModel 969feAppUpdateModelBox 790
feAppUpdatePanes 920
feAppVersion 991feAppVisiblel 958
feArcAngleCenterStart 417
feArcAngleStartEnd 416feArcCenterPoints 420
feArcCenterStartEnd 414
feArcChordCenterStart 418feArcPoints 419
feArcRadiusStartEnd 415
feArcTangentStartEnd 421feAutoMeshAssociativity 719
feBCCombine 571
feBoundaryAddSurfaces 462feBoundaryFromCurves 460
feBoundaryFromPoints 459
feBoundaryFromSurfaces 461feBoundaryUpdateSurfaces 463
feChartPaneCopy 403
feChartPaneGetDisplayed 401
feChartPaneSetDisplayed 402
feCheckCoincidentCurve 382feCheckCoincidentElem 384
feCheckCoincidentLoads 394
feCheckCoincidentNode 374feCheckCoincidentNode2 376
feCheckCoincidentNode3 377feCheckCoincidentNode4 378
feCheckCoincidentPoint 380feCheckConstraints 393
feCheckElemDistortion 386
feCheckElemDistortion2 388feCheckElemFixup 385
feCheckElemInterference 399
feCheckElemInterference2 400
feCheckElemNormal 392
feCheckPlanarNodes 383feCheckSumForces 395
feCheckSumForces2 397
feCircle2Point 425feCircle3Point 427
feCircleCenter 424
feCircleCenterPoints 428feCircleCenterTangent 429
feCircleConcentric 426
feCircleDiameter 423feCircleRadius 422
feCircleTangent Tangent 430
feCompute2DInvariants 597feConnectAuto 565
feConnectAuto2 566
feConnectLinear Parabolic 751
feCoordAlongCurve 823
feCoordArrayTransform 832
feCoordArrayTransform2 833feCoordColinear 834
feCoordCurveCenter 825
feCoordCurveMidpoint 824feCoordFromWorkplane 818
feCoordInSurface 827
feCoordIntersectCurves 820feCoordIntersectLines 821
feCoordOnNode 830
feCoordOnPoint 829feCoordOntoCurve 822
feCoordOntoLine 838
feCoordOntoPlane 837feCoordOntoSurface 826
feCoordPick 816
feCoordPickByMethod 817feCoordPlaneIntersect 839
feCoordRotate 836
feCoordSurface Intersect 828
feCoordToDirCos 835
feCoordToWorkplane 819
feCoordTransform 831feCoordVectorPla neIntersect 840
feCreateFunction 896
feCrossSectionReport 994
feCurveBreak 454
feCurveChamfer 458feCurveExtend 453
feCurveFillet 457
feCurveIntersectSolids 440feCurveJoin 456
feCurveOffsetCurveWasher 445
feCurvePad 450
feCurveParametricOnSurface 443feCurveProjectCurvesOntoSurfaces 557
feCurveProjectOntoSolid 441
feCurveProjectOntoSurfaces 442feCurvesBreakAtIntersection 455
feCurveSlice 444
feCurveSolidToFEMAP 560
feCurveSplitEdgeToEdge 449
feCurveSplitPointToEdge 448feCurveSplitPointToPoint 447
feCurveTrim 452
feCurveUpdateSurfaces 439feDelete 761
feDeleteAll 760
feDeleteConstraints 764feDeleteLoads 763
feDeleteMesh 762
feDeleteOutput 765feDeleteOutput2V2 766
feDeleteOutputEntry 767
feDeleteToolbar 933feDeleteUserCommand 928
feEdgesOfFreeFaces 814
feElemCountOnProp 606feElementFreeEdge 812
feElementFreeFace 813
feEntitySetVisibility 786feFileClose 233
feFileCurrent Directory 1009
feFileExecute 1006feFileExit 234
feFileGetName 1005
feFileMessageCopy 332feFileMessageLineNumber 335
feFileMessageSave 333
feFileMessageSelect 334feFileNew 231
feFileOpen 232
feFilePageSe tupReset 320
feFilePageSe tupSave 319
feFilePictureCopy 323
feFilePictureCopy2 324feFilePictureR eplay 327, 328
feFilePictureSave 325
feFilePictureSave2 326feFilePictureSaveJTMultiResults 330
feFilePreferencesReset 339
feFilePreferencesSave 338feFilePrint 321
feFilePrint2 322
feFileProgramRun 1007
feFileProgramRuning 1008
feFileReadAbaqus 268feFileReadAbaqusResults 275
feFileReadAcis 240
feFileReadAcisOpt 238feFileReadAnsys 269
feFileReadAnsysResults 276feFileReadCatia 241
feFileReadCatia2 243feFileReadCatiaV5 245
feFileReadCSVResults 280
feFileReadDxf 247feFileReadDyna 270
feFileReadDynaResults 277
feFileReadIdeas 274
feFileReadIges 251
feFileReadIgesAdv 249feFileReadJT 264
feFileReadMarc 271
feFileReadMarcResults 278feFileReadNastran 272
feFileReadNast ranResults 279
feFileReadNeutral 290feFileReadNeutral2 291
feFileReadNeutral3 292
feFileReadParasolid 255feFileReadParasolidOpt 253
feFileReadPatran 273
feFileReadProe 256feFileReadSo lidEdge 257
feFileReadSolidWorks 267
feFileReadStep 260feFileReadStepOpt2 258
feFileReadStl 265
feFileReadUg 266feFileRebuild 336
feFileRecoverDBData 337
feFileSaveAs 236feFileTimedSave 237
feFileWriteAbaqus 309
feFileWriteAcis 300feFileWriteAnsys 310
feFileWriteDyna 311
feFileWriteFNO2V2 298, 299feFileWriteFNOV2 297
feFileWriteIdeas 312
feFileWriteIges 301feFileWriteJT 305
feFileWriteMarc 313
feFileWriteNastran 314feFileWriteNeutral 294
feFileWriteNeutral2 295
feFileWriteParasolid 302feFileWriteSTAAD 315
feFileWriteStep2 303
feFileWriteStl 306feFileWrit eTopologyStl 307
feFileWriteVrml 308
feFormatReal 981
feGenerateCopy 541
feGenerateCopy2 543feGenerateRadialCopy 545
feGenerateRadialCopy2 546
feGenerateReflect 554feGenerateReflect2 555
feGenerateRotate 551
feGenerateRotate2 552
feGenerateScale 548feGenerateScale2 549
feGetCurrentLibraryName 983
feGetElemDistortion 390feGetElemDistortion2 391
feGetElementAdjacentFaces 890
feGetElementEdges 888
feGetElementFaces 887
feGetElementFa cesFromSet 889
feGetEntityVisibility 788
feGetInt 893
feGetMenuCommand 937feGetMenuCommands 936
feGetNodalAreaOnSurface 563
feGetNodalAreaOrLength 562feGetReal 891
feGetRealLength 892
feGetToolbarCommand 940feGetToolbarCommands 938
feGetToolbars 929
feGetToolbarSubCommands 939feGetUserCommands 926
feGFXDelete 1000
feGFXEnableView 1002feGFXLoad 998
feGFXReset 1003
feGFXSelect 1001feGroupBoolean 794
feGroupBoolean2 795
feGroupCombine 796feGroupEvaluate 793
feGroupFromCriteria 809, 810
feGroupGenElemShape 804feGroupGenElemType 803
feGroupGenerate 797
feGroupGenerate2 798feGroupGenMatl 802
feGroupGenProp 801
feGroupGenSolid 800feGroupGenVisible 808
feGroupMoveToLayer 806
feGroupPeel 805feGroupsContaining 807
feImprintLocati onInSurface 486
feLayerGet 350feLayerPut 349
feLicenseExpiration 983, 985, 990
feLicenseGettInfo 988feLicenseIsAvailable 987
feLicenseMethod 986
feLicensePrintInfo 989
feLine2Tangent 411
feLineAtAngl 407feLineHorzVert 406
feLineMidline 409
feLineParallel 408feLinePointDs 413
feLinePoints 405feLinePointTangent 410
feLineRectangle 412feLoadCombine 569
feLoadFromFreebody 570
feLoadToolbarLayout 950FEMAP
events 3158, 3160
FEMAP Basic Scripting 51
FEMAP FNO file 297, 298, 299
FEMAP Neutral file 290, 291, 292, 294, 295feMeasureAngle 365
feMeasureAngleBetweenNodesV2 366
feMeasureCurve 367feMeasureDistance 357
feMeasureDistanceB etweenGeometrys 359
feMeasureDistanceBetweenLines 363feMeasureDistanceB etweenNodes2 362
feMeasureDistanceB etweenNodesV2 361
feMeasureDistanceB etweenSolids 364
feMeasureDista nceToPlane 358
feMeasureMeshMassProp 370
feMeasureMeshS ectionProp 373
feMeasureSolidMassProp 369
feMeasureSurfaceArea 368
feMeasureSurfSectionProp 372feMeshApproachSurface 625
feMeshAttach 720
feMeshAttachNodes 721feMeshAttrCurve 621
feMeshAttrPoint 620
feMeshAttrSolid 624feMeshAttrSurface 623
feMeshBetween 649
feMeshBuildRemeshRegions 669feMeshCleanupSlivers 667
feMeshClosestLink 651
feMeshCoincidentLink 652feMeshConnectRigid 656
feMeshConvertFacets 666
feMeshCurve2 632feMeshDetach 722
feMeshEdgeMembers 673
feMeshEdgeMembers2 674feMeshEdgeRemoval 668
feMeshEdgeSplit 659
feMeshEdgeSplit2 660feMeshEditRemeshRegions 670
feMeshExtrudeCurve 681
feMeshExtrudeElem 677feMeshExtrudeElem2 679
feMeshHexSolid 645
feMeshHexSolidFromElements 647
feMeshPoint 626
feMeshPoint2 628feMeshRemesh 664
feMeshRemeshRegions 671
feMeshRevolveCurve 683feMeshRevolveElem 682
feMeshSizeCurve 609
feMeshSizeCurveMatchNodes 613
feMeshSizeCurveMatchXYZ 614feMeshSizePoint 608
feMeshSizePropogate 615
feMeshSizeSolid 618feMeshSizeSurface 616
feMeshSmooth 675
feMeshSmooth2 676
feMeshSurface 636
feMeshSurface2 634feMeshSurfaceByAttributes 638
feMeshSweepCurve 685
feMeshSweepElem 684feMeshTetSolid 643
feMeshTetSolid2 641
feMeshTetSolid3 639feMeshTransition 661
feMeshUnzip 653
feMeshUnzip2 654femodelFileVersionV2 341
feModifyColor 710
feModifyColorMultiple 711feModifyDefCSys 723
feModifyEdit 709
feModifyElemOrder 741feModifyElemPropID 735
feModifyElemRelease 740
feModifyElemReverse 739feModifyElemReverse2 738
feModifyElemType 748
feModifyFormulation 743feModifyLayer 713
feModifyLineElem entDirection 750
feModifyLoadPhase 734feModifyMaterialAngle 737
feModifyMidside 742
feModifyOffsets 745, 746feModifyOrient 747
feModifyOutCSys 724
feModifyPermBC 725feModifyPlateThickO ffsetBetweenNodes 752
feModifyPlateThickOffsetEquation 756
feModifyPlateThi ckOffsetReset 758
feModifyPlateThickOffsetValue 754
feModifyPropMatlID 736
feModifyReverseCurve 728, 729feModifySolidFacetting 732
feModifySplineKnots 727
feModifySplineOrder 726feModifySplitQuads 744
feModifySuperelementID 733
feModifySurface Divisions 730
feModifySurfaceNormal 731
feModifyTransparency 712feMoveBy 702
feMoveOffset 703
feMoveTo 701feNodesBetweenNodes 606, 687
feNotePut 318feNotesGet 317
feOutputCalculate 588feOutputColorGetRGB 905
feOutputCompare 596
feOutputCompareV2 595feOutputConvertV2019V ectorIDToV2020V2 590
feOutputConvertV2020V ectorIDToV2019V2 591
feOutputConvertV92VectorIDV2 589
feOutputForceBalance 592
feOutputForceBalance2 594feOutputFromLoad 584
feOutputGlobalPly 604
feOutputProcessConvertV2 578feOutputProcessCopyV2 574
feOutputProcessEnvelopeFromSets 581
feOutputProcessEnvelopeV2 579feOutputProcessErr orEstimateV2 583
feOutputProcessLin earCombinationV2 576
feOutputProcessMergeV2 575feOutputProcessRSS CombinationV2 577
feOutputProcessV2 572
feOutputTransform2 586fePlaneBisect 871
fePlaneCSys 872
fePlaneCurveNormal 874fePlaneLocation 868
fePlaneNodes 869
fePlanePick 866fePlanePickByMethod 867
fePlanePoints 870
fePlaneRotate 876fePlaneSurfaceNormal 873
fePlaneViewAlign 875
feProjectAlongVector 698feProjectOntoCurve 693
feProjectOntoPlane 699
feProjectOntoSolid 700feProjectOntoSurface 696
feProjectOntoVector 697
feRenumber 714feRenumberOpt 715
feRenumberOpt2 717
feResetToolbar 934feResultsRankingToDataTableV2 602
feResultsToDat aTable2V2 600
feResultsToDataTableV2 598feRotateBy 705
feRotateTo 704
feRotationFromDirCos 843feRotationToDirCos 842
feRotationTransform 841
feRunIOTest 340
feSaveToolbarLayout 949
feScale 708feScreenPctPick 904
feSelectOutput 878
feSelectOut putSets 883
feSelectOut putSets2 885
feSetCurrentLibraryName 984
feSetEntityVisibility2 787
feSetToolbarCom mandBitmap 948
feSetToolbarCom mandTitle 947
feSetToolbarCommandVisible 945
feSetToolbarSeparator 946feSetToolbarVisible 935
feSolidAdd 511
feSolidAlignSplits 538
feSolidChamfer 510
feSolidCleanup 527feSolidCleanupAdvanced 528
feSolidCommon 513
feSolidElementsInARow 689feSolidEmbed 514
feSolidEmbedFace 526
feSolidEmbedMultiple 515feSolidExplode 476, 477, 480, 504
feSolidExtendEdgesToSurfaces 558
feSolidExtendToSurface 532feSolidExtractCenterlines 561
feSolidExtrude 502
feSolidFillCavity 533feSolidFillet 509
feSolidIntersect 516
feSolidMidSurfaceManualInput 536feSolidMovePointOntoGeometry 559
feSolidPrimitives 500
feSolidRayFire 537feSolidRemove 512
feSolidRemoveBlendsBelowRadius 534
feSolidRemoveCurve 531feSolidRemoveFace 530
feSolidRemoveRedundantPoint 535
feSolidRevolve 503feSolidShell 517
feSolidSlice 518
feSolidSlice2 520feSolidSliceAlongFace 521
feSolidSliceAlongFace2 522
feSolidSliceMatch 519feSolidSliceWithCurve2 524
feSolidSliceWithSheet2 523
feSolidStitch 505feSolidStitchNoCleanup 506
feSolidSweep 507
feSolidSweepBetween 508feSolidThicken 539
feSplineBlend 437
feSplineEllipse 434feSplineHyperbola 436
feSplineMultipleCurves 438
feSplineParabola 435
feSplinePoints 431
feSplineTangent 433feSurfaceAlignedCurves 468
feSurfaceConvert 475
feSurfaceCorners 464feSurfaceCornersMultiple 465
feSurfaceEdgeCurves 467feSurfaceExtend 498
feSurfaceExtract 481feSurfaceExtrude 471
feSurfaceFromMesh 483
feSurfaceFromMesh2 484feSurfaceGetUnderlying 499
feSurfaceMidAttrib 495
feSurfaceMidAuto 488
feSurfaceMidAuto2 489
feSurfaceMidAuto3 490feSurfaceMidAuto4 491
feSurfaceMidSingle 487
feSurfaceNonManifoldAdd 476feSurfaceNonManifoldAdd2 477
feSurfaceNonManifoldAdd3 478
feSurfaceNonManif oldAddExpress 479
feSurfaceNormalDeviation 474
feSurfaceOffset 493
feSurfaceOffset2 494feSurfaceOffsetTangent 492
feSurfaceRayFire 485
feSurfaceRecoverManifold 480feSurfaceRemoveHole 482
feSurfaceRevolve 472
feSurfaceRuled 470feSurfaceSweep 473
feSurfaceTrimToSolid 496
feSurfaceTrimWithCurves 497feTextGet 355
feTextMultiPut 353
feTextPut 351feToolUnitConvert 344
feToolUnitConvertFactors 343
feTruncateReal 982feVarEval 348
feVarGet 347
feVarPut 346feVectorAngle 854
feVectorAngleAxis 855
feVectorArrayT ransform 845
feVectorAxis 860
feVectorAxisOfSurface 864
feVectorCrossPoduct 850feVectorDotProduct 851
feVectorFromBeam 847
feVectorLength 849feVectorNormaliz edDotProduct 852
feVectorNormal ToSurface 862
feVectorNormalToView 863feVectorPerp endicular 853
feVectorPick 858
feVectorPickByMethod 859
feVectorPlaneIntersect 856
feVectorRotate 865feVectorTangentToCurve
vector
unit 861
feVectorToBeam 848
feVectorTransform 844
feVectorUnit 857
feViewAllViews 774feViewAutoscaleAll 772
feViewAutoscaleVisible 773
feViewCascade 779feViewRedraw 770
feViewRegenerate 771
feViewShow 775
feViewShow2 776
feViewShowMultiple 791feViewTile 777
feViewVisible 769
feWindowCascade 779feWindowMaximize 781
feWindowMinimize 780
feWindowRedraw 770feWindowRestore 782
feWindowSetRect 783
feWindowSetSize 784feWindowShow 775
feWindowShow2 776
feWindowTile 777feWindowTileHorz 778
feWindowTitle 785
feWindowVisible 769Field 1211
file
close 1182end 1181
jump to location in 1184, 1185
new 231, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 
998
open 232, 1179
position in 1183print 321, 322
read line from 1180
save as 236size 1186
time accessed 1189
time created 1187time written 1188
timed save 237
filename
get 1005
fillet
solid 509
Find 1381, 1795
FindAlIReferencedLayers 2611
FindColumn 1023FindColumnV2 1512
FindEmptyLayers 2612
FindLayerInfo 2610
FindMappedMeshingCorners 3013
FindMaxMin 2850FindMissingLayers 2613
FindRow 1019
First 1322, 1390, 1411, 1902FirstInSet 1903
FitVisible 3135FixedFormat 1207
fixup
elements 385
Free Edge 812
Free Face 813FreeCurvesAsSet 2924
Function object 2492, 2526
methods 2493, 2527
properties 2492, 2526
G
Geometry Preparation object 1160
methods 1167
properties 1160
Get 1403, 1884
Get Search 2656
GetAddm 2769GetAeroMeshSet 2749
GetAll 2168, 2753, 3054, 3059, 3064, 3067, 3070
GetAll2 3056, 3061GetAllArray 2189, 2424, 2638,  2650, 2668, 2679, 2754, 2871
GetAllArray2 2428, 2755
GetAllArray3 2430GetAllPly 2626, 2627
GetAllSavedSets 1353
GetAlternateTaper 1084GetAnsysFormulationArray 2464
GetAnsysKeyoptArray 2466
GetArray 1331GetAspectRatio 1080
GetBoxSet 1923, 1941
GetBuckle 2811GetCast 2771
GetCellDouble 3040
GetCellEntity 3043GetCellInteger 3041
GetCellText 3042
GetCellValue 2368GetCentroid 2444
GetCentroidArray 2445
GetCheckerboard 2773GetClosest 2761, 2870
GetColumn 1516
GetColumnAbsMax 1519GetColumnComponents 1550
GetColumnInfo 1024, 1548
GetColumnInfo2 1025GetColumnInteger 1554
GetColumnMinMax 1518
GetColumns 1517
GetColumnSum 1520
GetColumnText 1037GetColumnTitle 1031, 1513, 2371
GetColumnValue 1035, 2372
GetColumnVectorV2 1515GetColumnVisible 1027
GetColumnWidth 1029
GetCombination 2200, 2694
GetCombinations 2403GetCombined 1098
GetCombinedCurves 2317
GetComponentSet 2748GetConstraints 2813
GetContactList 2240
GetContactTable 1981, 2083
GetCoordArray 2756, 2872
GetCoordArray2 2757GetCorrelate 2078, 2079
GetCycSym 2775
GetData 1376, 2388, 2391GetDataSeries 2212
GetDataSurf 2353
GetDataSurfInfo 2384GetDataSurfType 2392
GetDataType 1379
GetDisplacement 2799GetDivisionList 1917
GetEdgeNodes 2455
GetEign 2809GetElements 2477, 2480
GetElemV2 2803
GetElemWithCorner 2842GetElemWithCornerColumnsV2 1563
GetElemWithCornerSet 2844
GetElemWithCornerSetV2 1571GetEntities 2242, 2773, 2777, 2779, 2781, 2783, 2797
GetEntityOptions 1757
GetEntitySet 2243GetEntityStatus 1756
GetEntityType 2222
GetEntityTypes 1755GetESE 2805
GetExplicitTimeStep 1100
GetExtrusion 2777GetEyeDirection 3145
GetFaceArea 2448
GetFaceCentroid 2446GetFaceNodes 2453
GetFaceNodes2 2454
GetFaceNormal 2447GetFirstPathID 3154
GetFreq 2807
GetFREQ1Data 2515GetFREQ2Data 2516
GetFREQ3Data 2517
GetFREQ4Data 2518GetFREQ5Data 2519
GetFREQData 2514, 2520
GetFREQType 2513
GetFromSet 2818
GetFunction 3028GetFunctionList 2527
GetGroup 1057
GetIBRadiCount 1938GetInRow 1525
GetInt 1378GetInternalAngle 1086
GetJacobian 1096GetLevelFloat 2410
GetLevelInteger 2407
GetLibrary 1885GetLibraryOfType 2722, 2907
GetList 2576
GetMatl 2792
GetMatlOrientVec 2470
GetMatrixEntity 2397GetMatrixList 2399
GetMaxSize 2781
GetMeshLoc 2310GetMeshLocXYZ 2311
GetMinMaxEdgeLength 2461
GetMinSize 2779GetModel 1449, 2822
GetModelDataContourForm 3137
GetModelDataContourType 3139GetModelDefaults 1077
GetMptSet 2100
GetMultiCellDouble 3048GetMultiCellInteger 3049
GetMultiFaceInfoArray 2451
GetMultiGroupList 3120GetMultipleInRow 1526
GetNastranHexAR 1130
GetNastranHexDetJ 1134GetNastranHexEPIA 1136
GetNastranHexEPLR 1132
GetNastranHexWarp 1138GetNastranPenAR 1140
GetNastranPenDetJ 1144
GetNastranPenEPIA 1146GetNastranPenEPLR 1142
GetNastranPenWarp 1148
GetNastranPyrAR 1150GetNastranPyrDetJ 1154
GetNastranPyrEPIA 1156
GetNastranPyrEPLR 1152GetNastranPyrWarp 1158
GetNastranQuadAR 1110
GetNastranQuadIAMax 1112GetNastranQuadIAMin 1108
GetNastranQuadSkew 1102
GetNastranQuadTaper 1104GetNastranQuadWarp 1106
GetNastranTetraAR 1122
GetNastranTetraDetJ 1126GetNastranTetraEPIA 1128
GetNastranTetraEPLR 1124
GetNastranTriaAR 1118
GetNastranTriaEPLR 1120
GetNastranTriaIAMax 1116GetNastranTriaSkew 1114
GetNastranWarping 1092
GetNextPathID 3155GetNodalSums 2486
GetNodeList 2435
GetNodeSet 1940
GetNumberLevels 2406GetOffset 2247, 2249, 2251
GetOptLimits 2096
GetOptMCs 2098GetOptVars 2094
GetOutputDataSurface 2708
GetOutputList 2819
GetOutputListAtID 2820
GetOutputListAtSet 2821GetPageInfo 2385
GetPageTitle 2377
GetPageValue 2379GetPlSym 2783
GetPly 2624, 2625
GetPrecision 2346GetProp 2790
GetRadiList 1929
GetReal 1377GetRotationAngles 3147
GetRow 1527, 1528
GetRowInfo 1020GetRows 1529
GetRowsAndColumns 1531
GetRowsAndColumnsByID 1532GetRowsByID 1530
GetRowTitle 2373
GetRowValue 2375GetRowValues 1038
GetRowVisible 1021
GetSavedSet 1352GetSavedSetType 1366
GetSBRadiCount 1937
GetScalarAtBeamColumnsV2 1565GetScalarAtBeamSetV2 1572
GetScalarAtElem 2837
GetScalarAtElemSet 2838GetScalarAtElemSetV2 1569
GetScalarAtNode 2828
GetScalarAtNodeColumnV2 1557, 1559GetScalarAtNodeSet 2829
GetScalarAtNodeSetV2 1568
GetSearch 2173, 2664GetSectionCutSums 2488
GetSelected 1231
GetSelectedID 1232GetSelection 1064
GetSet 1380
GetShellT 2788GetSingleFaceInfoArray 2449
GetSkew 1088
GetSort 1061
GetSPCForce 2801
GetSpringOrient 2438, 2440GetStandardTrim 1983, 2090
GetStep 1989
GetSumAtNode 2487GetSurfaceSet1 1945
GetSurfaceSet2 1946GetTaper 1082
GetTetCollapse 1094GetText 2070, 2076, 2077
GetThetaList 1927
GetTitle 1404, 2414GetTitleIDList 1890
GetTitleList 1889
GetTopology 2786
GetTrimControlSurf 1985, 2092
GetUsedFREQS 2076GetValue 1524, 2529
GetValueArray 2723, 2909
GetVarID 3073GetVectorAtNode 2833
GetVectorAtNodeColumnsV2 1561
GetVectorAtNodeSet 2834GetVectorAtNodeSetV2 1570
GetVectorAtSingleNode 2832
GetView 1631GetWarping 1090
GetXY 2220
GFXArrow object 2530
properties 2530
GFXLine object 2535
methods 2531, 2536properties 2535
GFXPoint object 2540
methods 2541properties 2540
GFXQuad4 object 2545
methods 2546properties 2545
GFXTria3 object 2551
methods 2552properties 2551
global boolean properties 172
global constant 58global integer properties 163
global real properties 170
global string properties 175GlobalPly object 2557
methods 2557
properties 2557
GlobalStep object 2559
methods 2566
properties 2559
group
boolean 794, 795
combine 796create 797
create based on property 801
create based on solids 800
evaluate 793
generate based on element type 803generate based on layers  of solid elements 805
generate based on materials 802
move to layer 806selection rules 1243
Group object 2569
list types 2573
methods 2574properties 2569
range types 2571
Grow 1223
H
HasCommon 1309, 1310HasFullGlobalPly 2634
HasGlobalPly 2632
HasList 2577HasMaterial 2633
HasMatl 2469, 2913
HasMeshSize 2339HasOutputSet 2157
HasPole 3005
HasPrevious 1171HasProp 2468
I
I-DEAS file 312I-DEAS Universal file 274
IDs
renumber 714, 715
IGES file 249, 251, 301
import
ABAQUS 268, 275ACIS 238, 240
ANSYS 269, 276
CATIA 241, 243CATIAV5 245
CSV 280
DXF 247FEMAP Neutral 290, 291, 292
I-DEAS 274
IGES 249, 251JT 264
LS-DYNA 270, 277
MARC 271, 278NASTRAN 272, 279
Parasolid 253, 255
Patran 273ProE 256
PRT 266
SolidEdge 257SolidWorks 267
STEP 258, 260
STL 265
IncludeOtherEntities 1720, 1737, 1772
IncludeOtherEntities2 1721, 1738
Inertia 2460, 2905
InitAllLayerInfo 2603
InitAnalysisCase 1978InitAnalysisMgr 2069
InitAnalysisStep 2151
InitElemWithCorner 2840InitGlobalStep 2566
initialize 3032InitializeAt tributes 2943
InitLayerContentsInfo 2604
InitLayerGroupReferenceInfo 2605InitLayerViewReferenceInfo 2606
InitMeshAttributes 2348, 3024
InitScalarAtElem 2836, 2848
InitScalarAtNode 2827
InitVectorAtNode 2831InPlace 1732
InsertPly 2618, 2619
Inside 2935, 2953InsideXYZ 2954
interface
embedded 954, 959unlock 965, 967, 969, 971
visible 958
InterferenceBodyCount 1920InterferenceBodyDivisionsByProp 1936
InternalAngle 1087
intersect
solids 516
intersection
coordinates 828, 839, 840
IntField 1212
IsAdded 1286, 1384
IsApiColumn 1514IsArrayAdded 1287
IsBlend 2989
IsBoundingSolidRegion 2990IsCombinedCurve 2316
IsCone 2987
IsCylinder 2985IsEmpty 1345, 1346, 1347, 1348, 2262
IsEnabled 2259, 2269, 2732
IsFacet 2350, 2945, 2947, 2948, 3025IsGeneral 2326, 2934
IsIdenticalSet 1289
IsLayerVisible 3126IsMappable 3017
IsMappedApproach 3016
IsMergeable 2328, 2329, 2330IsMidsideNode 2762
IsMultiLoop 3022
IsNonManifold 2325, 2327IsParabolic 2456
IsPlane 2984
IsPopulated 1508IsSetAdded 1288
IsSheet 2932
IsSmoothEdge 2312
IsSolid 2931
IsSphere 2986IsStraight 2323, 2324
IsSuppressed 2337, 3014
IsTorus 2988IsTotalLoad 2645
IsWire 2933
J
Jacobian 1097
JT file 264, 305
Jump 1422jump
to file location 1184, 1185
K
knots
BSpline curves 727
L
Laminate 1804LaminateGlobalPly 1806LaminateGlobalPlyWithCorners 1807
LaminateSolid 1812
LaminateSolidGlobalPly 1814LaminateWithCorners 1805
Last 1323, 1391, 1412, 1904
layer
get information 350
modify 713
update 349
Layer object 2602
methods 2603
properties 2602
Layup 2902
Layup object 2614
methods 2616properties 2614
Length 2295, 2458
length
vector 849
license 983, 985, 986, 987, 988, 989, 990
Line 1799line
create at angle 407
create between other lines 409
create betw een points 405
create horizontal or vertical 406
create parallel 408create rect angle 412, 413
create tangent to curve 410
create tangent to curves 411
line elements
modify 747
LineAllLocations 1800LineInit 1205
LineOther 1801
List 2574
listing 976, 977
load
combine 569
from Freebody 570
LoadBolt object 2635methods 2636
properties 2635
LoadDefinition object 2640
methods 2641
properties 2640
LoadETemp object 2647
methods 2648
properties 2647
LoadGeom object 2652
load types 2658methods 2656
properties 2652
LoadGroup 1227LoadMesh object 2660
load types 2675
methods 2664properties 2660
LoadNTemp object 2676
methods 2677properties 2676
loads
coincident 394LoadGeom types 2658
LoadMesh types 2675
update phase 734
LoadSet object 2681
methods 2686
properties 2681
Lock 1065
lock
interface
interface
lock 964, 966, 968, 970
LS-DYNA file 270, 277, 311
M
MapData
Clear 1574Count 1576
DefineBool 1582
DefineInt 1581DefineReal 1580
DefineVariant 1584
GetBool 1593GetIDs 1577
GetInt 1592
GetReal 1591GetString 1594
GetVariant 1595
Initialize 1575
object 1573
Remove 1578RemoveAll 1579
SetBool 1588
SetInt 1587SetReal 1586
SetString 1589
SetVariant 1590
MapData object
methods 1574
MapFromModelToL ocationV2 2706
MapFromModelToSet2V2 2703MapFromModelToSetV2 2700
MapOutput object 2698
properties 2698
MapOutputDataToLocation 2709
MARC file 271, 278, 313MassProp 2929
Match 1324
Material 2901material
access properties 2714
array index values 2714update 736
material angle
update 737
Material object 2712
methods 2720
properties 2712
Matl 2443
maximize
window 957
MaxNormalDeviation 3003
measure
angle 365, 366curve 367
distance between geometry 359
distance between lines 363distance between nodes 361, 362
distance between solids 364
mesh mass properties 370solid mass properties 369
surface area 368
measure distance 357measure distance to plane 358
memory
allocating 57
Merge 1772
MergeTool Object 1749
Mesh 1175, 3009mesh
approach on surfaces 625
attributes on curves 621attributes on points 620
attributes on solids 624
attributes on surfaces 623between locations 649
between nodes 651, 652
build remeshing regions 669
change remeshing regions 670, 671
cleanup slivers 667convert facets 666
edge split 659
extrude curves 681extrude elements 677
from elements 647from points 626, 628
generate on free e dges or faces 673
on curves 632
on solids 643, 645
on surfaces 634, 636project 700
remesh 664
remove edge 668
revolve curves 683
revolve elements 682size 608
size on curves 609
size on solid 618size on surfaces 616
sizes on points 608
smooth 675surface 638
sweep curves 685
transition 661unzip 653
Mesh Point Definition object 2739
Mesh Point object 2730MeshBodies 1874
MeshCount 2341
meshing attributes 495Meshing object 1160
methods 1167
properties 1160
MeshOnMesh 1875
MeshParam 2298
message
copy 332
save 333
select 334write 975, 976, 977
MessageBox 894
Midpoint 2344midside nodes
update 742
midsurface
create 487, 488, 489
minimize
window 957
MinRadiiOfCurvature 3006
MinRadius 2335
model 104ModelRotation 3150
modify
color 710, 711constraints 725
coordinate systems 724
edit 709
element offsets 745, 746
element type 748layers 713
line element di rection 750, 751
line elements 747node superelementID 733
quadrilateral element 744
solid facetting 732
surfaces 730, 731transparency 712
Monitor Point object 2744
methods 2746properties 2394, 2744
move
elements 703
nodes, points, coordina te systems 701, 702
MoveTool Object 1735MsgBox 894
multi-dimensional 56
N
NASTRAN file 272, 279, 314NastranHexAR 1131
NastranHexDetJ 1135NastranHexEPIA 1137
NastranHexEPLR 1133
NastranHexWarp 1139NastranPenAR 1141
NastranPenDetJ 1145
NastranPenEPIA 1147NastranPenEPLR 1143
NastranPenWarp 1149
NastranPyrAR 1151NastranPyrDetJ 1155
NastranPyrEPIA 1157
NastranPyrEPLR 1153NastranPyrWarp 1159
NastranQuadAR 1111
NastranQuadIAMax 1113NastranQuadIAMin 1109
NastranQuadSkew 1103
NastranQuadTaper 1105NastranQuadWarp 1107
NastranTetraAR 1123
NastranTetra DetJ 1127
NastranTetraEPIA 1129
NastranTetraEPLR 1125
NastranTriaAR 1119NastranTriaEPLR 1121
NastranTriaIAMax 1117
NastranTriaSkew 1115NastranWarping 1093
new
file 231, 907, 908, 909, 911, 912, 913, 914, 915, 916, 917, 
998
Next 1315, 1387, 1409, 1522, 1899
NextAfter 1316
NextBC 2165, 2195
NextBCDef 2198NextEmptyAfter 1317
NextEmptyID 1911
NextEmptySet 1415, 1907NextID 1318, 1909
NextInSet 1900NextLayerInfo 2609
NextLoad 2643, 2689NextLoadDef 2692
NextMeshPoint 2741
NextOnEntity 2182, 2674NextOnNode 2170
NextSavedSet 1363
NextSet 1413, 1462, 1905
NextSetReset 1461
NextStudy 1455NextStudyReset 1454
NextVector 1475
NextVectorResetV2 1474Nodal 1796
NodalOther 1798
NodalWithComponents 1797node
coordinates 830
modify 733
Node object 2752
methods 2753
properties 2752
Nodes 2302, 2863, 2937, 2992
nodes
access 2423attach to geometry 719, 720, 721
coincident 374, 376, 377, 378
detach from geometry 722move 701, 702
planar 383
project 693, 696, 697, 698, 699to define plane 869
update midside 742
NodesAsSet 2202, 2264, 2304, 2696, 2865, 2939, 2994
NonExistingUse rVectorV2 1484
Normal 2315, 2961
NormalAtXYZ 2962NormalBox 3002
normals
elements 392reverse 738, 739
notes
get 317put 318
NumberOfColumns 1511
NumberOfRows 1510NumberOfSets 1460
NumberOfStudies 1453
O
object
Aero Panel/Body 1916Aero Property 1926
Aero Spline 1939
Aero Surface 1942AnalysisCase 1949
AnalysisMgr 2013
AnalysisStep 2143
AnalysisStudy 2154application 51, 104
BCDefinition 2162
BCEqn 2167BCGeom 2171
BCNode 2183
BCSet 2191
Beam Calculator 1606
BodyMesher 1863chart 2203
chart data series 2214
Connection 2266Connection Property 2223, 2766, 2784, 2794
Connection Region 2236
Contact 2236CopyTool 1711
creating 1877
CSys 2277curves 2281
destroying 1882
Direct Matrix Input 2394DiscreteValueSet 2405
Draw/Erase 1618, 3142
Element 2420, 2473Element Quality 1072
Entity 1883
Entity Tracking 1597Function 2492, 2526
Geometry Preparation and Meshing 1160
GFXArrow 2530GFXLine 2535
GFXPoint 2540
GFXQuad4 2545GFXTria3 2551
GlobalPly 2557
GlobalStep 2559Group 2569
Layer 2602
Layup 2614LoadBolt 2635
LoadDefinition 2640
LoadETemp 2647LoadGeom 2652
LoadMesh 2660
LoadNTemp 2676LoadSet 2681
MapData 1573
MapOutput 2698Material 2712
MergeTool 1749
Mesh Point 2730
Mesh Point Definition 2739
Monitor Point 2744MoveTool 1735
Node 2752
Optim 2763Optimization Manufact uring Constraint 2766
Optimization Relationship 2784Optimization Re sponse 2794
Output 2814OutputSet 2851
Plane 2860
Point 2862properties 117
Property 2873
PublishTable 1846
PublishTool 1826
Readfile 71, 1178Reference 2914
Report 2916
Results Browsing 1443Results Vector ID Query Object 1783
Selector 1017, 1215
Set 1236Solid 2918
Sort 1367
Stress Linearization 1821superelement reference 2917
Surface 2949
Table Data 3027TMG 3063
TMGBC 3053
TMGCtrl 3058TMGOpt 3066
TMGReal 3069
tools 1013User Defined Graphics 1629
UserData 1402
Variable 3072Vector 3078
View 3080
objects
FEMAP 51
offsets
element 745, 746
OnPoint 2733
open
file 232, 1179
Optim object 2763
methods 2700, 2764
properties 2698, 2763
Optimization Relati onship Object 2784
Optimization Res ponse Object 2794
OptMC Object 2766order
BSpline 726
elements 741
output
calculate 588
compare 595, 596
components 2816
convert vector ID 589, 590, 591
example creating 64
force balance 592, 594
from loads 584process 572, 574, 575, 576, 577, 578, 579, 583
vector IDs 2817
output coordinate system 724
Output object 2814
methods 2818
properties 2814
OutputSet object 2851
methods 2740, 2853
properties 2154, 2739, 2851
OutputSets 2156
outputV2
transforming 586
OutputVectors2 2854
P
page setup
reset 320
save 319
PanelChordCount 1922PanelSpanCount 1921
panes 919, 920
ParamAtLength 2297parametric coordinates 827
ParamOnCombinedCurve 2336
ParamToXYZ 2289, 2955Parasolid file 253, 255, 302
ParseTitleID 1892
PartialLength 2296PartialLengthNode 2322
PartialLengthXYZ 2321
PartMesher object
properties 1863
Paste 1234
Patran file 273Performance 116
PFACT 2011, 2124
phase
loads 734
Pick
Screen 904
pick
coordinates 816, 817
picture
copy 323, 324
JT 330
replay 327, 328save 325, 326
Planar 2979
planar
nodes 383
plane
bisect 871
define 866, 867, 868
define with nodes 869define with points 870
normal 873, 874, 875
principal 872
Plane object 2860
Plate 1802PlateOther 1808
PlateWithCorners 1803point
coordinates 829
Point object 2862
methods 2731, 2863
properties 2730, 2862
PointLoops 3023
Points 2920, 2975
points
coincident 380
mesh size 608
move 701, 702project 693, 696, 697, 698, 699
to define plane 870, 871
PointsAsSet 2921, 2976PointToPoint 1724, 1740, 1774
Populate 1507
Position 1421position
in file 1183
window 955
preferences
reset 339
save 338
Prepare 1173
Prev 1319, 1388, 1410, 1901
PrevBefore 1320PrevEmptyID 1912
PrevEmptySet 1416, 1908
PrevID 1321, 1910Preview 2089
PrevSet 1414, 1906
primitive
create 500
principal planes 872
Print 1071print
file 321, 322
ProE file 256program
run 1006, 1007, 1008
Project 2291project
coordinates 822, 826, 837, 838
mesh 700nodes 696, 697, 698, 699
nodes/points 693
points 696, 697, 698, 699
ProjectAlongVector 2293, 2965
ProjectOnto 2963
ProjectToClosest 2292, 2964
Prop 2267, 2442
properties
elements 735
global boolean 172
global integer 163global real 170
global string 175
update material 736
Property object 2873
access properties 2875
array index values 2877
methods 2894properties 2873
PSDCOM 2012, 2125
PSDUNIT 2010, 2123
Publish 1633, 1862
PublishTable
object 1846
PublishTable object
methods 1847
PublishToClipboard 1843
PublishToFile 1844
PublishTool
object 1826
PublishTool object
methods 1827
Put 1405, 1887
PutAeroMeshSet 2747
PutAll 2163, 2169, 2531, 2536, 2541, 2546, 2552, 2641, 2758, 2861, 3055, 3060, 3065, 3068, 3071, 3079
PutAll2 3057, 3062
PutAllArray 2190, 2432, 2532, 2537, 2542, 2547, 2553, 2639, 2651, 2672, 2680, 2759
PutAnsysFormulationArray 2465
PutAnsysKeyoptArray 2467PutArray 2188, 2637, 2649, 2670, 2678
PutCombination 2201, 2400, 2695
PutCombinations 2402PutComponentSet 2746
PutContactList 2241
PutContactTable 1982, 2084PutCoordArray 2533, 2538, 2543, 2549, 2555, 2760
PutCoordNormalArray 2548, 2554
PutCorrelate 2080, 2081PutDataSurf 2354
PutDivisionList 1918
PutElemWithCorner 2846PutFunction 3029
PutFunctionList 2528
PutLibrary 1888PutMatrixEntity 2396
PutMatrixList 2398
PutMptSet 2101PutMptSetID 2102
PutNodeList 2436
PutOptLimits 1988, 2097PutOptMCs 2099
PutOptVars 2095
PutOutputList 2826
PutRadiList 1930
PutSavedSet 1354PutScalarAtElem 2839, 2849
PutScalarAtNode 2830
PutStandardTrim 1984, 2091PutStep 1990
PutSurfaceSet1 1943PutSurfaceSet2 1944
PutText 2069, 2070, 2071PutThetaList 1928
PutTitle 1406
PutTrimControlSurf 1986, 2093PutUsedFREQS 2077
PutValue 2727, 2911
PutValueArray 2725, 2910
PutVectorAtNode 2835
Pythion
example using 87
Python 87
Q
quadrilateral elements
modify 744
R
Range 2579RangeAdd 2584
RangeDelete 2585RangeDeleteAll 2586
RangeGetAll 2582
RangeNext 2583RangeReset 2581
RationalParamToXYZ 3007
read 1180ReadBool 1438
ReadBoolArray 1441
ReadDouble 1434ReadDoubleArray 1439
Readfile
example using 71
Readfile object 1178
methods 1179
properties 1178
ReadFloat 1435
ReadLong 1436
ReadLongArray 1440ReadShort 1437
ReadString 1442
RealField 1213rebuild 336, 337
recover 337
rectangle
create 412, 413
Redraw 3124
redraw
view 770
Reference object 2914
ReferencedGroups 2600
reflect 554
Regenerate 3125regenerate
view 771
register
application 951, 952, 953
releases
beam 740
Reload 1311
Reload2 1313remesh 664
Remove 1298, 1382
RemoveAllDataSeries 2211
RemoveAllMeshPoints 3020
RemoveAllOutputSets 2160RemoveArray 1300
RemoveDataSeries 2210
RemoveDuplicates 2263RemoveFromSavedSet 1360
RemoveGroup 1306
RemoveInternalCurves 1307, 1308RemoveMeshPoint 3019
RemoveNotCommon 1304, 1305
RemoveOutputSets 2159RemovePrevious 1172
RemoveRange 1299
RemoveRule 1302RemoveSet 1301, 1383
RemoveSetFromSavedSet 1361
RemoveSetRule 1303renumber
IDs 714, 715
Reparse 1206Report object 2916
methods 2861, 2915, 2916, 3079
properties 2351, 2860, 2914, 2916, 3078
Reset 1314, 1386, 1408, 1521, 1898
ResetLayerInfo 2608
ResetMeshAttr 3008ResetNextBC 2164, 2194
ResetNextBCDef 2197
ResetNextLoad 2642, 2688ResetNextLoadDef 2691
ResetNextMeshPoint 2740
ResetPrecision 2347ResetSavedSet 1362
Resize 2386, 3033
Results Browsing object 1443
bulk data review methods 1488
entity value methods 1486
general methods 1448properties 1443
set methods 1460
Update and Save  methods 1452, 1542
vector methods 1474
Results Vector ID Query Object 1783
Reverse 2257, 2285
revolve
elements 682solid 503
rigid element
example creating 74
RollThru 3153
Rotate 3128rotate 551
coordinate system 841, 842, 843coordinates 836
entities 704, 705
RotateAroundVector 1729, 1730, 1745, 1746, 1779RotatePointToPoint 1780
S
Save 1067, 1556
save as 236
SaveColumn 1555SaveGroup 1226
SaveToFile 3031
scale 548
entities 708
section properties
mesh 373surface 372
Select 1290, 1393
SelectAllOnLayer 2599SelectBox 1219
SelectCircle 1220
SelectContact 2598SelectCurrentModel 1754
SelectEntity 1762
SelectFreehand 1222SelectGroup 1764
SelectID 1291, 1394, 1913
SelectIDInSetV2 1293SelectIDWithNew 1292, 1914
SelectList 1296, 1395
SelectMesh 2597SelectModel 1752, 2596
SelectModelByName 1753
SelectMultiIDV2 1294Selector object 1017, 1215
methods 1216
properties 1215
SelectOutputVe ctorIDV2 1295
SelectPolygon 1221
SendToDataTable 1451Set
object 1236, 1367, 1606, 1618, 2405, 3142
Set object
methods 1237
properties 1236, 1606, 1618, 3142
SavedSet methods 1351
set Object
show 1343
ShowAutoscale 1344
SetAdd 2587
SetAdd2 2588SetAddm 2768
SetAddOpt 2589
SetAddOpt2 2590, 2594SetAllPly 2622, 2623
SetAllStatus 1759
SetArbitrary 2181
SetAutoFormat 1210SetBackgroundColor 1054
SetCast 2770
SetCellBlank 2383SetCellDouble 3035
SetCellEntity 3039
SetCellEquation 2370, 3038
SetCellInteger 1856, 3036
SetCellReal 1855SetCellStyle 1854
SetCellText 1857, 3037
SetCellValue 2369SetCheckerboard 2772
SetColumn 1534
SetColumnAlignment 1034SetColumnGlobalPly 1505
SetColumnInfo 1547
SetColumnInteger 1553SetColumnPosition 1033
SetColumns 1535
SetColumnsComponents 1549SetColumnTitle 1032, 1551
SetColumnVectorV2 1552
SetColumnVisible 1028SetColumnWidth 1030
SetColumTitle 2381
SetColumValue 2382SetCombination 2856
SetComplexOptions 1471, 1472, 1506, 2824, 2855
SetConstraints 2812SetCreate 1472
SetCSysPattern 1717, 1770
SetCycSym 2774SetCylinder 2177
SetData 1372
SetDataType 1375SetDefaults 2235
SetDeveloperID 1351
SetElements 2478SetElemWithCornerColumnsV2 1564
SetEngrShearStrain 1500
SetEntities 2796SetEntityStatus 1761
SetExists 1463
SetExtrusion 2776SetEyeDirection 3144
SetFixed 2178
SetFixedFormat 1208SetFormat 1828
SetFormFeed 1203
SetFreeFormat 1209
SetFREQ1Data 2521
SetFREQ2Data 2522SetFREQ3Data 2523
SetFREQ4Data 2524
SetFREQ5Data 2525SetHasVectorsInDB 1470
SetInfo 1464SetInRow 1536
SetInt 1374SetLayerVisible 3127
SetLevelInteger 2408, 2411
SetLineTransform 1502SetLocation 1469
SetLocationFromCoord 2489
SetMaxSize 2780
SetMinSize 2778
SetModel 1450, 2823SetModelDataContourForm 3136
SetModelDefaults 1076
SetMultiCellInteger 1860, 3046SetMultiCellReal 1859
SetMultiCellStyle 1858
SetMultiCellText 1861, 3047SetMultiGroupList 3121
SetMultipleCellDouble 3044
SetMultipleInRow 1537SetName 1632
SetNoBlankLines 1192
SetNodalTransform 1501SetNodes 2481
SetNoRotation 2180
SetNoShortLines 1193SetNotes 1468
SetNumbering 1714
SetOffset 2246SetOutputType 2245
SetPageTitle 2378
SetPageValue 2380SetParagraphAlignment 1829
SetParagraphIndent 1830
SetParagraphSpacing 1831SetPinned 2179
SetPlateThickness 2463
SetPlateTransform 1503SetPlSym 2782
SetPly 2620
SetPly2 2621SetPropertyOption 1719, 1772
SetQuad4Orientation 1497
SetQuad8Orientation 1498SetReal 1373
SetRealFormat 1852
SetRevision 1467SetRigidType 2252, 2253
SetRotationAngles 3146
SetRow 1538SetRows 1539
SetRowsAndColumnByID 1541
SetRowsByID 1540
SetRowTitle 1851, 2374
SetRowValue 2376SetRowVisible 1022
Sets 1471
SetScalarAtBeamColumnsV2 1566SetScalarAtElemColumnV2 1560
SetScalarAtNodeColumnV2 1558
SetSearch 1199
SetSearchString 1200SetSimpleMeshLoc 2340
SetSizeOnCurve 1872
SetSizeOnS urfaces 1873
SetSizes 1170
SetSkip 1198
SetSkipAfterSearch 1202
SetSolidOrientation 1499
SetSolidTransform 1504SetSpringOffset 2441
SetSpringOrient 2439
SetStatus 1760SetStudyCombination 2857
SetSubcase 1466
SetSurfDirection 2176SetSurfNormal 2175
SetSurfSliding 2174
SetTableStyle 1853SetTabSize 1204
SetTextColor 1053
SetTitle 1465, 2415SetTotalLoad 2646
SetTri3Orientation 1495
SetTri6Orientation 1496SetTrimEndSpace 1195
SetTrimFront 1196
SetTrimSpace 1194SetupBuckle 2810
SetupDisplacement 2798
SetupEign 2808SetupElemV2 2802
SetupESE 2804
SetupFreq 2806SetupMatl 2791
SetUppercase 1197
SetupProp 2789SetupShellT 2787
SetupSPCForce 2800
SetupTopology 2785SetValue 1533
SetVectorAtNodeColumnsV2 1562
SetVectorPattern 1715, 1768SetView 1630
SheetFacesAsSet 2927
shell
solid 517
Show 1070, 1225, 2213
ShowDialog 1767ShowGroup 1058
ShowStatus 1191
Shrink 1224
Size 1174
size of file 1186Skew 1089
skipped 1190
SlenderBodyCount 1919SlenderBodyDivisionsByProp 1935
slicesolid 518, 519, 521
slivers
cleanup 667
SnapToAxes 3148
Solid 1809, 2343, 2869, 2966solid
add 511
chamfer 510
cleanup 527, 528
create 513create primitive 500
embed 514
embed face 526embed multiple 515
explode 476, 477, 480, 504
extrude 502fill hole 533
fillet 509
intersect 516modify 732
remove 512
remove face 530revolve 503
shell 517
slice 518, 519, 521stitch 505, 506
sweep 507
sweep between 508trim surface 496
Solid object 2918
methods 2920properties 2918
SolidEdge file 257
SolidOther 1811SolidWithCorners 1810
SolidWorks file 267
Sort 1396, 1567, 2413Sort object
methods 1368
properties 1367
SortRemoveDuplicates 1397
Spherical 2981
Spin 3156spline
create from curves 437, 438
create from ellipse 434create from hyperbola 436
create from parabola 435
create from points 431create from tangent vectors 433
split
elements 744
split surface 447, 448, 449
SPOPT 2009, 2122STAAD file 315
status bar 921, 922, 972, 973, 974, 1191
STEP file 258, 260, 303Stereolithography (STL) file 265, 306
stitch
solid 505, 506
Stress Linearization Object 1821StudyCreate 1452
StudyExist 1456
StudyInfo 1457StudyNotes 1459
StudyTitle 1458
Superelement Refe rence object 2917
surface
axis vector 864boundary 459, 460, 461, 462, 463
convert 475
coordinates on 826create 464
create between curves 470
create by extrusion 471create by revolution 472
create by sweeping 473
create from curves 467, 468extend 498
from mesh 483, 484
mesh 638meshing attributes 495
modify 730, 731
normal 474remove hole 482
trim 497
update 439
Surface object 2949
methods 2953
properties 2949
Surfaces 2313, 2925
SurfacesAsSet 2314, 2868, 2926
sweep
elements 684
solid 507
sweep between
solid 508
SymbolAddFillBrick 1703
SymbolAddFillCircle 1702SymbolAddFillCone 1705
SymbolAddFillCylinder 1704
SymbolAddFillSphere 1708SymbolAddFillTriangle 1701
SymbolAddFillTubeBrick 1706
SymbolAddFillTubeCylinder 1707SymbolAddLineBrick 1697
SymbolAddLineCircle 1696
SymbolAddLineCone 1699SymbolAddLineCylinder 1698
SymbolAddLinePoly 1695
SymbolAddLineSphere 1700
SymbolAddLineStraight 1694
SymbolAddPoints 1693SymbolCreate 1690
SymbolMarkForDeletion 1691
SymbolSetAddInScreen 1692T
Table Data object 3027
methods 3028
properties 3027
Tangent 2294
TangentAtEnds 2331
Tangents 2960
Taper 1083
TetCollapse 1095Text 3050
methods 3051
properties 3050
text
create or update 351, 353retrieve 355
Thickness 2457, 2903
timed save 237TMG object
properties 3053
TMGBC object 3053
methods 3054
TMGCtrl object 3058
methods 3059properties 3058
TMGInt object 3063
methods 3064properties 3063
TMGOpt object 3066
methods 3067properties 3066
TMGReal object 3069
methods 3070properties 3069
toolbars 918
Tooltips 1235Toroidal 2983
TrackData
Clear 1598Created 1604
Deleted 1605
Start 1599StartGeometry 1600
StartMesh 1601
Stop 1602, 1616StopAll 1603
TrackData object
methods 1598, 1608, 1619, 2406, 3144
transform
coordinates 831, 832, 833
vector 844, 848
transparency
modify 712
trim
surface 496, 497
Truncate 1424TurnOff 2512
TurnOffFreq 2075
TurnOn 2511
TurnOnFreq 2074TwoAxes 2280
U
UI 1177
Unigraphics (.PRT) file 266
unit vector 860, 861, 862, 863unlock
interface 965, 967, 969, 971
update
beam releases 740
coordinate systems 723
element formulations 743elements 741
loads 734
material angle 737material properties 736
midside nodes 742
surfaces 439
UpdateColumn 1046
UpdateColumnByID 1043
UpdateDataTable 1228UpdateMeshPoints 2735
UpdateMeshPoints OnGeometry 2736
UpdFreq 2495UpdFreq1 2498
UpdFreq2 2500
UpdFreq3 2502UpdFreq4 2504
UpdFreq5 2507
UpdFreq5ByFuncID 2508UpdFreqByFuncID 2496
User 1819
User Defined Graphics object 1629
methods 1630
UserData object 1402
methods 1403properties 1402
UserTable 1842
UseSizing 1869
V
VarAlongCoord 2355VarArbitrary3DCoord 2366VarBetween2Pts 2356
VarBetween4Pts 2358
VarBetween8Pts 2359VarEquation 2367
variable
add to model 346
retrieve 347
Variable object 3072
methods 3073
properties 3072
variant 53VarMeshSurface 2363
VarOutputMapV2 2362VarParametric2Pt 2360
VarParametric4Pt 2361
VarSpatialUVtable 2364VarSpatialXYZTable 2365
VB6 52, 55, 59
VBA 51
vector
at intersection 856create unit 860
length 849
normalize 857transform 848
transform
vector 847
unit 862, 863
Vector object 3078
VectorComponentsV2 1480VectorEntitiesV2 1482
VectorExistsV2 1476
VectorID 1485VectorInfoV2 1477
VectorLocationV2 1481
VectorRotation 3152vectors
angle between 854, 855
cross product 850dot product 851, 852
perpendicular 853
pick or enter 858, 859transform 844
VectorsV2 1483
VectorTitlesV2 1479VectorTitleV2 1478
VectorV2 2853
version 991view
all 774
cascade 779make visible 769
redraw 770
regenerate 771show 775
tile 777, 778
View object 3080
methods 3119
properties 3080
View Option
types 3105
ViewRotation 3149
visibility 786, 787
Visible 3123
visible 958Visual Basic 51, 52, 55, 59
create FEMAP object 104
Visual C++ 51, 56
example using 84
Volume 2944
VRML file 308
W
Warping 1091
washer 445
window
minimize or maximize 957
position 955
WireCurvesAsSet 2928
workplane coordinates
convert 818
WriteBool 1429
WriteBoolArray 1432
WriteDouble 1425WriteDoubleArray 1430
WriteFloat 1426
WriteLong 1427WriteLongArray 1431
WriteShort 1428
WriteString 1433
X
XYPoints 2278XYZToParam 2290, 2956
